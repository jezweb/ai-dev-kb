[
  {
    "codeTitle": "Creating Simple Lists with Angular Material",
    "codeDescription": "Demonstrates how to create a basic list using mat-list and mat-list-item components. This snippet shows a simple list with single-line text items.",
    "codeLanguage": "html",
    "codeTokens": 83,
    "codeId": "https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material List Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-list>\n <mat-list-item>Pepper</mat-list-item>\n <mat-list-item>Salt</mat-list-item>\n <mat-list-item>Paprika</mat-list-item>\n</mat-list>"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Using Parallel Function with Angular Component Harnesses",
    "codeDescription": "This snippet shows how to use the parallel function to simultaneously read multiple properties from a component harness, optimizing change detection to avoid excessive runs.",
    "codeLanguage": "typescript",
    "codeTokens": 116,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-11_snippet_2",
    "pageTitle": "Angular CDK Testing Infrastructure",
    "codeList": [
      {
        "language": "typescript",
        "code": "it('reads properties in parallel', async () => {\n  const checkboxHarness = loader.getHarness(MyCheckboxHarness);\n  // Read the checked and intermediate properties simultaneously.\n  const [checked, indeterminate] = await parallel(() => [\n    checkboxHarness.isChecked(),\n    checkboxHarness.isIndeterminate()\n  ]);\n  expect(checked).toBe(false);\n  expect(indeterminate).toBe(true);\n});"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Displaying a Font Icon with Ligature in Angular Material",
    "codeDescription": "This snippet demonstrates how to use a ligature-based font icon with the mat-icon component. The text content of the component represents the icon to be displayed.",
    "codeLanguage": "html",
    "codeTokens": 52,
    "codeId": "https://github.com/angular/components/blob/main/src/material/icon/icon.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Icon Component Usage Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-icon>home</mat-icon>"
      }
    ],
    "relevance": 0.992
  },
  {
    "codeTitle": "Toggling Angular Material Menu Programmatically in TypeScript",
    "codeDescription": "Demonstrates how to programmatically open a menu using the MatMenuTrigger API. This requires attaching the menu to a trigger element in the DOM using the matMenuTriggerFor directive.",
    "codeLanguage": "typescript",
    "codeTokens": 78,
    "codeId": "https://github.com/angular/components/blob/main/src/material/menu/menu.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Menu Component Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "class MyComponent {\n  @ViewChild(MatMenuTrigger) trigger: MatMenuTrigger;\n\n  someMethod() {\n    this.trigger.openMenu();\n  }\n}"
      }
    ],
    "relevance": 0.992
  },
  {
    "codeTitle": "Basic Usage of Angular Material Progress Spinner Component",
    "codeDescription": "Shows the basic syntax for using the mat-progress-spinner component in an Angular template.",
    "codeLanguage": "html",
    "codeTokens": 33,
    "codeId": "https://github.com/angular/components/blob/main/src/material/progress-spinner/progress-spinner.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Progress Spinner Component Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-progress-spinner>"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Configuring Default Form Field Appearance in Angular",
    "codeDescription": "This snippet demonstrates how to configure the default appearance for all mat-form-field components in an Angular application using a global provider. It sets the default appearance to 'outline' instead of the default 'fill'.",
    "codeLanguage": "typescript",
    "codeTokens": 81,
    "codeId": "https://github.com/angular/components/blob/main/src/material/form-field/form-field.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Form Field Component Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@NgModule({\n  providers: [\n    {provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {appearance: 'outline'}}\n  ]\n})"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Creating Component Harnesses for Menu Components",
    "codeDescription": "Demonstrates how to implement harnesses for a menu component using composition of smaller harnesses. Shows locatorFor methods to get references to child harnesses.",
    "codeLanguage": "typescript",
    "codeTokens": 157,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-11_snippet_8",
    "pageTitle": "Angular CDK Testing Infrastructure",
    "codeList": [
      {
        "language": "typescript",
        "code": "class MyMenuHarness extends ComponentHarness {\n  static hostSelector = 'my-menu';\n\n  protected getPopupHarness = this.locatorFor(MyPopupHarness);\n\n  /** Gets the currently shown menu items (empty list if menu is closed). */\n  getItems = this.locatorForAll(MyMenuItemHarness);\n\n  /** Toggles open state of the menu. */\n  async toggle() {\n    const popupHarness = await this.getPopupHarness();\n    return popupHarness.toggle();\n  }\n}\n\nclass MyMenuItemHarness extends ComponentHarness {\n  static hostSelector = 'my-menu-item';\n}"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Implementing a Chip Grid with Input in Angular Material",
    "codeDescription": "This snippet shows how to create a chip grid with an input field for entering sandwich fillings. It uses mat-chip-grid, mat-chip-row, and mat-form-field components along with various chip-related directives.",
    "codeLanguage": "html",
    "codeTokens": 208,
    "codeId": "https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-11_snippet_6",
    "pageTitle": "Angular Material Chips Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-form-field>\n  <mat-chip-grid #myChipGrid [(ngModel)]=\"mySelection\"\n    aria-label=\"enter sandwich fillings\">\n    @for (filling of fillings; track filling) {\n      <mat-chip-row (removed)=\"remove(filling)\">\n        {{filling.name}}\n        <button matChipRemove>\n          <mat-icon>cancel</mat-icon>\n        </button>\n      </mat-chip-row>\n    }\n  </mat-chip-grid>\n  <input [matChipInputFor]=\"myChipGrid\"\n          [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n          (matChipInputTokenEnd)=\"add($event)\"\n          aria-label=\"Add sandwich fillings...\" />\n</mat-form-field>"
      }
    ],
    "relevance": 0.988
  },
  {
    "codeTitle": "Sharing Data with Custom Snackbar Component in Angular",
    "codeDescription": "Shows how to pass data to a custom snackbar component and access it using dependency injection with MAT_SNACK_BAR_DATA token.",
    "codeLanguage": "typescript",
    "codeTokens": 54,
    "codeId": "https://github.com/angular/components/blob/main/src/material/snack-bar/snack-bar.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material MatSnackBar Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "snackBar.openFromComponent(MessageArchivedComponent, {\n  data: 'some data'\n});"
      }
    ],
    "relevance": 0.988
  },
  {
    "codeTitle": "Handling Snackbar Events and Dismissal in Angular",
    "codeDescription": "Shows how to subscribe to snackbar events and handle dismissal. Demonstrates usage of MatSnackBarRef for managing snackbar lifecycle and actions.",
    "codeLanguage": "typescript",
    "codeTokens": 85,
    "codeId": "https://github.com/angular/components/blob/main/src/material/snack-bar/snack-bar.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material MatSnackBar Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "snackBarRef.afterDismissed().subscribe(() => {\n  console.log('The snackbar was dismissed');\n});\n\n\nsnackBarRef.onAction().subscribe(() => {\n  console.log('The snackbar action was triggered!');\n});\n\nsnackBarRef.dismiss();"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Using FocusMonitor in TypeScript",
    "codeDescription": "Shows how to use FocusMonitor to subscribe to focus changes and handle them within the Angular zone.",
    "codeLanguage": "typescript",
    "codeTokens": 50,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/a11y/a11y.md#2025-04-11_snippet_7",
    "pageTitle": "Angular Components A11y Package Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "focusMonitor.monitor(el).subscribe(origin => this.ngZone.run(() => /* ... */ ));"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Using Angular CDK coercion utilities for type conversion of @Input properties",
    "codeDescription": "This code demonstrates how to use coercion utilities from @angular/cdk/coercion to handle input type conversion. It shows the implementation of a directive with boolean and number inputs that are properly coerced, along with element coercion. The example illustrates how these utilities improve the developer experience by allowing shorthand attribute syntax.",
    "codeLanguage": "typescript",
    "codeTokens": 504,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/coercion/coercion.md#2025-04-11_snippet_0",
    "pageTitle": "Angular CDK Coercion Utilities",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Directive, ElementRef} from '@angular/core';\nimport {\n  coerceBooleanProperty,\n  BooleanInput,\n  NumberInput,\n  coerceNumberProperty,\n  coerceElement,\n} from '@angular/cdk/coercion';\n\n@Directive({\n  selector: 'my-button',\n  host: {\n    '[disabled]': 'disabled',\n    '(click)': 'greet()',\n  }\n})\nclass MyButton {\n  // Using `coerceBooleanProperty` allows for the disabled value of a button to be set as\n  // `<my-button disabled></my-button>` instead of `<my-button [disabled]=\"true\"></my-button>`.\n  // It also allows for a string to be passed like `<my-button disabled=\"true\"></my-button>`.\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: BooleanInput) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  // `coerceNumberProperty` turns any value coming in from the view into a number, allowing the\n  // consumer to use a shorthand string while storing the parsed number in memory. E.g. the consumer can write:\n  // `<my-button greetDelay=\"500\"></my-button>` instead of `<my-button [greetDelay]=\"500\"></my-button>`.\n  // The second parameter specifies a fallback value to be used if the value can't be\n  // parsed to a number.\n  @Input()\n  get greetDelay() { return this._greetDelay; }\n  set greetDelay(value: NumberInput) {\n    this._greetDelay = coerceNumberProperty(value, 0);\n  }\n  private _greetDelay = 0;\n\n  greet() {\n    setTimeout(() => alert('Hello!'), this.greetDelay);\n  }\n\n  // `coerceElement` allows you to accept either an `ElementRef`\n  // or a raw DOM node and to always return a DOM node.\n  getElement(elementOrRef: ElementRef<HTMLElement> | HTMLElement): HTMLElement {\n    return coerceElement(elementOrRef);\n  }\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Implementing Filterable Component Harnesses with HarnessPredicate",
    "codeDescription": "Shows how to create filter interfaces and implement the 'with' static method for component harnesses that allows for filtering harnesses by properties like text content.",
    "codeLanguage": "typescript",
    "codeTokens": 391,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-11_snippet_9",
    "pageTitle": "Angular CDK Testing Infrastructure",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface MyMenuHarnessFilters extends BaseHarnessFilters {\n  /** Filters based on the trigger text for the menu. */\n  triggerText?: string | RegExp;\n}\n\ninterface MyMenuItemHarnessFilters extends BaseHarnessFilters {\n  /** Filters based on the text of the menu item. */\n  text?: string | RegExp;\n}\n\nclass MyMenuHarness extends ComponentHarness {\n  static hostSelector = 'my-menu';\n\n  /** Creates a `HarnessPredicate` used to locate a particular `MyMenuHarness`. */\n  static with(options: MyMenuHarnessFilters): HarnessPredicate<MyMenuHarness> {\n    return new HarnessPredicate(MyMenuHarness, options)\n        .addOption('trigger text', options.triggerText,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getTriggerText(), text));\n  }\n\n  protected getPopupHarness = this.locatorFor(MyPopupHarness);\n\n  /** Gets the text of the menu trigger. */\n  async getTriggerText(): Promise<string> {\n    const popupHarness = await this.getPopupHarness();\n    return popupHarness.getTriggerText();\n  }\n\n  ...\n}\n\nclass MyMenuItemHarness extends ComponentHarness {\n  static hostSelector = 'my-menu-item';\n\n  /** Creates a `HarnessPredicate` used to locate a particular `MyMenuItemHarness`. */\n  static with(options: MyMenuItemHarnessFilters): HarnessPredicate<MyMenuItemHarness> {\n    return new HarnessPredicate(MyMenuItemHarness, options)\n        .addOption('text', options.text,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getText(), text));\n  }\n\n  /** Gets the text of the menu item. */\n  async getText(): Promise<string> {\n    const host = await this.host();\n    return host.text();\n  }\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "DatePicker Module Definition in Angular Material",
    "codeDescription": "Defines the MatDatepickerModule which is the main Angular module that exports all datepicker-related components. It includes Angular's dependency injection metadata and NgModule declarations.",
    "codeLanguage": "typescript",
    "codeTokens": 371,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-11_snippet_6",
    "pageTitle": "Angular Material Datepicker API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class MatDatepickerModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDatepickerModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatDatepickerModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatDatepickerModule, never, [typeof MatButtonModule, typeof i2.OverlayModule, typeof i1_2.A11yModule, typeof i3.PortalModule, typeof MatCommonModule, typeof MatCalendar, typeof MatCalendarBody, typeof MatDatepicker, typeof MatDatepickerContent, typeof MatDatepickerInput, typeof MatDatepickerToggle, typeof MatDatepickerToggleIcon, typeof MatMonthView, typeof MatYearView, typeof MatMultiYearView, typeof MatCalendarHeader, typeof MatDateRangeInput, typeof MatStartDate, typeof MatEndDate, typeof MatDateRangePicker, typeof MatDatepickerActions, typeof MatDatepickerCancel, typeof MatDatepickerApply], [typeof i5.CdkScrollableModule, typeof MatCalendar, typeof MatCalendarBody, typeof MatDatepicker, typeof MatDatepickerContent, typeof MatDatepickerInput, typeof MatDatepickerToggle, typeof MatDatepickerToggleIcon, typeof MatMonthView, typeof MatYearView, typeof MatMultiYearView, typeof MatCalendarHeader, typeof MatDateRangeInput, typeof MatStartDate, typeof MatEndDate, typeof MatDateRangePicker, typeof MatDatepickerActions, typeof MatDatepickerCancel, typeof MatDatepickerApply]>;\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Configuring Default Floating Label Behavior in Angular Form Fields",
    "codeDescription": "This snippet shows how to globally configure the floating label behavior for all mat-form-field components in an Angular application. It sets the floatLabel option to 'always' so labels will always float above the input field regardless of content.",
    "codeLanguage": "typescript",
    "codeTokens": 87,
    "codeId": "https://github.com/angular/components/blob/main/src/material/form-field/form-field.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Form Field Component Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@NgModule({\n  providers: [\n    {provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: {floatLabel: 'always'}}\n  ]\n})"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Implementing a Dialog Component in TypeScript",
    "codeDescription": "Shows how to create a dialog component that can close itself and pass data back to the caller using MatDialogRef.",
    "codeLanguage": "typescript",
    "codeTokens": 74,
    "codeId": "https://github.com/angular/components/blob/main/src/material/dialog/dialog.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Dialog Component Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({/* ... */})\nexport class YourDialog {\n  constructor(public dialogRef: MatDialogRef<YourDialog>) { }\n\n  closeDialog() {\n    this.dialogRef.close('Pizza!');\n  }\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Attaching Autocomplete Panel to a Different Element in Angular Material",
    "codeDescription": "Example showing how to attach an autocomplete panel to a different container element using matAutocompleteOrigin directive and matAutocompleteConnectedTo input.",
    "codeLanguage": "html",
    "codeTokens": 140,
    "codeId": "https://github.com/angular/components/blob/main/src/material/autocomplete/autocomplete.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Autocomplete Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"custom-wrapper-example\" matAutocompleteOrigin #origin=\"matAutocompleteOrigin\">\n  <input\n    matInput\n    [formControl]=\"myControl\"\n    [matAutocomplete]=\"auto\"\n    [matAutocompleteConnectedTo]=\"origin\">\n</div>\n\n<mat-autocomplete #auto=\"matAutocomplete\">\n  @for (option of options; track option) {\n    <mat-option [value]=\"option\">{{option}}</mat-option>\n  }\n</mat-autocomplete>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Creating a Minimal Component Harness",
    "codeDescription": "This snippet demonstrates creating a minimal component harness by extending ComponentHarness and specifying the hostSelector property which identifies elements in the DOM that match this harness.",
    "codeLanguage": "typescript",
    "codeTokens": 58,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-11_snippet_4",
    "pageTitle": "Angular CDK Testing Infrastructure",
    "codeList": [
      {
        "language": "typescript",
        "code": "class MyPopupHarness extends ComponentHarness {\n  static hostSelector = 'my-popup';\n}"
      }
    ],
    "relevance": 0.983
  },
  {
    "codeTitle": "Implementing DragDropRegistry Service in Angular CDK",
    "codeDescription": "Registry service that tracks all drag and drop operations in an application. Manages drag instances, drop containers, and emits events for pointer movements and scrolling.",
    "codeLanguage": "typescript",
    "codeTokens": 293,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-11_snippet_9",
    "pageTitle": "Angular CDK Drag-Drop API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class DragDropRegistry implements OnDestroy {\n    constructor(...args: unknown[]);\n    getDragDirectiveForNode(node: Node): CdkDrag | null;\n    isDragging(drag: DragRef): boolean;\n    // (undocumented)\n    ngOnDestroy(): void;\n    readonly pointerMove: Subject<TouchEvent | MouseEvent>;\n    readonly pointerUp: Subject<TouchEvent | MouseEvent>;\n    registerDirectiveNode(node: Node, dragRef: CdkDrag): void;\n    registerDragItem(drag: DragRef): void;\n    registerDropContainer(drop: DropListRef): void;\n    removeDirectiveNode(node: Node): void;\n    removeDragItem(drag: DragRef): void;\n    removeDropContainer(drop: DropListRef): void;\n    scrolled(shadowRoot?: DocumentOrShadowRoot | null): Observable<Event>;\n    startDragging(drag: DragRef, event: TouchEvent | MouseEvent): void;\n    stopDragging(drag: DragRef): void;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<DragDropRegistry, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<DragDropRegistry>;\n}"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Implementing Multi-line Lists in Angular Material",
    "codeDescription": "Shows how to create multi-line list items using matListItemTitle and matListItemLine directives. This example demonstrates a list with items containing a title and additional information.",
    "codeLanguage": "html",
    "codeTokens": 170,
    "codeId": "https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material List Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-list>\n  <mat-list-item>\n    <span matListItemTitle>Pepper</span>\n    <span matListItemLine>Produced by a plant</span>\n  </mat-list-item>\n  <mat-list-item>\n    <span matListItemTitle>Salt</span>\n    <span matListItemLine>Extracted from sea water</span>\n  </mat-list-item>\n  <mat-list-item>\n    <span matListItemTitle>Paprika</span>\n    <span matListItemLine>Produced by dried and ground red peppers</span>\n  </mat-list-item>\n</mat-list>"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Creating Lists with Multiple Sections in Angular Material",
    "codeDescription": "Demonstrates how to create lists with multiple sections using matSubheader and mat-divider. This example shows a list with separate sections for folders and notes.",
    "codeLanguage": "html",
    "codeTokens": 227,
    "codeId": "https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-11_snippet_9",
    "pageTitle": "Angular Material List Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-list>\n   <h3 matSubheader>Folders</h3>\n   @for (folder of folders; track folder) {\n     <mat-list-item>\n        <mat-icon matListIcon>folder</mat-icon>\n        <h4 matListItemTitle>{{folder.name}}</h4>\n        <p matListItemLine class=\"demo-2\"> {{folder.updated}} </p>\n     </mat-list-item>\n   }\n   <mat-divider></mat-divider>\n   <h3 matSubheader>Notes</h3>\n   @for (note of notes; track note) {\n     <mat-list-item>\n        <mat-icon matListIcon>note</mat-icon>\n        <h4 matListItemTitle>{{note.name}}</h4>\n        <p matListItemLine class=\"demo-2\"> {{note.updated}} </p>\n     </mat-list-item>\n   }\n</mat-list>"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Implementing MatTable with display: flex in Angular Material",
    "codeDescription": "An example of using MatTable with flex layout instead of native HTML table elements. This approach uses mat-table, mat-row, and other component selectors instead of table, tr and other native elements with directives.",
    "codeLanguage": "html",
    "codeTokens": 295,
    "codeId": "https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-11_snippet_10",
    "pageTitle": "Angular Material Table Component Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-table [dataSource]=\"dataSource\">\n  <!-- User name Definition -->\n  <ng-container matColumnDef=\"username\">\n    <mat-header-cell *matHeaderCellDef> User name </mat-header-cell>\n    <mat-cell *matCellDef=\"let row\"> {{row.username}} </mat-cell>\n  </ng-container>\n\n  <!-- Age Definition -->\n  <ng-container matColumnDef=\"age\">\n    <mat-header-cell *matHeaderCellDef> Age </mat-header-cell>\n    <mat-cell *matCellDef=\"let row\"> {{row.age}} </mat-cell>\n  </ng-container>\n\n  <!-- Title Definition -->\n  <ng-container matColumnDef=\"title\">\n    <mat-header-cell *matHeaderCellDef> Title </mat-header-cell>\n    <mat-cell *matCellDef=\"let row\"> {{row.title}} </mat-cell>\n  </ng-container>\n\n  <!-- Header and Row Declarations -->\n  <mat-header-row *matHeaderRowDef=\"['username', 'age', 'title']\"></mat-header-row>\n  <mat-row *matRowDef=\"let row; columns: ['username', 'age', 'title']\"></mat-row>\n</mat-table>"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Accessing Elements Outside Component Host in TypeScript",
    "codeDescription": "This snippet demonstrates how to create a harness for a component that uses CDK overlay, accessing content outside the component's host element using documentRootLocatorFactory().",
    "codeLanguage": "typescript",
    "codeTokens": 119,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-11_snippet_12",
    "pageTitle": "Angular CDK Testing Infrastructure",
    "codeList": [
      {
        "language": "typescript",
        "code": "class MyPopupHarness extends ComponentHarness {\n  static hostSelector = 'my-popup';\n\n  /** Gets a `HarnessLoader` whose root element is the popup's content element. */\n  async getHarnessLoaderForContent(): Promise<HarnessLoader> {\n    const rootLocator = this.documentRootLocatorFactory();\n    return rootLocator.harnessLoaderFor('my-popup-content');\n  }\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Defining Angular Material Icon API Types and Functions",
    "codeDescription": "Contains the complete TypeScript definitions for Angular Material's icon system, including the MatIcon component, MatIconRegistry service, and related interfaces and utility functions. This code defines the public API surface for working with Material icons in Angular applications.",
    "codeLanguage": "typescript",
    "codeTokens": 1236,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/icon/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Icon API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AfterViewChecked } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ElementRef } from '@angular/core';\nimport { ErrorHandler } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Optional } from '@angular/core';\nimport { SafeHtml } from '@angular/platform-browser';\nimport { SafeResourceUrl } from '@angular/platform-browser';\n\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error;\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error;\nexport function getMatIconNameNotFoundError(iconName: string): Error;\nexport function getMatIconNoHttpProviderError(): Error;\n\nexport const ICON_REGISTRY_PROVIDER: {\n    provide: typeof MatIconRegistry;\n    deps: (Optional[] | typeof DomSanitizer | typeof ErrorHandler)[];\n    useFactory: typeof ICON_REGISTRY_PROVIDER_FACTORY;\n};\n\nexport function ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry: MatIconRegistry, httpClient: HttpClient, sanitizer: DomSanitizer, errorHandler: ErrorHandler, document?: any): MatIconRegistry;\n\nexport interface IconOptions {\n    viewBox?: string;\n    withCredentials?: boolean;\n}\n\nexport type IconResolver = (name: string, namespace: string) => SafeResourceUrl | SafeResourceUrlWithIconOptions | null;\n\nexport const MAT_ICON_DEFAULT_OPTIONS: InjectionToken<MatIconDefaultOptions>;\nexport const MAT_ICON_LOCATION: InjectionToken<MatIconLocation>;\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation;\n\nexport class MatIcon implements OnInit, AfterViewChecked, OnDestroy {\n    constructor(...args: unknown[]);\n    get color(): string | null | undefined;\n    set color(value: string | null | undefined);\n    readonly _elementRef: ElementRef<HTMLElement>;\n    get fontIcon(): string;\n    set fontIcon(value: string);\n    get fontSet(): string;\n    set fontSet(value: string);\n    inline: boolean;\n    static ngAcceptInputType_inline: unknown;\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    get svgIcon(): string;\n    set svgIcon(value: string);\n    _svgName: string | null;\n    _svgNamespace: string | null;\n    _usingFontIcon(): boolean;\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatIcon, \"mat-icon\", [\"matIcon\"], { \"color\": { \"alias\": \"color\"; \"required\": false; }; \"inline\": { \"alias\": \"inline\"; \"required\": false; }; \"svgIcon\": { \"alias\": \"svgIcon\"; \"required\": false; }; \"fontSet\": { \"alias\": \"fontSet\"; \"required\": false; }; \"fontIcon\": { \"alias\": \"fontIcon\"; \"required\": false; }; }, {}, never, [\"*\"], true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatIcon, never>;\n}\n\nexport interface MatIconDefaultOptions {\n    color?: ThemePalette;\n    fontSet?: string;\n}\n\nexport interface MatIconLocation {\n    getPathname: () => string;\n}\n\nexport class MatIconModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatIconModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatIconModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatIconModule, never, [typeof MatCommonModule, typeof MatIcon], [typeof MatIcon, typeof MatCommonModule]>;\n}\n\nexport class MatIconRegistry implements OnDestroy {\n    constructor(_httpClient: HttpClient, _sanitizer: DomSanitizer, document: any, _errorHandler: ErrorHandler);\n    addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this;\n    addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl, options?: IconOptions): this;\n    addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this;\n    addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml, options?: IconOptions): this;\n    addSvgIconResolver(resolver: IconResolver): this;\n    addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this;\n    addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this;\n    addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this;\n    addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml, options?: IconOptions): this;\n    classNameForFontAlias(alias: string): string;\n    getDefaultFontSetClass(): string[];\n    getNamedSvgIcon(name: string, namespace?: string): Observable<SVGElement>;\n    getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement>;\n    ngOnDestroy(): void;\n    registerFontClassAlias(alias: string, classNames?: string): this;\n    setDefaultFontSetClass(...classNames: string[]): this;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatIconRegistry, [{ optional: true; }, null, { optional: true; }, null]>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<MatIconRegistry>;\n}\n\nexport interface SafeResourceUrlWithIconOptions {\n    options: IconOptions;\n    url: SafeResourceUrl;\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Customizing Typography in Angular Material Theme",
    "codeDescription": "This snippet shows how to customize typography settings in an Angular Material theme. It sets different font families for plain and brand text, and specifies custom font weights.",
    "codeLanguage": "scss",
    "codeTokens": 119,
    "codeId": "https://github.com/angular/components/blob/main/guides/theming.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material Theming Guide",
    "codeList": [
      {
        "language": "scss",
        "code": "@use '@angular/material' as mat;\n\nhtml {\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: (\n      plain-family: Roboto,\n      brand-family: Open Sans,\n      bold-weight: 900,\n      medium-weight: 500,\n      regular-weight: 300,\n    ),\n    density: 0,\n  ));\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Opening a Bottom Sheet in Angular Material",
    "codeDescription": "Demonstrates how to open a bottom sheet using the MatBottomSheet service. The open method returns a MatBottomSheetRef which can be used to control the bottom sheet.",
    "codeLanguage": "typescript",
    "codeTokens": 72,
    "codeId": "https://github.com/angular/components/blob/main/src/material/bottom-sheet/bottom-sheet.md#2025-04-11_snippet_0",
    "pageTitle": "Using MatBottomSheet in Angular Material",
    "codeList": [
      {
        "language": "typescript",
        "code": "const bottomSheetRef = bottomSheet.open(SocialShareComponent, {\n  ariaLabel: 'Share on social media'\n});"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Implementing Error State for Custom Angular Form Field Control",
    "codeDescription": "This snippet demonstrates how to implement the error state for a custom form field control. It includes a simple getter for the error state and a more complex implementation that handles parent form submissions and updates the error state on every change detection cycle.",
    "codeLanguage": "typescript",
    "codeTokens": 74,
    "codeId": "https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-11_snippet_4",
    "pageTitle": "Custom Form Field Control Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "get errorState(): boolean {\n  return this.parts.invalid && this.touched;\n}"
      },
      {
        "language": "typescript",
        "code": "/** Whether the component is in an error state. */\nerrorState: boolean = false;\n\nconstructor(\n  ...,\n  @Optional() private _parentForm: NgForm,\n  @Optional() private _parentFormGroup: FormGroupDirective\n) {\n...\n}\n\nngDoCheck() {\n  if (this.ngControl) {\n    this.updateErrorState();\n  }\n}\n\nprivate updateErrorState() {\n  const parentSubmitted = this._parentFormGroup?.submitted || this._parentForm?.submitted;\n  const touchedOrParentSubmitted = this.touched || parentSubmitted;\n\n  const newState = (this.ngControl?.invalid || this.parts.invalid) && touchedOrParentSubmitted;\n\n  if (this.errorState !== newState) {\n    this.errorState = newState;\n    this.stateChanges.next(); // Notify listeners of state changes.\n  }\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Creating a Static Chip List in Angular Material",
    "codeDescription": "This snippet demonstrates how to create a static, non-interactive chip list using mat-chip-set and mat-chip components. It uses ARIA roles to improve accessibility for screen readers.",
    "codeLanguage": "html",
    "codeTokens": 111,
    "codeId": "https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-11_snippet_7",
    "pageTitle": "Angular Material Chips Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-chip-set role=\"list\">\n  <mat-chip role=\"listitem\"> Sugar </mat-chip>\n  <mat-chip role=\"listitem\"> Spice </mat-chip>\n  <mat-chip role=\"listitem\"> Everything Nice </mat-chip>\n</mat-chip-set>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Adding Mixed Orientation Support for Drag and Drop in Angular CDK",
    "codeDescription": "Adds support for mixed orientation in the drag-drop module of Angular CDK. This allows for more flexible drag and drop layouts combining both horizontal and vertical orientations.",
    "codeLanguage": "TypeScript",
    "codeTokens": 73,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG.md#2025-04-11_snippet_17",
    "pageTitle": "Angular Components Changelog",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "// Example usage (not provided in changelog)\n<div cdkDropList cdkDropListOrientation=\"mixed\">\n  <!-- Draggable items -->\n</div>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing a Removable Chip in Angular Material",
    "codeDescription": "This snippet demonstrates how to create a removable chip using the mat-chip-option component with a remove button. The matChipRemove attribute is used on a button element to enable removal functionality.",
    "codeLanguage": "html",
    "codeTokens": 89,
    "codeId": "https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material Chips Documentation",
    "codeList": [
      {
        "language": "html",
        "code": " <mat-chip-option>\n  Orange\n  <button matChipRemove aria-label=\"Remove orange\">\n    <mat-icon>cancel</mat-icon>\n  </button>\n</mat-chip-option>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Defining AsyncFactoryFn Type in TypeScript",
    "codeDescription": "Defines a type for an asynchronous factory function that returns a Promise of type T.",
    "codeLanguage": "typescript",
    "codeTokens": 43,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/testing/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "API Report for @angular/cdk_testing",
    "codeList": [
      {
        "language": "typescript",
        "code": "export type AsyncFactoryFn<T> = () => Promise<T>;"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing LiveAnnouncer Class for Screen Reader Announcements in Angular",
    "codeDescription": "A service that announces messages to screen readers using ARIA live regions, with configurable politeness levels and durations.",
    "codeLanguage": "typescript",
    "codeTokens": 183,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/a11y/index.api.md#2025-04-11_snippet_13",
    "pageTitle": "Angular CDK A11y API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class LiveAnnouncer implements OnDestroy {\n    constructor(...args: unknown[]);\n    announce(message: string): Promise<void>;\n    announce(message: string, politeness?: AriaLivePoliteness): Promise<void>;\n    announce(message: string, duration?: number): Promise<void>;\n    announce(message: string, politeness?: AriaLivePoliteness, duration?: number): Promise<void>;\n    clear(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<LiveAnnouncer, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<LiveAnnouncer>;\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing TrackBy Function in CdkTable",
    "codeDescription": "Adds a trackBy function to a CdkTable to improve performance by helping Angular identify unique rows, reducing unnecessary DOM operations during data updates.",
    "codeLanguage": "html",
    "codeTokens": 65,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-11_snippet_7",
    "pageTitle": "CdkTable: Angular's Unopinionated Data Table Component",
    "codeList": [
      {
        "language": "html",
        "code": "<table cdk-table [dataSource]=\"dataSource\" [trackBy]=\"myTrackById\">"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Adding Footer Row to Angular Material Table",
    "codeDescription": "HTML code demonstrating how to add a footer row to an Angular Material table by defining footer cell templates in column definitions and adding a footer row definition.",
    "codeLanguage": "html",
    "codeTokens": 162,
    "codeId": "https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-11_snippet_9",
    "pageTitle": "Angular Material Table Component Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<ng-container matColumnDef=\"cost\">\n  <th mat-header-cell *matHeaderCellDef> Cost </th>\n  <td mat-cell *matCellDef=\"let data\"> {{data.cost}} </td>\n  <td mat-footer-cell *matFooterCellDef> {{totalCost}} </td>\n</ng-container>\n\n...\n\n<tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n<tr mat-row *matRowDef=\"let myRowData; columns: columnsToDisplay\"></tr>\n<tr mat-footer-row *matFooterRowDef=\"columnsToDisplay\"></tr>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Fluent APIs in TypeScript",
    "codeDescription": "Shows how to create a fluent or builder-pattern style API by returning 'this' from methods. This enables method chaining for a more expressive and readable API.",
    "codeLanguage": "typescript",
    "codeTokens": 68,
    "codeId": "https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material Coding Standards",
    "codeList": [
      {
        "language": "typescript",
        "code": "class ConfigBuilder {\n  withName(name: string): this {\n    this.config.name = name;\n    return this;\n  }\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Importing Angular Material Select Dependencies in TypeScript",
    "codeDescription": "A comprehensive list of imports needed for Angular Material Select components. Includes imports from Angular Core, Forms, CDK libraries, and RxJS.",
    "codeLanguage": "typescript",
    "codeTokens": 480,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/select/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Select API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AbstractControl } from '@angular/forms';\nimport { AbstractControlDirective } from '@angular/forms';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { AfterContentChecked } from '@angular/core';\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewChecked } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { CdkConnectedOverlay } from '@angular/cdk/overlay';\nimport { CdkOverlayOrigin } from '@angular/cdk/overlay';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { ConnectedPosition } from '@angular/cdk/overlay';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { FormGroupDirective } from '@angular/forms';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/overlay';\nimport * as i2_2 from '@angular/cdk/observers';\nimport * as i5 from '@angular/cdk/scrolling';\nimport { InjectionToken } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { NgForm } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { QueryList } from '@angular/core';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ViewportRuler } from '@angular/cdk/scrolling';"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Disabled State for Custom Angular Form Field Control",
    "codeDescription": "This snippet shows how to implement the disabled state for a custom form field control. It uses a getter and setter to handle the disabled property, coercing the input to a boolean and updating the form parts accordingly.",
    "codeLanguage": "typescript",
    "codeTokens": 112,
    "codeId": "https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-11_snippet_3",
    "pageTitle": "Custom Form Field Control Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Input()\nget disabled(): boolean { return this._disabled; }\nset disabled(value: BooleanInput) {\n  this._disabled = coerceBooleanProperty(value);\n  this._disabled ? this.parts.disable() : this.parts.enable();\n  this.stateChanges.next();\n}\nprivate _disabled = false;"
      }
    ],
    "relevance": 0.973
  },
  {
    "codeTitle": "Implementing CdkTree component",
    "codeDescription": "The main component that renders a tree structure. It manages the tree data source, controls expansion state, and provides methods for node manipulation. It implements various lifecycle hooks for proper initialization and cleanup.",
    "codeLanguage": "typescript",
    "codeTokens": 886,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/tree/index.api.md#2025-04-11_snippet_4",
    "pageTitle": "Angular CDK Tree Module API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// @public\nexport class CdkTree<T, K = T> implements AfterContentChecked, AfterContentInit, AfterViewInit, CollectionViewer, OnDestroy, OnInit {\n    constructor(...args: unknown[]);\n    childrenAccessor?: (dataNode: T) => T[] | Observable<T[]>;\n    collapse(dataNode: T): void;\n    collapseAll(): void;\n    collapseDescendants(dataNode: T): void;\n    get dataSource(): DataSource<T> | Observable<T[]> | T[];\n    set dataSource(dataSource: DataSource<T> | Observable<T[]> | T[]);\n    expand(dataNode: T): void;\n    expandAll(): void;\n    expandDescendants(dataNode: T): void;\n    expansionKey?: (dataNode: T) => K;\n    _getChildrenAccessor(): ((dataNode: T) => T[] | Observable<T[]> | null | undefined) | undefined;\n    _getDirectChildren(dataNode: T): Observable<T[]>;\n    // (undocumented)\n    _getExpansionModel(): SelectionModel<K>;\n    _getLevel(node: T): number | undefined;\n    _getLevelAccessor(): ((dataNode: T) => number) | undefined;\n    _getNodeChildren(node: CdkTreeNode<T, K>): Observable<CdkTreeNode<T, K>[]>;\n    _getNodeDef(data: T, i: number): CdkTreeNodeDef<T>;\n    _getNodeParent(node: CdkTreeNode<T, K>): CdkTreeNode<T, K> | null | undefined;\n    _getPositionInSet(dataNode: T): number;\n    _getSetSize(dataNode: T): number;\n    insertNode(nodeData: T, index: number, viewContainer?: ViewContainerRef, parentData?: T): void;\n    isExpanded(dataNode: T): boolean;\n    _keyManager: TreeKeyManagerStrategy<CdkTreeNode<T, K>>;\n    levelAccessor?: (dataNode: T) => number;\n    // (undocumented)\n    ngAfterContentChecked(): void;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    ngOnInit(): void;\n    _nodeDefs: QueryList<CdkTreeNodeDef<T>>;\n    // (undocumented)\n    _nodeOutlet: CdkTreeNodeOutlet;\n    _registerNode(node: CdkTreeNode<T, K>): void;\n    renderNodeChanges(data: readonly T[], dataDiffer?: IterableDiffer<T>, viewContainer?: ViewContainerRef, parentData?: T): void;\n    protected _sendKeydownToKeyManager(event: KeyboardEvent): void;\n    _setNodeTypeIfUnset(newType: 'flat' | 'nested'): void;\n    toggle(dataNode: T): void;\n    toggleDescendants(dataNode: T): void;\n    trackBy: TrackByFunction<T>;\n    // @deprecated\n    treeControl?: TreeControl<T, K>;\n    _unregisterNode(node: CdkTreeNode<T, K>): void;\n    readonly viewChange: BehaviorSubject<{\n        start: number;\n        end: number;\n    }>;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<CdkTree<any, any>, \"cdk-tree\", [\"cdkTree\"], { \"dataSource\": { \"alias\": \"dataSource\"; \"required\": false; }; \"treeControl\": { \"alias\": \"treeControl\"; \"required\": false; }; \"levelAccessor\": { \"alias\": \"levelAccessor\"; \"required\": false; }; \"childrenAccessor\": { \"alias\": \"childrenAccessor\"; \"required\": false; }; \"trackBy\": { \"alias\": \"trackBy\"; \"required\": false; }; \"expansionKey\": { \"alias\": \"expansionKey\"; \"required\": false; }; }, {}, [\"_nodeDefs\"], never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTree<any, any>, never>;\n}"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Implementing a Flat Tree Structure with mat-tree in Angular Material",
    "codeDescription": "Example of a flat tree structure where nodes are rendered as siblings in sequence rather than nested within each other. This structure is easier to style and better for scrolling variations.",
    "codeLanguage": "html",
    "codeTokens": 95,
    "codeId": "https://github.com/angular/components/blob/main/src/material/tree/tree.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Tree Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-tree>\n  <mat-tree-node> parent node </mat-tree-node>\n  <mat-tree-node> -- child node1 </mat-tree-node>\n  <mat-tree-node> -- child node2 </mat-tree-node>\n</mat-tree>"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Implementing Generic Datepicker Component",
    "codeDescription": "Example of using generic type with MatDatepicker in a component class to match the DateAdapter implementation.",
    "codeLanguage": "typescript",
    "codeTokens": 56,
    "codeId": "https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-11_snippet_6",
    "pageTitle": "Angular Material Datepicker Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({...})\nexport class MyComponent {\n  @ViewChild(MatDatepicker) datepicker: MatDatepicker<Date>;\n}"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Setting Date Locale in Angular Material Date Picker",
    "codeDescription": "This TypeScript snippet demonstrates how to override the default locale for Angular Material's date picker by providing a custom value for the MAT_DATE_LOCALE injection token during application bootstrap.",
    "codeLanguage": "typescript",
    "codeTokens": 73,
    "codeId": "https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-11_snippet_4",
    "pageTitle": "Angular Material Datepicker Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "bootstapApplication(MyApp, {\n  providers: [{provide: MAT_DATE_LOCALE, useValue: 'en-GB'}],\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "MatTable Component Definition in TypeScript",
    "codeDescription": "The core table component for Material Design that extends CdkTable. It includes properties for managing sticky positioning and CSS classes for styling table elements.",
    "codeLanguage": "typescript",
    "codeTokens": 153,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/table/index.api.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Table API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class MatTable<T> extends CdkTable<T> {\n    protected needsPositionStickyOnElement: boolean;\n    protected stickyCssClass: string;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatTable<any>, \"mat-table, table[mat-table]\", [\"matTable\"], {}, {}, never, [\"caption\", \"colgroup, col\", \"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTable<any>, never>;\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Using BreakpointObserver to Detect Handset Breakpoint in Angular",
    "codeDescription": "Example of a component that injects BreakpointObserver to check if the current viewport matches the Handset breakpoint. The code subscribes to changes in the breakpoint state and calls different methods based on whether it matches or not.",
    "codeLanguage": "typescript",
    "codeTokens": 140,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/layout/breakpoints-observer.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Components - Breakpoints Module",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({ ... })\nexport class MyWidget {\n  isHandset: Observable<BreakpointState>;\n\n  constructor(bm: BreakpointObserver) {\n    bm.observe(Handset).subscribe((state: BreakpointState) => {\n      if (state.matches) {\n        this.makeEverythingFitOnSmallScreen();\n      } else {\n        this.expandEverythingToFillTheScreen();\n      }\n    });\n  }\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Implementing UnitTestElement Class for Angular Component Testing",
    "codeDescription": "Defines the UnitTestElement class that implements the TestElement interface. This class provides methods for interacting with DOM elements in unit tests, including clicking, typing, getting properties, and manipulating element state.",
    "codeLanguage": "typescript",
    "codeTokens": 365,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/testing/testbed/index.api.md#2025-04-11_snippet_2",
    "pageTitle": "API Report for @angular/cdk_testing_testbed",
    "codeList": [
      {
        "language": "typescript",
        "code": "// @public\nexport class UnitTestElement implements TestElement {\n    constructor(element: Element, _stabilize: () => Promise<void>);\n    blur(): Promise<void>;\n    clear(): Promise<void>;\n    click(modifiers?: ModifierKeys): Promise<void>;\n    click(location: 'center', modifiers?: ModifierKeys): Promise<void>;\n    click(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;\n    dispatchEvent(name: string, data?: Record<string, EventData>): Promise<void>;\n    // (undocumented)\n    readonly element: Element;\n    focus(): Promise<void>;\n    getAttribute(name: string): Promise<string | null>;\n    getCssValue(property: string): Promise<string>;\n    getDimensions(): Promise<ElementDimensions>;\n    getProperty<T = any>(name: string): Promise<T>;\n    hasClass(name: string): Promise<boolean>;\n    hover(): Promise<void>;\n    isFocused(): Promise<boolean>;\n    matchesSelector(selector: string): Promise<boolean>;\n    mouseAway(): Promise<void>;\n    rightClick(relativeX: number, relativeY: number, modifiers?: ModifierKeys): Promise<void>;\n    selectOptions(...optionIndexes: number[]): Promise<void>;\n    sendKeys(...keys: (string | TestKey)[]): Promise<void>;\n    sendKeys(modifiers: ModifierKeys, ...keys: (string | TestKey)[]): Promise<void>;\n    setContenteditableValue(value: string): Promise<void>;\n    setInputValue(value: string): Promise<void>;\n    text(options?: TextOptions): Promise<string>;\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Implementing a Google Map with Marker Clustering in TypeScript",
    "codeDescription": "TypeScript component that implements a Google Map with marker clustering functionality. This component allows users to add markers by clicking on the map, which will then be automatically clustered by the MapMarkerClusterer.",
    "codeLanguage": "typescript",
    "codeTokens": 190,
    "codeId": "https://github.com/angular/components/blob/main/src/google-maps/map-marker-clusterer/README.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Google Maps Marker Clusterer Component",
    "codeList": [
      {
        "language": "typescript",
        "code": "// google-map-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapMarkerClusterer, MapAdvancedMarker} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapMarkerClusterer, MapAdvancedMarker],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n  markerPositions: google.maps.LatLngLiteral[] = [];\n\n  addMarker(event: google.maps.MapMouseEvent) {\n    this.markerPositions.push(event.latLng.toJSON());\n  }\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Implementing GoogleMap Component in Angular TypeScript",
    "codeDescription": "This snippet demonstrates how to implement a GoogleMap component in an Angular application. It shows the setup of the component, including center and zoom configurations, and methods for handling map events like clicks and mouse movements.",
    "codeLanguage": "typescript",
    "codeTokens": 192,
    "codeId": "https://github.com/angular/components/blob/main/src/google-maps/google-map/README.md#2025-04-11_snippet_0",
    "pageTitle": "GoogleMap Component for Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "// google-maps-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap],\n})\nexport class GoogleMapDemo {\n\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n  display: google.maps.LatLngLiteral;\n\n  moveMap(event: google.maps.MapMouseEvent) {\n    this.center = (event.latLng.toJSON());\n  }\n\n  move(event: google.maps.MapMouseEvent) {\n    this.display = event.latLng.toJSON();\n  }\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Implementing Basic Angular Material Theme with Sass",
    "codeDescription": "This snippet shows how to create a basic theme file using Angular Material's mat.theme mixin. It applies a violet color palette, Roboto font, and standard density to the application's components.",
    "codeLanguage": "scss",
    "codeTokens": 99,
    "codeId": "https://github.com/angular/components/blob/main/guides/theming.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Theming Guide",
    "codeList": [
      {
        "language": "scss",
        "code": "@use '@angular/material' as mat;\n\nhtml {\n  color-scheme: light dark;\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: 0\n  ));\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Customizing Strong Focus Indicators in Angular Material with SCSS",
    "codeDescription": "This snippet shows how to customize the appearance of strong focus indicators by passing a configuration map to the strong-focus-indicators() mixin. It allows customizing properties like border-style, border-width, and border-radius, as well as using a custom color instead of a theme.",
    "codeLanguage": "scss",
    "codeTokens": 213,
    "codeId": "https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-11_snippet_10",
    "pageTitle": "Angular Material 2 Theming Guide",
    "codeList": [
      {
        "language": "scss",
        "code": "@use '@angular/material' as mat;\n\n@include mat.strong-focus-indicators((\n  border-style: dotted,\n  border-width: 4px,\n  border-radius: 2px,\n));\n\n$my-primary: mat.m2-define-palette(mat.$m2-indigo-palette, 500);\n$my-accent: mat.m2-define-palette(mat.$m2-pink-palette, A200, A100, A400);\n\n$my-theme: mat.m2-define-light-theme((\n color: (\n   primary: $my-primary,\n   accent: $my-accent,\n )\n));\n\n@include mat.all-component-themes($my-theme);\n@include mat.strong-focus-indicators-theme(purple);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "API Design: Avoiding Boolean Arguments in TypeScript",
    "codeDescription": "Demonstrates how to refactor methods with boolean flags into separate, more focused methods. This approach produces clearer code and makes the API more intuitive to use.",
    "codeLanguage": "typescript",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/components/blob/main/CODING_STANDARDS.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Coding Standards",
    "codeList": [
      {
        "language": "typescript",
        "code": "// AVOID\nfunction getTargetElement(createIfNotFound = false) {\n  // ...\n}"
      },
      {
        "language": "typescript",
        "code": "// PREFER\nfunction getExistingTargetElement() {\n  // ...\n}\n\nfunction createTargetElement() {\n // ...\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Programmatic Ripple Control in TypeScript with Angular Material",
    "codeDescription": "Demonstrates how to manually trigger ripples by accessing the MatRipple instance using ViewChild. The example shows launching centered and persistent ripples programmatically.",
    "codeLanguage": "typescript",
    "codeTokens": 124,
    "codeId": "https://github.com/angular/components/blob/main/src/material/core/ripple/ripple.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Ripple Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "class MyComponent {\n\n  /** Reference to the directive instance of the ripple. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /** Shows a centered and persistent ripple. */\n  launchRipple() {\n    const rippleRef = this.ripple.launch({\n      persistent: true,\n      centered: true\n    });\n\n    // Fade out the ripple later.\n    rippleRef.fadeOut();\n  }\n}"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Implementing Indeterminate Progress Bar in Angular Material",
    "codeDescription": "This snippet shows how to use an indeterminate progress bar in Angular Material. The indeterminate mode is suitable for operations where the user needs to wait without indicating a specific duration. In this mode, the 'value' property is ignored.",
    "codeLanguage": "html",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/components/blob/main/src/material/progress-bar/progress-bar.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Progress Bar Component",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- example(progress-bar-indeterminate) -->"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Defining Column Templates for CdkTable in Angular",
    "codeDescription": "Creates a column definition using cdkColumnDef with corresponding header, cell, and footer templates. This structure defines how data will be displayed in each column of the table.",
    "codeLanguage": "html",
    "codeTokens": 127,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-11_snippet_0",
    "pageTitle": "CdkTable: Angular's Unopinionated Data Table Component",
    "codeList": [
      {
        "language": "html",
        "code": "<ng-container cdkColumnDef=\"username\">\n  <th cdk-header-cell *cdkHeaderCellDef> User name </th>\n  <td cdk-cell *cdkCellDef=\"let row\"> {{row.a}} </td>\n  <td cdk-footer-cell *cdkFooterCellDef> User name </td>\n</ng-container>"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Installing Angular Material with Angular CLI",
    "codeDescription": "Command to add Angular Material to an Angular project using ng add. This will install Angular Material, the Component Dev Kit (CDK), and Angular Animations.",
    "codeLanguage": "bash",
    "codeTokens": 48,
    "codeId": "https://github.com/angular/components/blob/main/guides/getting-started.md#2025-04-11_snippet_0",
    "pageTitle": "Getting Started with Angular Material",
    "codeList": [
      {
        "language": "bash",
        "code": "ng add @angular/material"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Implementing a Nested Tree Structure with mat-tree in Angular Material",
    "codeDescription": "Example of a nested tree structure where children nodes are placed inside their parent node in the DOM. This structure is better for visualizing hierarchical relationships.",
    "codeLanguage": "html",
    "codeTokens": 106,
    "codeId": "https://github.com/angular/components/blob/main/src/material/tree/tree.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Tree Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-tree>\n   <mat-nested-tree-node>\n     parent node\n     <mat-nested-tree-node> -- child node1 </mat-nested-tree-node>\n     <mat-nested-tree-node> -- child node2 </mat-nested-tree-node>\n   </mat-nested-tree-node>\n</mat-tree>"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Styling Selection Column for Angular Material Table",
    "codeDescription": "CSS code to properly style the selection column in an Angular Material table, ensuring the ripple effect extends beyond the cell boundaries.",
    "codeLanguage": "css",
    "codeTokens": 46,
    "codeId": "https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-11_snippet_8",
    "pageTitle": "Angular Material Table Component Guide",
    "codeList": [
      {
        "language": "css",
        "code": ".mat-column-select {\n  overflow: initial;\n}"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Range Selection with Angular Material Slider",
    "codeDescription": "Shows how to create a range slider by using both matSliderStartThumb and matSliderEndThumb inputs. This allows selection of a value range within the slider's min and max bounds.",
    "codeLanguage": "html",
    "codeTokens": 72,
    "codeId": "https://github.com/angular/components/blob/main/src/material/slider/slider.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Slider Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-slider>\n  <input matSliderStartThumb>\n  <input matSliderEndThumb>\n</mat-slider>"
      }
    ],
    "relevance": 0.967
  },
  {
    "codeTitle": "Using Basic mat-card Element in Angular Material",
    "codeDescription": "Demonstrates the basic mat-card element which serves as a content container. This is the minimal implementation of the card component.",
    "codeLanguage": "html",
    "codeTokens": 39,
    "codeId": "https://github.com/angular/components/blob/main/src/material/card/card.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Card Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-card>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Handling Multiple Selection in Angular Material Select",
    "codeDescription": "Demonstrates how to use the multiple attribute with mat-select to enable multiple selection mode.",
    "codeLanguage": "HTML",
    "codeTokens": 64,
    "codeId": "https://github.com/angular/components/blob/main/src/material/select/select.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Select Component",
    "codeList": [
      {
        "language": "HTML",
        "code": "@if (isMultiple) {\n  <mat-select multiple>\n    ...\n  </mat-select>\n} @else {\n  <mat-select>\n    ...\n  </mat-select>\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Displaying Form Validation Errors in Angular Material Stepper",
    "codeDescription": "Demonstrates how to show form validation errors in an Angular Material Stepper using mat-error within mat-form-field for accessibility support.",
    "codeLanguage": "html",
    "codeTokens": 40,
    "codeId": "https://github.com/angular/components/blob/main/src/material/stepper/stepper.md#2025-04-11_snippet_5",
    "pageTitle": "Angular Material Stepper Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-error>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Opening a Dialog with MatDialog in TypeScript",
    "codeDescription": "Demonstrates how to open a dialog using the MatDialog service, specifying component and configuration options. It also shows how to handle the dialog's closure and retrieve results.",
    "codeLanguage": "typescript",
    "codeTokens": 99,
    "codeId": "https://github.com/angular/components/blob/main/src/material/dialog/dialog.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Dialog Component Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "let dialogRef = dialog.open(UserProfileComponent, {\n  height: '400px',\n  width: '600px',\n});\n\ndialogRef.afterClosed().subscribe(result => {\n  console.log(`Dialog result: ${result}`); // Pizza!\n});\n\ndialogRef.close('Pizza!');"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Using LiveAnnouncer in TypeScript",
    "codeDescription": "Demonstrates how to use LiveAnnouncer to announce messages for screen-reader users in a component.",
    "codeLanguage": "typescript",
    "codeTokens": 64,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/a11y/a11y.md#2025-04-11_snippet_6",
    "pageTitle": "Angular Components A11y Package Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({...})\nexport class MyComponent {\n\n constructor(liveAnnouncer: LiveAnnouncer) {\n   liveAnnouncer.announce(\"Hey Google\");\n }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Defining Angular Material Bottom Sheet API in TypeScript",
    "codeDescription": "Complete API definition for the @angular/material_bottom-sheet package, including imports, public types, classes, and components. It defines the MatBottomSheet service, container component, configuration options, and reference classes.",
    "codeLanguage": "typescript",
    "codeTokens": 1104,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/bottom-sheet/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Bottom Sheet API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { CdkDialogContainer } from '@angular/cdk/dialog';\nimport { ComponentRef } from '@angular/core';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { DialogRef } from '@angular/cdk/dialog';\nimport { Direction } from '@angular/cdk/bidi';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/dialog';\nimport * as i1_2 from '@angular/cdk/bidi';\nimport * as i3 from '@angular/cdk/portal';\nimport { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\nimport { TemplateRef } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';\n\n// @public\nexport type AutoFocusTarget = 'dialog' | 'first-tabbable' | 'first-heading';\n\n// @public\nexport const MAT_BOTTOM_SHEET_DATA: InjectionToken<any>;\n\n// @public\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS: InjectionToken<MatBottomSheetConfig<any>>;\n\n// @public\nexport class MatBottomSheet implements OnDestroy {\n    constructor(...args: unknown[]);\n    dismiss<R = any>(result?: R): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    open<T, D = any, R = any>(component: ComponentType<T>, config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n    open<T, D = any, R = any>(template: TemplateRef<T>, config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n    get _openedBottomSheetRef(): MatBottomSheetRef<any> | null;\n    set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null);\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatBottomSheet, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<MatBottomSheet>;\n}\n\n// @public @deprecated\nexport const matBottomSheetAnimations: {\n    readonly bottomSheetState: any;\n};\n\n// @public\nexport class MatBottomSheetConfig<D = any> {\n    ariaLabel?: string | null;\n    ariaModal?: boolean;\n    autoFocus?: AutoFocusTarget | string | boolean;\n    backdropClass?: string;\n    closeOnNavigation?: boolean;\n    data?: D | null;\n    direction?: Direction;\n    disableClose?: boolean;\n    hasBackdrop?: boolean;\n    height?: string;\n    maxHeight?: number | string;\n    minHeight?: number | string;\n    panelClass?: string | string[];\n    restoreFocus?: boolean;\n    scrollStrategy?: ScrollStrategy;\n    viewContainerRef?: ViewContainerRef;\n}\n\n// @public\nexport class MatBottomSheetContainer extends CdkDialogContainer implements OnDestroy {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    protected _animationsDisabled: boolean;\n    _animationState: 'void' | 'visible' | 'hidden';\n    _animationStateChanged: EventEmitter<{\n        toState: \"visible\" | \"hidden\";\n        phase: \"start\" | \"done\";\n    }>;\n    enter(): void;\n    exit(): void;\n    // (undocumented)\n    protected _handleAnimationEvent(isStart: boolean, animationName: string): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatBottomSheetContainer, \"mat-bottom-sheet-container\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatBottomSheetContainer, never>;\n}\n\n// @public (undocumented)\nexport class MatBottomSheetModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatBottomSheetModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatBottomSheetModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatBottomSheetModule, never, [typeof i1.DialogModule, typeof MatCommonModule, typeof i3.PortalModule, typeof MatBottomSheetContainer], [typeof MatBottomSheetContainer, typeof MatCommonModule]>;\n}\n\n// @public\nexport class MatBottomSheetRef<T = any, R = any> {\n    constructor(_ref: DialogRef<R, T>, config: MatBottomSheetConfig, containerInstance: MatBottomSheetContainer);\n    afterDismissed(): Observable<R | undefined>;\n    afterOpened(): Observable<void>;\n    backdropClick(): Observable<MouseEvent>;\n    get componentRef(): ComponentRef<T> | null;\n    containerInstance: MatBottomSheetContainer;\n    disableClose: boolean | undefined;\n    dismiss(result?: R): void;\n    get instance(): T;\n    keydownEvents(): Observable<KeyboardEvent>;\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Virtual Scrolling with Custom Data Source",
    "codeDescription": "Demonstrates implementing a custom DataSource for virtual scrolling that provides data through the connect() and disconnect() methods.",
    "codeLanguage": "typescript",
    "codeTokens": 79,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/scrolling/scrolling.md#2025-04-11_snippet_3",
    "pageTitle": "Angular CDK Scrolling Package Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<cdk-virtual-scroll-viewport itemSize=\"50\">\n  <div *cdkVirtualFor=\"let item of myDataSource\">\n    {{item}}\n  </div>\n</cdk-virtual-scroll-viewport>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Focus Trap with cdkTrapFocus in Angular HTML Template",
    "codeDescription": "Demonstrates how to use the cdkTrapFocus directive to contain keyboard focus within a dialog element. The directive prevents Tab and Shift+Tab navigation from leaving the bounded element, which is essential for modal dialog accessibility.",
    "codeLanguage": "html",
    "codeTokens": 86,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/a11y/focus-trap/focus-trap.md#2025-04-11_snippet_0",
    "pageTitle": "Focus Trap Documentation in Angular Components",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"my-inner-dialog-content\" cdkTrapFocus>\n  <!-- Tab and Shift + Tab will not leave this element. -->\n</div>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Creating Element Locators in a Component Harness",
    "codeDescription": "This snippet shows how to create methods to locate and access specific elements within a component's DOM using the locatorFor and locatorForOptional methods provided by ComponentHarness.",
    "codeLanguage": "typescript",
    "codeTokens": 102,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-11_snippet_5",
    "pageTitle": "Angular CDK Testing Infrastructure",
    "codeList": [
      {
        "language": "typescript",
        "code": "class MyPopupHarness extends ComponentHarness {\n  static hostSelector = 'my-popup';\n\n  /** Gets the trigger element */\n  getTriggerElement = this.locatorFor('button');\n\n  /** Gets the content element. */\n  getContentElement = this.locatorForOptional('.my-popup-content');\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing a Vertical Linear Stepper with Multiple Forms in Angular Material",
    "codeDescription": "Creates a vertical linear stepper where each step has its own separate form. This approach allows for independent form validation and submission for each step in the stepper workflow.",
    "codeLanguage": "html",
    "codeTokens": 125,
    "codeId": "https://github.com/angular/components/blob/main/src/material/stepper/stepper.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Stepper Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-stepper orientation=\"vertical\" linear>\n  <mat-step [stepControl]=\"formGroup1\">\n    <form [formGroup]=\"formGroup1\">\n      ...\n    </form>\n  </mat-step>\n  <mat-step [stepControl]=\"formGroup2\">\n    <form [formGroup]=\"formGroup2\">\n      ...\n    </form>\n  </mat-step>\n</mat-stepper>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring Global Defaults for Angular Material Chips",
    "codeDescription": "This snippet shows how to specify global configuration defaults for the Angular Material chips module using the MAT_CHIPS_DEFAULT_OPTIONS token in the NgModule providers.",
    "codeLanguage": "typescript",
    "codeTokens": 79,
    "codeId": "https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-11_snippet_4",
    "pageTitle": "Angular Material Chips Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@NgModule({\n  providers: [\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [COMMA, SPACE]\n      }\n    }\n  ]\n})"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Providing FullscreenOverlayContainer in Angular Module",
    "codeDescription": "Demonstrates how to enable the FullscreenOverlayContainer by providing it in an Angular NgModule as a replacement for the standard OverlayContainer, supporting fullscreen mode.",
    "codeLanguage": "typescript",
    "codeTokens": 71,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/overlay/overlay.md#2025-04-11_snippet_3",
    "pageTitle": "Angular CDK Overlay Package Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@NgModule({\n  providers: [{provide: OverlayContainer, useClass: FullscreenOverlayContainer}],\n  // ...\n})\nexport class MyModule { }"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Implementing LiveAnnouncer in an Angular Component",
    "codeDescription": "Demonstrates how to inject and use the LiveAnnouncer service in an Angular component to make screen reader announcements. The example shows how to inject the service via the constructor and make a simple announcement.",
    "codeLanguage": "typescript",
    "codeTokens": 98,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/a11y/live-announcer/live-announcer.md#2025-04-11_snippet_0",
    "pageTitle": "LiveAnnouncer Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  selector: 'my-component'\n  providers: [LiveAnnouncer]\n})\nexport class MyComponent {\n\n  constructor(liveAnnouncer: LiveAnnouncer) {\n    liveAnnouncer.announce(\"Hey Google\");\n  }\n}"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Interacting with Components using MatButtonHarness Methods",
    "codeDescription": "This code demonstrates how to use a component harness (MatButtonHarness) to interact with and inspect a button component. It shows checking the button's disabled state, clicking it, and verifying component state changes without manually triggering change detection.",
    "codeLanguage": "typescript",
    "codeTokens": 130,
    "codeId": "https://github.com/angular/components/blob/main/guides/using-component-harnesses.md#2025-04-11_snippet_4",
    "pageTitle": "Angular Material Component Harnesses Testing Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "it('should mark confirmed when ok button clicked', async () => {\n  const okButton = await loader.getHarness(MatButtonHarness.with({selector: '.confirm'});\n  expect(fixture.componentInstance.confirmed).toBe(false);\n  expect(await okButton.isDisabled()).toBe(false);\n  await okButton.click();\n  expect(fixture.componentInstance.confirmed).toBe(true);\n});"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Google Maps Template with InfoWindow Implementation",
    "codeDescription": "HTML template that sets up the Google Map component with marker and info window integration. Includes event bindings for map clicks and marker interactions.",
    "codeLanguage": "html",
    "codeTokens": 151,
    "codeId": "https://github.com/angular/components/blob/main/src/google-maps/map-info-window/README.md#2025-04-11_snippet_1",
    "pageTitle": "Google Maps InfoWindow Integration with Angular Components",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- google-maps-demo.component.html -->\n<google-map\n  height=\"400px\"\n  width=\"750px\"\n  [center]=\"center\"\n  [zoom]=\"zoom\"\n  (mapClick)=\"addMarker($event)\">\n    @for (position of markerPositions; track position) {\n      <map-advanced-marker\n        #marker=\"mapAdvancedMarker\"\n        [position]=\"position\"\n        (mapClick)=\"openInfoWindow(marker)\" />\n    }\n    <map-info-window>Info Window content</map-info-window>\n</google-map>"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Opening Basic Snackbar Messages in Angular",
    "codeDescription": "Demonstrates different ways to open a snackbar using simple messages or custom components. Shows basic usage of MatSnackBar service with various options.",
    "codeLanguage": "typescript",
    "codeTokens": 99,
    "codeId": "https://github.com/angular/components/blob/main/src/material/snack-bar/snack-bar.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material MatSnackBar Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// Simple message.\nlet snackBarRef = snackBar.open('Message archived');\n\n// Simple message with an action.\nlet snackBarRef = snackBar.open('Message archived', 'Undo');\n\n// Load the given component into the snackbar.\nlet snackBarRef = snackBar.openFromComponent(MessageArchivedComponent);"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Initializing Basic YouTube Player Component in Angular",
    "codeDescription": "Demonstrates basic setup of a YouTube player component using the standalone component approach. Shows how to import and implement a simple player with a video ID.",
    "codeLanguage": "typescript",
    "codeTokens": 104,
    "codeId": "https://github.com/angular/components/blob/main/src/youtube-player/README.md#2025-04-11_snippet_0",
    "pageTitle": "Angular YouTube Player Component Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Component} from '@angular/core';\nimport {YouTubePlayer} from '@angular/youtube-player';\n\n@Component({\n  imports: [YouTubePlayer],\n  template: '<youtube-player videoId=\"mVjYG9TSN88\"/>',\n  selector: 'youtube-player-example',\n})\nexport class YoutubePlayerExample {}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Adjusting Density in Angular Material Theme",
    "codeDescription": "This example demonstrates how to adjust the density setting in an Angular Material theme. It sets a density of -2, which reduces whitespace in component layouts.",
    "codeLanguage": "scss",
    "codeTokens": 83,
    "codeId": "https://github.com/angular/components/blob/main/guides/theming.md#2025-04-11_snippet_4",
    "pageTitle": "Angular Material Theming Guide",
    "codeList": [
      {
        "language": "scss",
        "code": "@use '@angular/material' as mat;\n\nhtml {\n  @include mat.theme((\n    color: mat.$violet-palette,\n    typography: Roboto,\n    density: -2,\n  ));\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "MatTableDataSource Implementation in TypeScript",
    "codeDescription": "A data source implementation for the Material Table that handles filtering, sorting, and pagination. It extends the CDK DataSource class and provides methods for data manipulation.",
    "codeLanguage": "typescript",
    "codeTokens": 264,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/table/index.api.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Table API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class MatTableDataSource<T, P extends MatPaginator = MatPaginator> extends DataSource<T> {\n    constructor(initialData?: T[]);\n    connect(): BehaviorSubject<T[]>;\n    get data(): T[];\n    set data(data: T[]);\n    disconnect(): void;\n    get filter(): string;\n    set filter(filter: string);\n    _filterData(data: T[]): T[];\n    filteredData: T[];\n    filterPredicate: (data: T, filter: string) => boolean;\n    _orderData(data: T[]): T[];\n    _pageData(data: T[]): T[];\n    get paginator(): P | null;\n    set paginator(paginator: P | null);\n    _renderChangesSubscription: Subscription | null;\n    get sort(): MatSort | null;\n    set sort(sort: MatSort | null);\n    sortData: (data: T[], sort: MatSort) => T[];\n    sortingDataAccessor: (data: T, sortHeaderId: string) => string | number;\n    _updateChangeSubscription(): void;\n    _updatePaginator(filteredDataLength: number): void;\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Passing Data to Dialog Component in TypeScript",
    "codeDescription": "Illustrates how to pass data to a dialog component when opening it, and how to access that data within the dialog component using MAT_DIALOG_DATA.",
    "codeLanguage": "typescript",
    "codeTokens": 129,
    "codeId": "https://github.com/angular/components/blob/main/src/material/dialog/dialog.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material Dialog Component Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "let dialogRef = dialog.open(YourDialog, {\n  data: { name: 'austin' },\n});\n\nimport {Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA} from '../dialog';\n\n@Component({\n  selector: 'your-dialog',\n  template: 'passed in {{ data.name }}',\n})\nexport class YourDialog {\n  constructor(@Inject(MAT_DIALOG_DATA) public data: {name: string}) { }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing Multi-line Lists with Angular Material",
    "codeDescription": "Demonstrates how to create multi-line list items using matListItemLine attribute. This example shows both two-line and three-line list implementations.",
    "codeLanguage": "html",
    "codeTokens": 209,
    "codeId": "https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-11_snippet_5",
    "pageTitle": "Angular Material List Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- two line list -->\n<mat-list>\n  @for (message of messages; track message) {\n    <mat-list-item>\n      <h3 matListItemTitle>{{message.from}}</h3>\n      <p matListItemLine>\n        <span>{{message.subject}}</span>\n        <span class=\"demo-2\"> -- {{message.content}}</span>\n      </p>\n    </mat-list-item>\n  }\n</mat-list>\n\n<!-- three line list -->\n<mat-list>\n  @for (message of messages; track message) {\n    <mat-list-item>\n      <h3 matListItemTitle>{{message.from}}</h3>\n      <p matListItemLine>{{message.subject}}</p>\n      <p matListItemLine class=\"demo-2\">{{message.content}}</p>\n    </mat-list-item>\n  }\n</mat-list>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "MapMarker Class Definition in TypeScript",
    "codeDescription": "Definition of the MapMarker class which wraps the Google Maps Marker API for Angular. It provides properties for marker customization, event observables, and lifecycle methods for initialization and cleanup.",
    "codeLanguage": "typescript",
    "codeTokens": 637,
    "codeId": "https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-11_snippet_19",
    "pageTitle": "Angular Google Maps API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "readonly mapDragend: Observable<google.maps.MapMouseEvent>;\nreadonly mapDragstart: Observable<google.maps.MapMouseEvent>;\nreadonly mapMousedown: Observable<google.maps.MapMouseEvent>;\nreadonly mapMouseout: Observable<google.maps.MapMouseEvent>;\nreadonly mapMouseover: Observable<google.maps.MapMouseEvent>;\nreadonly mapMouseup: Observable<google.maps.MapMouseEvent>;\nreadonly mapRightclick: Observable<google.maps.MapMouseEvent>;\nmarker?: google.maps.Marker;\nreadonly markerInitialized: EventEmitter<google.maps.Marker>;\n// (undocumented)\nngOnChanges(changes: SimpleChanges): void;\n// (undocumented)\nngOnDestroy(): void;\n// (undocumented)\nngOnInit(): void;\nset options(options: google.maps.MarkerOptions);\nset position(position: google.maps.LatLngLiteral | google.maps.LatLng);\nreadonly positionChanged: Observable<void>;\n_resolveMarker(): Promise<google.maps.Marker>;\nreadonly shapeChanged: Observable<void>;\nset title(title: string);\nreadonly titleChanged: Observable<void>;\nset visible(value: boolean);\nreadonly visibleChanged: Observable<void>;\nreadonly zindexChanged: Observable<void>;\n// (undocumented)\nstatic ɵdir: i0.ɵɵDirectiveDeclaration<MapMarker, \"map-marker\", [\"mapMarker\"], { \"title\": { \"alias\": \"title\"; \"required\": false; }; \"position\": { \"alias\": \"position\"; \"required\": false; }; \"label\": { \"alias\": \"label\"; \"required\": false; }; \"clickable\": { \"alias\": \"clickable\"; \"required\": false; }; \"options\": { \"alias\": \"options\"; \"required\": false; }; \"icon\": { \"alias\": \"icon\"; \"required\": false; }; \"visible\": { \"alias\": \"visible\"; \"required\": false; }; }, { \"animationChanged\": \"animationChanged\"; \"mapClick\": \"mapClick\"; \"clickableChanged\": \"clickableChanged\"; \"cursorChanged\": \"cursorChanged\"; \"mapDblclick\": \"mapDblclick\"; \"mapDrag\": \"mapDrag\"; \"mapDragend\": \"mapDragend\"; \"draggableChanged\": \"draggableChanged\"; \"mapDragstart\": \"mapDragstart\"; \"flatChanged\": \"flatChanged\"; \"iconChanged\": \"iconChanged\"; \"mapMousedown\": \"mapMousedown\"; \"mapMouseout\": \"mapMouseout\"; \"mapMouseover\": \"mapMouseover\"; \"mapMouseup\": \"mapMouseup\"; \"positionChanged\": \"positionChanged\"; \"mapRightclick\": \"mapRightclick\"; \"shapeChanged\": \"shapeChanged\"; \"titleChanged\": \"titleChanged\"; \"visibleChanged\": \"visibleChanged\"; \"zindexChanged\": \"zindexChanged\"; \"markerInitialized\": \"markerInitialized\"; }, never, never, true, never>;\n// (undocumented)\nstatic ɵfac: i0.ɵɵFactoryDeclaration<MapMarker, never>;"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Angular CDK Stepper API TypeScript Definitions",
    "codeDescription": "Complete API definition for the @angular/cdk_stepper module. Includes class definitions for CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, along with supporting interfaces, tokens, and types for implementing step-based workflows in Angular applications.",
    "codeLanguage": "typescript",
    "codeTokens": 2116,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/stepper/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular CDK Stepper API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AbstractControl } from '@angular/forms';\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FormGroupDirective } from '@angular/forms';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\n\n// @public (undocumented)\nexport class CdkStep implements OnChanges {\n    constructor(...args: unknown[]);\n    ariaLabel: string;\n    ariaLabelledby: string;\n    protected _childForms: QueryList<Partial<NgForm | FormGroupDirective>> | undefined;\n    get completed(): boolean;\n    set completed(value: boolean);\n    // (undocumented)\n    _completedOverride: boolean | null;\n    content: TemplateRef<any>;\n    // (undocumented)\n    _displayDefaultIndicatorType: boolean;\n    editable: boolean;\n    errorMessage: string;\n    get hasError(): boolean;\n    set hasError(value: boolean);\n    interacted: boolean;\n    readonly interactedStream: EventEmitter<CdkStep>;\n    label: string;\n    // (undocumented)\n    _markAsInteracted(): void;\n    // (undocumented)\n    static ngAcceptInputType_completed: unknown;\n    // (undocumented)\n    static ngAcceptInputType_editable: unknown;\n    // (undocumented)\n    static ngAcceptInputType_hasError: unknown;\n    // (undocumented)\n    static ngAcceptInputType_optional: unknown;\n    // (undocumented)\n    ngOnChanges(): void;\n    optional: boolean;\n    reset(): void;\n    select(): void;\n    _showError(): boolean;\n    state: StepState;\n    stepControl: AbstractControl;\n    stepLabel: CdkStepLabel;\n    // (undocumented)\n    _stepper: CdkStepper;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<CdkStep, \"cdk-step\", [\"cdkStep\"], { \"stepControl\": { \"alias\": \"stepControl\"; \"required\": false; }; \"label\": { \"alias\": \"label\"; \"required\": false; }; \"errorMessage\": { \"alias\": \"errorMessage\"; \"required\": false; }; \"ariaLabel\": { \"alias\": \"aria-label\"; \"required\": false; }; \"ariaLabelledby\": { \"alias\": \"aria-labelledby\"; \"required\": false; }; \"state\": { \"alias\": \"state\"; \"required\": false; }; \"editable\": { \"alias\": \"editable\"; \"required\": false; }; \"optional\": { \"alias\": \"optional\"; \"required\": false; }; \"completed\": { \"alias\": \"completed\"; \"required\": false; }; \"hasError\": { \"alias\": \"hasError\"; \"required\": false; }; }, { \"interactedStream\": \"interacted\"; }, [\"stepLabel\", \"_childForms\"], [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkStep, never>;\n}\n\n// @public (undocumented)\nexport class CdkStepHeader implements FocusableOption {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    _elementRef: ElementRef<HTMLElement>;\n    focus(): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkStepHeader, \"[cdkStepHeader]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkStepHeader, never>;\n}\n\n// @public (undocumented)\nexport class CdkStepLabel {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    template: TemplateRef<any>;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkStepLabel, \"[cdkStepLabel]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkStepLabel, never>;\n}\n\n// @public (undocumented)\nexport class CdkStepper implements AfterContentInit, AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    protected readonly _destroyed: Subject<void>;\n    // (undocumented)\n    protected _elementRef: ElementRef<HTMLElement>;\n    _getAnimationDirection(index: number): StepContentPositionState;\n    _getFocusIndex(): number | null;\n    _getIndicatorType(index: number, state?: StepState): StepState;\n    _getStepContentId(i: number): string;\n    _getStepLabelId(i: number): string;\n    linear: boolean;\n    next(): void;\n    // (undocumented)\n    static ngAcceptInputType_linear: unknown;\n    // (undocumented)\n    static ngAcceptInputType_selectedIndex: unknown;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    _onKeydown(event: KeyboardEvent): void;\n    get orientation(): StepperOrientation;\n    set orientation(value: StepperOrientation);\n    previous(): void;\n    reset(): void;\n    get selected(): CdkStep | undefined;\n    set selected(step: CdkStep | undefined);\n    get selectedIndex(): number;\n    set selectedIndex(index: number);\n    readonly selectedIndexChange: EventEmitter<number>;\n    readonly selectionChange: EventEmitter<StepperSelectionEvent>;\n    _stateChanged(): void;\n    _stepHeader: QueryList<CdkStepHeader>;\n    readonly steps: QueryList<CdkStep>;\n    _steps: QueryList<CdkStep>;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkStepper, \"[cdkStepper]\", [\"cdkStepper\"], { \"linear\": { \"alias\": \"linear\"; \"required\": false; }; \"selectedIndex\": { \"alias\": \"selectedIndex\"; \"required\": false; }; \"selected\": { \"alias\": \"selected\"; \"required\": false; }; \"orientation\": { \"alias\": \"orientation\"; \"required\": false; }; }, { \"selectionChange\": \"selectionChange\"; \"selectedIndexChange\": \"selectedIndexChange\"; }, [\"_steps\", \"_stepHeader\"], never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkStepper, never>;\n}\n\n// @public (undocumented)\nexport class CdkStepperModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkStepperModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<CdkStepperModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<CdkStepperModule, never, [typeof BidiModule, typeof CdkStep, typeof CdkStepper, typeof CdkStepHeader, typeof CdkStepLabel, typeof CdkStepperNext, typeof CdkStepperPrevious], [typeof CdkStep, typeof CdkStepper, typeof CdkStepHeader, typeof CdkStepLabel, typeof CdkStepperNext, typeof CdkStepperPrevious]>;\n}\n\n// @public\nexport class CdkStepperNext {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    _stepper: CdkStepper;\n    type: string;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkStepperNext, \"button[cdkStepperNext]\", never, { \"type\": { \"alias\": \"type\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkStepperNext, never>;\n}\n\n// @public\nexport class CdkStepperPrevious {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    _stepper: CdkStepper;\n    type: string;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkStepperPrevious, \"button[cdkStepperPrevious]\", never, { \"type\": { \"alias\": \"type\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkStepperPrevious, never>;\n}\n\n// @public\nexport const STEP_STATE: {\n    NUMBER: string;\n    EDIT: string;\n    DONE: string;\n    ERROR: string;\n};\n\n// @public\nexport type StepContentPositionState = 'previous' | 'current' | 'next';\n\n// @public\nexport const STEPPER_GLOBAL_OPTIONS: InjectionToken<StepperOptions>;\n\n// @public\nexport interface StepperOptions {\n    displayDefaultIndicatorType?: boolean;\n    showError?: boolean;\n}\n\n// @public\nexport type StepperOrientation = 'horizontal' | 'vertical';\n\n// @public\nexport class StepperSelectionEvent {\n    previouslySelectedIndex: number;\n    previouslySelectedStep: CdkStep;\n    selectedIndex: number;\n    selectedStep: CdkStep;\n}\n\n// @public\nexport type StepState = 'number' | 'edit' | 'done' | 'error' | string;\n\n// (No @packageDocumentation comment for this package)"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Aligning Tab Labels in Angular Material Tab Groups",
    "codeDescription": "This code demonstrates how to align tab labels within the tab header using the mat-align-tabs attribute. This allows for positioning tab labels at the start, center, or end of the container.",
    "codeLanguage": "html",
    "codeTokens": 107,
    "codeId": "https://github.com/angular/components/blob/main/src/material/tabs/tabs.md#2025-04-11_snippet_4",
    "pageTitle": "Angular Material Tabs Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-tab-group mat-align-tabs=\"start\">\n  <mat-tab label=\"First\">Content 1</mat-tab>\n  <mat-tab label=\"Second\">Content 2</mat-tab>\n  <mat-tab label=\"Third\">Content 3</mat-tab>\n</mat-tab-group>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing a Context Menu in Angular CDK",
    "codeDescription": "Demonstrates how to create a context menu that appears on right-click using cdkContextMenuTriggerFor directive to associate a container with a menu template.",
    "codeLanguage": "html",
    "codeTokens": 156,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/menu/menu.md#2025-04-11_snippet_5",
    "pageTitle": "Angular CDK Menu Module Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"example-context-container\" [cdkContextMenuTriggerFor]=\"contextMenu\">\n  Right click anywhere in this box to open the context menu\n</div>\n\n<ng-template #contextMenu>\n  <div class=\"example-menu\" cdkMenu>\n    <button class=\"example-menu-item\" cdkMenuItem>Open</button>\n    <button class=\"example-menu-item\" cdkMenuItem>Save</button>\n    <hr>\n    <button class=\"example-menu-item\" cdkMenuItem>Delete</button>\n  </div>\n</ng-template>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Connecting Date Range Input with Picker in Angular Material",
    "codeDescription": "HTML code showing how to connect a date range input with a date range picker using the rangePicker property.",
    "codeLanguage": "html",
    "codeTokens": 82,
    "codeId": "https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Datepicker Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-date-range-input [rangePicker]=\"picker\">\n  <input matStartDate placeholder=\"Start date\">\n  <input matEndDate placeholder=\"End date\">\n</mat-date-range-input>\n\n<mat-date-range-picker #picker></mat-date-range-picker>"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "MapCircle Template Implementation in Angular HTML",
    "codeDescription": "Shows the HTML template implementation of a Google Map with a MapCircle component. Demonstrates how to bind circle properties and set map dimensions.",
    "codeLanguage": "html",
    "codeTokens": 89,
    "codeId": "https://github.com/angular/components/blob/main/src/google-maps/map-circle/README.md#2025-04-11_snippet_1",
    "pageTitle": "Google Maps Circle Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- google-maps-demo.component.html -->\n<google-map height=\"400px\" width=\"750px\" [center]=\"center\" [zoom]=\"zoom\">\n  <map-circle [center]=\"circleCenter\" [radius]=\"radius\" />\n</google-map>"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Passing Data to a Dialog Component",
    "codeDescription": "Demonstrates how to pass data to a dialog component using the data option when opening the dialog.",
    "codeLanguage": "ts",
    "codeTokens": 53,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.md#2025-04-11_snippet_8",
    "pageTitle": "Angular CDK Dialog Service Documentation",
    "codeList": [
      {
        "language": "ts",
        "code": "const dialogRef = dialog.open(YourDialog, {\n  data: {name: 'frodo'},\n});"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Animation Styles for Angular CDK Drag and Drop",
    "codeDescription": "CSS animations for drag-and-drop interactions. Includes transitions for elements being sorted within a list and for elements being animated to their final position after being dropped.",
    "codeLanguage": "css",
    "codeTokens": 137,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-11_snippet_3",
    "pageTitle": "Angular CDK Drag and Drop Module Documentation",
    "codeList": [
      {
        "language": "css",
        "code": "/* Animate items as they're being sorted. */\n.cdk-drop-list-dragging .cdk-drag {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n/* Animate an item that has been dropped. */\n.cdk-drag-animating {\n  transition: transform 300ms cubic-bezier(0, 0, 0.2, 1);\n}"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Implementing Multiple Toolbar Rows with mat-toolbar-row in Angular Material",
    "codeDescription": "This snippet demonstrates how to create a toolbar with multiple rows using the `<mat-toolbar-row>` element inside a `<mat-toolbar>`. Content must be placed inside row elements when using this approach.",
    "codeLanguage": "html",
    "codeTokens": 163,
    "codeId": "https://github.com/angular/components/blob/main/src/material/toolbar/toolbar.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Toolbar Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-toolbar-row>\n  <span>First Row</span>\n  <span class=\"example-spacer\"></span>\n  <mat-icon class=\"example-icon\" aria-hidden=\"false\" aria-label=\"Example user verified icon\">verified_user</mat-icon>\n</mat-toolbar-row>\n<mat-toolbar-row>\n  <span>Second Row</span>\n  <span class=\"example-spacer\"></span>\n  <mat-icon class=\"example-icon\" aria-hidden=\"false\" aria-label=\"Example heart icon\">favorite</mat-icon>\n</mat-toolbar-row>"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Modifying Default Tooltip Behavior in Angular Material",
    "codeDescription": "This snippet shows how to change the default tooltip behavior in Angular Material using the MAT_TOOLTIP_DEFAULT_OPTIONS injection token. It's a placeholder for an example of custom default settings.",
    "codeLanguage": "html",
    "codeTokens": 55,
    "codeId": "https://github.com/angular/components/blob/main/src/material/tooltip/tooltip.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material Tooltip Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- example(tooltip-modified-defaults) -->"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Implementing Complex Navigation Lists in Angular Material",
    "codeDescription": "Demonstrates a more complex navigation list with additional interactive elements. This example includes a button with an icon in the meta section of each list item.",
    "codeLanguage": "html",
    "codeTokens": 125,
    "codeId": "https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material List Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-nav-list>\n  @for (link of links; track link) {\n    <mat-list-item [activated]=\"link.isActive\">\n       <a matListItemTitle href=\"...\">{{ link }}</a>\n       <button matIconButton (click)=\"showInfo(link)\" matListItemMeta>\n          <mat-icon>info</mat-icon>\n       </button>\n    </mat-list-item>\n  }\n</mat-nav-list>"
      }
    ],
    "relevance": 0.957
  },
  {
    "codeTitle": "Using Angular Material Slide Toggle in HTML Template",
    "codeDescription": "HTML markup showing how to add a Material slide toggle component to an Angular component template.",
    "codeLanguage": "html",
    "codeTokens": 40,
    "codeId": "https://github.com/angular/components/blob/main/guides/getting-started.md#2025-04-11_snippet_2",
    "pageTitle": "Getting Started with Angular Material",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-slide-toggle>Toggle me!</mat-slide-toggle>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Generating Drag and Drop Component with Angular CDK",
    "codeDescription": "Command to generate a component that uses the CDK drag and drop directives for creating interactive elements.",
    "codeLanguage": "bash",
    "codeTokens": 44,
    "codeId": "https://github.com/angular/components/blob/main/guides/schematics.md#2025-04-11_snippet_7",
    "pageTitle": "Angular Material Installation and Code Generation",
    "codeList": [
      {
        "language": "bash",
        "code": "ng generate @angular/cdk:drag-drop <component-name>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using Custom Tab Labels with mat-tab-label Directive in Angular Material",
    "codeDescription": "This snippet demonstrates how to implement complex custom labels for tabs using the mat-tab-label directive inside mat-tab components. This approach allows for more advanced content in tab labels beyond simple text.",
    "codeLanguage": "html",
    "codeTokens": 97,
    "codeId": "https://github.com/angular/components/blob/main/src/material/tabs/tabs.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Tabs Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-tab>\n  <ng-template mat-tab-label>\n    The <em>best</em> pasta\n  </ng-template>\n  <h1>Best pasta restaurants</h1>\n  <p>...</p>\n</mat-tab>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Configuring Global Dialog Defaults in Angular",
    "codeDescription": "Demonstrates how to set global default options for all dialogs in an Angular application using MAT_DIALOG_DEFAULT_OPTIONS.",
    "codeLanguage": "typescript",
    "codeTokens": 60,
    "codeId": "https://github.com/angular/components/blob/main/src/material/dialog/dialog.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Dialog Component Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@NgModule({\n  providers: [\n    {provide: MAT_DIALOG_DEFAULT_OPTIONS, useValue: {hasBackdrop: false}}\n  ]\n})"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating a TemplatePortal with HTML and TypeScript in Angular",
    "codeDescription": "Demonstrates the two parts needed to create a TemplatePortal: the HTML template declaration and the TypeScript implementation that references the template using ViewChild.",
    "codeLanguage": "html",
    "codeTokens": 55,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/portal/portal.md#2025-04-11_snippet_2",
    "pageTitle": "Angular CDK Portals Package Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<ng-template #templatePortalContent>Some content here</ng-template>"
      },
      {
        "language": "typescript",
        "code": "@ViewChild('templatePortalContent') templatePortalContent: TemplateRef<unknown>;\n\nngAfterViewInit() {\n  this.templatePortal = new TemplatePortal(\n    this.templatePortalContent,\n    this._viewContainerRef\n  );\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Defining Angular Material Paginator API in TypeScript",
    "codeDescription": "This code snippet defines the API for the Angular Material Paginator module. It includes imports, class definitions, interfaces, and constants used for pagination functionality.",
    "codeLanguage": "typescript",
    "codeTokens": 1503,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/paginator/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Paginator API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AbstractControl } from '@angular/forms';\nimport { AbstractControlDirective } from '@angular/forms';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { AfterContentChecked } from '@angular/core';\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewChecked } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { CdkConnectedOverlay } from '@angular/cdk/overlay';\nimport { CdkOverlayOrigin } from '@angular/cdk/overlay';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { ConnectedPosition } from '@angular/cdk/overlay';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { FormGroupDirective } from '@angular/forms';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i1_2 from '@angular/cdk/a11y';\nimport * as i2 from '@angular/cdk/overlay';\nimport * as i2_2 from '@angular/cdk/observers';\nimport * as i5 from '@angular/cdk/scrolling';\nimport { InjectionToken } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { NgForm } from '@angular/forms';\nimport { NgZone } from '@angular/core';\nimport { NumberInput } from '@angular/cdk/coercion';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Optional } from '@angular/core';\nimport { OriginConnectionPosition } from '@angular/cdk/overlay';\nimport { OverlayConnectionPosition } from '@angular/cdk/overlay';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { QueryList } from '@angular/core';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\n\nexport const MAT_PAGINATOR_DEFAULT_OPTIONS: InjectionToken<MatPaginatorDefaultOptions>;\n\nexport const MAT_PAGINATOR_INTL_PROVIDER: {\n    provide: typeof MatPaginatorIntl;\n    deps: Optional[][];\n    useFactory: typeof MAT_PAGINATOR_INTL_PROVIDER_FACTORY;\n};\n\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl): MatPaginatorIntl;\n\nexport class MatPaginator implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    protected _buttonClicked(targetIndex: number, isDisabled: boolean): void;\n    _changePageSize(pageSize: number): void;\n    color: ThemePalette;\n    disabled: boolean;\n    _displayedPageSizeOptions: number[];\n    firstPage(): void;\n    _formFieldAppearance?: MatFormFieldAppearance;\n    getNumberOfPages(): number;\n    hasNextPage(): boolean;\n    hasPreviousPage(): boolean;\n    hidePageSize: boolean;\n    initialized: Observable<void>;\n    _intl: MatPaginatorIntl;\n    lastPage(): void;\n    get length(): number;\n    set length(value: number);\n    _nextButtonsDisabled(): boolean;\n    nextPage(): void;\n    static ngAcceptInputType_disabled: unknown;\n    static ngAcceptInputType_hidePageSize: unknown;\n    static ngAcceptInputType_length: unknown;\n    static ngAcceptInputType_pageIndex: unknown;\n    static ngAcceptInputType_pageSize: unknown;\n    static ngAcceptInputType_showFirstLastButtons: unknown;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    readonly page: EventEmitter<PageEvent>;\n    get pageIndex(): number;\n    set pageIndex(value: number);\n    get pageSize(): number;\n    set pageSize(value: number);\n    readonly _pageSizeLabelId: string;\n    get pageSizeOptions(): number[];\n    set pageSizeOptions(value: number[] | readonly number[]);\n    _previousButtonsDisabled(): boolean;\n    previousPage(): void;\n    selectConfig: MatPaginatorSelectConfig;\n    showFirstLastButtons: boolean;\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatPaginator, \"mat-paginator\", [\"matPaginator\"], { \"color\": { \"alias\": \"color\"; \"required\": false; }; \"pageIndex\": { \"alias\": \"pageIndex\"; \"required\": false; }; \"length\": { \"alias\": \"length\"; \"required\": false; }; \"pageSize\": { \"alias\": \"pageSize\"; \"required\": false; }; \"pageSizeOptions\": { \"alias\": \"pageSizeOptions\"; \"required\": false; }; \"hidePageSize\": { \"alias\": \"hidePageSize\"; \"required\": false; }; \"showFirstLastButtons\": { \"alias\": \"showFirstLastButtons\"; \"required\": false; }; \"selectConfig\": { \"alias\": \"selectConfig\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; }, { \"page\": \"page\"; }, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatPaginator, never>;\n}\n\nexport interface MatPaginatorDefaultOptions {\n    formFieldAppearance?: MatFormFieldAppearance;\n    hidePageSize?: boolean;\n    pageSize?: number;\n    pageSizeOptions?: number[];\n    showFirstLastButtons?: boolean;\n}\n\nexport class MatPaginatorIntl {\n    readonly changes: Subject<void>;\n    firstPageLabel: string;\n    getRangeLabel: (page: number, pageSize: number, length: number) => string;\n    itemsPerPageLabel: string;\n    lastPageLabel: string;\n    nextPageLabel: string;\n    previousPageLabel: string;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatPaginatorIntl, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<MatPaginatorIntl>;\n}\n\nexport class MatPaginatorModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatPaginatorModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatPaginatorModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatPaginatorModule, never, [typeof MatButtonModule, typeof MatSelectModule, typeof MatTooltipModule, typeof MatPaginator], [typeof MatPaginator]>;\n}\n\nexport interface MatPaginatorSelectConfig {\n    disableOptionCentering?: boolean;\n    panelClass?: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n}\n\nexport class PageEvent {\n    length: number;\n    pageIndex: number;\n    pageSize: number;\n    previousPageIndex?: number;\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using Custom Angular Form Field Control in Template",
    "codeDescription": "These snippets show how to use the custom form field control (example-tel-input) within a mat-form-field in an Angular template, including additional features like placeholders, icons, and hints.",
    "codeLanguage": "html",
    "codeTokens": 71,
    "codeId": "https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-11_snippet_9",
    "pageTitle": "Custom Form Field Control Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-form-field>\n  <example-tel-input></example-tel-input>\n</mat-form-field>"
      },
      {
        "language": "html",
        "code": "<mat-form-field>\n  <example-tel-input placeholder=\"Phone number\" required></example-tel-input>\n  <mat-icon matPrefix>phone</mat-icon>\n  <mat-hint>Include area code</mat-hint>\n</mat-form-field>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating a Chip Listbox in Angular Material",
    "codeDescription": "This snippet demonstrates how to create a chip listbox for selecting shirt sizes using the mat-chip-listbox and mat-chip-option components in Angular Material.",
    "codeLanguage": "html",
    "codeTokens": 104,
    "codeId": "https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-11_snippet_5",
    "pageTitle": "Angular Material Chips Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-chip-listbox aria-label=\"select a shirt size\">\n  <mat-chip-option> Small </mat-chip-option>\n  <mat-chip-option> Medium </mat-chip-option>\n  <mat-chip-option> Large </mat-chip-option>\n</mat-chip-listbox>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing Lazy Rendering for Angular Material Menu in HTML",
    "codeDescription": "Shows how to defer initialization of menu content until the menu is opened. This is achieved by providing the content as an ng-template with the matMenuContent attribute.",
    "codeLanguage": "html",
    "codeTokens": 118,
    "codeId": "https://github.com/angular/components/blob/main/src/material/menu/menu.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Menu Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-menu #appMenu=\"matMenu\">\n  <ng-template matMenuContent>\n    <button mat-menu-item>Settings</button>\n    <button mat-menu-item>Help</button>\n  </ng-template>\n</mat-menu>\n\n<button matIconButton [matMenuTriggerFor]=\"appMenu\">\n  <mat-icon>more_vert</mat-icon>\n</button>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating a Disabled Chip Option in Angular Material",
    "codeDescription": "This snippet shows how to create a disabled chip option using the mat-chip-option component in Angular Material. The disabled attribute prevents user interaction and gives the chip a disabled appearance.",
    "codeLanguage": "html",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Chips Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-chip-option disabled>Orange</mat-chip-option>"
      }
    ],
    "relevance": 0.953
  },
  {
    "codeTitle": "Implementing Query Progress Bar in Angular Material",
    "codeDescription": "This snippet illustrates the query mode of the progress bar in Angular Material. It's used to indicate pre-loading before the actual loading starts. The progress bar renders as an inverted 'indeterminate' bar, and the 'value' property is ignored in this mode.",
    "codeLanguage": "html",
    "codeTokens": 70,
    "codeId": "https://github.com/angular/components/blob/main/src/material/progress-bar/progress-bar.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material Progress Bar Component",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- example(progress-bar-query) -->"
      }
    ],
    "relevance": 0.953
  },
  {
    "codeTitle": "Enhancing Autocomplete Panel Width in Angular Material",
    "codeDescription": "Adds support for the autocomplete panel to have a width value of auto. This feature allows for more flexible sizing of the autocomplete dropdown.",
    "codeLanguage": "TypeScript",
    "codeTokens": 89,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_77",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "**autocomplete:** allow panel to have a width value of auto ([#11879](https://github.com/angular/material2/issues/11879)) ([8a5713e](https://github.com/angular/material2/commit/8a5713e))"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Dynamic Step Creation in Custom Stepper",
    "codeDescription": "Example showing how to dynamically generate steps in the custom stepper using Angular's for loop. This approach allows for data-driven step creation with custom components inside each step.",
    "codeLanguage": "html",
    "codeTokens": 100,
    "codeId": "https://github.com/angular/components/blob/main/guides/creating-a-custom-stepper-using-the-cdk-stepper.md#2025-04-11_snippet_4",
    "pageTitle": "Creating a Custom Angular CDK Stepper",
    "codeList": [
      {
        "language": "html",
        "code": "<app-custom-stepper>\n  @for (step of mySteps; track step) {\n    <cdk-step>\n      <my-step-component [step]=\"$index\"></my-step-component>\n    </cdk-step>\n  }\n</app-custom-stepper>"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Configuring MatCheckbox Click Behavior in Angular",
    "codeDescription": "Example showing how to customize the checkbox click behavior by providing MAT_CHECKBOX_DEFAULT_OPTIONS token. Sets the click action to 'noop' to prevent default toggling behavior.",
    "codeLanguage": "typescript",
    "codeTokens": 74,
    "codeId": "https://github.com/angular/components/blob/main/src/material/checkbox/checkbox.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Checkbox Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "providers: [\n  {provide: MAT_CHECKBOX_DEFAULT_OPTIONS, useValue: { clickAction: 'noop' } as MatCheckboxDefaultOptions}\n]"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Customizing Badge Position in Angular Material",
    "codeDescription": "Demonstrates how to position badges using the matBadgePosition attribute with values 'above|below' and 'before|after'. This allows controlling where the badge appears relative to its host element.",
    "codeLanguage": "html",
    "codeTokens": 175,
    "codeId": "https://github.com/angular/components/blob/main/src/material/badge/badge.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Badge Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<h3>Badge position</h3>\n<p>\n  <span matBadge=\"4\" matBadgeOverlap=\"false\">Text with a badge</span>\n</p>\n\n<p>\n  <span matBadge=\"1\" matBadgePosition=\"below before\" matBadgeColor=\"primary\">Hello</span>\n</p>\n\n<p>\n  <span matBadge=\"3\" matBadgePosition=\"below after\" matBadgeColor=\"accent\">Hi</span>\n</p>\n\n<p>\n  <span matBadge=\"5\" matBadgePosition=\"above before\" matBadgeColor=\"warn\">Yo</span>\n</p>"
      }
    ],
    "relevance": 0.951
  },
  {
    "codeTitle": "Using Angular Material Spinner Component",
    "codeDescription": "Shows the basic syntax for using the mat-spinner component, which is an alias for the indeterminate mode of the progress spinner.",
    "codeLanguage": "html",
    "codeTokens": 41,
    "codeId": "https://github.com/angular/components/blob/main/src/material/progress-spinner/progress-spinner.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Progress Spinner Component Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-spinner>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Observing Viewport Changes with BreakpointObserver in TypeScript",
    "codeDescription": "Shows how to use BreakpointObserver's observe method to react to viewport orientation changes through an observable stream.",
    "codeLanguage": "typescript",
    "codeTokens": 67,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/layout/layout.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Layout Package Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const layoutChanges = breakpointObserver.observe([\n  '(orientation: portrait)',\n  '(orientation: landscape)',\n]);\n\nlayoutChanges.subscribe(result => {\n  updateMyLayoutForOrientationChange();\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Localizing Datepicker Labels",
    "codeDescription": "Implementing custom localization for datepicker labels and messages using MatDatepickerIntl.",
    "codeLanguage": "typescript",
    "codeTokens": 60,
    "codeId": "https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-11_snippet_12",
    "pageTitle": "Angular Material Datepicker Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "bootstrapApplication(MyApp, {\n  providers: [\n    {provide: MatDatepickerIntl, useClass: MyIntl},\n    provideNativeDateAdapter(),\n  ],\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Displaying an SVG Icon from a Named Icon Set in Angular Material",
    "codeDescription": "This snippet illustrates how to use an SVG icon that has been registered with MatIconRegistry. The svgIcon input is set to the name of the icon, optionally prefixed with a namespace.",
    "codeLanguage": "html",
    "codeTokens": 61,
    "codeId": "https://github.com/angular/components/blob/main/src/material/icon/icon.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Icon Component Usage Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-icon svgIcon=\"thumbs-up\"></mat-icon>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Enabling Row Recycling in CdkTable for Performance",
    "codeDescription": "Implements the recycleRows property on CdkTable to enable row view caching and recycling, which can improve performance when rows don't need animation or template switching.",
    "codeLanguage": "html",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-11_snippet_8",
    "pageTitle": "CdkTable: Angular's Unopinionated Data Table Component",
    "codeList": [
      {
        "language": "html",
        "code": "<table cdk-table [dataSource]=\"dataSource\" recycleRows>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "TypeScript API Definitions for Angular Material Form Field Testing",
    "codeDescription": "This code snippet defines the complete API for Angular Material form field testing harnesses. It includes interfaces for filtering harnesses, type definitions, and harness classes for form fields, errors, and form controls that can be used in component tests.",
    "codeLanguage": "typescript",
    "codeTokens": 601,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/form-field/testing/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Form Field Testing API Report",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport interface ErrorHarnessFilters extends BaseHarnessFilters {\n    text?: string | RegExp;\n}\n\n// @public\nexport type FormFieldControlHarness = MatInputHarness | MatSelectHarness | MatDatepickerInputHarness | MatDateRangeInputHarness;\n\n// @public\nexport interface FormFieldHarnessFilters extends BaseHarnessFilters {\n    floatingLabelText?: string | RegExp;\n    hasErrors?: boolean;\n    isValid?: boolean;\n}\n\n// @public\nexport class MatErrorHarness extends ComponentHarness {\n    // (undocumented)\n    protected static _getErrorPredicate<T extends MatErrorHarness>(type: ComponentHarnessConstructor<T>, options: ErrorHarnessFilters): HarnessPredicate<T>;\n    getText(): Promise<string>;\n    // (undocumented)\n    static hostSelector: string;\n    static with<T extends MatErrorHarness>(this: ComponentHarnessConstructor<T>, options?: ErrorHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport abstract class MatFormFieldControlHarness extends ComponentHarness {\n}\n\n// @public (undocumented)\nexport class MatFormFieldHarness extends ComponentHarness {\n    getAppearance(): Promise<'fill' | 'outline'>;\n    getControl(): Promise<FormFieldControlHarness | null>;\n    getControl<X extends MatFormFieldControlHarness>(type: ComponentHarnessConstructor<X>): Promise<X | null>;\n    getControl<X extends MatFormFieldControlHarness>(type: HarnessPredicate<X>): Promise<X | null>;\n    getErrors(filter?: ErrorHarnessFilters): Promise<MatErrorHarness[]>;\n    getLabel(): Promise<string | null>;\n    getPrefixText(): Promise<string>;\n    getSuffixText(): Promise<string>;\n    getTextErrors(): Promise<string[]>;\n    getTextHints(): Promise<string[]>;\n    getThemeColor(): Promise<'primary' | 'accent' | 'warn'>;\n    hasErrors(): Promise<boolean>;\n    hasLabel(): Promise<boolean>;\n    // (undocumented)\n    static hostSelector: string;\n    isAutofilled(): Promise<boolean>;\n    isControlDirty(): Promise<boolean | null>;\n    isControlPending(): Promise<boolean | null>;\n    isControlTouched(): Promise<boolean | null>;\n    isControlValid(): Promise<boolean | null>;\n    isDisabled(): Promise<boolean>;\n    isLabelFloating(): Promise<boolean>;\n    static with<T extends MatFormFieldHarness>(this: ComponentHarnessConstructor<T>, options?: FormFieldHarnessFilters): HarnessPredicate<T>;\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Angular CDK A11y Module TypeScript API Declarations",
    "codeDescription": "This code snippet defines the TypeScript API for Angular CDK's accessibility module (@angular/cdk_a11y). It includes class, interface, and function declarations related to accessibility features such as focus management, ARIA attribute handling, focus trapping, and high contrast mode detection.",
    "codeLanguage": "typescript",
    "codeTokens": 2493,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/a11y/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular CDK A11y API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { Provider } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { Signal } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n// @public (undocumented)\nexport class A11yModule {\n    constructor();\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<A11yModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<A11yModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<A11yModule, never, [typeof ObserversModule, typeof CdkAriaLive, typeof CdkTrapFocus, typeof CdkMonitorFocus], [typeof CdkAriaLive, typeof CdkTrapFocus, typeof CdkMonitorFocus]>;\n}\n\n// @public (undocumented)\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n    setActiveItem(index: number): void;\n    setActiveItem(item: T): void;\n}\n\n// @public\nexport function addAriaReferencedId(el: Element, attr: `aria-${string}`, id: string): void;\n\n// @public\nexport class AriaDescriber implements OnDestroy {\n    constructor(...args: unknown[]);\n    describe(hostElement: Element, message: string, role?: string): void;\n    describe(hostElement: Element, message: HTMLElement): void;\n    ngOnDestroy(): void;\n    removeDescription(hostElement: Element, message: string, role?: string): void;\n    removeDescription(hostElement: Element, message: HTMLElement): void;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<AriaDescriber, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<AriaDescriber>;\n}\n\n// @public\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\n\n// @public @deprecated\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = \"cdk-describedby-host\";\n\n// @public @deprecated\nexport const CDK_DESCRIBEDBY_ID_PREFIX = \"cdk-describedby-message\";\n\n// @public\nexport class CdkAriaLive implements OnDestroy {\n    constructor(...args: unknown[]);\n    duration: number;\n    // (undocumented)\n    ngOnDestroy(): void;\n    get politeness(): AriaLivePoliteness;\n    set politeness(value: AriaLivePoliteness);\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkAriaLive, \"[cdkAriaLive]\", [\"cdkAriaLive\"], { \"politeness\": { \"alias\": \"cdkAriaLive\"; \"required\": false; }; \"duration\": { \"alias\": \"cdkAriaLiveDuration\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkAriaLive, never>;\n}\n\n// @public\nexport class CdkMonitorFocus implements AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    readonly cdkFocusChange: EventEmitter<FocusOrigin>;\n    // (undocumented)\n    get focusOrigin(): FocusOrigin;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkMonitorFocus, \"[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]\", [\"cdkMonitorFocus\"], {}, { \"cdkFocusChange\": \"cdkFocusChange\"; }, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkMonitorFocus, never>;\n}\n\n// @public\nexport class CdkTrapFocus implements OnDestroy, AfterContentInit, OnChanges, DoCheck {\n    constructor(...args: unknown[]);\n    autoCapture: boolean;\n    get enabled(): boolean;\n    set enabled(value: boolean);\n    focusTrap: FocusTrap;\n    // (undocumented)\n    static ngAcceptInputType_autoCapture: unknown;\n    // (undocumented)\n    static ngAcceptInputType_enabled: unknown;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngDoCheck(): void;\n    // (undocumented)\n    ngOnChanges(changes: SimpleChanges): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkTrapFocus, \"[cdkTrapFocus]\", [\"cdkTrapFocus\"], { \"enabled\": { \"alias\": \"cdkTrapFocus\"; \"required\": false; }; \"autoCapture\": { \"alias\": \"cdkTrapFocusAutoCapture\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTrapFocus, never>;\n}\n\n// @public\nexport class ConfigurableFocusTrap extends FocusTrap implements ManagedFocusTrap {\n    constructor(_element: HTMLElement, _checker: InteractivityChecker, _ngZone: NgZone, _document: Document, _focusTrapManager: FocusTrapManager, _inertStrategy: FocusTrapInertStrategy, config: ConfigurableFocusTrapConfig, injector?: Injector);\n    destroy(): void;\n    _disable(): void;\n    _enable(): void;\n    get enabled(): boolean;\n    set enabled(value: boolean);\n}\n\n// @public\nexport interface ConfigurableFocusTrapConfig {\n    defer: boolean;\n}\n\n// @public\nexport class ConfigurableFocusTrapFactory {\n    constructor(...args: unknown[]);\n    create(element: HTMLElement, config?: ConfigurableFocusTrapConfig): ConfigurableFocusTrap;\n    // @deprecated (undocumented)\n    create(element: HTMLElement, deferCaptureElements: boolean): ConfigurableFocusTrap;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<ConfigurableFocusTrapFactory, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<ConfigurableFocusTrapFactory>;\n}\n\n// @public\nexport class EventListenerFocusTrapInertStrategy implements FocusTrapInertStrategy {\n    allowFocus(focusTrap: ConfigurableFocusTrap): void;\n    preventFocus(focusTrap: ConfigurableFocusTrap): void;\n}\n\n// @public\nexport const FOCUS_MONITOR_DEFAULT_OPTIONS: InjectionToken<FocusMonitorOptions>;\n\n// @public\nexport const FOCUS_TRAP_INERT_STRATEGY: InjectionToken<FocusTrapInertStrategy>;\n\n// @public\nexport interface FocusableOption extends ListKeyManagerOption {\n    focus(origin?: FocusOrigin): void;\n}\n\n// @public (undocumented)\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n    setActiveItem(index: number): void;\n    setActiveItem(item: T): void;\n    setFocusOrigin(origin: FocusOrigin): this;\n}\n\n// @public\nexport class FocusMonitor implements OnDestroy {\n    constructor(...args: unknown[]);\n    protected _document?: Document | null | undefined;\n    focusVia(element: HTMLElement, origin: FocusOrigin, options?: FocusOptions_2): void;\n    focusVia(element: ElementRef<HTMLElement>, origin: FocusOrigin, options?: FocusOptions_2): void;\n    monitor(element: HTMLElement, checkChildren?: boolean): Observable<FocusOrigin>;\n    monitor(element: ElementRef<HTMLElement>, checkChildren?: boolean): Observable<FocusOrigin>;\n    // (undocumented)\n    ngOnDestroy(): void;\n    _onBlur(event: FocusEvent, element: HTMLElement): void;\n    stopMonitoring(element: HTMLElement): void;\n    stopMonitoring(element: ElementRef<HTMLElement>): void;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<FocusMonitor, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<FocusMonitor>;\n}\n\n// @public\nexport enum FocusMonitorDetectionMode {\n    EVENTUAL = 1,\n    IMMEDIATE = 0\n}\n\n// @public\nexport interface FocusMonitorOptions {\n    // (undocumented)\n    detectionMode?: FocusMonitorDetectionMode;\n}\n\n// @public\ninterface FocusOptions_2 {\n    preventScroll?: boolean;\n}\nexport { FocusOptions_2 as FocusOptions }\n\n// @public (undocumented)\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n// @public\nexport class FocusTrap {\n    constructor(_element: HTMLElement, _checker: InteractivityChecker, _ngZone: NgZone, _document: Document, deferAnchors?: boolean,\n    _injector?: Injector | undefined);\n    attachAnchors(): boolean;\n    destroy(): void;\n    // (undocumented)\n    readonly _document: Document;\n    // (undocumented)\n    readonly _element: HTMLElement;\n    get enabled(): boolean;\n    set enabled(value: boolean);\n    // (undocumented)\n    protected _enabled: boolean;\n    // (undocumented)\n    protected endAnchorListener: () => boolean;\n    focusFirstTabbableElement(options?: FocusOptions): boolean;\n    focusFirstTabbableElementWhenReady(options?: FocusOptions): Promise<boolean>;\n    focusInitialElement(options?: FocusOptions): boolean;\n    focusInitialElementWhenReady(options?: FocusOptions): Promise<boolean>;\n    focusLastTabbableElement(options?: FocusOptions): boolean;\n    focusLastTabbableElementWhenReady(options?: FocusOptions): Promise<boolean>;\n    hasAttached(): boolean;\n    readonly _injector?: Injector | undefined;\n    // (undocumented)\n    readonly _ngZone: NgZone;\n    // (undocumented)\n    protected startAnchorListener: () => boolean;\n    protected toggleAnchors(enabled: boolean): void;\n}\n\n// @public\nexport class FocusTrapFactory {\n    constructor(...args: unknown[]);\n    create(element: HTMLElement, deferCaptureElements?: boolean): FocusTrap;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<FocusTrapFactory, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<FocusTrapFactory>;\n}\n\n// @public\nexport interface FocusTrapInertStrategy {\n    allowFocus(focusTrap: FocusTrap): void;\n    preventFocus(focusTrap: FocusTrap): void;\n}\n\n// @public\nexport function getAriaReferenceIds(el: Element, attr: string): string[];\n\n// @public\nexport enum HighContrastMode {\n    // (undocumented)\n    BLACK_ON_WHITE = 1,\n    // (undocumented)\n    NONE = 0,\n    // (undocumented)\n    WHITE_ON_BLACK = 2\n}\n\n// @public\nexport class HighContrastModeDetector implements OnDestroy {\n    constructor(...args: unknown[]);\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Using CdkPortal with HTML Templates in Angular",
    "codeDescription": "Demonstrates how to use CdkPortal directive to capture content from an ng-template or with a structural directive shorthand. This allows template content to be moved to another location in the DOM.",
    "codeLanguage": "html",
    "codeTokens": 112,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/portal/portal.md#2025-04-11_snippet_0",
    "pageTitle": "Angular CDK Portals Package Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<ng-template cdkPortal>\n  <p>The content of this template is captured by the portal.</p>\n</ng-template>\n\n<!-- OR -->\n\n<!-- This result here is identical to the syntax above -->\n<p *cdkPortal>\n  The content of this template is captured by the portal.\n</p>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Defining Angular Material Button Components and Interfaces",
    "codeDescription": "This code snippet defines the main components, interfaces, and tokens for Angular Material buttons. It includes MatButton, MatFabButton, MatIconButton, and MatMiniFabButton classes, as well as related configuration interfaces and injection tokens.",
    "codeLanguage": "typescript",
    "codeTokens": 1341,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/button/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "API Report for @angular/material_button",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AfterViewInit } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { InjectionToken } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\n\n// @public\nexport const MAT_BUTTON_CONFIG: InjectionToken<MatButtonConfig>;\n\n// @public\nexport const MAT_FAB_DEFAULT_OPTIONS: InjectionToken<MatFabDefaultOptions>;\n\n// @public @deprecated\nexport function MAT_FAB_DEFAULT_OPTIONS_FACTORY(): MatFabDefaultOptions;\n\n// @public\nexport const MatAnchor: typeof MatButton;\n\n// @public (undocumented)\nexport type MatAnchor = MatButton;\n\n// @public\nexport class MatButton extends MatButtonBase {\n    constructor(...args: unknown[]);\n    get appearance(): MatButtonAppearance | null;\n    set appearance(value: MatButtonAppearance | '');\n    setAppearance(appearance: MatButtonAppearance): void;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatButton, \"    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  \", [\"matButton\", \"matAnchor\"], { \"appearance\": { \"alias\": \"matButton\"; \"required\": false; }; }, {}, never, [\".material-icons:not([iconPositionEnd]), mat-icon:not([iconPositionEnd]), [matButtonIcon]:not([iconPositionEnd])\", \"*\", \".material-icons[iconPositionEnd], mat-icon[iconPositionEnd], [matButtonIcon][iconPositionEnd]\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatButton, never>;\n}\n\n// @public\nexport type MatButtonAppearance = 'text' | 'filled' | 'elevated' | 'outlined' | 'tonal';\n\n// @public\nexport interface MatButtonConfig {\n    color?: ThemePalette;\n    defaultAppearance?: MatButtonAppearance;\n    disabledInteractive?: boolean;\n}\n\n// @public (undocumented)\nexport class MatButtonModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatButtonModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatButtonModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatButtonModule, never, [typeof MatCommonModule, typeof MatRippleModule, typeof MatButton, typeof MatMiniFabButton, typeof MatIconButton, typeof MatFabButton], [typeof MatCommonModule, typeof MatButton, typeof MatMiniFabButton, typeof MatIconButton, typeof MatFabButton]>;\n}\n\n// @public\nexport const MatFabAnchor: typeof MatFabButton;\n\n// @public (undocumented)\nexport type MatFabAnchor = MatFabButton;\n\n// @public\nexport class MatFabButton extends MatButtonBase {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    extended: boolean;\n    // (undocumented)\n    _isFab: boolean;\n    // (undocumented)\n    static ngAcceptInputType_extended: unknown;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatFabButton, \"button[mat-fab], a[mat-fab], button[matFab], a[matFab]\", [\"matButton\", \"matAnchor\"], { \"extended\": { \"alias\": \"extended\"; \"required\": false; }; }, {}, never, [\".material-icons:not([iconPositionEnd]), mat-icon:not([iconPositionEnd]), [matButtonIcon]:not([iconPositionEnd])\", \"*\", \".material-icons[iconPositionEnd], mat-icon[iconPositionEnd], [matButtonIcon][iconPositionEnd]\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatFabButton, never>;\n}\n\n// @public\nexport interface MatFabDefaultOptions {\n    color?: ThemePalette;\n}\n\n// @public\nexport const MatIconAnchor: typeof MatIconButton;\n\n// @public (undocumented)\nexport type MatIconAnchor = MatIconButton;\n\n// @public\nexport class MatIconButton extends MatButtonBase {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatIconButton, \"button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]\", [\"matButton\", \"matAnchor\"], {}, {}, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatIconButton, never>;\n}\n\n// @public\nexport const MatMiniFabAnchor: typeof MatMiniFabButton;\n\n// @public (undocumented)\nexport type MatMiniFabAnchor = MatMiniFabButton;\n\n// @public\nexport class MatMiniFabButton extends MatButtonBase {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    _isFab: boolean;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatMiniFabButton, \"button[mat-mini-fab], a[mat-mini-fab], button[matMiniFab], a[matMiniFab]\", [\"matButton\", \"matAnchor\"], {}, {}, never, [\".material-icons:not([iconPositionEnd]), mat-icon:not([iconPositionEnd]), [matButtonIcon]:not([iconPositionEnd])\", \"*\", \".material-icons[iconPositionEnd], mat-icon[iconPositionEnd], [matButtonIcon][iconPositionEnd]\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatMiniFabButton, never>;\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing a Linear Stepper with Single Form in Angular Material",
    "codeDescription": "Creates a linear stepper using a single form with FormArray where each step corresponds to a form group within the array. The stepper controls navigation between steps and validates each step before proceeding.",
    "codeLanguage": "html",
    "codeTokens": 202,
    "codeId": "https://github.com/angular/components/blob/main/src/material/stepper/stepper.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Stepper Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<form [formGroup]=\"formGroup\">\n  <mat-stepper formArrayName=\"formArray\" linear>\n    <mat-step formGroupName=\"0\" [stepControl]=\"formArray.get([0])\">\n      ...\n      <div>\n        <button matButton matStepperNext type=\"button\">Next</button>\n      </div>\n    </mat-step>\n    <mat-step formGroupName=\"1\" [stepControl]=\"formArray.get([1])\">\n      ...\n      <div>\n        <button matButton matStepperPrevious type=\"button\">Back</button>\n        <button matButton matStepperNext type=\"button\">Next</button>\n      </div>\n    </mat-step>\n    ...\n  </mat-stepper>\n</form>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing Node Activation Handlers in Angular Material Tree",
    "codeDescription": "Setting up event handlers for both click and keyboard activation on tree nodes, allowing for consistent interaction regardless of input method.",
    "codeLanguage": "html",
    "codeTokens": 70,
    "codeId": "https://github.com/angular/components/blob/main/src/material/tree/tree.md#2025-04-11_snippet_8",
    "pageTitle": "Angular Material Tree Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-tree-node\n    *matNodeDef=\"let node\"\n    (click)=\"performAction(node)\"\n    (activation)=\"performAction($event)\">\n</mat-tree-node>"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Defining ThemePalette Type for Angular Material Components",
    "codeDescription": "Type definition for the theme palette options used in Angular Material components. Provides the standard color options 'primary', 'accent', 'warn', or undefined.",
    "codeLanguage": "typescript",
    "codeTokens": 64,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/core/index.api.md#2025-04-11_snippet_10",
    "pageTitle": "Angular Material Core API Report",
    "codeList": [
      {
        "language": "typescript",
        "code": "// @public\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Discrete Thumb Label in Angular Material Slider",
    "codeDescription": "Demonstrates how to add a visible value label to the slider thumb using the discrete attribute. This shows the currently selected value directly on the thumb.",
    "codeLanguage": "html",
    "codeTokens": 56,
    "codeId": "https://github.com/angular/components/blob/main/src/material/slider/slider.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Slider Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-slider discrete>\n  <input matSliderThumb>\n</mat-slider>"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Controlling Tab Animation Duration in Angular Material",
    "codeDescription": "This snippet shows how to customize the animation duration for tab transitions using the animationDuration input property. This allows for slower animations or disabling animations completely.",
    "codeLanguage": "html",
    "codeTokens": 100,
    "codeId": "https://github.com/angular/components/blob/main/src/material/tabs/tabs.md#2025-04-11_snippet_5",
    "pageTitle": "Angular Material Tabs Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-tab-group animationDuration=\"2000ms\">\n  <mat-tab label=\"First\">Content 1</mat-tab>\n  <mat-tab label=\"Second\">Content 2</mat-tab>\n  <mat-tab label=\"Third\">Content 3</mat-tab>\n</mat-tab-group>"
      }
    ],
    "relevance": 0.947
  },
  {
    "codeTitle": "Implementing a Custom Stepper Component in Angular TypeScript",
    "codeDescription": "Creates a custom stepper component by extending CdkStepper and providing itself as a dependency injection token. Includes a method to handle step selection by index.",
    "codeLanguage": "typescript",
    "codeTokens": 151,
    "codeId": "https://github.com/angular/components/blob/main/guides/creating-a-custom-stepper-using-the-cdk-stepper.md#2025-04-11_snippet_0",
    "pageTitle": "Creating a Custom Angular CDK Stepper",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  selector: 'app-custom-stepper',\n  templateUrl: './custom-stepper.component.html',\n  styleUrl: './custom-stepper.component.css',\n  // This custom stepper provides itself as CdkStepper so that it can be recognized\n  // by other components.\n  providers: [{ provide: CdkStepper, useExisting: CustomStepperComponent }]\n})\nexport class CustomStepperComponent extends CdkStepper {\n  onClick(index: number): void {\n    this.selectedIndex = index;\n  }\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Importing from Angular CDK After Breaking Changes",
    "codeDescription": "Shows the new required format for importing from Angular CDK using scoped sub-packages instead of the previous global imports. This was a breaking change in version 2.0.0-beta.10.",
    "codeLanguage": "typescript",
    "codeTokens": 115,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_114",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// Old imports\nimport {LiveAnnouncer, Overlay, Directionality} from '@angular/cdk';\n\n// New imports\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay} from '@angular/cdk/overlay';"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using Card Content Element in Angular Material",
    "codeDescription": "The mat-card-content element contains the primary content of the card with default padding. This section is where the main information of the card resides.",
    "codeLanguage": "html",
    "codeTokens": 44,
    "codeId": "https://github.com/angular/components/blob/main/src/material/card/card.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Card Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-card-content>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Configuring Strict Parsing for Moment Adapter",
    "codeDescription": "Enabling strict date parsing mode for MomentDateAdapter through provider configuration.",
    "codeLanguage": "typescript",
    "codeTokens": 48,
    "codeId": "https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-11_snippet_8",
    "pageTitle": "Angular Material Datepicker Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "bootstrapApplication(MyApp, {\n  providers: [provideMomentDateAdapter(undefined, {strict: true})]\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Fixed Layout CdkTable for Performance Optimization",
    "codeDescription": "Implements the fixedLayout property on CdkTable to enforce uniform column widths, which can improve rendering performance especially for tables with sticky columns.",
    "codeLanguage": "html",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-11_snippet_6",
    "pageTitle": "CdkTable: Angular's Unopinionated Data Table Component",
    "codeList": [
      {
        "language": "html",
        "code": "<table cdk-table [dataSource]=\"dataSource\" fixedLayout>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Defining Input Testing Harnesses in TypeScript",
    "codeDescription": "Comprehensive TypeScript code defining testing harnesses for Angular Material input components. Includes interfaces and classes for input, native select, and native option testing with methods for interacting with and validating component states.",
    "codeLanguage": "typescript",
    "codeTokens": 504,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/input/testing/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Input Testing API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport interface InputHarnessFilters extends BaseHarnessFilters {\n    placeholder?: string | RegExp;\n    value?: string | RegExp;\n}\n\n// @public\nexport class MatInputHarness extends MatFormFieldControlHarness {\n    blur(): Promise<void>;\n    focus(): Promise<void>;\n    getId(): Promise<string>;\n    getName(): Promise<string>;\n    getPlaceholder(): Promise<string>;\n    getType(): Promise<string>;\n    getValue(): Promise<string>;\n    // (undocumented)\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    isReadonly(): Promise<boolean>;\n    isRequired(): Promise<boolean>;\n    setValue(newValue: string): Promise<void>;\n    static with(options?: InputHarnessFilters): HarnessPredicate<MatInputHarness>;\n}\n\n// @public\nexport class MatNativeOptionHarness extends ComponentHarness {\n    getIndex(): Promise<number>;\n    getText(): Promise<string>;\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isSelected(): Promise<boolean>;\n    static with(options?: NativeOptionHarnessFilters): HarnessPredicate<MatNativeOptionHarness>;\n}\n\n// @public\nexport class MatNativeSelectHarness extends MatFormFieldControlHarness {\n    blur(): Promise<void>;\n    focus(): Promise<void>;\n    getId(): Promise<string>;\n    getName(): Promise<string>;\n    getOptions(filter?: NativeOptionHarnessFilters): Promise<MatNativeOptionHarness[]>;\n    // (undocumented)\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isFocused(): Promise<boolean>;\n    isMultiple(): Promise<boolean>;\n    isRequired(): Promise<boolean>;\n    selectOptions(filter?: NativeOptionHarnessFilters): Promise<void>;\n    static with(options?: NativeSelectHarnessFilters): HarnessPredicate<MatNativeSelectHarness>;\n}\n\n// @public\nexport interface NativeOptionHarnessFilters extends BaseHarnessFilters {\n    // (undocumented)\n    index?: number;\n    // (undocumented)\n    isSelected?: boolean;\n    // (undocumented)\n    text?: string | RegExp;\n}\n\n// @public\nexport interface NativeSelectHarnessFilters extends BaseHarnessFilters {\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Defining Angular Material Progress Bar APIs in TypeScript",
    "codeDescription": "This code snippet defines the complete API surface for the Angular Material Progress Bar component, including injection tokens, the main component class, supporting interfaces, and the NgModule. It includes properties for value, buffer, animation, and theming configuration.",
    "codeLanguage": "typescript",
    "codeTokens": 758,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/progress-bar/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "API Report for @angular/material_progress-bar",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AfterViewInit } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { InjectionToken } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\n\n// @public\nexport const MAT_PROGRESS_BAR_DEFAULT_OPTIONS: InjectionToken<MatProgressBarDefaultOptions>;\n\n// @public\nexport const MAT_PROGRESS_BAR_LOCATION: InjectionToken<MatProgressBarLocation>;\n\n// @public @deprecated\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation;\n\n// @public (undocumented)\nexport class MatProgressBar implements AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    readonly animationEnd: EventEmitter<ProgressAnimationEnd>;\n    get bufferValue(): number;\n    set bufferValue(v: number);\n    get color(): string | null | undefined;\n    set color(value: string | null | undefined);\n    // (undocumented)\n    readonly _elementRef: ElementRef<HTMLElement>;\n    _getBufferBarFlexBasis(): string;\n    _getPrimaryBarTransform(): string;\n    _isIndeterminate(): boolean;\n    _isNoopAnimation: boolean;\n    get mode(): ProgressBarMode;\n    set mode(value: ProgressBarMode);\n    // (undocumented)\n    static ngAcceptInputType_bufferValue: unknown;\n    // (undocumented)\n    static ngAcceptInputType_value: unknown;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    get value(): number;\n    set value(v: number);\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatProgressBar, \"mat-progress-bar\", [\"matProgressBar\"], { \"color\": { \"alias\": \"color\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"bufferValue\": { \"alias\": \"bufferValue\"; \"required\": false; }; \"mode\": { \"alias\": \"mode\"; \"required\": false; }; }, { \"animationEnd\": \"animationEnd\"; }, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatProgressBar, never>;\n}\n\n// @public\nexport interface MatProgressBarDefaultOptions {\n    color?: ThemePalette;\n    mode?: ProgressBarMode;\n}\n\n// @public\nexport interface MatProgressBarLocation {\n    // (undocumented)\n    getPathname: () => string;\n}\n\n// @public (undocumented)\nexport class MatProgressBarModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatProgressBarModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatProgressBarModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatProgressBarModule, never, [typeof MatProgressBar], [typeof MatProgressBar, typeof MatCommonModule]>;\n}\n\n// @public\nexport interface ProgressAnimationEnd {\n    // (undocumented)\n    value: number;\n}\n\n// @public (undocumented)\nexport type ProgressBarMode = 'determinate' | 'indeterminate' | 'buffer' | 'query';\n\n// (No @packageDocumentation comment for this package)"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using Predefined Breakpoints with BreakpointObserver in TypeScript",
    "codeDescription": "Demonstrates using Angular Material's predefined breakpoints with BreakpointObserver to detect specific device layouts.",
    "codeLanguage": "typescript",
    "codeTokens": 68,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/layout/layout.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Layout Package Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "breakpointObserver.observe([\n  Breakpoints.HandsetLandscape,\n  Breakpoints.HandsetPortrait\n]).subscribe(result => {\n  if (result.matches) {\n    this.activateHandsetLayout();\n  }\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Creating Action Lists with Angular Material",
    "codeDescription": "Shows how to create an action list using mat-action-list and mat-list-item attributes on button elements. This snippet demonstrates a simple action list with click handlers.",
    "codeLanguage": "html",
    "codeTokens": 82,
    "codeId": "https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-11_snippet_4",
    "pageTitle": "Angular Material List Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-action-list>\n  <button mat-list-item (click)=\"save()\">Save</button>\n  <button mat-list-item (click)=\"undo()\">Undo</button>\n</mat-action-list>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Attaching Data to Drag and Drop Components in Angular CDK",
    "codeDescription": "Example showing how to associate arbitrary data with cdkDrag and cdkDropList using the cdkDragData and cdkDropListData properties. This data is included in events fired from these directives.",
    "codeLanguage": "html",
    "codeTokens": 129,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-11_snippet_2",
    "pageTitle": "Angular CDK Drag and Drop Module Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "@for (list of lists; track list) {\n  <div cdkDropList [cdkDropListData]=\"list\" (cdkDropListDropped)=\"drop($event)\">\n    @for (item of list; track item) {\n      <div cdkDrag [cdkDragData]=\"item\"></div>\n    }\n  </div>\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using Angular Material Progress Spinner with Indeterminate Mode",
    "codeDescription": "Demonstrates how to explicitly set the indeterminate mode on a progress spinner, which is equivalent to using the mat-spinner component.",
    "codeLanguage": "html",
    "codeTokens": 46,
    "codeId": "https://github.com/angular/components/blob/main/src/material/progress-spinner/progress-spinner.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Progress Spinner Component Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-progress-spinner mode=\"indeterminate\">"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Creating a Basic Chip Set in Angular Material",
    "codeDescription": "This snippet shows how to create a basic chip set using mat-chip-set and mat-chip components. This implementation doesn't use any specific accessibility pattern and is intended for non-interactive use.",
    "codeLanguage": "html",
    "codeTokens": 97,
    "codeId": "https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-11_snippet_8",
    "pageTitle": "Angular Material Chips Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-chip-set>\n  <mat-chip> John </mat-chip>\n  <mat-chip> Paul </mat-chip>\n  <mat-chip> James </mat-chip>\n</mat-chip-set>"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Configuring Snackbar Duration in Angular",
    "codeDescription": "Demonstrates how to set a custom duration for auto-dismissing snackbars using configuration object.",
    "codeLanguage": "typescript",
    "codeTokens": 47,
    "codeId": "https://github.com/angular/components/blob/main/src/material/snack-bar/snack-bar.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material MatSnackBar Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "snackBar.open('Message archived', 'Undo', {\n  duration: 3000\n});"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Defining Angular Material Table Testing API in TypeScript",
    "codeDescription": "Complete API definition for the Angular Material table testing harnesses. It includes imports from Angular CDK testing module and defines interfaces and classes for interacting with Material table components in tests.",
    "codeLanguage": "typescript",
    "codeTokens": 948,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/table/testing/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Table Testing API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport interface CellHarnessFilters extends BaseHarnessFilters {\n    columnName?: string | RegExp;\n    text?: string | RegExp;\n}\n\n// @public\nexport class MatCellHarness extends _MatCellHarnessBase {\n    static hostSelector: string;\n    static with(options?: CellHarnessFilters): HarnessPredicate<MatCellHarness>;\n}\n\n// @public (undocumented)\nexport abstract class _MatCellHarnessBase extends ContentContainerComponentHarness {\n    // (undocumented)\n    protected static _getCellPredicate<T extends MatCellHarness>(type: ComponentHarnessConstructor<T>, options: CellHarnessFilters): HarnessPredicate<T>;\n    getColumnName(): Promise<string>;\n    getText(): Promise<string>;\n}\n\n// @public\nexport class MatFooterCellHarness extends _MatCellHarnessBase {\n    static hostSelector: string;\n    static with(options?: CellHarnessFilters): HarnessPredicate<MatFooterCellHarness>;\n}\n\n// @public\nexport class MatFooterRowHarness extends _MatRowHarnessBase<typeof MatFooterCellHarness, MatFooterCellHarness> {\n    // (undocumented)\n    protected _cellHarness: typeof MatFooterCellHarness;\n    static hostSelector: string;\n    static with<T extends MatFooterRowHarness>(this: ComponentHarnessConstructor<T>, options?: RowHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport class MatHeaderCellHarness extends _MatCellHarnessBase {\n    static hostSelector: string;\n    static with(options?: CellHarnessFilters): HarnessPredicate<MatHeaderCellHarness>;\n}\n\n// @public\nexport class MatHeaderRowHarness extends _MatRowHarnessBase<typeof MatHeaderCellHarness, MatHeaderCellHarness> {\n    // (undocumented)\n    protected _cellHarness: typeof MatHeaderCellHarness;\n    static hostSelector: string;\n    static with<T extends MatHeaderRowHarness>(this: ComponentHarnessConstructor<T>, options?: RowHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport class MatRowHarness extends _MatRowHarnessBase<typeof MatCellHarness, MatCellHarness> {\n    // (undocumented)\n    protected _cellHarness: typeof MatCellHarness;\n    static hostSelector: string;\n    static with<T extends MatRowHarness>(this: ComponentHarnessConstructor<T>, options?: RowHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public (undocumented)\nexport abstract class _MatRowHarnessBase<CellType extends ComponentHarnessConstructor<Cell> & {\n    with: (options?: CellHarnessFilters) => HarnessPredicate<Cell>;\n}, Cell extends _MatCellHarnessBase> extends ComponentHarness {\n    // (undocumented)\n    protected abstract _cellHarness: CellType;\n    getCells(filter?: CellHarnessFilters): Promise<Cell[]>;\n    getCellTextByColumnName(): Promise<MatRowHarnessColumnsText>;\n    getCellTextByIndex(filter?: CellHarnessFilters): Promise<string[]>;\n}\n\n// @public\nexport interface MatRowHarnessColumnsText {\n    // (undocumented)\n    [columnName: string]: string;\n}\n\n// @public\nexport class MatTableHarness extends ContentContainerComponentHarness<string> {\n    getCellTextByColumnName(): Promise<MatTableHarnessColumnsText>;\n    getCellTextByIndex(): Promise<string[][]>;\n    getFooterRows(filter?: RowHarnessFilters): Promise<MatFooterRowHarness[]>;\n    getHeaderRows(filter?: RowHarnessFilters): Promise<MatHeaderRowHarness[]>;\n    getRows(filter?: RowHarnessFilters): Promise<MatRowHarness[]>;\n    // (undocumented)\n    _headerRowHarness: typeof MatHeaderRowHarness;\n    static hostSelector: string;\n    // (undocumented)\n    _rowHarness: typeof MatRowHarness;\n    static with<T extends MatTableHarness>(this: ComponentHarnessConstructor<T>, options?: TableHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport interface MatTableHarnessColumnsText {\n    // (undocumented)\n    [columnName: string]: {\n        text: string[];\n        headerText: string[];\n        footerText: string[];\n    };\n}\n\n// @public\nexport interface RowHarnessFilters extends BaseHarnessFilters {\n}\n\n// @public\nexport interface TableHarnessFilters extends BaseHarnessFilters {\n}"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Associating Input with Datepicker in Angular Material",
    "codeDescription": "This HTML snippet demonstrates how to properly associate an input field with a MatDatepicker component using template references. This is crucial for avoiding the 'Attempted to open an MatDatepicker with no associated input' error.",
    "codeLanguage": "html",
    "codeTokens": 72,
    "codeId": "https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-11_snippet_13",
    "pageTitle": "Angular Material Datepicker Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<input [matDatepicker]=\"picker\">\n<mat-datepicker #picker></mat-datepicker>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Reworking Popover Edit Host Listeners for Ivy in Angular Material",
    "codeDescription": "Updates host listeners in the experimental popover-edit component to account for changes in Ivy.",
    "codeLanguage": "typescript",
    "codeTokens": 47,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_31",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "rework host listeners to account for changes in Ivy ([#16060]) ([558295b])"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Disabling Ripple Animation in Global Configuration",
    "codeDescription": "Shows how to disable ripple animations by setting both enterDuration and exitDuration to 0 in the global ripple configuration. Useful for performance optimization when maintaining focus indicators.",
    "codeLanguage": "typescript",
    "codeTokens": 79,
    "codeId": "https://github.com/angular/components/blob/main/src/material/core/ripple/ripple.md#2025-04-11_snippet_5",
    "pageTitle": "Angular Material Ripple Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const globalRippleConfig: RippleGlobalOptions = {\n  disabled: true,\n  animation: {\n    enterDuration: 0,\n    exitDuration: 0\n  }\n};"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Registering Component as MatFormFieldControl",
    "codeDescription": "Implementation showing how to register the custom input component as a MatFormFieldControl provider.",
    "codeLanguage": "typescript",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-11_snippet_1",
    "pageTitle": "Custom Form Field Control Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  ...\n  providers: [{provide: MatFormFieldControl, useExisting: MyTelInput}],\n})\nexport class MyTelInput implements MatFormFieldControl<MyTel> {\n  ...\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Defining CdkTableDataSourceInput Type in TypeScript",
    "codeDescription": "Defines a type for the possible data sources that can be used with CdkTable. This includes arrays, DataSource objects, and Observables of arrays.",
    "codeLanguage": "TypeScript",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-11_snippet_6",
    "pageTitle": "Angular CDK Table API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export type CdkTableDataSourceInput<T> = readonly T[] | DataSource<T> | Observable<readonly T[]>;"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "TypeScript API Definitions for Angular CDK Collections",
    "codeDescription": "Comprehensive TypeScript interface and class definitions for the @angular/cdk_collections package. Includes data sources, selection models, view repeaters, and collection utilities. This API is generated by API Extractor and should not be edited directly.",
    "codeLanguage": "typescript",
    "codeTokens": 1403,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/collections/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "API Documentation for @angular/cdk_collections",
    "codeList": [
      {
        "language": "typescript",
        "code": "import * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { IterableChangeRecord } from '@angular/core';\nimport { IterableChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';\n\n// @public\nexport class ArrayDataSource<T> extends DataSource<T> {\n    constructor(_data: readonly T[] | Observable<readonly T[]>);\n    // (undocumented)\n    connect(): Observable<readonly T[]>;\n    // (undocumented)\n    disconnect(): void;\n}\n\n// @public\nexport interface CollectionViewer {\n    viewChange: Observable<ListRange>;\n}\n\n// @public (undocumented)\nexport abstract class DataSource<T> {\n    abstract connect(collectionViewer: CollectionViewer): Observable<readonly T[]>;\n    abstract disconnect(collectionViewer: CollectionViewer): void;\n}\n\n// @public\nexport class _DisposeViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>> implements _ViewRepeater<T, R, C> {\n    // (undocumented)\n    applyChanges(changes: IterableChanges<R>, viewContainerRef: ViewContainerRef, itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>, itemValueResolver: _ViewRepeaterItemValueResolver<T, R>, itemViewChanged?: _ViewRepeaterItemChanged<R, C>): void;\n    // (undocumented)\n    detach(): void;\n}\n\n// @public\nexport function getMultipleValuesInSingleSelectionError(): Error;\n\n// @public\nexport function isDataSource(value: any): value is DataSource<any>;\n\n// @public\nexport type ListRange = {\n    start: number;\n    end: number;\n};\n\n// @public\nexport class _RecycleViewRepeaterStrategy<T, R, C extends _ViewRepeaterItemContext<T>> implements _ViewRepeater<T, R, C> {\n    applyChanges(changes: IterableChanges<R>, viewContainerRef: ViewContainerRef, itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>, itemValueResolver: _ViewRepeaterItemValueResolver<T, R>, itemViewChanged?: _ViewRepeaterItemChanged<R, C>): void;\n    // (undocumented)\n    detach(): void;\n    viewCacheSize: number;\n}\n\n// @public\nexport interface SelectionChange<T> {\n    added: T[];\n    removed: T[];\n    source: SelectionModel<T>;\n}\n\n// @public\nexport class SelectionModel<T> {\n    constructor(_multiple?: boolean, initiallySelectedValues?: T[], _emitChanges?: boolean, compareWith?: ((o1: T, o2: T) => boolean) | undefined);\n    readonly changed: Subject<SelectionChange<T>>;\n    clear(flushEvent?: boolean): boolean;\n    // (undocumented)\n    compareWith?: ((o1: T, o2: T) => boolean) | undefined;\n    deselect(...values: T[]): boolean;\n    hasValue(): boolean;\n    isEmpty(): boolean;\n    isMultipleSelection(): boolean;\n    isSelected(value: T): boolean;\n    select(...values: T[]): boolean;\n    get selected(): T[];\n    setSelection(...values: T[]): boolean;\n    sort(predicate?: (a: T, b: T) => number): void;\n    toggle(value: T): boolean;\n}\n\n// @public\nexport interface TreeDataNodeFlattener<T> {\n    expandFlattenedNodes(nodes: T[], expansionModel: SelectionModel<T>): T[];\n    flattenNodes(structuredData: any[]): T[];\n    nodeDescendents(node: T, nodes: T[], onlyExpandable: boolean): void;\n}\n\n// @public\nexport class UniqueSelectionDispatcher implements OnDestroy {\n    listen(listener: UniqueSelectionDispatcherListener): () => void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    notify(id: string, name: string): void;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<UniqueSelectionDispatcher, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<UniqueSelectionDispatcher>;\n}\n\n// @public (undocumented)\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n// @public\nexport const _VIEW_REPEATER_STRATEGY: InjectionToken<_ViewRepeater<unknown, unknown, _ViewRepeaterItemContext<unknown>>>;\n\n// @public\nexport interface _ViewRepeater<T, R, C extends _ViewRepeaterItemContext<T>> {\n    // (undocumented)\n    applyChanges(changes: IterableChanges<R>, viewContainerRef: ViewContainerRef, itemContextFactory: _ViewRepeaterItemContextFactory<T, R, C>, itemValueResolver: _ViewRepeaterItemValueResolver<T, R>, itemViewChanged?: _ViewRepeaterItemChanged<R, C>): void;\n    // (undocumented)\n    detach(): void;\n}\n\n// @public\nexport interface _ViewRepeaterItemChange<R, C> {\n    context?: C;\n    operation: _ViewRepeaterOperation;\n    record: IterableChangeRecord<R>;\n}\n\n// @public\nexport type _ViewRepeaterItemChanged<R, C> = (change: _ViewRepeaterItemChange<R, C>) => void;\n\n// @public\nexport interface _ViewRepeaterItemContext<T> {\n    // (undocumented)\n    $implicit?: T;\n}\n\n// @public\nexport type _ViewRepeaterItemContextFactory<T, R, C extends _ViewRepeaterItemContext<T>> = (record: IterableChangeRecord<R>, adjustedPreviousIndex: number | null, currentIndex: number | null) => _ViewRepeaterItemInsertArgs<C>;\n\n// @public\nexport interface _ViewRepeaterItemInsertArgs<C> {\n    // (undocumented)\n    context?: C;\n    // (undocumented)\n    index?: number;\n    // (undocumented)\n    templateRef: TemplateRef<C>;\n}\n\n// @public\nexport type _ViewRepeaterItemValueResolver<T, R> = (record: IterableChangeRecord<R>) => T;\n\n// @public\nexport enum _ViewRepeaterOperation {\n    INSERTED = 1,\n    MOVED = 2,\n    REMOVED = 3,\n    REPLACED = 0\n}\n\n// (No @packageDocumentation comment for this package)"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Implementing MapMarker Component in TypeScript",
    "codeDescription": "This snippet demonstrates how to implement a component that uses GoogleMap and MapMarker components. It sets up a map with a center position, zoom level, and functionality to add markers when clicking on the map.",
    "codeLanguage": "typescript",
    "codeTokens": 196,
    "codeId": "https://github.com/angular/components/blob/main/src/google-maps/map-marker/README.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Google Maps MapMarker Component Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// google-map-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapMarker} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapMarker],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n  markerOptions: google.maps.MarkerOptions = {draggable: false};\n  markerPositions: google.maps.LatLngLiteral[] = [];\n\n  addMarker(event: google.maps.MapMouseEvent) {\n    this.markerPositions.push(event.latLng.toJSON());\n  }\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Creating Nested Context Menus in Angular CDK",
    "codeDescription": "Shows how to implement nested context menu containers where right-clicking in different areas opens different context menus.",
    "codeLanguage": "html",
    "codeTokens": 88,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/menu/menu.md#2025-04-11_snippet_6",
    "pageTitle": "Angular CDK Menu Module Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"example-context-container outer\" [cdkContextMenuTriggerFor]=\"outerMenu\">\n  Outer context menu\n\n  <div class=\"example-context-container inner\" [cdkContextMenuTriggerFor]=\"innerMenu\">\n    Inner context menu\n  </div>\n</div>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Rendering Google Map with KML Layer in Angular Template",
    "codeDescription": "This HTML template demonstrates how to use the google-map component with a map-kml-layer child component. It sets the map's height, width, center, and zoom, and binds the KML layer URL.",
    "codeLanguage": "html",
    "codeTokens": 107,
    "codeId": "https://github.com/angular/components/blob/main/src/google-maps/map-kml-layer/README.md#2025-04-11_snippet_1",
    "pageTitle": "MapKmlLayer Component for Google Maps in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- google-maps-demo.component.html -->\n<google-map height=\"400px\" width=\"750px\" [center]=\"center\" [zoom]=\"zoom\">\n  <map-kml-layer [url]=\"kmlUrl\" />\n</google-map>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Creating Selection Column with Checkboxes in Angular Material Table",
    "codeDescription": "HTML template code for implementing a column with checkboxes for row selection in an Angular Material table, including a header checkbox to toggle all selections.",
    "codeLanguage": "html",
    "codeTokens": 172,
    "codeId": "https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-11_snippet_6",
    "pageTitle": "Angular Material Table Component Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<ng-container matColumnDef=\"select\">\n  <th mat-header-cell *matHeaderCellDef>\n    <mat-checkbox (change)=\"$event ? toggleAllRows() : null\"\n                  [checked]=\"selection.hasValue() && isAllSelected()\"\n                  [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\n    </mat-checkbox>\n  </th>\n  <td mat-cell *matCellDef=\"let row\">\n    <mat-checkbox (click)=\"$event.stopPropagation()\"\n                  (change)=\"$event ? selection.toggle(row) : null\"\n                  [checked]=\"selection.isSelected(row)\">\n    </mat-checkbox>\n  </td>\n</ng-container>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Creating Tab-Based Navigation with mat-tab-nav-bar in Angular",
    "codeDescription": "This example demonstrates how to use mat-tab-nav-bar for navigation between routes, paired with a mat-tab-nav-panel to display the corresponding content. This provides a tab-like UI for route navigation.",
    "codeLanguage": "html",
    "codeTokens": 146,
    "codeId": "https://github.com/angular/components/blob/main/src/material/tabs/tabs.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Tabs Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<nav mat-tab-nav-bar [backgroundColor]=\"background\" [tabPanel]=\"tabPanel\">\n  <a mat-tab-link\n     *ngFor=\"let link of links\"\n     [routerLink]=\"link\"\n     routerLinkActive #rla=\"routerLinkActive\"\n     [active]=\"rla.isActive\">\n    {{link}}\n  </a>\n</nav>\n<mat-tab-nav-panel #tabPanel>\n  <router-outlet></router-outlet>\n</mat-tab-nav-panel>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Implementing setDescribedByIds for Custom Angular Form Field Control",
    "codeDescription": "This snippet demonstrates how to implement the setDescribedByIds method required by MatFormFieldControl. It updates the aria-describedby attribute of the control element with the provided ids.",
    "codeLanguage": "typescript",
    "codeTokens": 106,
    "codeId": "https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-11_snippet_6",
    "pageTitle": "Custom Form Field Control Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Input('aria-describedby') userAriaDescribedBy: string;\n\nsetDescribedByIds(ids: string[]) {\n  const controlElement = this._elementRef.nativeElement\n    .querySelector('.example-tel-input-container')!;\n  controlElement.setAttribute('aria-describedby', ids.join(' '));\n}"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Loading Harnesses in TestbedHarnessEnvironment",
    "codeDescription": "Demonstrates how to load harnesses for different components using TestbedHarnessEnvironment in a unit test setup. It shows creating loaders, loading harnesses for the root component, child components, and components outside the fixture.",
    "codeLanguage": "TypeScript",
    "codeTokens": 265,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-11_snippet_0",
    "pageTitle": "Angular CDK Testing Infrastructure",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "let fixture: ComponentFixture<MyDialogButton>;\nlet loader: HarnessLoader;\nlet rootLoader: HarnessLoader;\n\nbeforeEach(() => {\n  fixture = TestBed.createComponent(MyDialogButton);\n  loader = TestbedHarnessEnvironment.loader(fixture);\n  rootLoader = TestbedHarnessEnvironment.documentRootLoader(fixture);\n});\n\nit('loads harnesses', async () => {\n  // Load a harness for the bootstrapped component with `harnessForFixture`\n  dialogButtonHarness =\n      await TestbedHarnessEnvironment.harnessForFixture(fixture, MyDialogButtonHarness);\n\n  // The button element is inside the fixture's root element, so we use `loader`.\n  const buttonHarness = await loader.getHarness(MyButtonHarness);\n\n  // Click the button to open the dialog\n  await buttonHarness.click();\n\n  // The dialog is appended to `document.body`, outside of the fixture's root element,\n  // so we use `rootLoader` in this case.\n  const dialogHarness = await rootLoader.getHarness(MyDialogHarness);\n\n  // ... make some assertions\n});"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Configuring Badge Overlap in Angular Material",
    "codeDescription": "Shows how to control the overlap behavior of badges using the matBadgeOverlap attribute. This determines whether the badge should overlap its host element or be separated from it.",
    "codeLanguage": "html",
    "codeTokens": 206,
    "codeId": "https://github.com/angular/components/blob/main/src/material/badge/badge.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Badge Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<h3>Badge overlap</h3>\n<p>\n  <span matBadge=\"1\" matBadgeOverlap=\"false\">Text with no overlap</span>\n</p>\n\n<p>\n  <span matBadge=\"22\" matBadgeOverlap=\"false\">Text with no overlap</span>\n</p>\n<p>\n  <span matBadge=\"88\" matBadgeOverlap=\"false\">Text with no overlap</span>\n</p>\n\n<p>\n  <span matBadge=\"1\" matBadgeOverlap=\"true\">Text with overlap</span>\n</p>\n<p>\n  <span matBadge=\"22\" matBadgeOverlap=\"true\">Text with overlap</span>\n</p>\n<p>\n  <span matBadge=\"88\" matBadgeOverlap=\"true\">Text with overlap</span>\n</p>"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Using Card Title Group in Angular Material",
    "codeDescription": "The mat-card-title-group element combines a title, subtitle, and image into a single section. This provides a layout for displaying these elements together.",
    "codeLanguage": "html",
    "codeTokens": 46,
    "codeId": "https://github.com/angular/components/blob/main/src/material/card/card.md#2025-04-11_snippet_9",
    "pageTitle": "Angular Material Card Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-card-title-group>"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Managing Bottom Sheet Lifecycle in Angular Material",
    "codeDescription": "Shows how to subscribe to the afterDismissed event and programmatically dismiss a bottom sheet using the MatBottomSheetRef.",
    "codeLanguage": "typescript",
    "codeTokens": 64,
    "codeId": "https://github.com/angular/components/blob/main/src/material/bottom-sheet/bottom-sheet.md#2025-04-11_snippet_1",
    "pageTitle": "Using MatBottomSheet in Angular Material",
    "codeList": [
      {
        "language": "typescript",
        "code": "bottomSheetRef.afterDismissed().subscribe(() => {\n  console.log('Bottom sheet has been dismissed.');\n});\n\nbottomSheetRef.dismiss();"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Listing Bug Fixes in Angular Material 6.4.1",
    "codeDescription": "Enumerates various bug fixes implemented in version 6.4.1 of Angular Material, covering multiple components and features.",
    "codeLanguage": "Markdown",
    "codeTokens": 1150,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_73",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "Markdown",
        "code": "### Bug Fixes\n\n* **autofill:** avoid firing unnecessary event on initial render of input ([#12116](https://github.com/angular/material2/issues/12116)) ([1fb1fab](https://github.com/angular/material2/commit/1fb1fab))\n* **badge:** hide badges with no content ([#12239](https://github.com/angular/material2/issues/12239)) ([1e847f1](https://github.com/angular/material2/commit/1e847f1))\n* **chips:** losing focus if active chip is deleted ([#11910](https://github.com/angular/material2/issues/11910)) ([646e378](https://github.com/angular/material2/commit/646e378))\n* **drag-drop:** disable text selection on draggable element ([#12204](https://github.com/angular/material2/issues/12204)) ([7a04609](https://github.com/angular/material2/commit/7a04609))\n* **drag-drop:** make `CDK_DROP_CONTAINER` public ([#12214](https://github.com/angular/material2/issues/12214)) ([b9cece4](https://github.com/angular/material2/commit/b9cece4))\n* **drag-drop:** unable to drag last item back into initial container ([#12261](https://github.com/angular/material2/issues/12261)) ([3e0e3c5](https://github.com/angular/material2/commit/3e0e3c5))\n* **menu:** collapse empty menu panel ([#12211](https://github.com/angular/material2/issues/12211)) ([aed3993](https://github.com/angular/material2/commit/aed3993))\n* **menu:** focus indication not visible in high contrast mode ([#12201](https://github.com/angular/material2/issues/12201)) ([6fb6216](https://github.com/angular/material2/commit/6fb6216))\n* **menu:** showing scrollbars on first open in Edge if item width is set ([#12141](https://github.com/angular/material2/issues/12141)) ([ff53295](https://github.com/angular/material2/commit/ff53295))\n* **moment-date-adapter:** not returning utc date when parsing ([#12029](https://github.com/angular/material2/issues/12029)) ([0304ac1](https://github.com/angular/material2/commit/0304ac1))\n* **overlay:** avoid same overlay being added to the keyboard event stack multiple times ([#12222](https://github.com/angular/material2/issues/12222)) ([e587f4b](https://github.com/angular/material2/commit/e587f4b))\n* **ripple:** don't hide directive host in high contrast ([#12168](https://github.com/angular/material2/issues/12168)) ([efedc9b](https://github.com/angular/material2/commit/efedc9b))\n* **schematics:** fix object iteration error in dashboard ([#12216](https://github.com/angular/material2/issues/12216)) ([f2acb51](https://github.com/angular/material2/commit/f2acb51))\n* **slide-toggle:** invert the thumb and slide gesture in rtl ([#12284](https://github.com/angular/material2/issues/12284)) ([fe193f5](https://github.com/angular/material2/commit/fe193f5))\n* **tab-group:** focus change event not firing for keyboard navigation ([#12192](https://github.com/angular/material2/issues/12192)) ([48ece27](https://github.com/angular/material2/commit/48ece27))\n* **table:** unable to sort large numbers in strings ([#12052](https://github.com/angular/material2/issues/12052)) ([dd31521](https://github.com/angular/material2/commit/dd31521))\n* **tabs:** content animation in RTL not working (chrome) ([#12215](https://github.com/angular/material2/issues/12215)) ([f700897](https://github.com/angular/material2/commit/f700897))\n* **tabs:** enable keyboard wrapping and mark disabled tabs ([#12218](https://github.com/angular/material2/issues/12218)) ([0e03aae](https://github.com/angular/material2/commit/0e03aae))\n* **tabs:** reposition tab body on direction change ([#12229](https://github.com/angular/material2/issues/12229)) ([4ac1be3](https://github.com/angular/material2/commit/4ac1be3))\n* **tabs:** ripple overflow in internet explorer ([#12036](https://github.com/angular/material2/issues/12036)) ([09f439a](https://github.com/angular/material2/commit/09f439a))\n* **tabs:** selectedIndex being overwritten if tabs are being added / removed ([#12245](https://github.com/angular/material2/issues/12245)) ([641ec85](https://github.com/angular/material2/commit/641ec85))\n* **tooltip:** interfering with native drag&drop ([#12200](https://github.com/angular/material2/issues/12200)) ([8a4f2c3](https://github.com/angular/material2/commit/8a4f2c3))"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Basic Sidenav Layout with Left Positioning",
    "codeDescription": "Example of a basic sidenav layout with a left-positioned sidenav and explicit content definition.",
    "codeLanguage": "html",
    "codeTokens": 70,
    "codeId": "https://github.com/angular/components/blob/main/src/material/sidenav/sidenav.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Sidenav & Drawer Components Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-sidenav-container>\n  <mat-sidenav>Start</mat-sidenav>\n  <mat-sidenav-content>Main</mat-sidenav-content>\n</mat-sidenav-container>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Defining ComponentHarness Abstract Class in TypeScript",
    "codeDescription": "Defines an abstract class for component harnesses, including methods for locating elements and managing the test environment.",
    "codeLanguage": "typescript",
    "codeTokens": 195,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/testing/index.api.md#2025-04-11_snippet_5",
    "pageTitle": "API Report for @angular/cdk_testing",
    "codeList": [
      {
        "language": "typescript",
        "code": "export abstract class ComponentHarness {\n    constructor(locatorFactory: LocatorFactory);\n    protected documentRootLocatorFactory(): LocatorFactory;\n    protected forceStabilize(): Promise<void>;\n    host(): Promise<TestElement>;\n    // (undocumented)\n    protected readonly locatorFactory: LocatorFactory;\n    protected locatorFor<T extends (HarnessQuery<any> | string)[]>(...queries: T): AsyncFactoryFn<LocatorFnResult<T>>;\n    protected locatorForAll<T extends (HarnessQuery<any> | string)[]>(...queries: T): AsyncFactoryFn<LocatorFnResult<T>[]>;\n    protected locatorForOptional<T extends (HarnessQuery<any> | string)[]>(...queries: T): AsyncFactoryFn<LocatorFnResult<T> | null>;\n    protected waitForTasksOutsideAngular(): Promise<void>;\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Defining DataSource Abstract Class in TypeScript",
    "codeDescription": "Defines an abstract class for data sources used with CDK tables. Data sources must implement methods to connect and disconnect from a collection viewer.",
    "codeLanguage": "TypeScript",
    "codeTokens": 73,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-11_snippet_13",
    "pageTitle": "Angular CDK Table API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export abstract class DataSource<T> {\n    abstract connect(collectionViewer: CollectionViewer): Observable<readonly T[]>;\n    abstract disconnect(collectionViewer: CollectionViewer): void;\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Initializing Basic mat-table with Data Array in Angular",
    "codeDescription": "Demonstrates how to set up a basic mat-table component and bind it to a data array using the dataSource input property.",
    "codeLanguage": "html",
    "codeTokens": 51,
    "codeId": "https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Table Component Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<table mat-table [dataSource]=\"myDataArray\">\n  ...\n</table>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Angular Material Menu Component API Type Definitions",
    "codeDescription": "Complete TypeScript interface and class definitions for Angular Material's menu component. Includes MatMenu, MatMenuItem, MatMenuTrigger, and supporting tokens and interfaces. Generated by API Extractor.",
    "codeLanguage": "typescript",
    "codeTokens": 2523,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/menu/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Menu API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { Direction } from '@angular/cdk/bidi';\nimport { EventEmitter } from '@angular/core';\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/overlay';\nimport * as i5 from '@angular/cdk/scrolling';\nimport { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { QueryList } from '@angular/core';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\nimport { Subject } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\n\n// @public @deprecated (undocumented)\nexport const fadeInItems: any;\n\n// @public\nexport const MAT_MENU_CONTENT: InjectionToken<MatMenuContent>;\n\n// @public\nexport const MAT_MENU_DEFAULT_OPTIONS: InjectionToken<MatMenuDefaultOptions>;\n\n// @public\nexport const MAT_MENU_PANEL: InjectionToken<MatMenuPanel<any>>;\n\n// @public\nexport const MAT_MENU_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n\n// @public @deprecated\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_MENU_SCROLL_STRATEGY_FACTORY;\n};\n\n// @public (undocumented)\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    addItem(_item: MatMenuItem): void;\n    _allItems: QueryList<MatMenuItem>;\n    readonly _animationDone: Subject<\"void\" | \"enter\">;\n    protected _animationsDisabled: boolean;\n    ariaDescribedby: string;\n    ariaLabel: string;\n    ariaLabelledby: string;\n    backdropClass: string;\n    // @deprecated\n    get classList(): string;\n    set classList(classes: string);\n    _classList: {\n        [key: string]: boolean;\n    };\n    // @deprecated\n    readonly close: EventEmitter<MenuCloseReason>;\n    readonly closed: EventEmitter<MenuCloseReason>;\n    _directDescendantItems: QueryList<MatMenuItem>;\n    direction: Direction;\n    focusFirstItem(origin?: FocusOrigin): void;\n    _handleKeydown(event: KeyboardEvent): void;\n    hasBackdrop?: boolean;\n    _hovered(): Observable<MatMenuItem>;\n    _isAnimating: boolean;\n    // @deprecated\n    items: QueryList<MatMenuItem>;\n    lazyContent: MatMenuContent;\n    // (undocumented)\n    static ngAcceptInputType_hasBackdrop: any;\n    // (undocumented)\n    static ngAcceptInputType_overlapTrigger: unknown;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    ngOnInit(): void;\n    protected _onAnimationDone(state: string): void;\n    // (undocumented)\n    protected _onAnimationStart(state: string): void;\n    overlapTrigger: boolean;\n    overlayPanelClass: string | string[];\n    _panelAnimationState: 'void' | 'enter';\n    set panelClass(classes: string);\n    // (undocumented)\n    readonly panelId: string;\n    parentMenu: MatMenuPanel | undefined;\n    // @deprecated\n    removeItem(_item: MatMenuItem): void;\n    resetActiveItem(): void;\n    // @deprecated (undocumented)\n    setElevation(_depth: number): void;\n    // (undocumented)\n    _setIsOpen(isOpen: boolean): void;\n    setPositionClasses(posX?: MenuPositionX, posY?: MenuPositionY): void;\n    templateRef: TemplateRef<any>;\n    get xPosition(): MenuPositionX;\n    set xPosition(value: MenuPositionX);\n    get yPosition(): MenuPositionY;\n    set yPosition(value: MenuPositionY);\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatMenu, \"mat-menu\", [\"matMenu\"], { \"backdropClass\": { \"alias\": \"backdropClass\"; \"required\": false; }; \"ariaLabel\": { \"alias\": \"aria-label\"; \"required\": false; }; \"ariaLabelledby\": { \"alias\": \"aria-labelledby\"; \"required\": false; }; \"ariaDescribedby\": { \"alias\": \"aria-describedby\"; \"required\": false; }; \"xPosition\": { \"alias\": \"xPosition\"; \"required\": false; }; \"yPosition\": { \"alias\": \"yPosition\"; \"required\": false; }; \"overlapTrigger\": { \"alias\": \"overlapTrigger\"; \"required\": false; }; \"hasBackdrop\": { \"alias\": \"hasBackdrop\"; \"required\": false; }; \"panelClass\": { \"alias\": \"class\"; \"required\": false; }; \"classList\": { \"alias\": \"classList\"; \"required\": false; }; }, { \"closed\": \"closed\"; \"close\": \"close\"; }, [\"lazyContent\", \"_allItems\", \"items\"], [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatMenu, never>;\n}\n\n// @public @deprecated\nexport const matMenuAnimations: {\n    readonly transformMenu: any;\n    readonly fadeInItems: any;\n};\n\n// @public\nexport class MatMenuContent implements OnDestroy {\n    constructor(...args: unknown[]);\n    attach(context?: any): void;\n    readonly _attached: Subject<void>;\n    detach(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatMenuContent, \"ng-template[matMenuContent]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatMenuContent, never>;\n}\n\n// @public\nexport interface MatMenuDefaultOptions {\n    backdropClass: string;\n    hasBackdrop?: boolean;\n    overlapTrigger: boolean;\n    overlayPanelClass?: string | string[];\n    xPosition: MenuPositionX;\n    yPosition: MenuPositionY;\n}\n\n// @public\nexport class MatMenuItem implements FocusableOption, AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    _checkDisabled(event: Event): void;\n    disabled: boolean;\n    disableRipple: boolean;\n    focus(origin?: FocusOrigin, options?: FocusOptions): void;\n    readonly _focused: Subject<MatMenuItem>;\n    _getHostElement(): HTMLElement;\n    getLabel(): string;\n    _getTabIndex(): string;\n    _handleMouseEnter(): void;\n    // (undocumented)\n    _hasFocus(): boolean;\n    _highlighted: boolean;\n    readonly _hovered: Subject<MatMenuItem>;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disableRipple: unknown;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    _parentMenu?: MatMenuPanel<MatMenuItem> | null | undefined;\n    role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox';\n    // (undocumented)\n    _setHighlighted(isHighlighted: boolean): void;\n    // (undocumented)\n    _setTriggersSubmenu(triggersSubmenu: boolean): void;\n    _triggersSubmenu: boolean;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatMenuItem, \"[mat-menu-item]\", [\"matMenuItem\"], { \"role\": { \"alias\": \"role\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; }, {}, never, [\"mat-icon, [matMenuItemIcon]\", \"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatMenuItem, never>;\n}\n\n// @public (undocumented)\nexport class MatMenuModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatMenuModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatMenuModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatMenuModule, never, [typeof MatRippleModule, typeof MatCommonModule, typeof i2.OverlayModule, typeof MatMenu, typeof MatMenuItem, typeof MatMenuContent, typeof MatMenuTrigger], [typeof i5.CdkScrollableModule, typeof MatMenu, typeof MatCommonModule, typeof MatMenuItem, typeof MatMenuContent, typeof MatMenuTrigger]>;\n}\n\n// @public\nexport interface MatMenuPanel<T = any> {\n    // @deprecated (undocumented)\n    addItem?: (item: T) => void;\n    // (undocumented)\n    backdropClass?: string;\n    // (undocumented)\n    readonly close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    // (undocumented)\n    direction?: Direction;\n    // (undocumented)\n    focusFirstItem: (origin?: FocusOrigin) => void;\n    // (undocumented)\n    hasBackdrop?: boolean;\n    // (undocumented)\n    lazyContent?: MatMenuContent;\n    // (undocumented)\n    overlapTrigger: boolean;\n    // (undocumented)\n    overlayPanelClass?: string | string[];\n    // (undocumented)\n    readonly panelId?: string;\n    // (undocumented)\n    parentMenu?: MatMenuPanel | undefined;\n    // @deprecated (undocumented)\n    removeItem?: (item: T) => void;\n    // (undocumented)\n    resetActiveItem: () => void;\n    // @deprecated (undocumented)\n    setElevation?(depth: number): void;\n    // (undocumented)\n    setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n    // (undocumented)\n    templateRef: TemplateRef<any>;\n    // (undocumented)\n    xPosition: MenuPositionX;\n    // (undocumented)\n    yPosition: MenuPositionY;\n}\n\n// @public\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n    constructor(...args: unknown[]);\n    closeMenu(): void;\n    // @deprecated (undocumented)\n    get _deprecatedMatMenuTriggerFor(): MatMenuPanel | null;\n    set _deprecatedMatMenuTriggerFor(v: MatMenuPanel | null);\n    get dir(): Direction;\n    focus(origin?: FocusOrigin, options?: FocusOptions): void;\n    _handleClick(event: MouseEvent): void;\n    _handleKeydown(event: KeyboardEvent): void;\n    _handleMousedown(event: MouseEvent): void;\n    get menu(): MatMenuPanel | null;\n    set menu(menu: MatMenuPanel | null);\n    readonly menuClosed: EventEmitter<void>;\n    menuData: any;\n    get menuOpen(): boolean;\n    readonly menuOpened: EventEmitter<void>;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // @deprecated\n    readonly onMenuClose: EventEmitter<void>;\n    // @deprecated\n    readonly onMenuOpen: EventEmitter<void>;\n    // (undocumented)\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Angular CDK Portal Module TypeScript Definitions",
    "codeDescription": "Comprehensive TypeScript definitions for the Angular CDK Portal module, including base classes, interfaces, and implementations for portal functionality. Includes imports from @angular/core and defines portal-related classes like BasePortalOutlet, ComponentPortal, and TemplatePortal.",
    "codeLanguage": "typescript",
    "codeTokens": 1302,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/portal/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular CDK Portal API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { ApplicationRef } from '@angular/core';\nimport { ComponentRef } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EmbeddedViewRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { TemplateRef } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';\n\nexport abstract class BasePortalOutlet implements PortalOutlet {\n    attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n    attach(portal: any): any;\n    abstract attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    readonly attachDomPortal: null | ((portal: DomPortal) => any);\n    protected _attachedPortal: Portal<any> | null;\n    abstract attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    detach(): void;\n    dispose(): void;\n    hasAttached(): boolean;\n    setDisposeFn(fn: () => void): void;\n}\n\nexport class CdkPortal extends TemplatePortal {\n    constructor(...args: unknown[]);\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkPortal, \"[cdkPortal]\", [\"cdkPortal\"], {}, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkPortal, never>;\n}\n\nexport class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    attachDomPortal: (portal: DomPortal) => void;\n    readonly attached: EventEmitter<CdkPortalOutletAttachedRef>;\n    get attachedRef(): CdkPortalOutletAttachedRef;\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    get portal(): Portal<any> | null;\n    set portal(portal: Portal<any> | null | undefined | '');\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkPortalOutlet, \"[cdkPortalOutlet]\", [\"cdkPortalOutlet\"], { \"portal\": { \"alias\": \"cdkPortalOutlet\"; \"required\": false; }; }, { \"attached\": \"attached\"; }, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkPortalOutlet, never>;\n}\n\nexport type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\n\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n    constructor(component: ComponentType<T>, viewContainerRef?: ViewContainerRef | null, injector?: Injector | null, projectableNodes?: Node[][] | null);\n    component: ComponentType<T>;\n    injector?: Injector | null;\n    projectableNodes?: Node[][] | null;\n    viewContainerRef?: ViewContainerRef | null;\n}\n\nexport interface ComponentType<T> {\n    new (...args: any[]): T;\n}\n\nexport class DomPortal<T = HTMLElement> extends Portal<T> {\n    constructor(element: T | ElementRef<T>);\n    readonly element: T;\n}\n\nexport class DomPortalOutlet extends BasePortalOutlet {\n    constructor(\n    outletElement: Element, _appRef?: ApplicationRef | undefined, _defaultInjector?: Injector | undefined);\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    attachDomPortal: (portal: DomPortal) => void;\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n    dispose(): void;\n    outletElement: Element;\n}\n\nexport abstract class Portal<T> {\n    attach(host: PortalOutlet): T;\n    detach(): void;\n    get isAttached(): boolean;\n    setAttachedHost(host: PortalOutlet | null): void;\n}\n\nexport class PortalHostDirective extends CdkPortalOutlet {\n    static ɵdir: i0.ɵɵDirectiveDeclaration<PortalHostDirective, \"[cdkPortalHost], [portalHost]\", [\"cdkPortalHost\"], { \"portal\": { \"alias\": \"cdkPortalHost\"; \"required\": false; }; }, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<PortalHostDirective, never>;\n}\n\nexport class PortalModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<PortalModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<PortalModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<PortalModule, never, [typeof CdkPortal, typeof CdkPortalOutlet, typeof TemplatePortalDirective, typeof PortalHostDirective], [typeof CdkPortal, typeof CdkPortalOutlet, typeof TemplatePortalDirective, typeof PortalHostDirective]>;\n}\n\nexport interface PortalOutlet {\n    attach(portal: Portal<any>): any;\n    detach(): any;\n    dispose(): void;\n    hasAttached(): boolean;\n}\n\nexport class TemplatePortal<C = any> extends Portal<EmbeddedViewRef<C>> {\n    constructor(\n    templateRef: TemplateRef<C>,\n    viewContainerRef: ViewContainerRef,\n    context?: C | undefined,\n    injector?: Injector | undefined);\n    attach(host: PortalOutlet, context?: C | undefined): EmbeddedViewRef<C>;\n    context?: C | undefined;\n    detach(): void;\n    injector?: Injector | undefined;\n    get origin(): ElementRef;\n    templateRef: TemplateRef<C>;\n    viewContainerRef: ViewContainerRef;\n}\n\nexport class TemplatePortalDirective extends CdkPortal {\n    static ɵdir: i0.ɵɵDirectiveDeclaration<TemplatePortalDirective, \"[cdk-portal], [portal]\", [\"cdkPortal\"], {}, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<TemplatePortalDirective, never>;\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Configuring Global Ripple Options in Angular Module",
    "codeDescription": "Demonstrates how to set global configuration options for all ripples in an application using the MAT_RIPPLE_GLOBAL_OPTIONS provider. This example disables ripples and customizes animation duration.",
    "codeLanguage": "typescript",
    "codeTokens": 111,
    "codeId": "https://github.com/angular/components/blob/main/src/material/core/ripple/ripple.md#2025-04-11_snippet_4",
    "pageTitle": "Angular Material Ripple Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const globalRippleConfig: RippleGlobalOptions = {\n  disabled: true,\n  animation: {\n    enterDuration: 300,\n    exitDuration: 0\n  }\n};\n\n@NgModule({\n  providers: [\n    {provide: MAT_RIPPLE_GLOBAL_OPTIONS, useValue: globalRippleConfig}\n  ]\n})"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Generating Angular Components and Other Artifacts",
    "codeDescription": "Command for generating new Angular components and other artifacts using the Angular CLI. It supports generating directives, pipes, services, classes, guards, interfaces, enums, and modules.",
    "codeLanguage": "bash",
    "codeTokens": 54,
    "codeId": "https://github.com/angular/components/blob/main/integration/yarn-pnp-compat/README.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Components Project with Yarn PnP Compatibility",
    "codeList": [
      {
        "language": "bash",
        "code": "ng generate component component-name"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Adding Icons to List Items in Angular Material",
    "codeDescription": "Shows how to add icons to list items using the matListItemIcon attribute. This example demonstrates a list with folder icons for each item.",
    "codeLanguage": "html",
    "codeTokens": 133,
    "codeId": "https://github.com/angular/components/blob/main/src/material/list/list.md#2025-04-11_snippet_6",
    "pageTitle": "Angular Material List Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-list>\n  @for (message of messages; track message) {\n    <mat-list-item>\n      <mat-icon matListItemIcon>folder</mat-icon>\n      <h3 matListItemTitle>{{message.from}}</h3>\n      <p matListItemLine>\n        <span>{{message.subject}}</span>\n        <span class=\"demo-2\"> -- {{message.content}}</span>\n      </p>\n    </mat-list-item>\n  }\n</mat-list>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using HarnessPredicate for Item Filtering in Menu Harness",
    "codeDescription": "Demonstrates how to extend a component harness to implement filtering capabilities for child elements by enhancing the getItems method to accept filter criteria.",
    "codeLanguage": "typescript",
    "codeTokens": 121,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-11_snippet_10",
    "pageTitle": "Angular CDK Testing Infrastructure",
    "codeList": [
      {
        "language": "typescript",
        "code": "class MyMenuHarness extends ComponentHarness {\n  static hostSelector = 'my-menu';\n\n  /** Gets a list of items in the menu, optionally filtered based on the given criteria. */\n  async getItems(filters: MyMenuItemHarnessFilters = {}): Promise<MyMenuItemHarness[]> {\n    const getFilteredItems = this.locatorForAll(MyMenuItemHarness.with(filters));\n    return getFilteredItems();\n  }\n\n  ...\n}"
      }
    ],
    "relevance": 0.933
  },
  {
    "codeTitle": "Implementing Accessible Icon with Hidden Text in Angular Material",
    "codeDescription": "This example shows how to make an icon accessible by providing hidden text that describes the icon's meaning. The cdk-visually-hidden class hides the text visually while keeping it available for screen readers.",
    "codeLanguage": "html",
    "codeTokens": 78,
    "codeId": "https://github.com/angular/components/blob/main/src/material/icon/icon.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material Icon Component Usage Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-icon aria-hidden=\"true\">check</mat-icon>\n<span class=\"cdk-visually-hidden\">Task completed</span>"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Creating a Content Container Harness for Popup Components",
    "codeDescription": "Shows how to implement a content container harness for components that use ng-content to project arbitrary content, allowing test authors to load harnesses for projected content.",
    "codeLanguage": "typescript",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-11_snippet_11",
    "pageTitle": "Angular CDK Testing Infrastructure",
    "codeList": [
      {
        "language": "typescript",
        "code": "class MyPopupHarness extends ContentContainerComponentHarness<string> {\n  static hostSelector = 'my-popup';\n}"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Defining MatSnackBarHarness Class in TypeScript",
    "codeDescription": "This code snippet defines the MatSnackBarHarness class, which extends ContentContainerComponentHarness. It provides methods for interacting with and testing Angular Material snack bars, including dismissing, getting messages, and checking properties.",
    "codeLanguage": "typescript",
    "codeTokens": 163,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/snack-bar/testing/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "API Report for @angular/material_snack-bar_testing",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class MatSnackBarHarness extends ContentContainerComponentHarness<string> {\n    dismissWithAction(): Promise<void>;\n    getActionDescription(): Promise<string>;\n    getAriaLive(): Promise<AriaLivePoliteness>;\n    getMessage(): Promise<string>;\n    // @deprecated\n    getRole(): Promise<'alert' | 'status' | null>;\n    hasAction(): Promise<boolean>;\n    static hostSelector: string;\n    isDismissed(): Promise<boolean>;\n    static with(options?: SnackBarHarnessFilters): HarnessPredicate<MatSnackBarHarness>;\n}"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Positioning Toolbar Content with Flexbox in Angular Material",
    "codeDescription": "This HTML snippet shows how to position content within a toolbar using flexbox, demonstrating a common pattern of placing a title on the left with actions on the right.",
    "codeLanguage": "html",
    "codeTokens": 106,
    "codeId": "https://github.com/angular/components/blob/main/src/material/toolbar/toolbar.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Toolbar Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-toolbar>\n  <span>My Application</span>\n  <span class=\"example-spacer\"></span>\n  <button mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with menu icon\">\n    <mat-icon>menu</mat-icon>\n  </button>\n</mat-toolbar>"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Implementing Radio Menu Items in Angular CDK",
    "codeDescription": "Demonstrates how to create radio button menu items for exclusive selection using cdkMenuItemRadio directive with state binding.",
    "codeLanguage": "html",
    "codeTokens": 173,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/menu/menu.md#2025-04-11_snippet_9",
    "pageTitle": "Angular CDK Menu Module Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<button\n  class=\"example-menu-item\"\n  cdkMenuItemRadio\n  [cdkMenuItemChecked]=\"size === 'small'\"\n  (cdkMenuItemTriggered)=\"size = 'small'\">Small text</button>\n<button\n  class=\"example-menu-item\"\n  cdkMenuItemRadio\n  [cdkMenuItemChecked]=\"size === 'normal'\"\n  (cdkMenuItemTriggered)=\"size = 'normal'\">Normal text</button>\n<button\n  class=\"example-menu-item\"\n  cdkMenuItemRadio\n  [cdkMenuItemChecked]=\"size === 'large'\"\n  (cdkMenuItemTriggered)=\"size = 'large'\">Large text</button>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Angular CDK Menu Core Import Declarations",
    "codeDescription": "TypeScript imports for Angular core dependencies and RxJS observables used by the CDK menu components.",
    "codeLanguage": "typescript",
    "codeTokens": 313,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/menu/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular CDK Menu API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AfterContentInit } from '@angular/core';\nimport { ComponentRef } from '@angular/core';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EmbeddedViewRef } from '@angular/core';\nimport { EnvironmentInjector } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { Injector } from '@angular/core';\nimport { Location as Location_2 } from '@angular/common';\nimport { NgIterable } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Optional } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport * as rxjs from 'rxjs';\nimport { Signal } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\nimport { TrackByFunction } from '@angular/core';\nimport { Type } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Defining Column Templates for mat-table in Angular",
    "codeDescription": "Shows how to create column definitions for mat-table, including header and cell templates. It also demonstrates the use of mat-text-column for simple string value columns.",
    "codeLanguage": "html",
    "codeTokens": 91,
    "codeId": "https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Table Component Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<ng-container matColumnDef=\"score\">\n  <th mat-header-cell *matHeaderCellDef> Score </th>\n  <td mat-cell *matCellDef=\"let user\"> {{user.score}} </td>\n</ng-container>"
      },
      {
        "language": "html",
        "code": "<mat-text-column name=\"score\"></mat-text-column>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Buffered Copying for Longer Text with PendingCopy in Angular",
    "codeDescription": "Example showing how to handle copying longer text using the beginCopy method, which returns a PendingCopy object. This approach includes retry logic and proper cleanup to ensure larger content is copied successfully.",
    "codeLanguage": "typescript",
    "codeTokens": 166,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/clipboard/clipboard.md#2025-04-11_snippet_2",
    "pageTitle": "Angular CDK Clipboard Package Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Clipboard} from '@angular/cdk/clipboard';\n\nclass HeroProfile {\n  lifetimeAchievements: string;\n\n  constructor(private clipboard: Clipboard) {}\n\n  copyAchievements() {\n    const pending = this.clipboard.beginCopy(this.lifetimeAchievements);\n    let remainingAttempts = 3;\n    const attempt = () => {\n      const result = pending.copy();\n      if (!result && --remainingAttempts) {\n        setTimeout(attempt);\n      } else {\n        // Remember to destroy when you're done!\n        pending.destroy();\n      }\n    };\n    attempt();\n  }\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Implementing Selection Model for Angular Material Table",
    "codeDescription": "JavaScript code to initialize a SelectionModel from @angular/cdk/collections that maintains the selection state of table rows.",
    "codeLanguage": "js",
    "codeTokens": 62,
    "codeId": "https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-11_snippet_5",
    "pageTitle": "Angular Material Table Component Guide",
    "codeList": [
      {
        "language": "js",
        "code": "const initialSelection = [];\nconst allowMultiSelect = true;\nthis.selection = new SelectionModel<MyDataType>(allowMultiSelect, initialSelection);"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Complete CdkTable Example with Three Columns in Angular",
    "codeDescription": "A complete example of a CdkTable implementation with three columns (username, age, title). The example includes column definitions and row declarations with data binding.",
    "codeLanguage": "html",
    "codeTokens": 310,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-11_snippet_2",
    "pageTitle": "CdkTable: Angular's Unopinionated Data Table Component",
    "codeList": [
      {
        "language": "html",
        "code": "<table cdk-table [dataSource]=\"dataSource\">\n  <!-- User name Definition -->\n  <ng-container cdkColumnDef=\"username\">\n    <th cdk-header-cell *cdkHeaderCellDef> User name </th>\n    <td cdk-cell *cdkCellDef=\"let row\"> {{row.username}} </td>\n  </ng-container>\n\n  <!-- Age Definition -->\n  <ng-container cdkColumnDef=\"age\">\n    <th cdk-header-cell *cdkHeaderCellDef> Age </th>\n    <td cdk-cell *cdkCellDef=\"let row\"> {{row.age}} </td>\n  </ng-container>\n\n  <!-- Title Definition -->\n  <ng-container cdkColumnDef=\"title\">\n    <th cdk-header-cell *cdkHeaderCellDef> Title </th>\n    <td cdk-cell *cdkCellDef=\"let row\"> {{row.title}} </td>\n  </ng-container>\n\n  <!-- Header and Row Declarations -->\n  <tr cdk-header-row *cdkHeaderRowDef=\"['username', 'age', 'title']\"></tr>\n  <tr cdk-row *cdkRowDef=\"let row; columns: ['username', 'age', 'title']\"></tr>\n</table>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Implementing a Heatmap Layer in Angular Google Maps Component",
    "codeDescription": "This TypeScript component demonstrates how to set up a Google Map with a heatmap layer. It configures the map center coordinates, zoom level, heatmap options (radius), and provides sample location data points to visualize on the heatmap.",
    "codeLanguage": "typescript",
    "codeTokens": 397,
    "codeId": "https://github.com/angular/components/blob/main/src/google-maps/map-heatmap-layer/README.md#2025-04-11_snippet_0",
    "pageTitle": "MapHeatmapLayer for Angular Google Maps",
    "codeList": [
      {
        "language": "typescript",
        "code": "// google-map-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapHeatmapLayer} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapHeatmapLayer],\n})\nexport class GoogleMapDemo {\n  center = {lat: 37.774546, lng: -122.433523};\n  zoom = 12;\n  heatmapOptions = {radius: 5};\n  heatmapData = [\n    {lat: 37.782, lng: -122.447},\n    {lat: 37.782, lng: -122.445},\n    {lat: 37.782, lng: -122.443},\n    {lat: 37.782, lng: -122.441},\n    {lat: 37.782, lng: -122.439},\n    {lat: 37.782, lng: -122.437},\n    {lat: 37.782, lng: -122.435},\n    {lat: 37.785, lng: -122.447},\n    {lat: 37.785, lng: -122.445},\n    {lat: 37.785, lng: -122.443},\n    {lat: 37.785, lng: -122.441},\n    {lat: 37.785, lng: -122.439},\n    {lat: 37.785, lng: -122.437},\n    {lat: 37.785, lng: -122.435}\n  ];\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Angular Material Stepper API TypeScript Definitions",
    "codeDescription": "Comprehensive TypeScript declarations for Angular Material Stepper components including imports, classes, interfaces and type definitions. Includes core stepper functionality, step headers, labels, navigation, and animations.",
    "codeLanguage": "typescript",
    "codeTokens": 591,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/stepper/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Stepper API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AbstractControl } from '@angular/forms';\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewChecked } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { CdkStep } from '@angular/cdk/stepper';\nimport { CdkStepHeader } from '@angular/cdk/stepper';\nimport { CdkStepLabel } from '@angular/cdk/stepper';\nimport { CdkStepper } from '@angular/cdk/stepper';\nimport { CdkStepperNext } from '@angular/cdk/stepper';\nimport { CdkStepperPrevious } from '@angular/cdk/stepper';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { FormGroupDirective } from '@angular/forms';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i3$1 from '@angular/cdk/stepper';\nimport * as i3 from '@angular/cdk/portal';\nimport { NgForm } from '@angular/forms';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Optional } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { StepperOrientation } from '@angular/cdk/stepper';\nimport { StepState } from '@angular/cdk/stepper';\nimport { Subject } from 'rxjs';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { TemplateRef } from '@angular/core';\n\nexport const MAT_STEPPER_INTL_PROVIDER: {\n    provide: typeof MatStepperIntl;\n    deps: Optional[][];\n    useFactory: typeof MAT_STEPPER_INTL_PROVIDER_FACTORY;\n};\n\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl): MatStepperIntl;\n\nexport class MatStep extends CdkStep implements ErrorStateMatcher, AfterContentInit, OnDestroy {\n    color: ThemePalette;\n    isErrorState(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean;\n    _lazyContent: MatStepContent;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    _portal: TemplatePortal;\n    stepLabel: MatStepLabel;\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatStep, \"mat-step\", [\"matStep\"], {}, {}, [], never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatStep, never>;\n}\n\n// Additional class and interface definitions..."
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Setting Tooltip Delay in Angular Material",
    "codeDescription": "This snippet illustrates how to add show and hide delays to the Angular Material tooltip. It's a placeholder for an example that would demonstrate setting custom delay times.",
    "codeLanguage": "html",
    "codeTokens": 49,
    "codeId": "https://github.com/angular/components/blob/main/src/material/tooltip/tooltip.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Tooltip Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- example(tooltip-delay) -->"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Implementing Buffer Progress Bar in Angular Material",
    "codeDescription": "This example demonstrates the buffer mode of the progress bar in Angular Material. It's used to indicate activity or loading from the server. The 'value' property determines the progress of the primary bar, while 'bufferValue' shows additional buffering progress.",
    "codeLanguage": "html",
    "codeTokens": 67,
    "codeId": "https://github.com/angular/components/blob/main/src/material/progress-bar/progress-bar.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Progress Bar Component",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- example(progress-bar-buffer) -->"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Configuring SystemJS for Angular Material UMD Bundles",
    "codeDescription": "Example configuration for SystemJS to use Angular Material's UMD bundles after the packaging change from @angular2-material to @angular/material.",
    "codeLanguage": "typescript",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_179",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "'@angular2-material/core': {\n    format: 'cjs',\n    main: 'core.umd.js'\n  }"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Importing MatInputModule for Native Select in Angular",
    "codeDescription": "Shows how to import MatInputModule and use the matNativeControl attribute for native select elements within mat-form-field.",
    "codeLanguage": "TypeScript",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/components/blob/main/src/material/select/select.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Select Component",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "@NgModule({\n  providers: [\n    {provide: ErrorStateMatcher, useClass: ShowOnDirtyErrorStateMatcher}\n  ]\n})"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Using KeyCode Constants in Angular Directive",
    "codeDescription": "Example of implementing a directive that counts arrow key presses using Angular CDK's keycode constants. Demonstrates importing and using predefined key constants (UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW) for keyboard event handling.",
    "codeLanguage": "typescript",
    "codeTokens": 167,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/keycodes/keycodes.md#2025-04-11_snippet_0",
    "pageTitle": "Angular KeyCodes Reference",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Directive} from '@angular/core';\nimport {UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\n\n@Directive({\n  selector: '[count-arrows]'\n  host: {\n    (keypress): 'handleKeyPress($event)'\n  }\n})\nexport class ArrowCounterDirective {\n  arrowPressCount = 0;\n\n  handleKeyPress(event: KeyboardEvent) {\n    if ([UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW].includes(event.keyCode)) {\n      this.arrowPresscount++;\n    }\n  }\n}"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Angular Material Input API Definition",
    "codeDescription": "Complete API report for @angular/material_input, generated by API Extractor. Defines all public classes, interfaces, and tokens including MatInput, MatFormField, MatError, and MatHint, along with supporting types and utilities.",
    "codeLanguage": "typescript",
    "codeTokens": 2514,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/input/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Input API",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AbstractControl } from '@angular/forms';\nimport { AbstractControlDirective } from '@angular/forms';\nimport { AfterContentChecked } from '@angular/core';\nimport { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { FormGroupDirective } from '@angular/forms';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/observers';\nimport * as i4 from '@angular/cdk/text-field';\nimport { InjectionToken } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { NgForm } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { QueryList } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { WritableSignal } from '@angular/core';\n\n// @public\nexport function getMatInputUnsupportedTypeError(type: string): Error;\n\n// @public\nexport const MAT_INPUT_CONFIG: InjectionToken<MatInputConfig>;\n\n// @public\nexport const MAT_INPUT_VALUE_ACCESSOR: InjectionToken<{\n    value: any | WritableSignal<any>;\n}>;\n\n// @public\nexport class MatError {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    id: string;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatError, \"mat-error, [matError]\", never, { \"id\": { \"alias\": \"id\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatError, never>;\n}\n\n// @public\nexport class MatFormField implements FloatingLabelParent, AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    _animateAndLockLabel(): void;\n    // (undocumented)\n    protected readonly _animationsDisabled: boolean;\n    get appearance(): MatFormFieldAppearance;\n    set appearance(value: MatFormFieldAppearance);\n    color: ThemePalette;\n    get _control(): MatFormFieldControl<any>;\n    set _control(value: MatFormFieldControl<any>);\n    // (undocumented)\n    _elementRef: ElementRef<any>;\n    // (undocumented)\n    _errorChildren: QueryList<MatError>;\n    // (undocumented)\n    _floatingLabel: MatFormFieldFloatingLabel | undefined;\n    get floatLabel(): FloatLabelType;\n    set floatLabel(value: FloatLabelType);\n    _forceDisplayInfixLabel(): boolean | 0;\n    // (undocumented)\n    _formFieldControl: MatFormFieldControl<any>;\n    getConnectedOverlayOrigin(): ElementRef;\n    getLabelId: i0.Signal<string | null>;\n    _getSubscriptMessageType(): 'error' | 'hint';\n    _handleLabelResized(): void;\n    // (undocumented)\n    _hasFloatingLabel: i0.Signal<boolean>;\n    // (undocumented)\n    _hasIconPrefix: boolean;\n    // (undocumented)\n    _hasIconSuffix: boolean;\n    // (undocumented)\n    _hasOutline(): boolean;\n    // (undocumented)\n    _hasTextPrefix: boolean;\n    // (undocumented)\n    _hasTextSuffix: boolean;\n    get hideRequiredMarker(): boolean;\n    set hideRequiredMarker(value: BooleanInput);\n    // (undocumented)\n    _hintChildren: QueryList<MatHint>;\n    get hintLabel(): string;\n    set hintLabel(value: string);\n    // (undocumented)\n    readonly _hintLabelId: string;\n    // (undocumented)\n    _iconPrefixContainer: ElementRef<HTMLElement>;\n    // (undocumented)\n    _iconSuffixContainer: ElementRef<HTMLElement>;\n    // (undocumented)\n    readonly _labelId: string;\n    // (undocumented)\n    _lineRipple: MatFormFieldLineRipple | undefined;\n    // (undocumented)\n    ngAfterContentChecked(): void;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    _notchedOutline: MatFormFieldNotchedOutline | undefined;\n    // (undocumented)\n    _prefixChildren: QueryList<MatPrefix>;\n    _refreshOutlineNotchWidth(): void;\n    _shouldAlwaysFloat(): boolean;\n    _shouldForward(prop: keyof AbstractControlDirective): boolean;\n    // (undocumented)\n    _shouldLabelFloat(): boolean;\n    get subscriptSizing(): SubscriptSizing;\n    set subscriptSizing(value: SubscriptSizing);\n    // (undocumented)\n    _suffixChildren: QueryList<MatSuffix>;\n    // (undocumented)\n    _textField: ElementRef<HTMLElement>;\n    // (undocumented)\n    _textPrefixContainer: ElementRef<HTMLElement>;\n    // (undocumented)\n    _textSuffixContainer: ElementRef<HTMLElement>;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatFormField, \"mat-form-field\", [\"matFormField\"], { \"hideRequiredMarker\": { \"alias\": \"hideRequiredMarker\"; \"required\": false; }; \"color\": { \"alias\": \"color\"; \"required\": false; }; \"floatLabel\": { \"alias\": \"floatLabel\"; \"required\": false; }; \"appearance\": { \"alias\": \"appearance\"; \"required\": false; }; \"subscriptSizing\": { \"alias\": \"subscriptSizing\"; \"required\": false; }; \"hintLabel\": { \"alias\": \"hintLabel\"; \"required\": false; }; }, {}, [\"_labelChild\", \"_formFieldControl\", \"_prefixChildren\", \"_suffixChildren\", \"_errorChildren\", \"_hintChildren\"], [\"mat-label\", \"[matPrefix], [matIconPrefix]\", \"[matTextPrefix]\", \"*\", \"[matTextSuffix]\", \"[matSuffix], [matIconSuffix]\", \"mat-error, [matError]\", \"mat-hint:not([align='end'])\", \"mat-hint[align='end']\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatFormField, never>;\n}\n\n// @public\nexport class MatHint {\n    align: 'start' | 'end';\n    id: string;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatHint, \"mat-hint\", never, { \"align\": { \"alias\": \"align\"; \"required\": false; }; \"id\": { \"alias\": \"id\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatHint, never>;\n}\n\n// @public (undocumented)\nexport class MatInput implements MatFormFieldControl_2<any>, OnChanges, OnDestroy, AfterViewInit, DoCheck {\n    constructor(...args: unknown[]);\n    autofilled: boolean;\n    controlType: string;\n    protected _dirtyCheckNativeValue(): void;\n    get disabled(): boolean;\n    set disabled(value: BooleanInput);\n    // (undocumented)\n    protected _disabled: boolean;\n    disabledInteractive: boolean;\n    // (undocumented)\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;\n    get empty(): boolean;\n    get errorState(): boolean;\n    set errorState(value: boolean);\n    get errorStateMatcher(): ErrorStateMatcher;\n    set errorStateMatcher(value: ErrorStateMatcher);\n    focus(options?: FocusOptions): void;\n    _focusChanged(isFocused: boolean): void;\n    focused: boolean;\n    // (undocumented)\n    protected _formField?: MatFormField | null | undefined;\n    protected _getPlaceholder(): string | null;\n    protected _getReadonlyAttribute(): string | null;\n    get id(): string;\n    set id(value: string);\n    // (undocumented)\n    protected _id: string;\n    protected _isBadInput(): boolean;\n    readonly _isInFormField: boolean;\n    _isInlineSelect(): boolean;\n    readonly _isNativeSelect: boolean;\n    protected _isNeverEmpty(): boolean;\n    readonly _isServer: boolean;\n    readonly _isTextarea: boolean;\n    name: string;\n    // (undocumented)\n    protected _neverEmptyInputTypes: string[];\n    // (undocumented)\n    static ngAcceptInputType_disabledInteractive: unknown;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngControl: NgControl;\n    // (undocumented)\n    ngDoCheck(): void;\n    // (undocumented)\n    ngOnChanges(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    onContainerClick(): void;\n    // (undocumented)\n    _onInput(): void;\n    placeholder: string;\n    // (undocumented)\n    protected _platform: Platform;\n    // (undocumented)\n    protected _previousNativeValue: any;\n    get readonly(): boolean;\n    set readonly(value: BooleanInput);\n    get required(): boolean;\n    set required(value: BooleanInput);\n    // (undocumented)\n    protected _required: boolean | undefined;\n    setDescribedByIds(ids: string[]): void;\n    get shouldLabelFloat(): boolean;\n    readonly stateChanges: Subject<void>;\n    get type(): string;\n    set type(value: string);\n    // (undocumented)\n    protected _type: string;\n    // (undocumented)\n    protected _uid: string;\n    updateErrorState(): void;\n    userAriaDescribedBy: string;\n    protected _validateType(): void;\n    get value(): string;\n    set value(value: any);\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatInput, \"input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]\", [\"matInput\"], { \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"id\": { \"alias\": \"id\"; \"required\": false; }; \"placeholder\": { \"alias\": \"placeholder\"; \"required\": false; }; \"name\": { \"alias\": \"name\"; \"required\": false; }; \"required\": { \"alias\": \"required\"; \"required\": false; }; \"type\": { \"alias\": \"type\"; \"required\": false; }; \"errorStateMatcher\": { \"alias\": \"errorStateMatcher\"; \"required\": false; }; \"userAriaDescribedBy\": { \"alias\": \"aria-describedby\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"readonly\": { \"alias\": \"readonly\"; \"required\": false; }; \"disabledInteractive\": { \"alias\": \"disabledInteractive\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatInput, never>;\n}\n\n// @public\nexport interface MatInputConfig {\n    disabledInteractive?: boolean;\n}\n\n// @public (undocumented)\nexport class MatInputModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatInputModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatInputModule>;\n    // (undocumented)\n}"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Material List with Inset Dividers Implementation in HTML",
    "codeDescription": "Complex example showing how to use mat-divider within a material list component, including conditional inset dividers and section separation.",
    "codeLanguage": "html",
    "codeTokens": 236,
    "codeId": "https://github.com/angular/components/blob/main/src/material/divider/divider.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material Divider Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-list>\n   <h3 mat-subheader>Folders</h3>\n   @for (folder of folders; track folder) {\n      <mat-list-item>\n         <mat-icon mat-list-icon>folder</mat-icon>\n         <h4 mat-line>{{folder.name}}</h4>\n         <p mat-line class=\"demo-2\">{{folder.updated}}</p>\n         @if (!$last) {\n            <mat-divider [inset]=\"true\"></mat-divider>\n         }\n      </mat-list-item>\n   }\n   <mat-divider></mat-divider>\n   <h3 mat-subheader>Notes</h3>\n   @for (note of notes; track node) {\n      <mat-list-item>\n         <mat-icon mat-list-icon>note</mat-icon>\n         <h4 mat-line>{{note.name}}</h4>\n         <p mat-line class=\"demo-2\"> {{note.updated}} </p>\n      </mat-list-item>\n   }\n</mat-list>"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Demonstrating Basic Paginator Usage in HTML",
    "codeDescription": "This snippet shows the basic usage of the <mat-paginator> component. It includes a comment referencing an example named 'paginator-overview'.",
    "codeLanguage": "html",
    "codeTokens": 47,
    "codeId": "https://github.com/angular/components/blob/main/src/material/paginator/paginator.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Paginator Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- example(paginator-overview) -->"
      }
    ],
    "relevance": 0.927
  },
  {
    "codeTitle": "Using Small Card Image in Angular Material",
    "codeDescription": "The mat-card-sm-image attribute applied to an img element creates a small-sized image within a card title group. This provides a predefined size for the image.",
    "codeLanguage": "html",
    "codeTokens": 49,
    "codeId": "https://github.com/angular/components/blob/main/src/material/card/card.md#2025-04-11_snippet_10",
    "pageTitle": "Angular Material Card Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<img mat-card-sm-image>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Implementing a Nested Tree Structure with CDK Tree in HTML",
    "codeDescription": "This snippet shows how to create a nested tree structure where child nodes are placed inside their parent nodes in the DOM hierarchy using cdk-nested-tree-node components.",
    "codeLanguage": "html",
    "codeTokens": 117,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/tree/tree.md#2025-04-11_snippet_1",
    "pageTitle": "CDK Tree Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<cdk-tree>\n  <cdk-nested-tree-node>\n    parent node\n    <cdk-nested-tree-node> -- child node1 </cdk-nested-tree-node>\n    <cdk-nested-tree-node> -- child node2 </cdk-nested-tree-node>\n  </cdk-nested-tree-node>\n</cdk-tree>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Implementing Determinate Progress Bar in Angular Material",
    "codeDescription": "This snippet demonstrates the usage of a determinate progress bar in Angular Material. The determinate mode is used when the percentage of the operation complete is known, and progress is represented by the 'value' property.",
    "codeLanguage": "html",
    "codeTokens": 61,
    "codeId": "https://github.com/angular/components/blob/main/src/material/progress-bar/progress-bar.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Progress Bar Component",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- example(progress-bar-determinate) -->"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Implementing Row Selection Logic in Angular Material Table",
    "codeDescription": "JavaScript logic to handle selection functionality including checking if all rows are selected and toggling selection for all rows.",
    "codeLanguage": "js",
    "codeTokens": 127,
    "codeId": "https://github.com/angular/components/blob/main/src/material/table/table.md#2025-04-11_snippet_7",
    "pageTitle": "Angular Material Table Component Guide",
    "codeList": [
      {
        "language": "js",
        "code": "/** Whether the number of selected elements matches the total number of rows. */\nisAllSelected() {\n  const numSelected = this.selection.selected.length;\n  const numRows = this.dataSource.data.length;\n  return numSelected == numRows;\n}\n\n/** Selects all rows if they are not all selected; otherwise clear selection. */\ntoggleAllRows() {\n  this.isAllSelected() ?\n      this.selection.clear() :\n      this.dataSource.data.forEach(row => this.selection.select(row));\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Angular Material Radio Module API Definitions",
    "codeDescription": "Contains the complete TypeScript definitions for Angular Material's radio components, including classes MatRadioButton, MatRadioGroup, MatRadioChange, and related interfaces and injection tokens. Defines the public API surface for the radio component module.",
    "codeLanguage": "typescript",
    "codeTokens": 1174,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/radio/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Radio API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { InjectionToken } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { QueryList } from '@angular/core';\n\nexport const MAT_RADIO_DEFAULT_OPTIONS: InjectionToken<MatRadioDefaultOptions>;\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions;\n\nexport const MAT_RADIO_GROUP: InjectionToken<MatRadioGroup>;\n\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any;\n\nexport class MatRadioButton implements OnInit, AfterViewInit, DoCheck, OnDestroy {\n    constructor(...args: unknown[]);\n    ariaDescribedby: string;\n    ariaLabel: string;\n    ariaLabelledby: string;\n    readonly change: EventEmitter<MatRadioChange>;\n    get checked(): boolean;\n    set checked(value: boolean);\n    get color(): ThemePalette;\n    set color(newValue: ThemePalette);\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    get disabledInteractive(): boolean;\n    set disabledInteractive(value: boolean);\n    disableRipple: boolean;\n    protected _elementRef: ElementRef<any>;\n    focus(options?: FocusOptions, origin?: FocusOrigin): void;\n    id: string;\n    _inputElement: ElementRef<HTMLInputElement>;\n    get inputId(): string;\n    _isRippleDisabled(): boolean;\n    get labelPosition(): 'before' | 'after';\n    set labelPosition(value: \"before\" | \"after\");\n    _markForCheck(): void;\n    name: string;\n    static ngAcceptInputType_checked: unknown;\n    static ngAcceptInputType_disabled: unknown;\n    static ngAcceptInputType_disabledInteractive: unknown;\n    static ngAcceptInputType_disableRipple: unknown;\n    static ngAcceptInputType_required: unknown;\n    static ngAcceptInputType_tabIndex: unknown;\n    ngAfterViewInit(): void;\n    ngDoCheck(): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    _noopAnimations: boolean;\n    _onInputInteraction(event: Event): void;\n    _onTouchTargetClick(event: Event): void;\n    radioGroup: MatRadioGroup;\n    get required(): boolean;\n    set required(value: boolean);\n    _rippleTrigger: ElementRef<HTMLElement>;\n    protected _setDisabled(value: boolean): void;\n    tabIndex: number;\n    get value(): any;\n    set value(value: any);\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatRadioButton, \"mat-radio-button\", [\"matRadioButton\"], {}, {}, never, [\"*\"], true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatRadioButton, never>;\n}\n\nexport class MatRadioChange<T = any> {\n    constructor(source: MatRadioButton, value: T);\n    source: MatRadioButton;\n    value: T;\n}\n\nexport interface MatRadioDefaultOptions {\n    color: ThemePalette;\n    disabledInteractive?: boolean;\n}\n\nexport class MatRadioGroup implements AfterContentInit, OnDestroy, ControlValueAccessor {\n    constructor(...args: unknown[]);\n    readonly change: EventEmitter<MatRadioChange>;\n    _checkSelectedRadioButton(): void;\n    color: ThemePalette;\n    _controlValueAccessorChangeFn: (value: any) => void;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    get disabledInteractive(): boolean;\n    set disabledInteractive(value: boolean);\n    _emitChangeEvent(): void;\n    get labelPosition(): 'before' | 'after';\n    set labelPosition(v: \"before\" | \"after\");\n    _markRadiosForCheck(): void;\n    get name(): string;\n    set name(value: string);\n    static ngAcceptInputType_disabled: unknown;\n    static ngAcceptInputType_disabledInteractive: unknown;\n    static ngAcceptInputType_required: unknown;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    onTouched: () => any;\n    _radios: QueryList<MatRadioButton>;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: any): void;\n    get required(): boolean;\n    set required(value: boolean);\n    get selected(): MatRadioButton | null;\n    set selected(selected: MatRadioButton | null);\n    setDisabledState(isDisabled: boolean): void;\n    _touch(): void;\n    get value(): any;\n    set value(newValue: any);\n    writeValue(value: any): void;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatRadioGroup, \"mat-radio-group\", [\"matRadioGroup\"], {}, {}, [\"_radios\"], never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatRadioGroup, never>;\n}\n\nexport class MatRadioModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatRadioModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatRadioModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatRadioModule, never, [], []>;\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Configuring Global Error State Matcher in Angular Material",
    "codeDescription": "This code snippet demonstrates how to set up a global error state matcher by providing the ErrorStateMatcher at the module level. It specifically uses ShowOnDirtyErrorStateMatcher to display input errors when the input is dirty and invalid.",
    "codeLanguage": "typescript",
    "codeTokens": 83,
    "codeId": "https://github.com/angular/components/blob/main/src/material/input/input.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material matInput Directive",
    "codeList": [
      {
        "language": "typescript",
        "code": "@NgModule({\n  providers: [\n    {provide: ErrorStateMatcher, useClass: ShowOnDirtyErrorStateMatcher}\n  ]\n})"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Dynamic Column Display in CdkTable using Angular Bindings",
    "codeDescription": "Demonstrates how to dynamically set the columns displayed in a CdkTable using property binding to a variable. This allows for runtime changes to the displayed columns.",
    "codeLanguage": "html",
    "codeTokens": 72,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-11_snippet_3",
    "pageTitle": "CdkTable: Angular's Unopinionated Data Table Component",
    "codeList": [
      {
        "language": "html",
        "code": "<tr cdk-row *cdkRowDef=\"let row; columns: myDisplayedColumns\"></tr>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Creating Conditional Node Templates in Angular Material Tree",
    "codeDescription": "Example of using multiple node templates with conditional rendering based on the 'when' predicate. This allows for specialized rendering of certain node types.",
    "codeLanguage": "html",
    "codeTokens": 100,
    "codeId": "https://github.com/angular/components/blob/main/src/material/tree/tree.md#2025-04-11_snippet_6",
    "pageTitle": "Angular Material Tree Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-tree-node *matNodeDef=\"let node\" matTreeNodePadding>\n  {{node.value}}\n</mat-tree-node>\n<mat-tree-node *matNodeDef=\"let node; when: isSpecial\" matTreeNodePadding>\n  [ A special node {{node.value}} ]\n</mat-tree-node>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Using Font Awesome Icon with CSS Classes in Angular Material",
    "codeDescription": "This example shows how to use a Font Awesome icon by setting the fontSet and fontIcon inputs on the mat-icon component. The fontSet specifies the font's CSS class, while fontIcon indicates the specific icon class.",
    "codeLanguage": "html",
    "codeTokens": 73,
    "codeId": "https://github.com/angular/components/blob/main/src/material/icon/icon.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Icon Component Usage Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-icon fontSet=\"fa\" fontIcon=\"fa-home\"></mat-icon>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Angular Material Sidenav API Types and Classes",
    "codeDescription": "TypeScript definitions for Angular Material's sidenav module. Includes class definitions, interfaces, tokens, and type declarations that make up the public API for the drawer and sidenav components.",
    "codeLanguage": "typescript",
    "codeTokens": 2107,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/sidenav/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Sidenav API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { CdkScrollable } from '@angular/cdk/scrolling';\nimport { DoCheck } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i5 from '@angular/cdk/scrolling';\nimport { InjectionToken } from '@angular/core';\nimport { NumberInput } from '@angular/cdk/coercion';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n// @public\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE: InjectionToken<boolean>;\n\n// @public @deprecated\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean;\n\n// @public\nexport class MatDrawer implements AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    readonly _animationEnd: Subject<unknown>;\n    readonly _animationStarted: Subject<unknown>;\n    get autoFocus(): AutoFocusTarget | string | boolean;\n    set autoFocus(value: AutoFocusTarget | string | BooleanInput);\n    close(): Promise<MatDrawerToggleResult>;\n    readonly closedStart: Observable<void>;\n    readonly _closedStream: Observable<void>;\n    _closeViaBackdropClick(): Promise<MatDrawerToggleResult>;\n    // (undocumented)\n    _container?: MatDrawerContainer | null | undefined;\n    _content: ElementRef<HTMLElement>;\n    get disableClose(): boolean;\n    set disableClose(value: BooleanInput);\n    // (undocumented)\n    _getWidth(): number;\n    get mode(): MatDrawerMode;\n    set mode(value: MatDrawerMode);\n    readonly _modeChanged: Subject<void>;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    readonly onPositionChanged: EventEmitter<void>;\n    open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult>;\n    get opened(): boolean;\n    set opened(value: BooleanInput);\n    readonly openedChange: EventEmitter<boolean>;\n    readonly openedStart: Observable<void>;\n    readonly _openedStream: Observable<void>;\n    get position(): 'start' | 'end';\n    set position(value: 'start' | 'end');\n    toggle(isOpen?: boolean, openedVia?: FocusOrigin): Promise<MatDrawerToggleResult>;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatDrawer, \"mat-drawer\", [\"matDrawer\"], { \"position\": { \"alias\": \"position\"; \"required\": false; }; \"mode\": { \"alias\": \"mode\"; \"required\": false; }; \"disableClose\": { \"alias\": \"disableClose\"; \"required\": false; }; \"autoFocus\": { \"alias\": \"autoFocus\"; \"required\": false; }; \"opened\": { \"alias\": \"opened\"; \"required\": false; }; }, { \"openedChange\": \"openedChange\"; \"_openedStream\": \"opened\"; \"openedStart\": \"openedStart\"; \"_closedStream\": \"closed\"; \"closedStart\": \"closedStart\"; \"onPositionChanged\": \"positionChanged\"; }, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDrawer, never>;\n}\n\n// @public @deprecated\nexport const matDrawerAnimations: {\n    readonly transformDrawer: any;\n};\n\n// @public\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n    constructor(...args: unknown[]);\n    _allDrawers: QueryList<MatDrawer>;\n    get autosize(): boolean;\n    set autosize(value: BooleanInput);\n    readonly backdropClick: EventEmitter<void>;\n    // (undocumented)\n    _backdropOverride: boolean | null;\n    close(): void;\n    // (undocumented)\n    _closeModalDrawersViaBackdrop(): void;\n    // (undocumented)\n    _content: MatDrawerContent;\n    // (undocumented)\n    readonly _contentMarginChanges: Subject<{\n        left: number | null;\n        right: number | null;\n    }>;\n    _contentMargins: {\n        left: number | null;\n        right: number | null;\n    };\n    _drawers: QueryList<MatDrawer>;\n    get end(): MatDrawer | null;\n    get hasBackdrop(): boolean;\n    set hasBackdrop(value: BooleanInput);\n    // (undocumented)\n    _isShowingBackdrop(): boolean;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngDoCheck(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    _onBackdropClicked(): void;\n    open(): void;\n    get scrollable(): CdkScrollable;\n    get start(): MatDrawer | null;\n    // (undocumented)\n    _transitionsEnabled: boolean;\n    updateContentMargins(): void;\n    // (undocumented)\n    _userContent: MatDrawerContent;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatDrawerContainer, \"mat-drawer-container\", [\"matDrawerContainer\"], { \"autosize\": { \"alias\": \"autosize\"; \"required\": false; }; \"hasBackdrop\": { \"alias\": \"hasBackdrop\"; \"required\": false; }; }, { \"backdropClick\": \"backdropClick\"; }, [\"_content\", \"_allDrawers\"], [\"mat-drawer\", \"mat-drawer-content\", \"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDrawerContainer, never>;\n}\n\n// @public (undocumented)\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    _container: MatDrawerContainer;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    protected _shouldBeHidden(): boolean;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatDrawerContent, \"mat-drawer-content\", never, {}, {}, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDrawerContent, never>;\n}\n\n// @public\nexport type MatDrawerMode = 'over' | 'push' | 'side';\n\n// @public\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n// @public (undocumented)\nexport class MatSidenav extends MatDrawer {\n    get fixedBottomGap(): number;\n    set fixedBottomGap(value: NumberInput);\n    get fixedInViewport(): boolean;\n    set fixedInViewport(value: BooleanInput);\n    get fixedTopGap(): number;\n    set fixedTopGap(value: NumberInput);\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatSidenav, \"mat-sidenav\", [\"matSidenav\"], { \"fixedInViewport\": { \"alias\": \"fixedInViewport\"; \"required\": false; }; \"fixedTopGap\": { \"alias\": \"fixedTopGap\"; \"required\": false; }; \"fixedBottomGap\": { \"alias\": \"fixedBottomGap\"; \"required\": false; }; }, {}, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSidenav, never>;\n}\n\n// @public (undocumented)\nexport class MatSidenavContainer extends MatDrawerContainer {\n    // (undocumented)\n    _allDrawers: QueryList<MatSidenav>;\n    // (undocumented)\n    _content: MatSidenavContent;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatSidenavContainer, \"mat-sidenav-container\", [\"matSidenavContainer\"], {}, {}, [\"_content\", \"_allDrawers\"], [\"mat-sidenav\", \"mat-sidenav-content\", \"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSidenavContainer, never>;\n}\n\n// @public (undocumented)\nexport class MatSidenavContent extends MatDrawerContent {\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatSidenavContent, \"mat-sidenav-content\", never, {}, {}, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSidenavContent, never>;\n}\n\n// @public (undocumented)\nexport class MatSidenavModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSidenavModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatSidenavModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatSidenavModule, never, [typeof MatCommonModule, typeof i5.CdkScrollableModule, typeof MatDrawer, typeof MatDrawerContainer, typeof MatDrawerContent, typeof MatSidenav, typeof MatSidenavContainer, typeof MatSidenavContent], [typeof i5.CdkScrollableModule, typeof MatCommonModule, typeof MatDrawer, typeof MatDrawerContainer, typeof MatDrawerContent, typeof MatSidenav, typeof MatSidenavContainer, typeof MatSidenavContent]>;\n}\n\n// @public\nexport function throwMatDuplicatedDrawerError(position: string): void;\n\n// (No @packageDocumentation comment for this package)"
      }
    ],
    "relevance": 0.923
  },
  {
    "codeTitle": "Defining RenderRow Interface in TypeScript for Angular Table Components",
    "codeDescription": "This code snippet defines the RenderRow interface used to represent a row in the table rendering process. It includes the data object, its index in the data array, and the row definition.",
    "codeLanguage": "typescript",
    "codeTokens": 77,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/table/render-rows.md#2025-04-11_snippet_0",
    "pageTitle": "Rendering Data Rows in Angular Components",
    "codeList": [
      {
        "language": "typescript",
        "code": "export interface RenderRow<T> {\n  data: T;\n  dataIndex: number;\n  rowDef: CdkRowDef<T>;\n}"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Configuring RTL-Mirrored Icon in Angular Material",
    "codeDescription": "This snippet demonstrates how to use the mat-icon-rtl-mirror CSS class to mirror an icon in RTL layouts. The icon will be displayed normally in LTR layouts and mirrored in RTL layouts.",
    "codeLanguage": "html",
    "codeTokens": 72,
    "codeId": "https://github.com/angular/components/blob/main/src/material/icon/icon.md#2025-04-11_snippet_4",
    "pageTitle": "Angular Material Icon Component Usage Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-icon class=\"mat-icon-rtl-mirror\" svgIcon=\"thumb-up\"></mat-icon>"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Configuring YouTube Player API Loading with Module",
    "codeDescription": "Shows how to configure the YouTube Player API loading behavior at the module level using dependency injection. Demonstrates disabling automatic API loading.",
    "codeLanguage": "typescript",
    "codeTokens": 106,
    "codeId": "https://github.com/angular/components/blob/main/src/youtube-player/README.md#2025-04-11_snippet_1",
    "pageTitle": "Angular YouTube Player Component Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {NgModule} from '@angular/core';\nimport {YouTubePlayer, YOUTUBE_PLAYER_CONFIG} from '@angular/youtube-player';\n\n@NgModule({\n  imports: [YouTubePlayer],\n  providers: [{\n    provide: YOUTUBE_PLAYER_CONFIG,\n    useValue: {\n      loadApi: false\n    }\n  }]\n})\nexport class YourApp {}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Testing Angular Material Components With Harnesses",
    "codeDescription": "Example of testing Angular Material components using the new component harnesses approach. Demonstrates a simpler, more maintainable way to test the same select component functionality.",
    "codeLanguage": "typescript",
    "codeTokens": 108,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_22",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "it('should switch to bug report template', async () => {\n    expect(fixture.debugElement.query('bug-report-form')).toBeNull();\n    const select = await loader.getHarness(MatSelect);\n    await select.clickOptions({text: 'Bug'});\n    expect(fixture.debugElement.query('bug-report-form')).not.toBeNull();\n  });"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Defining MapDirectionsResponse Interface in TypeScript",
    "codeDescription": "Interface definition for MapDirectionsResponse that represents the response from the MapDirectionsService's route method. It contains the status of the directions request and the optional result with the directions data.",
    "codeLanguage": "typescript",
    "codeTokens": 74,
    "codeId": "https://github.com/angular/components/blob/main/src/google-maps/map-directions-renderer/README.md#2025-04-11_snippet_0",
    "pageTitle": "MapDirectionsRenderer in Angular Google Maps",
    "codeList": [
      {
        "language": "typescript",
        "code": "export interface MapDirectionsResponse {\n  status: google.maps.DirectionsStatus;\n  result?: google.maps.DirectionsResult;\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Structuring Dialog Content with Angular Material Directives",
    "codeDescription": "Shows how to use Angular Material directives to structure dialog content, including title, content area, and action buttons.",
    "codeLanguage": "html",
    "codeTokens": 128,
    "codeId": "https://github.com/angular/components/blob/main/src/material/dialog/dialog.md#2025-04-11_snippet_4",
    "pageTitle": "Angular Material Dialog Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<h2 mat-dialog-title>Delete all elements?</h2>\n<mat-dialog-content>This will delete all elements that are currently on this page and cannot be undone.</mat-dialog-content>\n<mat-dialog-actions>\n  <button matButton mat-dialog-close>Cancel</button>\n  <!-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -->\n  <button matButton [mat-dialog-close]=\"true\">Delete</button>\n</mat-dialog-actions>"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "MatTableModule Declaration in TypeScript",
    "codeDescription": "Angular module definition for the Material Table that imports and exports all the necessary components and directives for creating tables in Angular Material.",
    "codeLanguage": "typescript",
    "codeTokens": 311,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/table/index.api.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material Table API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class MatTableModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTableModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatTableModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatTableModule, never, [typeof MatCommonModule, typeof i2.CdkTableModule, typeof MatTable, typeof MatRecycleRows, typeof MatHeaderCellDef, typeof MatHeaderRowDef, typeof MatColumnDef, typeof MatCellDef, typeof MatRowDef, typeof MatFooterCellDef, typeof MatFooterRowDef, typeof MatHeaderCell, typeof MatCell, typeof MatFooterCell, typeof MatHeaderRow, typeof MatRow, typeof MatFooterRow, typeof MatNoDataRow, typeof MatTextColumn], [typeof MatCommonModule, typeof MatTable, typeof MatRecycleRows, typeof MatHeaderCellDef, typeof MatHeaderRowDef, typeof MatColumnDef, typeof MatCellDef, typeof MatRowDef, typeof MatFooterCellDef, typeof MatFooterRowDef, typeof MatHeaderCell, typeof MatCell, typeof MatFooterCell, typeof MatHeaderRow, typeof MatRow, typeof MatFooterRow, typeof MatNoDataRow, typeof MatTextColumn]>;\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Type Definitions for Angular Material Datepicker Testing",
    "codeDescription": "This code snippet defines the TypeScript interfaces, enums, and classes for testing Angular Material datepicker components. It includes harnesses for datepicker inputs, calendars, calendar cells, date range inputs, and datepicker toggles, along with their filter interfaces and necessary imports from '@angular/cdk/testing'.",
    "codeLanguage": "typescript",
    "codeTokens": 1013,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/datepicker/testing/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Datepicker Testing API",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport interface CalendarCellHarnessFilters extends BaseHarnessFilters {\n    active?: boolean;\n    disabled?: boolean;\n    inComparisonRange?: boolean;\n    inPreviewRange?: boolean;\n    inRange?: boolean;\n    selected?: boolean;\n    text?: string | RegExp;\n    today?: boolean;\n}\n\n// @public\nexport interface CalendarHarnessFilters extends BaseHarnessFilters {\n}\n\n// @public\nexport enum CalendarView {\n    // (undocumented)\n    MONTH = 0,\n    // (undocumented)\n    MULTI_YEAR = 2,\n    // (undocumented)\n    YEAR = 1\n}\n\n// @public\nexport interface DatepickerInputHarnessFilters extends BaseHarnessFilters {\n    placeholder?: string | RegExp;\n    value?: string | RegExp;\n}\n\n// @public\nexport interface DatepickerToggleHarnessFilters extends BaseHarnessFilters {\n}\n\n// @public\nexport interface DateRangeInputHarnessFilters extends BaseHarnessFilters {\n    value?: string | RegExp;\n}\n\n// @public\nexport class MatCalendarCellHarness extends ComponentHarness {\n    blur(): Promise<void>;\n    focus(): Promise<void>;\n    getAriaLabel(): Promise<string>;\n    getText(): Promise<string>;\n    // (undocumented)\n    static hostSelector: string;\n    hover(): Promise<void>;\n    isActive(): Promise<boolean>;\n    isComparisonRangeEnd(): Promise<boolean>;\n    isComparisonRangeStart(): Promise<boolean>;\n    isDisabled(): Promise<boolean>;\n    isInComparisonRange(): Promise<boolean>;\n    isInPreviewRange(): Promise<boolean>;\n    isInRange(): Promise<boolean>;\n    isPreviewRangeEnd(): Promise<boolean>;\n    isPreviewRangeStart(): Promise<boolean>;\n    isRangeEnd(): Promise<boolean>;\n    isRangeStart(): Promise<boolean>;\n    isSelected(): Promise<boolean>;\n    isToday(): Promise<boolean>;\n    mouseAway(): Promise<void>;\n    select(): Promise<void>;\n    static with(options?: CalendarCellHarnessFilters): HarnessPredicate<MatCalendarCellHarness>;\n}\n\n// @public\nexport class MatCalendarHarness extends ComponentHarness {\n    changeView(): Promise<void>;\n    getCells(filter?: CalendarCellHarnessFilters): Promise<MatCalendarCellHarness[]>;\n    getCurrentView(): Promise<CalendarView>;\n    getCurrentViewLabel(): Promise<string>;\n    // (undocumented)\n    static hostSelector: string;\n    next(): Promise<void>;\n    previous(): Promise<void>;\n    selectCell(filter?: CalendarCellHarnessFilters): Promise<void>;\n    static with(options?: CalendarHarnessFilters): HarnessPredicate<MatCalendarHarness>;\n}\n\n// @public\nexport class MatDatepickerInputHarness extends MatDatepickerInputHarnessBase implements DatepickerTrigger {\n    closeCalendar(): Promise<void>;\n    getCalendar(filter?: CalendarHarnessFilters): Promise<MatCalendarHarness>;\n    hasCalendar(): Promise<boolean>;\n    // (undocumented)\n    static hostSelector: string;\n    isCalendarOpen(): Promise<boolean>;\n    openCalendar(): Promise<void>;\n    static with(options?: DatepickerInputHarnessFilters): HarnessPredicate<MatDatepickerInputHarness>;\n}\n\n// @public\nexport class MatDatepickerToggleHarness extends DatepickerTriggerHarnessBase {\n    // (undocumented)\n    static hostSelector: string;\n    isCalendarOpen(): Promise<boolean>;\n    isDisabled(): Promise<boolean>;\n    // (undocumented)\n    protected _openCalendar(): Promise<void>;\n    static with(options?: DatepickerToggleHarnessFilters): HarnessPredicate<MatDatepickerToggleHarness>;\n}\n\n// @public\nexport class MatDateRangeInputHarness extends DatepickerTriggerHarnessBase {\n    getEndInput(): Promise<MatEndDateHarness>;\n    getSeparator(): Promise<string>;\n    getStartInput(): Promise<MatStartDateHarness>;\n    getValue(): Promise<string>;\n    // (undocumented)\n    static hostSelector: string;\n    isCalendarOpen(): Promise<boolean>;\n    isDisabled(): Promise<boolean>;\n    isRequired(): Promise<boolean>;\n    // (undocumented)\n    protected _openCalendar(): Promise<void>;\n    static with(options?: DateRangeInputHarnessFilters): HarnessPredicate<MatDateRangeInputHarness>;\n}\n\n// @public\nexport class MatEndDateHarness extends MatDatepickerInputHarnessBase {\n    // (undocumented)\n    static hostSelector: string;\n    static with(options?: DatepickerInputHarnessFilters): HarnessPredicate<MatEndDateHarness>;\n}\n\n// @public\nexport class MatStartDateHarness extends MatDatepickerInputHarnessBase {\n    // (undocumented)\n    static hostSelector: string;\n    static with(options?: DatepickerInputHarnessFilters): HarnessPredicate<MatStartDateHarness>;\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Using cdkDropListGroup to Connect Multiple Drop Lists in Angular",
    "codeDescription": "A technique to automatically connect an unknown number of drop lists using the cdkDropListGroup directive. Any cdkDropList added under this group will be automatically connected to all other lists in the group.",
    "codeLanguage": "html",
    "codeTokens": 99,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-11_snippet_1",
    "pageTitle": "Angular CDK Drag and Drop Module Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div cdkDropListGroup>\n  <!-- All lists in here will be connected. -->\n  @for (list of lists; track list) {\n    <div cdkDropList></div>\n  }\n</div>"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Defining CdkTable Component in TypeScript",
    "codeDescription": "Defines the main table component that implements various lifecycle interfaces. This is the core component that manages data display, row rendering, and column definitions.",
    "codeLanguage": "TypeScript",
    "codeTokens": 1017,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-11_snippet_5",
    "pageTitle": "Angular CDK Table API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export class CdkTable<T> implements AfterContentInit, AfterContentChecked, CollectionViewer, OnDestroy, OnInit {\n    constructor(...args: unknown[]);\n    addColumnDef(columnDef: CdkColumnDef): void;\n    addFooterRowDef(footerRowDef: CdkFooterRowDef): void;\n    addHeaderRowDef(headerRowDef: CdkHeaderRowDef): void;\n    addRowDef(rowDef: CdkRowDef<T>): void;\n    // (undocumented)\n    protected readonly _changeDetectorRef: ChangeDetectorRef;\n    // (undocumented)\n    protected readonly _coalescedStyleScheduler: _CoalescedStyleScheduler;\n    readonly contentChanged: EventEmitter<void>;\n    _contentColumnDefs: QueryList<CdkColumnDef>;\n    _contentFooterRowDefs: QueryList<CdkFooterRowDef>;\n    _contentHeaderRowDefs: QueryList<CdkHeaderRowDef>;\n    _contentRowDefs: QueryList<CdkRowDef<T>>;\n    protected _data: readonly T[] | undefined;\n    get dataSource(): CdkTableDataSourceInput<T>;\n    set dataSource(dataSource: CdkTableDataSourceInput<T>);\n    // (undocumented)\n    protected readonly _differs: IterableDiffers;\n    // (undocumented)\n    protected readonly _dir: Directionality | null;\n    // (undocumented)\n    protected readonly _elementRef: ElementRef<any>;\n    get fixedLayout(): boolean;\n    set fixedLayout(value: boolean);\n    // (undocumented)\n    _footerRowOutlet: FooterRowOutlet;\n    _getCellRole(): string | null;\n    _getRenderedRows(rowOutlet: RowOutlet): HTMLElement[];\n    _getRowDefs(data: T, dataIndex: number): CdkRowDef<T>[];\n    // (undocumented)\n    _headerRowOutlet: HeaderRowOutlet;\n    protected _isNativeHtmlTable: boolean;\n    protected _isServer: boolean;\n    get multiTemplateDataRows(): boolean;\n    set multiTemplateDataRows(value: boolean);\n    // (undocumented)\n    _multiTemplateDataRows: boolean;\n    protected needsPositionStickyOnElement: boolean;\n    // (undocumented)\n    static ngAcceptInputType_fixedLayout: unknown;\n    // (undocumented)\n    static ngAcceptInputType_multiTemplateDataRows: unknown;\n    // (undocumented)\n    ngAfterContentChecked(): void;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    ngOnInit(): void;\n    _noDataRow: CdkNoDataRow;\n    // (undocumented)\n    _noDataRowOutlet: NoDataRowOutlet;\n    _outletAssigned(): void;\n    removeColumnDef(columnDef: CdkColumnDef): void;\n    removeFooterRowDef(footerRowDef: CdkFooterRowDef): void;\n    removeHeaderRowDef(headerRowDef: CdkHeaderRowDef): void;\n    removeRowDef(rowDef: CdkRowDef<T>): void;\n    renderRows(): void;\n    // (undocumented)\n    _rowOutlet: DataRowOutlet;\n    setNoDataRow(noDataRow: CdkNoDataRow | null): void;\n    protected stickyCssClass: string;\n    // (undocumented)\n    protected readonly _stickyPositioningListener: StickyPositioningListener;\n    get trackBy(): TrackByFunction<T>;\n    set trackBy(fn: TrackByFunction<T>);\n    updateStickyColumnStyles(): void;\n    updateStickyFooterRowStyles(): void;\n    updateStickyHeaderRowStyles(): void;\n    readonly viewChange: BehaviorSubject<{\n        start: number;\n        end: number;\n    }>;\n    // (undocumented)\n    protected readonly _viewRepeater: _ViewRepeater<T, RenderRow<T>, RowContext<T>>;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<CdkTable<any>, \"cdk-table, table[cdk-table]\", [\"cdkTable\"], { \"trackBy\": { \"alias\": \"trackBy\"; \"required\": false; }; \"dataSource\": { \"alias\": \"dataSource\"; \"required\": false; }; \"multiTemplateDataRows\": { \"alias\": \"multiTemplateDataRows\"; \"required\": false; }; \"fixedLayout\": { \"alias\": \"fixedLayout\"; \"required\": false; }; }, { \"contentChanged\": \"contentChanged\"; }, [\"_noDataRow\", \"_contentColumnDefs\", \"_contentRowDefs\", \"_contentHeaderRowDefs\", \"_contentFooterRowDefs\"], [\"caption\", \"colgroup, col\", \"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkTable<any>, never>;\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Testing Angular Material Component With Harnesses",
    "codeDescription": "This snippet demonstrates testing the same issue-report-selector component using Angular Material component harnesses. The test uses MatSelectHarness to interact with the select component, making the code more readable and less dependent on implementation details.",
    "codeLanguage": "typescript",
    "codeTokens": 223,
    "codeId": "https://github.com/angular/components/blob/main/guides/using-component-harnesses.md#2025-04-11_snippet_6",
    "pageTitle": "Angular Material Component Harnesses Testing Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "describe('issue-report-selector', () => {\n  let fixture: ComponentFixture<IssueReportSelector>;\n  let loader: HarnessLoader;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [IssueReportSelectorModule],\n      declarations: [IssueReportSelector],\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(IssueReportSelector);\n    fixture.detectChanges();\n    loader = TestbedHarnessEnvironment.loader(fixture);\n  });\n\n  it('should switch to bug report template', async () => {\n    expect(fixture.debugElement.query('bug-report-form')).toBeNull();\n    const select = await loader.getHarness(MatSelectHarness);\n    await select.open();\n    const bugOption = await select.getOption({text: 'Bug'});\n    await bugOption.click();\n    expect(fixture.debugElement.query('bug-report-form')).not.toBeNull();\n  });\n});"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Binding Aria Label in Angular Material Radio Button",
    "codeDescription": "Demonstrates how to bind an aria-label to a mat-radio-button for dynamic accessibility labeling. This example shows the correct way to bind aria properties without using the attr. prefix.",
    "codeLanguage": "html",
    "codeTokens": 65,
    "codeId": "https://github.com/angular/components/blob/main/src/material/radio/radio.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Radio Button Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-radio-button [aria-label]=\"getMultipleChoiceAnswer()\">\n</mat-radio-button>"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Reducing Sticky Column Style Updates in Angular Material Table",
    "codeDescription": "Performance improvement to reduce calls to updateStickyColumnStyles in the Angular Material table component.",
    "codeLanguage": "TypeScript",
    "codeTokens": 75,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_10",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "**table:** Reduce calls to updateStickyColumnStyles ([#19739](https://github.com/angular/components/issues/19739)) ([f484e96](https://github.com/angular/components/commit/f484e96))"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Rendering MapHeatmapLayer in HTML Template",
    "codeDescription": "This HTML template shows how to implement a Google Map with a heatmap layer. The template creates a map with specified height, width, center position, and zoom level, then adds a MapHeatmapLayer component that binds to the data and options defined in the TypeScript component.",
    "codeLanguage": "html",
    "codeTokens": 121,
    "codeId": "https://github.com/angular/components/blob/main/src/google-maps/map-heatmap-layer/README.md#2025-04-11_snippet_1",
    "pageTitle": "MapHeatmapLayer for Angular Google Maps",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- google-map-demo.component.html -->\n<google-map height=\"400px\" width=\"750px\" [center]=\"center\" [zoom]=\"zoom\">\n  <map-heatmap-layer [data]=\"heatmapData\" [options]=\"heatmapOptions\" />\n</google-map>"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Implementing ListKeyManager Class for Keyboard Navigation in Angular",
    "codeDescription": "A class that manages keyboard navigation for lists, supporting features like typeahead, vertical/horizontal navigation, and wrapping.",
    "codeLanguage": "typescript",
    "codeTokens": 324,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/a11y/index.api.md#2025-04-11_snippet_10",
    "pageTitle": "Angular CDK A11y API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class ListKeyManager<T extends ListKeyManagerOption> {\n    constructor(items: QueryList<T> | T[] | readonly T[]);\n    constructor(items: Signal<T[]> | Signal<readonly T[]>, injector: Injector);\n    get activeItem(): T | null;\n    get activeItemIndex(): number | null;\n    cancelTypeahead(): this;\n    readonly change: Subject<number>;\n    destroy(): void;\n    isTyping(): boolean;\n    onKeydown(event: KeyboardEvent): void;\n    setActiveItem(index: number): void;\n    setActiveItem(item: T): void;\n    setFirstItemActive(): void;\n    setLastItemActive(): void;\n    setNextItemActive(): void;\n    setPreviousItemActive(): void;\n    skipPredicate(predicate: (item: T) => boolean): this;\n    readonly tabOut: Subject<void>;\n    updateActiveItem(index: number): void;\n    updateActiveItem(item: T): void;\n    withAllowedModifierKeys(keys: ListKeyManagerModifierKey[]): this;\n    withHomeAndEnd(enabled?: boolean): this;\n    withHorizontalOrientation(direction: 'ltr' | 'rtl' | null): this;\n    withPageUpDown(enabled?: boolean, delta?: number): this;\n    withTypeAhead(debounceInterval?: number): this;\n    withVerticalOrientation(enabled?: boolean): this;\n    withWrap(shouldWrap?: boolean): this;\n}"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Defining MatChipOption Component in TypeScript",
    "codeDescription": "This snippet defines the MatChipOption component, which extends MatChip and implements OnInit. It includes properties and methods for handling chip selection, aria attributes, and selection changes.",
    "codeLanguage": "TypeScript",
    "codeTokens": 389,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/chips/index.api.md#2025-04-11_snippet_5",
    "pageTitle": "Angular Material Chips API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export class MatChipOption extends MatChip implements OnInit {\n    get ariaSelected(): string | null;\n    protected basicChipAttrName: string;\n    _chipListHideSingleSelectionIndicator: boolean;\n    _chipListMultiple: boolean;\n    chipListSelectable: boolean;\n    deselect(): void;\n    _handlePrimaryActionInteraction(): void;\n    _hasLeadingGraphic(): boolean;\n    static ngAcceptInputType_selectable: unknown;\n    static ngAcceptInputType_selected: unknown;\n    ngOnInit(): void;\n    select(): void;\n    get selectable(): boolean;\n    set selectable(value: boolean);\n    protected _selectable: boolean;\n    get selected(): boolean;\n    set selected(value: boolean);\n    readonly selectionChange: EventEmitter<MatChipSelectionChange>;\n    selectViaInteraction(): void;\n    _setSelectedState(isSelected: boolean, isUserInput: boolean, emitEvent: boolean): void;\n    toggleSelected(isUserInput?: boolean): boolean;\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatChipOption, \"mat-basic-chip-option, [mat-basic-chip-option], mat-chip-option, [mat-chip-option]\", never, { \"selectable\": { \"alias\": \"selectable\"; \"required\": false; }; \"selected\": { \"alias\": \"selected\"; \"required\": false; }; }, { \"selectionChange\": \"selectionChange\"; }, never, [\"mat-chip-avatar, [matChipAvatar]\", \"*\", \"mat-chip-trailing-icon,[matChipRemove],[matChipTrailingIcon]\"], true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatChipOption, never>;\n}"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Updating Ripple Configuration at Runtime in a Component",
    "codeDescription": "Shows how to inject and utilize the ripple configuration service to dynamically update global ripple settings from within a component. This example demonstrates disabling ripples at runtime.",
    "codeLanguage": "typescript",
    "codeTokens": 84,
    "codeId": "https://github.com/angular/components/blob/main/src/material/core/ripple/ripple.md#2025-04-11_snippet_9",
    "pageTitle": "Angular Material Ripple Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component(...)\nexport class MyComponent {\n  constructor(private _appRippleOptions: AppGlobalRippleOptions) {}\n\n  disableRipples() {\n    this._appRippleOptions.disabled = true;\n  }\n}"
      }
    ],
    "relevance": 0.917
  },
  {
    "codeTitle": "Defining MatOption and MatOptgroup Components",
    "codeDescription": "This code defines the MatOption and MatOptgroup components used for creating selectable options and option groups in Angular Material.",
    "codeLanguage": "typescript",
    "codeTokens": 503,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/core/index.api.md#2025-04-11_snippet_4",
    "pageTitle": "Angular Material Core API Report",
    "codeList": [
      {
        "language": "typescript",
        "code": "// @public\nexport class MatOptgroup {\n    constructor(...args: unknown[]);\n    disabled: boolean;\n    _inert: boolean;\n    label: string;\n    _labelId: string;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatOptgroup, \"mat-optgroup\", [\"matOptgroup\"], { \"label\": { \"alias\": \"label\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; }, {}, never, [\"*\", \"mat-option, ng-container\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatOptgroup, never>;\n}\n\n// @public\nexport class MatOption<T = any> implements FocusableOption, AfterViewChecked, OnDestroy {\n    constructor(...args: unknown[]);\n    get active(): boolean;\n    // (undocumented)\n    _changeDetectorRef: ChangeDetectorRef;\n    deselect(emitEvent?: boolean): void;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    get disableRipple(): boolean;\n    focus(_origin?: FocusOrigin, options?: FocusOptions): void;\n    _getHostElement(): HTMLElement;\n    getLabel(): string;\n    _getTabIndex(): string;\n    // (undocumented)\n    group: MatOptgroup | null;\n    _handleKeydown(event: KeyboardEvent): void;\n    get hideSingleSelectionIndicator(): boolean;\n    id: string;\n    get multiple(): boolean | null | undefined;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    ngAfterViewChecked(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    readonly onSelectionChange: EventEmitter<MatOptionSelectionChange<T>>;\n    select(emitEvent?: boolean): void;\n    get selected(): boolean;\n    _selectViaInteraction(): void;\n    setActiveStyles(): void;\n    setInactiveStyles(): void;\n    readonly _stateChanges: Subject<void>;\n    _text: ElementRef<HTMLElement> | undefined;\n    value: T;\n    get viewValue(): string;\n    // (undocumented)\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Adding RequiredTrue Validator for Material Checkbox",
    "codeDescription": "Implements a RequiredTrue validator for md-checkbox to ensure the checkbox is checked when required.",
    "codeLanguage": "TypeScript",
    "codeTokens": 73,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_118",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "Add RequiredTrue validator for md-checkbox ([#6006](https://github.com/angular/material2/issues/6006)) ([59319d0](https://github.com/angular/material2/commit/59319d0))"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Using Card Title Element in Angular Material",
    "codeDescription": "The mat-card-title element is used within a card header to display the title. It provides appropriate styling for a main heading within the card.",
    "codeLanguage": "html",
    "codeTokens": 44,
    "codeId": "https://github.com/angular/components/blob/main/src/material/card/card.md#2025-04-11_snippet_6",
    "pageTitle": "Angular Material Card Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-card-title>"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Using cdkTrapFocus Directive in HTML",
    "codeDescription": "Demonstrates how to use the cdkTrapFocus directive to trap focus within an element for accessibility purposes.",
    "codeLanguage": "html",
    "codeTokens": 65,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/a11y/a11y.md#2025-04-11_snippet_4",
    "pageTitle": "Angular Components A11y Package Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"my-inner-dialog-content\" cdkTrapFocus>\n  <!-- Tab and Shift + Tab will not leave this element. -->\n</div>"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Implementing Accessible Button Toggle with Icon in Angular Material",
    "codeDescription": "Example showing how to implement an accessible button toggle with an icon, demonstrating proper aria-label binding for dynamic accessibility labels. The toggle controls alert notifications with appropriate screen reader support.",
    "codeLanguage": "html",
    "codeTokens": 82,
    "codeId": "https://github.com/angular/components/blob/main/src/material/button-toggle/button-toggle.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Button Toggle Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-button-toggle [aria-label]=\"alertsEnabled ? 'Disable alerts' : 'Enable alerts'\">\n  <mat-icon>notifications</mat-icon>\n</mat-button-toggle>"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Defining Angular Material Badge Components and Types",
    "codeDescription": "Contains the core MatBadge directive implementation with position, size, and styling controls, along with the NgModule declaration and supporting type definitions. The badge component supports customization of color, position, size, content and accessibility features.",
    "codeLanguage": "typescript",
    "codeTokens": 633,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/badge/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Badge API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i1_2 from '@angular/cdk/bidi';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\n\n// @public\nexport class MatBadge implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    get color(): ThemePalette;\n    set color(value: ThemePalette);\n    get content(): string | number | undefined | null;\n    set content(newContent: string | number | undefined | null);\n    get description(): string;\n    set description(newDescription: string);\n    disabled: boolean;\n    getBadgeElement(): HTMLElement | undefined;\n    hidden: boolean;\n    isAbove(): boolean;\n    isAfter(): boolean;\n    static ngAcceptInputType_disabled: unknown;\n    static ngAcceptInputType_hidden: unknown;\n    static ngAcceptInputType_overlap: unknown;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    overlap: boolean;\n    position: MatBadgePosition;\n    size: MatBadgeSize;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatBadge, \"[matBadge]\", never, { \"color\": { \"alias\": \"matBadgeColor\"; \"required\": false; }; \"overlap\": { \"alias\": \"matBadgeOverlap\"; \"required\": false; }; \"disabled\": { \"alias\": \"matBadgeDisabled\"; \"required\": false; }; \"position\": { \"alias\": \"matBadgePosition\"; \"required\": false; }; \"content\": { \"alias\": \"matBadge\"; \"required\": false; }; \"description\": { \"alias\": \"matBadgeDescription\"; \"required\": false; }; \"size\": { \"alias\": \"matBadgeSize\"; \"required\": false; }; \"hidden\": { \"alias\": \"matBadgeHidden\"; \"required\": false; }; }, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatBadge, never>;\n}\n\nexport class MatBadgeModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatBadgeModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatBadgeModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatBadgeModule, never, [typeof i1.A11yModule, typeof MatCommonModule, typeof MatBadge, typeof _MatBadgeStyleLoader], [typeof MatBadge, typeof MatCommonModule]>;\n}\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after' | 'before' | 'after' | 'above' | 'below';\n\nexport type MatBadgeSize = 'small' | 'medium' | 'large';"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Defining the CdkVirtualForOf Directive",
    "codeDescription": "Implements the core directive for virtual scrolling in Angular CDK. It handles rendering of items in a virtual scroll viewport and provides context with indexes and position indicators for each item.",
    "codeLanguage": "typescript",
    "codeTokens": 530,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/scrolling/index.api.md#2025-04-11_snippet_3",
    "pageTitle": "Angular CDK Scrolling API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// @public\nexport class CdkVirtualForOf<T> implements CdkVirtualScrollRepeater<T>, CollectionViewer, DoCheck, OnDestroy {\n    constructor(...args: unknown[]);\n    get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined;\n    set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined);\n    // (undocumented)\n    _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined;\n    set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>);\n    get cdkVirtualForTemplateCacheSize(): number;\n    set cdkVirtualForTemplateCacheSize(size: NumberInput);\n    get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined;\n    set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined);\n    readonly dataStream: Observable<readonly T[]>;\n    measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number;\n    // (undocumented)\n    ngDoCheck(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    static ngTemplateContextGuard<T>(directive: CdkVirtualForOf<T>, context: unknown): context is CdkVirtualForOfContext<T>;\n    readonly viewChange: Subject<ListRange>;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkVirtualForOf<any>, \"[cdkVirtualFor][cdkVirtualForOf]\", never, { \"cdkVirtualForOf\": { \"alias\": \"cdkVirtualForOf\"; \"required\": false; }; \"cdkVirtualForTrackBy\": { \"alias\": \"cdkVirtualForTrackBy\"; \"required\": false; }; \"cdkVirtualForTemplate\": { \"alias\": \"cdkVirtualForTemplate\"; \"required\": false; }; \"cdkVirtualForTemplateCacheSize\": { \"alias\": \"cdkVirtualForTemplateCacheSize\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkVirtualForOf<any>, never>;\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Implementing MapKmlLayer in Angular Component",
    "codeDescription": "This TypeScript code defines an Angular component that uses GoogleMap and MapKmlLayer. It sets up a map with a center point, zoom level, and a KML layer URL.",
    "codeLanguage": "typescript",
    "codeTokens": 175,
    "codeId": "https://github.com/angular/components/blob/main/src/google-maps/map-kml-layer/README.md#2025-04-11_snippet_0",
    "pageTitle": "MapKmlLayer Component for Google Maps in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "// google-maps-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapKmlLayer} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapKmlLayer],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n\n  kmlUrl = 'https://developers.google.com/maps/documentation/javascript/examples/kml/westcampus.kml';\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Creating a Dialog Component with DialogRef Injection",
    "codeDescription": "Shows how to create a dialog component that injects DialogRef to close itself with a result value.",
    "codeLanguage": "ts",
    "codeTokens": 70,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.md#2025-04-11_snippet_4",
    "pageTitle": "Angular CDK Dialog Service Documentation",
    "codeList": [
      {
        "language": "ts",
        "code": "@Component({/* ... */})\nexport class YourDialog {\n  constructor(public dialogRef: DialogRef<string>) {}\n\n  closeDialog() {\n    this.dialogRef.close('Pizza!');\n  }\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Defining Angular Material Slide Toggle API in TypeScript",
    "codeDescription": "This code snippet defines the API for the Angular Material Slide Toggle component. It includes imports, constants, classes, and interfaces necessary for implementing and using the slide toggle functionality in Angular applications.",
    "codeLanguage": "typescript",
    "codeTokens": 1131,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/slide-toggle/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Slide Toggle API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AbstractControl } from '@angular/forms';\nimport { AfterContentInit } from '@angular/core';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { InjectionToken } from '@angular/core';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { ValidationErrors } from '@angular/forms';\nimport { Validator } from '@angular/forms';\n\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS: InjectionToken<MatSlideToggleDefaultOptions>;\n\nexport class MatSlideToggle implements OnDestroy, AfterContentInit, OnChanges, ControlValueAccessor, Validator {\n    constructor(...args: unknown[]);\n    ariaDescribedby: string;\n    ariaLabel: string | null;\n    ariaLabelledby: string | null;\n    get buttonId(): string;\n    readonly change: EventEmitter<MatSlideToggleChange>;\n    protected _changeDetectorRef: ChangeDetectorRef;\n    get checked(): boolean;\n    set checked(value: boolean);\n    color: string | undefined;\n    defaults: MatSlideToggleDefaultOptions;\n    disabled: boolean;\n    disabledInteractive: boolean;\n    disableRipple: boolean;\n    protected _emitChangeEvent(): void;\n    focus(): void;\n    _focused: boolean;\n    protected _focusMonitor: FocusMonitor;\n    _getAriaLabelledBy(): string | null;\n    _handleClick(): void;\n    hideIcon: boolean;\n    id: string;\n    get inputId(): string;\n    _labelId: string;\n    labelPosition: 'before' | 'after';\n    name: string | null;\n    static ngAcceptInputType_checked: unknown;\n    static ngAcceptInputType_disabled: unknown;\n    static ngAcceptInputType_disabledInteractive: unknown;\n    static ngAcceptInputType_disableRipple: unknown;\n    static ngAcceptInputType_hideIcon: unknown;\n    static ngAcceptInputType_required: unknown;\n    static ngAcceptInputType_tabIndex: unknown;\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    _noopAnimations: boolean;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    registerOnValidatorChange(fn: () => void): void;\n    required: boolean;\n    setDisabledState(isDisabled: boolean): void;\n    _switchElement: ElementRef<HTMLElement>;\n    tabIndex: number;\n    toggle(): void;\n    readonly toggleChange: EventEmitter<void>;\n    validate(control: AbstractControl<boolean>): ValidationErrors | null;\n    writeValue(value: any): void;\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatSlideToggle, \"mat-slide-toggle\", [\"matSlideToggle\"], { \"name\": { \"alias\": \"name\"; \"required\": false; }; \"id\": { \"alias\": \"id\"; \"required\": false; }; \"labelPosition\": { \"alias\": \"labelPosition\"; \"required\": false; }; \"ariaLabel\": { \"alias\": \"aria-label\"; \"required\": false; }; \"ariaLabelledby\": { \"alias\": \"aria-labelledby\"; \"required\": false; }; \"ariaDescribedby\": { \"alias\": \"aria-describedby\"; \"required\": false; }; \"required\": { \"alias\": \"required\"; \"required\": false; }; \"color\": { \"alias\": \"color\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; \"tabIndex\": { \"alias\": \"tabIndex\"; \"required\": false; }; \"checked\": { \"alias\": \"checked\"; \"required\": false; }; \"hideIcon\": { \"alias\": \"hideIcon\"; \"required\": false; }; \"disabledInteractive\": { \"alias\": \"disabledInteractive\"; \"required\": false; }; }, { \"change\": \"change\"; \"toggleChange\": \"toggleChange\"; }, never, [\"*\"], true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSlideToggle, never>;\n}\n\nexport class MatSlideToggleChange {\n    constructor(\n    source: MatSlideToggle,\n    checked: boolean);\n    checked: boolean;\n    source: MatSlideToggle;\n}\n\nexport interface MatSlideToggleDefaultOptions {\n    color?: ThemePalette;\n    disabledInteractive?: boolean;\n    disableToggleValue?: boolean;\n    hideIcon?: boolean;\n}\n\nexport class MatSlideToggleModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatSlideToggleModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatSlideToggleModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatSlideToggleModule, never, [typeof MatSlideToggle, typeof MatCommonModule], [typeof MatSlideToggle, typeof MatCommonModule]>;\n}"
      }
    ],
    "relevance": 0.913
  },
  {
    "codeTitle": "Fixing Datepicker Calendar Popup Disabling",
    "codeDescription": "Allows disabling the calendar popup in the datepicker component, providing more control over the datepicker behavior.",
    "codeLanguage": "TypeScript",
    "codeTokens": 73,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_119",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "allow disabling calendar popup ([#5305](https://github.com/angular/material2/issues/5305)) ([2294ea2](https://github.com/angular/material2/commit/2294ea2))"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Registering a Ripple Configuration Service in an Angular Module",
    "codeDescription": "Demonstrates how to provide the ripple configuration service to the MAT_RIPPLE_GLOBAL_OPTIONS token in an Angular module. This makes the service available for dependency injection.",
    "codeLanguage": "typescript",
    "codeTokens": 78,
    "codeId": "https://github.com/angular/components/blob/main/src/material/core/ripple/ripple.md#2025-04-11_snippet_8",
    "pageTitle": "Angular Material Ripple Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@NgModule({\n  providers: [\n    {provide: MAT_RIPPLE_GLOBAL_OPTIONS, useExisting: AppGlobalRippleOptions},\n  ]\n})\nexport class MyModule {...}"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Horizontal Virtual Scrolling Implementation",
    "codeDescription": "Shows how to configure virtual scrolling for horizontal orientation with appropriate CSS styling for the content wrapper.",
    "codeLanguage": "typescript",
    "codeTokens": 75,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/scrolling/scrolling.md#2025-04-11_snippet_4",
    "pageTitle": "Angular CDK Scrolling Package Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<cdk-virtual-scroll-viewport orientation=\"horizontal\" itemSize=\"50\">\n  <div *cdkVirtualFor=\"let item of items\">{{item}}</div>\n</cdk-virtual-scroll-viewport>"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Removing Internal Type Export from Overlay",
    "codeDescription": "Stops exporting an internal type from the overlay module to maintain API cleanliness.",
    "codeLanguage": "TypeScript",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_164",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "([#4390](https://github.com/angular/material2/issues/4390)) ([136f7ff](https://github.com/angular/material2/commit/136f7ff))"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Setting Badge Size in Angular Material",
    "codeDescription": "Illustrates how to change the badge size using the matBadgeSize attribute with values 'small', 'medium', or 'large'. Small badges do not display their label text, which is useful for indicating unread notifications without showing exact count.",
    "codeLanguage": "html",
    "codeTokens": 146,
    "codeId": "https://github.com/angular/components/blob/main/src/material/badge/badge.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Badge Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<h3>Badge size</h3>\n<p>\n  <span matBadge=\"1\" matBadgeSize=\"small\">Text with small badge</span>\n</p>\n<p>\n  <span matBadge=\"22\" matBadgeSize=\"medium\">Text with medium badge</span>\n</p>\n<p>\n  <span matBadge=\"88\" matBadgeSize=\"large\">Text with large badge</span>\n</p>"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Implementing Dynamic Height in Angular Material Tab Groups",
    "codeDescription": "This code shows how to enable dynamic height behavior for mat-tab-group where the tab container will adjust its height based on the active tab's content. This is controlled by the dynamicHeight property.",
    "codeLanguage": "html",
    "codeTokens": 132,
    "codeId": "https://github.com/angular/components/blob/main/src/material/tabs/tabs.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Tabs Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-tab-group dynamicHeight>\n  <mat-tab label=\"Short tab\">\n    <div class=\"example-small-box mat-elevation-z4\">\n      Small content\n    </div>\n  </mat-tab>\n  <mat-tab label=\"Long tab\">\n    <div class=\"example-large-box mat-elevation-z4\">\n      Large content\n    </div>\n  </mat-tab>\n</mat-tab-group>"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Implementing moveItemInArray Function in TypeScript",
    "codeDescription": "This function moves an item within an array from one index to another. It's a utility function for reordering items in a drag and drop context.",
    "codeLanguage": "TypeScript",
    "codeTokens": 70,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-11_snippet_16",
    "pageTitle": "Angular CDK Drag-Drop API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void;"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Styling Toolbar Content with CSS Flexbox",
    "codeDescription": "This CSS snippet provides the styling needed to position content within a toolbar using flexbox, with a spacer element that pushes content to opposite sides of the toolbar.",
    "codeLanguage": "css",
    "codeTokens": 57,
    "codeId": "https://github.com/angular/components/blob/main/src/material/toolbar/toolbar.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Toolbar Component Documentation",
    "codeList": [
      {
        "language": "css",
        "code": ".example-spacer {\n  flex: 1 1 auto;\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Implementing MapAdvancedMarker in Angular TypeScript Component",
    "codeDescription": "This TypeScript snippet demonstrates how to implement a Google Map with advanced markers in an Angular component. It shows initialization of map properties, marker options, and a method to add markers on click events.",
    "codeLanguage": "typescript",
    "codeTokens": 207,
    "codeId": "https://github.com/angular/components/blob/main/src/google-maps/map-advanced-marker/README.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Google Maps MapAdvancedMarker Component Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// google-map-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapAdvancedMarker} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapAdvancedMarker],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n  advancedMarkerOptions: google.maps.marker.AdvancedMarkerElementOptions = {gmpDraggable: false};\n  advancedMarkerPositions: google.maps.LatLngLiteral[] = [];\n\n  addAdvancedMarker(event: google.maps.MapMouseEvent) {\n    this.advancedMarkerPositions.push(event.latLng.toJSON());\n  }\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Implementing MatOption Component in Angular Material",
    "codeDescription": "Definition for MatOption which represents an option item in select dropdowns. Supports selection, disabling, and keyboard navigation with various lifecycle hooks and event emitters.",
    "codeLanguage": "typescript",
    "codeTokens": 469,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/select/index.api.md#2025-04-11_snippet_6",
    "pageTitle": "Angular Material Select API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// @public\nexport class MatOption<T = any> implements FocusableOption, AfterViewChecked, OnDestroy {\n    constructor(...args: unknown[]);\n    get active(): boolean;\n    // (undocumented)\n    _changeDetectorRef: ChangeDetectorRef;\n    deselect(emitEvent?: boolean): void;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    get disableRipple(): boolean;\n    focus(_origin?: FocusOrigin, options?: FocusOptions): void;\n    _getHostElement(): HTMLElement;\n    getLabel(): string;\n    _getTabIndex(): string;\n    // (undocumented)\n    group: MatOptgroup | null;\n    _handleKeydown(event: KeyboardEvent): void;\n    get hideSingleSelectionIndicator(): boolean;\n    id: string;\n    get multiple(): boolean | null | undefined;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    ngAfterViewChecked(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    readonly onSelectionChange: EventEmitter<MatOptionSelectionChange<T>>;\n    select(emitEvent?: boolean): void;\n    get selected(): boolean;\n    _selectViaInteraction(): void;\n    setActiveStyles(): void;\n    setInactiveStyles(): void;\n    readonly _stateChanges: Subject<void>;\n    _text: ElementRef<HTMLElement> | undefined;\n    value: T;\n    get viewValue(): string;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatOption<any>, \"mat-option\", [\"matOption\"], { \"value\": { \"alias\": \"value\"; \"required\": false; }; \"id\": { \"alias\": \"id\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; }, { \"onSelectionChange\": \"onSelectionChange\"; }, never, [\"mat-icon\", \"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatOption<any>, never>;\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Defining MatAutocompleteTrigger Directive",
    "codeDescription": "This snippet defines the MatAutocompleteTrigger directive that implements ControlValueAccessor, AfterViewInit, OnChanges, and OnDestroy. It manages the connection between input elements and autocomplete panels.",
    "codeLanguage": "typescript",
    "codeTokens": 571,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/autocomplete/index.api.md#2025-04-11_snippet_4",
    "pageTitle": "Angular Material Autocomplete API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// @public\nexport class MatAutocompleteTrigger implements ControlValueAccessor, AfterViewInit, OnChanges, OnDestroy {\n    constructor(...args: unknown[]);\n    get activeOption(): MatOption | null;\n    autocomplete: MatAutocomplete;\n    autocompleteAttribute: string;\n    autocompleteDisabled: boolean;\n    closePanel(): void;\n    connectedTo: MatAutocompleteOrigin;\n    // (undocumented)\n    _handleClick(): void;\n    // (undocumented)\n    _handleFocus(): void;\n    // (undocumented)\n    _handleInput(event: Event): void;\n    // (undocumented)\n    _handleKeydown(e: Event): void;\n    // (undocumented)\n    static ngAcceptInputType_autocompleteDisabled: unknown;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnChanges(changes: SimpleChanges): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    _onChange: (value: any) => void;\n    _onTouched: () => void;\n    openPanel(): void;\n    readonly optionSelections: Observable<MatOptionSelectionChange>;\n    get panelClosingActions(): Observable<MatOptionSelectionChange | null>;\n    get panelOpen(): boolean;\n    position: 'auto' | 'above' | 'below';\n    // (undocumented)\n    registerOnChange(fn: (value: any) => {}): void;\n    // (undocumented)\n    registerOnTouched(fn: () => {}): void;\n    // (undocumented)\n    setDisabledState(isDisabled: boolean): void;\n    updatePosition(): void;\n    // (undocumented)\n    writeValue(value: any): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatAutocompleteTrigger, \"input[matAutocomplete], textarea[matAutocomplete]\", [\"matAutocompleteTrigger\"], { \"autocomplete\": { \"alias\": \"matAutocomplete\"; \"required\": false; }; \"position\": { \"alias\": \"matAutocompletePosition\"; \"required\": false; }; \"connectedTo\": { \"alias\": \"matAutocompleteConnectedTo\"; \"required\": false; }; \"autocompleteAttribute\": { \"alias\": \"autocomplete\"; \"required\": false; }; \"autocompleteDisabled\": { \"alias\": \"matAutocompleteDisabled\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatAutocompleteTrigger, never>;\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Creating a Disabled Chip Row in Angular Material",
    "codeDescription": "This snippet illustrates how to create a disabled chip row using the mat-chip-row component in Angular Material. The disabled attribute prevents user interaction and gives the chip a disabled appearance.",
    "codeLanguage": "html",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Chips Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-chip-row disabled>Orange</mat-chip-row>"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Making HammerJS Optional Dependency",
    "codeDescription": "Modifies the framework to make HammerJS an optional dependency rather than required.",
    "codeLanguage": "typescript",
    "codeTokens": 30,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_177",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "make hammerjs optional"
      }
    ],
    "relevance": 0.908
  },
  {
    "codeTitle": "Implementing Basic Phone Input Component in TypeScript",
    "codeDescription": "Initial implementation of a phone number input component that splits the number into area code, exchange, and subscriber parts using separate inputs managed by FormGroup.",
    "codeLanguage": "typescript",
    "codeTokens": 389,
    "codeId": "https://github.com/angular/components/blob/main/guides/creating-a-custom-form-field-control.md#2025-04-11_snippet_0",
    "pageTitle": "Custom Form Field Control Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "class MyTel {\n  constructor(public area: string, public exchange: string, public subscriber: string) {}\n}\n\n@Component({\n  selector: 'example-tel-input',\n  template: `\n    <div role=\"group\" [formGroup]=\"parts\">\n      <input class=\"area\" formControlName=\"area\" maxlength=\"3\">\n      <span>&ndash;</span>\n      <input class=\"exchange\" formControlName=\"exchange\" maxlength=\"3\">\n      <span>&ndash;</span>\n      <input class=\"subscriber\" formControlName=\"subscriber\" maxlength=\"4\">\n    </div>\n  `,\n  styles: [`\n    div {\n      display: flex;\n    }\n    input {\n      border: none;\n      background: none;\n      padding: 0;\n      outline: none;\n      font: inherit;\n      text-align: center;\n      color: currentColor;\n    }\n  `],\n})\nexport class MyTelInput {\n  parts: FormGroup;\n\n  @Input()\n  get value(): MyTel | null {\n    let n = this.parts.value;\n    if (n.area.length == 3 && n.exchange.length == 3 && n.subscriber.length == 4) {\n      return new MyTel(n.area, n.exchange, n.subscriber);\n    }\n    return null;\n  }\n  set value(tel: MyTel | null) {\n    tel = tel || new MyTel('', '', '');\n    this.parts.setValue({area: tel.area, exchange: tel.exchange, subscriber: tel.subscriber});\n  }\n\n  constructor(fb: FormBuilder) {\n    this.parts =  fb.group({\n      'area': '',\n      'exchange': '',\n      'subscriber': '',\n    });\n  }\n}"
      }
    ],
    "relevance": 0.908
  },
  {
    "codeTitle": "Angular Material Button Toggle API Definitions",
    "codeDescription": "Complete API definition for the @angular/material_button-toggle module. Includes classes, interfaces, tokens, and other types for implementing button toggle functionality in Angular Material applications.",
    "codeLanguage": "typescript",
    "codeTokens": 1849,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/button-toggle/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Button Toggle API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AfterContentInit } from '@angular/core';\nimport { AfterViewInit } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Direction } from '@angular/cdk/bidi';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/bidi';\nimport { InjectionToken } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { QueryList } from '@angular/core';\n\n// @public\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS: InjectionToken<MatButtonToggleDefaultOptions>;\n\n// @public\nexport const MAT_BUTTON_TOGGLE_GROUP: InjectionToken<MatButtonToggleGroup>;\n\n// @public @deprecated\nexport function MAT_BUTTON_TOGGLE_GROUP_DEFAULT_OPTIONS_FACTORY(): MatButtonToggleDefaultOptions;\n\n// @public\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any;\n\n// @public\nexport class MatButtonToggle implements OnInit, AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    get appearance(): MatButtonToggleAppearance;\n    set appearance(value: MatButtonToggleAppearance);\n    ariaLabel: string;\n    ariaLabelledby: string | null;\n    _buttonElement: ElementRef<HTMLButtonElement>;\n    get buttonId(): string;\n    buttonToggleGroup: MatButtonToggleGroup;\n    readonly change: EventEmitter<MatButtonToggleChange>;\n    get checked(): boolean;\n    set checked(value: boolean);\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    get disabledInteractive(): boolean;\n    set disabledInteractive(value: boolean);\n    disableRipple: boolean;\n    focus(options?: FocusOptions): void;\n    _getButtonName(): string | null;\n    id: string;\n    isSingleSelector(): boolean;\n    _markForCheck(): void;\n    name: string;\n    // (undocumented)\n    static ngAcceptInputType_checked: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disabledInteractive: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disableRipple: unknown;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    ngOnInit(): void;\n    _onButtonClick(): void;\n    get tabIndex(): number | null;\n    set tabIndex(value: number | null);\n    value: any;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatButtonToggle, \"mat-button-toggle\", [\"matButtonToggle\"], { \"ariaLabel\": { \"alias\": \"aria-label\"; \"required\": false; }; \"ariaLabelledby\": { \"alias\": \"aria-labelledby\"; \"required\": false; }; \"id\": { \"alias\": \"id\"; \"required\": false; }; \"name\": { \"alias\": \"name\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"tabIndex\": { \"alias\": \"tabIndex\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; \"appearance\": { \"alias\": \"appearance\"; \"required\": false; }; \"checked\": { \"alias\": \"checked\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"disabledInteractive\": { \"alias\": \"disabledInteractive\"; \"required\": false; }; }, { \"change\": \"change\"; }, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatButtonToggle, never>;\n}\n\n// @public\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n// @public\nexport class MatButtonToggleChange {\n    constructor(\n    source: MatButtonToggle,\n    value: any);\n    source: MatButtonToggle;\n    value: any;\n}\n\n// @public\nexport interface MatButtonToggleDefaultOptions {\n    appearance?: MatButtonToggleAppearance;\n    disabledInteractive?: boolean;\n    hideMultipleSelectionIndicator?: boolean;\n    hideSingleSelectionIndicator?: boolean;\n}\n\n// @public\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n    constructor(...args: unknown[]);\n    appearance: MatButtonToggleAppearance;\n    _buttonToggles: QueryList<MatButtonToggle>;\n    readonly change: EventEmitter<MatButtonToggleChange>;\n    _controlValueAccessorChangeFn: (value: any) => void;\n    get dir(): Direction;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    get disabledInteractive(): boolean;\n    set disabledInteractive(value: boolean);\n    _emitChangeEvent(toggle: MatButtonToggle): void;\n    get hideMultipleSelectionIndicator(): boolean;\n    set hideMultipleSelectionIndicator(value: boolean);\n    get hideSingleSelectionIndicator(): boolean;\n    set hideSingleSelectionIndicator(value: boolean);\n    _isPrechecked(toggle: MatButtonToggle): boolean;\n    _isSelected(toggle: MatButtonToggle): boolean;\n    protected _keydown(event: KeyboardEvent): void;\n    get multiple(): boolean;\n    set multiple(value: boolean);\n    get name(): string;\n    set name(value: string);\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disabledInteractive: unknown;\n    // (undocumented)\n    static ngAcceptInputType_hideMultipleSelectionIndicator: unknown;\n    // (undocumented)\n    static ngAcceptInputType_hideSingleSelectionIndicator: unknown;\n    // (undocumented)\n    static ngAcceptInputType_multiple: unknown;\n    // (undocumented)\n    static ngAcceptInputType_vertical: unknown;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngOnInit(): void;\n    _onTouched: () => any;\n    // (undocumented)\n    registerOnChange(fn: (value: any) => void): void;\n    // (undocumented)\n    registerOnTouched(fn: any): void;\n    get selected(): MatButtonToggle | MatButtonToggle[];\n    // (undocumented)\n    setDisabledState(isDisabled: boolean): void;\n    _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput?: boolean, deferEvents?: boolean): void;\n    get value(): any;\n    set value(newValue: any);\n    readonly valueChange: EventEmitter<any>;\n    vertical: boolean;\n    writeValue(value: any): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatButtonToggleGroup, \"mat-button-toggle-group\", [\"matButtonToggleGroup\"], { \"appearance\": { \"alias\": \"appearance\"; \"required\": false; }; \"name\": { \"alias\": \"name\"; \"required\": false; }; \"vertical\": { \"alias\": \"vertical\"; \"required\": false; }; \"value\": { \"alias\": \"value\"; \"required\": false; }; \"multiple\": { \"alias\": \"multiple\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"disabledInteractive\": { \"alias\": \"disabledInteractive\"; \"required\": false; }; \"hideSingleSelectionIndicator\": { \"alias\": \"hideSingleSelectionIndicator\"; \"required\": false; }; \"hideMultipleSelectionIndicator\": { \"alias\": \"hideMultipleSelectionIndicator\"; \"required\": false; }; }, { \"valueChange\": \"valueChange\"; \"change\": \"change\"; }, [\"_buttonToggles\"], never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatButtonToggleGroup, never>;\n}\n\n// @public (undocumented)\nexport class MatButtonToggleModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatButtonToggleModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatButtonToggleModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatButtonToggleModule, never, [typeof MatCommonModule, typeof MatRippleModule, typeof MatButtonToggleGroup, typeof MatButtonToggle], [typeof MatCommonModule, typeof MatButtonToggleGroup, typeof MatButtonToggle]>;\n}\n\n// @public @deprecated (undocumented)\nexport type ToggleType = 'checkbox' | 'radio';\n\n// (No @packageDocumentation comment for this package)"
      }
    ],
    "relevance": 0.908
  },
  {
    "codeTitle": "Creating a Service for Runtime Ripple Configuration",
    "codeDescription": "Shows how to create an injectable service that implements RippleGlobalOptions interface. This approach allows updating ripple configuration at runtime throughout the application.",
    "codeLanguage": "typescript",
    "codeTokens": 78,
    "codeId": "https://github.com/angular/components/blob/main/src/material/core/ripple/ripple.md#2025-04-11_snippet_7",
    "pageTitle": "Angular Material Ripple Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Injectable({providedIn: 'root'})\nexport class AppGlobalRippleOptions implements RippleGlobalOptions {\n  /** Whether ripples should be disabled globally. */\n  disabled: boolean = false;\n}"
      }
    ],
    "relevance": 0.908
  },
  {
    "codeTitle": "Custom Native Date Formats Configuration",
    "codeDescription": "Configuring custom date formats with the native date adapter.",
    "codeLanguage": "typescript",
    "codeTokens": 44,
    "codeId": "https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-11_snippet_10",
    "pageTitle": "Angular Material Datepicker Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "bootstrapApplication(MyApp, {\n  providers: [provideNativeDateAdapter(MY_NATIVE_DATE_FORMATS)],\n});"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Updating Datepicker ARIA Attribute in Angular Material",
    "codeDescription": "Uses a narrower value for the aria-haspopup attribute on the datepicker.",
    "codeLanguage": "typescript",
    "codeTokens": 42,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_29",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "use narrower value for aria-haspopup ([#15666]) ([0c62798])"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Accessing Dialog Data in a Component",
    "codeDescription": "Shows how to access data passed to a dialog component using the DIALOG_DATA injection token.",
    "codeLanguage": "ts",
    "codeTokens": 99,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/dialog/dialog.md#2025-04-11_snippet_9",
    "pageTitle": "Angular CDK Dialog Service Documentation",
    "codeList": [
      {
        "language": "ts",
        "code": "import {Component, Inject} from '@angular/core';\nimport {DIALOG_DATA} from '@angular/cdk/dialog';\n\n@Component({\n  selector: 'your-dialog',\n  template: 'passed in {{ data.name }}',\n})\nexport class YourDialog {\n  constructor(@Inject(DIALOG_DATA) public data: {name: string}) { }\n}"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Defining DropListOrientation Type for List Direction",
    "codeDescription": "Type definition for specifying the orientation of a drop list. Supports 'horizontal', 'vertical', or 'mixed' values to define how items are arranged and how drag operations work.",
    "codeLanguage": "typescript",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-11_snippet_13",
    "pageTitle": "Angular CDK Drag-Drop API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export type DropListOrientation = 'horizontal' | 'vertical' | 'mixed';"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Defining MatAutocomplete Component Class",
    "codeDescription": "This snippet defines the main MatAutocomplete component class, which implements AfterContentInit and OnDestroy. It includes properties, methods, and event emitters needed for autocomplete functionality.",
    "codeLanguage": "typescript",
    "codeTokens": 855,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/autocomplete/index.api.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Autocomplete API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// @public\nexport class MatAutocomplete implements AfterContentInit, OnDestroy {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    protected _animationsDisabled: boolean;\n    ariaLabel: string;\n    ariaLabelledby: string;\n    autoActiveFirstOption: boolean;\n    autoSelectActiveOption: boolean;\n    set classList(value: string | string[]);\n    // (undocumented)\n    _classList: string | string[];\n    readonly closed: EventEmitter<void>;\n    protected _color: ThemePalette;\n    // (undocumented)\n    protected _defaults: MatAutocompleteDefaultOptions;\n    disableRipple: boolean;\n    displayWith: ((value: any) => string) | null;\n    _emitSelectEvent(option: MatOption): void;\n    _getPanelAriaLabelledby(labelId: string | null): string | null;\n    _getScrollTop(): number;\n    get hideSingleSelectionIndicator(): boolean;\n    set hideSingleSelectionIndicator(value: boolean);\n    id: string;\n    readonly inertGroups: boolean;\n    get isOpen(): boolean;\n    // (undocumented)\n    _isOpen: boolean;\n    _keyManager: ActiveDescendantKeyManager<MatOption>;\n    _latestOpeningTrigger: unknown;\n    // (undocumented)\n    static ngAcceptInputType_autoActiveFirstOption: unknown;\n    // (undocumented)\n    static ngAcceptInputType_autoSelectActiveOption: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disableRipple: unknown;\n    // (undocumented)\n    static ngAcceptInputType_hideSingleSelectionIndicator: unknown;\n    // (undocumented)\n    static ngAcceptInputType_requireSelection: unknown;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    readonly opened: EventEmitter<void>;\n    readonly optionActivated: EventEmitter<MatAutocompleteActivatedEvent>;\n    optionGroups: QueryList<MatOptgroup>;\n    options: QueryList<MatOption>;\n    readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent>;\n    panel: ElementRef;\n    panelWidth: string | number;\n    requireSelection: boolean;\n    _setColor(value: ThemePalette): void;\n    _setScrollTop(scrollTop: number): void;\n    _setVisibility(): void;\n    showPanel: boolean;\n    // (undocumented)\n    protected _skipPredicate(): boolean;\n    _syncParentProperties(): void;\n    template: TemplateRef<any>;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatAutocomplete, \"mat-autocomplete\", [\"matAutocomplete\"], { \"ariaLabel\": { \"alias\": \"aria-label\"; \"required\": false; }; \"ariaLabelledby\": { \"alias\": \"aria-labelledby\"; \"required\": false; }; \"displayWith\": { \"alias\": \"displayWith\"; \"required\": false; }; \"autoActiveFirstOption\": { \"alias\": \"autoActiveFirstOption\"; \"required\": false; }; \"autoSelectActiveOption\": { \"alias\": \"autoSelectActiveOption\"; \"required\": false; }; \"requireSelection\": { \"alias\": \"requireSelection\"; \"required\": false; }; \"panelWidth\": { \"alias\": \"panelWidth\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; \"classList\": { \"alias\": \"class\"; \"required\": false; }; \"hideSingleSelectionIndicator\": { \"alias\": \"hideSingleSelectionIndicator\"; \"required\": false; }; }, { \"optionSelected\": \"optionSelected\"; \"opened\": \"opened\"; \"closed\": \"closed\"; \"optionActivated\": \"optionActivated\"; }, [\"options\", \"optionGroups\"], [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatAutocomplete, never>;\n}"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "DatePicker Toggle Button Component in Angular Material",
    "codeDescription": "Defines the MatDatepickerToggle component which renders a button that opens/closes the datepicker panel. It handles accessibility, disabled states, and custom icons.",
    "codeLanguage": "typescript",
    "codeTokens": 398,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-11_snippet_8",
    "pageTitle": "Angular Material Datepicker API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n    constructor(...args: unknown[]);\n    ariaLabel: string;\n    _button: MatButton;\n    _customIcon: MatDatepickerToggleIcon;\n    datepicker: MatDatepickerPanel<MatDatepickerControl<any>, D>;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    disableRipple: boolean;\n    // (undocumented)\n    _intl: MatDatepickerIntl;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    ngAfterContentInit(): void;\n    // (undocumented)\n    ngOnChanges(changes: SimpleChanges): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    _open(event: Event): void;\n    tabIndex: number | null;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatDatepickerToggle<any>, \"mat-datepicker-toggle\", [\"matDatepickerToggle\"], { \"datepicker\": { \"alias\": \"for\"; \"required\": false; }; \"tabIndex\": { \"alias\": \"tabIndex\"; \"required\": false; }; \"ariaLabel\": { \"alias\": \"aria-label\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; \"disableRipple\": { \"alias\": \"disableRipple\"; \"required\": false; }; }, {}, [\"_customIcon\"], [\"[matDatepickerToggleIcon]\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDatepickerToggle<any>, never>;\n}"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Implementing Linear Mode in Custom Stepper HTML",
    "codeDescription": "HTML template demonstrating linear mode implementation where users must complete the current step before proceeding. Uses the editable and completed properties to control navigation flow.",
    "codeLanguage": "html",
    "codeTokens": 139,
    "codeId": "https://github.com/angular/components/blob/main/guides/creating-a-custom-stepper-using-the-cdk-stepper.md#2025-04-11_snippet_5",
    "pageTitle": "Creating a Custom Angular CDK Stepper",
    "codeList": [
      {
        "language": "html",
        "code": "<app-custom-stepper linear>\n  <cdk-step editable=\"false\" [completed]=\"completed\">\n    <input type=\"text\" name=\"a\" value=\"Cannot proceed to next step\" />\n    <button (click)=\"completeStep()\">Complete step</button>\n  </cdk-step>\n  <cdk-step editable=\"false\">\n    <input type=\"text\" name=\"b\" value=\"b\" />\n  </cdk-step>\n</app-custom-stepper>"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Angular Material Tooltip API Type Definitions and Implementations",
    "codeDescription": "Comprehensive TypeScript definitions for Angular Material's tooltip functionality including classes, interfaces, and utility functions. Contains core tooltip component implementation, configuration options, and helper types.",
    "codeLanguage": "typescript",
    "codeTokens": 1267,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/tooltip/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Tooltip API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AfterViewInit } from '@angular/core';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { ConnectedPosition } from '@angular/cdk/overlay';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ElementRef } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i1_2 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/overlay';\nimport * as i5 from '@angular/cdk/scrolling';\nimport { InjectionToken } from '@angular/core';\nimport { NumberInput } from '@angular/cdk/coercion';\nimport { Observable } from 'rxjs';\nimport { OnDestroy } from '@angular/core';\nimport { OriginConnectionPosition } from '@angular/cdk/overlay';\nimport { Overlay } from '@angular/cdk/overlay';\nimport { OverlayConnectionPosition } from '@angular/cdk/overlay';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\n\nexport function getMatTooltipInvalidPositionError(position: string): Error;\n\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS: InjectionToken<MatTooltipDefaultOptions>;\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions;\n\nexport const MAT_TOOLTIP_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;\n\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: (typeof Overlay)[];\n    useFactory: typeof MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY;\n};\n\nexport class MatTooltip implements OnDestroy, AfterViewInit {\n    constructor(...args: unknown[]);\n    protected _addOffset(position: ConnectedPosition): ConnectedPosition;\n    protected _dir: Directionality;\n    get disabled(): boolean;\n    set disabled(value: BooleanInput);\n    _getOrigin(): {\n        main: OriginConnectionPosition;\n        fallback: OriginConnectionPosition;\n    };\n    _getOverlayPosition(): {\n        main: OverlayConnectionPosition;\n        fallback: OverlayConnectionPosition;\n    };\n    hide(delay?: number): void;\n    get hideDelay(): number;\n    set hideDelay(value: NumberInput);\n    _isTooltipVisible(): boolean;\n    get message(): string;\n    set message(value: string | null | undefined);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    _overlayRef: OverlayRef | null;\n    get position(): TooltipPosition;\n    set position(value: TooltipPosition);\n    get positionAtOrigin(): boolean;\n    set positionAtOrigin(value: BooleanInput);\n    show(delay?: number, origin?: {\n        x: number;\n        y: number;\n    }): void;\n    get showDelay(): number;\n    set showDelay(value: NumberInput);\n    toggle(origin?: {\n        x: number;\n        y: number;\n    }): void;\n    get tooltipClass(): string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    set tooltipClass(value: string | string[] | Set<string> | {\n        [key: string]: any;\n    });\n    _tooltipInstance: TooltipComponent | null;\n    touchGestures: TooltipTouchGestures;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatTooltip, \"[matTooltip]\", [\"matTooltip\"], any, any, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTooltip, never>;\n}\n\nexport const matTooltipAnimations: {\n    readonly tooltipState: any;\n};\n\nexport interface MatTooltipDefaultOptions {\n    disableTooltipInteractivity?: boolean;\n    hideDelay: number;\n    position?: TooltipPosition;\n    positionAtOrigin?: boolean;\n    showDelay: number;\n    tooltipClass?: string | string[];\n    touchendHideDelay: number;\n    touchGestures?: TooltipTouchGestures;\n    touchLongPressShowDelay?: number;\n}\n\nexport class MatTooltipModule {\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTooltipModule, never>;\n    static ɵinj: i0.ɵɵInjectorDeclaration<MatTooltipModule>;\n    static ɵmod: i0.ɵɵNgModuleDeclaration<MatTooltipModule, never, any[], any[]>;\n}\n\nexport const SCROLL_THROTTLE_MS = 20;\n\nexport const TOOLTIP_PANEL_CLASS = \"mat-mdc-tooltip-panel\";\n\nexport class TooltipComponent implements OnDestroy {\n    constructor(...args: unknown[]);\n    afterHidden(): Observable<void>;\n    _cancelPendingAnimations(): void;\n    protected _elementRef: ElementRef<HTMLElement>;\n    _handleAnimationEnd({ animationName }: AnimationEvent): void;\n    _handleBodyInteraction(): void;\n    _handleMouseLeave({ relatedTarget }: MouseEvent): void;\n    hide(delay: number): void;\n    _isMultiline: boolean;\n    isVisible(): boolean;\n    _markForCheck(): void;\n    message: string;\n    _mouseLeaveHideDelay: number;\n    ngOnDestroy(): void;\n    protected _onShow(): void;\n    show(delay: number): void;\n    _tooltip: ElementRef<HTMLElement>;\n    tooltipClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    _triggerElement: HTMLElement;\n    static ɵcmp: i0.ɵɵComponentDeclaration<TooltipComponent, \"mat-tooltip-component\", never, {}, {}, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<TooltipComponent, never>;\n}\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\nexport type TooltipTouchGestures = 'auto' | 'on' | 'off';\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Setting Accessibility Attributes for Paginator in HTML",
    "codeDescription": "This snippet demonstrates how to add accessibility attributes to the mat-paginator component. It shows the use of aria-label or aria-labelledby to provide a description for screen readers.",
    "codeLanguage": "html",
    "codeTokens": 61,
    "codeId": "https://github.com/angular/components/blob/main/src/material/paginator/paginator.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Paginator Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-paginator aria-label=\"Select page of periodic elements\"></mat-paginator>"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Implementing Linear Stepper with Single Form in Angular",
    "codeDescription": "When using a single form for the stepper, any intermediate next/previous buttons within the steps must be set to type=\"button\" to prevent premature form submission.",
    "codeLanguage": "html",
    "codeTokens": 53,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/stepper/stepper.md#2025-04-11_snippet_0",
    "pageTitle": "CDK Stepper Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<button type=\"button\">Next</button>"
      }
    ],
    "relevance": 0.903
  },
  {
    "codeTitle": "Angular YouTube Player API Definitions (TypeScript)",
    "codeDescription": "Complete API definitions for the @angular/youtube-player package, including the YouTubePlayer component, YouTubePlayerModule, configuration interfaces, and exported types. The API provides Angular integration with the YouTube Player iframe API.",
    "codeLanguage": "typescript",
    "codeTokens": 1318,
    "codeId": "https://github.com/angular/components/blob/main/goldens/youtube-player/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular YouTube Player API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "/// <reference types=\"youtube\" />\n\nimport { AfterViewInit } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\n\n// @public\nexport type PlaceholderImageQuality = 'high' | 'standard' | 'low';\n\n// @public\nexport const YOUTUBE_PLAYER_CONFIG: InjectionToken<YouTubePlayerConfig>;\n\n// @public\nexport class YouTubePlayer implements AfterViewInit, OnChanges, OnDestroy {\n    constructor(...args: unknown[]);\n    readonly apiChange: Observable<YT.PlayerEvent>;\n    disableCookies: boolean;\n    disablePlaceholder: boolean;\n    endSeconds: number | undefined;\n    readonly error: Observable<YT.OnErrorEvent>;\n    getAvailablePlaybackRates(): number[];\n    getAvailableQualityLevels(): YT.SuggestedVideoQuality[];\n    getCurrentTime(): number;\n    getDuration(): number;\n    getPlaybackQuality(): YT.SuggestedVideoQuality;\n    getPlaybackRate(): number;\n    getPlayerState(): YT.PlayerState | undefined;\n    getVideoEmbedCode(): string;\n    getVideoLoadedFraction(): number;\n    getVideoUrl(): string;\n    getVolume(): number;\n    // (undocumented)\n    protected _hasPlaceholder: boolean;\n    get height(): number;\n    set height(height: number | undefined);\n    // (undocumented)\n    protected _isLoading: boolean;\n    isMuted(): boolean;\n    protected _load(playVideo: boolean): void;\n    loadApi: boolean;\n    mute(): void;\n    // (undocumented)\n    static ngAcceptInputType_disableCookies: unknown;\n    // (undocumented)\n    static ngAcceptInputType_disablePlaceholder: unknown;\n    // (undocumented)\n    static ngAcceptInputType_endSeconds: number | undefined;\n    // (undocumented)\n    static ngAcceptInputType_height: unknown;\n    // (undocumented)\n    static ngAcceptInputType_loadApi: unknown;\n    // (undocumented)\n    static ngAcceptInputType_showBeforeIframeApiLoads: unknown;\n    // (undocumented)\n    static ngAcceptInputType_startSeconds: number | undefined;\n    // (undocumented)\n    static ngAcceptInputType_width: unknown;\n    // (undocumented)\n    ngAfterViewInit(): void;\n    // (undocumented)\n    ngOnChanges(changes: SimpleChanges): void;\n    // (undocumented)\n    ngOnDestroy(): void;\n    pauseVideo(): void;\n    placeholderButtonLabel: string;\n    placeholderImageQuality: PlaceholderImageQuality;\n    readonly playbackQualityChange: Observable<YT.OnPlaybackQualityChangeEvent>;\n    readonly playbackRateChange: Observable<YT.OnPlaybackRateChangeEvent>;\n    playerVars: YT.PlayerVars | undefined;\n    playVideo(): void;\n    readonly ready: Observable<YT.PlayerEvent>;\n    requestFullscreen(options?: FullscreenOptions): Promise<void>;\n    seekTo(seconds: number, allowSeekAhead: boolean): void;\n    setPlaybackRate(playbackRate: number): void;\n    setVolume(volume: number): void;\n    protected _shouldShowPlaceholder(): boolean;\n    showBeforeIframeApiLoads: boolean;\n    startSeconds: number | undefined;\n    readonly stateChange: Observable<YT.OnStateChangeEvent>;\n    stopVideo(): void;\n    suggestedQuality: YT.SuggestedVideoQuality | undefined;\n    unMute(): void;\n    videoId: string | undefined;\n    get width(): number;\n    set width(width: number | undefined);\n    youtubeContainer: ElementRef<HTMLElement>;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<YouTubePlayer, \"youtube-player\", never, { \"videoId\": { \"alias\": \"videoId\"; \"required\": false; }; \"height\": { \"alias\": \"height\"; \"required\": false; }; \"width\": { \"alias\": \"width\"; \"required\": false; }; \"startSeconds\": { \"alias\": \"startSeconds\"; \"required\": false; }; \"endSeconds\": { \"alias\": \"endSeconds\"; \"required\": false; }; \"suggestedQuality\": { \"alias\": \"suggestedQuality\"; \"required\": false; }; \"playerVars\": { \"alias\": \"playerVars\"; \"required\": false; }; \"disableCookies\": { \"alias\": \"disableCookies\"; \"required\": false; }; \"loadApi\": { \"alias\": \"loadApi\"; \"required\": false; }; \"disablePlaceholder\": { \"alias\": \"disablePlaceholder\"; \"required\": false; }; \"showBeforeIframeApiLoads\": { \"alias\": \"showBeforeIframeApiLoads\"; \"required\": false; }; \"placeholderButtonLabel\": { \"alias\": \"placeholderButtonLabel\"; \"required\": false; }; \"placeholderImageQuality\": { \"alias\": \"placeholderImageQuality\"; \"required\": false; }; }, { \"ready\": \"ready\"; \"stateChange\": \"stateChange\"; \"error\": \"error\"; \"apiChange\": \"apiChange\"; \"playbackQualityChange\": \"playbackQualityChange\"; \"playbackRateChange\": \"playbackRateChange\"; }, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<YouTubePlayer, never>;\n}\n\n// @public\nexport interface YouTubePlayerConfig {\n    disablePlaceholder?: boolean;\n    loadApi?: boolean;\n    placeholderButtonLabel?: string;\n    placeholderImageQuality?: PlaceholderImageQuality;\n}\n\n// @public (undocumented)\nexport class YouTubePlayerModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<YouTubePlayerModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<YouTubePlayerModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<YouTubePlayerModule, never, [typeof YouTubePlayer], [typeof YouTubePlayer]>;\n}\n\n// (No @packageDocumentation comment for this package)"
      }
    ],
    "relevance": 0.903
  },
  {
    "codeTitle": "Updating Dialog Classes via DialogRef in Angular Material",
    "codeDescription": "Support for adding and removing CSS classes to a dialog via the dialogRef. Allows dynamic styling of dialogs.",
    "codeLanguage": "TypeScript",
    "codeTokens": 48,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_56",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "dialogRef.addPanelClass('custom-class');\ndialogRef.removePanelClass('custom-class');"
      }
    ],
    "relevance": 0.902
  },
  {
    "codeTitle": "Sidenav Width Styling",
    "codeDescription": "CSS styling to set explicit width for sidenav component.",
    "codeLanguage": "css",
    "codeTokens": 37,
    "codeId": "https://github.com/angular/components/blob/main/src/material/sidenav/sidenav.md#2025-04-11_snippet_6",
    "pageTitle": "Angular Material Sidenav & Drawer Components Documentation",
    "codeList": [
      {
        "language": "css",
        "code": "mat-sidenav {\n  width: 200px;\n}"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Fixing Material Build for ES2015",
    "codeDescription": "Fix for Angular Material not working with ES2015 builds. Addresses issues #12760 and #13695.",
    "codeLanguage": "TypeScript",
    "codeTokens": 79,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_60",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "material not working with ES2015 ([#13709](https://github.com/angular/material2/issues/13709)) ([e9103a6](https://github.com/angular/material2/commit/e9103a6))"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Defining MatOption Component in TypeScript for Angular Material",
    "codeDescription": "This code snippet defines the MatOption class, which represents a selectable option in Angular Material. It includes properties for managing the option's state (active, disabled, selected), methods for handling user interactions, and Angular-specific decorators for component configuration.",
    "codeLanguage": "TypeScript",
    "codeTokens": 423,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/autocomplete/index.api.md#2025-04-11_snippet_6",
    "pageTitle": "Angular Material Autocomplete API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "constructor(...args: unknown[]);\nget active(): boolean;\n// (undocumented)\n_changeDetectorRef: ChangeDetectorRef;\ndeselect(emitEvent?: boolean): void;\nget disabled(): boolean;\nset disabled(value: boolean);\nget disableRipple(): boolean;\nfocus(_origin?: FocusOrigin, options?: FocusOptions): void;\n_getHostElement(): HTMLElement;\ngetLabel(): string;\n_getTabIndex(): string;\n// (undocumented)\ngroup: MatOptgroup | null;\n_handleKeydown(event: KeyboardEvent): void;\nget hideSingleSelectionIndicator(): boolean;\nid: string;\nget multiple(): boolean | null | undefined;\n// (undocumented)\nstatic ngAcceptInputType_disabled: unknown;\n// (undocumented)\nngAfterViewChecked(): void;\n// (undocumented)\nngOnDestroy(): void;\nreadonly onSelectionChange: EventEmitter<MatOptionSelectionChange<T>>;\nselect(emitEvent?: boolean): void;\nget selected(): boolean;\n_selectViaInteraction(): void;\nsetActiveStyles(): void;\nsetInactiveStyles(): void;\nreadonly _stateChanges: Subject<void>;\n_text: ElementRef<HTMLElement> | undefined;\nvalue: T;\nget viewValue(): string;\n// (undocumented)\nstatic ɵcmp: i0.ɵɵComponentDeclaration<MatOption<any>, \"mat-option\", [\"matOption\"], { \"value\": { \"alias\": \"value\"; \"required\": false; }; \"id\": { \"alias\": \"id\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; }, { \"onSelectionChange\": \"onSelectionChange\"; }, never, [\"mat-icon\", \"*\"], true, never>;\n// (undocumented)\nstatic ɵfac: i0.ɵɵFactoryDeclaration<MatOption<any>, never>;"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Implementing DragRef Class for Drag Operations",
    "codeDescription": "Core class that manages drag operations for a single element. Handles movement, constraints, events, and visual feedback during dragging. Provides extensive configuration options and event observables.",
    "codeLanguage": "typescript",
    "codeTokens": 675,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-11_snippet_10",
    "pageTitle": "Angular CDK Drag-Drop API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class DragRef<T = any> {\n    constructor(element: ElementRef<HTMLElement> | HTMLElement, _config: DragRefConfig, _document: Document, _ngZone: NgZone, _viewportRuler: ViewportRuler, _dragDropRegistry: DragDropRegistry, _renderer: Renderer2);\n    readonly beforeStarted: Subject<void>;\n    constrainPosition?: DragConstrainPosition;\n    data: T;\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    disableHandle(handle: HTMLElement): void;\n    dispose(): void;\n    dragStartDelay: number | {\n        touch: number;\n        mouse: number;\n    };\n    readonly dropped: Subject<{\n        previousIndex: number;\n        currentIndex: number;\n        item: DragRef;\n        container: DropListRef;\n        previousContainer: DropListRef;\n        distance: Point;\n        dropPoint: Point;\n        isPointerOverContainer: boolean;\n        event: MouseEvent | TouchEvent;\n    }>;\n    enableHandle(handle: HTMLElement): void;\n    readonly ended: Subject<{\n        source: DragRef;\n        distance: Point;\n        dropPoint: Point;\n        event: MouseEvent | TouchEvent;\n    }>;\n    readonly entered: Subject<{\n        container: DropListRef;\n        item: DragRef;\n        currentIndex: number;\n    }>;\n    readonly exited: Subject<{\n        container: DropListRef;\n        item: DragRef;\n    }>;\n    getFreeDragPosition(): Readonly<Point>;\n    getPlaceholderElement(): HTMLElement;\n    getRootElement(): HTMLElement;\n    getVisibleElement(): HTMLElement;\n    isDragging(): boolean;\n    lockAxis: 'x' | 'y';\n    readonly moved: Observable<{\n        source: DragRef;\n        pointerPosition: {\n            x: number;\n            y: number;\n        };\n        event: MouseEvent | TouchEvent;\n        distance: Point;\n        delta: {\n            x: -1 | 0 | 1;\n            y: -1 | 0 | 1;\n        };\n    }>;\n    previewClass: string | string[] | undefined;\n    readonly released: Subject<{\n        source: DragRef;\n        event: MouseEvent | TouchEvent;\n    }>;\n    reset(): void;\n    scale: number;\n    setFreeDragPosition(value: Point): this;\n    _sortFromLastPointerPosition(): void;\n    readonly started: Subject<{\n        source: DragRef;\n        event: MouseEvent | TouchEvent;\n    }>;\n    withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this;\n    withDirection(direction: Direction): this;\n    _withDropContainer(container: DropListRef): void;\n    withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this;\n    withParent(parent: DragRef<unknown> | null): this;\n    withPlaceholderTemplate(template: DragHelperTemplate | null): this;\n    withPreviewContainer(value: PreviewContainer): this;\n    withPreviewTemplate(template: DragPreviewTemplate | null): this;\n    withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this;\n}"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Displaying Basic Tooltip in Angular Material",
    "codeDescription": "This snippet demonstrates how to use the basic tooltip component in Angular Material. It's a placeholder for an example that would show a simple tooltip implementation.",
    "codeLanguage": "html",
    "codeTokens": 48,
    "codeId": "https://github.com/angular/components/blob/main/src/material/tooltip/tooltip.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Tooltip Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- example(tooltip-overview) -->"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Date Range Picker Component in Angular Material",
    "codeDescription": "Defines the MatDateRangePicker component which extends MatDatepickerBase to provide a UI for selecting date ranges. It handles content forwarding to the datepicker panel.",
    "codeLanguage": "typescript",
    "codeTokens": 175,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-11_snippet_11",
    "pageTitle": "Angular Material Datepicker API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class MatDateRangePicker<D> extends MatDatepickerBase<MatDateRangePickerInput<D>, DateRange<D>, D> {\n    // (undocumented)\n    protected _forwardContentValues(instance: MatDatepickerContent<DateRange<D>, D>): void;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatDateRangePicker<any>, \"mat-date-range-picker\", [\"matDateRangePicker\"], {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDateRangePicker<any>, never>;\n}"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Defining the CdkScrollable Class",
    "codeDescription": "Implements the base scrollable functionality for Angular CDK's scrolling module. Provides methods for measuring scroll offsets, handling element scrolling events, and programmatic scrolling.",
    "codeLanguage": "typescript",
    "codeTokens": 312,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/scrolling/index.api.md#2025-04-11_snippet_2",
    "pageTitle": "Angular CDK Scrolling API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// @public\nexport class CdkScrollable implements OnInit, OnDestroy {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    protected readonly _destroyed: Subject<void>;\n    // (undocumented)\n    protected dir?: Directionality | null | undefined;\n    // (undocumented)\n    protected elementRef: ElementRef<HTMLElement>;\n    elementScrolled(): Observable<Event>;\n    getElementRef(): ElementRef<HTMLElement>;\n    measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    ngOnInit(): void;\n    // (undocumented)\n    protected ngZone: NgZone;\n    // (undocumented)\n    protected scrollDispatcher: ScrollDispatcher;\n    // (undocumented)\n    protected _scrollElement: EventTarget;\n    scrollTo(options: ExtendedScrollToOptions): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkScrollable, \"[cdk-scrollable], [cdkScrollable]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkScrollable, never>;\n}"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Implementing a Nested Tree Node with Node Outlet in HTML",
    "codeDescription": "This code shows how to implement a nested tree node template with the cdkTreeNodeOutlet directive, which marks where children of the node will be rendered in the DOM.",
    "codeLanguage": "html",
    "codeTokens": 85,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/tree/tree.md#2025-04-11_snippet_3",
    "pageTitle": "CDK Tree Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<cdk-nested-tree-node *cdkNodeDef=\"let node\">\n  {{node.value}}\n  <ng-container cdkTreeNodeOutlet></ng-container>\n</cdk-nested-tree-node>"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Implementing Directionality in Angular Components",
    "codeDescription": "This snippet demonstrates how to inject and use the Directionality service in a custom Angular component. It shows how to read the current text direction and subscribe to direction changes to update the component accordingly.",
    "codeLanguage": "typescript",
    "codeTokens": 107,
    "codeId": "https://github.com/angular/components/blob/main/guides/bidirectionality.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Bi-directionality Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({ /* ... */ })\nexport class MyCustomComponent {\n  private dir: Direction;\n\n  constructor(directionality: Directionality) {\n    this.dir = directionality.value;\n\n    directionality.change.subscribe(() => {\n      this.dir = directionality.value;\n    });\n  }\n}"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Setting Up Tree with TrackBy Function in Angular Material",
    "codeDescription": "Example of providing a trackBy function to a mat-tree to improve performance by helping Angular identify unique nodes across data changes.",
    "codeLanguage": "html",
    "codeTokens": 58,
    "codeId": "https://github.com/angular/components/blob/main/src/material/tree/tree.md#2025-04-11_snippet_7",
    "pageTitle": "Angular Material Tree Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\" [trackBy]=\"trackByFn\">"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Version 6.4.3 Commit Hash",
    "codeDescription": "Git commit hash reference for tracking changes in version 6.4.3",
    "codeLanguage": "text",
    "codeTokens": 31,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_69",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "text",
        "code": "58361f1"
      }
    ],
    "relevance": 0.898
  },
  {
    "codeTitle": "Defining MatSliderThumb Class",
    "codeDescription": "This code snippet defines the MatSliderThumb class, which implements the core functionality for the slider thumb component.",
    "codeLanguage": "typescript",
    "codeTokens": 75,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/slider/index.api.md#2025-04-11_snippet_6",
    "pageTitle": "Angular Material Slider Component API",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class MatSliderThumb implements _MatSliderThumb, OnDestroy, ControlValueAccessor {\n    constructor(...args: unknown[]);\n    // ... (properties and methods)\n    static ngAcceptInputType_value: unknown;\n}"
      }
    ],
    "relevance": 0.898
  },
  {
    "codeTitle": "Defining MatSelectionList Component Class",
    "codeDescription": "Core class definition for Angular Material's selection list component with properties and methods for handling selection state, accessibility, and form control integration.",
    "codeLanguage": "typescript",
    "codeTokens": 314,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/list/index.api.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material List Component API",
    "codeList": [
      {
        "language": "typescript",
        "code": "constructor(...args: unknown[]);\n    color: ThemePalette;\n    compareWith: (o1: any, o2: any) => boolean;\n    deselectAll(): MatListOption[];\n    get disabled(): boolean;\n    set disabled(value: BooleanInput);\n    _element: ElementRef<HTMLElement>;\n    _emitChangeEvent(options: MatListOption[]): void;\n    focus(options?: FocusOptions): void;\n    _handleKeydown(event: KeyboardEvent): void;\n    get hideSingleSelectionIndicator(): boolean;\n    set hideSingleSelectionIndicator(value: BooleanInput);\n    _items: QueryList<MatListOption>;\n    get multiple(): boolean;\n    set multiple(value: BooleanInput);\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    _onTouched: () => void;\n    get options(): QueryList<MatListOption>;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: () => void): void;\n    _reportValueChange(): void;\n    selectAll(): MatListOption[];\n    selectedOptions: SelectionModel<MatListOption>;\n    readonly selectionChange: EventEmitter<MatSelectionListChange>;\n    setDisabledState(isDisabled: boolean): void;\n    _value: string[] | null;\n    writeValue(values: string[]): void;"
      }
    ],
    "relevance": 0.898
  },
  {
    "codeTitle": "Implementing MatTabGroup Class",
    "codeDescription": "This class represents the main tab group component in Material Tabs.",
    "codeLanguage": "typescript",
    "codeTokens": 185,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-11_snippet_6",
    "pageTitle": "Angular Material Tabs API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class MatTabGroup implements AfterViewInit, AfterContentInit, AfterContentChecked, OnDestroy {\n    constructor(...args: unknown[]);\n    alignTabs: string | null;\n    _allTabs: QueryList<MatTab>;\n    readonly animationDone: EventEmitter<void>;\n    get animationDuration(): string;\n    set animationDuration(value: string | number);\n    _animationsDisabled: boolean;\n    ariaLabel: string;\n    ariaLabelledby: string;\n    get backgroundColor(): ThemePalette;\n    set backgroundColor(value: ThemePalette);\n    protected _bodyCentered(isCenter: boolean): void;\n    color: ThemePalette;\n    get contentTabIndex(): number | null;\n    set contentTabIndex(value: number);\n    disablePagination: boolean;\n    disableRipple: boolean;\n    dynamicHeight: boolean;\n}"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Accessing Selection Model Properties in Angular",
    "codeDescription": "Example showing how to check for multiple selection in SelectionModel",
    "codeLanguage": "TypeScript",
    "codeTokens": 26,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_79",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "isMultipleSelection()"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Manually Controlling Tooltip in Angular Material",
    "codeDescription": "This snippet demonstrates how to manually show and hide the Angular Material tooltip using directive methods. It's a placeholder for an example of programmatic tooltip control.",
    "codeLanguage": "html",
    "codeTokens": 49,
    "codeId": "https://github.com/angular/components/blob/main/src/material/tooltip/tooltip.md#2025-04-11_snippet_4",
    "pageTitle": "Angular Material Tooltip Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- example(tooltip-manual) -->"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Implementing Array Item Copy Utility for Drag and Drop",
    "codeDescription": "Utility function that copies items between arrays during drag and drop operations. It transfers an item from a source array to a target array at specified indices.",
    "codeLanguage": "typescript",
    "codeTokens": 73,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-11_snippet_3",
    "pageTitle": "Angular CDK Drag-Drop API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export function copyArrayItem<T = any>(currentArray: T[], targetArray: T[], currentIndex: number, targetIndex: number): void;"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Creating a Disabled Chip in Angular Material",
    "codeDescription": "This snippet demonstrates how to create a disabled chip using the mat-chip component in Angular Material. The disabled attribute is used to give the chip a disabled appearance.",
    "codeLanguage": "html",
    "codeTokens": 54,
    "codeId": "https://github.com/angular/components/blob/main/src/material/chips/chips.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Chips Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-chip disabled>Orange</mat-chip>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Configuring Global Defaults for Bottom Sheets in Angular Material",
    "codeDescription": "Shows how to specify global default options for bottom sheets by providing a MAT_BOTTOM_SHEET_DEFAULT_OPTIONS in the application's root module.",
    "codeLanguage": "typescript",
    "codeTokens": 69,
    "codeId": "https://github.com/angular/components/blob/main/src/material/bottom-sheet/bottom-sheet.md#2025-04-11_snippet_4",
    "pageTitle": "Using MatBottomSheet in Angular Material",
    "codeList": [
      {
        "language": "typescript",
        "code": "@NgModule({\n  providers: [\n    {provide: MAT_BOTTOM_SHEET_DEFAULT_OPTIONS, useValue: {hasBackdrop: false}}\n  ]\n})"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Defining Angular Module for Drag and Drop Functionality",
    "codeDescription": "Angular module declaration for the drag and drop feature set. Includes the necessary components, directives, and dependencies for implementing drag and drop interfaces.",
    "codeLanguage": "typescript",
    "codeTokens": 205,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-11_snippet_8",
    "pageTitle": "Angular CDK Drag-Drop API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class DragDropModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<DragDropModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<DragDropModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<DragDropModule, never, [typeof CdkDropList, typeof CdkDropListGroup, typeof CdkDrag, typeof CdkDragHandle, typeof CdkDragPreview, typeof CdkDragPlaceholder], [typeof CdkScrollableModule, typeof CdkDropList, typeof CdkDropListGroup, typeof CdkDrag, typeof CdkDragHandle, typeof CdkDragPreview, typeof CdkDragPlaceholder]>;\n}"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Defining MatPaginatedTabHeader Abstract Class",
    "codeDescription": "This abstract class provides the base implementation for paginated tab headers in Material Tabs.",
    "codeLanguage": "typescript",
    "codeTokens": 629,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material Tabs API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export abstract class MatPaginatedTabHeader implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy {\n    constructor(...args: unknown[]);\n    _alignInkBarToSelectedTab(): void;\n    _animationsDisabled: boolean;\n    protected _changeDetectorRef: ChangeDetectorRef;\n    _checkPaginationEnabled(): void;\n    _checkScrollingControls(): void;\n    protected readonly _destroyed: Subject<void>;\n    disablePagination: boolean;\n    _disableScrollAfter: boolean;\n    _disableScrollBefore: boolean;\n    protected _elementRef: ElementRef<HTMLElement>;\n    get focusIndex(): number;\n    set focusIndex(value: number);\n    _getLayoutDirection(): Direction;\n    _getMaxScrollDistance(): number;\n    _handleKeydown(event: KeyboardEvent): void;\n    _handlePaginatorClick(direction: ScrollDirection): void;\n    _handlePaginatorPress(direction: ScrollDirection, mouseEvent?: MouseEvent): void;\n    readonly indexFocused: EventEmitter<number>;\n    abstract _inkBar: {\n        hide: () => void;\n        alignToElement: (element: HTMLElement) => void;\n    };\n    _isValidIndex(index: number): boolean;\n    abstract _items: QueryList<MatPaginatedTabHeaderItem>;\n    protected abstract _itemSelected(event: KeyboardEvent): void;\n    abstract _nextPaginator: ElementRef<HTMLElement>;\n    static ngAcceptInputType_disablePagination: unknown;\n    static ngAcceptInputType_selectedIndex: unknown;\n    ngAfterContentChecked(): void;\n    ngAfterContentInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    _onContentChanges(): void;\n    abstract _previousPaginator: ElementRef<HTMLElement>;\n    get scrollDistance(): number;\n    set scrollDistance(value: number);\n    _scrollHeader(direction: ScrollDirection): {\n        maxScrollDistance: number;\n        distance: number;\n    };\n    _scrollToLabel(labelIndex: number): void;\n    get selectedIndex(): number;\n    set selectedIndex(v: number);\n    readonly selectFocusedIndex: EventEmitter<number>;\n    _setTabFocus(tabIndex: number): void;\n    _showPaginationControls: boolean;\n    _stopInterval(): void;\n    abstract _tabList: ElementRef<HTMLElement>;\n    abstract _tabListContainer: ElementRef<HTMLElement>;\n    abstract _tabListInner: ElementRef<HTMLElement>;\n    updatePagination(): void;\n    _updateTabScrollPosition(): void;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatPaginatedTabHeader, never, never, { \"disablePagination\": { \"alias\": \"disablePagination\"; \"required\": false; }; \"selectedIndex\": { \"alias\": \"selectedIndex\"; \"required\": false; }; }, { \"selectFocusedIndex\": \"selectFocusedIndex\"; \"indexFocused\": \"indexFocused\"; }, never, never, true, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatPaginatedTabHeader, never>;\n}"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Implementing InputModalityDetector Class in Angular",
    "codeDescription": "A service that detects and tracks how users are interacting with the application, providing observables to monitor input modality changes.",
    "codeLanguage": "typescript",
    "codeTokens": 161,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/a11y/index.api.md#2025-04-11_snippet_5",
    "pageTitle": "Angular CDK A11y API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class InputModalityDetector implements OnDestroy {\n    constructor(...args: unknown[]);\n    readonly modalityChanged: Observable<InputModality>;\n    readonly modalityDetected: Observable<InputModality>;\n    get mostRecentModality(): InputModality;\n    _mostRecentTarget: HTMLElement | null;\n    // (undocumented)\n    ngOnDestroy(): void;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<InputModalityDetector, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<InputModalityDetector>;\n}"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Implementing cdkObserveContent Directive in Angular HTML Template",
    "codeDescription": "This snippet demonstrates how to use the cdkObserveContent directive in an Angular template. It attaches the directive to a div element wrapping ng-content, triggering a function when the content changes.",
    "codeLanguage": "html",
    "codeTokens": 82,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/observers/observers.md#2025-04-11_snippet_0",
    "pageTitle": "Angular CDK Observers Package Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"projected-content-wrapper\" (cdkObserveContent)=\"projectContentChanged()\">\n  <ng-content></ng-content>\n</div>"
      }
    ],
    "relevance": 0.893
  },
  {
    "codeTitle": "Allowing Pointer Events on Input Placeholder",
    "codeDescription": "Modifies the input component to allow pointer events on the placeholder element.",
    "codeLanguage": "TypeScript",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG_ARCHIVE.md#2025-04-11_snippet_150",
    "pageTitle": "Angular Components Changelog Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "([#3878](https://github.com/angular/material2/issues/3878)) ([32b7426](https://github.com/angular/material2/commit/32b7426))"
      }
    ],
    "relevance": 0.892
  },
  {
    "codeTitle": "Defining MatTabNavPanel Class in TypeScript for Angular Material",
    "codeDescription": "This snippet defines the MatTabNavPanel class, which represents a panel for tab navigation in Angular Material. It includes properties for active tab ID and panel ID, along with Angular-specific metadata for component declaration and factory.",
    "codeLanguage": "TypeScript",
    "codeTokens": 167,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/tabs/index.api.md#2025-04-11_snippet_7",
    "pageTitle": "Angular Material Tabs API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export class MatTabNavPanel {\n    _activeTabId?: string;\n    id: string;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatTabNavPanel, \"mat-tab-nav-panel\", [\"matTabNavPanel\"], { \"id\": { \"alias\": \"id\"; \"required\": false; }; }, {}, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatTabNavPanel, never>;\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Migrating from TreeControl to LevelAccessor/ChildrenAccessor",
    "codeDescription": "Example showing how to migrate from the deprecated TreeControl to the new levelAccessor or childrenAccessor API for CdkTree.",
    "codeLanguage": "typescript",
    "codeTokens": 175,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG.md#2025-04-11_snippet_11",
    "pageTitle": "Angular Components Changelog",
    "codeList": [
      {
        "language": "typescript",
        "code": "// DEPRECATED: Using TreeControl\n@Component({\n  template: `<cdk-tree [treeControl]=\"treeControl\"></cdk-tree>`\n})\nexport class OldTreeComponent {\n  treeControl = new FlatTreeControl<Node>(\n    node => node.level,\n    node => node.expandable\n  );\n}\n\n// NEW: Using childrenAccessor\n@Component({\n  template: `<cdk-tree [childrenAccessor]=\"getChildren\" [isExpandable]=\"isNodeExpandable\"></cdk-tree>`\n})\nexport class NewTreeComponent {\n  getChildren = (node: Node) => node.children;\n  isNodeExpandable = (node: Node) => node.children && node.children.length > 0;\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Checking Viewport Size with BreakpointObserver in TypeScript",
    "codeDescription": "Demonstrates how to use BreakpointObserver's isMatched method to check if the current viewport matches a specific media query condition.",
    "codeLanguage": "typescript",
    "codeTokens": 55,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/layout/layout.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Layout Package Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const isSmallScreen = breakpointObserver.isMatched('(max-width: 599px)');"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Defining Position Constraint Function Type for Drag Operations",
    "codeDescription": "TypeScript type definition for DragConstrainPosition, a function type that allows custom positioning logic during drag operations, taking user pointer position, drag reference, dimensions, and pickup position as parameters.",
    "codeLanguage": "typescript",
    "codeTokens": 86,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-11_snippet_5",
    "pageTitle": "Angular CDK Drag-Drop API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export type DragConstrainPosition = (userPointerPosition: Point, dragRef: DragRef, dimensions: DOMRect, pickupPositionInElement: Point) => Point;"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Configuring Stepper Global Options for Error Display in Angular",
    "codeDescription": "Sets up global configuration to show error messages in steppers. This enables error state display for all non-linear steppers in the application when steps contain invalid inputs.",
    "codeLanguage": "typescript",
    "codeTokens": 74,
    "codeId": "https://github.com/angular/components/blob/main/src/material/stepper/stepper.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material Stepper Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@NgModule({\n  providers: [\n    {\n      provide: STEPPER_GLOBAL_OPTIONS,\n      useValue: { showError: true }\n    }\n  ]\n})"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Configuring Moment Date Adapter with UTC",
    "codeDescription": "Setting up MomentDateAdapter with UTC timezone support using provider configuration.",
    "codeLanguage": "typescript",
    "codeTokens": 48,
    "codeId": "https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-11_snippet_7",
    "pageTitle": "Angular Material Datepicker Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "bootstrapApplication(MyApp, {\n  providers: [provideMomentDateAdapter(undefined, {useUtc: true})]\n});"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Applying Theme to All Components in SCSS",
    "codeDescription": "Example of applying a custom theme to all Angular Material components using the all-component-themes mixin.",
    "codeLanguage": "scss",
    "codeTokens": 153,
    "codeId": "https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-11_snippet_5",
    "pageTitle": "Angular Material 2 Theming Guide",
    "codeList": [
      {
        "language": "scss",
        "code": "@use '@angular/material' as mat;\n\n$my-primary: mat.m2-define-palette(mat.$m2-indigo-palette, 500);\n$my-accent: mat.m2-define-palette(mat.$m2-pink-palette, A200, A100, A400);\n\n$my-theme: mat.m2-define-light-theme((\n color: (\n   primary: $my-primary,\n   accent: $my-accent,\n ),\n typography: mat.m2-define-typography-config(),\n density: 0,\n));\n\n@include mat.all-component-themes($my-theme);"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Defining MatProgressBarHarness Class and Interfaces in TypeScript",
    "codeDescription": "This code snippet defines the testing harness for Material Progress Bar components. It includes the MatProgressBarHarness class which extends ComponentHarness and provides methods to interact with progress bars during tests, along with the ProgressBarHarnessFilters interface that extends BaseHarnessFilters.",
    "codeLanguage": "typescript",
    "codeTokens": 195,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/progress-bar/testing/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Progress Bar Testing API",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatProgressBarHarness extends ComponentHarness {\n    getMode(): Promise<string | null>;\n    getValue(): Promise<number | null>;\n    // (undocumented)\n    static hostSelector: string;\n    static with<T extends MatProgressBarHarness>(this: ComponentHarnessConstructor<T>, options?: ProgressBarHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport interface ProgressBarHarnessFilters extends BaseHarnessFilters {\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Implementing MatRangeDateSelectionModel for Date Range Selection",
    "codeDescription": "TypeScript class that extends MatDateSelectionModel to handle date range selection. It implements methods for adding dates to the range, checking completion status, validating the date range, and cloning the model.",
    "codeLanguage": "typescript",
    "codeTokens": 168,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-11_snippet_18",
    "pageTitle": "Angular Material Datepicker API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class MatRangeDateSelectionModel<D> extends MatDateSelectionModel<DateRange<D>, D> {\n    constructor(adapter: DateAdapter<D>);\n    add(date: D | null): void;\n    clone(): MatRangeDateSelectionModel<D>;\n    isComplete(): boolean;\n    isValid(): boolean;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatRangeDateSelectionModel<any>, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<MatRangeDateSelectionModel<any>>;\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Version Header Format in Markdown",
    "codeDescription": "Format used to denote version releases with their codenames and dates.",
    "codeLanguage": "markdown",
    "codeTokens": 45,
    "codeId": "https://github.com/angular/components/blob/main/CHANGELOG.md#2025-04-11_snippet_23",
    "pageTitle": "Angular Components Changelog",
    "codeList": [
      {
        "language": "markdown",
        "code": "# 16.2.12 \"practical-pinecone\" (2023-11-08)"
      }
    ],
    "relevance": 0.888
  },
  {
    "codeTitle": "Loading MatButtonHarnesses with getAllHarnesses and getHarness Methods",
    "codeDescription": "This snippet shows how to use the HarnessLoader to get one or all instances of MatButtonHarness from a component. It demonstrates the difference between getHarness() which returns the first matching harness and getAllHarnesses() which returns an array of all matching harnesses.",
    "codeLanguage": "typescript",
    "codeTokens": 127,
    "codeId": "https://github.com/angular/components/blob/main/guides/using-component-harnesses.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Component Harnesses Testing Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {MatButtonHarness} from '@angular/material/button/testing';\n\n...\n\nit('should work', async () => {\n  const buttons = await loader.getAllHarnesses(MatButtonHarness); // length: 3\n  const firstButton = await loader.getHarness(MatButtonHarness); // === buttons[0]\n});"
      }
    ],
    "relevance": 0.888
  },
  {
    "codeTitle": "Defining Angular Material Tabs Testing Harnesses and Interfaces",
    "codeDescription": "Defines the complete testing harness API for Angular Material tabs components, including classes for tab groups, individual tabs, tab links, and navigation bars. Also includes filter interfaces for testing component instances.",
    "codeLanguage": "typescript",
    "codeTokens": 623,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/tabs/testing/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Tabs Testing API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ComponentHarnessConstructor } from '@angular/cdk/testing';\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\nimport { HarnessLoader } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatTabGroupHarness extends ComponentHarness {\n    getSelectedTab(): Promise<MatTabHarness>;\n    getTabs(filter?: TabHarnessFilters): Promise<MatTabHarness[]>;\n    static hostSelector: string;\n    selectTab(filter?: TabHarnessFilters): Promise<void>;\n    static with<T extends MatTabGroupHarness>(this: ComponentHarnessConstructor<T>, options?: TabGroupHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport class MatTabHarness extends ContentContainerComponentHarness<string> {\n    getAriaLabel(): Promise<string | null>;\n    getAriaLabelledby(): Promise<string | null>;\n    getLabel(): Promise<string>;\n    protected getRootHarnessLoader(): Promise<HarnessLoader>;\n    getTextContent(): Promise<string>;\n    static hostSelector: string;\n    isDisabled(): Promise<boolean>;\n    isSelected(): Promise<boolean>;\n    select(): Promise<void>;\n    static with<T extends MatTabHarness>(this: ComponentHarnessConstructor<T>, options?: TabHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport class MatTabLinkHarness extends ComponentHarness {\n    click(): Promise<void>;\n    getLabel(): Promise<string>;\n    static hostSelector: string;\n    isActive(): Promise<boolean>;\n    isDisabled(): Promise<boolean>;\n    static with<T extends MatTabLinkHarness>(this: ComponentHarnessConstructor<T>, options?: TabLinkHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport class MatTabNavBarHarness extends ComponentHarness {\n    clickLink(filter?: TabLinkHarnessFilters): Promise<void>;\n    getActiveLink(): Promise<MatTabLinkHarness>;\n    getLinks(filter?: TabLinkHarnessFilters): Promise<MatTabLinkHarness[]>;\n    getPanel(): Promise<MatTabNavPanelHarness>;\n    static hostSelector: string;\n    static with<T extends MatTabNavBarHarness>(this: ComponentHarnessConstructor<T>, options?: TabNavBarHarnessFilters): HarnessPredicate<T>;\n}\n\n// @public\nexport interface TabGroupHarnessFilters extends BaseHarnessFilters {\n    selectedTabLabel?: string | RegExp;\n}\n\n// @public\nexport interface TabHarnessFilters extends BaseHarnessFilters {\n    label?: string | RegExp;\n    selected?: boolean;\n}\n\n// @public\nexport interface TabLinkHarnessFilters extends BaseHarnessFilters {\n    label?: string | RegExp;\n}\n\n// @public\nexport interface TabNavBarHarnessFilters extends BaseHarnessFilters {\n}\n\n// @public\nexport interface TabNavPanelHarnessFilters extends BaseHarnessFilters {\n}"
      }
    ],
    "relevance": 0.888
  },
  {
    "codeTitle": "Custom Date Adapter Implementation",
    "codeDescription": "Example of providing a custom DateAdapter implementation with custom date formats.",
    "codeLanguage": "typescript",
    "codeTokens": 67,
    "codeId": "https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-11_snippet_9",
    "pageTitle": "Angular Material Datepicker Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "bootstrapApplication(MyApp, {\n  providers: [\n    {provide: DateAdapter, useClass: MyDateAdapter},\n    {provide: MAT_DATE_FORMATS, useValue: MY_DATE_FORMATS},\n  ]\n});"
      }
    ],
    "relevance": 0.887
  },
  {
    "codeTitle": "Defining FooterRowOutlet Directive in TypeScript",
    "codeDescription": "Defines a directive that provides a container for rendering footer rows. This outlet is used by the CdkTable to insert footer row elements into the DOM.",
    "codeLanguage": "TypeScript",
    "codeTokens": 153,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-11_snippet_14",
    "pageTitle": "Angular CDK Table API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export class FooterRowOutlet implements RowOutlet {\n    constructor(...args: unknown[]);\n    // (undocumented)\n    elementRef: ElementRef<any>;\n    // (undocumented)\n    viewContainer: ViewContainerRef;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<FooterRowOutlet, \"[footerRowOutlet]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<FooterRowOutlet, never>;\n}"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Removing HammerJS script import from HTML",
    "codeDescription": "Example of a HammerJS script tag import in index.html that will be removed by the migration schematic.",
    "codeLanguage": "html",
    "codeTokens": 51,
    "codeId": "https://github.com/angular/components/blob/main/guides/v9-hammerjs-migration.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material V9 HammerJS Migration Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<script src=\"https://my-cdn.io/hammer.min.js\"></script>"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Using Manual Change Detection in Angular Test Harnesses",
    "codeDescription": "This snippet demonstrates how to use the manualChangeDetection function to disable automatic change detection in a test, allowing for checking component state during async operations.",
    "codeLanguage": "typescript",
    "codeTokens": 138,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/testing/test-harnesses.md#2025-04-11_snippet_1",
    "pageTitle": "Angular CDK Testing Infrastructure",
    "codeList": [
      {
        "language": "typescript",
        "code": "it('checks state while async action is in progress', async () => {\n  const buttonHarness = loader.getHarness(MyButtonHarness);\n  await manualChangeDetection(async () => {\n    await buttonHarness.click();\n    fixture.detectChanges();\n    // Check expectations while async click operation is in progress.\n    expect(isProgressSpinnerVisible()).toBe(true);\n    await fixture.whenStable();\n    // Check expectations after async click operation complete.\n    expect(isProgressSpinnerVisible()).toBe(false);\n  });\n});"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "DatePicker Internationalization Service in Angular Material",
    "codeDescription": "Defines the MatDatepickerIntl class which provides internationalization services for the datepicker component. This service contains localized string properties for various UI elements like calendar labels, navigation buttons, and accessibility text.",
    "codeLanguage": "typescript",
    "codeTokens": 260,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-11_snippet_5",
    "pageTitle": "Angular Material Datepicker API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class MatDatepickerIntl {\n    calendarLabel: string;\n    readonly changes: Subject<void>;\n    closeCalendarLabel: string;\n    comparisonDateLabel: string;\n    // @deprecated\n    endDateLabel: string;\n    formatYearRange(start: string, end: string): string;\n    formatYearRangeLabel(start: string, end: string): string;\n    nextMonthLabel: string;\n    nextMultiYearLabel: string;\n    nextYearLabel: string;\n    openCalendarLabel: string;\n    prevMonthLabel: string;\n    prevMultiYearLabel: string;\n    prevYearLabel: string;\n    // @deprecated\n    startDateLabel: string;\n    switchToMonthViewLabel: string;\n    switchToMultiYearViewLabel: string;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDatepickerIntl, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<MatDatepickerIntl>;\n}"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Implementing DropListRef Class for Drop Container Management",
    "codeDescription": "Core class that manages a drop container for draggable items. Handles receiving dragged items, sorting, auto-scrolling, and emitting events for drop operations.",
    "codeLanguage": "typescript",
    "codeTokens": 474,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-11_snippet_14",
    "pageTitle": "Angular CDK Drag-Drop API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class DropListRef<T = any> {\n    constructor(element: ElementRef<HTMLElement> | HTMLElement, _dragDropRegistry: DragDropRegistry, _document: any, _ngZone: NgZone, _viewportRuler: ViewportRuler);\n    autoScrollDisabled: boolean;\n    autoScrollStep: number;\n    readonly beforeStarted: Subject<void>;\n    _canReceive(item: DragRef, x: number, y: number): boolean;\n    connectedTo(connectedTo: DropListRef[]): this;\n    data: T;\n    disabled: boolean;\n    dispose(): void;\n    drop(item: DragRef, currentIndex: number, previousIndex: number, previousContainer: DropListRef, isPointerOverContainer: boolean, distance: Point, dropPoint: Point, event?: MouseEvent | TouchEvent): void;\n    readonly dropped: Subject<{\n        item: DragRef;\n        currentIndex: number;\n        previousIndex: number;\n        container: DropListRef;\n        previousContainer: DropListRef;\n        isPointerOverContainer: boolean;\n        distance: Point;\n        dropPoint: Point;\n        event: MouseEvent | TouchEvent;\n    }>;\n    element: HTMLElement | ElementRef<HTMLElement>;\n    enter(item: DragRef, pointerX: number, pointerY: number, index?: number): void;\n    readonly entered: Subject<{\n        item: DragRef;\n        container: DropListRef;\n        currentIndex: number;\n    }>;\n    enterPredicate: (drag: DragRef, drop: DropListRef) => boolean;\n    exit(item: DragRef): void;\n    readonly exited: Subject<{\n        item: DragRef;\n        container: DropListRef;\n    }>;\n    getItemIndex(item: DragRef): number;\n    getScrollableParents(): readonly HTMLElement[];\n    _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined;\n    isDragging(): boolean;\n    _isOverContainer(x: number, y: number): boolean;\n    isReceiving(): boolean;\n    lockAxis: 'x' | 'y';\n}"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Creating a Checkbox Menu Item in Angular CDK",
    "codeDescription": "Shows how to implement a toggleable checkbox menu item using cdkMenuItemCheckbox directive with state binding.",
    "codeLanguage": "html",
    "codeTokens": 74,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/menu/menu.md#2025-04-11_snippet_8",
    "pageTitle": "Angular CDK Menu Module Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<button\n  class=\"example-menu-item\"\n  cdkMenuItemCheckbox\n  [cdkMenuItemChecked]=\"bold\"\n  (cdkMenuItemTriggered)=\"bold = !bold\">Bold</button>"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Multiple Parse Formats with Moment Adapter",
    "codeDescription": "Configuring MomentDateAdapter to support multiple date parsing formats and custom display formats.",
    "codeLanguage": "typescript",
    "codeTokens": 106,
    "codeId": "https://github.com/angular/components/blob/main/src/material/datepicker/datepicker.md#2025-04-11_snippet_11",
    "pageTitle": "Angular Material Datepicker Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "bootstrapApplication(MyApp, {\n  providers: [provideMomentDateAdapter({\n    parse: {\n      dateInput: ['l', 'LL'],\n    },\n    display: {\n      dateInput: 'L',\n      monthYearLabel: 'MMM YYYY',\n      dateA11yLabel: 'LL',\n      monthYearA11yLabel: 'MMMM YYYY',\n    },\n  })]\n});"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "TypeScript Platform Module API Declarations",
    "codeDescription": "Defines the public API for Angular CDK's platform module including platform detection utilities, browser feature checks, and DOM manipulation functions. Includes a Platform class for browser detection and various utility functions for handling events, scrolling, and shadow DOM operations.",
    "codeLanguage": "typescript",
    "codeTokens": 482,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/platform/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular CDK Platform API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import * as i0 from '@angular/core';\n\n// @public\nexport function _getEventTarget<T extends EventTarget>(event: Event): T | null;\n\n// @public\nexport function _getFocusedElementPierceShadowDom(): HTMLElement | null;\n\n// @public\nexport function getRtlScrollAxisType(): RtlScrollAxisType;\n\n// @public\nexport function _getShadowRoot(element: HTMLElement): ShadowRoot | null;\n\n// @public (undocumented)\nexport function getSupportedInputTypes(): Set<string>;\n\n// @public\nexport function _isTestEnvironment(): boolean;\n\n// @public\nexport function normalizePassiveListenerOptions(options: AddEventListenerOptions): AddEventListenerOptions | boolean;\n\n// @public\nexport class Platform {\n    constructor(..._args: unknown[]);\n    ANDROID: boolean;\n    BLINK: boolean;\n    EDGE: boolean;\n    FIREFOX: boolean;\n    IOS: boolean;\n    isBrowser: boolean;\n    SAFARI: boolean;\n    TRIDENT: boolean;\n    WEBKIT: boolean;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<Platform, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<Platform>;\n}\n\n// @public (undocumented)\nexport class PlatformModule {\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<PlatformModule, never>;\n    // (undocumented)\n    static ɵinj: i0.ɵɵInjectorDeclaration<PlatformModule>;\n    // (undocumented)\n    static ɵmod: i0.ɵɵNgModuleDeclaration<PlatformModule, never, never, never>;\n}\n\n// @public\nexport enum RtlScrollAxisType {\n    INVERTED = 2,\n    NEGATED = 1,\n    NORMAL = 0\n}\n\n// @public\nexport function supportsPassiveEventListeners(): boolean;\n\n// @public\nexport function supportsScrollBehavior(): boolean;\n\n// @public\nexport function _supportsShadowDom(): boolean;"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Rendering Directions in Google Maps with Angular Template",
    "codeDescription": "HTML template that displays a Google Map and conditionally renders directions using the MapDirectionsRenderer component. It uses the async pipe to subscribe to the directions results observable.",
    "codeLanguage": "html",
    "codeTokens": 114,
    "codeId": "https://github.com/angular/components/blob/main/src/google-maps/map-directions-renderer/README.md#2025-04-11_snippet_2",
    "pageTitle": "MapDirectionsRenderer in Angular Google Maps",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- google-maps-demo.component.html -->\n<google-map height=\"400px\" width=\"750px\" [center]=\"center\" [zoom]=\"zoom\">\n  @if (directionsResults$ | async; as directionsResults) {\n    <map-directions-renderer [directions]=\"directionsResults\" />\n  }\n</google-map>"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "MatColumnDef Implementation in TypeScript",
    "codeDescription": "Column definition for Material Table that extends CdkColumnDef, providing methods for column name management and CSS class name updates for styling.",
    "codeLanguage": "typescript",
    "codeTokens": 158,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/table/index.api.md#2025-04-11_snippet_4",
    "pageTitle": "Angular Material Table API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class MatColumnDef extends CdkColumnDef {\n    get name(): string;\n    set name(name: string);\n    protected _updateColumnCssClassName(): void;\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<MatColumnDef, \"[matColumnDef]\", never, { \"name\": { \"alias\": \"matColumnDef\"; \"required\": false; }; }, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatColumnDef, never>;\n}"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Configuring Overlay with a Scroll Strategy in Angular",
    "codeDescription": "Demonstrates how to associate an overlay with a scroll strategy by passing a function that returns a scroll strategy to the OverlayConfig. This example shows using the 'block' strategy which prevents scrolling while an overlay is open.",
    "codeLanguage": "typescript",
    "codeTokens": 85,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/overlay/scroll/scroll-strategy.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Components Scroll Strategies",
    "codeList": [
      {
        "language": "typescript",
        "code": "let overlayConfig = new OverlayConfig({\n  scrollStrategy: overlay.scrollStrategies.block()\n});\n\nthis._overlay.create(overlayConfig).attach(yourPortal);"
      }
    ],
    "relevance": 0.883
  },
  {
    "codeTitle": "Defining Angular Material Stepper Testing Harnesses and Interfaces",
    "codeDescription": "Defines test harnesses and interfaces for Angular Material stepper components including MatStepHarness, MatStepperHarness, navigation button harnesses, and related interfaces for filtering and configuration. These harnesses provide methods to interact with and verify stepper components in tests.",
    "codeLanguage": "typescript",
    "codeTokens": 537,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/stepper/testing/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Stepper Testing API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { ContentContainerComponentHarness } from '@angular/cdk/testing';\nimport { HarnessLoader } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatStepHarness extends ContentContainerComponentHarness<string> {\n    getAriaLabel(): Promise<string | null>;\n    getAriaLabelledby(): Promise<string | null>;\n    getLabel(): Promise<string>;\n    // (undocumented)\n    protected getRootHarnessLoader(): Promise<HarnessLoader>;\n    hasErrors(): Promise<boolean>;\n    static hostSelector: string;\n    isCompleted(): Promise<boolean>;\n    isOptional(): Promise<boolean>;\n    isSelected(): Promise<boolean>;\n    select(): Promise<void>;\n    static with(options?: StepHarnessFilters): HarnessPredicate<MatStepHarness>;\n}\n\n// @public\nexport class MatStepperHarness extends ComponentHarness {\n    getOrientation(): Promise<StepperOrientation>;\n    getSteps(filter?: StepHarnessFilters): Promise<MatStepHarness[]>;\n    static hostSelector: string;\n    selectStep(filter?: StepHarnessFilters): Promise<void>;\n    static with(options?: StepperHarnessFilters): HarnessPredicate<MatStepperHarness>;\n}\n\n// @public\nexport class MatStepperNextHarness extends StepperButtonHarness {\n    static hostSelector: string;\n    static with(options?: StepperButtonHarnessFilters): HarnessPredicate<MatStepperNextHarness>;\n}\n\n// @public\nexport class MatStepperPreviousHarness extends StepperButtonHarness {\n    static hostSelector: string;\n    static with(options?: StepperButtonHarnessFilters): HarnessPredicate<MatStepperPreviousHarness>;\n}\n\n// @public\nexport interface StepHarnessFilters extends BaseHarnessFilters {\n    completed?: boolean;\n    invalid?: boolean;\n    label?: string | RegExp;\n    selected?: boolean;\n}\n\n// @public\nexport interface StepperButtonHarnessFilters extends BaseHarnessFilters {\n    text?: string | RegExp;\n}\n\n// @public\nexport interface StepperHarnessFilters extends BaseHarnessFilters {\n    orientation?: StepperOrientation;\n}\n\n// @public\nexport enum StepperOrientation {\n    // (undocumented)\n    HORIZONTAL = 0,\n    // (undocumented)\n    VERTICAL = 1\n}"
      }
    ],
    "relevance": 0.882
  },
  {
    "codeTitle": "Configuring Robots.txt for Angular Material Documentation",
    "codeDescription": "Standard robots.txt configuration that defines the sitemap location and crawler permissions. Sets no crawling restrictions while pointing to the Angular Material sitemap.",
    "codeLanguage": "robots.txt",
    "codeTokens": 57,
    "codeId": "https://github.com/angular/components/blob/main/material.angular.io/src/robots.txt#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Components Robots.txt Configuration",
    "codeList": [
      {
        "language": "robots.txt",
        "code": "Sitemap: https://material.angular.io/sitemap.xml\nUser-agent: *\nDisallow:"
      }
    ],
    "relevance": 0.882
  },
  {
    "codeTitle": "Initializing ListKeyManager with Wrap in TypeScript",
    "codeDescription": "Shows how to initialize a FocusKeyManager with wrapping enabled for navigation through options.",
    "codeLanguage": "typescript",
    "codeTokens": 42,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/a11y/a11y.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Components A11y Package Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "this.keyManager = new FocusKeyManager(...).withWrap();"
      }
    ],
    "relevance": 0.882
  },
  {
    "codeTitle": "Accessible Sort Header Implementation",
    "codeDescription": "Example demonstrating how to implement accessible sorting with proper ARIA attributes and LiveAnnouncer service for screen reader support.",
    "codeLanguage": "typescript",
    "codeTokens": 145,
    "codeId": "https://github.com/angular/components/blob/main/src/material/sort/sort.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Material Sort Component Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { LiveAnnouncer } from '@angular/cdk/a11y';\n\n@Component({\n  selector: 'sort-overview-example',\n  templateUrl: 'sort-overview-example.html',\n})\nexport class SortOverviewExample {\n  constructor(private _liveAnnouncer: LiveAnnouncer) {}\n\n  announceSortChange(sortState: Sort) {\n    if (sortState.direction) {\n      this._liveAnnouncer.announce(`Sorted ${sortState.direction}ending`);\n    } else {\n      this._liveAnnouncer.announce('Sorting cleared');\n    }\n  }\n}"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Defining RenderRow Interface for Angular CDK Table",
    "codeDescription": "Interface that defines the structure for rendered table rows, containing the data object, data index, and row definition.",
    "codeLanguage": "typescript",
    "codeTokens": 80,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-11_snippet_17",
    "pageTitle": "Angular CDK Table API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export interface RenderRow<T> {\n    // (undocumented)\n    data: T;\n    // (undocumented)\n    dataIndex: number;\n    // (undocumented)\n    rowDef: CdkRowDef<T>;\n}"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Virtual Scrolling with Context Variables",
    "codeDescription": "Demonstrates usage of context variables available in cdkVirtualFor templates including index, count, first, last, even, and odd.",
    "codeLanguage": "typescript",
    "codeTokens": 106,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/scrolling/scrolling.md#2025-04-11_snippet_1",
    "pageTitle": "Angular CDK Scrolling Package Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<cdk-virtual-scroll-viewport itemSize=\"50\">\n  <div *cdkVirtualFor=\"let item of items; let index = index; let first = first\">\n    Item #{{index}} - {{first ? 'First' : ''}}\n  </div>\n</cdk-virtual-scroll-viewport>"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Angular CDK Drag-Drop Core Imports",
    "codeDescription": "Import statements for core Angular and RxJS dependencies used by the drag-drop module",
    "codeLanguage": "typescript",
    "codeTokens": 180,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/drag-drop/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular CDK Drag-Drop API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AfterViewInit } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OnChanges } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { OnInit } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { TemplateRef } from '@angular/core';\nimport { ViewContainerRef } from '@angular/core';"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Selective Column Display in CdkTable",
    "codeDescription": "Shows how to display only specific columns from those defined in the template, and in a custom order. This example displays only the age and username columns in that specific order.",
    "codeLanguage": "html",
    "codeTokens": 78,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-11_snippet_4",
    "pageTitle": "CdkTable: Angular's Unopinionated Data Table Component",
    "codeList": [
      {
        "language": "html",
        "code": "<tr cdk-row *cdkRowDef=\"let row; columns: ['age', 'username']\"></tr>"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Basic Value Selection with Angular Material Slider",
    "codeDescription": "Demonstrates how to create a basic slider with custom minimum, maximum and step values. The example shows setting initial value to 1.5 with a range from 1 to 5 in 0.5 step increments.",
    "codeLanguage": "html",
    "codeTokens": 89,
    "codeId": "https://github.com/angular/components/blob/main/src/material/slider/slider.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Slider Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<mat-slider min=\"1\" max=\"5\" step=\"0.5\">\n  <input matSliderThumb value=\"1.5\">\n</mat-slider>"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Creating a Complete Material Theme in SCSS",
    "codeDescription": "Comprehensive example of creating a Material theme with custom palettes, typography, and density configurations.",
    "codeLanguage": "scss",
    "codeTokens": 186,
    "codeId": "https://github.com/angular/components/blob/main/guides/material-2.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material 2 Theming Guide",
    "codeList": [
      {
        "language": "scss",
        "code": "@use '@angular/material' as mat;\n\n$my-primary: mat.m2-define-palette(mat.$m2-indigo-palette, 500);\n$my-accent: mat.m2-define-palette(mat.$m2-pink-palette, A200, A100, A400);\n\n// The \"warn\" palette is optional and defaults to red if not specified.\n$my-warn: mat.m2-define-palette(mat.$m2-red-palette);\n\n$my-theme: mat.m2-define-light-theme((\n color: (\n   primary: $my-primary,\n   accent: $my-accent,\n   warn: $my-warn,\n ),\n typography: mat.m2-define-typography-config(),\n density: 0,\n));"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Implementing MapPolygon in Angular TypeScript Component",
    "codeDescription": "This snippet demonstrates how to set up a component that uses the MapPolygon and GoogleMap components from @angular/google-maps. It defines the center coordinates, zoom level, and vertices for the polygon.",
    "codeLanguage": "typescript",
    "codeTokens": 195,
    "codeId": "https://github.com/angular/components/blob/main/src/google-maps/map-polygon/README.md#2025-04-11_snippet_0",
    "pageTitle": "MapPolygon Component in Angular Google Maps",
    "codeList": [
      {
        "language": "typescript",
        "code": "// google-maps-demo.component.ts\nimport {Component} from '@angular/core';\nimport {GoogleMap, MapPolygon} from '@angular/google-maps';\n\n@Component({\n  selector: 'google-map-demo',\n  templateUrl: 'google-map-demo.html',\n  imports: [GoogleMap, MapPolygon],\n})\nexport class GoogleMapDemo {\n  center: google.maps.LatLngLiteral = {lat: 24, lng: 12};\n  zoom = 4;\n\n  vertices: google.maps.LatLngLiteral[] = [\n    {lat: 13, lng: 13},\n    {lat: -13, lng: 0},\n    {lat: 13, lng: -13},\n  ];\n}"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Implementing NativeDateAdapter in TypeScript",
    "codeDescription": "Date adapter implementation for handling native JavaScript Date objects with locale-aware formatting and parsing.",
    "codeLanguage": "TypeScript",
    "codeTokens": 389,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/core/index.api.md#2025-04-11_snippet_7",
    "pageTitle": "Angular Material Core API Report",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export class NativeDateAdapter extends DateAdapter<Date> {\n    constructor(...args: unknown[]);\n    addCalendarDays(date: Date, days: number): Date;\n    addCalendarMonths(date: Date, months: number): Date;\n    addCalendarYears(date: Date, years: number): Date;\n    addSeconds(date: Date, amount: number): Date;\n    clone(date: Date): Date;\n    createDate(year: number, month: number, date: number): Date;\n    deserialize(value: any): Date | null;\n    format(date: Date, displayFormat: Object): string;\n    getDate(date: Date): number;\n    getDateNames(): string[];\n    getDayOfWeek(date: Date): number;\n    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n    getFirstDayOfWeek(): number;\n    getHours(date: Date): number;\n    getMinutes(date: Date): number;\n    getMonth(date: Date): number;\n    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n    getNumDaysInMonth(date: Date): number;\n    getSeconds(date: Date): number;\n    getYear(date: Date): number;\n    getYearName(date: Date): string;\n    invalid(): Date;\n    isDateInstance(obj: any): obj is Date;\n    isValid(date: Date): boolean;\n    parse(value: any, parseFormat?: any): Date | null;\n    parseTime(userValue: any, parseFormat?: any): Date | null;\n    setTime(target: Date, hours: number, minutes: number, seconds: number): Date;\n    today(): Date;\n    toIso8601(date: Date): string;\n    useUtcForDisplay: boolean;\n}"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Defining Testing Harnesses for Angular Material Sort Components in TypeScript",
    "codeDescription": "This code defines testing harnesses for Angular Material sort components. It includes classes like MatSortHarness and MatSortHeaderHarness that extend ComponentHarness, interfaces for filtering sort headers, and methods for interacting with sort components in tests.",
    "codeLanguage": "typescript",
    "codeTokens": 326,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/sort/testing/index.api.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Sort Testing API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { BaseHarnessFilters } from '@angular/cdk/testing';\nimport { ComponentHarness } from '@angular/cdk/testing';\nimport { HarnessPredicate } from '@angular/cdk/testing';\n\n// @public\nexport class MatSortHarness extends ComponentHarness {\n    getActiveHeader(): Promise<MatSortHeaderHarness | null>;\n    getSortHeaders(filter?: SortHeaderHarnessFilters): Promise<MatSortHeaderHarness[]>;\n    // (undocumented)\n    static hostSelector: string;\n    static with(options?: SortHarnessFilters): HarnessPredicate<MatSortHarness>;\n}\n\n// @public\nexport class MatSortHeaderHarness extends ComponentHarness {\n    click(): Promise<void>;\n    getLabel(): Promise<string>;\n    getSortDirection(): Promise<SortDirection>;\n    // (undocumented)\n    static hostSelector: string;\n    isActive(): Promise<boolean>;\n    isDisabled(): Promise<boolean>;\n    static with(options?: SortHeaderHarnessFilters): HarnessPredicate<MatSortHeaderHarness>;\n}\n\n// @public (undocumented)\nexport interface SortHarnessFilters extends BaseHarnessFilters {\n}\n\n// @public (undocumented)\nexport interface SortHeaderHarnessFilters extends BaseHarnessFilters {\n    // (undocumented)\n    label?: string | RegExp;\n    // (undocumented)\n    sortDirection?: SortDirection;\n}\n\n// (No @packageDocumentation comment for this package)"
      }
    ],
    "relevance": 0.878
  },
  {
    "codeTitle": "Defining StickyDirection Type for Angular CDK Table",
    "codeDescription": "Type representing the four possible directions for sticky positioning: top, bottom, left, and right.",
    "codeLanguage": "typescript",
    "codeTokens": 51,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-11_snippet_23",
    "pageTitle": "Angular CDK Table API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export type StickyDirection = 'top' | 'bottom' | 'left' | 'right';"
      }
    ],
    "relevance": 0.878
  },
  {
    "codeTitle": "Configuring Advanced Angular Material Theme with Color Map",
    "codeDescription": "This example demonstrates how to create a more complex theme configuration using a color map. It sets different palettes for primary and tertiary colors, and explicitly sets the theme type to light.",
    "codeLanguage": "scss",
    "codeTokens": 110,
    "codeId": "https://github.com/angular/components/blob/main/guides/theming.md#2025-04-11_snippet_2",
    "pageTitle": "Angular Material Theming Guide",
    "codeList": [
      {
        "language": "scss",
        "code": "@use '@angular/material' as mat;\n\nhtml {\n  @include mat.theme((\n    color: (\n      primary: mat.$violet-palette,\n      tertiary: mat.$orange-palette,\n      theme-type: light,\n    ),\n    typography: Roboto,\n    density: 0\n  ));\n}"
      }
    ],
    "relevance": 0.878
  },
  {
    "codeTitle": "Applying High Contrast Overrides with Media Queries in Sass",
    "codeDescription": "Example of how to apply high contrast theme overrides using media queries. This snippet shows how to use the generated high-contrast-overrides mixin with the prefers-contrast media feature.",
    "codeLanguage": "scss",
    "codeTokens": 73,
    "codeId": "https://github.com/angular/components/blob/main/src/material/schematics/ng-generate/theme-color/README.md#2025-04-11_snippet_2",
    "pageTitle": "Material 3 Custom Theme Schematic Documentation",
    "codeList": [
      {
        "language": "scss",
        "code": "@media (prefers-contrast: more) {\n  @include my-theme.high-contrast-overrides(light);\n}"
      }
    ],
    "relevance": 0.877
  },
  {
    "codeTitle": "Defining MatDatepicker Component in TypeScript",
    "codeDescription": "Declares the MatDatepicker component, extending MatDatepickerBase. It provides datepicker functionality for Angular Material.",
    "codeLanguage": "TypeScript",
    "codeTokens": 133,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-11_snippet_3",
    "pageTitle": "Angular Material Datepicker API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export class MatDatepicker<D> extends MatDatepickerBase<MatDatepickerControl<D>, D | null, D> {\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatDatepicker<any>, \"mat-datepicker\", [\"matDatepicker\"], {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatDatepicker<any>, never>;\n}"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Defining StickyOffset Type for Angular CDK Table",
    "codeDescription": "Type representing a sticky offset value which can be a number, null, or undefined, used for positioning sticky elements.",
    "codeLanguage": "typescript",
    "codeTokens": 46,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-11_snippet_24",
    "pageTitle": "Angular CDK Table API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export type StickyOffset = number | null | undefined;"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "DatePicker Panel Interface in Angular Material",
    "codeDescription": "Defines the MatDatepickerPanel interface that datepicker implementations must implement. It includes properties and methods for handling datepicker states, inputs, and events.",
    "codeLanguage": "typescript",
    "codeTokens": 138,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/datepicker/index.api.md#2025-04-11_snippet_7",
    "pageTitle": "Angular Material Datepicker API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export interface MatDatepickerPanel<C extends MatDatepickerControl<D>, S, D = ExtractDateTypeFromSelection<S>> {\n    closedStream: EventEmitter<void>;\n    color: ThemePalette;\n    datepickerInput: C;\n    disabled: boolean;\n    id: string;\n    open(): void;\n    opened: boolean;\n    openedStream: EventEmitter<void>;\n    registerInput(input: C): MatDateSelectionModel<S, D>;\n    stateChanges: Subject<void>;\n}"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Implementing Node Activation Events for Accessibility in HTML",
    "codeDescription": "This snippet demonstrates how to handle both click and keyboard activation events on tree nodes for accessibility, allowing users to interact with nodes using either mouse or keyboard.",
    "codeLanguage": "html",
    "codeTokens": 80,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/tree/tree.md#2025-04-11_snippet_8",
    "pageTitle": "CDK Tree Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<cdk-tree-node\n    *cdkNodeDef=\"let node\"\n    (click)=\"performAction(node)\"\n    (activation)=\"performAction($event)\">\n</cdk-tree-node>"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Defining Google Map Component in TypeScript for Angular",
    "codeDescription": "This snippet defines the GoogleMap class, which represents the main Google Maps component in Angular. It includes properties for map options, methods for map manipulation, and Observable events for various map interactions.",
    "codeLanguage": "typescript",
    "codeTokens": 584,
    "codeId": "https://github.com/angular/components/blob/main/goldens/google-maps/index.api.md#2025-04-11_snippet_1",
    "pageTitle": "Angular Google Maps API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class GoogleMap implements OnChanges, OnInit, OnDestroy {\n    // (undocumented)\n    set options(options: google.maps.MapOptions);\n    get overlayMapTypes(): google.maps.MVCArray<google.maps.MapType | null>;\n    panBy(x: number, y: number): void;\n    panTo(latLng: google.maps.LatLng | google.maps.LatLngLiteral): void;\n    panToBounds(latLngBounds: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral, padding?: number | google.maps.Padding): void;\n    readonly projectionChanged: Observable<void>;\n    _resolveMap(): Promise<google.maps.Map>;\n    readonly tilesloaded: Observable<void>;\n    readonly tiltChanged: Observable<void>;\n    width: string | number | null;\n    // (undocumented)\n    set zoom(zoom: number);\n    readonly zoomChanged: Observable<void>;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<GoogleMap, \"google-map\", [\"googleMap\"], { \"height\": { \"alias\": \"height\"; \"required\": false; }; \"width\": { \"alias\": \"width\"; \"required\": false; }; \"mapId\": { \"alias\": \"mapId\"; \"required\": false; }; \"mapTypeId\": { \"alias\": \"mapTypeId\"; \"required\": false; }; \"center\": { \"alias\": \"center\"; \"required\": false; }; \"zoom\": { \"alias\": \"zoom\"; \"required\": false; }; \"options\": { \"alias\": \"options\"; \"required\": false; }; }, { \"mapInitialized\": \"mapInitialized\"; \"authFailure\": \"authFailure\"; \"boundsChanged\": \"boundsChanged\"; \"centerChanged\": \"centerChanged\"; \"mapClick\": \"mapClick\"; \"mapDblclick\": \"mapDblclick\"; \"mapDrag\": \"mapDrag\"; \"mapDragend\": \"mapDragend\"; \"mapDragstart\": \"mapDragstart\"; \"headingChanged\": \"headingChanged\"; \"idle\": \"idle\"; \"maptypeidChanged\": \"maptypeidChanged\"; \"mapMousemove\": \"mapMousemove\"; \"mapMouseout\": \"mapMouseout\"; \"mapMouseover\": \"mapMouseover\"; \"projectionChanged\": \"projectionChanged\"; \"mapRightclick\": \"mapRightclick\"; \"tilesloaded\": \"tilesloaded\"; \"tiltChanged\": \"tiltChanged\"; \"zoomChanged\": \"zoomChanged\"; }, never, [\"*\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<GoogleMap, never>;\n}"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Connecting Drop Lists Using Direct References and IDs in Angular CDK",
    "codeDescription": "Two ways to connect drop lists: using direct references with template variables or using string IDs. Both approaches create a bidirectional connection allowing items to be transferred between the lists.",
    "codeLanguage": "html",
    "codeTokens": 168,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/drag-drop/drag-drop.md#2025-04-11_snippet_0",
    "pageTitle": "Angular CDK Drag and Drop Module Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- This is valid -->\n<div cdkDropList #listOne=\"cdkDropList\" [cdkDropListConnectedTo]=\"[listTwo]\"></div>\n<div cdkDropList #listTwo=\"cdkDropList\" [cdkDropListConnectedTo]=\"[listOne]\"></div>\n\n<!-- This is valid as well -->\n<div cdkDropList id=\"list-one\" [cdkDropListConnectedTo]=\"['list-two']\"></div>\n<div cdkDropList id=\"list-two\" [cdkDropListConnectedTo]=\"['list-one']\"></div>"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Installing Angular Material with Angular CLI",
    "codeDescription": "Command to install Angular Material, Component Dev Kit (CDK), and Angular Animations in your project, then run the installation schematic.",
    "codeLanguage": "bash",
    "codeTokens": 44,
    "codeId": "https://github.com/angular/components/blob/main/guides/schematics.md#2025-04-11_snippet_0",
    "pageTitle": "Angular Material Installation and Code Generation",
    "codeList": [
      {
        "language": "bash",
        "code": "ng add @angular/material"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Using Material Theme CSS Variables",
    "codeDescription": "Demonstrates how to use Material theme CSS variables for custom component styling.",
    "codeLanguage": "css",
    "codeTokens": 79,
    "codeId": "https://github.com/angular/components/blob/main/guides/theming.md#2025-04-11_snippet_9",
    "pageTitle": "Angular Material Theming Guide",
    "codeList": [
      {
        "language": "css",
        "code": ":host {\n  background: var(--mat-sys-primary-container);\n  color: var(--mat-sys-on-primary-container);\n  border: 1px solid var(--mat-sys-outline-variant);\n  font: var(--mat-sys-body-large);\n}"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Implementing MatOptgroup Component in Angular Material",
    "codeDescription": "Definition for MatOptgroup which is used to group related MatOption components together in a select dropdown. Supports setting label and disabled state.",
    "codeLanguage": "typescript",
    "codeTokens": 206,
    "codeId": "https://github.com/angular/components/blob/main/goldens/material/select/index.api.md#2025-04-11_snippet_5",
    "pageTitle": "Angular Material Select API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// @public\nexport class MatOptgroup {\n    constructor(...args: unknown[]);\n    disabled: boolean;\n    _inert: boolean;\n    label: string;\n    _labelId: string;\n    // (undocumented)\n    static ngAcceptInputType_disabled: unknown;\n    // (undocumented)\n    static ɵcmp: i0.ɵɵComponentDeclaration<MatOptgroup, \"mat-optgroup\", [\"matOptgroup\"], { \"label\": { \"alias\": \"label\"; \"required\": false; }; \"disabled\": { \"alias\": \"disabled\"; \"required\": false; }; }, {}, never, [\"*\", \"mat-option, ng-container\"], true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<MatOptgroup, never>;\n}"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Alternative Non-Table HTML Implementation of CdkTable",
    "codeDescription": "Demonstrates how to use CdkTable with custom elements instead of native HTML table tags. This approach provides more styling flexibility by using directive selectors like cdk-table, cdk-row, and cdk-cell.",
    "codeLanguage": "html",
    "codeTokens": 334,
    "codeId": "https://github.com/angular/components/blob/main/src/cdk/table/table.md#2025-04-11_snippet_9",
    "pageTitle": "CdkTable: Angular's Unopinionated Data Table Component",
    "codeList": [
      {
        "language": "html",
        "code": "<cdk-table [dataSource]=\"dataSource\">\n  <!-- User name Definition -->\n  <ng-container cdkColumnDef=\"username\">\n    <cdk-header-cell *cdkHeaderCellDef> User name </cdk-header-cell>\n    <cdk-cell *cdkCellDef=\"let row\"> {{row.username}} </cdk-cell>\n  </ng-container>\n\n  <!-- Age Definition -->\n  <ng-container cdkColumnDef=\"age\">\n    <cdk-header-cell *cdkHeaderCellDef> Age </cdk-header-cell>\n    <cdk-cell *cdkCellDef=\"let row\"> {{row.age}} </cdk-cell>\n  </ng-container>\n\n  <!-- Title Definition -->\n  <ng-container cdkColumnDef=\"title\">\n    <cdk-header-cell *cdkHeaderCellDef> Title </cdk-header-cell>\n    <cdk-cell *cdkCellDef=\"let row\"> {{row.title}} </cdk-cell>\n  </ng-container>\n\n  <!-- Header and Row Declarations -->\n  <cdk-header-row *cdkHeaderRowDef=\"['username', 'age', 'title']\"></cdk-header-row>\n  <cdk-row *cdkRowDef=\"let row; columns: ['username', 'age', 'title']\"></cdk-row>\n</cdk-table>"
      }
    ],
    "relevance": 0.873
  },
  {
    "codeTitle": "Defining CdkRecycleRows Directive in TypeScript",
    "codeDescription": "Defines a directive for row recycling in CDK tables. This directive optimizes table rendering by reusing row elements instead of recreating them.",
    "codeLanguage": "TypeScript",
    "codeTokens": 132,
    "codeId": "https://github.com/angular/components/blob/main/goldens/cdk/table/index.api.md#2025-04-11_snippet_2",
    "pageTitle": "Angular CDK Table API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export class CdkRecycleRows {\n    // (undocumented)\n    static ɵdir: i0.ɵɵDirectiveDeclaration<CdkRecycleRows, \"cdk-table[recycleRows], table[cdk-table][recycleRows]\", never, {}, {}, never, never, true, never>;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<CdkRecycleRows, never>;\n}"
      }
    ],
    "relevance": 0.873
  }
]