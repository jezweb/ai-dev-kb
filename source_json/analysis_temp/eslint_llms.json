[
  {
    "codeTitle": "Using Message Placeholders in context.report() in JavaScript",
    "codeDescription": "Shows how to use placeholders in the message and provide data for dynamic content in the error message.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_4",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "context.report({\n    node: node,\n    message: \"Unexpected identifier: {{ identifier }}\",\n    data: {\n        identifier: node.name\n    }\n});"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Configuring ESLint with Browser Environment",
    "codeDescription": "Example ESLint configuration file that defines settings for browser JavaScript, including browser globals and recommended rules from the @eslint/js package.",
    "codeLanguage": "javascript",
    "codeTokens": 112,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/getting-started.md#2025-04-14_snippet_0",
    "pageTitle": "Getting Started with ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from \"eslint/config\";\nimport globals from \"globals\";\nimport js from \"@eslint/js\";\n\nexport default defineConfig([\n\t{ files: [\"**/*.js\"], languageOptions: { globals: globals.browser } },\n\t{ files: [\"**/*.js\"], plugins: { js }, extends: [\"js/recommended\"] },\n]);"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Installing and Running ESLint using npm",
    "codeDescription": "Commands to install, configure, and run ESLint on JavaScript files using npm. This snippet demonstrates the basic setup process for ESLint in a project.",
    "codeLanguage": "Shell",
    "codeTokens": 63,
    "codeId": "https://github.com/eslint/eslint/blob/main/README.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Project Overview and Usage Guide",
    "codeList": [
      {
        "language": "Shell",
        "code": "npm init @eslint/config@latest\n\nnpx eslint yourfile.js"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Updating Linter Configuration from ESLintRC to Flat Config Format in JavaScript",
    "codeDescription": "This snippet demonstrates how to update the Linter configuration from the old eslintrc format to the new flat config format. It shows the change in structure for specifying parser options.",
    "codeLanguage": "javascript",
    "codeTokens": 114,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_19",
    "pageTitle": "Migration Guide for ESLint v9.x",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslintrc config format\nlinter.verify(code, {\n\tparserOptions: {\n\t\tecmaVersion: 6,\n\t},\n});\n\n// flat config format\nlinter.verify(code, {\n\tlanguageOptions: {\n\t\tecmaVersion: 6,\n\t},\n});"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Configuring Shared Settings in ESLint (JavaScript)",
    "codeDescription": "Demonstrates how to add shared settings to an ESLint configuration file. The settings object is supplied to every rule and can be accessed by custom plugins.",
    "codeLanguage": "javascript",
    "codeTokens": 186,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_16",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tsettings: {\n\t\t\tsharedData: \"Hello\",\n\t\t},\n\t\tplugins: {\n\t\t\tcustomPlugin: {\n\t\t\t\trules: {\n\t\t\t\t\t\"my-rule\": {\n\t\t\t\t\t\tmeta: {\n\t\t\t\t\t\t\t// custom rule's meta information\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcreate(context) {\n\t\t\t\t\t\t\tconst sharedData = context.settings.sharedData;\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t// code\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\trules: {\n\t\t\t\"customPlugin/my-rule\": \"error\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Configuring Global and Non-Global Ignores in ESLint",
    "codeDescription": "Examples of setting up global and non-global ignore patterns in ESLint configuration using the ignores property.",
    "codeLanguage": "javascript",
    "codeTokens": 207,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_8",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\n// Example of global ignores\nexport default defineConfig([\n    {\n      ignores: [\".config/\", \"dist/\", \"tsconfig.json\"] // acts as global ignores, due to the absence of other properties\n    },\n    { ... }, // ... other configuration object, inherit global ignores\n    { ... }, // ... other configuration object inherit global ignores\n]);\n\n// Example of non-global ignores\nexport default defineConfig([\n    {\n      ignores: [\".config/**\", \"dir1/script1.js\"],\n      rules: { ... } // the presence of this property dictates non-global ignores\n    },\n    {\n      ignores: [\"other-dir/**\", \"dist/script2.js\"],\n      rules: { ... } // the presence of this property dictates non-global ignores\n    },\n]);"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Correct Usage: Parallel Asynchronous Operations (JavaScript)",
    "codeDescription": "This snippet shows the correct way to handle multiple asynchronous operations in parallel, creating promises for all operations at once and then awaiting their resolution using Promise.all().",
    "codeLanguage": "JavaScript",
    "codeTokens": 126,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-await-in-loop.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-await-in-loop",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function foo(things) {\n  const promises = [];\n  for (const thing of things) {\n    // Good: all asynchronous operations are immediately started.\n    promises.push(doAsyncWork(thing));\n  }\n  // Now that all the asynchronous operations are running, here we wait until they all complete.\n  const results = await Promise.all(promises);\n  return results;\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Configuring TypeScript File Extensions in ESLint",
    "codeDescription": "Demonstrates how to configure ESLint to lint TypeScript files with .ts, .cts, and .mts extensions using the files pattern matching.",
    "codeLanguage": "javascript",
    "codeTokens": 93,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_6",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.ts\", \"**/*.cts\", \"**.*.mts\"],\n\t},\n\t// ...other config\n]);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Configuring ESLint with Custom Parser in Modern Configuration",
    "codeDescription": "Example of how to configure ESLint to use a custom parser in the modern flat config format (eslint.config.js). Shows how to specify the parser in the languageOptions property.",
    "codeLanguage": "javascript",
    "codeTokens": 88,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-parsers.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Custom Parsers Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nmodule.exports = [\n\t{\n\t\tlanguageOptions: {\n\t\t\tparser: require(\"./path/to/awesome-custom-parser\"),\n\t\t},\n\t},\n];"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Setting up pnpm Configuration for ESLint",
    "codeDescription": "Required .npmrc configuration settings when using pnpm package manager with ESLint to ensure proper dependency resolution and compatibility.",
    "codeLanguage": "text",
    "codeTokens": 52,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/getting-started.md#2025-04-14_snippet_2",
    "pageTitle": "Getting Started with ESLint",
    "codeList": [
      {
        "language": "text",
        "code": "auto-install-peers=true\nnode-linker=hoisted"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Applying a Predefined Configuration Object with Custom Overrides in ESLint",
    "codeDescription": "This snippet demonstrates how to import the recommended JavaScript rules configuration and combine it with custom rule settings. The predefined configuration is applied first, followed by an object that overrides the severity of the no-unused-vars rule.",
    "codeLanguage": "javascript",
    "codeTokens": 115,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/combine-configs.md#2025-04-14_snippet_0",
    "pageTitle": "Combining ESLint Configurations",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport js from \"@eslint/js\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\tjs.configs.recommended,\n\t{\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Basic Rule Configuration in ESLint",
    "codeDescription": "Shows basic rule configuration with error severity level for the semi rule.",
    "codeLanguage": "javascript",
    "codeTokens": 70,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_14",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\trules: {\n\t\t\tsemi: \"error\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Using a Shareable Configuration Package in ESLint (JavaScript)",
    "codeDescription": "Demonstrates how to use a shareable configuration package in an ESLint configuration file. The example imports a configuration and extends it while modifying a rule.",
    "codeLanguage": "javascript",
    "codeTokens": 115,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_19",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport exampleConfig from \"eslint-config-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\textends: [exampleConfig],\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Basic ESLint Plugin Structure",
    "codeDescription": "Basic structure for an ESLint plugin showing the required properties meta, configs, rules, and processors. Supports both ESM and CommonJS export patterns.",
    "codeLanguage": "javascript",
    "codeTokens": 87,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/plugins.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Plugin Development Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const plugin = {\n\tmeta: {},\n\tconfigs: {},\n\trules: {},\n\tprocessors: {},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Basic Usage of context.report() in JavaScript",
    "codeDescription": "Demonstrates the simplest way to use context.report() with just node and message parameters.",
    "codeLanguage": "javascript",
    "codeTokens": 48,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_3",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "context.report({\n\tnode: node,\n\tmessage: \"Unexpected identifier\",\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Basic Custom ESLint Rule Structure",
    "codeDescription": "Shows the fundamental structure of a custom ESLint rule with metadata configuration and create function.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_0",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "// customRule.js\n\nmodule.exports = {\n\tmeta: {\n\t\ttype: \"suggestion\",\n\t\tdocs: {\n\t\t\tdescription: \"Description of the rule\",\n\t\t},\n\t\tfixable: \"code\",\n\t\tschema: [], // no options\n\t},\n\tcreate: function (context) {\n\t\treturn {\n\t\t\t// callback functions\n\t\t};\n\t},\n};"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "ESLint Text-Based Linting",
    "codeDescription": "Demonstrates how to lint a string of code directly using ESLint's lintText API with custom configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 221,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { ESLint } = require(\"eslint\");\n\nconst testCode = `\n  const name = \"eslint\";\n  if(true) {\n    console.log(\"constant condition warning\")\n  };\n`;\n\n(async function main() {\n\t// 1. Create an instance\n\tconst eslint = new ESLint({\n\t\toverrideConfigFile: true,\n\t\toverrideConfig: {\n\t\t\tlanguageOptions: {\n\t\t\t\tecmaVersion: 2018,\n\t\t\t\tsourceType: \"commonjs\",\n\t\t\t},\n\t\t},\n\t});\n\n\t// 2. Lint text.\n\tconst results = await eslint.lintText(testCode);\n\n\t// 3. Format the results.\n\tconst formatter = await eslint.loadFormatter(\"stylish\");\n\tconst resultText = formatter.format(results);\n\n\t// 4. Output it.\n\tconsole.log(resultText);\n})().catch(error => {\n\tprocess.exitCode = 1;\n\tconsole.error(error);\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Exporting Flat and Legacy Configurations in ESLint Plugin",
    "codeDescription": "This snippet demonstrates how to export both flat and legacy configurations for an ESLint plugin. It includes the plugin structure with rules, and shows how to assign configurations that work with both the current (flat config) and old (eslintrc) systems.",
    "codeLanguage": "javascript",
    "codeTokens": 350,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/plugins.md#2025-04-14_snippet_6",
    "pageTitle": "ESLint Plugin Development Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const plugin = {\n\tmeta: {\n\t\tname: \"eslint-plugin-example\",\n\t\tversion: \"1.2.3\",\n\t},\n\tconfigs: {},\n\trules: {\n\t\t\"dollar-sign\": {\n\t\t\tcreate(context) {\n\t\t\t\t// rule implementation ...\n\t\t\t},\n\t\t},\n\t},\n};\n\n// assign configs here so we can reference `plugin`\nObject.assign(plugin.configs, {\n\t// flat config format\n\t\"flat/recommended\": [\n\t\t{\n\t\t\tplugins: {\n\t\t\t\texample: plugin,\n\t\t\t},\n\t\t\trules: {\n\t\t\t\t\"example/dollar-sign\": \"error\",\n\t\t\t},\n\t\t\tlanguageOptions: {\n\t\t\t\tglobals: {\n\t\t\t\t\tmyGlobal: \"readonly\",\n\t\t\t\t},\n\t\t\t\tparserOptions: {\n\t\t\t\t\tecmaFeatures: {\n\t\t\t\t\t\tjsx: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n\n\t// eslintrc format\n\trecommended: {\n\t\tplugins: [\"example\"],\n\t\trules: {\n\t\t\t\"example/dollar-sign\": \"error\",\n\t\t},\n\t\tglobals: {\n\t\t\tmyGlobal: \"readonly\",\n\t\t},\n\t\tparserOptions: {\n\t\t\tecmaFeatures: {\n\t\t\t\tjsx: true,\n\t\t\t},\n\t\t},\n\t},\n});\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Fixed Race Condition Using Intermediate Variable",
    "codeDescription": "Shows how to fix the race condition by storing the async result in a local variable before updating the shared state.",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/require-atomic-updates.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: require-atomic-updates",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function addLengthOfSinglePage(pageNum) {\n  const lengthOfThisPage = await getPageLength(pageNum);\n\n  totalLength += lengthOfThisPage;\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Including .gitignore Patterns in ESLint Configuration",
    "codeDescription": "This example demonstrates how to include patterns from a .gitignore file in the ESLint configuration using the @eslint/compat package. It loads the .gitignore file and translates its patterns into ESLint ignore rules.",
    "codeLanguage": "javascript",
    "codeTokens": 143,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore.md#2025-04-14_snippet_7",
    "pageTitle": "Configuring ESLint Ignore Files",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport { includeIgnoreFile } from \"@eslint/compat\";\nimport { fileURLToPath } from \"node:url\";\n\nconst gitignorePath = fileURLToPath(new URL(\".gitignore\", import.meta.url));\n\nexport default defineConfig([\n\tincludeIgnoreFile(gitignorePath),\n\t{\n\t\t// your overrides\n\t},\n]);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Using Object.hasOwn() in JavaScript (ES2022)",
    "codeDescription": "This snippet shows the usage of Object.hasOwn(), introduced in ES2022, as a shorter alternative to Object.prototype.hasOwnProperty.call(). It provides a more concise way to check if an object has a specific property.",
    "codeLanguage": "JavaScript",
    "codeTokens": 83,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-object-has-own.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: prefer-object-has-own",
    "codeList": [
      {
        "language": "javascript",
        "code": "if (Object.hasOwn(object, \"foo\")) {\n  console.log(\"has property foo\")\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "File Linting and Fixing Implementation",
    "codeDescription": "Function to lint files using ESLint and apply automatic fixes.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/integration-tutorial.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Node.js API Integration Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function lintAndFix(eslint, filePaths) {\n\tconst results = await eslint.lintFiles(filePaths);\n\n\t// Apply automatic fixes and output fixed code\n\tawait ESLint.outputFixes(results);\n\n\treturn results;\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Using LegacyESLint for Backwards Compatibility in JavaScript",
    "codeDescription": "This snippet demonstrates how to import and use the LegacyESLint class, which provides the v8.x ESLint functionality. This is useful for projects that need to maintain compatibility with the older ESLint API during the migration process.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_18",
    "pageTitle": "Migration Guide for ESLint v9.x",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { LegacyESLint } = require(\"eslint/use-at-your-own-risk\");"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Incorrect NaN Comparisons in JavaScript",
    "codeDescription": "Examples of incorrect code that directly compares values with NaN, which ESLint will flag as errors when the use-isnan rule is enabled.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/use-isnan.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: use-isnan",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint use-isnan: \"error\"*/\n\nif (foo == NaN) {\n    // ...\n}\n\nif (foo != NaN) {\n    // ...\n}\n\nif (foo == Number.NaN) {\n    // ...\n}\n\nif (foo != Number.NaN) {\n    // ...\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Instantiating ESLint in JavaScript",
    "codeDescription": "Shows how to create a new ESLint instance using the constructor returned by loadESLint(). It also demonstrates how to check which configuration system the returned constructor uses.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_13",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// loads the default ESLint that the CLI would use based on process.cwd()\nconst DefaultESLint = await loadESLint();\nconst eslint = new DefaultESLint();\n\nif (DefaultESLint.configType === \"flat\") {\n\t// do something specific to flat config\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Calculating ESLint Configuration for a File in JavaScript",
    "codeDescription": "This code shows how to use the eslint.calculateConfigForFile() method to determine the configuration for a specific file, which can be useful for debugging purposes.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const config = await eslint.calculateConfigForFile(filePath);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Defining Array-Based Schema for ESLint Rule Options (JavaScript)",
    "codeDescription": "Example of defining an array-based schema for the 'yoda' rule options. It specifies a primary mode argument and an optional object with 'exceptRange' property.",
    "codeLanguage": "javascript",
    "codeTokens": 120,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_17",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n\tmeta: {\n\t\tschema: [\n\t\t\t{\n\t\t\t\tenum: [\"always\", \"never\"],\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\texceptRange: { type: \"boolean\" },\n\t\t\t\t},\n\t\t\t\tadditionalProperties: false,\n\t\t\t},\n\t\t],\n\t},\n};"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Adding Plugin Meta Information in JavaScript",
    "codeDescription": "Demonstrates how to add meta information to an ESLint plugin, including the name and version. This is necessary for the plugin to work with --cache and --print-config options in flat config.",
    "codeLanguage": "javascript",
    "codeTokens": 119,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/plugin-migration-flat-config.md#2025-04-14_snippet_1",
    "pageTitle": "Plugin Migration to Flat Config for ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "const plugin = {\n\tmeta: {\n\t\tname: \"eslint-plugin-example\",\n\t\tversion: \"1.0.0\",\n\t},\n\tconfigs: {},\n\trules: {},\n\tprocessors: {},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Configuring ECMAScript 5 with Script Source Type in ESLint",
    "codeDescription": "Example configuration file for linting ECMAScript 5 code in script mode. This sets the ecmaVersion to 5 and sourceType to script, which means code has a shared global scope and runs in non-strict mode.",
    "codeLanguage": "javascript",
    "codeTokens": 116,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options.md#2025-04-14_snippet_0",
    "pageTitle": "Configuring Language Options in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlanguageOptions: {\n\t\t\tecmaVersion: 5,\n\t\t\tsourceType: \"script\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "ESLint Linter Message Format Example",
    "codeDescription": "Example of the message object structure returned by the Linter.verify() method, showing error details and fix suggestions.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_19",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "[\n\t{\n\t\tfatal: false,\n\t\truleId: \"semi\",\n\t\tseverity: 2,\n\t\tline: 1,\n\t\tcolumn: 23,\n\t\tmessage: \"Expected a semicolon.\",\n\t\tfix: {\n\t\t\trange: [1, 15],\n\t\t\ttext: \";\",\n\t\t},\n\t},\n];"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Basic ESLint Usage in Node.js",
    "codeDescription": "Demonstrates basic usage of ESLint class to lint JavaScript files in a directory and output results using the stylish formatter.",
    "codeLanguage": "javascript",
    "codeTokens": 153,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { ESLint } = require(\"eslint\");\n\n(async function main() {\n\t// 1. Create an instance.\n\tconst eslint = new ESLint();\n\n\t// 2. Lint files.\n\tconst results = await eslint.lintFiles([\"lib/**/*.js\"]);\n\n\t// 3. Format the results.\n\tconst formatter = await eslint.loadFormatter(\"stylish\");\n\tconst resultText = formatter.format(results);\n\n\t// 4. Output it.\n\tconsole.log(resultText);\n})().catch(error => {\n\tprocess.exitCode = 1;\n\tconsole.error(error);\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Correct Usage of 'let' and 'const' in JavaScript (ESLint no-var rule)",
    "codeDescription": "This snippet demonstrates the correct way to declare variables using 'let' and 'const', adhering to the 'no-var' ESLint rule.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-var.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-var",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-var: \"error\"*/\n\nlet x = \"y\";\nconst CONFIG = {};"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Basic Flat Config with Default Glob Pattern",
    "codeDescription": "Example of a flat config configuration with the default glob pattern. It extends the recommended configuration and adds custom rule configurations.",
    "codeLanguage": "javascript",
    "codeTokens": 116,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_10",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\n\nimport js from \"@eslint/js\";\n\nexport default [\n\tjs.configs.recommended, // Recommended config applied to all files\n\t// Override the recommended config\n\t{\n\t\trules: {\n\t\t\tindent: [\"error\", 2],\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t\t// ...other configuration\n\t},\n];"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Basic Rule Configuration in ESLint Config File",
    "codeDescription": "Example of configuring multiple ESLint rules in a configuration file with different severities and options.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rules Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\trules: {\n\t\t\teqeqeq: \"off\",\n\t\t\t\"no-unused-vars\": \"error\",\n\t\t\t\"prefer-const\": [\"error\", { ignoreReadBeforeAssign: true }],\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Implementing Code Path Event Handlers in ESLint Rules",
    "codeDescription": "Demonstrates how to define event handlers for code path analysis in an ESLint rule. Includes handlers for code path start/end, segment start/end, unreachable segment start/end, and segment loops.",
    "codeLanguage": "javascript",
    "codeTokens": 846,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/code-path-analysis.md#2025-04-14_snippet_1",
    "pageTitle": "Code Path Analysis in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n\tmeta: {\n\t\t// ...\n\t},\n\tcreate(context) {\n\t\treturn {\n\t\t\t/**\n\t\t\t * This is called at the start of analyzing a code path.\n\t\t\t * In this time, the code path object has only the initial segment.\n\t\t\t *\n\t\t\t * @param {CodePath} codePath - The new code path.\n\t\t\t * @param {ASTNode} node - The current node.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonCodePathStart(codePath, node) {\n\t\t\t\t// do something with codePath\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * This is called at the end of analyzing a code path.\n\t\t\t * In this time, the code path object is complete.\n\t\t\t *\n\t\t\t * @param {CodePath} codePath - The completed code path.\n\t\t\t * @param {ASTNode} node - The current node.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonCodePathEnd(codePath, node) {\n\t\t\t\t// do something with codePath\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * This is called when a reachable code path segment was created.\n\t\t\t * It meant the code path is forked or merged.\n\t\t\t * In this time, the segment has the previous segments and has been\n\t\t\t * judged reachable or not.\n\t\t\t *\n\t\t\t * @param {CodePathSegment} segment - The new code path segment.\n\t\t\t * @param {ASTNode} node - The current node.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonCodePathSegmentStart(segment, node) {\n\t\t\t\t// do something with segment\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * This is called when a reachable code path segment was left.\n\t\t\t * In this time, the segment does not have the next segments yet.\n\t\t\t *\n\t\t\t * @param {CodePathSegment} segment - The left code path segment.\n\t\t\t * @param {ASTNode} node - The current node.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonCodePathSegmentEnd(segment, node) {\n\t\t\t\t// do something with segment\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * This is called when an unreachable code path segment was created.\n\t\t\t * It meant the code path is forked or merged.\n\t\t\t * In this time, the segment has the previous segments and has been\n\t\t\t * judged reachable or not.\n\t\t\t *\n\t\t\t * @param {CodePathSegment} segment - The new code path segment.\n\t\t\t * @param {ASTNode} node - The current node.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonUnreachableCodePathSegmentStart(segment, node) {\n\t\t\t\t// do something with segment\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * This is called when an unreachable code path segment was left.\n\t\t\t * In this time, the segment does not have the next segments yet.\n\t\t\t *\n\t\t\t * @param {CodePathSegment} segment - The left code path segment.\n\t\t\t * @param {ASTNode} node - The current node.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonUnreachableCodePathSegmentEnd(segment, node) {\n\t\t\t\t// do something with segment\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * This is called when a code path segment was looped.\n\t\t\t * Usually segments have each previous segments when created,\n\t\t\t * but when looped, a segment is added as a new previous segment into a\n\t\t\t * existing segment.\n\t\t\t *\n\t\t\t * @param {CodePathSegment} fromSegment - A code path segment of source.\n\t\t\t * @param {CodePathSegment} toSegment - A code path segment of destination.\n\t\t\t * @param {ASTNode} node - The current node.\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tonCodePathSegmentLoop(fromSegment, toSegment, node) {\n\t\t\t\t// do something with segment\n\t\t\t},\n\t\t};\n\t},\n};"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Displaying ESLint CLI Help Documentation",
    "codeDescription": "A comprehensive listing of all available ESLint CLI options, including configuration options, rule specification, fixing problems, ignoring files, output formatting, and more. This is the output shown when running 'npx eslint -h'.",
    "codeLanguage": "txt",
    "codeTokens": 873,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Command Line Interface Reference",
    "codeList": [
      {
        "language": "txt",
        "code": "eslint [options] file.js [file.js] [dir]\n\nBasic configuration:\n  --no-config-lookup              Disable look up for eslint.config.js\n  -c, --config path::String       Use this configuration instead of eslint.config.js, eslint.config.mjs, or\n                                  eslint.config.cjs\n  --inspect-config                Open the config inspector with the current configuration\n  --ext [String]                  Specify additional file extensions to lint\n  --global [String]               Define global variables\n  --parser String                 Specify the parser to be used\n  --parser-options Object         Specify parser options\n\nSpecify Rules and Plugins:\n  --plugin [String]               Specify plugins\n  --rule Object                   Specify rules\n\nFix Problems:\n  --fix                           Automatically fix problems\n  --fix-dry-run                   Automatically fix problems without saving the changes to the file system\n  --fix-type Array                Specify the types of fixes to apply (directive, problem, suggestion, layout)\n\nIgnore Files:\n  --no-ignore                     Disable use of ignore files and patterns\n  --ignore-pattern [String]       Patterns of files to ignore\n\nUse stdin:\n  --stdin                         Lint code provided on <STDIN> - default: false\n  --stdin-filename String         Specify filename to process STDIN as\n\nHandle Warnings:\n  --quiet                         Report errors only - default: false\n  --max-warnings Int              Number of warnings to trigger nonzero exit code - default: -1\n\nOutput:\n  -o, --output-file path::String  Specify file to write report to\n  -f, --format String             Use a specific output format - default: stylish\n  --color, --no-color             Force enabling/disabling of color\n\nInline configuration comments:\n  --no-inline-config              Prevent comments from changing config or rules\n  --report-unused-disable-directives  Adds reported errors for unused eslint-disable and eslint-enable directives\n  --report-unused-disable-directives-severity String  Chooses severity level for reporting unused eslint-disable and\n                                                      eslint-enable directives - either: off, warn, error, 0, 1, or 2\n  --report-unused-inline-configs String  Adds reported errors for unused eslint inline config comments - either: off, warn, error, 0, 1, or 2\n\nCaching:\n  --cache                         Only check changed files - default: false\n  --cache-file path::String       Path to the cache file. Deprecated: use --cache-location - default: .eslintcache\n  --cache-location path::String   Path to the cache file or directory\n  --cache-strategy String         Strategy to use for detecting changed files in the cache - either: metadata or\n                                  content - default: metadata\n\nSuppressing Violations:\n  --suppress-all                  Suppress all violations - default: false\n  --suppress-rule [String]        Suppress specific rules\n  --suppressions-location path::String  Specify the location of the suppressions file\n  --prune-suppressions            Prune unused suppressions - default: false\n\nMiscellaneous:\n  --init                          Run config initialization wizard - default: false\n  --env-info                      Output execution environment information - default: false\n  --no-error-on-unmatched-pattern  Prevent errors when pattern is unmatched\n  --exit-on-fatal-error           Exit with exit code 2 in case of fatal error - default: false\n  --no-warn-ignored               Suppress warnings when the file list includes ignored files\n  --pass-on-no-patterns           Exit with exit code 0 in case no file patterns are passed\n  --debug                         Output debugging information\n  -h, --help                      Show help\n  -v, --version                   Output the version number\n  --print-config path::String     Print the configuration for the given file\n  --stats                         Add statistics to the lint report - default: false\n  --flag [String]                 Enable a feature flag"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Defining Custom Processor Structure in JavaScript",
    "codeDescription": "This code snippet demonstrates the structure of a custom processor module for ESLint. It includes the preprocess and postprocess methods, along with metadata and optional autofix support.",
    "codeLanguage": "javascript",
    "codeTokens": 315,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-processors-deprecated.md#2025-04-14_snippet_0",
    "pageTitle": "Custom Processors for ESLint (Deprecated)",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n\tprocessors: {\n\t\t\"processor-name\": {\n\t\t\tmeta: {\n\t\t\t\tname: \"eslint-processor-name\",\n\t\t\t\tversion: \"1.2.3\",\n\t\t\t},\n\t\t\t// takes text of the file and filename\n\t\t\tpreprocess: function (text, filename) {\n\t\t\t\t// here, you can strip out any non-JS content\n\t\t\t\t// and split into multiple strings to lint\n\n\t\t\t\treturn [\n\t\t\t\t\t// return an array of code blocks to lint\n\t\t\t\t\t{ text: code1, filename: \"0.js\" },\n\t\t\t\t\t{ text: code2, filename: \"1.js\" },\n\t\t\t\t];\n\t\t\t},\n\n\t\t\t// takes a Message[][] and filename\n\t\t\tpostprocess: function (messages, filename) {\n\t\t\t\t// `messages` argument contains two-dimensional array of Message objects\n\t\t\t\t// where each top-level array item contains array of lint messages related\n\t\t\t\t// to the text that was returned in array from preprocess() method\n\n\t\t\t\t// you need to return a one-dimensional array of the messages you want to keep\n\t\t\t\treturn [].concat(...messages);\n\t\t\t},\n\n\t\t\tsupportsAutofix: true, // (optional, defaults to false)\n\t\t},\n\t},\n};"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Disabling ESLint Rules for Specific Lines in JavaScript",
    "codeDescription": "Demonstrates various ways to disable ESLint rules for specific lines using inline comments. This can be done for all rules or specific rules.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_8",
    "pageTitle": "ESLint Rules Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "alert(\"foo\"); // eslint-disable-line\n\n// eslint-disable-next-line\nalert(\"foo\");\n\n/* eslint-disable-next-line */\nalert(\"foo\");\n\nalert(\"foo\"); /* eslint-disable-line */"
      },
      {
        "language": "javascript",
        "code": "alert(\"foo\"); // eslint-disable-line no-alert\n\n// eslint-disable-next-line no-alert\nalert(\"foo\");\n\nalert(\"foo\"); /* eslint-disable-line no-alert */\n\n/* eslint-disable-next-line no-alert */\nalert(\"foo\");"
      },
      {
        "language": "javascript",
        "code": "alert(\"foo\"); // eslint-disable-line no-alert, quotes, semi\n\n// eslint-disable-next-line no-alert, quotes, semi\nalert(\"foo\");\n\nalert(\"foo\"); /* eslint-disable-line no-alert, quotes, semi */\n\n/* eslint-disable-next-line no-alert, quotes, semi */\nalert(\"foo\");\n\n/* eslint-disable-next-line\n  no-alert,\n  quotes,\n  semi\n*/\nalert(\"foo\");"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Basic RuleTester Usage in JavaScript",
    "codeDescription": "A basic example of using RuleTester to test a custom ESLint rule, showing setup, valid test cases, and invalid test cases with error messages.",
    "codeLanguage": "javascript",
    "codeTokens": 184,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_25",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "\"use strict\";\n\nconst rule = require(\"../../../lib/rules/my-rule\"),\n\tRuleTester = require(\"eslint\").RuleTester;\n\nconst ruleTester = new RuleTester();\n\nruleTester.run(\"my-rule\", rule, {\n\tvalid: [\n\t\t{\n\t\t\tcode: \"var foo = true\",\n\t\t\toptions: [{ allowFoo: true }],\n\t\t},\n\t],\n\n\tinvalid: [\n\t\t{\n\t\t\tcode: \"var invalidVariable = true\",\n\t\t\terrors: [{ message: \"Unexpected invalid variable.\" }],\n\t\t},\n\t\t{\n\t\t\tcode: \"var invalidVariable = true\",\n\t\t\terrors: [{ message: /^Unexpected.+variable/ }],\n\t\t},\n\t],\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Testing a Custom ESLint Rule in JavaScript",
    "codeDescription": "Demonstrates how to write tests for a custom ESLint rule using RuleTester.",
    "codeLanguage": "javascript",
    "codeTokens": 128,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_7",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "// avoid-name.test.js\n\nvar rule = require(\"../../../lib/rules/avoid-name\");\nvar RuleTester = require(\"eslint\").RuleTester;\n\nvar ruleTester = new RuleTester();\nruleTester.run(\"avoid-name\", rule, {\n\tvalid: [\"bar\", \"baz\"],\n\tinvalid: [\n\t\t{\n\t\t\tcode: \"foo\",\n\t\t\terrors: [\n\t\t\t\t{\n\t\t\t\t\tmessageId: \"avoidName\",\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Marking Variables as Used in ESLint Rule Implementation",
    "codeDescription": "Example of creating an ESLint rule that marks a specific variable as used in the context of a ReturnStatement. This technique helps with rules like no-unused-vars by telling ESLint that a variable is being used in a custom way it might not normally detect.",
    "codeLanguage": "javascript",
    "codeTokens": 174,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_21",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n\tcreate: function (context) {\n\t\tvar sourceCode = context.sourceCode;\n\n\t\treturn {\n\t\t\tReturnStatement(node) {\n\t\t\t\t// look in the scope of the function for myCustomVar and mark as used\n\t\t\t\tsourceCode.markVariableAsUsed(\"myCustomVar\", node);\n\n\t\t\t\t// or: look in the global scope for myCustomVar and mark as used\n\t\t\t\tsourceCode.markVariableAsUsed(\"myCustomVar\");\n\t\t\t},\n\t\t};\n\t\t// ...\n\t},\n};"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Configuring Rules with Options in ESLint Config File",
    "codeDescription": "Example of configuring the 'curly' rule with the 'multi' option in an ESLint config file. This demonstrates how rule configurations are specified with severity and options.",
    "codeLanguage": "javascript",
    "codeTokens": 85,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_0",
    "pageTitle": "Migration Guide for ESLint v9.x",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\n\nexport default [\n\t{\n\t\trules: {\n\t\t\tcurly: [\"error\", \"multi\"],\n\t\t},\n\t},\n];"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Using Cache Strategy with ESLint CLI",
    "codeDescription": "Example showing how to use the --cache-strategy option with 'content' value to detect changed files based on content rather than metadata.",
    "codeLanguage": "shell",
    "codeTokens": 57,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_16",
    "pageTitle": "ESLint Command Line Interface Reference",
    "codeList": [
      {
        "language": "shell",
        "code": "\"src/**/*.js\" --cache --cache-strategy content"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Using ESLint Plugin Rules",
    "codeDescription": "This example illustrates how to use specific rules from an ESLint plugin. It imports the plugin, configures it with a custom name, and enables specific rules from the plugin.",
    "codeLanguage": "JavaScript",
    "codeTokens": 142,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins.md#2025-04-14_snippet_3",
    "pageTitle": "Configuring ESLint Plugins in Flat Config Format",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport jsdoc from \"eslint-plugin-jsdoc\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\tjsdoc,\n\t\t},\n\t\trules: {\n\t\t\t\"jsdoc/require-description\": \"error\",\n\t\t\t\"jsdoc/check-values\": \"error\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.983
  },
  {
    "codeTitle": "Basic Structure of an ESLint Core Rule",
    "codeDescription": "Template showing the required format for defining a core rule in ESLint. Includes the meta object with type, documentation, fixability, and schema properties, along with the create function that implements the rule logic.",
    "codeLanguage": "javascript",
    "codeTokens": 201,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/contribute/core-rules.md#2025-04-14_snippet_0",
    "pageTitle": "Contributing to ESLint Core Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "/**\n * @fileoverview Rule to disallow unnecessary semicolons\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../types').Rule.RuleModule} */\nmodule.exports = {\n\tmeta: {\n\t\ttype: \"suggestion\",\n\n\t\tdocs: {\n\t\t\tdescription: \"disallow unnecessary semicolons\",\n\t\t\trecommended: true,\n\t\t\turl: \"https://eslint.org/docs/rules/no-extra-semi\",\n\t\t},\n\t\tfixable: \"code\",\n\t\tschema: [], // no options\n\t},\n\tcreate: function (context) {\n\t\treturn {\n\t\t\t// callback functions\n\t\t};\n\t},\n};"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "ESLint Rule Context Object Example",
    "codeDescription": "Shows the basic structure of using the context object in an ESLint rule implementation.",
    "codeLanguage": "javascript",
    "codeTokens": 69,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_2",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "// customRule.js\n\nmodule.exports = {\n    meta: { ... },\n    // `context` object is the argument\n    create(context) {\n       // ...\n    }\n};"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Applying Fixes with context.report() in JavaScript",
    "codeDescription": "Shows how to use the fix function in context.report() to apply automatic fixes to reported problems.",
    "codeLanguage": "javascript",
    "codeTokens": 70,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_8",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "context.report({\n\tnode: node,\n\tmessage: \"Missing semicolon\",\n\tfix(fixer) {\n\t\treturn fixer.insertTextAfter(node, \";\");\n\t},\n});"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Defining ESLint Configuration with ES Modules",
    "codeDescription": "Example of an ESLint configuration file using ES modules syntax. It defines a configuration array with one object that enables two rules: 'semi' and 'prefer-const'.",
    "codeLanguage": "javascript",
    "codeTokens": 101,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\trules: {\n\t\t\tsemi: \"error\",\n\t\t\t\"prefer-const\": \"error\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Implementing a Custom ESLint Processor Interface in JavaScript",
    "codeDescription": "This code defines the interface for creating a custom ESLint processor that can process non-JavaScript files. It includes the required preprocess and postprocess methods, along with metadata properties and optional autofix support.",
    "codeLanguage": "javascript",
    "codeTokens": 358,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-processors.md#2025-04-14_snippet_0",
    "pageTitle": "Creating Custom Processors in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "const plugin = {\n\tmeta: {\n\t\tname: \"eslint-plugin-example\",\n\t\tversion: \"1.2.3\",\n\t},\n\tprocessors: {\n\t\t\"processor-name\": {\n\t\t\tmeta: {\n\t\t\t\tname: \"eslint-processor-name\",\n\t\t\t\tversion: \"1.2.3\",\n\t\t\t},\n\t\t\t// takes text of the file and filename\n\t\t\tpreprocess(text, filename) {\n\t\t\t\t// here, you can strip out any non-JS content\n\t\t\t\t// and split into multiple strings to lint\n\n\t\t\t\treturn [\n\t\t\t\t\t// return an array of code blocks to lint\n\t\t\t\t\t{ text: code1, filename: \"0.js\" },\n\t\t\t\t\t{ text: code2, filename: \"1.js\" },\n\t\t\t\t];\n\t\t\t},\n\n\t\t\t// takes a Message[][] and filename\n\t\t\tpostprocess(messages, filename) {\n\t\t\t\t// `messages` argument contains two-dimensional array of Message objects\n\t\t\t\t// where each top-level array item contains array of lint messages related\n\t\t\t\t// to the text that was returned in array from preprocess() method\n\n\t\t\t\t// you need to return a one-dimensional array of the messages you want to keep\n\t\t\t\treturn [].concat(...messages);\n\t\t\t},\n\n\t\t\tsupportsAutofix: true, // (optional, defaults to false)\n\t\t},\n\t},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Defining Rules and Parsers in ESLint Linter for ESLintRC and Flat Config Modes",
    "codeDescription": "This snippet illustrates how to define custom rules and parsers in both the old eslintrc mode and the new flat config mode. It shows the transition from using separate methods to define rules and parsers to including them directly in the configuration object.",
    "codeLanguage": "javascript",
    "codeTokens": 323,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_20",
    "pageTitle": "Migration Guide for ESLint v9.x",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslintrc mode\nlinter.defineRule(\"my-rule1\", myRule1);\nlinter.defineRules({\n\t\"my-rule2\": myRule2,\n\t\"my-rule3\": myRule3,\n});\nlinter.defineParser(\"my-parser\", myParser);\nlinter.verify(code, {\n\trules: {\n\t\t\"my-rule1\": \"error\",\n\t\t\"my-rule2\": \"error\",\n\t\t\"my-rule3\": \"error\",\n\t},\n\tparser: \"my-parser\",\n});\n\n// flat config mode\nlinter.verify(code, {\n\tplugins: {\n\t\t\"my-plugin-foo\": {\n\t\t\trules: {\n\t\t\t\t\"my-rule1\": myRule1,\n\t\t\t},\n\t\t},\n\t\t\"my-plugin-bar\": {\n\t\t\trules: {\n\t\t\t\t\"my-rule2\": myRule2,\n\t\t\t\t\"my-rule3\": myRule3,\n\t\t\t},\n\t\t},\n\t},\n\trules: {\n\t\t\"my-plugin-foo/my-rule1\": \"error\",\n\t\t\"my-plugin-bar/my-rule2\": \"error\",\n\t\t\"my-plugin-bar/my-rule3\": \"error\",\n\t},\n\tlanguageOptions: {\n\t\tparser: myParser,\n\t},\n});"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Race Condition Example in Async JavaScript",
    "codeDescription": "Demonstrates a problematic async code pattern that can lead to race conditions when updating a shared variable.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/require-atomic-updates.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: require-atomic-updates",
    "codeList": [
      {
        "language": "javascript",
        "code": "let totalLength = 0;\n\nasync function addLengthOfSinglePage(pageNum) {\n  totalLength += await getPageLength(pageNum);\n}\n\nPromise.all([addLengthOfSinglePage(1), addLengthOfSinglePage(2)]).then(() => {\n  console.log('The combined length of both pages is', totalLength);\n});"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Creating an ESLint Configuration File",
    "codeDescription": "Shell command to create an empty ESLint configuration file in JavaScript format.",
    "codeLanguage": "shell",
    "codeTokens": 41,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/getting-started.md#2025-04-14_snippet_3",
    "pageTitle": "Getting Started with ESLint",
    "codeList": [
      {
        "language": "shell",
        "code": "# Create JavaScript configuration file\ntouch eslint.config.js"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Correct Promise Executor Usage in JavaScript",
    "codeDescription": "Demonstrates proper patterns for Promise executors that comply with the no-promise-executor-return rule. These examples show how to restructure code to avoid returning values from Promise executors.",
    "codeLanguage": "javascript",
    "codeTokens": 208,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-promise-executor-return.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint no-promise-executor-return Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-promise-executor-return: \"error\"*/\n\n// Turn return inline into two lines\nnew Promise((resolve, reject) => {\n    if (someCondition) {\n        resolve(defaultResult);\n        return;\n    }\n    getSomething((err, result) => {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(result);\n        }\n    });\n});\n\n// Add curly braces\nnew Promise((resolve, reject) => {\n    getSomething((err, data) => {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(data);\n        }\n    });\n});\n\nnew Promise(r => { r(1) });\n// or just use Promise.resolve\nPromise.resolve(1);"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Creating Plugin File using Shell Command",
    "codeDescription": "Shell command to create a new file for the ESLint plugin that will include the custom rule.",
    "codeLanguage": "shell",
    "codeTokens": 41,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_9",
    "pageTitle": "ESLint Custom Rule Tutorial",
    "codeList": [
      {
        "language": "shell",
        "code": "touch eslint-plugin-example.js"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Using ESLint v8.x Linter Functionality in v9.0.0 with JavaScript",
    "codeDescription": "This snippet shows how to maintain backwards compatibility with ESLint v8.x Linter functionality in v9.0.0 by passing the 'configType: \"eslintrc\"' option to the Linter constructor. It allows the use of the old configuration format and methods.",
    "codeLanguage": "javascript",
    "codeTokens": 121,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_21",
    "pageTitle": "Migration Guide for ESLint v9.x",
    "codeList": [
      {
        "language": "javascript",
        "code": "const linter = new Linter({ configType: \"eslintrc\" });\n\nlinter.verify(code, {\n\tparserOptions: {\n\t\tecmaVersion: 6,\n\t},\n});\n\nlinter.getRules();"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Incorrect Usage Examples of Binary Expressions",
    "codeDescription": "Shows various examples of binary expressions that will always evaluate to the same value, which should be avoided.",
    "codeLanguage": "javascript",
    "codeTokens": 156,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-constant-binary-expression.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint no-constant-binary-expression Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-constant-binary-expression: \"error\"*/\n\nconst value1 = +x == null;\n\nconst value2 = condition ? x : {} || DEFAULT;\n\nconst value3 = !foo == null;\n\nconst value4 = new Boolean(foo) === true;\n\nconst objIsEmpty = someObj === {};\n\nconst arrIsEmpty = someArr === [];\n\nconst shortCircuit1 = condition1 && false && condition2;\n\nconst shortCircuit2 = condition1 || true || condition2;\n\nconst shortCircuit3 = condition1 ?? \"non-nullish\" ?? condition2;"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Exporting ESLint Configuration in JavaScript",
    "codeDescription": "Demonstrates how to export a shareable ESLint configuration object from the main entry point file (index.js). The configuration includes global variables and rule settings.",
    "codeLanguage": "javascript",
    "codeTokens": 87,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_0",
    "pageTitle": "Creating and Sharing ESLint Configurations",
    "codeList": [
      {
        "language": "javascript",
        "code": "// index.js\nmodule.exports = {\n\tglobals: {\n\t\tMyGlobal: true,\n\t},\n\n\trules: {\n\t\tsemi: [2, \"always\"],\n\t},\n};"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Defining Default Options for ESLint Rules (JavaScript)",
    "codeDescription": "Example of specifying default options for a rule using the meta.defaultOptions property. This allows for automatic merging of user-provided options with defaults.",
    "codeLanguage": "javascript",
    "codeTokens": 149,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_20",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n\tmeta: {\n\t\tdefaultOptions: [\n\t\t\t{\n\t\t\t\talias: \"basic\",\n\t\t\t},\n\t\t],\n\t\tschema: [\n\t\t\t{\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\talias: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tadditionalProperties: false,\n\t\t\t},\n\t\t],\n\t},\n\tcreate(context) {\n\t\tconst [{ alias }] = context.options;\n\n\t\treturn {\n\t\t\t/* ... */\n\t\t};\n\t},\n};"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Using MessageIds for Suggestions in ESLint Rules",
    "codeDescription": "This example shows how to use messageIds for suggestions in an ESLint rule. It demonstrates defining messages in the meta object and using them in the context.report() method for both the main message and suggestions.",
    "codeLanguage": "javascript",
    "codeTokens": 249,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_11",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n    meta: {\n        messages: {\n            unnecessaryEscape: \"Unnecessary escape character: \\\\{{character}}.\",\n            removeEscape: \"Remove the `\\\\`. This maintains the current functionality.\",\n            escapeBackslash: \"Replace the `\\\\` with `\\\\\\\\` to include the actual backslash character.\"\n        },\n        hasSuggestions: true\n    },\n    create: function(context) {\n        // ...\n        context.report({\n            node: node,\n            messageId: 'unnecessaryEscape',\n            data: { character },\n            suggest: [\n                {\n                    messageId: \"removeEscape\", // suggestion messageId\n                    fix: function(fixer) {\n                        return fixer.removeRange(range);\n                    }\n                },\n                {\n                    messageId: \"escapeBackslash\", // suggestion messageId\n                    fix: function(fixer) {\n                        return fixer.insertTextBeforeRange(range, \"\\\\\");\n                    }\n                }\n            ]\n        });\n    }\n};"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Creating a Shareable Config for ESLint in JavaScript",
    "codeDescription": "Example of a basic ESLint shareable configuration file (index.js) that exports an array containing a configuration object with language options and rules.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Shareable Configurations",
    "codeList": [
      {
        "language": "javascript",
        "code": "// index.js\nexport default [\n\t{\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\tMyGlobal: true,\n\t\t\t},\n\t\t},\n\n\t\trules: {\n\t\t\tsemi: [2, \"always\"],\n\t\t},\n\t},\n];"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Complete Integration Implementation",
    "codeDescription": "Complete code example combining all components into a single file.",
    "codeLanguage": "javascript",
    "codeTokens": 297,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/integration-tutorial.md#2025-04-14_snippet_6",
    "pageTitle": "ESLint Node.js API Integration Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { ESLint } = require(\"eslint\");\n\nfunction createESLintInstance(overrideConfig) {\n\treturn new ESLint({\n\t\toverrideConfigFile: true,\n\t\toverrideConfig,\n\t\tfix: true,\n\t});\n}\n\nasync function lintAndFix(eslint, filePaths) {\n\tconst results = await eslint.lintFiles(filePaths);\n\n\tawait ESLint.outputFixes(results);\n\n\treturn results;\n}\n\nfunction outputLintingResults(results) {\n\tconst problems = results.reduce(\n\t\t(acc, result) => acc + result.errorCount + result.warningCount,\n\t\t0,\n\t);\n\n\tif (problems > 0) {\n\t\tconsole.log(\"Linting errors found!\");\n\t\tconsole.log(results);\n\t} else {\n\t\tconsole.log(\"No linting errors found.\");\n\t}\n\treturn results;\n}\n\nasync function lintFiles(filePaths) {\n\tconst overrideConfig = {\n\t\tlanguageOptions: {\n\t\t\tecmaVersion: 2018,\n\t\t\tsourceType: \"commonjs\",\n\t\t},\n\t\trules: {\n\t\t\t\"no-console\": \"error\",\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t};\n\n\tconst eslint = createESLintInstance(overrideConfig);\n\tconst results = await lintAndFix(eslint, filePaths);\n\treturn outputLintingResults(results);\n}\n\nmodule.exports = { lintFiles };"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Demonstrating Correct Usage of typeof with Default Option in JavaScript",
    "codeDescription": "This code snippet shows the default behavior of the 'no-undef' rule with typeof checks. It allows the use of undefined identifiers within typeof operations.",
    "codeLanguage": "JavaScript",
    "codeTokens": 75,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-undef",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-undef: \"error\"*/\n\nif (typeof UndefinedIdentifier === \"undefined\") {\n    // do something ...\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Custom Rule Implementation in ESLint Plugin",
    "codeDescription": "Example demonstrating how to implement and expose custom rules in an ESLint plugin, including rule configuration usage.",
    "codeLanguage": "javascript",
    "codeTokens": 115,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/plugins.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Plugin Development Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const plugin = {\n\tmeta: {\n\t\tname: \"eslint-plugin-example\",\n\t\tversion: \"1.2.3\",\n\t},\n\trules: {\n\t\t\"dollar-sign\": {\n\t\t\tcreate(context) {\n\t\t\t\t// rule implementation ...\n\t\t\t},\n\t\t},\n\t},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Tracking Current Segment Position in ESLint Rules",
    "codeDescription": "Demonstrates how to track the current code path segment position in an ESLint rule. Uses variables to keep track of the current code path, current segments, and all current segments for open paths.",
    "codeLanguage": "javascript",
    "codeTokens": 282,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/code-path-analysis.md#2025-04-14_snippet_2",
    "pageTitle": "Code Path Analysis in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n\tmeta: {\n\t\t// ...\n\t},\n\tcreate(context) {\n\t\t// tracks the code path we are currently in\n\t\tlet currentCodePath;\n\n\t\t// tracks the segments we've traversed in the current code path\n\t\tlet currentSegments;\n\n\t\t// tracks all current segments for all open paths\n\t\tconst allCurrentSegments = [];\n\n\t\treturn {\n\t\t\tonCodePathStart(codePath) {\n\t\t\t\tcurrentCodePath = codePath;\n\t\t\t\tallCurrentSegments.push(currentSegments);\n\t\t\t\tcurrentSegments = new Set();\n\t\t\t},\n\n\t\t\tonCodePathEnd(codePath) {\n\t\t\t\tcurrentCodePath = codePath.upper;\n\t\t\t\tcurrentSegments = allCurrentSegments.pop();\n\t\t\t},\n\n\t\t\tonCodePathSegmentStart(segment) {\n\t\t\t\tcurrentSegments.add(segment);\n\t\t\t},\n\n\t\t\tonCodePathSegmentEnd(segment) {\n\t\t\t\tcurrentSegments.delete(segment);\n\t\t\t},\n\n\t\t\tonUnreachableCodePathSegmentStart(segment) {\n\t\t\t\tcurrentSegments.add(segment);\n\t\t\t},\n\n\t\t\tonUnreachableCodePathSegmentEnd(segment) {\n\t\t\t\tcurrentSegments.delete(segment);\n\t\t\t},\n\t\t};\n\t},\n};"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Basic JSON Formatter Implementation",
    "codeDescription": "Simple example of a custom formatter that outputs results in JSON format",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-formatters.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Custom Formatters Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "//my-awesome-formatter.js\nmodule.exports = function (results, context) {\n\treturn JSON.stringify(results, null, 2);\n};"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Configuring ESLint Plugin Package.json for npm Publication",
    "codeDescription": "This JSON snippet shows how to properly configure the package.json file for an ESLint plugin. It includes setting ESLint as a peer dependency and specifying the required keywords for npm publication.",
    "codeLanguage": "json",
    "codeTokens": 76,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/plugins.md#2025-04-14_snippet_7",
    "pageTitle": "ESLint Plugin Development Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"peerDependencies\": {\n\t\t\"eslint\": \">=9.0.0\"\n\t}\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Applying ESLint Configuration to a Specific File Pattern",
    "codeDescription": "This snippet shows how to apply a configuration to a subset of files by using the files property to specify a glob pattern. The extends property is used to incorporate the recommended JavaScript rules only for files matching the specified pattern.",
    "codeLanguage": "javascript",
    "codeTokens": 125,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/combine-configs.md#2025-04-14_snippet_1",
    "pageTitle": "Combining ESLint Configurations",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport js from \"@eslint/js\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/src/safe/*.js\"],\n\t\tplugins: {\n\t\t\tjs,\n\t\t},\n\t\textends: [\"js/recommended\"],\n\t},\n]);"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Manual ESLint Configuration Example",
    "codeDescription": "Complete example of a manually created ESLint configuration file that sets up JavaScript linting with recommended rules and custom warning levels for specific rules.",
    "codeLanguage": "javascript",
    "codeTokens": 127,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/getting-started.md#2025-04-14_snippet_4",
    "pageTitle": "Getting Started with ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from \"eslint/config\";\nimport js from \"@eslint/js\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\tjs,\n\t\t},\n\t\textends: [\"js/recommended\"],\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t\t\"no-undef\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Configuring Plugins in Flat Config Format",
    "codeDescription": "Example of loading and configuring the jsdoc plugin in flat config format. The plugin is imported as a module and assigned to a named property in the plugins object.",
    "codeLanguage": "javascript",
    "codeTokens": 126,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\n\nimport jsdoc from \"eslint-plugin-jsdoc\";\n\nexport default [\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\tjsdoc: jsdoc,\n\t\t},\n\t\trules: {\n\t\t\t\"jsdoc/require-description\": \"error\",\n\t\t\t\"jsdoc/check-values\": \"error\",\n\t\t},\n\t},\n];"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Configuring ESLint with JavaScript Plugin in eslint.config.js",
    "codeDescription": "Example configuration file for ESLint using the @eslint/js plugin. It demonstrates how to import and configure the plugin with different rule sets including 'js/recommended' and 'js/all', as well as how to override specific rules.",
    "codeLanguage": "javascript",
    "codeTokens": 282,
    "codeId": "https://github.com/eslint/eslint/blob/main/packages/js/README.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint JavaScript Plugin Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from \"eslint/config\";\nimport js from \"@eslint/js\";\n\nexport default defineConfig([\n\t// apply recommended rules to JS files\n\t{\n\t\tname: \"your-project/recommended-rules\",\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\tjs,\n\t\t},\n\t\textends: [\"js/recommended\"],\n\t},\n\n\t// apply recommended rules to JS files with an override\n\t{\n\t\tname: \"your-project/recommended-rules-with-override\",\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\tjs,\n\t\t},\n\t\textends: [\"js/recommended\"],\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n\n\t// apply all rules to JS files\n\t{\n\t\tname: \"your-project/all-rules\",\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\tjs,\n\t\t},\n\t\textends: [\"js/all\"],\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Disabling ESLint Rules for Entire Files in JavaScript",
    "codeDescription": "Shows how to disable ESLint rules for an entire file using a block comment at the top of the file. This can be done for all rules or specific rules.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_7",
    "pageTitle": "ESLint Rules Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* eslint-disable */\n\nalert(\"foo\");"
      },
      {
        "language": "javascript",
        "code": "/* eslint-disable no-alert */\n\nalert(\"foo\");"
      },
      {
        "language": "javascript",
        "code": "/* eslint no-alert: \"off\" */\n\nalert(\"foo\");"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Disabling Inline Configuration in ESLint",
    "codeDescription": "Configuration to disable all inline ESLint configurations using the noInlineConfig option.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_11",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tlinterOptions: {\n\t\t\tnoInlineConfig: true,\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Basic ESLint Linter Verification",
    "codeDescription": "Demonstrates basic usage of the Linter.verify() method to lint JavaScript code with a simple configuration checking for semicolons.",
    "codeLanguage": "javascript",
    "codeTokens": 103,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_17",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nconst messages = linter.verify(\n\t\"var foo;\",\n\t{\n\t\trules: {\n\t\t\tsemi: 2,\n\t\t},\n\t},\n\t{ filename: \"foo.js\" }\n);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Correct RegExp Patterns in JavaScript",
    "codeDescription": "Examples of valid regular expression patterns that will pass the no-invalid-regexp rule. These include well-formed patterns, constructor calls with no arguments, and non-global RegExp instances.",
    "codeLanguage": "js",
    "codeTokens": 73,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-invalid-regexp.md#2025-04-14_snippet_1",
    "pageTitle": "no-invalid-regexp ESLint Rule",
    "codeList": [
      {
        "language": "js",
        "code": "/*eslint no-invalid-regexp: \"error\"*/\n\nRegExp('.')\n\nnew RegExp\n\nthis.RegExp('[')"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Configuring ESLint Rules in JavaScript",
    "codeDescription": "Example of how to configure ESLint rules in an eslint.config.js file. This snippet shows how to define rules for specific file patterns and set error levels for different rules.",
    "codeLanguage": "JavaScript",
    "codeTokens": 121,
    "codeId": "https://github.com/eslint/eslint/blob/main/README.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Project Overview and Usage Guide",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\", \"**/*.cjs\", \"**/*.mjs\"],\n\t\trules: {\n\t\t\t\"prefer-const\": \"warn\",\n\t\t\t\"no-constant-binary-expression\": \"error\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Configuring Plugins in eslintrc Format",
    "codeDescription": "Example of loading and configuring the jsdoc plugin in eslintrc format. The plugin is referenced by string in the plugins array and rules are prefixed with the plugin name.",
    "codeLanguage": "javascript",
    "codeTokens": 113,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// .eslintrc.js\n\nmodule.exports = {\n\t// ...other config\n\tplugins: [\"jsdoc\"],\n\trules: {\n\t\t\"jsdoc/require-description\": \"error\",\n\t\t\"jsdoc/check-values\": \"error\",\n\t},\n\t// ...other config\n};"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Modern ESLint Flat Config with Extensions",
    "codeDescription": "Example showing how to import and use predefined and shareable configs in the flat config format.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_18",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import js from \"@eslint/js\";\nimport customConfig from \"./custom-config.js\";\nimport myConfig from \"eslint-config-my-config\";\n\nexport default [\n\tjs.configs.recommended,\n\tcustomConfig,\n\tmyConfig,\n\t{\n\t\trules: {\n\t\t\tsemi: [\"warn\", \"always\"],\n\t\t},\n\t\t// ...other config\n\t},\n];"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Configuring ESLint Plugin in Flat Config Format",
    "codeDescription": "This snippet demonstrates how to configure a third-party ESLint plugin using the flat config format. It imports the plugin, defines it in the configuration, and sets up rules from the plugin.",
    "codeLanguage": "JavaScript",
    "codeTokens": 122,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins.md#2025-04-14_snippet_0",
    "pageTitle": "Configuring ESLint Plugins in Flat Config Format",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport example from \"eslint-plugin-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\t\trules: {\n\t\t\t\"example/rule1\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Reporting Unused Disable Directives in ESLint",
    "codeDescription": "Shows how to configure reporting of unused eslint-disable directives with severity levels.",
    "codeLanguage": "javascript",
    "codeTokens": 83,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_12",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tlinterOptions: {\n\t\t\treportUnusedDisableDirectives: \"error\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Demonstrating TypeErrors with Parenthesized Optional Chaining in JavaScript",
    "codeDescription": "Examples showing how parentheses can limit the scope of short-circuiting in optional chaining expressions, leading to TypeErrors.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-optional-chaining.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-unsafe-optional-chaining",
    "codeList": [
      {
        "language": "javascript",
        "code": "const obj = undefined;\n\n(obj?.foo)(); // TypeError\n(obj?.foo).bar; // TypeError"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Unignoring Specific Files and Directories in ESLint",
    "codeDescription": "This snippet shows how to unignore specific files or directories that were previously ignored. It unignores the node_modules/mylibrary directory while keeping other node_modules content ignored.",
    "codeLanguage": "javascript",
    "codeTokens": 136,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore.md#2025-04-14_snippet_3",
    "pageTitle": "Configuring ESLint Ignore Files",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig, globalIgnores } from \"eslint/config\";\n\nexport default defineConfig([\n\tglobalIgnores([\n\t\t\"!node_modules/\", // unignore `node_modules/` directory\n\t\t\"node_modules/*\", // ignore its content\n\t\t\"!node_modules/mylibrary/\", // unignore `node_modules/mylibrary` directory\n\t]),\n]);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "ESLint Rule with Code Path Analysis",
    "codeDescription": "Demonstrates implementation of an ESLint rule with code path analysis and function checking, similar to array-callback-return rule.",
    "codeLanguage": "javascript",
    "codeTokens": 206,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_1",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "function checkLastSegment (node) {\n    // report problem for function if last code path segment is reachable\n}\n\nmodule.exports = {\n    meta: { ... },\n    create: function(context) {\n        // declare the state of the rule\n        return {\n            ReturnStatement: function(node) {\n                // at a ReturnStatement node while going down\n            },\n            // at a function expression node while going up:\n            \"FunctionExpression:exit\": checkLastSegment,\n            \"ArrowFunctionExpression:exit\": checkLastSegment,\n            onCodePathStart: function (codePath, node) {\n                // at the start of analyzing a code path\n            },\n            onCodePathEnd: function(codePath, node) {\n                // at the end of analyzing a code path\n            }\n        };\n    }\n};"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing a Custom ESLint Rule with messageId in JavaScript",
    "codeDescription": "Demonstrates how to create a custom ESLint rule using messageId for centralized message management and easier testing.",
    "codeLanguage": "javascript",
    "codeTokens": 131,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_5",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "// avoid-name.js\n\nmodule.exports = {\n    meta: {\n        messages: {\n            avoidName: \"Avoid using variables named '{{ name }}'\"\n        }\n    },\n    create(context) {\n        return {\n            Identifier(node) {\n                if (node.name === \"foo\") {\n                    context.report({\n                        node,\n                        messageId: \"avoidName\",\n                        data: {\n                            name: \"foo\",\n                        }\n                    });\n                }\n            }\n        };\n    }\n};"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Migrating from CLIEngine to ESLint Class in JavaScript",
    "codeDescription": "This snippet shows how to update code that previously used the CLIEngine class, which has been removed in ESLint v8.0.0. The ESLint class is now used instead, with method mappings provided for migration.",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_8",
    "pageTitle": "ESLint v8.0.0 Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { linter } = require(\"eslint\");"
      },
      {
        "language": "javascript",
        "code": "const { Linter } = require(\"eslint\");\nconst linter = new Linter();"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Demonstrating Incorrect Usage of Constant Conditions in JavaScript",
    "codeDescription": "This snippet shows various examples of code that violate the 'no-constant-condition' rule. It includes constant expressions in if statements, loops, and ternary operators.",
    "codeLanguage": "javascript",
    "codeTokens": 229,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-constant-condition.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-constant-condition",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-constant-condition: \"error\"*/\n\nif (false) {\n    doSomethingUnfinished();\n}\n\nif (void x) {\n    doSomethingUnfinished();\n}\n\nif (x &&= false) {\n    doSomethingNever();\n}\n\nif (class {}) {\n    doSomethingAlways();\n}\n\nif (new Boolean(x)) {\n    doSomethingAlways();\n}\n\nif (Boolean(1)) {\n    doSomethingAlways();\n}\n\nif (undefined) {\n    doSomethingUnfinished();\n}\n\nif (x ||= true) {\n    doSomethingAlways();\n}\n\nfor (;-2;) {\n    doSomethingForever();\n}\n\nwhile (typeof x) {\n    doSomethingForever();\n}\n\ndo {\n    doSomethingForever();\n} while (x = -1);\n\nconst result = 0 ? a : b;\n\nif(input === \"hello\" || \"bye\"){\n  output(input);\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Creating Additional Shareable Configs in the Same Package",
    "codeDescription": "Example of exporting an additional configuration from a separate file in the same npm package, allowing for multiple configurations within one package.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Shareable Configurations",
    "codeList": [
      {
        "language": "javascript",
        "code": "// my-special-config.js\nexport default {\n\trules: {\n\t\tquotes: [2, \"double\"],\n\t},\n};"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Configuring Local ESLint Plugin",
    "codeDescription": "ESLint configuration file showing how to set up a local plugin with custom rules. Defines file patterns, language options, and rule settings.",
    "codeLanguage": "javascript",
    "codeTokens": 158,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_12",
    "pageTitle": "ESLint Custom Rule Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\n\"use strict\";\n\n// Import the ESLint plugin locally\nconst eslintPluginExample = require(\"./eslint-plugin-example\");\n\nmodule.exports = [\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tlanguageOptions: {\n\t\t\tsourceType: \"commonjs\",\n\t\t\tecmaVersion: \"latest\",\n\t\t},\n\t\t// Using the eslint-plugin-example plugin defined locally\n\t\tplugins: { example: eslintPluginExample },\n\t\trules: {\n\t\t\t\"example/enforce-foo-bar\": \"error\",\n\t\t},\n\t},\n];"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Writing ESLint Autofix Results to Files in JavaScript",
    "codeDescription": "This code shows how to use the static ESLint.outputFixes() method to write code modified by ESLint's autofix feature into its respective file.",
    "codeLanguage": "javascript",
    "codeTokens": 57,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_10",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "await ESLint.outputFixes(results);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Defining a Custom Language in an ESLint Plugin (JavaScript)",
    "codeDescription": "This snippet demonstrates how to define a custom language in an ESLint plugin. It shows the structure of the plugin object, including the meta information, languages definition, and rules. The example supports both ESM and CommonJS module systems.",
    "codeLanguage": "javascript",
    "codeTokens": 159,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/languages.md#2025-04-14_snippet_0",
    "pageTitle": "Creating custom language plugins for ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { myLanguage } from \"../languages/my.js\";\n\nconst plugin = {\n\t// preferred location of name and version\n\tmeta: {\n\t\tname: \"eslint-plugin-example\",\n\t\tversion: \"1.2.3\",\n\t},\n\tlanguages: {\n\t\tmy: myLanguage,\n\t},\n\trules: {\n\t\t// add rules here\n\t},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Defining Meta Data for ESLint Custom Parser",
    "codeDescription": "Example of adding recommended meta data to a custom parser, including name and version for better debugging and caching. The meta object should match the npm package information.",
    "codeLanguage": "javascript",
    "codeTokens": 85,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-parsers.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Custom Parsers Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// preferred location of name and version\nmodule.exports = {\n\tmeta: {\n\t\tname: \"eslint-parser-custom\",\n\t\tversion: \"1.2.3\",\n\t},\n};"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Correct Indentation Example in JavaScript",
    "codeDescription": "Demonstrates code with correct indentation according to the default 'indent' rule settings (4 spaces).",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rule: indent",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint indent: \"error\"*/\n\nif (a) {\n    b=c;\n    function foo(d) {\n        e=f;\n    }\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Finding Unreachable Nodes in JavaScript with ESLint",
    "codeDescription": "ESLint rule implementation that tracks code path segments and detects unreachable expression statements. Uses code path analysis to determine if any segments leading to a node are reachable.",
    "codeLanguage": "javascript",
    "codeTokens": 365,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/code-path-analysis.md#2025-04-14_snippet_3",
    "pageTitle": "Code Path Analysis in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "function areAnySegmentsReachable(segments) {\n\tfor (const segment of segments) {\n\t\tif (segment.reachable) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nmodule.exports = {\n\tmeta: {\n\t\t// ...\n\t},\n\tcreate(context) {\n\t\t// tracks the code path we are currently in\n\t\tlet currentCodePath;\n\n\t\t// tracks the segments we've traversed in the current code path\n\t\tlet currentSegments;\n\n\t\t// tracks all current segments for all open paths\n\t\tconst allCurrentSegments = [];\n\n\t\treturn {\n\t\t\tonCodePathStart(codePath) {\n\t\t\t\tcurrentCodePath = codePath;\n\t\t\t\tallCurrentSegments.push(currentSegments);\n\t\t\t\tcurrentSegments = new Set();\n\t\t\t},\n\n\t\t\tonCodePathEnd(codePath) {\n\t\t\t\tcurrentCodePath = codePath.upper;\n\t\t\t\tcurrentSegments = allCurrentSegments.pop();\n\t\t\t},\n\n\t\t\tonCodePathSegmentStart(segment) {\n\t\t\t\tcurrentSegments.add(segment);\n\t\t\t},\n\n\t\t\tonCodePathSegmentEnd(segment) {\n\t\t\t\tcurrentSegments.delete(segment);\n\t\t\t},\n\n\t\t\tonUnreachableCodePathSegmentStart(segment) {\n\t\t\t\tcurrentSegments.add(segment);\n\t\t\t},\n\n\t\t\tonUnreachableCodePathSegmentEnd(segment) {\n\t\t\t\tcurrentSegments.delete(segment);\n\t\t\t},\n\n\t\t\tExpressionStatement(node) {\n\t\t\t\t// check all the code path segments that led to this node\n\t\t\t\tif (!areAnySegmentsReachable(currentSegments)) {\n\t\t\t\t\tcontext.report({ message: \"Unreachable!\", node });\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t},\n};"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Extending Configurations from Plugins in ESLint (JavaScript)",
    "codeDescription": "Shows how to extend configurations from ESLint plugins. The example demonstrates referencing a configuration by string and directly through the plugin object.",
    "codeLanguage": "javascript",
    "codeTokens": 108,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_17",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport examplePlugin from \"eslint-plugin-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\texample: examplePlugin,\n\t\t},\n\t\textends: [\"example/recommended\"],\n\t},\n]);"
      },
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport pluginExample from \"eslint-plugin-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\texample: pluginExample,\n\t\t},\n\t\textends: [pluginExample.configs.recommended],\n\t},\n]);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Correct Constructor Super Call Examples",
    "codeDescription": "Examples showing proper implementation of constructors both with and without inheritance, demonstrating correct super() usage.",
    "codeLanguage": "javascript",
    "codeTokens": 70,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/constructor-super.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Constructor Super Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint constructor-super: \"error\"*/\n\nclass A {\n    constructor() { }\n}\n\nclass B extends C {\n    constructor() {\n        super();\n    }\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Complete Custom ESLint Rule with Visitor Logic",
    "codeDescription": "Complete implementation of the custom rule with the VariableDeclarator visitor method that checks for const foo variables and ensures they are assigned 'bar', including autofix functionality.",
    "codeLanguage": "javascript",
    "codeTokens": 370,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Custom Rule Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "// enforce-foo-bar.js\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n        docs: {\n            description: \"Enforce that a variable named `foo` can only be assigned a value of 'bar'.\"\n        },\n        fixable: \"code\",\n        schema: []\n    },\n    create(context) {\n        return {\n\n            // Performs action in the function on every variable declarator\n            VariableDeclarator(node) {\n\n                // Check if a `const` variable declaration\n                if (node.parent.kind === \"const\") {\n\n                    // Check if variable name is `foo`\n                    if (node.id.type === \"Identifier\" && node.id.name === \"foo\") {\n\n                        // Check if value of variable is \"bar\"\n                        if (node.init && node.init.type === \"Literal\" && node.init.value !== \"bar\") {\n\n                            /*\n                             * Report error to ESLint. Error message uses\n                             * a message placeholder to include the incorrect value\n                             * in the error message.\n                             * Also includes a `fix(fixer)` function that replaces\n                             * any values assigned to `const foo` with \"bar\".\n                             */\n                            context.report({\n                                node,\n                                message: 'Value other than \"bar\" assigned to `const foo`. Unexpected value: {{ notBar }}.',\n                                data: {\n                                    notBar: node.init.value\n                                },\n                                fix(fixer) {\n                                    return fixer.replaceText(node.init, '\"bar\"');\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n        };\n    }\n};"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Using Multiple Configs from the Same Package in ESLint",
    "codeDescription": "Demonstrates how to import and use both the default and a special configuration from the same shareable config package in an eslint.config.js file.",
    "codeLanguage": "javascript",
    "codeTokens": 145,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Shareable Configurations",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport myconfig from \"eslint-config-myconfig\";\nimport mySpecialConfig from \"eslint-config-myconfig/my-special-config.js\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\textends: [myconfig, mySpecialConfig],\n\n\t\t// anything from here will override myconfig\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Defining Different Quote Styles in JavaScript",
    "codeDescription": "Demonstrates the three different ways to define strings in JavaScript: double quotes, single quotes, and backticks (ES6 template literals).",
    "codeLanguage": "javascript",
    "codeTokens": 69,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/quotes.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint quotes Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "var double = \"double\";\nvar single = 'single';\nvar backtick = `backtick`;    // ES6 only"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Configuring Custom Processor in ESLint Config with Plugin Import",
    "codeDescription": "This snippet shows how to configure ESLint to use a custom processor from a plugin. It imports the plugin and uses it to process .txt files, demonstrating the string format for referencing the processor.",
    "codeLanguage": "javascript",
    "codeTokens": 134,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-processors.md#2025-04-14_snippet_1",
    "pageTitle": "Creating Custom Processors in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport example from \"eslint-plugin-example\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.txt\"], // apply processor to text files\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\t\tprocessor: \"example/processor-name\",\n\t},\n\t// ... other configs\n]);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Specifying Fix Types in ESLint CLI",
    "codeDescription": "The --fix-type flag allows specifying which types of fixes to apply (problem, suggestion, layout, directive). Useful when using another program for some types of formatting.",
    "codeLanguage": "bash",
    "codeTokens": 58,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_10",
    "pageTitle": "ESLint Command Line Interface Reference",
    "codeList": [
      {
        "language": "bash",
        "code": "--fix --fix-type suggestion ."
      },
      {
        "language": "bash",
        "code": "--fix --fix-type suggestion --fix-type problem ."
      },
      {
        "language": "bash",
        "code": "--fix --fix-type suggestion,layout ."
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Suppressing All Rule Violations in ESLint",
    "codeDescription": "Command to suppress existing violations for all rules configured as errors. The --fix flag is recommended to avoid suppressing violations that can be auto-fixed.",
    "codeLanguage": "bash",
    "codeTokens": 52,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/suppressions.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Bulk Suppressions Documentation",
    "codeList": [
      {
        "language": "bash",
        "code": "eslint --fix --suppress-all"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Configuring Custom Parser in Flat Config Format",
    "codeDescription": "Example of specifying a custom parser (Babel) in flat config format. The parser is imported as a module and assigned to the languageOptions.parser property.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\n\nimport babelParser from \"@babel/eslint-parser\";\n\nexport default [\n\t{\n\t\t// ...other config\n\t\tlanguageOptions: {\n\t\t\tparser: babelParser,\n\t\t},\n\t\t// ...other config\n\t},\n];"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Incorrect Usage of 'var' in JavaScript (ESLint no-var rule)",
    "codeDescription": "This snippet shows examples of code that violate the 'no-var' ESLint rule by using 'var' to declare variables.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-var.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-var",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-var: \"error\"*/\n\nvar x = \"y\";\nvar CONFIG = {};"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Demonstrating Incorrect Usage of Undeclared Variables in JavaScript",
    "codeDescription": "This code snippet shows examples of incorrect usage that would trigger the 'no-undef' rule. It includes references to undeclared variables 'someFunction' and 'a'.",
    "codeLanguage": "JavaScript",
    "codeTokens": 77,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-undef",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-undef: \"error\"*/\n\nconst foo = someFunction();\nconst bar = a + 1;"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Initializing ESLint Configuration",
    "codeDescription": "Example showing how to run the ESLint config initialization wizard.",
    "codeLanguage": "shell",
    "codeTokens": 32,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_21",
    "pageTitle": "ESLint Command Line Interface Reference",
    "codeList": [
      {
        "language": "shell",
        "code": "--init"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Overriding ESLint Configuration File with Command Line Option",
    "codeDescription": "This snippet shows how to use the '--config' or '-c' command line option to specify a different ESLint configuration file, overriding the default precedence order.",
    "codeLanguage": "bash",
    "codeTokens": 74,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_21",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "bash",
        "code": "{{ npx_tabs({\n    package: \"eslint\",\n    args: [\"--config\", \"eslint.config.ts\"]\n}) }}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Incorrect Usage of Template Literals in JavaScript",
    "codeDescription": "Examples of code that violate the no-template-curly-in-string rule. These examples show template literal placeholders used inside regular string quotes where they won't be evaluated as expressions.",
    "codeLanguage": "javascript",
    "codeTokens": 98,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-template-curly-in-string.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-template-curly-in-string",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-template-curly-in-string: \"error\"*/\n\"Hello ${name}!\";\n'Hello ${name}!';\n\"Time: ${12 * 60 * 60 * 1000}\";"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Configuring File Extension Processor in Flat Config Format",
    "codeDescription": "Example of explicitly configuring a file extension processor in flat config format, which is needed since automatic file extension processor association doesn't happen in flat config.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_7",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "{\n    files: [\"**/*.md\"],\n    processor: somePlugin.processors[\".md\"]\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Using getText Method with SourceCode",
    "codeDescription": "Demonstrates different ways to use the getText() method to access source code, including getting full source, node-specific source, and source with surrounding characters.",
    "codeLanguage": "javascript",
    "codeTokens": 130,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_16",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "// get all source\nvar source = sourceCode.getText();\n\n// get source for just this AST node\nvar nodeSource = sourceCode.getText(node);\n\n// get source for AST node plus previous two characters\nvar nodeSourceWithPrev = sourceCode.getText(node, 2);\n\n// get source for AST node plus following two characters\nvar nodeSourceWithFollowing = sourceCode.getText(node, 0, 2);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Adding Metadata to Custom ESLint Rule",
    "codeDescription": "Updating the rule scaffold with metadata including type, documentation description, fixability, and an empty schema array.",
    "codeLanguage": "javascript",
    "codeTokens": 130,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Custom Rule Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "// enforce-foo-bar.js\n\nmodule.exports = {\n\tmeta: {\n\t\ttype: \"problem\",\n\t\tdocs: {\n\t\t\tdescription:\n\t\t\t\t\"Enforce that a variable named `foo` can only be assigned a value of 'bar'.\",\n\t\t},\n\t\tfixable: \"code\",\n\t\tschema: [],\n\t},\n\tcreate(context) {\n\t\treturn {\n\t\t\t// TODO: add callback function(s)\n\t\t};\n\t},\n};"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Configuring Rules Using Inline Comments in JavaScript",
    "codeDescription": "Shows how to use ESLint configuration comments to enable/disable rules directly in source code files.",
    "codeLanguage": "javascript",
    "codeTokens": 50,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rules Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* eslint eqeqeq: \"off\", curly: \"error\" */"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Basic ESLint Configuration with Custom Processor for Text Files",
    "codeDescription": "A minimal ESLint configuration that implements a custom processor for .txt files. This shows the essential configuration needed to apply a processor from the 'example' plugin to process text files for linting.",
    "codeLanguage": "javascript",
    "codeTokens": 121,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-processors.md#2025-04-14_snippet_3",
    "pageTitle": "Creating Custom Processors in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport example from \"eslint-plugin-example\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.txt\"],\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\t\tprocessor: \"example/processor-name\",\n\t},\n]);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Demonstrating Correct Usage of Declarations in Switch Statements (JavaScript)",
    "codeDescription": "This code snippet illustrates the correct way to use declarations in switch statements. It shows how to wrap case clauses in blocks to limit the scope of lexical declarations, demonstrates valid var usage due to function-scope hoisting, and includes an example of a valid declaration outside the switch statement.",
    "codeLanguage": "JavaScript",
    "codeTokens": 215,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-case-declarations.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-case-declarations",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-case-declarations: \"error\"*/\n\n// Declarations outside switch-statements are valid\nconst a = 0;\n\nswitch (foo) {\n    // The following case clauses are wrapped into blocks using brackets\n    case 1: {\n        let x = 1;\n        break;\n    }\n    case 2: {\n        const y = 2;\n        break;\n    }\n    case 3: {\n        function f() {}\n        break;\n    }\n    case 4:\n        // Declarations using var without brackets are valid due to function-scope hoisting\n        var z = 4;\n        break;\n    default: {\n        class C {}\n    }\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Using Renamed Processor in Flat Config",
    "codeDescription": "Demonstrates how to use a renamed processor in a flat config file. This example shows how to specify the 'markdown' processor for .md files.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/plugin-migration-flat-config.md#2025-04-14_snippet_3",
    "pageTitle": "Plugin Migration to Flat Config for ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from \"eslint/config\";\nimport example from \"eslint-plugin-example\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.md\"],\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\t\tprocessor: \"example/markdown\",\n\t},\n]);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Configuring Global Variables in JSON Configuration File",
    "codeDescription": "This snippet demonstrates how to define global variables with read/write permissions in an ESLint JSON configuration file using the 'globals' property.",
    "codeLanguage": "json",
    "codeTokens": 75,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options-deprecated.md#2025-04-14_snippet_8",
    "pageTitle": "Configure Language Options in ESLint (Deprecated)",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"globals\": {\n\t\t\"var1\": \"writable\",\n\t\t\"var2\": \"readonly\"\n\t}\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Correct Usage of Arrow Functions According to no-confusing-arrow Rule",
    "codeDescription": "These examples show correct ways to write arrow functions that comply with the no-confusing-arrow ESLint rule, using parentheses or block statements to clarify the intent.",
    "codeLanguage": "JavaScript",
    "codeTokens": 129,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-confusing-arrow.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-confusing-arrow",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-confusing-arrow: \"error\"*/\n\nvar x = a => (1 ? 2 : 3);\nvar x = (a) => (1 ? 2 : 3);\nvar x = (a) => {\n    return 1 ? 2 : 3;\n};\nvar x = a => { return 1 ? 2 : 3; };"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Cascading Configuration Objects in ESLint",
    "codeDescription": "Shows how multiple configuration objects are merged when they match the same files, with later objects overriding previous ones.",
    "codeLanguage": "javascript",
    "codeTokens": 138,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_10",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\tMY_CUSTOM_GLOBAL: \"readonly\",\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tfiles: [\"tests/**/*.js\"],\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\tit: \"readonly\",\n\t\t\t\tdescribe: \"readonly\",\n\t\t\t},\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Disabling and Enabling ESLint Rules Using Block Comments in JavaScript",
    "codeDescription": "Demonstrates how to disable and re-enable ESLint rules for a portion of a file using block comments. This can be done for all rules or specific rules.",
    "codeLanguage": "javascript",
    "codeTokens": 61,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_6",
    "pageTitle": "ESLint Rules Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* eslint-disable */\n\nalert(\"foo\");\n\n/* eslint-enable */"
      },
      {
        "language": "javascript",
        "code": "/* eslint-disable no-alert, no-console */\n\nalert(\"foo\");\nconsole.log(\"bar\");\n\n/* eslint-enable no-alert, no-console */"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Demonstrating Side Effects in JavaScript Function and Constructor Calls",
    "codeDescription": "Examples showing that function calls and constructor calls with the 'new' operator are not flagged by this rule because they may have side effects on program state.",
    "codeLanguage": "javascript",
    "codeTokens": 118,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule Documentation: no-unused-expressions",
    "codeList": [
      {
        "language": "javascript",
        "code": "let i = 0;\nfunction increment() { i += 1; }\nincrement(); // return value is unused, but i changed as a side effect\n\nlet nThings = 0;\nfunction Thing() { nThings += 1; }\nnew Thing(); // constructed object is unused, but nThings changed as a side effect"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Disabling Rules for File Patterns in Configuration",
    "codeDescription": "Shows how to disable rules for specific file patterns using the 'overrides' key in a configuration file. This is useful for test files or other special case files.",
    "codeLanguage": "json",
    "codeTokens": 102,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_21",
    "pageTitle": "Configuring ESLint Rules (Deprecated Format)",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"rules\": {...},\n  \"overrides\": [\n    {\n      \"files\": [\"*-test.js\",\"*.spec.js\"],\n      \"rules\": {\n        \"no-unused-expressions\": \"off\"\n      }\n    }\n  ]\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Testing Rule Fixes in JavaScript",
    "codeDescription": "Example showing how to test ESLint rule auto-fixes by specifying the expected output code after the fix is applied.",
    "codeLanguage": "javascript",
    "codeTokens": 118,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_27",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "ruleTester.run(\"my-rule-for-no-foo\", rule, {\n\tvalid: [],\n\tinvalid: [\n\t\t{\n\t\t\tcode: \"var foo;\",\n\t\t\toutput: \"var bar;\",\n\t\t\terrors: [\n\t\t\t\t{\n\t\t\t\t\tmessageId: \"shouldBeBar\",\n\t\t\t\t\tline: 1,\n\t\t\t\t\tcolumn: 5,\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Overriding Settings from Shareable Configs in ESLint",
    "codeDescription": "Example showing how to override specific rules from an imported shareable config by adding override rules after extending the config in eslint.config.js.",
    "codeLanguage": "javascript",
    "codeTokens": 124,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Shareable Configurations",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport myconfig from \"eslint-config-myconfig\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\textends: [myconfig],\n\n\t\t// anything from here will override myconfig\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Customizing RuleTester for a Custom Test Runner in JavaScript",
    "codeDescription": "This snippet demonstrates how to customize RuleTester to work with a custom test runner. It overrides the describe and it functions of RuleTester and shows how to use the customized RuleTester with a rule.",
    "codeLanguage": "JavaScript",
    "codeTokens": 195,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_30",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "\"use strict\";\n\nconst RuleTester = require(\"eslint\").RuleTester,\n\ttest = require(\"my-test-runner\"),\n\tmyRule = require(\"../../../lib/rules/my-rule\");\n\nRuleTester.describe = function (text, method) {\n\tRuleTester.it.title = text;\n\treturn method.call(this);\n};\n\nRuleTester.it = function (text, method) {\n\ttest(RuleTester.it.title + \": \" + text, method);\n};\n\n// then use RuleTester as documented\n\nconst ruleTester = new RuleTester();\n\nruleTester.run(\"my-rule\", myRule, {\n\tvalid: [\n\t\t// valid test cases\n\t],\n\tinvalid: [\n\t\t// invalid test cases\n\t],\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Using Migrated Environment Config in Flat Config File",
    "codeDescription": "Demonstrates how to use a migrated environment config in a flat config file. This example extends the 'mocha' config and overrides a global variable.",
    "codeLanguage": "javascript",
    "codeTokens": 151,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/plugin-migration-flat-config.md#2025-04-14_snippet_7",
    "pageTitle": "Plugin Migration to Flat Config for ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from \"eslint/config\";\nimport example from \"eslint-plugin-example\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/tests/*.js\"],\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\n\t\t// use the mocha globals\n\t\textends: [\"example/mocha\"],\n\n\t\t// and provide your own overrides\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\tit: \"readonly\",\n\t\t\t},\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Demonstrating Various Import Syntaxes in JavaScript",
    "codeDescription": "Shows different ways to use the import statement in JavaScript, including single member, multiple members, and importing all members.",
    "codeLanguage": "javascript",
    "codeTokens": 117,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-imports.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: sort-imports",
    "codeList": [
      {
        "language": "javascript",
        "code": "// single - Import single member.\nimport myMember from \"my-module.js\";\nimport {myOtherMember} from \"my-other-module.js\";\n\n// multiple - Import multiple members.\nimport {foo, bar} from \"my-module.js\";\n\n// all - Import all members, where myModule contains all the exported bindings.\nimport * as myModule from \"my-module.js\";"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "ESLint Autofix Implementation",
    "codeDescription": "Shows how to use ESLint to automatically fix linting issues in JavaScript files using the fix option.",
    "codeLanguage": "javascript",
    "codeTokens": 188,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { ESLint } = require(\"eslint\");\n\n(async function main() {\n\t// 1. Create an instance with the `fix` option.\n\tconst eslint = new ESLint({ fix: true });\n\n\t// 2. Lint files. This doesn't modify target files.\n\tconst results = await eslint.lintFiles([\"lib/**/*.js\"]);\n\n\t// 3. Modify the files with the fixed code.\n\tawait ESLint.outputFixes(results);\n\n\t// 4. Format the results.\n\tconst formatter = await eslint.loadFormatter(\"stylish\");\n\tconst resultText = formatter.format(results);\n\n\t// 5. Output it.\n\tconsole.log(resultText);\n})().catch(error => {\n\tprocess.exitCode = 1;\n\tconsole.error(error);\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Correct Global Variable Declaration - JavaScript",
    "codeDescription": "Examples of correct code showing proper ways to declare global variables by explicitly setting them on window object or using IIFE for local scope.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-globals.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint no-implicit-globals Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-implicit-globals: \"error\"*/\n\n// explicitly set on window\nwindow.foo = 1;\nwindow.bar = function() {};\n\n// intended to be scope to this file\n(function() {\n  var foo = 1;\n\n  function bar() {}\n})();"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Adding Test Script to package.json",
    "codeDescription": "Update to package.json that adds a test script to run the rule tests using Node.js.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_7",
    "pageTitle": "ESLint Custom Rule Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "// package.json\n{\n    // ...other configuration\n    \"scripts\": {\n        \"test\": \"node enforce-foo-bar.test.js\"\n    },\n    // ...other configuration\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Incorrect Buffer Constructor Usage in Node.js",
    "codeDescription": "Examples of unsafe and deprecated Buffer constructor usage that should be avoided due to potential security vulnerabilities.",
    "codeLanguage": "javascript",
    "codeTokens": 90,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-buffer-constructor.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule Documentation - no-buffer-constructor",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* eslint no-buffer-constructor: error */\n\nnew Buffer(5);\nnew Buffer([1, 2, 3]);\n\nBuffer(5);\nBuffer([1, 2, 3]);\n\nnew Buffer(res.body.amount);\nnew Buffer(res.body.values);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Configuring Rules with Options in JavaScript",
    "codeDescription": "Shows how to specify additional options for ESLint rules using array syntax in comments.",
    "codeLanguage": "javascript",
    "codeTokens": 48,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rules Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* eslint quotes: [\"error\", \"double\"], curly: 2 */"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Updating RuleTester Test Cases for Language Options in JavaScript",
    "codeDescription": "This example shows how to update RuleTester test cases to use the new 'languageOptions' property instead of 'parserOptions' when specifying ecmaVersion. This change is part of the migration to the flat config system in ESLint v9.",
    "codeLanguage": "javascript",
    "codeTokens": 116,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_17",
    "pageTitle": "Migration Guide for ESLint v9.x",
    "codeList": [
      {
        "language": "javascript",
        "code": "ruleTester.run(\"my-rule\", myRule, {\n\tvalid: [\n\t\t{\n\t\t\tcode: \"foo\",\n\t\t\tlanguageOptions: {\n\t\t\t\tecmaVersion: 6,\n\t\t\t},\n\t\t},\n\t],\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Configuring Processors in Flat Config Format",
    "codeDescription": "Multiple ways to configure processors in flat config format. Shows referencing by string, directly using the processor object, and without requiring the plugin in the config.",
    "codeLanguage": "javascript",
    "codeTokens": 163,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_6",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport somePlugin from \"eslint-plugin-someplugin\";\n\nexport default [\n\t{\n\t\tplugins: { somePlugin },\n\t\tprocessor: \"somePlugin/someProcessor\",\n\t},\n\t{\n\t\tplugins: { somePlugin },\n\t\t// We can embed the processor object in the config directly\n\t\tprocessor: somePlugin.processors.someProcessor,\n\t},\n\t{\n\t\t// We don't need the plugin to be present in the config to use the processor directly\n\t\tprocessor: somePlugin.processors.someProcessor,\n\t},\n];"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Examples of Incorrect Code Violating no-implied-eval Rule in JavaScript",
    "codeDescription": "This code block contains multiple examples of incorrect usage that violate the no-implied-eval rule, including setTimeout(), setInterval(), execScript(), and their window-scoped variants with string arguments.",
    "codeLanguage": "JavaScript",
    "codeTokens": 128,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implied-eval.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-implied-eval",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-implied-eval: \"error\"*/\n/*global window*/\n\nsetTimeout(\"alert('Hi!');\", 100);\n\nsetInterval(\"alert('Hi!');\", 100);\n\nexecScript(\"alert('Hi!')\");\n\nwindow.setTimeout(\"count = 5\", 10);\n\nwindow.setInterval(\"foo = bar\", 10);"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Fixed Example Code",
    "codeDescription": "Example of how the code looks after applying the ESLint fix with the --fix flag.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_18",
    "pageTitle": "ESLint Custom Rule Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "// example.js\n\n// ... rest of file\n\nfunction incorrectFoo() {\n\tconst foo = \"bar\"; // Fixed!\n}"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Accessing SourceCode Object in ESLint Rule",
    "codeDescription": "Shows how to access the SourceCode object from within an ESLint rule's create function using the context.sourceCode property.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_15",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n\tcreate: function (context) {\n\t\tvar sourceCode = context.sourceCode;\n\n\t\t// ...\n\t},\n};"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Using Global Variables Flag in ESLint CLI",
    "codeDescription": "The --global flag defines global variables to prevent them from being flagged as undefined by the no-undef rule. Variables can be marked as read-only (default) or writable by appending :true to the variable name.",
    "codeLanguage": "bash",
    "codeTokens": 68,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Command Line Interface Reference",
    "codeList": [
      {
        "language": "bash",
        "code": "--global require,exports:true file.js"
      },
      {
        "language": "bash",
        "code": "--global require --global exports:true"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Complex Object-Based Schema for ESLint Rule Options (JavaScript)",
    "codeDescription": "A more complex object-based schema example that requires a specific number of options and allows for different types of second options.",
    "codeLanguage": "javascript",
    "codeTokens": 190,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_19",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n\tmeta: {\n\t\tschema: {\n\t\t\ttype: \"array\",\n\t\t\tminItems: 1,\n\t\t\tmaxItems: 2,\n\t\t\titems: [\n\t\t\t\t{\n\t\t\t\t\ttype: \"number\",\n\t\t\t\t\tminimum: 0,\n\t\t\t\t\tmaximum: 10,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tsomeNonOptionalProperty: { type: \"boolean\" },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\trequired: [\"someNonOptionalProperty\"],\n\t\t\t\t\t\t\tadditionalProperties: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tenum: [\"off\", \"strict\"],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t},\n};"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "ESLint Configuration with Global Ignores",
    "codeDescription": "Example of an ESLint configuration that applies rules to all JavaScript files except those ending with '.config.js'. It demonstrates using 'ignores' without 'files' to create a global ignore pattern.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tignores: [\"**/*.config.js\"],\n\t\trules: {\n\t\t\tsemi: \"error\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Correct JSX Syntax with Parser Options",
    "codeDescription": "A correct example of JSX syntax with specific parser options enabling JSX features. This snippet shows how to properly define a JSX element.",
    "codeLanguage": "JSX",
    "codeTokens": 49,
    "codeId": "https://github.com/eslint/eslint/blob/main/tests/fixtures/good-examples.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule Examples",
    "codeList": [
      {
        "language": "jsx",
        "code": "const foo = <bar></bar>;"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Correct Usage of Variables Within Block Scope in JavaScript",
    "codeDescription": "Examples of code that comply with the 'block-scoped-var' rule by properly scoping variables. This includes correct usage in if statements, try-catch blocks, for loops, and class static blocks.",
    "codeLanguage": "JavaScript",
    "codeTokens": 236,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/block-scoped-var.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: block-scoped-var",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint block-scoped-var: \"error\"*/\n\nfunction doIf() {\n    var build;\n\n    if (true) {\n        build = true;\n    }\n\n    console.log(build);\n}\n\nfunction doIfElse() {\n    var build;\n\n    if (true) {\n        build = true;\n    } else {\n        build = false;\n    }\n}\n\nfunction doTryCatch() {\n    var build;\n    var f;\n\n    try {\n        build = 1;\n    } catch (e) {\n        f = build;\n    }\n}\n\nfunction doFor() {\n    for (var x = 1; x < 10; x++) {\n        var y = f(x);\n        console.log(y);\n    }\n}\n\nclass C {\n    static {\n        var build = false;\n        if (something) {\n            build = true;\n        }\n    }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Incorrect Usage: Multiple Examples of Duplicate Keys in JavaScript Objects",
    "codeDescription": "These examples demonstrate various ways of incorrectly using duplicate keys in object literals, which violate the no-dupe-keys rule.",
    "codeLanguage": "javascript",
    "codeTokens": 113,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-keys.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-dupe-keys",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-dupe-keys: \"error\"*/\n\nconst foo = {\n    bar: \"baz\",\n    bar: \"qux\"\n};\n\nconst bar = {\n    \"bar\": \"baz\",\n    bar: \"qux\"\n};\n\nconst baz = {\n    0x1: \"baz\",\n    1: \"qux\"\n};"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "eslintrc Configuration with Overrides",
    "codeDescription": "Example of an eslintrc configuration with overrides for different file patterns, allowing different rules for source and test files.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_9",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// .eslintrc.js\n\nmodule.exports = {\n\t// ...other config\n\toverrides: [\n\t\t{\n\t\t\tfiles: [\"src/**/*\"],\n\t\t\trules: {\n\t\t\t\tsemi: [\"warn\", \"always\"],\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tfiles: [\"test/**/*\"],\n\t\t\trules: {\n\t\t\t\t\"no-console\": \"off\",\n\t\t\t},\n\t\t},\n\t],\n};"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Demonstrating Correct Usage of Variables in JavaScript",
    "codeDescription": "This snippet shows examples of code that comply with the no-unused-vars rule, including proper usage of variables, function parameters, and destructuring assignments.",
    "codeLanguage": "javascript",
    "codeTokens": 153,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-vars.md#2025-04-14_snippet_1",
    "pageTitle": "no-unused-vars Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-unused-vars: \"error\"*/\n\nconst x = 10;\nalert(x);\n\n// foo is considered used here\nmyFunc(function foo() {\n    // ...\n}.bind(this));\n\n(function(foo) {\n    return foo;\n})();\n\nvar myFunc;\nmyFunc = setTimeout(function() {\n    // myFunc is considered used\n    myFunc();\n}, 50);\n\n// Only the second argument from the destructured array is used.\nfunction getY([, y]) {\n    return y;\n}\ngetY([\"a\", \"b\"]);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring a Custom Parser with Babel in ESLint",
    "codeDescription": "This snippet shows how to configure ESLint to use the Babel parser instead of the default Espree parser for all JavaScript files. It imports the Babel parser and applies it to files with .js and .mjs extensions.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/parser.md#2025-04-14_snippet_0",
    "pageTitle": "Configuring Custom Parsers in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport babelParser from \"@babel/eslint-parser\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\", \"**/*.mjs\"],\n\t\tlanguageOptions: {\n\t\t\tparser: babelParser,\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "ESLint Constructor Example",
    "codeDescription": "Shows the basic instantiation of an ESLint object with options parameter.",
    "codeLanguage": "javascript",
    "codeTokens": 39,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const eslint = new ESLint(options);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "ESLint Configuration with File Patterns",
    "codeDescription": "Example of an ESLint configuration that applies rules only to JavaScript files in the 'src' directory. It uses the 'files' property to specify the file pattern.",
    "codeLanguage": "javascript",
    "codeTokens": 98,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"src/**/*.js\"],\n\t\trules: {\n\t\t\tsemi: \"error\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Adding meta.hasSuggestions to ESLint Rules with Suggestions",
    "codeDescription": "An example of how to properly define a rule that provides suggestions in ESLint v8.0.0. The meta.hasSuggestions property must be set to true for rules that want to provide suggestions.",
    "codeLanguage": "js",
    "codeTokens": 90,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint v8.0.0 Migration Guide",
    "codeList": [
      {
        "language": "js",
        "code": "module.exports = {\n\tmeta: {\n\t\thasSuggestions: true,\n\t},\n\tcreate(context) {\n\t\t// your rule\n\t},\n};"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Correct Usage of 'const' and 'let' in JavaScript",
    "codeDescription": "Examples of code that comply with the 'prefer-const' rule by using 'const' for constants and 'let' only when necessary.",
    "codeLanguage": "javascript",
    "codeTokens": 396,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-const.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: prefer-const",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint prefer-const: \"error\"*/\n\n// using const.\nconst a = 0;\n\n// it's never initialized.\nlet b;\nconsole.log(b);\n\n// it's reassigned after initialized.\nlet c;\nc = 0;\nc = 1;\nconsole.log(c);\n\n// it's initialized in a different block from the declaration.\nlet d;\nif (true) {\n    d = 0;\n}\nconsole.log(d);\n\n// it's initialized in a different scope.\nlet e;\nclass C {\n    #x;\n    static {\n        e = obj => obj.#x;\n    }\n}\n\n// it's initialized at a place that we cannot write a variable declaration.\nlet f;\nif (true) f = 0;\nconsole.log(f);\n\n// `i` gets a new binding each iteration\nfor (const i in [1, 2, 3]) {\n  console.log(i);\n}\n\n// `a` gets a new binding each iteration\nfor (const a of [1, 2, 3]) {\n  console.log(a);\n}\n\n// `end` is never reassigned, but we cannot separate the declarations without modifying the scope.\nfor (let i = 0, end = 10; i < end; ++i) {\n    console.log(i);\n}\n\n// `predicate` is only assigned once but cannot be separately declared as `const`\nlet predicate;\n[object.type, predicate] = foo();\n\n// `g` is only assigned once but cannot be separately declared as `const`\nlet g;\nconst h = {};\n({ g, c: h.c } = func());\n\n// suggest to use `no-var` rule.\nvar i = 3;\nconsole.log(i);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Testing Rule Suggestions with Description",
    "codeDescription": "Example demonstrating how to test rule suggestions by verifying the suggestion description and the resulting code output after applying the suggestion.",
    "codeLanguage": "javascript",
    "codeTokens": 124,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_28",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "ruleTester.run(\"my-rule-for-no-foo\", rule, {\n\tvalid: [],\n\tinvalid: [\n\t\t{\n\t\t\tcode: \"var foo;\",\n\t\t\terrors: [\n\t\t\t\t{\n\t\t\t\t\tsuggestions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdesc: \"Rename identifier 'foo' to 'bar'\",\n\t\t\t\t\t\t\toutput: \"var bar;\",\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Running ESLint CLI in Debug Mode",
    "codeDescription": "Shows how to run ESLint with the --debug flag to see detailed debugging information, including which configuration file is being loaded for a specific JavaScript file.",
    "codeLanguage": "text",
    "codeTokens": 129,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/debug.md#2025-04-14_snippet_0",
    "pageTitle": "Debugging ESLint Configuration",
    "codeList": [
      {
        "language": "text",
        "code": "eslint:eslint Using file patterns: bin/eslint.js +0ms\neslint:eslint Searching for eslint.config.js +0ms\neslint:eslint Loading config from C:\\Users\\nzakas\\projects\\eslint\\eslint\\eslint.config.js +5ms\neslint:eslint Config file URL is file:///C:/Users/nzakas/projects/eslint/eslint/eslint.config.js +0ms"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Correct Usage of Generator Functions with ESLint require-yield Rule",
    "codeDescription": "Examples showing proper generator function implementations that satisfy the require-yield rule: using yield, regular functions, and empty generator functions.",
    "codeLanguage": "javascript",
    "codeTokens": 97,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/require-yield.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: require-yield",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint require-yield: \"error\"*/\n\nfunction* foo() {\n  yield 5;\n  return 10;\n}\n\nfunction bar() {\n  return 10;\n}\n\n// This rule does not warn on empty generator functions.\nfunction* baz() { }"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "ESLint Configuration with File Exclusions",
    "codeDescription": "Example of an ESLint configuration that applies rules to JavaScript files in the 'src' directory, excluding files ending with '.config.js'. It uses both 'files' and 'ignores' properties.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"src/**/*.js\"],\n\t\tignores: [\"**/*.config.js\"],\n\t\trules: {\n\t\t\tsemi: \"error\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring ESLint with Shareable Configs",
    "codeDescription": "Example showing how to use multiple shareable configs together, combining the recommended configs from @eslint/js and eslint-plugin-solid.",
    "codeLanguage": "javascript",
    "codeTokens": 70,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/core-concepts/glossary.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Glossary",
    "codeList": [
      {
        "language": "javascript",
        "code": "import js from \"@eslint/js\";\nimport solid from \"eslint-plugin-solid/configs/recommended\";\n\nexport default [js.configs.recommended, solid];"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Using Symbol with Description in JavaScript",
    "codeDescription": "Demonstrates the proper way to create Symbol instances with descriptions, both using string literals and variables.",
    "codeLanguage": "javascript",
    "codeTokens": 61,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/symbol-description.md#2025-04-14_snippet_0",
    "pageTitle": "Symbol Description Rule in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "const foo = Symbol(\"some description\");\n\nconst someString = \"some description\";\nconst bar = Symbol(someString);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Detailed Formatter in JavaScript",
    "codeDescription": "A more complex ESLint formatter that provides detailed information about each error and warning, including file paths, rule IDs, and line numbers.",
    "codeLanguage": "javascript",
    "codeTokens": 357,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-formatters.md#2025-04-14_snippet_8",
    "pageTitle": "ESLint Custom Formatters Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = function (results, context) {\n\tvar results = results || [];\n\n\tvar summary = results.reduce(\n\t\tfunction (seq, current) {\n\t\t\tcurrent.messages.forEach(function (msg) {\n\t\t\t\tvar logMessage = {\n\t\t\t\t\tfilePath: current.filePath,\n\t\t\t\t\truleId: msg.ruleId,\n\t\t\t\t\truleUrl: context.rulesMeta[msg.ruleId].docs.url,\n\t\t\t\t\tmessage: msg.message,\n\t\t\t\t\tline: msg.line,\n\t\t\t\t\tcolumn: msg.column,\n\t\t\t\t};\n\n\t\t\t\tif (msg.severity === 1) {\n\t\t\t\t\tlogMessage.type = \"warning\";\n\t\t\t\t\tseq.warnings.push(logMessage);\n\t\t\t\t}\n\t\t\t\tif (msg.severity === 2) {\n\t\t\t\t\tlogMessage.type = \"error\";\n\t\t\t\t\tseq.errors.push(logMessage);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn seq;\n\t\t},\n\t\t{\n\t\t\terrors: [],\n\t\t\twarnings: [],\n\t\t},\n\t);\n\n\tif (summary.errors.length > 0 || summary.warnings.length > 0) {\n\t\tvar lines = summary.errors\n\t\t\t.concat(summary.warnings)\n\t\t\t.map(function (msg) {\n\t\t\t\treturn (\n\t\t\t\t\t\"\\n\" +\n\t\t\t\t\tmsg.type +\n\t\t\t\t\t\" \" +\n\t\t\t\t\tmsg.ruleId +\n\t\t\t\t\t(msg.ruleUrl ? \" (\" + msg.ruleUrl + \")\" : \"\") +\n\t\t\t\t\t\"\\n  \" +\n\t\t\t\t\tmsg.filePath +\n\t\t\t\t\t\":\" +\n\t\t\t\t\tmsg.line +\n\t\t\t\t\t\":\" +\n\t\t\t\t\tmsg.column\n\t\t\t\t);\n\t\t\t})\n\t\t\t.join(\"\\n\");\n\n\t\treturn lines + \"\\n\";\n\t}\n};"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Complex Custom Formatter with Environment Variables",
    "codeDescription": "Advanced formatter implementation that uses environment variables to control output behavior",
    "codeLanguage": "javascript",
    "codeTokens": 342,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-formatters.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Custom Formatters Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = function (results) {\n\tvar skipWarnings = process.env.FORMATTER_SKIP_WARNINGS === \"true\";\n\n\tvar results = results || [];\n\tvar summary = results.reduce(\n\t\tfunction (seq, current) {\n\t\t\tcurrent.messages.forEach(function (msg) {\n\t\t\t\tvar logMessage = {\n\t\t\t\t\tfilePath: current.filePath,\n\t\t\t\t\truleId: msg.ruleId,\n\t\t\t\t\tmessage: msg.message,\n\t\t\t\t\tline: msg.line,\n\t\t\t\t\tcolumn: msg.column,\n\t\t\t\t};\n\n\t\t\t\tif (msg.severity === 1) {\n\t\t\t\t\tlogMessage.type = \"warning\";\n\t\t\t\t\tseq.warnings.push(logMessage);\n\t\t\t\t}\n\t\t\t\tif (msg.severity === 2) {\n\t\t\t\t\tlogMessage.type = \"error\";\n\t\t\t\t\tseq.errors.push(logMessage);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn seq;\n\t\t},\n\t\t{\n\t\t\terrors: [],\n\t\t\twarnings: [],\n\t\t},\n\t);\n\n\tif (summary.errors.length > 0 || summary.warnings.length > 0) {\n\t\tvar warnings = !skipWarnings ? summary.warnings : []; // skip the warnings in that case\n\n\t\tvar lines = summary.errors\n\t\t\t.concat(warnings)\n\t\t\t.map(function (msg) {\n\t\t\t\treturn (\n\t\t\t\t\t\"\\n\" +\n\t\t\t\t\tmsg.type +\n\t\t\t\t\t\" \" +\n\t\t\t\t\tmsg.ruleId +\n\t\t\t\t\t\"\\n  \" +\n\t\t\t\t\tmsg.filePath +\n\t\t\t\t\t\":\" +\n\t\t\t\t\tmsg.line +\n\t\t\t\t\t\":\" +\n\t\t\t\t\tmsg.column\n\t\t\t\t);\n\t\t\t})\n\t\t\t.join(\"\\n\");\n\n\t\treturn lines + \"\\n\";\n\t}\n};"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "ESLint Plugin Metadata Definition",
    "codeDescription": "Example showing how to define plugin metadata including name and version information. Demonstrates the recommended structure for plugin identification.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/plugins.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Plugin Development Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const plugin = {\n\t// preferred location of name and version\n\tmeta: {\n\t\tname: \"eslint-plugin-example\",\n\t\tversion: \"1.2.3\",\n\t},\n\trules: {\n\t\t// add rules here\n\t},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Adding Browser Globals to ESLint Configuration Using Globals Package",
    "codeDescription": "Example showing how to import and use the globals package to add browser globals to your ESLint configuration. This adds all browser globals like console, document, etc.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options.md#2025-04-14_snippet_6",
    "pageTitle": "Configuring Language Options in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport globals from \"globals\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\t...globals.browser,\n\t\t\t},\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Correct Usage of Symbol Function in JavaScript",
    "codeDescription": "This example demonstrates the proper way to use Symbol as a function call without the new operator. It also shows that the rule ignores shadowed Symbol variables.",
    "codeLanguage": "js",
    "codeTokens": 89,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-symbol.md#2025-04-14_snippet_2",
    "pageTitle": "no-new-symbol ESLint Rule Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "/*eslint no-new-symbol: \"error\"*/\n\nvar foo = Symbol('foo');\n\n// Ignores shadowed Symbol.\nfunction bar(Symbol) {\n    const baz = new Symbol(\"baz\");\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Correct Usage with 'always' Option - JavaScript",
    "codeDescription": "Shows correct code examples when the rule is configured with the 'always' option, demonstrating proper spacing before function parentheses.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-parentheses.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Function Parentheses Spacing Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "function foo () {\n    // ...\n}\n\nvar bar = function () {\n    // ...\n};\n\nvar bar = function foo () {\n    // ...\n};\n\nclass Foo {\n    constructor () {\n        // ...\n    }\n}\n\nvar baz = {\n    bar () {\n        // ...\n    }\n};"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Example of async function with await",
    "codeDescription": "An example of a proper async function that uses the await operator with fetch and JSON processing.",
    "codeLanguage": "javascript",
    "codeTokens": 70,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/require-await.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: require-await",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function fetchData(processDataItem) {\n    const response = await fetch(DATA_URL);\n    const data = await response.json();\n\n    return data.map(processDataItem);\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Incorrect Usage of Array Reduce Method in JavaScript",
    "codeDescription": "This snippet demonstrates an incorrect implementation of the reduce method, where the return statement is missing in the callback function. This can lead to errors when trying to access properties of undefined.",
    "codeLanguage": "JavaScript",
    "codeTokens": 92,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/array-callback-return.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: array-callback-return",
    "codeList": [
      {
        "language": "javascript",
        "code": "const indexMap = myArray.reduce(function(memo, item, index) {\n  memo[item] = index;\n}, {}); // Error: cannot set property 'b' of undefined"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "ESLint Verify and Fix Operation",
    "codeDescription": "Shows usage of verifyAndFix() method to automatically fix linting errors while verifying code.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_22",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nconst messages = linter.verifyAndFix(\"var foo\", {\n\trules: {\n\t\tsemi: 2,\n\t},\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Suggestions for ESLint Rules in JavaScript",
    "codeDescription": "This snippet demonstrates how to provide suggestions for an ESLint rule using the 'suggest' key in the context.report() method. It includes examples of providing multiple suggestions with descriptions and fix functions.",
    "codeLanguage": "javascript",
    "codeTokens": 174,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_10",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "context.report({\n    node: node,\n    message: \"Unnecessary escape character: \\\\{{character}}.\",\n    data: { character },\n    suggest: [\n        {\n            desc: \"Remove the `\\\\`. This maintains the current functionality.\",\n            fix: function(fixer) {\n                return fixer.removeRange(range);\n            }\n        },\n        {\n            desc: \"Replace the `\\\\` with `\\\\\\\\` to include the actual backslash character.\",\n            fix: function(fixer) {\n                return fixer.insertTextBeforeRange(range, \"\\\\\");\n            }\n        }\n    ]\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring Virtual ESLint Plugin",
    "codeDescription": "This snippet demonstrates how to create and configure a virtual ESLint plugin directly in the configuration file, allowing the use of custom rules without creating a separate plugin file.",
    "codeLanguage": "JavaScript",
    "codeTokens": 138,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins.md#2025-04-14_snippet_2",
    "pageTitle": "Configuring ESLint Plugins in Flat Config Format",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport myRule from \"./rules/my-rule.js\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tplugins: {\n\t\t\tlocal: {\n\t\t\t\trules: {\n\t\t\t\t\t\"my-rule\": myRule,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\trules: {\n\t\t\t\"local/my-rule\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "ESLint Configuration for Restricting Require Calls",
    "codeDescription": "JSON configuration for the no-restricted-syntax rule that disallows calls to the require function.",
    "codeLanguage": "json",
    "codeTokens": 73,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/selectors.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Selectors Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"rules\": {\n\t\t\"no-restricted-syntax\": [\n\t\t\t\"error\",\n\t\t\t\"CallExpression[callee.name='require']\"\n\t\t]\n\t}\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Examples of code that trigger the prefer-arrow-callback rule",
    "codeDescription": "These examples show function expressions used as callbacks that would trigger the rule violation. The rule recommends using arrow functions instead for cleaner, more concise code.",
    "codeLanguage": "javascript",
    "codeTokens": 104,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-arrow-callback.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: prefer-arrow-callback",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* eslint prefer-arrow-callback: \"error\" */\n\nfoo(function(a) { return a; }); // ERROR\n// prefer: foo(a => a)\n\nfoo(function() { return this.a; }.bind(this)); // ERROR\n// prefer: foo(() => this.a)"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring simple module restrictions in ESLint (JSON)",
    "codeDescription": "Basic configuration that restricts usage of 'foo-module' and 'bar-module' in JavaScript code using an array of module names.",
    "codeLanguage": "json",
    "codeTokens": 63,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-modules.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint no-restricted-modules Rule Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "\"no-restricted-modules\": [\"error\", \"foo-module\", \"bar-module\"]"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring ESLint Rules with Inline Comments",
    "codeDescription": "Example of an inline configuration comment that disables the eqeqeq rule and sets the curly rule to error severity. This demonstrates how to use configuration comments to modify rule settings within source code.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/core-concepts/glossary.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Glossary",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* eslint eqeqeq: \"off\", curly: \"error\" */"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Enforcing Parentheses in Arrow Functions (JavaScript)",
    "codeDescription": "This snippet demonstrates the basic usage of the 'arrow-parens' rule, showing examples of bad and good practices for arrow function parameter parentheses.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-parens.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: arrow-parens",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Bad\na => {}\n\n// Good\n(a) => {}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing ESLint Rule with Selectors",
    "codeDescription": "Example showing how to create an ESLint rule that uses selectors to listen for specific AST patterns. Demonstrates listening for if statements with block bodies and function declarations with more than 3 parameters.",
    "codeLanguage": "javascript",
    "codeTokens": 171,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/selectors.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Selectors Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n\tcreate(context) {\n\t\t// ...\n\n\t\treturn {\n\t\t\t// This listener will be called for all IfStatement nodes with blocks.\n\t\t\t\"IfStatement > BlockStatement\": function (blockStatementNode) {\n\t\t\t\t// ...your logic here\n\t\t\t},\n\n\t\t\t// This listener will be called for all function declarations with more than 3 parameters.\n\t\t\t\"FunctionDeclaration[params.length>3]\": function (\n\t\t\t\tfunctionDeclarationNode,\n\t\t\t) {\n\t\t\t\t// ...your logic here\n\t\t\t},\n\t\t};\n\t},\n};"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Dynamic Plugin Metadata Loading",
    "codeDescription": "Example showing how to dynamically load plugin metadata from package.json using the file system module.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/plugins.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Plugin Development Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import fs from \"fs\";\n\nconst pkg = JSON.parse(\n\tfs.readFileSync(new URL(\"./package.json\", import.meta.url), \"utf8\"),\n);\n\nconst plugin = {\n\t// preferred location of name and version\n\tmeta: {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t},\n\trules: {\n\t\t// add rules here\n\t},\n};\n\nexport default plugin;"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Incorrect Usage with Always Option",
    "codeDescription": "Examples of code that violates the eqeqeq rule when configured with the \"always\" option.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/eqeqeq.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint eqeqeq Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na == b\nfoo == true\nbananas != 1\nvalue == undefined\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Incorrect Usage: Reassigning const Variable in JavaScript",
    "codeDescription": "This snippet demonstrates incorrect usage by attempting to reassign a value to a const variable, which is not allowed and will raise a runtime error.",
    "codeLanguage": "JavaScript",
    "codeTokens": 72,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-const-assign.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-const-assign",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-const-assign: \"error\"*/\n\nconst a = 0;\na = 1;"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Examples of Correct Code for space-infix-ops Rule",
    "codeDescription": "Examples of code that correctly follows the space-infix-ops rule, with proper spacing around various operators.",
    "codeLanguage": "javascript",
    "codeTokens": 96,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/space-infix-ops.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint space-infix-ops Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint space-infix-ops: \"error\"*/\n\na + b\n\na       + b\n\na ? b : c\n\nconst a = {b:1};\n\nvar {b = 0} = bar;\n\nfunction foo(a = 0) { }"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Demonstrating Correct Usage of typeof with 'typeof' Option and Global Declaration in JavaScript",
    "codeDescription": "This code snippet shows how to use typeof checks with the 'typeof' option set to true by declaring the variable as global, preventing 'no-undef' warnings.",
    "codeLanguage": "JavaScript",
    "codeTokens": 80,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rule: no-undef",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*global a*/\n/*eslint no-undef: [\"error\", { \"typeof\": true }] */\n\nif(typeof a === \"string\"){}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Configuring Rules in JSON Configuration File",
    "codeDescription": "Shows how to configure ESLint rules in a JSON configuration file using the 'rules' key with error levels and options. This is used for project-wide rule configuration.",
    "codeLanguage": "json",
    "codeTokens": 93,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_6",
    "pageTitle": "Configuring ESLint Rules (Deprecated Format)",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"rules\": {\n\t\t\"eqeqeq\": \"off\",\n\t\t\"curly\": \"error\",\n\t\t\"quotes\": [\"error\", \"double\"]\n\t}\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Applying a Configuration Array to a Specific File Pattern in ESLint",
    "codeDescription": "This snippet demonstrates how to apply an entire configuration array to only a subset of files. The extends property is used to incorporate the imported configuration array, and the files property restricts the configuration to specific file paths.",
    "codeLanguage": "javascript",
    "codeTokens": 132,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/combine-configs.md#2025-04-14_snippet_4",
    "pageTitle": "Combining ESLint Configurations",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport exampleConfigs from \"eslint-config-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/src/safe/*.js\"],\n\t\textends: [exampleConfigs],\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Creating Test File (Shell Command)",
    "codeDescription": "Shell command to create a test file for the custom ESLint rule.",
    "codeLanguage": "shell",
    "codeTokens": 34,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_13",
    "pageTitle": "ESLint Custom Rule Tutorial",
    "codeList": [
      {
        "language": "shell",
        "code": "touch example.js"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Modern Object-based ESLint Rule Definition with Fixable Property",
    "codeDescription": "The recommended object-based format for defining ESLint rules that provide fixes. The meta.fixable property must be set to either \"code\" or \"whitespace\" for rules that want to provide fixes.",
    "codeLanguage": "js",
    "codeTokens": 98,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint v8.0.0 Migration Guide",
    "codeList": [
      {
        "language": "js",
        "code": "module.exports = {\n\tmeta: {\n\t\tfixable: \"code\", // or \"whitespace\"\n\t},\n\tcreate(context) {\n\t\t// your rule\n\t},\n};"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Incorrect Usage: Awaiting in Loop (JavaScript)",
    "codeDescription": "This snippet demonstrates an inefficient use of await inside a loop, where each iteration waits for the previous asynchronous operation to complete before starting the next one.",
    "codeLanguage": "JavaScript",
    "codeTokens": 102,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-await-in-loop.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-await-in-loop",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function foo(things) {\n  const results = [];\n  for (const thing of things) {\n    // Bad: each loop iteration is delayed until the entire asynchronous operation completes\n    results.push(await doAsyncWork(thing));\n  }\n  return results;\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Modern Spread Syntax Usage",
    "codeDescription": "Example showing how to call variadic functions using ES2015 spread syntax",
    "codeLanguage": "javascript",
    "codeTokens": 53,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-spread.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint prefer-spread Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const args = [1, 2, 3, 4];\nMath.max(...args);"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Configuring no-redeclare Rule in ESLint v6",
    "codeDescription": "This snippet shows how to configure the no-redeclare rule to restore the previous default behavior in ESLint v6. It sets the builtinGlobals option to false.",
    "codeLanguage": "json",
    "codeTokens": 80,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-6.0.0.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint v6.0.0 Migration Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"rules\": {\n\t\t\"no-redeclare\": [\"error\", { \"builtinGlobals\": false }]\n\t}\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Correct Usage Examples of Object Spread Syntax in JavaScript",
    "codeDescription": "Examples of code patterns that comply with the prefer-object-spread rule, demonstrating proper use of object spread syntax and valid Object.assign calls.",
    "codeLanguage": "javascript",
    "codeTokens": 118,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-object-spread.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: prefer-object-spread",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint prefer-object-spread: \"error\"*/\n\n({ ...foo });\n\n({ ...baz, foo: 'bar' });\n\n// Any Object.assign call without an object literal as the first argument\nObject.assign(foo, { bar: baz });\n\nObject.assign(foo, bar);\n\nObject.assign(foo, { bar, baz });\n\nObject.assign(foo, { ...baz });"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Disabling Inline ESLint Configuration Comments in JavaScript",
    "codeDescription": "Demonstrates how to disable all inline config comments using the 'noInlineConfig' setting in the configuration file.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_12",
    "pageTitle": "ESLint Rules Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlinterOptions: {\n\t\t\tnoInlineConfig: true,\n\t\t},\n\t\trules: {\n\t\t\t\"no-unused-expressions\": \"error\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Using ESLint Directive Comments with Descriptions",
    "codeDescription": "Example of using the new ESLint v7.0.0 feature that allows adding descriptions to directive comments. This demonstrates how to disable rules for a specific line while providing context.",
    "codeLanguage": "JavaScript",
    "codeTokens": 73,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-7.0.0.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint v7.0.0 Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint-disable-next-line a-rule, another-rule -- those are buggy!!"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Incorrect Usage Examples of Native Object Extension",
    "codeDescription": "Examples of code that violates the no-extend-native rule by directly modifying built-in object prototypes",
    "codeLanguage": "javascript",
    "codeTokens": 71,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extend-native.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule Documentation - no-extend-native",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-extend-native: \"error\"*/\n\nObject.prototype.a = \"a\";\nObject.defineProperty(Array.prototype, \"times\", { value: 999 });"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Configuring RuleTester with ESLint v8 Defaults in JavaScript",
    "codeDescription": "This snippet demonstrates how to configure the new RuleTester to use the old ESLint v8 defaults for ecmaVersion and sourceType. This is useful when migrating existing tests that rely on the previous default behavior.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_16",
    "pageTitle": "Migration Guide for ESLint v9.x",
    "codeList": [
      {
        "language": "javascript",
        "code": "const ruleTester = new RuleTester({\n\tlanguageOptions: {\n\t\tecmaVersion: 5,\n\t\tsourceType: \"script\",\n\t},\n});"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Creating SourceCode Instances in JavaScript",
    "codeDescription": "Illustrates how to create a new SourceCode instance by passing in a code string and an AST. It also shows how SourceCode handles Unicode BOM characters.",
    "codeLanguage": "javascript",
    "codeTokens": 120,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_14",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const SourceCode = require(\"eslint\").SourceCode;\n\nconst code = new SourceCode(\"var foo = bar;\", ast);\n\nconst codeWithBOM = new SourceCode(\"\\uFEFFvar foo = bar;\", ast);\n\nassert(codeWithBOM.hasBOM === true);\nassert(codeWithBOM.text === \"var foo = bar;\");"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Enabling JSX Parsing in ESLint's Default Parser",
    "codeDescription": "Configuration example that enables JSX syntax parsing in ESLint's default parser. This sets the jsx ecmaFeature to true while keeping other parser options at their default values.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options.md#2025-04-14_snippet_1",
    "pageTitle": "Configuring Language Options in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlanguageOptions: {\n\t\t\tparserOptions: {\n\t\t\t\tecmaFeatures: {\n\t\t\t\t\tjsx: true,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Correct Alternative to Function Constructor in JavaScript",
    "codeDescription": "Example of the recommended way to create functions in JavaScript using function expressions instead of the Function constructor.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-func.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-new-func",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-new-func: \"error\"*/\n\nconst x = function (a, b) {\n    return a + b;\n};"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Demonstrating operator-linebreak with 'before' option in JavaScript",
    "codeDescription": "This snippet shows incorrect and correct code examples for the operator-linebreak rule with the 'before' option. It illustrates how operators should be placed at the beginning of lines.",
    "codeLanguage": "javascript",
    "codeTokens": 153,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/operator-linebreak.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint operator-linebreak Rule",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint operator-linebreak: [\"error\", \"before\"]*/\n\nfoo = 1 + 2;\n\nfoo = 1\n    + 2;\n\nfoo\n    = 5;\n\nif (someCondition\n    || otherCondition) {\n}\n\nanswer = everything\n  ? 42\n  : foo;\n\nclass Foo {\n    a\n        = 1;\n    [b]\n        = 2;\n    [c\n    ]\n        = 3;\n    d = 4;\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Migrating Environments to Configs in JavaScript",
    "codeDescription": "Shows how to migrate plugin environments to configs in the flat config system. This example converts a 'mocha' environment to a config with global variables.",
    "codeLanguage": "javascript",
    "codeTokens": 159,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/plugin-migration-flat-config.md#2025-04-14_snippet_6",
    "pageTitle": "Plugin Migration to Flat Config for ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "const plugin = {\n\tconfigs: {},\n\trules: {},\n\tprocessors: {},\n};\n\n// assign configs here so we can reference `plugin`\nObject.assign(plugin.configs, {\n\tmocha: {\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\tit: \"writeable\",\n\t\t\t\txit: \"writeable\",\n\t\t\t\tdescribe: \"writeable\",\n\t\t\t\txdescribe: \"writeable\",\n\t\t\t},\n\t\t},\n\t},\n});\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Ignoring Directories in ESLint Configuration",
    "codeDescription": "This snippet shows how to ignore an entire directory in ESLint configuration. It ignores the .config directory as a whole, preventing file search from traversing into it.",
    "codeLanguage": "javascript",
    "codeTokens": 88,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore.md#2025-04-14_snippet_1",
    "pageTitle": "Configuring ESLint Ignore Files",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig, globalIgnores } from \"eslint/config\";\n\nexport default defineConfig([globalIgnores([\".config/\"]));"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Validating Callback Execution Paths in JavaScript",
    "codeDescription": "ESLint rule that verifies a callback parameter 'cb' is called in every possible code path. Tracks function information and segment states to ensure complete callback coverage.",
    "codeLanguage": "javascript",
    "codeTokens": 706,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/code-path-analysis.md#2025-04-14_snippet_4",
    "pageTitle": "Code Path Analysis in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "function hasCb(node, context) {\n\tif (node.type.indexOf(\"Function\") !== -1) {\n\t\tconst sourceCode = context.sourceCode;\n\t\treturn sourceCode.getDeclaredVariables(node).some(function (v) {\n\t\t\treturn v.type === \"Parameter\" && v.name === \"cb\";\n\t\t});\n\t}\n\treturn false;\n}\n\nfunction isCbCalled(info) {\n\treturn info.cbCalled;\n}\n\nmodule.exports = {\n\tmeta: {\n\t\t// ...\n\t},\n\tcreate(context) {\n\t\tlet funcInfo;\n\t\tconst funcInfoStack = [];\n\t\tconst segmentInfoMap = Object.create(null);\n\n\t\treturn {\n\t\t\t// Checks `cb`.\n\t\t\tonCodePathStart(codePath, node) {\n\t\t\t\tfuncInfoStack.push(funcInfo);\n\n\t\t\t\tfuncInfo = {\n\t\t\t\t\tcodePath: codePath,\n\t\t\t\t\thasCb: hasCb(node, context),\n\t\t\t\t\tcurrentSegments: new Set(),\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tonCodePathEnd(codePath, node) {\n\t\t\t\tfuncInfo = funcInfoStack.pop();\n\n\t\t\t\t// Checks `cb` was called in every paths.\n\t\t\t\tconst cbCalled = codePath.finalSegments.every(\n\t\t\t\t\tfunction (segment) {\n\t\t\t\t\t\tconst info = segmentInfoMap[segment.id];\n\t\t\t\t\t\treturn info.cbCalled;\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tif (!cbCalled) {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tmessage: \"`cb` should be called in every path.\",\n\t\t\t\t\t\tnode: node,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Manages state of code paths and tracks traversed segments\n\t\t\tonCodePathSegmentStart(segment) {\n\t\t\t\tfuncInfo.currentSegments.add(segment);\n\n\t\t\t\t// Ignores if `cb` doesn't exist.\n\t\t\t\tif (!funcInfo.hasCb) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Initialize state of this path.\n\t\t\t\tconst info = (segmentInfoMap[segment.id] = {\n\t\t\t\t\tcbCalled: false,\n\t\t\t\t});\n\n\t\t\t\t// If there are the previous paths, merges state.\n\t\t\t\t// Checks `cb` was called in every previous path.\n\t\t\t\tif (segment.prevSegments.length > 0) {\n\t\t\t\t\tinfo.cbCalled = segment.prevSegments.every(isCbCalled);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Tracks unreachable segment traversal\n\t\t\tonUnreachableCodePathSegmentStart(segment) {\n\t\t\t\tfuncInfo.currentSegments.add(segment);\n\t\t\t},\n\n\t\t\t// Tracks reachable segment traversal\n\t\t\tonCodePathSegmentEnd(segment) {\n\t\t\t\tfuncInfo.currentSegments.delete(segment);\n\t\t\t},\n\n\t\t\t// Tracks unreachable segment traversal\n\t\t\tonUnreachableCodePathSegmentEnd(segment) {\n\t\t\t\tfuncInfo.currentSegments.delete(segment);\n\t\t\t},\n\n\t\t\t// Checks reachable or not.\n\t\t\tCallExpression(node) {\n\t\t\t\t// Ignores if `cb` doesn't exist.\n\t\t\t\tif (!funcInfo.hasCb) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Sets marks that `cb` was called.\n\t\t\t\tconst callee = node.callee;\n\t\t\t\tif (callee.type === \"Identifier\" && callee.name === \"cb\") {\n\t\t\t\t\tfuncInfo.currentSegments.forEach(segment => {\n\t\t\t\t\t\tconst info = segmentInfoMap[segment.id];\n\t\t\t\t\t\tinfo.cbCalled = true;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t},\n};"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Correct Usage of Optional Chaining in JavaScript",
    "codeDescription": "Examples of code patterns that use optional chaining safely and would pass the no-unsafe-optional-chaining rule.",
    "codeLanguage": "javascript",
    "codeTokens": 162,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-optional-chaining.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Rule: no-unsafe-optional-chaining",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-unsafe-optional-chaining: \"error\"*/\n\n(obj?.foo)?.()\n\nobj?.foo();\n\n(obj?.foo ?? bar)();\n\nobj?.foo.bar;\n\nobj.foo?.bar;\n\nfoo?.()?.bar;\n\n(obj?.foo ?? bar)`template`;\n\nnew (obj?.foo ?? bar)();\n\nconst baz = {...obj?.foo};\n\nconst { bar } = obj?.foo || baz;\n\nasync function foo () {\n  const { bar } = await obj?.foo || baz;\n   (await obj?.foo)?.()\n   (await obj?.foo)?.bar;\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Demonstrating Template Tag Spacing in JavaScript",
    "codeDescription": "These examples show the two equivalent ways of using tagged template literals, with and without spacing between the tag function and the template literal.",
    "codeLanguage": "JavaScript",
    "codeTokens": 61,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/template-tag-spacing.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: template-tag-spacing",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "let hello = func`Hello world`;\nlet hello = func `Hello world`;"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Correct Error Handling: Parallel Promise Resolution (JavaScript)",
    "codeDescription": "This snippet demonstrates the proper way to handle multiple promises, using Promise.all() to resolve them in parallel and catch any rejections in a single try-catch block.",
    "codeLanguage": "JavaScript",
    "codeTokens": 132,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-await-in-loop.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Rule: no-await-in-loop",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function foo() {\n    const arrayOfPromises = somethingThatCreatesAnArrayOfPromises();\n    // Good: Any rejections will cause a single exception to be thrown here,\n    // which may be caught and handled by the caller.\n    const arrayOfValues = await Promise.all(arrayOfPromises);\n    for (const value of arrayOfValues) {\n        console.log(value);\n    }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Correct Import Sorting Examples in JavaScript",
    "codeDescription": "Demonstrates correctly sorted import statements according to the default sort-imports rule settings.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-imports.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Rule: sort-imports",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint sort-imports: \"error\"*/\nimport 'module-without-export.js';\nimport * as bar from 'bar.js';\nimport * as foo from 'foo.js';\nimport {alpha, beta} from 'alpha.js';\nimport {delta, gamma} from 'delta.js';\nimport a from 'baz.js';\nimport {b} from 'qux.js';"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Applying an Imported Configuration Array in ESLint",
    "codeDescription": "This snippet demonstrates importing a configuration array from a shareable config module and inserting it directly into the exported configuration. Additional custom rules are added after the imported configuration array.",
    "codeLanguage": "javascript",
    "codeTokens": 118,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/combine-configs.md#2025-04-14_snippet_2",
    "pageTitle": "Combining ESLint Configurations",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport exampleConfigs from \"eslint-config-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t// insert array directly\n\texampleConfigs,\n\n\t// your modifications\n\t{\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Combining ESLint Configs in JavaScript",
    "codeDescription": "Shows how to create an ESLint configuration that both extends another configuration and adds its own rules. This example demonstrates proper resolution of package paths.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_9",
    "pageTitle": "Creating and Sharing ESLint Configurations",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n\trules: {\n\t\t\"no-console\": 1,\n\t},\n\textends: \"myconfig/lib/ci/common\",\n};"
      }
    ],
    "relevance": 0.957
  },
  {
    "codeTitle": "Demonstrating Default Case in JavaScript Switch Statement",
    "codeDescription": "This snippet shows a switch statement with a default case, which is the recommended practice according to some code conventions. The default case is explicitly stated, even if it's empty.",
    "codeLanguage": "javascript",
    "codeTokens": 91,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/default-case.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: default-case",
    "codeList": [
      {
        "language": "javascript",
        "code": "switch (foo) {\n    case 1:\n        doSomething();\n        break;\n\n    case 2:\n        doSomething();\n        break;\n\n    default:\n    // do nothing\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Demonstrating Return Override in Finally Block (JavaScript)",
    "codeDescription": "This example shows how a return statement in a finally block overrides a return statement in a try block. Instead of returning 1 as expected, the function returns 3.",
    "codeLanguage": "javascript",
    "codeTokens": 130,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-finally.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-unsafe-finally",
    "codeList": [
      {
        "language": "javascript",
        "code": "// We expect this function to return 1;\n(() => {\n    try {\n        return 1; // 1 is returned but suspended until finally block ends\n    } catch(err) {\n        return 2;\n    } finally {\n        return 3; // 3 is returned before 1, which we did not expect\n    }\n})();\n\n// > 3"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Mixed Environment ESLint Configuration",
    "codeDescription": "Advanced configuration example for projects with both browser scripts and Node.js tools using base and CJS configs",
    "codeLanguage": "javascript",
    "codeTokens": 141,
    "codeId": "https://github.com/eslint/eslint/blob/main/packages/eslint-config-eslint/README.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Configuration Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { defineConfig } = require(\"eslint/config\");\nconst eslintConfigESLintBase = require(\"eslint-config-eslint/base\");\nconst eslintConfigESLintCJS = require(\"eslint-config-eslint/cjs\");\n\nmodule.exports = defineConfig([\n\t{\n\t\tfiles: [\"scripts/*.js\"],\n\t\textends: [eslintConfigESLintBase],\n\t},\n\t{\n\t\tfiles: [\"eslint.config.js\", \".eleventy.js\", \"tools/*.js\"],\n\t\textends: [eslintConfigESLintCJS],\n\t},\n]);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Demonstrating operator-linebreak with overrides in JavaScript",
    "codeDescription": "This snippet shows correct code examples for the operator-linebreak rule with overrides for specific operators. It illustrates how to customize linebreak behavior for individual operators.",
    "codeLanguage": "javascript",
    "codeTokens": 87,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/operator-linebreak.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint operator-linebreak Rule",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint operator-linebreak: [\"error\", \"after\", { \"overrides\": { \"+=\": \"before\" } }]*/\n\nvar thing = 'thing';\nthing\n  += 's';"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Correct Examples with 'single' and 'avoidEscape' Options",
    "codeDescription": "Shows code that complies with the 'single' quotes rule with avoidEscape option, allowing double quotes when they help avoid escaping.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/quotes.md#2025-04-14_snippet_8",
    "pageTitle": "ESLint quotes Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint quotes: [\"error\", \"single\", { \"avoidEscape\": true }]*/\n\nvar double = \"a string containing 'single' quotes\";"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Configuring Parser Options for Babel in ESLint",
    "codeDescription": "This example demonstrates how to pass specific options to the Babel parser through the parserOptions property. It configures Babel to not require a config file and sets up Babel presets.",
    "codeLanguage": "javascript",
    "codeTokens": 156,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/parser.md#2025-04-14_snippet_1",
    "pageTitle": "Configuring Custom Parsers in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport babelParser from \"@babel/eslint-parser\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlanguageOptions: {\n\t\t\tparser: babelParser,\n\t\t\tparserOptions: {\n\t\t\t\trequireConfigFile: false,\n\t\t\t\tbabelOptions: {\n\t\t\t\t\tbabelrc: false,\n\t\t\t\t\tconfigFile: false,\n\t\t\t\t\tpresets: [\"@babel/preset-env\"],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Migrating Configs to Flat Config Format in JavaScript",
    "codeDescription": "Shows how to update plugin configs to the new flat config format. This example demonstrates moving configs after the plugin definition and referencing the plugin directly.",
    "codeLanguage": "javascript",
    "codeTokens": 154,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/plugin-migration-flat-config.md#2025-04-14_snippet_4",
    "pageTitle": "Plugin Migration to Flat Config for ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "const plugin = {\n\tconfigs: {},\n\trules: {},\n\tprocessors: {},\n};\n\n// assign configs here so we can reference `plugin`\nObject.assign(plugin.configs, {\n\trecommended: {\n\t\tplugins: {\n\t\t\texample: plugin,\n\t\t},\n\t\trules: {\n\t\t\t\"example/rule1\": \"error\",\n\t\t\t\"example/rule2\": \"error\",\n\t\t},\n\t},\n});\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Importing and Using ESLint Rule Macro in HTML",
    "codeDescription": "This snippet demonstrates how to import and use the ESLint rule macro in an HTML template. It shows the basic structure and parameters required to define a rule.",
    "codeLanguage": "html",
    "codeTokens": 138,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/library/rule.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule Component Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- import the macro -->\n{ % from 'components/rule.macro.html' import rule % }\n\n<!-- use the macro -->\n{ { rule({ name: \"rule-name\", deprecated: true, // or removed: true replacedBy:\n\"name-of-replacement-rule\" description: 'Example: Enforce `return` statements in\ngetters.', categories: { recommended: true, fixable: true, hasSuggestions: false\n} }) } }"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Fixing Code Issues with ESLint CLI",
    "codeDescription": "The --fix flag instructs ESLint to automatically fix as many issues as possible. Fixes are applied directly to the files, and only remaining unfixed issues are reported.",
    "codeLanguage": "bash",
    "codeTokens": 56,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_8",
    "pageTitle": "ESLint Command Line Interface Reference",
    "codeList": [
      {
        "language": "bash",
        "code": "--fix file.js"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Demonstrating Incorrect Usage of Private Class Members in JavaScript",
    "codeDescription": "This code snippet shows examples of private class members that are declared but never used, which violates the 'no-unused-private-class-members' rule. It includes unused fields, methods, and accessors.",
    "codeLanguage": "JavaScript",
    "codeTokens": 174,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-private-class-members.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-unused-private-class-members",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-unused-private-class-members: \"error\"*/\n\nclass A {\n    #unusedMember = 5;\n}\n\nclass B {\n    #usedOnlyInWrite = 5;\n    method() {\n        this.#usedOnlyInWrite = 42;\n    }\n}\n\nclass C {\n    #usedOnlyToUpdateItself = 5;\n    method() {\n        this.#usedOnlyToUpdateItself++;\n    }\n}\n\nclass D {\n    #unusedMethod() {}\n}\n\nclass E {\n    get #unusedAccessor() {}\n    set #unusedAccessor(value) {}\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Configuring Exceptions for no-global-assign Rule in JSON",
    "codeDescription": "JSON configuration example showing how to specify exceptions to the no-global-assign rule, allowing reassignment of specific built-in objects.",
    "codeLanguage": "json",
    "codeTokens": 71,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-global-assign.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rule: no-global-assign",
    "codeList": [
      {
        "language": "json",
        "code": "{\n    \"rules\": {\n        \"no-global-assign\": [\"error\", {\"exceptions\": [\"Object\"]}]\n    }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Configuring ESLint Overrides in YAML",
    "codeDescription": "Example YAML configuration for ESLint showing how to use overrides to apply different configs for JavaScript and TypeScript files. This demonstrates the new behavior of linting files matched by overrides[].files by default.",
    "codeLanguage": "YAML",
    "codeTokens": 89,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-7.0.0.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint v7.0.0 Migration Guide",
    "codeList": [
      {
        "language": "yaml",
        "code": "# .eslintrc.yml\nextends: my-config-js\noverrides:\n    - files: \"*.ts\"\n      extends: my-config-ts"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Demonstrating Shorthand Property AST Format Change in JavaScript",
    "codeDescription": "This snippet shows how the AST representation of shorthand properties has changed in ESLint v8.0.0 due to an upgrade to Acorn v8.0.0. The key and value nodes are now separate objects instead of being the same object.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_6",
    "pageTitle": "ESLint v8.0.0 Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const version = 8;\nconst x = {\n\tversion,\n};"
      },
      {
        "language": "json",
        "code": "{\n\t\"type\": \"Property\",\n\t\"method\": false,\n\t\"shorthand\": true,\n\t\"computed\": false,\n\t\"key\": {\n\t\t\"type\": \"Identifier\",\n\t\t\"name\": \"version\"\n\t},\n\t\"kind\": \"init\",\n\t\"value\": {\n\t\t\"type\": \"Identifier\",\n\t\t\"name\": \"version\"\n\t}\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using Plugin Rules, Environments, and Configurations in ESLint",
    "codeDescription": "Example showing how to reference rules, environments, and configurations defined in plugins following the required naming convention.",
    "codeLanguage": "js",
    "codeTokens": 187,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins-deprecated.md#2025-04-14_snippet_4",
    "pageTitle": "Configuring ESLint Plugins Using ESLintRC Format",
    "codeList": [
      {
        "language": "js",
        "code": "{\n    // ...\n    \"plugins\": [\n        \"jquery\",   // eslint-plugin-jquery\n        \"@foo/foo\", // @foo/eslint-plugin-foo\n        \"@bar\"      // @bar/eslint-plugin\n    ],\n    \"extends\": [\n        \"plugin:@foo/foo/recommended\",\n        \"plugin:@bar/recommended\"\n    ],\n    \"rules\": {\n        \"jquery/a-rule\": \"error\",\n        \"@foo/foo/some-rule\": \"error\",\n        \"@bar/another-rule\": \"error\"\n    },\n    \"env\": {\n        \"jquery/jquery\": true,\n        \"@foo/foo/env-foo\": true,\n        \"@bar/env-bar\": true,\n    }\n    // ...\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Configuring Global Variables in ESLint v6",
    "codeDescription": "This snippet illustrates the new validation for global variable configuration in ESLint v6. It shows both valid and invalid configurations for globals.",
    "codeLanguage": "js",
    "codeTokens": 96,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-6.0.0.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint v6.0.0 Migration Guide",
    "codeList": [
      {
        "language": "js",
        "code": "// .eslintrc.js\nmodule.exports = {\n\tglobals: {\n\t\tfoo: \"readonly\",\n\t\tbar: \"writable\",\n\t\tbaz: \"hello!\", // Invalid in ESLint v6\n\t},\n};"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Incorrect Console Usage with ESLint",
    "codeDescription": "Examples of code that violates the no-console rule",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-console.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint no-console Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* eslint no-console: \"error\" */\n\nconsole.log(\"Log a debug level message.\");\nconsole.warn(\"Log a warn level message.\");\nconsole.error(\"Log an error level message.\");\nconsole.log = foo();"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Declaring ESLint Peer Dependency in package.json",
    "codeDescription": "Shows how to declare ESLint as a peer dependency in the package.json file using the recommended version range syntax for future-proof compatibility.",
    "codeLanguage": "json",
    "codeTokens": 65,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_1",
    "pageTitle": "Creating and Sharing ESLint Configurations",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"peerDependencies\": {\n\t\t\"eslint\": \">= 3\"\n\t}\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Configuring Global Variables in ESLint Configuration File",
    "codeDescription": "Example showing how to define global variables in an ESLint configuration file with different access levels. This sets var1 as writable and var2 as readonly.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options.md#2025-04-14_snippet_4",
    "pageTitle": "Configuring Language Options in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\tvar1: \"writable\",\n\t\t\t\tvar2: \"readonly\",\n\t\t\t},\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Applying Individual Elements of a Configuration Array in ESLint",
    "codeDescription": "This snippet illustrates an alternative approach to applying a configuration array by inserting each element individually. This is equivalent to inserting the array directly but provides more explicit control over the configuration order.",
    "codeLanguage": "javascript",
    "codeTokens": 138,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/combine-configs.md#2025-04-14_snippet_3",
    "pageTitle": "Combining ESLint Configurations",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport exampleConfigs from \"eslint-config-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t// insert individual elements instead of an array\n\texampleConfigs[0],\n\texampleConfigs[1],\n\texampleConfigs[2],\n\n\t// your modifications\n\t{\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing Summary Formatter in JavaScript",
    "codeDescription": "A basic ESLint formatter that reports only the total count of errors and warnings. It reduces the results array to compute totals and returns a simple string output.",
    "codeLanguage": "javascript",
    "codeTokens": 178,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-formatters.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Custom Formatters Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = function (results, context) {\n\t// accumulate the errors and warnings\n\tvar summary = results.reduce(\n\t\tfunction (seq, current) {\n\t\t\tseq.errors += current.errorCount;\n\t\t\tseq.warnings += current.warningCount;\n\t\t\treturn seq;\n\t\t},\n\t\t{ errors: 0, warnings: 0 },\n\t);\n\n\tif (summary.errors > 0 || summary.warnings > 0) {\n\t\treturn (\n\t\t\t\"Errors: \" +\n\t\t\tsummary.errors +\n\t\t\t\", Warnings: \" +\n\t\t\tsummary.warnings +\n\t\t\t\"\\n\"\n\t\t);\n\t}\n\n\treturn \"\";\n};"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Correct code examples for 'always' option",
    "codeDescription": "Examples of code that comply with the 'always' option, showing proper semicolon usage at the end of statements.",
    "codeLanguage": "javascript",
    "codeTokens": 75,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/semi.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Semi Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint semi: \"error\"*/\n\nvar name = \"ESLint\";\n\nobject.method = function() {\n    // ...\n};\n\nclass Foo {\n    bar = 1;\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Checking if a File is Ignored by ESLint Configuration in JavaScript",
    "codeDescription": "This snippet illustrates the use of the eslint.isPathIgnored() method to check if a given file is ignored by the ESLint configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_6",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const isPathIgnored = await eslint.isPathIgnored(filePath);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Incorrect JavaScript Loop Function Examples",
    "codeDescription": "These examples show various incorrect ways of creating functions within loops, which the 'no-loop-func' rule aims to prevent. They include unsafe references to outer scope variables.",
    "codeLanguage": "javascript",
    "codeTokens": 357,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-loop-func.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-loop-func",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-loop-func: \"error\"*/\n\nvar i = 0;\nwhile(i < 5) {\n    var a = function() { return i; };\n    a();\n\n    i++;\n}\n\nvar i = 0;\ndo {\n    function a() { return i; };\n    a();\n\n    i++\n} while (i < 5);\n\nlet foo = 0;\nfor (let i = 0; i < 10; ++i) {\n    //Bad, `foo` is not in the loop-block's scope and `foo` is modified in/after the loop\n    setTimeout(() => console.log(foo));\n    foo += 1;\n}\n\nfor (let i = 0; i < 10; ++i) {\n    //Bad, `foo` is not in the loop-block's scope and `foo` is modified in/after the loop\n    setTimeout(() => console.log(foo));\n}\nfoo = 100;\n\nvar arr = [];\n\nfor (var i = 0; i < 5; i++) {\n    arr.push((f => f)(() => i));\n}\n\nfor (var i = 0; i < 5; i++) {\n    arr.push((() => {\n        return () => i;\n    })());\n}\n\nfor (var i = 0; i < 5; i++) {\n    (function fun () {\n        if (arr.includes(fun)) return i;\n        else arr.push(fun);\n    })();\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Correct Promise Usage Without Async Executors",
    "codeDescription": "Shows the proper way to handle Promises without using async executor functions.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-async-promise-executor.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-async-promise-executor",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-async-promise-executor: \"error\"*/\n\nconst foo = new Promise((resolve, reject) => {\n  readFile('foo.txt', function(err, result) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  });\n});\n\nconst result = Promise.resolve(foo);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Accessing ESLint Rules After /lib Entrypoint Removal in JavaScript",
    "codeDescription": "This snippet demonstrates how to access ESLint rules after the removal of the /lib entrypoint in v8.0.0. The new method uses the /use-at-your-own-risk entrypoint to access built-in rules.",
    "codeLanguage": "javascript",
    "codeTokens": 79,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_9",
    "pageTitle": "ESLint v8.0.0 Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const rule = require(\"eslint/lib/rules/semi\");"
      },
      {
        "language": "javascript",
        "code": "const { builtinRules } = require(\"eslint/use-at-your-own-risk\");\nconst rule = builtinRules.get(\"semi\");"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Examples of Code Flagged by object-shorthand Rule",
    "codeDescription": "Demonstrates code that would trigger warnings under the object-shorthand rule when set to 'error', showing both the non-compliant and the expected compliant forms.",
    "codeLanguage": "javascript",
    "codeTokens": 90,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/object-shorthand.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Object Shorthand Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint object-shorthand: \"error\"*/\n\nconst foo = {\n    w: function() {},\n    x: function *() {},\n    [y]: function() {},\n    z: z\n};"
      },
      {
        "language": "javascript",
        "code": "/*eslint object-shorthand: \"error\"*/\n\nconst foo = {\n    w() {},\n    *x() {},\n    [y]() {},\n    z\n};"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Incorrect Usage of Semicolons in JavaScript",
    "codeDescription": "This code snippet demonstrates examples of unnecessary semicolons that would trigger the no-extra-semi ESLint rule. It shows incorrect usage in variable declarations, function declarations, class fields, class methods, and static blocks.",
    "codeLanguage": "js",
    "codeTokens": 114,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-semi.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint no-extra-semi Rule",
    "codeList": [
      {
        "language": "js",
        "code": "/*eslint no-extra-semi: \"error\"*/\n\nvar x = 5;;\n\nfunction foo() {\n    // code\n};\n\nclass C {\n    field;;\n\n    method() {\n        // code\n    };\n\n    static {\n        // code\n    };\n};"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Correct Error Handling with Custom Parameter Name (JavaScript)",
    "codeDescription": "This example shows correct error handling with a custom error parameter name 'error', as specified in the ESLint rule configuration.",
    "codeLanguage": "JavaScript",
    "codeTokens": 87,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/handle-callback-err.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Rule: handle-callback-err",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint handle-callback-err: [\"error\", \"error\"]*/\n\nfunction loadData (error, data) {\n    if (error) {\n       console.log(error.stack);\n    }\n    doSomething();\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Basic Usage Examples - Correct Implementation",
    "codeDescription": "Examples showing correct usage where getters and setters are properly grouped together in objects and classes.",
    "codeLanguage": "javascript",
    "codeTokens": 125,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/grouped-accessor-pairs.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule Documentation - grouped-accessor-pairs",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint grouped-accessor-pairs: \"error\"*/\n\nconst foo = {\n    get a() {\n        return this.val;\n    },\n    set a(value) {\n        this.val = value;\n    },\n    b: 1\n};\n\nconst bar = {\n    set b(value) {\n        this.val = value;\n    },\n    get b() {\n        return this.val;\n    },\n    a: 1\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using Predefined Configurations in ESLint (JavaScript)",
    "codeDescription": "Illustrates how to use ESLint's predefined configurations for JavaScript. The example uses the 'js/recommended' configuration and modifies a rule.",
    "codeLanguage": "javascript",
    "codeTokens": 123,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_18",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport js from \"@eslint/js\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\tjs,\n\t\t},\n\t\textends: [\"js/recommended\"],\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using Exported Config in Flat Config File",
    "codeDescription": "Demonstrates how to use an exported plugin config in a flat config file. This example extends the 'recommended' config and overrides a rule.",
    "codeLanguage": "javascript",
    "codeTokens": 135,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/plugin-migration-flat-config.md#2025-04-14_snippet_5",
    "pageTitle": "Plugin Migration to Flat Config for ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from \"eslint/config\";\nimport example from \"eslint-plugin-example\";\n\nexport default defineConfig([\n\t// use recommended config and provide your own overrides\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\t\textends: [\"example/recommended\"],\n\t\trules: {\n\t\t\t\"example/rule1\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Incorrect Code Examples for prefer-template Rule",
    "codeDescription": "These examples demonstrate code that would be flagged as incorrect by the prefer-template rule, showing string concatenation with variables and expressions.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-template.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint prefer-template Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint prefer-template: \"error\"*/\n\nconst str = \"Hello, \" + name + \"!\";\nconst str1 = \"Time: \" + (12 * 60 * 60 * 1000);"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Specifying Language from ESLint Plugin",
    "codeDescription": "This example demonstrates how to specify a language provided by an ESLint plugin. It configures the JSON language for JSON files using the @eslint/json plugin.",
    "codeLanguage": "JavaScript",
    "codeTokens": 112,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins.md#2025-04-14_snippet_5",
    "pageTitle": "Configuring ESLint Plugins in Flat Config Format",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport json from \"@eslint/json\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.json\"],\n\t\tplugins: {\n\t\t\tjson,\n\t\t},\n\t\tlanguage: \"json/jsonc\",\n\t},\n]);"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Accessing ESLint Version and Default Configuration in JavaScript",
    "codeDescription": "These snippets demonstrate how to access the ESLint version string and default configuration using static properties of the ESLint class.",
    "codeLanguage": "javascript",
    "codeTokens": 48,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_9",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const version = ESLint.version;"
      },
      {
        "language": "javascript",
        "code": "const defaultConfig = ESLint.defaultConfig;"
      }
    ],
    "relevance": 0.951
  },
  {
    "codeTitle": "Correct Patterns for Async Returns in JavaScript",
    "codeDescription": "Examples showing correct usage patterns for async functions, including direct returns, separated await statements, storing awaited values, and proper error handling with try/catch blocks.",
    "codeLanguage": "javascript",
    "codeTokens": 175,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-return-await.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule Documentation - no-return-await",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-return-await: \"error\"*/\n\nasync function foo1() {\n    return bar();\n}\n\nasync function foo2() {\n    await bar();\n    return;\n}\n\n// This is essentially the same as `return await bar();`, but the rule checks only `await` in `return` statements\nasync function foo3() {\n    const x = await bar();\n    return x;\n}\n\n// In this example the `await` is necessary to be able to catch errors thrown from `bar()`\nasync function foo4() {\n    try {\n        return await bar();\n    } catch (error) {}\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Let Declaration in ECMAScript 2015",
    "codeDescription": "A correct example of using the 'let' keyword for variable declaration in ECMAScript 2015 (ES6). This snippet demonstrates the use of block-scoped variables introduced in ES6.",
    "codeLanguage": "JavaScript",
    "codeTokens": 58,
    "codeId": "https://github.com/eslint/eslint/blob/main/tests/fixtures/good-examples.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Rule Examples",
    "codeList": [
      {
        "language": "js",
        "code": "let x;"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Splitting Source Code into Lines in JavaScript",
    "codeDescription": "Demonstrates the usage of the static SourceCode.splitLines() function to split source code text into an array of lines.",
    "codeLanguage": "javascript",
    "codeTokens": 118,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_15",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const SourceCode = require(\"eslint\").SourceCode;\n\nconst code = \"var a = 1;\\nvar b = 2;\";\n\n// split code into an array\nconst codeLines = SourceCode.splitLines(code);\n\n/*\n    Value of codeLines will be\n    [\n        \"var a = 1;\",\n        \"var b = 2;\"\n    ]\n */"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Flat Config with Multiple File Pattern Configurations",
    "codeDescription": "Example of a flat config configuration with multiple configurations for different file patterns. It extends the recommended configuration and applies different rules to source and test files.",
    "codeLanguage": "javascript",
    "codeTokens": 153,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_11",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\n\nimport js from \"@eslint/js\";\n\nexport default [\n\tjs.configs.recommended, // Recommended config applied to all files\n\t// File-pattern specific overrides\n\t{\n\t\tfiles: [\"src/**/*\", \"test/**/*\"],\n\t\trules: {\n\t\t\tsemi: [\"warn\", \"always\"],\n\t\t},\n\t},\n\t{\n\t\tfiles: [\"test/**/*\"],\n\t\trules: {\n\t\t\t\"no-console\": \"off\",\n\t\t},\n\t},\n\t// ...other configurations\n];"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Setting Up Project Directory and Files using Shell Commands",
    "codeDescription": "Shell commands to set up a new project for the custom ESLint rule, including creating directories and initializing an npm project.",
    "codeLanguage": "shell",
    "codeTokens": 84,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Custom Rule Tutorial",
    "codeList": [
      {
        "language": "shell",
        "code": "mkdir eslint-custom-rule-example # create directory\ncd eslint-custom-rule-example # enter the directory\nnpm init -y # init new npm project\ntouch enforce-foo-bar.js # create file enforce-foo-bar.js"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Advanced Rule Configuration with Options in ESLint",
    "codeDescription": "Demonstrates rule configuration with both severity level and additional options for the semi rule.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_15",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\trules: {\n\t\t\tsemi: [\"error\", \"never\"],\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Incorrect examples for the no-unneeded-ternary rule in JavaScript",
    "codeDescription": "Examples of code that would trigger the ESLint no-unneeded-ternary rule, showing unnecessary ternary operators that could be simplified.",
    "codeLanguage": "javascript",
    "codeTokens": 83,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unneeded-ternary.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-unneeded-ternary",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-unneeded-ternary: \"error\"*/\n\nconst a = x === 2 ? true : false;\n\nconst b = x ? true : false;"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Correct Usage of 'this' and 'super' in Class Constructors (JavaScript)",
    "codeDescription": "Examples of correct code that comply with the 'no-this-before-super' rule. These snippets show proper usage of 'this' and 'super' in various scenarios, including non-derived classes, derived classes with correct 'super()' calls, and usage outside of constructors.",
    "codeLanguage": "JavaScript",
    "codeTokens": 182,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-this-before-super.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-this-before-super",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-this-before-super: \"error\"*/\n\nclass A1 {\n    constructor() {\n        this.a = 0; // OK, this class doesn't have an `extends` clause.\n    }\n}\n\nclass A2 extends B {\n    constructor() {\n        super();\n        this.a = 0; // OK, this is after `super()`.\n    }\n}\n\nclass A3 extends B {\n    foo() {\n        this.a = 0; // OK. this is not in a constructor.\n    }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Correct Code Examples for no-self-assign Rule in JavaScript",
    "codeDescription": "Examples of code that would pass the no-self-assign rule, including different variable assignments, default values in destructuring, property assignments, and bitwise operations that have an effect on non-integers.",
    "codeLanguage": "javascript",
    "codeTokens": 258,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-self-assign.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-self-assign",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-self-assign: \"error\"*/\n\nfoo = bar;\n[a, b] = [b, a];\n\n// This pattern is warned by the `no-use-before-define` rule.\nlet foo = foo;\n\n// The default values have an effect.\n[foo = 1] = [foo];\n\n// non-self-assignments with properties.\nobj.a = obj.b;\nobj.a.b = obj.c.b;\nobj.a.b = obj.a.c;\nobj[a] = obj[\"a\"];\n\n// This ignores if there is a function call.\nobj.a().b = obj.a().b;\na().b = a().b;\n\n// `&=` and `|=` have an effect on non-integers.\nfoo &= foo;\nfoo |= foo;\n\n// Known limitation: this does not support computed properties except single literal or single identifier.\nobj[a + b] = obj[a + b];\nobj[\"a\" + \"b\"] = obj[\"a\" + \"b\"];"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Specifying Global Variables in JavaScript File Using Comments",
    "codeDescription": "Example of how to specify global variables directly in a JavaScript file using comment syntax. The first example defines read-only globals, while the second example defines writable globals.",
    "codeLanguage": "javascript",
    "codeTokens": 59,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options.md#2025-04-14_snippet_2",
    "pageTitle": "Configuring Language Options in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* global var1, var2 */"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Exporting Default ESLint Config in JavaScript",
    "codeDescription": "Shows how to export a default ESLint configuration by requiring another configuration file within the package. This allows for flexible configuration organization.",
    "codeLanguage": "javascript",
    "codeTokens": 54,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_6",
    "pageTitle": "Creating and Sharing ESLint Configurations",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = require(\"./lib/ci.js\");"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Basic eslintrc Configuration",
    "codeDescription": "Example of a basic eslintrc configuration that applies rules to all files in its directory and subdirectories.",
    "codeLanguage": "javascript",
    "codeTokens": 74,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_8",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// .eslintrc.js\n\nmodule.exports = {\n\t// ...other config\n\trules: {\n\t\tsemi: [\"warn\", \"always\"],\n\t},\n};"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Ignoring Directory Contents Except Specific Files in ESLint",
    "codeDescription": "This example demonstrates how to ignore all contents of a directory except for specific files. It ignores everything in the build directory except for build/test.js.",
    "codeLanguage": "javascript",
    "codeTokens": 128,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore.md#2025-04-14_snippet_4",
    "pageTitle": "Configuring ESLint Ignore Files",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig, globalIgnores } from \"eslint/config\";\n\nexport default defineConfig([\n\tglobalIgnores([\n\t\t\"build/**/*\", // ignore all contents in and under `build/` directory but not the `build/` directory itself\n\t\t\"!build/test.js\", // unignore `!build/test.js`\n\t]),\n]);"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Incorrect Arithmetic Operations with Optional Chaining in JavaScript",
    "codeDescription": "Examples of arithmetic operations with optional chaining that would be flagged when the disallowArithmeticOperators option is enabled.",
    "codeLanguage": "javascript",
    "codeTokens": 181,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-optional-chaining.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rule: no-unsafe-optional-chaining",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-unsafe-optional-chaining: [\"error\", { \"disallowArithmeticOperators\": true }]*/\n\n+obj?.foo;\n-obj?.foo;\n\nobj?.foo + bar;\nobj?.foo - bar;\nobj?.foo / bar;\nobj?.foo * bar;\nobj?.foo % bar;\nobj?.foo ** bar;\n\nbaz += obj?.foo;\nbaz -= obj?.foo;\nbaz /= obj?.foo;\nbaz *= obj?.foo;\nbaz %= obj?.foo;\nbaz **= obj?.foo;\n\nasync function foo () {\n  +await obj?.foo;\n  await obj?.foo + bar;\n  baz += await obj?.foo;\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Correct Usage Examples of the no-import-assign ESLint Rule in JavaScript",
    "codeDescription": "Examples showing code that complies with the no-import-assign rule by only modifying properties of imported objects rather than reassigning the bindings themselves. Also includes examples of known limitations of the rule.",
    "codeLanguage": "javascript",
    "codeTokens": 167,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-import-assign.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-import-assign",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-import-assign: \"error\"*/\n\nimport mod, { named } from \"./mod.mjs\"\nimport * as mod_ns from \"./mod.mjs\"\n\nmod.prop = 1\nnamed.prop = 2\nmod_ns.named.prop = 3\n\n// Known Limitation\nfunction test(obj) {\n    obj.named = 4 // Not errored because 'obj' is not namespace objects.\n}\ntest(mod_ns) // Not errored because it doesn't know that 'test' updates the member of the argument."
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Configuring no-constructor-return and no-sequences Rules in ESLint",
    "codeDescription": "Example of how to correctly configure the 'no-constructor-return' and 'no-sequences' rules in ESLint v9.0.0, which now have stricter schemas.",
    "codeLanguage": "json",
    "codeTokens": 95,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_5",
    "pageTitle": "Migration Guide for ESLint v9.x",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"rules\": {\n\t\t\"no-constructor-return\": [\"error\"],\n\t\t\"no-sequences\": [\"error\", { \"allowInParentheses\": false }]\n\t}\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Examples of Good ESLint Commit Messages",
    "codeDescription": "Examples of properly formatted commit message summaries for ESLint contributions, showing different tags and concise descriptions.",
    "codeLanguage": "txt",
    "codeTokens": 80,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/contribute/pull-requests.md#2025-04-14_snippet_3",
    "pageTitle": "Submitting Pull Requests to ESLint",
    "codeList": [
      {
        "language": "txt",
        "code": "build: Update Travis to only test Node 0.10\nfix: Semi rule incorrectly flagging extra semicolon\nchore: Upgrade Esprima to 1.2, switch to using comment attachment"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Testing ESLint Rules with New RuleTester",
    "codeDescription": "Example showing the new recommended way of testing ESLint rules using the RuleTester class from the eslint package. This approach simplifies testing and eliminates circular dependencies.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-1.0.0.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint v1.0.0 Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "var rule = require(\"../../../lib/rules/your-rule\"),\n\tRuleTester = require(\"eslint\").RuleTester;\n\nvar ruleTester = new RuleTester();\nruleTester.run(\"your-rule\", rule, {\n\tvalid: [],\n\tinvalid: [],\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Disabling New Rules in eslint:recommended Config with JSON",
    "codeDescription": "A JSON configuration that extends eslint:recommended but disables the newly added rules to mimic ESLint 4.x behavior.",
    "codeLanguage": "json",
    "codeTokens": 81,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-5.0.0.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint v5.0.0 Migration Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"extends\": \"eslint:recommended\",\n\n\t\"rules\": {\n\t\t\"for-direction\": \"off\",\n\t\t\"getter-return\": \"off\"\n\t}\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Incorrect Default Callback Usage",
    "codeDescription": "Shows incorrect callback implementation without return statements, which could lead to multiple callback invocations.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/callback-return.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Callback Return Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint callback-return: \"error\"*/\n\nfunction foo(err, callback) {\n    if (err) {\n        callback(err);\n    }\n    callback();\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Updated RuleTester Configuration for ESLint v2.0.0",
    "codeDescription": "Example of updating RuleTester test cases to use the new parserOptions property instead of ecmaFeatures for specifying ES6 support in rule tests.",
    "codeLanguage": "javascript",
    "codeTokens": 101,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_9",
    "pageTitle": "Migrating to ESLint v2.0.0",
    "codeList": [
      {
        "language": "javascript",
        "code": "var ruleTester = new RuleTester();\nruleTester.run(\"no-var\", rule, {\n\tvalid: [\n\t\t{\n\t\t\tcode: \"let x;\",\n\t\t\tparserOptions: { ecmaVersion: 6 },\n\t\t},\n\t],\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Defining ESLint Configuration with CommonJS",
    "codeDescription": "Example of an ESLint configuration file using CommonJS syntax. It defines a configuration array with one object that enables two rules: 'semi' and 'prefer-const'.",
    "codeLanguage": "javascript",
    "codeTokens": 103,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nconst { defineConfig } = require(\"eslint/config\");\n\nmodule.exports = defineConfig([\n\t{\n\t\trules: {\n\t\t\tsemi: \"error\",\n\t\t\t\"prefer-const\": \"error\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Defining Writable Global Variables Using Comments in JavaScript",
    "codeDescription": "Example showing how to define global variables with writable flag in JavaScript using comment syntax. This allows the variables to be modified within the code.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options.md#2025-04-14_snippet_3",
    "pageTitle": "Configuring Language Options in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* global var1:writable, var2:writable */"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Valid Use Case: Dependent Loop Iterations (JavaScript)",
    "codeDescription": "This snippet shows a scenario where using await in a loop is valid, as each iteration depends on the result of the previous one.",
    "codeLanguage": "JavaScript",
    "codeTokens": 122,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-await-in-loop.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rule: no-await-in-loop",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function loopIterationsDependOnEachOther() {\n    let previousResult = null;\n    for (let i = 0; i < 10; i++) {\n        const result = await doSomething(i, previousResult);\n        if (someCondition(result, previousResult)) {\n            break;\n        } else {\n            previousResult = result;\n        }\n    }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Configuring Regex-Based Import Restrictions",
    "codeDescription": "Configuration that uses regular expressions to restrict imports, which provides more flexibility than gitignore-style patterns.",
    "codeLanguage": "json",
    "codeTokens": 116,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-imports.md#2025-04-14_snippet_20",
    "pageTitle": "ESLint Rule Documentation: no-restricted-imports",
    "codeList": [
      {
        "language": "json",
        "code": "\"no-restricted-imports\": [\"error\", {\n    \"patterns\": [{\n      \"regex\": \"import1/private/\",\n      \"message\": \"usage of import1 private modules not allowed.\"\n    }, {\n      \"regex\": \"import2/(?!good)\",\n      \"message\": \"import2 is deprecated, except the modules in import2/good.\"\n    }]\n}]"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Configuring ESLint 'indent' Rule for 2-Space Indentation",
    "codeDescription": "JSON configuration example for setting the 'indent' rule to enforce 2-space indentation in ESLint.",
    "codeLanguage": "json",
    "codeTokens": 49,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: indent",
    "codeList": [
      {
        "language": "json",
        "code": "{\n    \"indent\": [\"error\", 2]\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing Tests for Custom ESLint Rule",
    "codeDescription": "Complete test implementation using ESLint's RuleTester to verify both valid and invalid cases for the custom rule, including autofix behavior.",
    "codeLanguage": "javascript",
    "codeTokens": 270,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_8",
    "pageTitle": "ESLint Custom Rule Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "// enforce-foo-bar.test.js\nconst { RuleTester } = require(\"eslint\");\nconst fooBarRule = require(\"./enforce-foo-bar\");\n\nconst ruleTester = new RuleTester({\n\t// Must use at least ecmaVersion 2015 because\n\t// that's when `const` variables were introduced.\n\tlanguageOptions: { ecmaVersion: 2015 },\n});\n\n// Throws error if the tests in ruleTester.run() do not pass\nruleTester.run(\n\t\"enforce-foo-bar\", // rule name\n\tfooBarRule, // rule code\n\t{\n\t\t// checks\n\t\t// 'valid' checks cases that should pass\n\t\tvalid: [\n\t\t\t{\n\t\t\t\tcode: \"const foo = 'bar';\",\n\t\t\t},\n\t\t],\n\t\t// 'invalid' checks cases that should not pass\n\t\tinvalid: [\n\t\t\t{\n\t\t\t\tcode: \"const foo = 'baz';\",\n\t\t\t\toutput: 'const foo = \"bar\";',\n\t\t\t\terrors: 1,\n\t\t\t},\n\t\t],\n\t},\n);\n\nconsole.log(\"All tests passed!\");"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Incorrect Usage of 1tbs Brace Style in JavaScript",
    "codeDescription": "Examples of incorrect code for the ESLint brace-style rule with the default '1tbs' option.",
    "codeLanguage": "JavaScript",
    "codeTokens": 113,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/brace-style.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Brace Style Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint brace-style: \"error\"*/\n\nfunction foo()\n{\n  return true;\n}\n\nif (foo)\n{\n  bar();\n}\n\ntry\n{\n  somethingRisky();\n} catch(e)\n{\n  handleError();\n}\n\nif (foo) {\n  bar();\n}\nelse {\n  baz();\n}\n\nclass C\n{\n    static\n    {\n        foo();\n    }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Configuration Options for no-use-before-define Rule in JSON",
    "codeDescription": "This snippet shows the configuration options for the no-use-before-define rule, including flags for functions, classes, variables, and named exports.",
    "codeLanguage": "JSON",
    "codeTokens": 91,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-use-before-define.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-use-before-define",
    "codeList": [
      {
        "language": "JSON",
        "code": "{\n    \"no-use-before-define\": [\"error\", {\n        \"functions\": true,\n        \"classes\": true,\n        \"variables\": true,\n        \"allowNamedExports\": false\n    }]\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Guarded for...in Loop Using Shorthand hasOwnProperty.call in JavaScript",
    "codeDescription": "Another correct example using a shorthand version of hasOwnProperty.call to filter properties in a for...in loop.",
    "codeLanguage": "JavaScript",
    "codeTokens": 67,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/guard-for-in.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Rule: guard-for-in",
    "codeList": [
      {
        "language": "javascript",
        "code": "for (key in foo) {\n    if ({}.hasOwnProperty.call(foo, key)) {\n        doSomething(key);\n    }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Incorrect Error Handling: Sequential Awaiting (JavaScript)",
    "codeDescription": "This snippet illustrates the risk of unhandled promise rejections when awaiting promises sequentially in a loop, which can lead to program termination in certain environments.",
    "codeLanguage": "JavaScript",
    "codeTokens": 149,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-await-in-loop.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-await-in-loop",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function foo() {\n    const arrayOfPromises = somethingThatCreatesAnArrayOfPromises();\n    for (const promise of arrayOfPromises) {\n        // Bad: if any of the promises reject, an exception is thrown, and\n        // subsequent loop iterations will not run. Therefore, rejections later\n        // in the array will become unhandled rejections that cannot be caught\n        // by a caller.\n        const value = await promise;\n        console.log(value);\n    }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Valid Use Case: Rate Limiting (JavaScript)",
    "codeDescription": "This snippet shows a valid use of await in a loop to implement rate limiting for API requests, preventing excessive parallel requests.",
    "codeLanguage": "JavaScript",
    "codeTokens": 98,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-await-in-loop.md#2025-04-14_snippet_6",
    "pageTitle": "ESLint Rule: no-await-in-loop",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function makeUpdatesToRateLimitedApi(thingsToUpdate) {\n    // we'll exceed our rate limit if we make all the network calls in parallel.\n    for (const thing of thingsToUpdate) {\n        await updateThingWithRateLimitedApi(thing);\n    }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Configuring ESLint Rules",
    "codeDescription": "Example showing how to configure specific ESLint rules with custom error levels. This demonstrates setting 'no-unused-vars' and 'no-undef' rules to 'warn' level.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/getting-started.md#2025-04-14_snippet_1",
    "pageTitle": "Getting Started with ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from \"eslint/config\";\nimport js from \"@eslint/js\";\n\nexport default defineConfig([\n\t{ files: [\"**/*.js\"], plugins: { js }, extends: [\"js/recommended\"] },\n\n\t{\n\t\trules: {\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t\t\"no-undef\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Correct ESLint Usage Example in JavaScript",
    "codeDescription": "Demonstrates the proper way to use ESLint programmatically in JavaScript. The example shows a complete workflow including creating an ESLint instance with the fix option, linting files, applying fixes, formatting results, and handling errors.",
    "codeLanguage": "js",
    "codeTokens": 218,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/library/code-blocks.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Documentation: Marking Correct and Incorrect Code Examples",
    "codeList": [
      {
        "language": "js",
        "code": "const { ESLint } = require(\"eslint\");\n\n(async function main() {\n\t// 1. Create an instance with the `fix` option.\n\tconst eslint = new ESLint({ fix: true });\n\n\t// 2. Lint files. This doesn't modify target files.\n\tconst results = await eslint.lintFiles([\"lib/**/*.js\"]);\n\n\t// 3. Modify the files with the fixed code.\n\tawait ESLint.outputFixes(results);\n\n\t// 4. Format the results.\n\tconst formatter = await eslint.loadFormatter(\"stylish\");\n\tconst resultText = formatter.format(results);\n\n\t// 5. Output it.\n\tconsole.log(resultText);\n})().catch(error => {\n\tprocess.exitCode = 1;\n\tconsole.error(error);\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "ESLint Configuration with Negation Patterns",
    "codeDescription": "Example of an ESLint configuration that excludes '.config.js' files but includes 'eslint.config.js'. It demonstrates the use of negation patterns in the 'ignores' property.",
    "codeLanguage": "javascript",
    "codeTokens": 114,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"src/**/*.js\"],\n\t\tignores: [\"**/*.config.js\", \"!**/eslint.config.js\"],\n\t\trules: {\n\t\t\tsemi: \"error\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "ESLint Configuration Using Plugin Extension",
    "codeDescription": "Example of an ESLint configuration file that extends from a plugin configuration. This demonstrates how ESLint attempts to load the plugin from node_modules, which can cause the plugin not found error if the package doesn't exist.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/troubleshooting/couldnt-find-the-plugin.md#2025-04-14_snippet_1",
    "pageTitle": "Troubleshooting ESLint Plugin Not Found Errors",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n\textends: [\"plugin:eslint-plugin-yours/config-name\"],\n};"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Incorrect ESLint Consistent Return Examples",
    "codeDescription": "Multiple examples of code that violates the consistent-return rule by mixing explicit returns with implicit undefined returns.",
    "codeLanguage": "javascript",
    "codeTokens": 93,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/consistent-return.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Consistent Return Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint consistent-return: \"error\"*/\n\nfunction doSomething(condition) {\n    if (condition) {\n        return true;\n    } else {\n        return;\n    }\n}\n\nfunction doSomethingElse(condition) {\n    if (condition) {\n        return true;\n    }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Flat Config ESLint Configuration with Language Options",
    "codeDescription": "Modern flat config format showing equivalent language options configuration using the globals package and consolidated languageOptions property.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_13",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import globals from \"globals\";\n\nexport default [\n\t{\n\t\tlanguageOptions: {\n\t\t\tecmaVersion: 2022,\n\t\t\tsourceType: \"module\",\n\t\t\tglobals: {\n\t\t\t\t...globals.browser,\n\t\t\t\t...globals.node,\n\t\t\t\tmyCustomGlobal: \"readonly\",\n\t\t\t},\n\t\t},\n\t\t// ...other config\n\t},\n];"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Configuring Feature Flags for VS Code Lint Tasks",
    "codeDescription": "Demonstrates how to enable ESLint feature flags for VS Code lint tasks through the eslint.lintTask.options setting. This configuration applies when running ESLint as a task in VS Code.",
    "codeLanguage": "json",
    "codeTokens": 74,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/pages/flags.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Feature Flags Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"eslint.lintTask.options\": \"--flag flag_one --flag flag_two .\"\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Correct Function Creation in JavaScript Loops Using let",
    "codeDescription": "This snippet demonstrates the correct way to create functions within a loop using 'let' to declare the loop variable, ensuring each function returns the expected value.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-loop-func.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-loop-func",
    "codeList": [
      {
        "language": "javascript",
        "code": "for (let i = 0; i < 10; i++) {\n    funcs[i] = function() {\n        return i;\n    };\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Demonstrating Variable Declaration Placement in JavaScript",
    "codeDescription": "Shows proper and improper placement of variable declarations. While block bindings (let, const) can be placed in nested blocks without issue, var declarations should be moved to the root of the program or function to avoid hoisting issues.",
    "codeLanguage": "javascript",
    "codeTokens": 135,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inner-declarations.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint no-inner-declarations Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Good\nvar foo = 42;\n\n// Good\nif (foo) {\n    let bar1;\n}\n\n// Bad\nwhile (test) {\n    var bar2;\n}\n\nfunction doSomething() {\n    // Good\n    var baz = true;\n\n    // Bad\n    if (baz) {\n        var quux;\n    }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Suppressing Specific ESLint Rules",
    "codeDescription": "Example showing how to suppress violations for specific rules using --suppress-rule flag.",
    "codeLanguage": "shell",
    "codeTokens": 47,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_18",
    "pageTitle": "ESLint Command Line Interface Reference",
    "codeList": [
      {
        "language": "shell",
        "code": "\"src/**/*.js\" --suppress-rule no-console --suppress-rule indent"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Example JavaScript with Valid Assignment (After Fix)",
    "codeDescription": "Sample JavaScript code after the custom rule's autofix has been applied, showing the correct assignment of 'bar' to const foo.",
    "codeLanguage": "javascript",
    "codeTokens": 53,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Custom Rule Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "// foo.js\n\nconst foo = \"bar\";"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Correct Usage of Global Objects in JavaScript",
    "codeDescription": "Examples of correct code that comply with the no-obj-calls rule by using Math, JSON, Reflect, Atomics, and Intl objects properly as intended in the ECMAScript specification.",
    "codeLanguage": "javascript",
    "codeTokens": 143,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-obj-calls.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-obj-calls",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-obj-calls: \"error\"*/\n\nfunction area(r) {\n    return Math.PI * r * r;\n}\n\nconst object = JSON.parse(\"{}\");\n\nconst value = Reflect.get({ x: 1, y: 2 }, \"x\");\n\nconst first = Atomics.load(foo, 0);\n\nconst segmenterFr = new Intl.Segmenter(\"fr\", { granularity: \"word\" });"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Detecting Unreachable Code After Return Statement in JavaScript",
    "codeDescription": "Example of unreachable code after a return statement, which is flagged by the no-unreachable rule. The code after the return statement will never be executed.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unreachable.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-unreachable",
    "codeList": [
      {
        "language": "javascript",
        "code": "function fn() {\n    x = 1;\n    return x;\n    x = 3; // this will never execute\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Correct usage of arrow functions with 'always' option (JavaScript)",
    "codeDescription": "Shows correct usage of arrow functions when the 'arrow-body-style' rule is set to 'always'. All function bodies are wrapped in braces with explicit returns.",
    "codeLanguage": "js",
    "codeTokens": 100,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-body-style.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: arrow-body-style",
    "codeList": [
      {
        "language": "js",
        "code": "/*eslint arrow-body-style: [\"error\", \"always\"]*/\n\nconst foo = () => {\n    return 0;\n};\n\nconst bar = (retv, name) => {\n    retv[name] = true;\n    return retv;\n};"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Extending ESLint Configs in JavaScript",
    "codeDescription": "Illustrates how to create an ESLint configuration that extends another configuration within the same package. This example extends a 'defaults' configuration and adds a new rule.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_8",
    "pageTitle": "Creating and Sharing ESLint Configurations",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n\trules: {\n\t\t\"no-alert\": 2,\n\t},\n\textends: \"myconfig/lib/defaults\",\n};"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing ESLint Plugin to Bundle the Custom Rule",
    "codeDescription": "Plugin implementation that exports an object with a rules property containing the custom rule, allowing it to be distributed and shared across projects.",
    "codeLanguage": "javascript",
    "codeTokens": 85,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_10",
    "pageTitle": "ESLint Custom Rule Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint-plugin-example.js\n\nconst fooBarRule = require(\"./enforce-foo-bar\");\nconst plugin = { rules: { \"enforce-foo-bar\": fooBarRule } };\nmodule.exports = plugin;"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Disabling All Rules for an Entire File",
    "codeDescription": "Shows how to disable all ESLint rules for an entire file by placing a disable comment at the top of the file. This should be used sparingly and with good reason.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_13",
    "pageTitle": "Configuring ESLint Rules (Deprecated Format)",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* eslint-disable */\n\nalert(\"foo\");"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Correct Usage Without Non-octal Decimal Escapes in JavaScript",
    "codeDescription": "Examples of correct code that avoids using \\8 and \\9 escape sequences, using proper alternatives instead.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-nonoctal-decimal-escape.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule Documentation: no-nonoctal-decimal-escape",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-nonoctal-decimal-escape: \"error\"*/\n\n\"8\";\n\n\"9\";\n\nconst foo = \"w8less\";\n\nconst bar = \"December 19\";\n\nconst baz = \"Don't use \\\\8 and \\\\9 escapes.\";\n\nconst quux = \"\\0\\u0038\";"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "ESLint SourceCode Retrieval",
    "codeDescription": "Demonstrates how to access the SourceCode object used in the last linting operation.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_21",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const Linter = require(\"eslint\").Linter;\nconst linter = new Linter();\n\nconst messages = linter.verify(\n\t\"var foo = bar;\",\n\t{\n\t\trules: {\n\t\t\tsemi: 2,\n\t\t},\n\t},\n\t{ filename: \"foo.js\" }\n);\n\nconst code = linter.getSourceCode();\n\nconsole.log(code.text);"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Disabling Specific Rules in a Block of Code",
    "codeDescription": "Shows how to disable specific ESLint rules for a section of code using block comments. This allows more granular control over which rules are bypassed.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules-deprecated.md#2025-04-14_snippet_12",
    "pageTitle": "Configuring ESLint Rules (Deprecated Format)",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* eslint-disable no-alert, no-console */\n\nalert(\"foo\");\nconsole.log(\"bar\");\n\n/* eslint-enable no-alert, no-console */"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Basic eval() Usage Example",
    "codeDescription": "Demonstrates a basic example of eval() usage that should be avoided",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-eval.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint no-eval Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const obj = { x: \"foo\" },\n    key = \"x\",\n    value = eval(\"obj.\" + key);"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Pruning Unused Suppressions",
    "codeDescription": "Example demonstrating how to remove unused suppressions from the suppressions file.",
    "codeLanguage": "shell",
    "codeTokens": 42,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_20",
    "pageTitle": "ESLint Command Line Interface Reference",
    "codeList": [
      {
        "language": "shell",
        "code": "\"src/**/*.js\" --prune-suppressions"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Incorrect usage examples of shadowing restricted names in module context",
    "codeDescription": "Demonstrates incorrect shadowing of restricted names in ES modules through imports and class definitions, which violates the no-shadow-restricted-names rule.",
    "codeLanguage": "JavaScript",
    "codeTokens": 77,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow-restricted-names.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-shadow-restricted-names",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "/*eslint no-shadow-restricted-names: \"error\"*/\n\nimport NaN from \"foo\";\n\nimport { undefined } from \"bar\";\n\nclass Infinity {}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Demonstrating Unnecessary Boolean Casts in JavaScript",
    "codeDescription": "Examples of equivalent if statements showing unnecessary boolean casts using double negation and Boolean function calls.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-boolean-cast.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-extra-boolean-cast",
    "codeList": [
      {
        "language": "javascript",
        "code": "if (!!foo) {\n    // ...\n}\n\nif (Boolean(foo)) {\n    // ...\n}\n\nif (foo) {\n    // ...\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Proper Usage of bind() Method in JavaScript",
    "codeDescription": "Example of correctly using bind() to set the value of 'this' in a function. The function uses 'this.name' in its body, making the bind() call necessary and functional.",
    "codeLanguage": "javascript",
    "codeTokens": 93,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-bind.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-extra-bind",
    "codeList": [
      {
        "language": "javascript",
        "code": "const boundGetName = (function getName() {\n    return this.name;\n}).bind({ name: \"ESLint\" });\n\nconsole.log(boundGetName());      // \"ESLint\""
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "ignoreOverrideMethods Option - Correct Example (True)",
    "codeDescription": "TypeScript example showing methods with 'override' modifier that don't use 'this', which is allowed when ignoreOverrideMethods is true.",
    "codeLanguage": "typescript",
    "codeTokens": 106,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_11",
    "pageTitle": "Understanding the class-methods-use-this ESLint Rule",
    "codeList": [
      {
        "language": "typescript",
        "code": "/*eslint class-methods-use-this: [\"error\", { \"ignoreOverrideMethods\": true }] */\n\nabstract class Base {\n    abstract method(): void;\n    abstract property: () => void;\n}\n\nclass Derived extends Base {\n    override method() {}\n    override property = () => {};\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Correct Code Examples for no-multi-assign Rule in JavaScript",
    "codeDescription": "These examples show code that complies with the 'no-multi-assign' rule. They demonstrate proper ways to assign values to multiple variables without chaining assignments.",
    "codeLanguage": "JavaScript",
    "codeTokens": 130,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-assign.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-multi-assign",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-multi-assign: \"error\"*/\n\nlet a = 5;\nlet b = 5;\nconst c = 5;\n\nconst foo = \"baz\";\nconst bar = \"baz\";\n\nlet d = c;\nlet e = c;\n\nclass Foo {\n    a = 10;\n    b = 10;\n}\n\na = \"quux\";\nb = \"quux\";"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Demonstrating Correct and Incorrect Default Parameter Usage in JavaScript",
    "codeDescription": "This snippet shows the correct way to use default parameters (at the end of the parameter list) and an incorrect way (in the middle of the parameter list). It explains how optional arguments can be omitted when default parameters are last.",
    "codeLanguage": "javascript",
    "codeTokens": 119,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/default-param-last.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: default-param-last",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Correct: optional argument can be omitted\nfunction createUser(id, isAdmin = false) {}\ncreateUser(\"tabby\")\n\n// Incorrect: optional argument can **not** be omitted\nfunction createUser(isAdmin = false, id) {}\ncreateUser(undefined, \"tabby\")"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Demonstrating Unnecessary String Concatenation in JavaScript",
    "codeDescription": "Example of code that triggers the no-useless-concat rule. This shows concatenation of string literals that could be written as a single literal.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-concat.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-useless-concat",
    "codeList": [
      {
        "language": "javascript",
        "code": "const foo = \"a\" + \"b\";"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Demonstrating IIFE Expression vs Declaration in JavaScript",
    "codeDescription": "Shows the difference between function expressions (which can be invoked immediately) and function declarations (which cannot be invoked immediately).",
    "codeLanguage": "javascript",
    "codeTokens": 83,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/wrap-iife.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint wrap-iife Rule",
    "codeList": [
      {
        "language": "javascript",
        "code": "// function expression could be unwrapped\nvar x = function () { return { y: 1 };}();\n\n// function declaration must be wrapped\nfunction () { /* side effects */ }(); // SyntaxError"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using a Published Custom Parser in Modern ESLint Configuration",
    "codeDescription": "Example of configuring ESLint to use a published custom parser package in the modern flat config format. This demonstrates how to use a parser after installing it as a dependency.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-parsers.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Custom Parsers Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\n\nconst myparser = require(\"eslint-parser-myparser\");\n\nmodule.exports = [\n\t{\n\t\tlanguageOptions: {\n\t\t\tparser: myparser,\n\t\t},\n\t\t// ... rest of configuration\n\t},\n];"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Correct Usage of Constructor with 'new' Keyword in JavaScript",
    "codeDescription": "Demonstrates the typical and correct way of using the 'new' keyword with a constructor to create an object and store it in a variable.",
    "codeLanguage": "javascript",
    "codeTokens": 52,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-new",
    "codeList": [
      {
        "language": "javascript",
        "code": "const person = new Person();"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using Fix Dry Run in ESLint CLI",
    "codeDescription": "The --fix-dry-run flag applies fixes without saving to the file system. Requires a different formatter (like json) to view the fixes. Useful for stdin input or editor integrations.",
    "codeLanguage": "bash",
    "codeTokens": 66,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_9",
    "pageTitle": "ESLint Command Line Interface Reference",
    "codeList": [
      {
        "language": "bash",
        "code": "--stdin --fix-dry-run --format json"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Configuring array-element-newline Rule with Different Options in ESLint",
    "codeDescription": "Example of configuring the array-element-newline rule with separate settings for array expressions and array patterns in an ESLint configuration file.",
    "codeLanguage": "json",
    "codeTokens": 81,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/array-element-newline.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint array-element-newline Rule Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n    \"array-element-newline\": [\"error\", {\n        \"ArrayExpression\": \"consistent\",\n        \"ArrayPattern\": { \"minItems\": 3 },\n    }]\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Correct Usage of Rest Parameters in JavaScript",
    "codeDescription": "Examples showing correct usage of ES2015 rest parameters instead of the arguments object. These patterns pass the prefer-rest-params rule check.",
    "codeLanguage": "javascript",
    "codeTokens": 157,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-rest-params.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule Documentation: prefer-rest-params",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint prefer-rest-params: \"error\"*/\n\nfunction foo(...args) {\n    console.log(args);\n}\n\nfunction foo(action, ...args) {\n    action.apply(null, args); // or `action(...args)`, related to the `prefer-spread` rule.\n}\n\n// Note: the implicit arguments can be overwritten.\nfunction foo(arguments) {\n    console.log(arguments); // This is the first argument.\n}\nfunction foo() {\n    const arguments = 0;\n    console.log(arguments); // This is a local variable.\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using exceptMethods Option - Correct Example",
    "codeDescription": "Shows how to exempt specific methods from the rule using the 'exceptMethods' option. The methods 'foo' and '#bar' are allowed to not use 'this'.",
    "codeLanguage": "javascript",
    "codeTokens": 97,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_5",
    "pageTitle": "Understanding the class-methods-use-this ESLint Rule",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"foo\", \"#bar\"] }] */\n\nclass A {\n    foo() {\n    }\n    #bar() {\n    }\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Main Integration Function",
    "codeDescription": "Main function that combines all components and exports the integration functionality.",
    "codeLanguage": "javascript",
    "codeTokens": 139,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/integration-tutorial.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Node.js API Integration Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function lintFiles(filePaths) {\n\tconst overrideConfig = {\n\t\tlanguageOptions: {\n\t\t\tecmaVersion: 2018,\n\t\t\tsourceType: \"commonjs\",\n\t\t},\n\t\trules: {\n\t\t\t\"no-console\": \"error\",\n\t\t\t\"no-unused-vars\": \"warn\",\n\t\t},\n\t};\n\n\tconst eslint = createESLintInstance(overrideConfig);\n\tconst results = await lintAndFix(eslint, filePaths);\n\treturn outputLintingResults(results);\n}\n\nmodule.exports = { lintFiles };"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Correct Usage: Using const in for...of Loop in JavaScript",
    "codeDescription": "This example illustrates correct usage of const in a for...of loop, where 'a' is re-defined (not modified) on each loop iteration.",
    "codeLanguage": "JavaScript",
    "codeTokens": 100,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-const-assign.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Rule: no-const-assign",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-const-assign: \"error\"*/\n\nfor (const a of [1, 2, 3]) { // `a` is re-defined (not modified) on each loop step.\n    console.log(a);\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "ESLint Instance Configuration",
    "codeDescription": "JavaScript code to import and configure an ESLint instance with custom options.",
    "codeLanguage": "javascript",
    "codeTokens": 93,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/integration-tutorial.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Node.js API Integration Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { ESLint } = require(\"eslint\");\n\n// Create an instance of ESLint with the configuration passed to the function\nfunction createESLintInstance(overrideConfig) {\n\treturn new ESLint({\n\t\toverrideConfigFile: true,\n\t\toverrideConfig,\n\t\tfix: true,\n\t});\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Correct Path Construction Using path.resolve()",
    "codeDescription": "Example of using Node.js path.resolve() method to create fully-qualified file paths, handling platform-specific separators correctly.",
    "codeLanguage": "javascript",
    "codeTokens": 55,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-path-concat.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint no-path-concat Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "var fullPath = path.resolve(__dirname, \"foo.js\");"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Combining Multiple Global Collections in ESLint Configuration",
    "codeDescription": "Example demonstrating how to include multiple collections of globals in the same configuration. This combines both browser and Jest globals for projects using both environments.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options.md#2025-04-14_snippet_7",
    "pageTitle": "Configuring Language Options in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport globals from \"globals\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\t...globals.browser,\n\t\t\t\t...globals.jest,\n\t\t\t},\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using a Shareable Config in ESLint Configuration",
    "codeDescription": "JavaScript example showing how to import and use a shareable configuration in an eslint.config.js file using the extends property to apply the imported config.",
    "codeLanguage": "javascript",
    "codeTokens": 97,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Shareable Configurations",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport myconfig from \"eslint-config-myconfig\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\textends: [myconfig],\n\t},\n]);"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Correct usages with default 'always' option",
    "codeDescription": "Examples of code that would be considered correct when using the default 'always' option, demonstrating proper use of parseInt() with valid radix parameters.",
    "codeLanguage": "javascript",
    "codeTokens": 83,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/radix.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint radix Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint radix: \"error\"*/\n\nconst num = parseInt(\"071\", 10);\n\nconst num1 = parseInt(\"071\", 8);\n\nconst num2 = parseFloat(someValue);"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Configuring ESLint Rules in JavaScript",
    "codeDescription": "Example of an eslint.config.js file that enables the prefer-const rule at the error severity level. This demonstrates how to export a config array containing a config object with rule settings.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/core-concepts/glossary.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Glossary",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default [\n\t{\n\t\trules: {\n\t\t\t\"prefer-const\": \"error\",\n\t\t},\n\t},\n];"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Demonstrating correct variable usage without redeclaration in JavaScript",
    "codeDescription": "This example shows JavaScript code that complies with the no-redeclare rule by reassigning values to variables instead of redeclaring them with 'var'.",
    "codeLanguage": "JavaScript",
    "codeTokens": 111,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-redeclare.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-redeclare",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "/*eslint no-redeclare: \"error\"*/\n\nvar a = 3;\na = 10;\n\nclass C {\n    foo() {\n        var b = 3;\n        b = 10;\n    }\n\n    static {\n        var c = 3;\n        c = 10;\n    }\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Demonstrating Operator Precedence Issue in JavaScript",
    "codeDescription": "Shows how operator precedence with the nullish coalescing operator can lead to unexpected behavior when combined with addition.",
    "codeLanguage": "javascript",
    "codeTokens": 104,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-constant-binary-expression.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint no-constant-binary-expression Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// One might think this would evaluate as `a + (b ?? c)`:\nconst x = a + b ?? c;\n\n// But it actually evaluates as `(a + b) ?? c`. Since `a + b` can never be null,\n// the `?? c` has no effect."
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Valid Use Case: Retry Mechanism (JavaScript)",
    "codeDescription": "This snippet demonstrates a valid use of await in a loop for implementing a retry mechanism for asynchronous operations.",
    "codeLanguage": "JavaScript",
    "codeTokens": 116,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-await-in-loop.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Rule: no-await-in-loop",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function retryUpTo10Times() {\n    for (let i = 0; i < 10; i++) {\n        const wasSuccessful = await tryToDoSomething();\n        if (wasSuccessful)\n            return 'succeeded!';\n        // wait to try again.\n        await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n    return 'failed!';\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using Placeholders in Suggestion Messages for ESLint Rules",
    "codeDescription": "This snippet illustrates how to use placeholders in suggestion messages for ESLint rules. It shows how to provide data for both the main message and suggestion messages separately.",
    "codeLanguage": "javascript",
    "codeTokens": 196,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_12",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n    meta: {\n        messages: {\n            unnecessaryEscape: \"Unnecessary escape character: \\\\{{character}}.\",\n            removeEscape: \"Remove `\\\\` before {{character}}.\",\n        },\n        hasSuggestions: true\n    },\n    create: function(context) {\n        // ...\n        context.report({\n            node: node,\n            messageId: \"unnecessaryEscape\",\n            data: { character }, // data for the unnecessaryEscape overall message\n            suggest: [\n                {\n                    messageId: \"removeEscape\",\n                    data: { character }, // data for the removeEscape suggestion message\n                    fix: function(fixer) {\n                        return fixer.removeRange(range);\n                    }\n                }\n            ]\n        });\n    }\n};"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Exporting Additional ESLint Config in JavaScript",
    "codeDescription": "Shows how to create and export an additional shareable ESLint configuration within the same npm package, allowing for multiple configurations to be shared.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_4",
    "pageTitle": "Creating and Sharing ESLint Configurations",
    "codeList": [
      {
        "language": "javascript",
        "code": "// my-special-config.js\nmodule.exports = {\n\trules: {\n\t\tquotes: [2, \"double\"],\n\t},\n};"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Configuring a Custom Language in ESLint Configuration (JavaScript)",
    "codeDescription": "This snippet shows how to configure and use a custom language from a plugin in an ESLint configuration file. It demonstrates importing the plugin, including it in the 'plugins' key with a namespace, and referencing the language in the 'language' configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 130,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/languages.md#2025-04-14_snippet_1",
    "pageTitle": "Creating custom language plugins for ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport example from \"eslint-plugin-example\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.my\"],\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\t\tlanguage: \"example/my\",\n\t},\n]);"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Arrow Functions Exception in object-shorthand Rule",
    "codeDescription": "Shows that arrow functions inside object literals are not flagged by the object-shorthand rule.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/object-shorthand.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Object Shorthand Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint object-shorthand: \"error\"*/\n\nconst foo = {\n    x: (y) => y\n};"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Demonstrating Incorrect Usage of Lexical Declarations in Switch Statements (JavaScript)",
    "codeDescription": "This code snippet shows examples of lexical declarations (let, const, function, and class) incorrectly used within case clauses of a switch statement. These declarations are visible throughout the entire switch block but only initialized when reached, which can lead to unexpected behavior.",
    "codeLanguage": "JavaScript",
    "codeTokens": 137,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-case-declarations.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-case-declarations",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-case-declarations: \"error\"*/\n\nswitch (foo) {\n    case 1:\n        let x = 1;\n        break;\n    case 2:\n        const y = 2;\n        break;\n    case 3:\n        function f() {}\n        break;\n    default:\n        class C {}\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Correct Usage with Always Option",
    "codeDescription": "Examples of code that complies with the eqeqeq rule when configured with the \"always\" option.",
    "codeLanguage": "javascript",
    "codeTokens": 96,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/eqeqeq.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint eqeqeq Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint eqeqeq: [\"error\", \"always\"]*/\n\na === b\nfoo === true\nbananas !== 1\nvalue === undefined\ntypeof foo === 'undefined'\n'hello' !== 'world'\n0 === 0\ntrue === true\nfoo === null"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Basic Switch Statement Fallthrough Example",
    "codeDescription": "Demonstrates unintended fallthrough behavior in switch statements without break statements.",
    "codeLanguage": "javascript",
    "codeTokens": 57,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-fallthrough.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint no-fallthrough Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "switch(foo) {\n    case 1:\n        doSomething();\n\n    case 2:\n        doSomethingElse();\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Example Test Code for ESLint Rule",
    "codeDescription": "JavaScript code demonstrating correct and incorrect usage of the custom ESLint rule for testing purposes.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_14",
    "pageTitle": "ESLint Custom Rule Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "// example.js\n\nfunction correctFooBar() {\n\tconst foo = \"bar\";\n}\n\nfunction incorrectFoo() {\n\tconst foo = \"baz\"; // Problem!\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Correct Usage with 'requireForBlockBody' Option (JavaScript)",
    "codeDescription": "Examples of correct code for the 'arrow-parens' rule with the 'requireForBlockBody' option, demonstrating proper use of parentheses for block bodies and concise arrow functions.",
    "codeLanguage": "javascript",
    "codeTokens": 167,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-parens.md#2025-04-14_snippet_8",
    "pageTitle": "ESLint Rule: arrow-parens",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint arrow-parens: [2, \"as-needed\", { \"requireForBlockBody\": true }]*/\n\n(a) => {};\n(a) => {'\\n'};\na => ({});\n() => {};\na => a;\na.then((foo) => {});\na.then((foo) => { if (true) {} });\na((foo) => { if (true) {} });\n(a, b, c) => a;\n(a = 10) => a;\n([a, b]) => a;\n({a, b}) => a;"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Preventing Accidental Comparisons in Arrow Functions (JavaScript)",
    "codeDescription": "This example illustrates how the 'arrow-parens' rule can help prevent accidental use of arrow functions in conditions where comparisons were intended.",
    "codeLanguage": "javascript",
    "codeTokens": 71,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-parens.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: arrow-parens",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Bad\nif (a => 2) {\n}\n\n// Good\nif (a >= 2) {\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Configuring Local ESLint Plugin",
    "codeDescription": "This example shows how to load and configure a local ESLint plugin directly from a file in the project, without publishing it to npm.",
    "codeLanguage": "JavaScript",
    "codeTokens": 112,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins.md#2025-04-14_snippet_1",
    "pageTitle": "Configuring ESLint Plugins in Flat Config Format",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport local from \"./my-local-plugin.js\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tplugins: {\n\t\t\tlocal,\n\t\t},\n\t\trules: {\n\t\t\t\"local/rule1\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Correct Function-Level Strict Mode Implementation",
    "codeDescription": "Example of correct code when using the 'function' option. Each top-level function has its own strict mode directive, and functions with non-simple parameters are properly wrapped.",
    "codeLanguage": "javascript",
    "codeTokens": 128,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/strict.md#2025-04-14_snippet_9",
    "pageTitle": "Strict Mode Directive Configuration in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint strict: [\"error\", \"function\"]*/\n\nfunction foo() {\n    \"use strict\";\n}\n\n(function() {\n    \"use strict\";\n\n    function bar() {\n    }\n\n    function baz(a = 1) {\n    }\n}());\n\nconst foo2 = (function() {\n    \"use strict\";\n\n    return function foo(a = 1) {\n    };\n}());"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Correct Alternatives to __proto__ in JavaScript",
    "codeDescription": "Examples of code that comply with the no-proto rule by using Object.getPrototypeOf() and Object.setPrototypeOf() instead of __proto__. Also shows a valid use of __proto__ in an object literal.",
    "codeLanguage": "javascript",
    "codeTokens": 92,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-proto.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-proto",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-proto: \"error\"*/\n\nconst a = Object.getPrototypeOf(obj);\n\nObject.setPrototypeOf(obj, b);\n\nconst c = { __proto__: a };"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Incorrect Variable and Function Declarations - JavaScript",
    "codeDescription": "Examples of incorrect code that creates implicit global variables through var and function declarations at the top-level script scope.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implicit-globals.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint no-implicit-globals Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-implicit-globals: \"error\"*/\n\nvar foo = 1;\n\nfunction bar() {}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Initializing Code Path Analysis Objects in JavaScript",
    "codeDescription": "Defines the CodePath and CodePathSegment objects used for code path analysis in ESLint. CodePath represents a complete code path, while CodePathSegment represents a part of a code path.",
    "codeLanguage": "javascript",
    "codeTokens": 69,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/code-path-analysis.md#2025-04-14_snippet_0",
    "pageTitle": "Code Path Analysis in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "if (a && b) {\n\tfoo();\n}\nbar();"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Correct Usage with allowVoid Option in JavaScript",
    "codeDescription": "These examples demonstrate correct usage when both 'checkForEach' and 'allowVoid' options are set to true, allowing void returns in forEach callbacks.",
    "codeLanguage": "JavaScript",
    "codeTokens": 123,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/array-callback-return.md#2025-04-14_snippet_6",
    "pageTitle": "ESLint Rule: array-callback-return",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint array-callback-return: [\"error\", { checkForEach: true, allowVoid: true }]*/\n\nmyArray.forEach(item => void handleItem(item));\n\nmyArray.forEach(item => {\n    return void handleItem(item);\n});\n\nmyArray.forEach(item => {\n    if (item < 0) {\n        return void x;\n    }\n    handleItem(item);\n});"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Demonstrating no-useless-computed-key rule change in JavaScript",
    "codeDescription": "This snippet shows how the no-useless-computed-key rule now flags unnecessary computed member names in classes by default in ESLint v9.0.0. The code that was previously allowed in v8 now produces an error in v9.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_15",
    "pageTitle": "Migration Guide for ESLint v9.x",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-useless-computed-key: \"error\"*/\n\nclass SomeClass {\n\t[\"someMethod\"]() {} // ok in ESLint v8, error in ESLint v9.\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Demonstrating Incorrect Usage of Alert, Confirm, and Prompt Functions in JavaScript",
    "codeDescription": "This snippet demonstrates multiple violations of the no-alert rule by using the built-in alert, confirm, and prompt functions, which are considered obtrusive.",
    "codeLanguage": "javascript",
    "codeTokens": 79,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-alert.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-alert",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-alert: \"error\"*/\n\nalert(\"here!\");\n\nconfirm(\"Are you sure?\");\n\nprompt(\"What's your name?\", \"John Doe\");"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Incorrect Async Promise Executor Usage",
    "codeDescription": "Demonstrates incorrect patterns that violate the no-async-promise-executor rule by using async executor functions.",
    "codeLanguage": "javascript",
    "codeTokens": 125,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-async-promise-executor.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-async-promise-executor",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-async-promise-executor: \"error\"*/\n\nconst foo = new Promise(async (resolve, reject) => {\n  readFile('foo.txt', function(err, result) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  });\n});\n\nconst result = new Promise(async (resolve, reject) => {\n  resolve(await foo);\n});"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Correct Switch Statement with Break",
    "codeDescription": "Shows proper switch statement implementation using break statements to prevent fallthrough.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-fallthrough.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint no-fallthrough Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "switch(foo) {\n    case 1:\n        doSomething();\n        break;\n\n    case 2:\n        doSomethingElse();\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Incorrect Usage of Empty Static Blocks in JavaScript",
    "codeDescription": "This snippet demonstrates an example of incorrect code that violates the 'no-empty-static-block' rule. It shows an empty static block within a class, which is disallowed by this rule.",
    "codeLanguage": "JavaScript",
    "codeTokens": 75,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-static-block.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-empty-static-block",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "/*eslint no-empty-static-block: \"error\"*/\n\nclass Foo {\n    static {}\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Correct JSX Examples with ignoreJSX: 'single-line' Option",
    "codeDescription": "Examples showing valid JSX code when the 'ignoreJSX' option is set to 'single-line', allowing extra parentheses around single-line JSX expressions.",
    "codeLanguage": "jsx",
    "codeTokens": 93,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-parens.md#2025-04-14_snippet_11",
    "pageTitle": "ESLint rule: no-extra-parens",
    "codeList": [
      {
        "language": "jsx",
        "code": "/* eslint no-extra-parens: [\"error\", \"all\", { ignoreJSX: \"single-line\" }] */\nconst ThisComponent = (<div />)\nconst ThatComponent = (<div><p /></div>)"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Correct Examples for no-unmodified-loop-condition Rule in JavaScript",
    "codeDescription": "Examples of code that complies with the no-unmodified-loop-condition rule, showing various ways variables in loop conditions can be properly modified.",
    "codeLanguage": "javascript",
    "codeTokens": 229,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unmodified-loop-condition.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Rule: no-unmodified-loop-condition",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-unmodified-loop-condition: \"error\"*/\n\nwhile (node) {\n    doSomething(node);\n    node = node.parent;\n}\n\nfor (let j = 0; j < items.length; ++j) {\n    doSomething(items[j]);\n}\n\n// OK, the result of this binary expression is changed in this loop.\nwhile (node !== root) {\n    doSomething(node);\n    node = node.parent;\n}\n\n// OK, the result of this ternary expression is changed in this loop.\nwhile (node ? A : B) {\n    doSomething(node);\n    node = node.parent;\n}\n\n// A property might be a getter which has side effect...\n// Or \"doSomething\" can modify \"obj.foo\".\nwhile (obj.foo) {\n    doSomething(obj);\n}\n\n// A function call can return various values.\nwhile (check(obj)) {\n    doSomething(obj);\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Incorrect Usage of __iterator__ Property in JavaScript",
    "codeDescription": "Example of code that would trigger the no-iterator rule error by defining custom iterators using the obsolete __iterator__ property. This shows three methods of assigning to this property, all of which are discouraged.",
    "codeLanguage": "javascript",
    "codeTokens": 104,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-iterator.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint no-iterator Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-iterator: \"error\"*/\n\nFoo.prototype.__iterator__ = function() {\n    return new FooIterator(this);\n};\n\nfoo.__iterator__ = function () {};\n\nfoo[\"__iterator__\"] = function () {};"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Recommended Error Handling Approach",
    "codeDescription": "Better approach using throw to allow proper error handling throughout the application.",
    "codeLanguage": "javascript",
    "codeTokens": 52,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-process-exit.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-process-exit",
    "codeList": [
      {
        "language": "javascript",
        "code": "if (somethingBadHappened) {\n    throw new Error(\"Something bad happened!\");\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Example of Code to be Linted in JavaScript",
    "codeDescription": "Shows an example of JavaScript code that would trigger the custom 'avoid-name' rule.",
    "codeLanguage": "javascript",
    "codeTokens": 57,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_6",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "// someFile.js\n\nvar foo = 2;\n//  ^ error: Avoid using variables named 'foo'"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Configuring a Custom Parser in ESLint Configuration File",
    "codeDescription": "This example demonstrates how to specify Esprima as a custom parser in an .eslintrc file. The configuration includes setting the parser and a simple rule for requiring semicolons.",
    "codeLanguage": "json",
    "codeTokens": 87,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/parser-deprecated.md#2025-04-14_snippet_0",
    "pageTitle": "Configure a Custom Parser for ESLint (Deprecated Documentation)",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"parser\": \"esprima\",\n\t\"rules\": {\n\t\t\"semi\": \"error\"\n\t}\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "ESLint Configuration with JavaScript-style Comments",
    "codeDescription": "Example of JSON configuration file that includes JavaScript-style comments to improve readability. It configures browser environment and overrides default rule settings for eqeqeq and strict rules.",
    "codeLanguage": "js",
    "codeTokens": 100,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Configuration Files (Deprecated)",
    "codeList": [
      {
        "language": "js",
        "code": "{\n    \"env\": {\n        \"browser\": true\n    },\n    \"rules\": {\n        // Override our default settings just for this directory\n        \"eqeqeq\": \"warn\",\n        \"strict\": \"off\"\n    }\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "New JSX Configuration Format",
    "codeDescription": "Updated configuration format for enabling JSX support in ESLint v2.0.0, where ecmaFeatures is now nested under parserOptions.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrating-to-2.0.0.md#2025-04-14_snippet_6",
    "pageTitle": "Migrating to ESLint v2.0.0",
    "codeList": [
      {
        "language": "javascript",
        "code": "{\n\tparserOptions: {\n\t\tecmaFeatures: {\n\t\t\tjsx: true;\n\t\t}\n\t}\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Incorrect Usage of Boolean Casts in JavaScript",
    "codeDescription": "Examples of code that violate the no-extra-boolean-cast rule, showing unnecessary boolean casts in various contexts.",
    "codeLanguage": "javascript",
    "codeTokens": 143,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-extra-boolean-cast.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-extra-boolean-cast",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-extra-boolean-cast: \"error\"*/\n\nconst foo = !!!bar;\n\nconst foo1 = !!bar ? baz : bat;\n\nconst foo2 = Boolean(!!bar);\n\nconst foo3 = new Boolean(!!bar);\n\nif (!!foo) {\n    // ...\n}\n\nif (Boolean(foo)) {\n    // ...\n}\n\nwhile (!!foo) {\n    // ...\n}\n\ndo {\n    // ...\n} while (Boolean(foo));\n\nfor (; !!foo; ) {\n    // ...\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Using Named Capture Groups in JavaScript RegExp",
    "codeDescription": "Demonstrates the correct usage of named capture groups in regular expressions using the (?<name>...) syntax to capture year values.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-named-capture-group.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule Documentation: prefer-named-capture-group",
    "codeList": [
      {
        "language": "javascript",
        "code": "const regex = /(?<year>[0-9]{4})/;"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Demonstrating Correct Usage with Non-Mergeable Exports in JavaScript",
    "codeDescription": "This snippet shows cases where exports cannot be merged with imports, even with the includeExports option set to true. It includes examples of namespace exports and re-exporting all contents of a module.",
    "codeLanguage": "javascript",
    "codeTokens": 117,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-duplicate-imports.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Rule: no-duplicate-imports",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-duplicate-imports: [\"error\", { \"includeExports\": true }]*/\n\nimport { merge, find } from 'module';\n\n// cannot be merged with the above import\nexport * as something from 'module';\n\n// cannot be written differently\nexport * from 'module';"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Accessing Rule Options in ESLint Rule Implementation",
    "codeDescription": "This JavaScript code demonstrates how to access and use options passed to an ESLint rule. It shows how to retrieve the first option and use it in the rule's logic, as well as how to define a schema for the rule's options.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rules.md#2025-04-14_snippet_14",
    "pageTitle": "Creating Custom ESLint Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n\tmeta: {\n\t\tschema: [\n\t\t\t{\n\t\t\t\tenum: [\"single\", \"double\", \"backtick\"],\n\t\t\t},\n\t\t],\n\t},\n\tcreate: function (context) {\n\t\tvar isDouble = context.options[0] === \"double\";\n\n\t\t// ...\n\t},\n};"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Incorrect Usage with Default Rule",
    "codeDescription": "Examples of code that violates the eqeqeq rule when configured with default \"error\" setting.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/eqeqeq.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint eqeqeq Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint eqeqeq: \"error\"*/\n\nif (x == 42) { }\n\nif (\"\" == text) { }\n\nif (obj.getStuff() != undefined) { }"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Plugin Rule Configuration in ESLint",
    "codeDescription": "Demonstrates how to configure rules from plugins in an ESLint configuration file.",
    "codeLanguage": "javascript",
    "codeTokens": 96,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Rules Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport example from \"eslint-plugin-example\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tplugins: {\n\t\t\texample,\n\t\t},\n\t\trules: {\n\t\t\t\"example/rule1\": \"warn\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Implementing Basic Parse Method for ESLint Custom Parser",
    "codeDescription": "A simple custom parser implementation that logs parsing duration using espree as the underlying parser. This demonstrates the basic structure of a custom parser with the parse() method.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-parsers.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Custom Parsers Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// customParser.js\n\nconst espree = require(\"espree\");\n\n// Logs the duration it takes to parse each file.\nfunction parse(code, options) {\n\tconst label = `Parsing file \"${options.filePath}\"`;\n\tconsole.time(label);\n\tconst ast = espree.parse(code, options);\n\tconsole.timeEnd(label);\n\treturn ast; // Only the AST is returned.\n}\n\nmodule.exports = { parse };"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Correct Alternatives to Nested Ternary Expressions in JavaScript",
    "codeDescription": "These examples show correct code that complies with the no-nested-ternary rule. They demonstrate how to rewrite nested ternary expressions using simple ternary operations and if-else statements.",
    "codeLanguage": "javascript",
    "codeTokens": 126,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-nested-ternary.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-nested-ternary",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-nested-ternary: \"error\"*/\n\nconst thing = foo ? bar : foobar;\n\nlet otherThing;\n\nif (foo) {\n  otherThing = bar;\n} else if (baz === qux) {\n  otherThing = quxx;\n} else {\n  otherThing = foobar;\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Reporting Unused Inline Configs in ESLint",
    "codeDescription": "Configuration for reporting unused inline ESLint configurations with severity levels.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files.md#2025-04-14_snippet_13",
    "pageTitle": "ESLint Configuration Files Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.js\"],\n\t\tlinterOptions: {\n\t\t\treportUnusedInlineConfigs: \"error\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Incorrect usage of new operator with Symbol and BigInt",
    "codeDescription": "Examples of code that violate the no-new-native-nonconstructor rule by incorrectly using the new operator with Symbol and BigInt functions, which will throw TypeError at runtime.",
    "codeLanguage": "javascript",
    "codeTokens": 83,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-native-nonconstructor.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-new-native-nonconstructor",
    "codeList": [
      {
        "language": "javascript",
        "code": "// throws a TypeError\nconst foo = new Symbol(\"foo\");\n\n// throws a TypeError\nconst result = new BigInt(9007199254740991);"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Declaring ESLint Peer Dependencies in package.json",
    "codeDescription": "JSON configuration showing how to properly declare ESLint as a peer dependency in the package.json file of a shareable config, using the recommended version range syntax.",
    "codeLanguage": "json",
    "codeTokens": 69,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Shareable Configurations",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"peerDependencies\": {\n\t\t\"eslint\": \">= 9\"\n\t}\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Correct ID Length Usage Examples",
    "codeDescription": "Examples showing proper usage following the default id-length rule requirements.",
    "codeLanguage": "javascript",
    "codeTokens": 295,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/id-length.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint ID Length Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint id-length: \"error\"*/     // default is minimum 2-chars ({ \"min\": 2 })\n\nconst num = 5;\nfunction _f() { return 42; }\nfunction _func() { return 42; }\nobj.el = document.body;\nconst foo = function (evt) { /* do stuff */ };\ntry {\n    dangerousStuff();\n} catch (error) {\n    // ignore as many do\n}\nconst myObj = { apple: 1 };\n(num) => { num * num };\nfunction bar(num = 0) { }\nclass MyClass { }\nclass Foo { method() {} }\nclass Bar { #method() {} }\nclass Baz { field = 1 }\nclass Qux { #field = 1 }\nfunction baz(...args) { }\nfunction qux([longName]) { }\nconst { prop } = {};\nconst { prop: [name] } = {};\nconst [longName] = arr;\nfunction foobar({ prop }) { }\nfunction foobaz({ a: prop }) { }\nconst { a: property } = {};\n({ prop: obj.longName } = {});\nconst data = { \"x\": 1 };  // excused because of quotes\ndata[\"y\"] = 3;  // excused because of calculated property access"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Example of undefined Shadowing in JavaScript",
    "codeDescription": "Shows how undefined can be dangerously shadowed in a local scope, causing comparisons against undefined to behave unexpectedly.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undefined.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-undefined",
    "codeList": [
      {
        "language": "javascript",
        "code": "function doSomething(data) {\n    const undefined = \"hi\";\n\n    // doesn't do what you think it does\n    if (data === undefined) {\n        // ...\n    }\n\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "IIFE Body Indentation in JavaScript",
    "codeDescription": "Demonstrates proper indentation for Immediately Invoked Function Expression (IIFE) bodies with outerIIFEBody option.",
    "codeLanguage": "javascript",
    "codeTokens": 89,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_12",
    "pageTitle": "ESLint Rule: indent",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint indent: [\"error\", 2, { \"outerIIFEBody\": 0 }]*/\n\n(function() {\n\nfunction foo(x) {\n  return x + 1;\n}\n\n})();\n\nif (y) {\n  console.log('foo');\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Configuring ESLint Rule Overrides in JavaScript",
    "codeDescription": "Example showing how to override the no-unused-expressions rule severity in test files using an ESLint config file. Demonstrates setting different severities for different file patterns.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/core-concepts/glossary.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Glossary",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default [\n\t{\n\t\trules: {\n\t\t\t\"no-unused-expressions\": \"error\",\n\t\t},\n\t},\n\t{\n\t\tfiles: [\"*.test.js\"],\n\t\trules: {\n\t\t\t\"no-unused-expressions\": \"off\",\n\t\t},\n\t},\n];"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "ESLint Flat Config with Global Definitions",
    "codeDescription": "Configuration example showing how to define globals for specific file patterns using the flat config format.",
    "codeLanguage": "javascript",
    "codeTokens": 85,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_16",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import globals from \"globals\";\n\nexport default [\n\t// ...other config\n\t{\n\t\tfiles: [\"tests/**\"],\n\t\tlanguageOptions: {\n\t\t\tglobals: {\n\t\t\t\t...globals.mocha,\n\t\t\t},\n\t\t},\n\t},\n];"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "ESLint Global Configuration with Comments (Modern)",
    "codeDescription": "Modern approach using global comments to define specific global identifiers for testing environments.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_15",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* global describe, it -- Globals defined by Mocha */\n\ndescribe(\"unit tests\", () => {\n\tit(\"should pass\", () => {\n\t\t// ...\n\t});\n});"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Incorrect Getter Implementation (ESLint Rule Violation)",
    "codeDescription": "Shows examples of getters that violate the 'getter-return' rule by not including return statements. This includes object literals, Object.defineProperty(), and class syntax.",
    "codeLanguage": "JavaScript",
    "codeTokens": 109,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/getter-return.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: getter-return",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint getter-return: \"error\"*/\n\nconst p = {\n    get name(){\n        // no returns.\n    }\n};\n\nObject.defineProperty(p, \"age\", {\n    get: function (){\n        // no returns.\n    }\n});\n\nclass P{\n    get name(){\n        // no returns.\n    }\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Correct Getter Implementation (ESLint Rule Compliant)",
    "codeDescription": "Demonstrates correct implementations of getters that comply with the 'getter-return' rule by including return statements. Examples cover object literals, Object.defineProperty(), and class syntax.",
    "codeLanguage": "JavaScript",
    "codeTokens": 115,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/getter-return.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: getter-return",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint getter-return: \"error\"*/\n\nconst p = {\n    get name(){\n        return \"nicholas\";\n    }\n};\n\nObject.defineProperty(p, \"age\", {\n    get: function (){\n        return 18;\n    }\n});\n\nclass P{\n    get name(){\n        return \"nicholas\";\n    }\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Demonstrating Correct Usage with Global Declarations in JavaScript",
    "codeDescription": "This code snippet shows how to correctly use global variables by declaring them in a comment. This prevents the 'no-undef' rule from triggering warnings.",
    "codeLanguage": "JavaScript",
    "codeTokens": 80,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-undef",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*global someFunction, a*/\n/*eslint no-undef: \"error\"*/\n\nconst foo = someFunction();\nconst bar = a + 1;"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Incorrect Class Assignment - Basic Example",
    "codeDescription": "Shows a basic violation where a class identifier is reassigned after declaration.",
    "codeLanguage": "javascript",
    "codeTokens": 54,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-class-assign.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint no-class-assign Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-class-assign: \"error\"*/\n\nclass A { }\nA = 0;"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Traditional ESLint Configuration with Language Options",
    "codeDescription": "Example of language options configuration using the eslintrc format, including environment settings, globals, and parser options.",
    "codeLanguage": "javascript",
    "codeTokens": 104,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_12",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n\tenv: {\n\t\tbrowser: true,\n\t\tnode: true,\n\t},\n\tglobals: {\n\t\tmyCustomGlobal: \"readonly\",\n\t},\n\tparserOptions: {\n\t\tecmaVersion: 2022,\n\t\tsourceType: \"module\",\n\t},\n\t// ...other config\n};"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Properly Modified Loop Condition Example in JavaScript",
    "codeDescription": "Example of a correctly implemented loop where the condition variable is modified within the loop body.",
    "codeLanguage": "javascript",
    "codeTokens": 55,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unmodified-loop-condition.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-unmodified-loop-condition",
    "codeList": [
      {
        "language": "javascript",
        "code": "while (node) {\n    doSomething(node);\n    node = node.parent;\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Defining ESLint Configuration Schema in JSON",
    "codeDescription": "This JSON schema defines various configuration options for ESLint, including indentation rules for different code constructs. It covers settings for switch cases, variable declarators, function declarations and expressions, and various types of expressions like member, call, array, and object expressions.",
    "codeLanguage": "json",
    "codeTokens": 877,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/formatters/index.md#2025-04-14_snippet_4",
    "pageTitle": "Formatters Reference for ESLint",
    "codeList": [
      {
        "language": "json",
        "code": "{\n    \"type\": \"object\",\n    \"properties\": {\n        \"SwitchCase\": {\n            \"type\": \"integer\",\n            \"minimum\": 0,\n            \"default\": 0\n        },\n        \"VariableDeclarator\": {\n            \"oneOf\": [\n                {\n                    \"oneOf\": [\n                        {\n                            \"type\": \"integer\",\n                            \"minimum\": 0\n                        },\n                        {\n                            \"enum\": [\n                                \"first\",\n                                \"off\"\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"var\": {\n                            \"oneOf\": [\n                                {\n                                    \"type\": \"integer\",\n                                    \"minimum\": 0\n                                },\n                                {\n                                    \"enum\": [\n                                        \"first\",\n                                        \"off\"\n                                    ]\n                                }\n                            ]\n                        },\n                        \"let\": {\n                            \"oneOf\": [\n                                {\n                                    \"type\": \"integer\",\n                                    \"minimum\": 0\n                                },\n                                {\n                                    \"enum\": [\n                                        \"first\",\n                                        \"off\"\n                                    ]\n                                }\n                            ]\n                        },\n                        \"const\": {\n                            \"oneOf\": [\n                                {\n                                    \"type\": \"integer\",\n                                    \"minimum\": 0\n                                },\n                                {\n                                    \"enum\": [\n                                        \"first\",\n                                        \"off\"\n                                    ]\n                                }\n                            ]\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            ]\n        },\n        \"outerIIFEBody\": {\n            \"oneOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 0\n                },\n                {\n                    \"enum\": [\n                        \"off\"\n                    ]\n                }\n            ]\n        },\n        \"MemberExpression\": {\n            \"oneOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 0\n                },\n                {\n                    \"enum\": [\n                        \"off\"\n                    ]\n                }\n            ]\n        },\n        \"FunctionDeclaration\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"parameters\": {\n                    \"oneOf\": [\n                        {\n                            \"type\": \"integer\",\n                            \"minimum\": 0\n                        },\n                        {\n                            \"enum\": [\n                                \"first\",\n                                \"off\"\n                            ]\n                        }\n                    ]\n                },\n                \"body\": {\n                    \"type\": \"integer\",\n                    \"minimum\": 0\n                }\n            },\n            \"additionalProperties\": false\n        },\n        \"FunctionExpression\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"parameters\": {\n                    \"oneOf\": [\n                        {\n                            \"type\": \"integer\",\n                            \"minimum\": 0\n                        },\n                        {\n                            \"enum\": [\n                                \"first\",\n                                \"off\"\n                            ]\n                        }\n                    ]\n                },\n                \"body\": {\n                    \"type\": \"integer\",\n                    \"minimum\": 0\n                }\n            },\n            \"additionalProperties\": false\n        },\n        \"StaticBlock\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"body\": {\n                    \"type\": \"integer\",\n                    \"minimum\": 0\n                }\n            },\n            \"additionalProperties\": false\n        },\n        \"CallExpression\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"arguments\": {\n                    \"oneOf\": [\n                        {\n                            \"type\": \"integer\",\n                            \"minimum\": 0\n                        },\n                        {\n                            \"enum\": [\n                                \"first\",\n                                \"off\"\n                            ]\n                        }\n                    ]\n                }\n            },\n            \"additionalProperties\": false\n        },\n        \"ArrayExpression\": {\n            \"oneOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 0\n                },\n                {\n                    \"enum\": [\n                        \"first\",\n                        \"off\"\n                    ]\n                }\n            ]\n        },\n        \"ObjectExpression\": {\n            \"oneOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 0\n                }"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using ignoreConstructors Option with object-shorthand Rule",
    "codeDescription": "Shows how to configure and use the ignoreConstructors option, which prevents the rule from reporting errors for constructor functions.",
    "codeLanguage": "json",
    "codeTokens": 64,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/object-shorthand.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Object Shorthand Rule Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n    \"object-shorthand\": [\"error\", \"always\", { \"ignoreConstructors\": true }]\n}"
      },
      {
        "language": "javascript",
        "code": "/*eslint object-shorthand: [\"error\", \"always\", { \"ignoreConstructors\": true }]*/\n\nconst foo = {\n    ConstructorFunction: function() {}\n};"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Disabling Specific Global Variables in Configuration",
    "codeDescription": "This snippet demonstrates how to disable specific global variables even when their environment is enabled. It enables ES6 environment but explicitly disables the Promise global.",
    "codeLanguage": "json",
    "codeTokens": 81,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options-deprecated.md#2025-04-14_snippet_10",
    "pageTitle": "Configure Language Options in ESLint (Deprecated)",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"env\": {\n\t\t\"es6\": true\n\t},\n\t\"globals\": {\n\t\t\"Promise\": \"off\"\n\t}\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Correct Alternatives to NaN in Switch Statements",
    "codeDescription": "Examples showing correct alternatives to using NaN in switch statements, using conditional checks with Number.isNaN instead.",
    "codeLanguage": "javascript",
    "codeTokens": 122,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/use-isnan.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Rule: use-isnan",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint use-isnan: [\"error\", {\"enforceForSwitchCase\": true}]*/\n\nif (Number.isNaN(foo)) {\n    bar();\n} else {\n    switch (foo) {\n        case 1:\n            baz();\n            break;\n        // ...\n    }\n}\n\nif (Number.isNaN(a)) {\n    bar();\n} else if (Number.isNaN(b)) {\n    baz();\n} // ..."
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Correct Property Update Pattern",
    "codeDescription": "Example of correct async property updates that avoid race conditions using temporary variables.",
    "codeLanguage": "javascript",
    "codeTokens": 75,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/require-atomic-updates.md#2025-04-14_snippet_6",
    "pageTitle": "ESLint Rule: require-atomic-updates",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function foo(obj) {\n    if (!obj.done) {\n        const tmp = await getSomething();\n        if (!obj.done) {\n            obj.something = tmp;\n        }\n    }\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Correct Array Callback Usage in JavaScript",
    "codeDescription": "These examples demonstrate correct usage of array callbacks with proper return statements. The ESLint rule 'array-callback-return' would not flag these as errors.",
    "codeLanguage": "JavaScript",
    "codeTokens": 134,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/array-callback-return.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: array-callback-return",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint array-callback-return: \"error\"*/\n\nconst indexMap = myArray.reduce(function(memo, item, index) {\n    memo[item] = index;\n    return memo;\n}, {});\n\nconst foo = Array.from(nodes, function(node) {\n    if (node.tagName === \"DIV\") {\n        return true;\n    }\n    return false;\n});\n\nconst bar = foo.map(node => node.getAttribute(\"id\"));"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Correct NaN Comparisons in JavaScript",
    "codeDescription": "Examples of correct code that properly uses isNaN() function to check for NaN values, which is the recommended approach according to the ESLint use-isnan rule.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/use-isnan.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: use-isnan",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint use-isnan: \"error\"*/\n\nif (isNaN(foo)) {\n    // ...\n}\n\nif (!isNaN(foo)) {\n    // ...\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "ESLint CLI Fix Option Reference",
    "codeDescription": "Reference to the ESLint CLI fix option used for automatically applying rule fixes",
    "codeLanguage": "markdown",
    "codeTokens": 47,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/core-concepts/index.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Core Concepts Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "[`--fix` command line option](../command-line-interface#--fix)"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Incorrect Usage of Symbol with New Operator in JavaScript",
    "codeDescription": "This example demonstrates the incorrect usage of Symbol with the new operator, which causes a TypeError exception. The rule is intended to prevent this type of error.",
    "codeLanguage": "js",
    "codeTokens": 57,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-symbol.md#2025-04-14_snippet_0",
    "pageTitle": "no-new-symbol ESLint Rule Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "var foo = new Symbol(\"foo\");"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Correct Code Examples with allowShortCircuit and allowTernary Options",
    "codeDescription": "Examples of code patterns that would be considered valid with both allowShortCircuit and allowTernary options enabled.",
    "codeLanguage": "javascript",
    "codeTokens": 85,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_9",
    "pageTitle": "ESLint Rule Documentation: no-unused-expressions",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true, \"allowTernary\": true }]*/\n\na ? b() || (c = d) : e()"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Demonstrating Correct Usage of camelcase Rule with 'properties: never' Option",
    "codeDescription": "Examples of code that comply with the camelcase rule using the { \"properties\": \"never\" } option.",
    "codeLanguage": "JavaScript",
    "codeTokens": 75,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint camelcase Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint camelcase: [\"error\", {properties: \"never\"}]*/\n\nconst obj = {\n    my_pref: 1\n};\n\nobj.foo_bar = \"baz\";"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Correct Usage with 'property' Option (JavaScript)",
    "codeDescription": "This snippet shows correct code examples when the 'dot-location' rule is set to the 'property' option. The dot is placed on the same line as the property.",
    "codeLanguage": "JavaScript",
    "codeTokens": 77,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/dot-location.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rule: dot-location",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint dot-location: [\"error\", \"property\"]*/\n\nvar foo = object\n.property;\nvar bar = object.property;"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Correct Usage of Trailing Commas with 'always-multiline' Option",
    "codeDescription": "These JavaScript snippets demonstrate correct usage of trailing commas in various scenarios when the 'comma-dangle' rule is set to 'always-multiline'.",
    "codeLanguage": "javascript",
    "codeTokens": 145,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_8",
    "pageTitle": "ESLint Rule: comma-dangle",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint comma-dangle: [\"error\", \"always-multiline\"]*/\n\nvar foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};\n\nvar foo = {bar: \"baz\", qux: \"quux\"};\nvar arr = [1,2];\n\nvar arr = [1,\n    2];\n\nvar arr = [\n    1,\n    2,\n];\n\nfoo({\n  bar: \"baz\",\n  qux: \"quux\",\n});"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Incorrect Examples for no-unmodified-loop-condition Rule in JavaScript",
    "codeDescription": "Examples of code that violates the no-unmodified-loop-condition rule, where variables in loop conditions are not modified within the loop body.",
    "codeLanguage": "javascript",
    "codeTokens": 112,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unmodified-loop-condition.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-unmodified-loop-condition",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-unmodified-loop-condition: \"error\"*/\n\nlet node = something;\n\nwhile (node) {\n    doSomething(node);\n}\nnode = other;\n\nfor (let j = 0; j < 5;) {\n    doSomething(j);\n}\n\nwhile (node !== root) {\n    doSomething(node);\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Demonstrating Incorrect Object Property Ordering in JavaScript",
    "codeDescription": "Examples showing incorrect property ordering in objects according to the sort-keys rule. This includes basic property ordering, case sensitivity issues, non-natural ordering, and computed properties with simple names.",
    "codeLanguage": "javascript",
    "codeTokens": 237,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint sort-keys Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint sort-keys: \"error\"*/\n\nconst obj1 = {a: 1, c: 3, b: 2};\nconst obj2 = {a: 1, \"c\": 3, b: 2};\n\n// Case-sensitive by default.\nconst obj3 = {a: 1, b: 2, C: 3};\n\n// Non-natural order by default.\nconst obj4 = {1: a, 2: c, 10: b};\n\n// This rule checks computed properties which have a simple name as well.\n// Simple names are names which are expressed by an Identifier node or a Literal node.\nconst S = Symbol(\"s\")\nconst obj5 = {a: 1, [\"c\"]: 3, b: 2};\nconst obj6 = {a: 1, [S]: 3, b: 2};"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Incorrect usage of 'this' in JavaScript strict mode",
    "codeDescription": "Examples of code that violate the 'no-invalid-this' rule in JavaScript strict mode. These snippets show various contexts where 'this' is used incorrectly, such as in non-method functions or callbacks.",
    "codeLanguage": "javascript",
    "codeTokens": 216,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-invalid-this.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-invalid-this",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-invalid-this: \"error\"*/\n\n\"use strict\";\n\n(function() {\n    this.a = 0;\n    baz(() => this);\n})();\n\nfunction foo() {\n    this.a = 0;\n    baz(() => this);\n}\n\nconst bar = function() {\n    this.a = 0;\n    baz(() => this);\n};\n\nfoo(function() {\n    this.a = 0;\n    baz(() => this);\n});\n\nconst obj = {\n    aaa: function() {\n        return function foo() {\n            // There is in a method `aaa`, but `foo` is not a method.\n            this.a = 0;\n            baz(() => this);\n        };\n    }\n};\n\nfoo.forEach(function() {\n    this.a = 0;\n    baz(() => this);\n});"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Autofixing JavaScript Files in ESLint Documentation in Shell",
    "codeDescription": "Command to automatically fix linting issues in JavaScript files in the ESLint documentation. This should be executed from the root folder of the project, not from the 'docs' folder.",
    "codeLanguage": "shell",
    "codeTokens": 62,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/README.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Documentation Setup Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "npm run lint:fix:docs:js"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Incorrect Usage of Promise Rejection in JavaScript",
    "codeDescription": "Examples of incorrect code that violate the 'prefer-promise-reject-errors' rule by rejecting Promises with non-Error values.",
    "codeLanguage": "JavaScript",
    "codeTokens": 104,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-promise-reject-errors.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: prefer-promise-reject-errors",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint prefer-promise-reject-errors: \"error\"*/\n\nPromise.reject(\"something bad happened\");\n\nPromise.reject(5);\n\nPromise.reject();\n\nnew Promise(function(resolve, reject) {\n  reject(\"something bad happened\");\n});\n\nnew Promise(function(resolve, reject) {\n  reject();\n});"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Configuring Parser Options in ESLint Configuration File",
    "codeDescription": "This example demonstrates how to configure ESLint parser options in a JSON configuration file. It specifies the latest ECMAScript version, module source type, and enables JSX syntax support.",
    "codeLanguage": "json",
    "codeTokens": 118,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/language-options-deprecated.md#2025-04-14_snippet_11",
    "pageTitle": "Configure Language Options in ESLint (Deprecated)",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"parserOptions\": {\n\t\t\"ecmaVersion\": \"latest\",\n\t\t\"sourceType\": \"module\",\n\t\t\"ecmaFeatures\": {\n\t\t\t\"jsx\": true\n\t\t}\n\t},\n\t\"rules\": {\n\t\t\"semi\": \"error\"\n\t}\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Rule Configuration",
    "codeDescription": "JSON configuration options for the no-mixed-operators rule including groups and precedence settings.",
    "codeLanguage": "json",
    "codeTokens": 139,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-mixed-operators.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint no-mixed-operators Rule Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n    \"no-mixed-operators\": [\n        \"error\",\n        {\n            \"groups\": [\n                [\"+\", \"-\", \"*\", \"/\", \"%\", \"**\"],\n                [\"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \">>>\"],\n                [\"==\", \"!=\", \"===\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n                [\"&&\", \"||\"],\n                [\"in\", \"instanceof\"]\n            ],\n            \"allowSamePrecedence\": true\n        }\n    ]\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Demonstrating TypeErrors with Optional Chaining in JavaScript",
    "codeDescription": "Examples showing how optional chaining can still lead to TypeErrors when the result is used in certain operations like the 'in' operator or destructuring.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-optional-chaining.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-unsafe-optional-chaining",
    "codeList": [
      {
        "language": "javascript",
        "code": "const obj = undefined;\n\n1 in obj?.foo;  // TypeError\nwith (obj?.foo);  // TypeError\nfor (bar of obj?.foo);  // TypeError\nbar instanceof obj?.foo;  // TypeError\nconst { bar } = obj?.foo;  // TypeError"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Correct Usage Examples for 'never' Option in ESLint yoda Rule",
    "codeDescription": "These examples show code that would be considered correct when the yoda rule is set to 'never', allowing standard condition ordering.",
    "codeLanguage": "JavaScript",
    "codeTokens": 98,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/yoda.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Rule: yoda",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint yoda: \"error\"*/\n\nif (5 & value) {\n    // ...\n}\n\nif (value === \"red\") {\n    // ...\n}\n\nif (value === `red`) {\n    // ...\n}\n\nif (`${value}` === `red`) {\n\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Unguarded for...in Loop in JavaScript",
    "codeDescription": "An example of incorrect usage where a for...in loop is used without filtering inherited properties. This can lead to unexpected behavior.",
    "codeLanguage": "JavaScript",
    "codeTokens": 57,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/guard-for-in.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: guard-for-in",
    "codeList": [
      {
        "language": "javascript",
        "code": "for (key in foo) {\n    doSomething(key);\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Incorrect Usage of Return Statements in Class Constructors (JavaScript)",
    "codeDescription": "This snippet demonstrates incorrect usage of return statements in class constructors, which is disallowed by the 'no-constructor-return' ESLint rule. It shows examples of returning values in constructors, which may lead to unexpected behavior.",
    "codeLanguage": "javascript",
    "codeTokens": 120,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-constructor-return.md#2025-04-14_snippet_0",
    "pageTitle": "no-constructor-return ESLint Rule",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-constructor-return: \"error\"*/\n\nclass A {\n    constructor(a) {\n        this.a = a;\n        return a;\n    }\n}\n\nclass B {\n    constructor(f) {\n        if (!f) {\n            return 'falsy';\n        }\n    }\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Incorrect Property Update Pattern",
    "codeDescription": "Example of incorrect async property updates that could lead to race conditions.",
    "codeLanguage": "javascript",
    "codeTokens": 59,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/require-atomic-updates.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Rule: require-atomic-updates",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function foo(obj) {\n    if (!obj.done) {\n        obj.something = await getSomething();\n    }\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Adding Descriptions to ESLint Configuration Comments in JavaScript",
    "codeDescription": "Demonstrates how to add descriptions to ESLint configuration comments to explain why a rule is being disabled or re-enabled.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_10",
    "pageTitle": "ESLint Rules Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint-disable-next-line no-console -- Here's a description about why this configuration is necessary.\nconsole.log(\"hello\");\n\n/* eslint-disable-next-line no-console --\n * Here's a very long description about why this configuration is necessary\n * along with some additional information\n **/\nconsole.log(\"hello\");"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "JSON Configuration for padding-line-between-statements Rule",
    "codeDescription": "This snippet shows how to configure the rule in an ESLint configuration file with multiple rules. Each rule object contains blankLine, prev, and next properties to define when blank lines are required.",
    "codeLanguage": "json",
    "codeTokens": 174,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/padding-line-between-statements.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint padding-line-between-statements Rule Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n    \"padding-line-between-statements\": [\n        \"error\",\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        { \"blankLine\": LINEBREAK_TYPE, \"prev\": STATEMENT_TYPE, \"next\": STATEMENT_TYPE },\n        ...\n    ]\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Basic Promise Executor Pattern in JavaScript",
    "codeDescription": "Demonstrates the correct pattern for creating a Promise with an executor function that handles asynchronous file reading. The executor uses callback functions to resolve or reject the Promise based on the operation's outcome.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-promise-executor-return.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint no-promise-executor-return Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const myPromise = new Promise(function executor(resolve, reject) {\n    readFile('foo.txt', function(err, result) {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(result);\n        }\n    });\n});"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Demonstrating Confusing Arrow Function Syntax in JavaScript",
    "codeDescription": "This snippet shows an example of arrow function syntax that could be confused with a comparison operator, illustrating the problem this ESLint rule addresses.",
    "codeLanguage": "JavaScript",
    "codeTokens": 61,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-confusing-arrow.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-confusing-arrow",
    "codeList": [
      {
        "language": "javascript",
        "code": "var x = a => 1 ? 2 : 3;"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Disabling ESLint Plugin Rules in JavaScript",
    "codeDescription": "Shows how to disable specific plugin rules using inline comments by combining the plugin name and rule name.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/rules.md#2025-04-14_snippet_9",
    "pageTitle": "ESLint Rules Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "foo(); // eslint-disable-line example/rule-name\nfoo(); /* eslint-disable-line example/rule-name */"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Promise Executor with Allowed Void Returns in JavaScript",
    "codeDescription": "Shows examples of Promise executors using void returns which are allowed when the allowVoid option is enabled. This configuration permits returning void expressions that call resolve or reject.",
    "codeLanguage": "javascript",
    "codeTokens": 179,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-promise-executor-return.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint no-promise-executor-return Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-promise-executor-return: [\"error\", { allowVoid: true }]*/\n\nnew Promise((resolve, reject) => {\n    if (someCondition) {\n        return void resolve(defaultResult);\n    }\n    getSomething((err, result) => {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(result);\n        }\n    });\n});\n\nnew Promise((resolve, reject) => void getSomething((err, data) => {\n    if (err) {\n        reject(err);\n    } else {\n        resolve(data);\n    }\n}));\n\nnew Promise(r => void r(1));"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Demonstrating void operator usage in JavaScript",
    "codeDescription": "This snippet shows various uses of the void operator, including getting a pure undefined value, minifying code, and using it with IIFEs.",
    "codeLanguage": "javascript",
    "codeTokens": 112,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-void.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-void",
    "codeList": [
      {
        "language": "javascript",
        "code": "// will always return undefined\n(function(){\n    return void 0;\n})();\n\n// will return 1 in ES3 and undefined in ES5+\n(function(){\n    undefined = 1;\n    return undefined;\n})();\n\n// will throw TypeError in ES5+\n(function(){\n    'use strict';\n    undefined = 1;\n})();"
      },
      {
        "language": "javascript",
        "code": "foo = void 0;\nfoo = undefined;"
      },
      {
        "language": "javascript",
        "code": "let foo = 1;\nvoid function(){ foo = 1; }() // will assign foo a value of 1\n+function(){ foo = 1; }() // same as above"
      },
      {
        "language": "javascript",
        "code": "function(){ foo = 1; }() // will throw SyntaxError"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Intentional Fallthrough with Comments",
    "codeDescription": "Shows examples of intentional fallthrough using appropriate comment patterns.",
    "codeLanguage": "javascript",
    "codeTokens": 153,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-fallthrough.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint no-fallthrough Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "switch(foo) {\n    case 1:\n        doSomething();\n        // falls through\n\n    case 2:\n        doSomethingElse();\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // fall through\n\n    case 2:\n        doSomethingElse();\n}\n\nswitch(foo) {\n    case 1:\n        doSomething();\n        // fallsthrough\n\n    case 2:\n        doSomethingElse();\n}\n\nswitch(foo) {\n    case 1: {\n        doSomething();\n        // falls through\n    }\n\n    case 2: {\n        doSomethingElse();\n    }\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Directly Referencing a Processor Object in ESLint Configuration",
    "codeDescription": "This snippet demonstrates how to reference a processor object directly in an ESLint configuration, rather than using the string format. This approach relies on the processor's own meta object for serialization.",
    "codeLanguage": "javascript",
    "codeTokens": 113,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-processors.md#2025-04-14_snippet_2",
    "pageTitle": "Creating Custom Processors in ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig } from \"eslint/config\";\nimport example from \"eslint-plugin-example\";\n\nexport default defineConfig([\n\t{\n\t\tfiles: [\"**/*.txt\"],\n\t\tprocessor: example.processors[\"processor-name\"],\n\t},\n\t// ... other configs\n]);"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Async Custom Formatter Implementation",
    "codeDescription": "Example of an async formatter function that processes results asynchronously",
    "codeLanguage": "javascript",
    "codeTokens": 55,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-formatters.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Custom Formatters Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "//my-awesome-formatter.js\nmodule.exports = async function (results) {\n\tconst formatted = await asyncTask();\n\treturn formatted;\n};"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Correct Usage Examples",
    "codeDescription": "Examples of code that comply with the prefer-destructuring rule when both array and object destructuring are enabled.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-destructuring.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint prefer-destructuring Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* eslint prefer-destructuring: \"error\" */\n\n// With `array` enabled\nconst [ foo ] = array;\nconst arr = array[someIndex];\n[bar.baz] = array;\n\n\n// With `object` enabled\nconst { baz } = object;\n\nconst obj = object.bar;\n\nlet bar;\n({ bar } = object);"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Ignoring Files Except Specific Ones at Any Level in ESLint",
    "codeDescription": "This configuration ignores all files in and under the build directory except for files named test.js at any level. It uses multiple patterns to achieve this complex ignore scenario.",
    "codeLanguage": "javascript",
    "codeTokens": 148,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore.md#2025-04-14_snippet_5",
    "pageTitle": "Configuring ESLint Ignore Files",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig, globalIgnores } from \"eslint/config\";\n\nexport default defineConfig([\n\tglobalIgnores([\n\t\t\"build/**/*\", // ignore all contents in and under `build/` directory but not the `build/` directory itself\n\t\t\"!build/**/*/\", // unignore all subdirectories\n\t\t\"!build/**/test.js\", // unignore `test.js` files\n\t]),\n]);"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Example JavaScript with Invalid Assignment",
    "codeDescription": "Sample JavaScript code that would trigger the custom rule, showing a const foo variable assigned a value other than 'bar'.",
    "codeLanguage": "javascript",
    "codeTokens": 51,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Custom Rule Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "// foo.js\n\nconst foo = \"baz123\";"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Using a Shareable ESLint Config in JSON",
    "codeDescription": "Demonstrates how to include a shareable ESLint configuration in a project's .eslintrc file using the 'extends' field. Shows both full module name and shortened syntax.",
    "codeLanguage": "json",
    "codeTokens": 68,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/shareable-configs-deprecated.md#2025-04-14_snippet_2",
    "pageTitle": "Creating and Sharing ESLint Configurations",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"extends\": \"eslint-config-myconfig\"\n}"
      },
      {
        "language": "json",
        "code": "{\n\t\"extends\": \"myconfig\"\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Incorrect Parameter Reassignment Examples in JavaScript",
    "codeDescription": "Examples showing incorrect usage of function parameter reassignment that will trigger the no-param-reassign rule error.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-param-reassign.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint no-param-reassign Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-param-reassign: \"error\"*/\n\nconst foo = function(bar) {\n    bar = 13;\n}\n\nconst foo1 = function(bar) {\n    bar++;\n}\n\nconst foo2 = function(bar) {\n    for (bar in baz) {}\n}\n\nconst foo3 = function(bar) {\n    for (bar of baz) {}\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Correct TypeScript Example for default-param-last Rule",
    "codeDescription": "This example shows correct usage of default parameters in a TypeScript function, where the default parameter is last, followed by an optional parameter, complying with the 'default-param-last' rule.",
    "codeLanguage": "typescript",
    "codeTokens": 78,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/default-param-last.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rule: default-param-last",
    "codeList": [
      {
        "language": "typescript",
        "code": "/* eslint default-param-last: [\"error\"] */\n\nfunction h(a = 0, b?: number) {}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Incorrect Examples with Default treatUndefinedAsUnspecified Option",
    "codeDescription": "Examples showing incorrect usage with the default treatUndefinedAsUnspecified option where returns are inconsistent.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/consistent-return.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Consistent Return Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint consistent-return: [\"error\", { \"treatUndefinedAsUnspecified\": false }]*/\n\nfunction foo(callback) {\n    if (callback) {\n        return void callback();\n    }\n    // no return statement\n}\n\nfunction bar(condition) {\n    if (condition) {\n        return undefined;\n    }\n    // no return statement\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Implementing parseForESLint Method with Parser Services",
    "codeDescription": "An example of a custom parser that implements the parseForESLint method, providing additional services to ESLint rules. This parser exposes a custom 'foo' service through context.sourceCode.parserServices.",
    "codeLanguage": "javascript",
    "codeTokens": 143,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-parsers.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Custom Parsers Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// awesome-custom-parser.js\nvar espree = require(\"espree\");\nfunction parseForESLint(code, options) {\n\treturn {\n\t\tast: espree.parse(code, options),\n\t\tservices: {\n\t\t\tfoo: function () {\n\t\t\t\tconsole.log(\"foo\");\n\t\t\t},\n\t\t},\n\t\tscopeManager: null,\n\t\tvisitorKeys: null,\n\t};\n}\n\nmodule.exports = { parseForESLint };"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Extending ESLint Configuration with Plugins in JSON",
    "codeDescription": "Example of extending 'eslint:recommended' and a React plugin configuration using JSON format.",
    "codeLanguage": "json",
    "codeTokens": 79,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_13",
    "pageTitle": "ESLint Configuration Files (Deprecated)",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"plugins\": [\"react\"],\n\t\"extends\": [\"eslint:recommended\", \"plugin:react/recommended\"],\n\t\"rules\": {\n\t\t\"react/no-set-state\": \"off\"\n\t}\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Correct Function Implementation Examples",
    "codeDescription": "Examples of properly documented empty functions that pass the rule check across different function types.",
    "codeLanguage": "javascript",
    "codeTokens": 185,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-function.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint no-empty-function Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-empty-function: \"error\"*/\n\nfunction foo() {\n    // do nothing.\n}\n\nconst baz = function() {\n    // any clear comments.\n};\n\nconst baz1 = () => {\n    bar();\n};\n\nfunction* foobar() {\n    // do nothing.\n}\n\nconst baz2 = function*() {\n    // do nothing.\n};\n\nconst obj = {\n    foo: function() {\n        // do nothing.\n    },\n\n    foo: function*() {\n        // do nothing.\n    },\n\n    foo() {\n        // do nothing.\n    },\n\n    *foo() {\n        // do nothing.\n    },\n\n    get foo() {\n        // do nothing.\n    },\n\n    set foo(value) {\n        // do nothing.\n    }\n};"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Configuring Custom Parser in eslintrc Format",
    "codeDescription": "Example of specifying a custom parser (Babel) in eslintrc format. The parser is referenced by string in the parser property.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// .eslintrc.js\n\nmodule.exports = {\n\t// ...other config\n\tparser: \"@babel/eslint-parser\",\n\t// ...other config\n};"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Demonstrating Variable Scope Issues with 'var' in JavaScript",
    "codeDescription": "This code snippet illustrates a common problem with using 'var', where variable scoping can lead to unintended overrides and potential bugs.",
    "codeLanguage": "javascript",
    "codeTokens": 128,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-var.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-var",
    "codeList": [
      {
        "language": "javascript",
        "code": "var count = people.length;\nvar enoughFood = count > sandwiches.length;\n\nif (enoughFood) {\n    var count = sandwiches.length; // accidentally overriding the count variable\n    console.log(\"We have \" + count + \" sandwiches for everyone. Plenty for all!\");\n}\n\n// our count variable is no longer accurate\nconsole.log(\"We have \" + count + \" people and \" + sandwiches.length + \" sandwiches!\");"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Configuring 'no-constant-condition' Rule for Loops in JavaScript",
    "codeDescription": "This snippet demonstrates how to configure the 'checkLoops' option of the 'no-constant-condition' rule. It shows examples of incorrect and correct usage based on different configuration values.",
    "codeLanguage": "javascript",
    "codeTokens": 98,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-constant-condition.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-constant-condition",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-constant-condition: [\"error\", { \"checkLoops\": \"all\" }]*/\n\nwhile (true) {\n    doSomething();\n};\n\nfor (;true;) {\n    doSomething();\n};"
      },
      {
        "language": "javascript",
        "code": "/*eslint no-constant-condition: [\"error\", { \"checkLoops\": true }]*/\n\nwhile (true) {\n    doSomething();\n};\n\ndo {\n    doSomething();\n} while (true)"
      },
      {
        "language": "javascript",
        "code": "/*eslint no-constant-condition: [\"error\", { \"checkLoops\": \"all\" }]*/\n\nwhile (a === b) {\n    doSomething();\n};"
      },
      {
        "language": "javascript",
        "code": "/*eslint no-constant-condition: [\"error\", { \"checkLoops\": true }]*/\n\nfor (let x = 0; x <= 10; x++) {\n    doSomething();\n};"
      },
      {
        "language": "javascript",
        "code": "/*eslint no-constant-condition: \"error\"*/\n\nwhile (true) {\n    doSomething();\n};"
      },
      {
        "language": "javascript",
        "code": "/*eslint no-constant-condition: [\"error\", { \"checkLoops\": \"none\" }]*/\n\nwhile (true) {\n    doSomething();\n    if (condition()) {\n        break;\n    }\n};\n\ndo {\n    doSomething();\n    if (condition()) {\n        break;\n    }\n} while (true)"
      },
      {
        "language": "javascript",
        "code": "/*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n\nwhile (true) {\n    doSomething();\n    if (condition()) {\n        break;\n    }\n};\n\nfor (;true;) {\n    doSomething();\n    if (condition()) {\n        break;\n    }\n};"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Specifying Parser in ESLint CLI",
    "codeDescription": "The --parser flag allows specifying a custom parser for ESLint instead of the default 'espree' parser. This example shows how to use TypeScript ESLint parser.",
    "codeLanguage": "bash",
    "codeTokens": 59,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Command Line Interface Reference",
    "codeList": [
      {
        "language": "bash",
        "code": "--parser @typescript-eslint/parser file.ts"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Advanced JSON Configuration with Custom Messages",
    "codeDescription": "Advanced configuration example demonstrating how to restrict syntax with custom error messages using object notation.",
    "codeLanguage": "json",
    "codeTokens": 118,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-restricted-syntax.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint no-restricted-syntax Rule Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n    \"rules\": {\n        \"no-restricted-syntax\": [\n            \"error\",\n            {\n                \"selector\": \"FunctionExpression\",\n                \"message\": \"Function expressions are not allowed.\"\n            },\n            {\n                \"selector\": \"CallExpression[callee.name='setTimeout'][arguments.length!=2]\",\n                \"message\": \"setTimeout must always be invoked with two arguments.\"\n            }\n        ]\n    }\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Correct Usage Examples",
    "codeDescription": "Examples of code that complies with the no-eval rule, showing proper alternatives",
    "codeLanguage": "javascript",
    "codeTokens": 134,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-eval.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint no-eval Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-eval: \"error\"*/\n\nconst obj = { x: \"foo\" },\n    key = \"x\",\n    value = obj[key];\n\nclass A {\n    foo() {\n        // This is a user-defined method.\n        this.eval(\"const a = 0\");\n    }\n\n    eval() {\n    }\n\n    static {\n        // This is a user-defined static method.\n        this.eval(\"const a = 0\");\n    }\n\n    static eval() {\n    }\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Demonstrating Correct Decimal Number Usage in JavaScript",
    "codeDescription": "Examples of correct JavaScript number formats that follow the rule's recommendations by including numbers both before and after decimal points. This makes the code clearer and prevents confusion with the dot operator.",
    "codeLanguage": "javascript",
    "codeTokens": 90,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-floating-decimal.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-floating-decimal",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-floating-decimal: \"error\"*/\n\nvar num = 0.5;\nvar num = 2.0;\nvar num = -0.7;"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Basic if-else-if Chain Example",
    "codeDescription": "Demonstrates a valid if-else-if chain structure where each condition is unique.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-else-if.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule Documentation - no-dupe-else-if",
    "codeList": [
      {
        "language": "javascript",
        "code": "if (a) {\n    foo();\n} else if (b) {\n    bar();\n} else if (c) {\n    baz();\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Object Constructor vs Object Literal Example",
    "codeDescription": "Comparison between using the Object constructor and the more concise object literal syntax.",
    "codeLanguage": "javascript",
    "codeTokens": 41,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-object.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint no-new-Object Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "var myObject = new Object();"
      },
      {
        "language": "javascript",
        "code": "var myObject = {};"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Correct Usage with Smart Option",
    "codeDescription": "Examples of code that complies with the eqeqeq rule when configured with the \"smart\" option.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/eqeqeq.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint eqeqeq Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint eqeqeq: [\"error\", \"smart\"]*/\n\ntypeof foo == 'undefined'\n'hello' != 'world'\n0 == 0\ntrue == true\nfoo == null"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Demonstrating Incorrect Use of Continue Statement in JavaScript",
    "codeDescription": "This snippet shows an example of code that violates the no-continue rule by using a continue statement in a for loop. The rule suggests using structured control flow statements like if instead.",
    "codeLanguage": "javascript",
    "codeTokens": 97,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-continue.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-continue",
    "codeList": [
      {
        "language": "javascript",
        "code": "let sum = 0,\n    i;\n\nfor(i = 0; i < 10; i++) {\n    if(i >= 5) {\n        continue;\n    }\n\n    sum += i;\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Incorrect Usage of return await in JavaScript",
    "codeDescription": "Example showing incorrect usage of return await that the rule will flag as an error. This pattern creates an unnecessary microtask and is generally discouraged.",
    "codeLanguage": "javascript",
    "codeTokens": 69,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-return-await.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule Documentation - no-return-await",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-return-await: \"error\"*/\n\nasync function foo() {\n    return await bar();\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Defining Package.json Script Name Grammar in ABNF",
    "codeDescription": "Formal grammar specification in ABNF notation defining the allowed structure and components of npm script names. It includes definitions for lifecycle scripts, main targets, options, and watch modifiers.",
    "codeLanguage": "abnf",
    "codeTokens": 197,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/contribute/package-json-conventions.md#2025-04-14_snippet_0",
    "pageTitle": "Package.json Script Naming Conventions for ESLint",
    "codeList": [
      {
        "language": "abnf",
        "code": "name         = life-cycle / main target? option* \":watch\"?\nlife-cycle   = \"prepare\" / \"preinstall\" / \"install\" / \"postinstall\" / \"prepublish\" / \"preprepare\" / \"prepare\" / \"postprepare\" / \"prepack\" / \"postpack\" / \"prepublishOnly\"\nmain         = \"build\" / \"lint\" \":fix\"? / \"release\" / \"start\" / \"test\" / \"fetch\"\ntarget       = \":\" word (\"-\" word)* / extension (\"+\" extension)*\noption       = \":\" word (\"-\" word)*\nword         = ALPHA +\nextension    = ( ALPHA / DIGIT )+"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Updated ESLint Config for Published Plugin",
    "codeDescription": "Modified ESLint configuration to use the published plugin from npm instead of a local version.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_17",
    "pageTitle": "ESLint Custom Rule Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\n\"use strict\";\n\n// Import the plugin downloaded from npm\nconst eslintPluginExample = require(\"eslint-plugin-example\");\n\n// ... rest of configuration"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Incorrect typeof Comparisons in JavaScript",
    "codeDescription": "Examples of incorrect code that violate the valid-typeof rule due to typos in string literals being compared with typeof results.",
    "codeLanguage": "javascript",
    "codeTokens": 85,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/valid-typeof.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint valid-typeof Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint valid-typeof: \"error\"*/\n\ntypeof foo === \"strnig\"\ntypeof foo == \"undefimed\"\ntypeof bar != \"nunber\"\ntypeof bar !== \"fucntion\""
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Call Expression Indentation in JavaScript",
    "codeDescription": "Shows proper indentation for function call arguments with CallExpression configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_16",
    "pageTitle": "ESLint Rule: indent",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint indent: [\"error\", 2, { \"CallExpression\": {\"arguments\": 1} }]*/\n\nfoo(bar,\n  baz,\n  qux\n);"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Demonstrating Trailing Commas in JavaScript Objects",
    "codeDescription": "This snippet shows an example of a JavaScript object with trailing commas, which is valid in ECMAScript 5 and later but can cause issues in older versions of Internet Explorer.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: comma-dangle",
    "codeList": [
      {
        "language": "javascript",
        "code": "var foo = {\n    bar: \"baz\",\n    qux: \"quux\",\n};"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Configuration Options for no-shadow Rule",
    "codeDescription": "JSON configuration showing the available options for the no-shadow rule including builtinGlobals, hoist, allow, and ignoreOnInitialization settings.",
    "codeLanguage": "json",
    "codeTokens": 79,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-shadow",
    "codeList": [
      {
        "language": "json",
        "code": "{\n    \"no-shadow\": [\"error\", { \"builtinGlobals\": false, \"hoist\": \"functions\", \"allow\": [], \"ignoreOnInitialization\": false }]\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Examples of Correct Setter Implementations in JavaScript",
    "codeDescription": "These examples demonstrate proper setter implementations that comply with the 'no-setter-return' rule. They show how to write setters in object literals, classes, and property descriptors without returning values or using return only for control flow.",
    "codeLanguage": "JavaScript",
    "codeTokens": 198,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-setter-return.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-setter-return",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "/*eslint no-setter-return: \"error\"*/\n\nconst foo = {\n    set a(value) {\n        this.val = value;\n    }\n};\n\nclass Foo {\n    set a(value) {\n        this.val = value * 2;\n    }\n}\n\nconst Bar = class {\n    static set a(value) {\n        if (value < 0) {\n            this.val = 0;\n            return;\n        }\n        this.val = value;\n    }\n};\n\nObject.defineProperty(foo, \"bar\", {\n    set(value) {\n        if (value < 0) {\n            throw new Error(\"Negative value.\");\n        }\n        this.val = value;\n    }\n});"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Creating Functions with the Function Constructor in JavaScript",
    "codeDescription": "Examples of creating functions using the Function constructor, which is discouraged due to debugging difficulty and security concerns with CSP directives.",
    "codeLanguage": "javascript",
    "codeTokens": 134,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-func.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-new-func",
    "codeList": [
      {
        "language": "javascript",
        "code": "const a = new Function(\"a\", \"b\", \"return a + b\");\nconst b = Function(\"a\", \"b\", \"return a + b\");\nconst c = Function.call(null, \"a\", \"b\", \"return a + b\");\nconst d = Function.apply(null, [\"a\", \"b\", \"return a + b\"]);\nconst x = Function.bind(null, \"a\", \"b\", \"return a + b\")();"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Updating Shorthand Property Node Comparison in JavaScript",
    "codeDescription": "This snippet demonstrates how to update code that previously compared key and value nodes of shorthand properties. In ESLint v8.0.0, direct comparison with === no longer works, and alternative methods are provided.",
    "codeLanguage": "javascript",
    "codeTokens": 101,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-8.0.0.md#2025-04-14_snippet_7",
    "pageTitle": "ESLint v8.0.0 Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// true in ESLint v7.x, false in ESLint v8.0.0\nif (propertyNode.key === propertyNode.value) {\n\t// do something\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Demonstrating Incorrect Usage of Variables in JavaScript",
    "codeDescription": "This snippet shows examples of code that violate the no-unused-vars rule, including unused global variables, write-only variables, and unused function parameters.",
    "codeLanguage": "javascript",
    "codeTokens": 223,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-vars.md#2025-04-14_snippet_0",
    "pageTitle": "no-unused-vars Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-unused-vars: \"error\"*/\n/*global some_unused_var*/\n\n// It checks variables you have defined as global\nsome_unused_var = 42;\n\nlet x;\n\n// Write-only variables are not considered as used.\nlet y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nlet z = 0;\nz = z + 1;\n\n// By default, unused arguments cause warnings.\n(function(foo) {\n    return 5;\n})();\n\n// Unused recursive functions also cause warnings.\nfunction fact(n) {\n    if (n < 2) return 1;\n    return n * fact(n - 1);\n}\n\n// When a function definition destructures an array, unused entries from the array also cause warnings.\nfunction getY([x, y]) {\n    return y;\n}\ngetY([\"a\", \"b\"]);"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Correct Usage Examples for no-use-before-define Rule in JavaScript",
    "codeDescription": "This snippet shows correct usage patterns where identifiers are properly declared before use, adhering to the no-use-before-define rule.",
    "codeLanguage": "JavaScript",
    "codeTokens": 180,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-use-before-define.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-use-before-define",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "/*eslint no-use-before-define: \"error\"*/\n\nvar a;\na = 10;\nalert(a);\n\nfunction f() {}\nf(1);\n\nvar b = 1;\nfunction g() {\n    return b;\n}\n\n{\n    let c;\n    c++;\n}\n\n{\n    class C {\n        static x = C;\n    }\n}\n\n{\n    const C = class C {\n        static x = C;\n    }\n}\n\n{\n    const C = class {\n        x = C;\n    }\n}\n\n{\n    const C = class C {\n        static {\n            C.x = \"foo\";\n        }\n    }\n}\n\nconst foo = 1;\nexport { foo };"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Correct Async Update Patterns",
    "codeDescription": "Examples of safe code patterns that properly handle async updates without race conditions.",
    "codeLanguage": "javascript",
    "codeTokens": 146,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/require-atomic-updates.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rule: require-atomic-updates",
    "codeList": [
      {
        "language": "javascript",
        "code": "let result;\n\nasync function foobar() {\n    result = await something + result;\n}\n\nasync function baz() {\n    const tmp = doSomething(await somethingElse);\n    result += tmp;\n}\n\nasync function qux() {\n    if (!result) {\n        const tmp = await initialize();\n        if (!result) {\n            result = tmp;\n        }\n    }\n}\n\nasync function quux() {\n    let localVariable = 0;\n    localVariable += await something;\n}\n\nfunction* generator() {\n    result = (yield) + result;\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Incorrect Usage of 'let' for Constants in JavaScript",
    "codeDescription": "Examples of code that violate the 'prefer-const' rule by using 'let' for variables that are never reassigned after initialization.",
    "codeLanguage": "javascript",
    "codeTokens": 187,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-const.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: prefer-const",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint prefer-const: \"error\"*/\n\n// it's initialized and never reassigned.\nlet a = 3;\nconsole.log(a);\n\nlet b;\nb = 0;\nconsole.log(b);\n\nclass C {\n    static {\n        let a;\n        a = 0;\n        console.log(a);\n    }\n}\n\n// `i` is redefined (not reassigned) on each loop step.\nfor (let i in [1, 2, 3]) {\n    console.log(i);\n}\n\n// `a` is redefined (not reassigned) on each loop step.\nfor (let a of [1, 2, 3]) {\n    console.log(a);\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Demonstrating multi-code point character issues in RegExp character classes",
    "codeDescription": "Examples showing how RegExp character classes incorrectly handle multi-code point characters, causing the match to fail even when it appears like it should match.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-misleading-character-class.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule Documentation: no-misleading-character-class",
    "codeList": [
      {
        "language": "javascript",
        "code": "/^[Á]$/u.test(\"Á\"); //→ false\n/^[❇️]$/u.test(\"❇️\"); //→ false"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Demonstrating Incorrect Usage of Duplicate Imports in JavaScript",
    "codeDescription": "This snippet shows an example of incorrect code that violates the no-duplicate-imports rule. It imports from the same module 'module' twice, which can be combined into a single import statement.",
    "codeLanguage": "javascript",
    "codeTokens": 83,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-duplicate-imports.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-duplicate-imports",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { merge } from 'module';\nimport something from 'another-module';\nimport { find } from 'module';"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Additional Correct Usage Examples for 'no-undef-init' Rule",
    "codeDescription": "This snippet shows additional cases where initializing to undefined is allowed, including const declarations, destructuring, function parameters, and class fields.",
    "codeLanguage": "JavaScript",
    "codeTokens": 97,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undef-init.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rule: no-undef-init",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-undef-init: \"error\"*/\n\nconst foo = undefined;\n\nlet { bar = undefined } = baz;\n\n[quux = undefined] = quuux;\n\n(foo = undefined) => {};\n\nclass Foo {\n    bar = undefined;\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Configuring Global Ignores in ESLint",
    "codeDescription": "This snippet demonstrates how to use the globalIgnores function to specify files or directories to be ignored by ESLint. It ignores all files in the .config directory.",
    "codeLanguage": "javascript",
    "codeTokens": 90,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore.md#2025-04-14_snippet_0",
    "pageTitle": "Configuring ESLint Ignore Files",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig, globalIgnores } from \"eslint/config\";\n\nexport default defineConfig([globalIgnores([\".config/*\"]));"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Demonstrating incorrect variable redeclaration in JavaScript with ESLint no-redeclare rule",
    "codeDescription": "This example shows JavaScript code that violates the no-redeclare rule by redeclaring variables using 'var' in the same scope, which the rule is designed to prevent.",
    "codeLanguage": "JavaScript",
    "codeTokens": 117,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-redeclare.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-redeclare",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "/*eslint no-redeclare: \"error\"*/\n\nvar a = 3;\nvar a = 10;\n\nclass C {\n    foo() {\n        var b = 3;\n        var b = 10;\n    }\n\n    static {\n        var c = 3;\n        var c = 10;\n    }\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Configuring VS Code Settings for ESLint Flat Config",
    "codeDescription": "Settings required in VS Code to enable support for ESLint's flat configuration system in versions of vscode-eslint prior to v3.0.10.",
    "codeLanguage": "json",
    "codeTokens": 73,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/migration-guide.md#2025-04-14_snippet_20",
    "pageTitle": "ESLint Configuration Migration Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t// required in vscode-eslint < v3.0.10 only\n\t\"eslint.experimental.useFlatConfig\": true\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Correct Switch Statement Patterns with default-case-last Rule",
    "codeDescription": "Examples showing correct placement of default clauses in switch statements that comply with the default-case-last rule.",
    "codeLanguage": "javascript",
    "codeTokens": 180,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/default-case-last.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint default-case-last Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint default-case-last: \"error\"*/\n\nswitch (foo) {\n    case \"a\":\n        baz();\n        break;\n    default:\n        bar();\n        break;\n}\n\nswitch (foo) {\n    case 1:\n        bar();\n        break;\n    case 2:\n        quux();\n        break;\n    default:\n        baz();\n        break;\n}\n\nswitch (foo) {\n    case \"x\":\n        bar();\n        break;\n    case \"y\":\n    default:\n        baz();\n        break;\n}\n\nswitch (foo) {\n    case -1:\n        bar();\n        break;\n}\n\nif (foo !== 0) {\n    doSomethingIfNotZero();\n}\ndoSomethingAnyway();"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Configuring Feature Flags in VS Code Editor",
    "codeDescription": "Shows how to enable ESLint feature flags in VS Code through the eslint.options setting in settings.json. This configuration applies to ESLint when linting files within the editor.",
    "codeLanguage": "json",
    "codeTokens": 71,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/pages/flags.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Feature Flags Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"eslint.options\": { \"flags\": [\"flag_one\", \"flag_two\"] }\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Testing Rule Suggestions with MessageId",
    "codeDescription": "Example showing how to test rule suggestions using messageId and data properties instead of a static description, useful for rules that use parameterized messages.",
    "codeLanguage": "javascript",
    "codeTokens": 134,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_29",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "ruleTester.run(\"my-rule-for-no-foo\", rule, {\n\tvalid: [],\n\tinvalid: [\n\t\t{\n\t\t\tcode: \"var foo;\",\n\t\t\terrors: [\n\t\t\t\t{\n\t\t\t\t\tsuggestions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmessageId: \"renameFoo\",\n\t\t\t\t\t\t\tdata: { newName: \"bar\" },\n\t\t\t\t\t\t\toutput: \"var bar;\",\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Demonstrating Incorrect Usage of 'with' Statement in JavaScript",
    "codeDescription": "This code snippet shows an example of incorrect usage of the 'with' statement, which is disallowed by the 'no-with' ESLint rule. It illustrates how 'with' can make it unclear whether a variable is a member of the object or not.",
    "codeLanguage": "JavaScript",
    "codeTokens": 106,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-with.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-with",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "/*eslint no-with: \"error\"*/\n\nwith (point) {\n    r = Math.sqrt(x * x + y * y); // is r a member of point?\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Results Output Handler",
    "codeDescription": "Function to process and display ESLint results, counting errors and warnings.",
    "codeLanguage": "javascript",
    "codeTokens": 121,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/integration-tutorial.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Node.js API Integration Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "function outputLintingResults(results) {\n\t// Identify the number of problems found\n\tconst problems = results.reduce(\n\t\t(acc, result) => acc + result.errorCount + result.warningCount,\n\t\t0,\n\t);\n\n\tif (problems > 0) {\n\t\tconsole.log(\"Linting errors found!\");\n\t\tconsole.log(results);\n\t} else {\n\t\tconsole.log(\"No linting errors found.\");\n\t}\n\treturn results;\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Comparing ES5 and ES6 Object Syntax in JavaScript",
    "codeDescription": "Shows the difference between ES5 and ES6 syntax for defining object properties and methods, demonstrating the more concise form available in ES6.",
    "codeLanguage": "javascript",
    "codeTokens": 89,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/object-shorthand.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Object Shorthand Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// properties\nconst foo = {\n    x: x,\n    y: y,\n    z: z,\n};\n\n// methods\nconst bar = {\n    a: function() {},\n    b: function() {}\n};"
      },
      {
        "language": "javascript",
        "code": "// properties\nconst foo = {x, y, z};\n\n// methods\nconst bar = {\n    a() {},\n    b() {}\n};"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Demonstrating Additional Correct Usage with 'ignoreDestructuring: true' Option",
    "codeDescription": "Examples of additional code that comply with the camelcase rule using the { \"ignoreDestructuring\": true } option.",
    "codeLanguage": "JavaScript",
    "codeTokens": 83,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/camelcase.md#2025-04-14_snippet_7",
    "pageTitle": "ESLint camelcase Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint camelcase: [\"error\", {ignoreDestructuring: true}]*/\n\nconst { some_property, ...rest } = obj;\n// do something with 'rest', nothing with 'some_property'"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Specifying Ignore Path in ESLint CLI",
    "codeDescription": "The --ignore-path flag specifies a custom file to use instead of the default .eslintignore. This option is only supported in eslintrc mode. Can also use .gitignore patterns.",
    "codeLanguage": "bash",
    "codeTokens": 66,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_11",
    "pageTitle": "ESLint Command Line Interface Reference",
    "codeList": [
      {
        "language": "bash",
        "code": "--ignore-path tmp/.eslintignore file.js"
      },
      {
        "language": "bash",
        "code": "--ignore-path .gitignore file.js"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Correct Usage with Parentheses",
    "codeDescription": "Shows how to properly use new with a required module when needed by using parentheses.",
    "codeLanguage": "javascript",
    "codeTokens": 47,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-new-require.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-new-require",
    "codeList": [
      {
        "language": "javascript",
        "code": "var appHeader = new (require('app-header'));"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Correct Usage of throw Statements in JavaScript",
    "codeDescription": "Examples of code that comply with the no-throw-literal rule by throwing Error objects or variables that contain Error objects.",
    "codeLanguage": "javascript",
    "codeTokens": 98,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-throw-literal.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-throw-literal",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-throw-literal: \"error\"*/\n\nthrow new Error();\n\nthrow new Error(\"error\");\n\nconst e = new Error(\"error\");\nthrow e;\n\ntry {\n    throw new Error(\"error\");\n} catch (e) {\n    throw e;\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Incorrect Usage of Optional Chaining in JavaScript",
    "codeDescription": "Examples of code patterns that would be flagged by the no-unsafe-optional-chaining rule because they may lead to runtime errors.",
    "codeLanguage": "javascript",
    "codeTokens": 244,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-optional-chaining.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-unsafe-optional-chaining",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-unsafe-optional-chaining: \"error\"*/\n\n(obj?.foo)();\n\n(obj?.foo).bar;\n\n(foo?.()).bar;\n\n(foo?.()).bar();\n\n(obj?.foo ?? obj?.bar)();\n\n(foo || obj?.foo)();\n\n(obj?.foo && foo)();\n\n(foo ? obj?.foo : bar)();\n\n(foo, obj?.bar).baz;\n\n(obj?.foo)`template`;\n\nnew (obj?.foo)();\n\n[...obj?.foo];\n\nbar(...obj?.foo);\n\n1 in obj?.foo;\n\nbar instanceof obj?.foo;\n\nfor (bar of obj?.foo);\n\nconst { bar } = obj?.foo;\n\n[{ bar } = obj?.foo] = [];\n\nwith (obj?.foo);\n\nclass A extends obj?.foo {}\n\nconst a = class A extends obj?.foo {};\n\nasync function foo () {\n    const { bar } = await obj?.foo;\n   (await obj?.foo)();\n   (await obj?.foo).bar;\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Correct Usage Without Synchronous Methods in JavaScript",
    "codeDescription": "Examples of code that complies with the no-sync rule. The code shows valid patterns that don't use Node.js synchronous methods ending with 'Sync'.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-sync.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint no-sync Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-sync: \"error\"*/\n\nobj.sync();\n\nasync(function() {\n    // ...\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Rebasing onto Upstream ESLint Branch",
    "codeDescription": "Commands to fetch and rebase your branch onto the latest upstream ESLint code before submitting a pull request, ensuring your changes work with the latest code.",
    "codeLanguage": "shell",
    "codeTokens": 58,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/contribute/pull-requests.md#2025-04-14_snippet_4",
    "pageTitle": "Submitting Pull Requests to ESLint",
    "codeList": [
      {
        "language": "shell",
        "code": "git fetch upstream\ngit rebase upstream/main"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "ESLint Configuration for Enforcing setTimeout Parameter Count",
    "codeDescription": "JSON configuration for the no-restricted-syntax rule that enforces setTimeout calls to have exactly two arguments.",
    "codeLanguage": "json",
    "codeTokens": 79,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/selectors.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Selectors Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"rules\": {\n\t\t\"no-restricted-syntax\": [\n\t\t\t\"error\",\n\t\t\t\"CallExpression[callee.name='setTimeout'][arguments.length!=2]\"\n\t\t]\n\t}\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Demonstrating Correct Alternatives to undefined in JavaScript",
    "codeDescription": "Examples of code that comply with the no-undefined rule, showing proper alternatives such as using void 0, checking types with typeof, and using different variable names.",
    "codeLanguage": "javascript",
    "codeTokens": 103,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-undefined.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-undefined",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-undefined: \"error\"*/\n\nconst foo = void 0;\n\nconst Undefined = \"foo\";\n\nif (typeof foo === \"undefined\") {\n    // ...\n}\n\nglobal.undefined = \"foo\";\n\nbar(void 0, \"lorem\");"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Demonstrating Incorrect Function Declaration After Assignment in JavaScript",
    "codeDescription": "This snippet shows an example of code that violates the no-func-assign rule by declaring a function after it has been assigned, which is caught by ESLint but not by JSHint.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-func-assign.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-func-assign",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-func-assign: \"error\"*/\n\nfoo = bar;\nfunction foo() {}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Basic Promise Executor Example",
    "codeDescription": "Shows the correct way to create a Promise with a synchronous executor function that handles file reading.",
    "codeLanguage": "javascript",
    "codeTokens": 88,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-async-promise-executor.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-async-promise-executor",
    "codeList": [
      {
        "language": "javascript",
        "code": "const result = new Promise(function executor(resolve, reject) {\n  readFile('foo.txt', function(err, result) {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  });\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Correct comparison with zero in JavaScript",
    "codeDescription": "This snippet shows a correct way to compare a value with zero. Using x === 0 avoids the issue of distinguishing between +0 and -0.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-compare-neg-zero.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-compare-neg-zero",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* eslint no-compare-neg-zero: \"error\" */\n\nif (x === 0) {\n    // doSomething()...\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Correct JSX Examples with enforceForJSX Option",
    "codeDescription": "Examples of JSX expressions that would be considered valid with the enforceForJSX option enabled.",
    "codeLanguage": "jsx",
    "codeTokens": 77,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_13",
    "pageTitle": "ESLint Rule Documentation: no-unused-expressions",
    "codeList": [
      {
        "language": "jsx",
        "code": "/*eslint no-unused-expressions: [\"error\", { \"enforceForJSX\": true }]*/\n\nconst myComponentPartial = <MyComponent />;\n\nconst myFragment = <></>;"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Basic Console Usage Examples",
    "codeDescription": "Examples of console methods that would be flagged by the rule",
    "codeLanguage": "javascript",
    "codeTokens": 45,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-console.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint no-console Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "console.log(\"Made it here.\");\nconsole.error(\"That shouldn't have happened.\");"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Advanced Incorrect Examples with Logical Operators",
    "codeDescription": "Examples of incorrect if-else-if chains with complex logical expressions that result in unreachable branches.",
    "codeLanguage": "javascript",
    "codeTokens": 215,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-else-if.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rule Documentation - no-dupe-else-if",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-dupe-else-if: \"error\"*/\n\nif (a || b) {\n    foo();\n} else if (a) {\n    bar();\n}\n\nif (a) {\n    foo();\n} else if (b) {\n    bar();\n} else if (a || b) {\n    baz();\n}\n\nif (a) {\n    foo();\n} else if (a && b) {\n    bar();\n}\n\nif (a && b) {\n    foo();\n} else if (a && b && c) {\n    bar();\n}\n\nif (a || b) {\n    foo();\n} else if (b && c) {\n    bar();\n}\n\nif (a) {\n    foo();\n} else if (b && c) {\n    bar();\n} else if (d && (c && e && b || a)) {\n    baz();\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Specifying ESLint Processor from Plugin",
    "codeDescription": "This snippet shows how to specify a processor from an ESLint plugin. It configures the markdown processor for Markdown files and sets up additional configurations for JavaScript code blocks within Markdown files.",
    "codeLanguage": "JavaScript",
    "codeTokens": 195,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/plugins.md#2025-04-14_snippet_4",
    "pageTitle": "Configuring ESLint Plugins in Flat Config Format",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport markdown from \"@eslint/markdown\";\nimport { defineConfig } from \"eslint/config\";\n\nexport default defineConfig([\n\t// applies to all JavaScript files\n\t{\n\t\trules: {\n\t\t\tstrict: \"error\",\n\t\t},\n\t},\n\n\t// applies to Markdown files\n\t{\n\t\tfiles: [\"**/*.md\"],\n\t\tplugins: {\n\t\t\tmarkdown,\n\t\t},\n\t\tprocessor: \"markdown/markdown\",\n\t},\n\n\t// applies only to JavaScript blocks inside of Markdown files\n\t{\n\t\tfiles: [\"**/*.md/*.js\"],\n\t\trules: {\n\t\t\tstrict: \"off\",\n\t\t},\n\t},\n]);"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Demonstrating Unexpected Results of Chained Assignments in JavaScript",
    "codeDescription": "This snippet shows how chaining assignments can lead to unexpected scoping issues and potential bugs. It illustrates why the 'no-multi-assign' rule is useful.",
    "codeLanguage": "JavaScript",
    "codeTokens": 117,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-multi-assign.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-multi-assign",
    "codeList": [
      {
        "language": "javascript",
        "code": "(function() {\n    const foo = bar = 0; // Did you mean `foo = bar == 0`?\n    bar = 1;             // This will not fail since `bar` is not constant.\n})();\nconsole.log(bar);        // This will output 1 since `bar` is not scoped."
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Converting a Method to Static",
    "codeDescription": "Shows how to convert the 'sayHi' method to a static method since it doesn't use 'this'. Note that the method is now called directly on the class, not on an instance.",
    "codeLanguage": "javascript",
    "codeTokens": 113,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_1",
    "pageTitle": "Understanding the class-methods-use-this ESLint Rule",
    "codeList": [
      {
        "language": "javascript",
        "code": "class A {\n    constructor() {\n        this.a = \"hi\";\n    }\n\n    print() {\n        console.log(this.a);\n    }\n\n    static sayHi() {\n        console.log(\"hi\");\n    }\n}\n\nA.sayHi(); // => \"hi\""
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Incorrect Code Examples with Default Options",
    "codeDescription": "Examples of code that would trigger the no-irregular-whitespace rule with the default settings. These examples demonstrate various functions containing irregular whitespace characters in different positions.",
    "codeLanguage": "javascript",
    "codeTokens": 239,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-irregular-whitespace.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-irregular-whitespace",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-irregular-whitespace: \"error\"*/\n\nconst thing = function() /*<NBSP>*/{\n    return 'test';\n}\n\nconst foo = function( /*<NBSP>*/){\n    return 'test';\n}\n\nconst bar = function /*<NBSP>*/(){\n    return 'test';\n}\n\nconst baz = function /*<Ogham Space Mark>*/(){\n    return 'test';\n}\n\nconst qux = function() {\n    return 'test'; /*<ENSP>*/\n}\n\nconst quux = function() {\n    return 'test'; /*<NBSP>*/\n}\n\nconst item = function() {\n    // Description <NBSP>: some descriptive text\n}\n\n/*\nDescription <NBSP>: some descriptive text\n*/\n\nconst func = function() {\n    return / <NBSP>regexp/;\n}\n\nconst myFunc = function() {\n    return `template <NBSP>string`;\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Defining ReplacedByInfo Type for ESLint Rule Replacement",
    "codeDescription": "The ReplacedByInfo type describes a single possible replacement for a deprecated rule. It includes optional properties for message, URL, plugin, and rule specifications.",
    "codeLanguage": "markdown",
    "codeTokens": 194,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/rule-deprecation.md#2025-04-14_snippet_1",
    "pageTitle": "Rule Deprecation in ESLint",
    "codeList": [
      {
        "language": "markdown",
        "code": "-   `message` (`string`)<br>\n    A general message about this rule replacement, e.g.\n-   `url` (`string`)<br>\n    An URL with more information about this rule replacement.\n-   `plugin` (`ExternalSpecifier`)<br>\n    Specifies which plugin has the replacement rule.\n    The name should be the package name and should be \"eslint\" if the replacement is an ESLint core rule.\n    This property should be omitted if the replacement is in the same plugin.\n-   `rule` (`ExternalSpecifier`)<br>\n    Specifies the replacement rule.\n    May be omitted if the plugin only contains a single rule or has the same name as the rule."
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Incorrect Code Examples for no-self-assign Rule in JavaScript",
    "codeDescription": "Examples of code that would be flagged as incorrect by the no-self-assign rule, including variable assignments, array destructuring, and logical assignments where a variable is assigned to itself.",
    "codeLanguage": "javascript",
    "codeTokens": 118,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-self-assign.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-self-assign",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-self-assign: \"error\"*/\n\nfoo = foo;\n\n[a, b] = [a, b];\n\n[a, ...b] = [x, ...b];\n\n({a, b} = {a, x});\n\nfoo &&= foo;\nfoo ||= foo;\nfoo ??= foo;"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Marking Code Blocks as Correct or Incorrect in Markdown",
    "codeDescription": "Shows the markdown syntax for wrapping code blocks in containers to indicate if they represent correct or incorrect usage. The example demonstrates how to properly format the containers with spacing around the code blocks.",
    "codeLanguage": "text",
    "codeTokens": 102,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/library/code-blocks.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Documentation: Marking Correct and Incorrect Code Examples",
    "codeList": [
      {
        "language": "text",
        "code": "::: correct\n\n`` `js\nfunction() {\n    const another = [];\n}\n`` `\n\n:::\n\n::: incorrect\n\n`` `js\nfunction() {\n    const another = [];\n}\n`` `\n\n:::"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Correct Usage of setTimeout with Function Argument in JavaScript",
    "codeDescription": "This snippet shows the correct and safer way to use setTimeout() by passing a function as the first argument instead of a string. This approach is recommended for better security and performance.",
    "codeLanguage": "JavaScript",
    "codeTokens": 69,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-implied-eval.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-implied-eval",
    "codeList": [
      {
        "language": "javascript",
        "code": "setTimeout(function() {\n    alert(\"Hi!\");\n}, 100);"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Incorrect Examples of Unreachable Code for ESLint Rule",
    "codeDescription": "Collection of incorrect code examples showing different scenarios of unreachable code after return, throw, break statements, and more. All these patterns would trigger the no-unreachable rule.",
    "codeLanguage": "javascript",
    "codeTokens": 166,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unreachable.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-unreachable",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-unreachable: \"error\"*/\n\nfunction foo() {\n    return true;\n    console.log(\"done\");\n}\n\nfunction bar() {\n    throw new Error(\"Oops!\");\n    console.log(\"done\");\n}\n\nwhile(value) {\n    break;\n    console.log(\"done\");\n}\n\nthrow new Error(\"Oops!\");\nconsole.log(\"done\");\n\nfunction baz() {\n    if (Math.random() < 0.5) {\n        return;\n    } else {\n        throw new Error();\n    }\n    console.log(\"done\");\n}\n\nfor (;;) {}\nconsole.log(\"done\");"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Compliant Code Length Example (JavaScript)",
    "codeDescription": "Shows how to properly format code to comply with the 80 character line length limit.",
    "codeLanguage": "javascript",
    "codeTokens": 92,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/max-len.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint max-len Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint max-len: [\"error\", { \"code\": 80 }]*/\n\nvar foo = {\n  \"bar\": \"This is a bar.\",\n  \"baz\": { \"qux\": \"This is a qux\" },\n  \"easier\": \"to read\"\n};"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Correct Code Examples for no-empty-pattern Rule",
    "codeDescription": "Examples of code that correctly follow the no-empty-pattern rule, showing proper use of default values instead of empty patterns.",
    "codeLanguage": "javascript",
    "codeTokens": 88,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-empty-pattern.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rule Documentation: no-empty-pattern",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-empty-pattern: \"error\"*/\n\nconst {a = {}} = foo;\nconst {b = []} = foo;\nfunction foo({a = {}}) {}\nfunction bar({a = []}) {}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Incorrect Usage: Modifying const Variable with Assignment Operator in JavaScript",
    "codeDescription": "This example shows incorrect usage by trying to modify a const variable using the += assignment operator, which is not permitted for const variables.",
    "codeLanguage": "JavaScript",
    "codeTokens": 70,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-const-assign.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-const-assign",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-const-assign: \"error\"*/\n\nconst a = 0;\na += 1;"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Demonstrating Invalid Floating Decimal Usage in JavaScript",
    "codeDescription": "Examples of invalid JavaScript number formats with floating decimal points that this ESLint rule will flag as errors. These formats include decimal points with missing numbers before or after them.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-floating-decimal.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-floating-decimal",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-floating-decimal: \"error\"*/\n\nvar num = .5;\nvar num = 2.;\nvar num = -.7;"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Printing Configuration",
    "codeDescription": "Example showing how to output the configuration for a specific file.",
    "codeLanguage": "shell",
    "codeTokens": 35,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_30",
    "pageTitle": "ESLint Command Line Interface Reference",
    "codeList": [
      {
        "language": "shell",
        "code": "--print-config file.js"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Adding Shared Settings in JSON Configuration",
    "codeDescription": "Example of adding shared settings to an ESLint JSON configuration file, which allows plugins to access shared information across all rules. This is useful for custom rules that need access to common settings.",
    "codeLanguage": "json",
    "codeTokens": 74,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Configuration Files (Deprecated)",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"settings\": {\n\t\t\"sharedData\": \"Hello\"\n\t}\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Demonstrating Error Suppression in Finally Block (JavaScript)",
    "codeDescription": "This example shows how a return statement in a finally block suppresses an error thrown in a try block. Instead of propagating the error, the function returns 3.",
    "codeLanguage": "javascript",
    "codeTokens": 125,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unsafe-finally.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-unsafe-finally",
    "codeList": [
      {
        "language": "javascript",
        "code": "// We expect this function to throw an error, then return\n(() => {\n    try {\n        throw new Error(\"Try\"); // error is thrown but suspended until finally block ends\n    } finally {\n        return 3; // 3 is returned before the error is thrown, which we did not expect\n    }\n})();\n\n// > 3"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Configuring arrow-body-style rule in ESLint (JSON)",
    "codeDescription": "Example of how to configure the 'arrow-body-style' rule in an ESLint configuration file. This snippet sets the rule to enforce braces around all arrow function bodies.",
    "codeLanguage": "json",
    "codeTokens": 63,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/arrow-body-style.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: arrow-body-style",
    "codeList": [
      {
        "language": "json",
        "code": "\"arrow-body-style\": [\"error\", \"always\"]"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Configuring ESLint for CommonJS Projects",
    "codeDescription": "Configuration setup for CommonJS projects in eslint.config.js",
    "codeLanguage": "javascript",
    "codeTokens": 53,
    "codeId": "https://github.com/eslint/eslint/blob/main/packages/eslint-config-eslint/README.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Configuration Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const eslintConfigESLintCJS = require(\"eslint-config-eslint/cjs\");\n\nmodule.exports = [...eslintConfigESLintCJS];"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Incorrect Examples with 'always' Option",
    "codeDescription": "Examples of code that would be flagged as incorrect when using the 'always' option, which requires a space before function parentheses.",
    "codeLanguage": "javascript",
    "codeTokens": 121,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/space-before-function-paren.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint space-before-function-paren Rule",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint space-before-function-paren: \"error\"*/\n\nfunction foo() {\n    // ...\n}\n\nvar bar = function() {\n    // ...\n};\n\nvar bar = function foo() {\n    // ...\n};\n\nclass Foo {\n    constructor() {\n        // ...\n    }\n}\n\nvar baz = {\n    bar() {\n        // ...\n    }\n};\n\nvar baz = async() => 1"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Demonstrating Block-Level Functions in ES6 Strict Mode",
    "codeDescription": "Illustrates how block-level functions behave in ES6 with strict mode. In strict mode, functions declared in blocks are limited to the scope of that block, making them inaccessible from outside.",
    "codeLanguage": "javascript",
    "codeTokens": 87,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inner-declarations.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint no-inner-declarations Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "\"use strict\";\n\nif (test) {\n    function doSomething () { }\n\n    doSomething(); // no error\n}\n\ndoSomething(); // error"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "enforceForClassFields Option - Correct Example (True)",
    "codeDescription": "Shows a class field initialized with an arrow function that uses 'this', complying with the rule when enforceForClassFields is true.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/class-methods-use-this.md#2025-04-14_snippet_7",
    "pageTitle": "Understanding the class-methods-use-this ESLint Rule",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint class-methods-use-this: [\"error\", { \"enforceForClassFields\": true }] */\n\nclass A {\n    foo = () => {this;}\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Demonstrating Correct Function Usage in JavaScript",
    "codeDescription": "This snippet shows examples of code that comply with the no-func-assign rule, including function expressions and shadowed variables.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-func-assign.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-func-assign",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-func-assign: \"error\"*/\n\nlet foo = function () {}\nfoo = bar;\n\nfunction baz(baz) { // `baz` is shadowed.\n    baz = bar;\n}\n\nfunction qux() {\n    const qux = bar;  // `qux` is shadowed.\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Incorrect Usage of throw Statements in JavaScript",
    "codeDescription": "Examples of code that violate the no-throw-literal rule by throwing literals, primitives, or expressions that cannot be Error objects.",
    "codeLanguage": "javascript",
    "codeTokens": 108,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-throw-literal.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-throw-literal",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-throw-literal: \"error\"*/\n\nthrow \"error\";\n\nthrow 0;\n\nthrow undefined;\n\nthrow null;\n\nconst err = new Error();\nthrow \"an \" + err;\n// err is recast to a string literal\n\nconst er2 = new Error();\nthrow `${err2}`"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Specifying Rules in ESLint CLI",
    "codeDescription": "The --rule flag specifies rules to be used, which merge with rules from configuration files. Plugin rules need to be prefixed with the plugin name. Can be combined with --no-eslintrc to ignore configuration files.",
    "codeLanguage": "bash",
    "codeTokens": 72,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_6",
    "pageTitle": "ESLint Command Line Interface Reference",
    "codeList": [
      {
        "language": "bash",
        "code": "--rule 'quotes: [error, double]'"
      },
      {
        "language": "bash",
        "code": "--rule 'guard-for-in: error' --rule 'brace-style: [error, 1tbs]'"
      },
      {
        "language": "bash",
        "code": "--rule 'jquery/dollar-sign: error'"
      },
      {
        "language": "bash",
        "code": "--rule 'quotes: [error, double]' --no-eslintrc"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Incorrect Usage of arguments Object in JavaScript",
    "codeDescription": "Examples showing incorrect usage of the arguments object that should be replaced with rest parameters. These patterns are flagged by the prefer-rest-params rule.",
    "codeLanguage": "javascript",
    "codeTokens": 121,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-rest-params.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule Documentation: prefer-rest-params",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint prefer-rest-params: \"error\"*/\n\nfunction foo() {\n    console.log(arguments);\n}\n\nfunction foo(action) {\n    const args = Array.prototype.slice.call(arguments, 1);\n    action.apply(null, args);\n}\n\nfunction foo(action) {\n    const args = [].slice.call(arguments, 1);\n    action.apply(null, args);\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Loading Plugins in ESLint CLI",
    "codeDescription": "The --plugin flag specifies a plugin to load. The eslint-plugin- prefix can be optionally omitted from the plugin name. Plugins must be installed via npm before use.",
    "codeLanguage": "bash",
    "codeTokens": 56,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint Command Line Interface Reference",
    "codeList": [
      {
        "language": "bash",
        "code": "--plugin jquery file.js"
      },
      {
        "language": "bash",
        "code": "--plugin eslint-plugin-mocha file.js"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Correct Usage of require-jsdoc Rule in JavaScript",
    "codeDescription": "This snippet shows examples of code that correctly follows the 'require-jsdoc' rule, providing JSDoc comments for various function and class declarations as required by the rule configuration.",
    "codeLanguage": "JavaScript",
    "codeTokens": 367,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/require-jsdoc.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Rule: require-jsdoc",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "/*eslint \"require-jsdoc\": [\"error\", {\n    \"require\": {\n        \"FunctionDeclaration\": true,\n        \"MethodDefinition\": true,\n        \"ClassDeclaration\": true,\n        \"ArrowFunctionExpression\": true,\n        \"FunctionExpression\": true\n    }\n}]*/\n\n/**\n * It returns 10\n */\nfunction foo() {\n    return 10;\n}\n\n/**\n * It returns test + 10\n * @params {number} test - some number\n * @returns {number} sum of test and 10\n */\nvar bar = (test) => {\n    return test + 10;\n}\n\n/**\n * It returns 10\n */\nvar bar = () => {\n    return 10;\n}\n\n/**\n * It returns 10\n */\nvar bar = function() {\n    return 10;\n}\n\nvar array = [1,2,3];\narray.filter(function(item) {\n    return item > 2;\n});\n\n/**\n * A class that can return the number 10\n */\nclass Foo {\n    /**\n    * It returns 10\n    */\n    bar() {\n        return 10;\n    }\n}\n\n/**\n * It returns 10\n */\nvar bar = function() {\n    return 10;\n};\n\nvar bar = {\n    /**\n    * It returns 10\n    */\n    bar: function() {\n        return 10;\n    },\n\n    /**\n    * It returns 10\n    */\n    baz() {\n        return 10;\n    }\n};\n\nsetTimeout(() => {}, 10); // since it's an anonymous arrow function"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Function Declaration Indentation in JavaScript",
    "codeDescription": "Examples of function declaration indentation including parameters and body with FunctionDeclaration options.",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/indent.md#2025-04-14_snippet_14",
    "pageTitle": "ESLint Rule: indent",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint indent: [\"error\", 2, { \"FunctionDeclaration\": {\"body\": 1, \"parameters\": 2} }]*/\n\nfunction foo(bar,\n    baz,\n    qux) {\n  qux();\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Using @eslint/js Package for Built-in Configs",
    "codeDescription": "Example of how to correctly use the @eslint/js package to access built-in configurations like 'recommended' and 'all' in ESLint v9.0.0.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_11",
    "pageTitle": "Migration Guide for ESLint v9.x",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport js from \"@eslint/js\";\n\nexport default [js.configs.recommended, js.configs.all];"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Incorrect Constructor Super Call Examples",
    "codeDescription": "Examples demonstrating invalid constructor implementations including missing super() calls and incorrect usage with null inheritance.",
    "codeLanguage": "javascript",
    "codeTokens": 117,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/constructor-super.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Constructor Super Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint constructor-super: \"error\"*/\n\nclass A extends B {\n    constructor() { }  // Would throw a ReferenceError.\n}\n\n// Classes which inherits from a non constructor are always problems.\nclass C extends null {\n    constructor() {\n        super();  // Would throw a TypeError.\n    }\n}\n\nclass D extends null {\n    constructor() { }  // Would throw a ReferenceError.\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Incorrect Usage Examples of Object.assign vs Object Spread Syntax in JavaScript",
    "codeDescription": "Examples of code patterns that violate the prefer-object-spread rule, showing various Object.assign calls that should be replaced with object spread syntax.",
    "codeLanguage": "javascript",
    "codeTokens": 126,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-object-spread.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: prefer-object-spread",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint prefer-object-spread: \"error\"*/\n\nObject.assign({}, foo);\n\nObject.assign({}, {foo: 'bar'});\n\nObject.assign({ foo: 'bar'}, baz);\n\nObject.assign({}, baz, { foo: 'bar' });\n\nObject.assign({}, { ...baz });\n\n// Object.assign with a single argument that is an object literal\nObject.assign({});\n\nObject.assign({ foo: bar });"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Configuring the comma-dangle ESLint Rule",
    "codeDescription": "This JSON snippet shows how to configure the 'comma-dangle' rule in ESLint, including options for different types of syntax.",
    "codeLanguage": "json",
    "codeTokens": 110,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/comma-dangle.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: comma-dangle",
    "codeList": [
      {
        "language": "json",
        "code": "{\n    \"comma-dangle\": [\"error\", \"never\"],\n    // or\n    \"comma-dangle\": [\"error\", {\n        \"arrays\": \"never\",\n        \"objects\": \"never\",\n        \"imports\": \"never\",\n        \"exports\": \"never\",\n        \"functions\": \"never\"\n    }]\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Comparing ternary conditional with logical OR in JavaScript",
    "codeDescription": "Examples showing how to replace a ternary expression with logical OR when the same variable is used as both the condition and the consequent, which provides simpler and more readable code.",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unneeded-ternary.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-unneeded-ternary",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Bad\nfoo(bar ? bar : 1);\n\n// Good\nfoo(bar || 1);"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Correct Usage of Generator Functions with Complex Configuration",
    "codeDescription": "Examples of correctly formatted generator functions when using a complex configuration with overrides.",
    "codeLanguage": "javascript",
    "codeTokens": 108,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/generator-star-spacing.md#2025-04-14_snippet_8",
    "pageTitle": "Generator Star Spacing Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint generator-star-spacing: [\"error\", {\n    \"before\": false,\n    \"after\": true,\n    \"anonymous\": \"neither\",\n    \"method\": {\"before\": true, \"after\": true}\n}]*/\n\nfunction* generator() {}\n\nvar anonymous = function*() {};\n\nvar shorthand = { * generator() {} };\n\nclass Class { static * method() {} }"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Recursively Ignoring Directories in ESLint",
    "codeDescription": "This example demonstrates how to recursively ignore all directories with a specific name. It ignores all .config directories at any level in the project structure.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/ignore.md#2025-04-14_snippet_2",
    "pageTitle": "Configuring ESLint Ignore Files",
    "codeList": [
      {
        "language": "javascript",
        "code": "// eslint.config.js\nimport { defineConfig, globalIgnores } from \"eslint/config\";\n\nexport default defineConfig([globalIgnores([\"**/.config/\"]));"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Using Template Literals in JavaScript",
    "codeDescription": "This example demonstrates the preferred approach of using template literals with embedded expressions instead of string concatenation.",
    "codeLanguage": "javascript",
    "codeTokens": 48,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-template.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint prefer-template Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const str = `Hello, ${name}!`;"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Correct usage of object-curly-spacing with 'never' option in JavaScript",
    "codeDescription": "Examples of code that comply with the 'object-curly-spacing' rule when set to 'never', showing correct spacing inside curly braces.",
    "codeLanguage": "JavaScript",
    "codeTokens": 141,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/object-curly-spacing.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: object-curly-spacing",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint object-curly-spacing: [\"error\", \"never\"]*/\n\nvar obj = {'foo': 'bar'};\nvar obj = {'foo': {'bar': 'baz'}, 'qux': 'quxx'};\nvar obj = {\n  'foo': 'bar'\n};\nvar obj = {'foo': 'bar'\n};\nvar obj = {\n  'foo':'bar'};\nvar obj = {};\nvar {x} = y;\nimport {foo} from 'bar';"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Incorrect Promise Executor Return Examples in JavaScript",
    "codeDescription": "Shows examples of code that violate the no-promise-executor-return rule. These include returning values from Promise executors, which is problematic because the returned values cannot be used and don't affect the promise.",
    "codeLanguage": "javascript",
    "codeTokens": 189,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-promise-executor-return.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint no-promise-executor-return Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-promise-executor-return: \"error\"*/\n\nnew Promise((resolve, reject) => {\n    if (someCondition) {\n        return defaultResult;\n    }\n    getSomething((err, result) => {\n        if (err) {\n            reject(err);\n        } else {\n            resolve(result);\n        }\n    });\n});\n\nnew Promise((resolve, reject) => getSomething((err, data) => {\n    if (err) {\n        reject(err);\n    } else {\n        resolve(data);\n    }\n}));\n\nnew Promise(() => {\n    return 1;\n});\n\nnew Promise(r => r(1));"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Loading ESLint Implementations in JavaScript",
    "codeDescription": "Demonstrates how to use the loadESLint() function to load different ESLint implementations based on configuration preferences. It shows loading the default, flat config, and legacy versions of ESLint.",
    "codeLanguage": "javascript",
    "codeTokens": 140,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/integrate/nodejs-api.md#2025-04-14_snippet_12",
    "pageTitle": "ESLint Node.js API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { loadESLint } = require(\"eslint\");\n\n// loads the default ESLint that the CLI would use based on process.cwd()\nconst DefaultESLint = await loadESLint();\n\n// loads the flat config version specifically\nconst FlatESLint = await loadESLint({ useFlatConfig: true });\n\n// loads the legacy version specifically\nconst LegacyESLint = await loadESLint({ useFlatConfig: false });"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Correct RegExp Usage Examples",
    "codeDescription": "Examples of regular expressions that comply with the require-unicode-regexp rule by using u or v flags.",
    "codeLanguage": "javascript",
    "codeTokens": 159,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/require-unicode-regexp.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rule Documentation: require-unicode-regexp",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint require-unicode-regexp: error */\n\nconst a = /aaa/u\nconst b = /bbb/giu\nconst c = new RegExp(\"ccc\", \"u\")\nconst d = new RegExp(\"ddd\", \"giu\")\n\nconst e = /aaa/v\nconst f = /bbb/giv\nconst g = new RegExp(\"ccc\", \"v\")\nconst h = new RegExp(\"ddd\", \"giv\")\n\n// This rule ignores RegExp calls if the flags could not be evaluated to a static value.\nfunction i(flags) {\n    return new RegExp(\"eee\", flags)\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Correct usage of 'this' with capIsConstructor option set to false",
    "codeDescription": "Example of code that complies with the 'no-invalid-this' rule when the 'capIsConstructor' option is set to false. This shows a valid use of 'this' in a method, even with a capitalized function name.",
    "codeLanguage": "javascript",
    "codeTokens": 113,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-invalid-this.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Rule: no-invalid-this",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-invalid-this: [\"error\", { \"capIsConstructor\": false }]*/\n\n\"use strict\";\n\nobj.Foo = function Foo() {\n    // OK, this is in a method.\n    this.a = 0;\n};"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Demonstrating Correct Object Property Ordering in JavaScript",
    "codeDescription": "Examples showing correct property ordering in objects according to the sort-keys rule. This includes alphabetically sorted properties, proper handling of case sensitivity, non-natural ordering, computed properties, and spread operators.",
    "codeLanguage": "javascript",
    "codeTokens": 359,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/sort-keys.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint sort-keys Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint sort-keys: \"error\"*/\n\nconst obj1 = {a: 1, b: 2, c: 3};\nconst obj2 = {a: 1, \"b\": 2, c: 3};\n\n// Case-sensitive by default.\nconst obj3 = {C: 3, a: 1, b: 2};\n\n// Non-natural order by default.\nconst obj4 = {1: a, 10: b, 2: c};\n\n// This rule checks computed properties which have a simple name as well.\nconst obj5 = {a: 1, [\"b\"]: 2, c: 3};\nconst obj6 = {a: 1, [b]: 2, c: 3};\n\n// This rule ignores computed properties which have a non-simple name.\nconst obj7 = {a: 1, [c + d]: 3, b: 2};\nconst obj8 = {a: 1, [\"c\" + \"d\"]: 3, b: 2};\nconst obj9 = {a: 1, [`${c}`]: 3, b: 2};\nconst obj10 = {a: 1, [tag`c`]: 3, b: 2};\n\n// This rule does not report unsorted properties that are separated by a spread property.\nconst obj11 = {b: 1, ...c, a: 2};"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Incorrect JavaScript Code Exceeding Complexity Threshold",
    "codeDescription": "Examples of code that violates a maximum complexity rule setting of 2, including conditional paths, optional operators, and default parameters.",
    "codeLanguage": "javascript",
    "codeTokens": 184,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/complexity.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Complexity Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint complexity: [\"error\", 2]*/\n\nfunction a(x) {\n    if (true) {\n        return x;\n    } else if (false) {\n        return x+1;\n    } else {\n        return 4; // 3rd path\n    }\n}\n\nfunction b() {\n    foo ||= 1;\n    bar &&= 1;\n}\n\nfunction c(a = {}) { // default parameter -> 2nd path\n    const { b = 'default' } = a; // default value during destructuring -> 3rd path\n}\n\nfunction d(a) {\n    return a?.b?.c; // optional chaining with two optional properties creates two additional branches\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Package.json Configuration for ESLint Plugin",
    "codeDescription": "Complete package.json configuration for publishing an ESLint plugin to npm, including required fields and dependencies.",
    "codeLanguage": "javascript",
    "codeTokens": 175,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/custom-rule-tutorial.md#2025-04-14_snippet_16",
    "pageTitle": "ESLint Custom Rule Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "{\n  \"name\": \"eslint-plugin-example\",\n  \"version\": \"1.0.0\",\n  \"description\": \"ESLint plugin for enforce-foo-bar rule.\",\n  \"main\": \"eslint-plugin-example.js\",\n  \"scripts\": {\n    \"test\": \"node enforce-foo-bar.test.js\"\n  },\n  \"peerDependencies\": {\n    \"eslint\": \">=9.0.0\"\n  },\n  \"keywords\": [\n    \"eslint\",\n    \"eslintplugin\",\n    \"eslint-plugin\"\n  ],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"eslint\": \"^9.0.0\"\n  }\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Demonstrating Variable Shadowing in JavaScript",
    "codeDescription": "Example showing variable shadowing where a local variable 'a' inside function 'b' shadows the global variable 'a'.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-shadow.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-shadow",
    "codeList": [
      {
        "language": "javascript",
        "code": "const a = 3;\nfunction b() {\n    const a = 10;\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Basic Cyclomatic Complexity Example in JavaScript",
    "codeDescription": "Demonstrates how cyclomatic complexity is calculated with a simple function containing three different code paths.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/complexity.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Complexity Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "function a(x) {\n    if (true) {\n        return x; // 1st path\n    } else if (false) {\n        return x+1; // 2nd path\n    } else {\n        return 4; // 3rd path\n    }\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Correct require() Usage Patterns",
    "codeDescription": "Demonstrates proper ways to use require() at the top level of modules, including various initialization patterns and conditional requires.",
    "codeLanguage": "javascript",
    "codeTokens": 190,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/global-require.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint global-require Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire(\"x\");\nvar y = require(\"y\");\nvar z;\nz = require(\"z\").initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require(\"fs\");\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback);\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require(\"dev-logger\") : require(\"logger\");\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Alternative Rule Configuration",
    "codeDescription": "JSON configuration using no-restricted-syntax instead of no-console",
    "codeLanguage": "json",
    "codeTokens": 108,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-console.md#2025-04-14_snippet_5",
    "pageTitle": "ESLint no-console Rule Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n    \"rules\": {\n        \"no-console\": \"off\",\n        \"no-restricted-syntax\": [\n            \"error\",\n            {\n                \"selector\": \"CallExpression[callee.object.name='console'][callee.property.name!=/^(log|warn|error|info|trace)$/]\",\n                \"message\": \"Unexpected property on console object was called\"\n            }\n        ]\n    }\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Defining Recommended Plugin Structure in JavaScript",
    "codeDescription": "Shows the recommended structure for an ESLint plugin, including meta information, configs, rules, and processors. This structure works for both ESM and CommonJS modules.",
    "codeLanguage": "javascript",
    "codeTokens": 93,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/extend/plugin-migration-flat-config.md#2025-04-14_snippet_0",
    "pageTitle": "Plugin Migration to Flat Config for ESLint",
    "codeList": [
      {
        "language": "javascript",
        "code": "const plugin = {\n\tmeta: {},\n\tconfigs: {},\n\trules: {},\n\tprocessors: {},\n};\n\n// for ESM\nexport default plugin;\n\n// OR for CommonJS\nmodule.exports = plugin;"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Correct Usage Examples for no-else-return Rule in JavaScript",
    "codeDescription": "These examples show correct code that follows the 'no-else-return' rule, demonstrating proper use of if-else statements and avoiding unnecessary else blocks.",
    "codeLanguage": "javascript",
    "codeTokens": 194,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-else-return.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: no-else-return",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-else-return: \"error\"*/\n\nfunction foo1() {\n    if (x) {\n        return y;\n    }\n\n    return z;\n}\n\nfunction foo2() {\n    if (x) {\n        return y;\n    } else if (z) {\n        const t = \"foo\";\n    } else {\n        return w;\n    }\n}\n\nfunction foo3() {\n    if (x) {\n        if (z) {\n            return y;\n        }\n    } else {\n        return z;\n    }\n}\n\nfunction foo4() {\n    if (error) {\n        return 'It failed';\n    } else if (loading) {\n        return \"It's still loading\";\n    }\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Incorrect Usage of Math.pow in JavaScript",
    "codeDescription": "Examples of code that violate the prefer-exponentiation-operator rule by using Math.pow instead of the ** operator.",
    "codeLanguage": "JavaScript",
    "codeTokens": 99,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-exponentiation-operator.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: prefer-exponentiation-operator",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint prefer-exponentiation-operator: \"error\"*/\n\nconst foo = Math.pow(2, 8);\n\nconst bar = Math.pow(a, b);\n\nlet baz = Math.pow(a + b, c + d);\n\nlet quux = Math.pow(-1, n);"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "TypeScript ESLint Configuration Example in JSON",
    "codeDescription": "A JSON configuration file example that sets up ESLint to work with TypeScript. It configures the TypeScript parser, extends recommended rules, sets specific TypeScript rules, and defines patterns to ignore during linting.",
    "codeLanguage": "json",
    "codeTokens": 184,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/configure/configuration-files-deprecated.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Configuration Files (Deprecated)",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"root\": true,\n\t\"extends\": [\"eslint:recommended\", \"plugin:@typescript-eslint/recommended\"],\n\t\"parser\": \"@typescript-eslint/parser\",\n\t\"parserOptions\": { \"project\": [\"./tsconfig.json\"] },\n\t\"plugins\": [\"@typescript-eslint\"],\n\t\"rules\": {\n\t\t\"@typescript-eslint/strict-boolean-expressions\": [\n\t\t\t2,\n\t\t\t{\n\t\t\t\t\"allowString\": false,\n\t\t\t\t\"allowNumber\": false\n\t\t\t}\n\t\t]\n\t},\n\t\"ignorePatterns\": [\"src/**/*.test.ts\", \"src/frontend/generated/*\"]\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Incorrect Usage of Arrow Functions According to no-confusing-arrow Rule",
    "codeDescription": "These examples demonstrate code that would be flagged as incorrect by the no-confusing-arrow ESLint rule. The arrow functions could be mistaken for comparison operators.",
    "codeLanguage": "JavaScript",
    "codeTokens": 91,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-confusing-arrow.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-confusing-arrow",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-confusing-arrow: \"error\"*/\n\nvar x = a => 1 ? 2 : 3;\nvar x = (a) => 1 ? 2 : 3;"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Object Comparison Issue Example in JavaScript",
    "codeDescription": "Demonstrates how comparing against newly constructed objects will always return false due to reference comparison.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-constant-binary-expression.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint no-constant-binary-expression Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Programmers coming from a language where objects are compared by value might expect this to work:\nconst isEmpty = x === [];\n\n// However, this will always result in `isEmpty` being `false`."
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "ASI hazard with return statements",
    "codeDescription": "Example demonstrating how ASI can unexpectedly change code behavior with return statements, causing an object literal to be unreachable code.",
    "codeLanguage": "javascript",
    "codeTokens": 51,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/semi.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Semi Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "return\n{\n    name: \"ESLint\"\n};"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Correct Examples with 'single' and 'allowTemplateLiterals' Options",
    "codeDescription": "Shows code that complies with the 'single' quotes rule with allowTemplateLiterals option, allowing both single quotes and backticks.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/quotes.md#2025-04-14_snippet_11",
    "pageTitle": "ESLint quotes Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint quotes: [\"error\", \"single\", { \"allowTemplateLiterals\": true }]*/\n\nvar single = 'single';\nvar single = `single`;"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Detecting Unreachable Instance Fields in Subclass Without super() Call",
    "codeDescription": "Example showing unreachable instance field definitions in a subclass that doesn't call super() in its constructor. The private field will never be added to instances.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unreachable.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-unreachable",
    "codeList": [
      {
        "language": "javascript",
        "code": "class C extends B {\n    #x; // this will never be added to instances\n\n    constructor() {\n        return {};\n    }\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Demonstrating Incorrect Usage of Function.prototype.call() and apply() in JavaScript",
    "codeDescription": "Examples of code that violate the no-useless-call rule by using .call() and .apply() unnecessarily, where normal function invocation would be equivalent and more performant.",
    "codeLanguage": "JavaScript",
    "codeTokens": 180,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-call.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-useless-call",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-useless-call: \"error\"*/\n\n// These are same as `foo(1, 2, 3);`\nfoo.call(undefined, 1, 2, 3);\nfoo.apply(undefined, [1, 2, 3]);\nfoo.call(null, 1, 2, 3);\nfoo.apply(null, [1, 2, 3]);\n\n// These are same as `obj.foo(1, 2, 3);`\nobj.foo.call(obj, 1, 2, 3);\nobj.foo.apply(obj, [1, 2, 3]);"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Suppressing All ESLint Violations",
    "codeDescription": "Example demonstrating how to suppress all existing violations using the --suppress-all flag.",
    "codeLanguage": "shell",
    "codeTokens": 41,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/command-line-interface.md#2025-04-14_snippet_17",
    "pageTitle": "ESLint Command Line Interface Reference",
    "codeList": [
      {
        "language": "shell",
        "code": "\"src/**/*.js\" --suppress-all"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Correct Examples with 'always' and 'empty' Exception",
    "codeDescription": "Examples of code that would be considered correct when using the 'always' option with an exception for empty parentheses.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/space-in-parens.md#2025-04-14_snippet_21",
    "pageTitle": "ESLint Rule: space-in-parens",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint space-in-parens: [\"error\", \"always\", { \"exceptions\": [\"empty\"] }]*/\n\nfoo();"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Incorrect Usage Examples",
    "codeDescription": "Examples of code that violates the no-eval rule, including direct eval calls and various eval invocation patterns",
    "codeLanguage": "javascript",
    "codeTokens": 118,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-eval.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint no-eval Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-eval: \"error\"*/\n\nconst obj = { x: \"foo\" },\n    key = \"x\",\n    value = eval(\"obj.\" + key);\n\n(0, eval)(\"const a = 0\");\n\nconst foo = eval;\nfoo(\"const a = 0\");\n\n// This `this` is the global object.\nthis.eval(\"const a = 0\");"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Demonstrating Correct Usage with includeExports Option in JavaScript",
    "codeDescription": "This snippet shows the correct way to handle imports and exports from the same module when the includeExports option is set to true. It combines the import and export into a single import statement.",
    "codeLanguage": "javascript",
    "codeTokens": 91,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-duplicate-imports.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rule: no-duplicate-imports",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-duplicate-imports: [\"error\", { \"includeExports\": true }]*/\n\nimport { merge, find } from 'module';\n\nexport { find };"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Correct Usage of Array Creation in JavaScript",
    "codeDescription": "Examples of code that comply with the no-array-constructor rule in JavaScript. These show proper ways to create arrays or use the Array constructor for specific purposes.",
    "codeLanguage": "JavaScript",
    "codeTokens": 92,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-array-constructor.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: no-array-constructor",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-array-constructor: \"error\"*/\n\nArray(500);\n\nnew Array(someOtherArray.length);\n\n[0, 1, 2];\n\nconst createArray = Array => new Array();"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Incorrect usage of curly braces with 'multi-line' option in JavaScript",
    "codeDescription": "Examples of code that violate the 'curly' rule when set to the 'multi-line' option. This option requires braces for multi-line blocks but allows single-line blocks without braces.",
    "codeLanguage": "javascript",
    "codeTokens": 93,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/curly.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rule: curly",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint curly: [\"error\", \"multi-line\"]*/\n\nif (foo)\n  doSomething();\nelse\n  doSomethingElse();\n\nif (foo) foo(\n  bar,\n  baz);"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Correct Usage Examples for prefer-object-has-own Rule",
    "codeDescription": "These code snippets show correct usage according to the prefer-object-has-own ESLint rule. They demonstrate the proper use of Object.hasOwn() to check for object property ownership.",
    "codeLanguage": "JavaScript",
    "codeTokens": 87,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-object-has-own.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Rule: prefer-object-has-own",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint prefer-object-has-own: \"error\"*/\n\nObject.hasOwn(obj, \"a\");\n\nconst hasProperty = Object.hasOwn(object, property);"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Demonstrating Dead Store in JavaScript",
    "codeDescription": "This snippet shows an example of a 'dead store' where a variable is assigned a value that is never read.",
    "codeLanguage": "JavaScript",
    "codeTokens": 83,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-assignment.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-useless-assignment",
    "codeList": [
      {
        "language": "javascript",
        "code": "let id = \"x1234\";    // this is a \"dead store\" - this value (\"x1234\") is never read\n\nid = generateId();\n\ndoSomethingWith(id);"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Correct Usage of Object Construction in JavaScript",
    "codeDescription": "Examples of code that comply with the no-object-constructor rule by either using the Object constructor with arguments, using object literal notation, or using the Object constructor in other valid contexts.",
    "codeLanguage": "javascript",
    "codeTokens": 104,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-object-constructor.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint no-object-constructor Rule",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-object-constructor: \"error\"*/\n\nObject(\"foo\");\n\nconst obj = { a: 1, b: 2 };\n\nconst isObject = value => value === Object(value);\n\nconst createObject = Object => new Object();"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Running ESLint with a Formatter",
    "codeDescription": "Shell command demonstrating how to run ESLint with a specific formatter using the --format flag. The command will lint the fullOfProblems.js file and output the results in the specified format.",
    "codeLanguage": "shell",
    "codeTokens": 71,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/formatters/index.md#2025-04-14_snippet_2",
    "pageTitle": "Formatters Reference for ESLint",
    "codeList": [
      {
        "language": "shell",
        "code": "npx eslint --format <Add formatter here> fullOfProblems.js"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Examples of code that trigger the rule with allowUnboundThis set to false",
    "codeDescription": "These examples show code that would trigger the rule when the 'allowUnboundThis' option is set to false, which prohibits function expressions as callbacks even if they contain unbound this references.",
    "codeLanguage": "javascript",
    "codeTokens": 114,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-arrow-callback.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Rule: prefer-arrow-callback",
    "codeList": [
      {
        "language": "javascript",
        "code": "/* eslint prefer-arrow-callback: [ \"error\", { \"allowUnboundThis\": false } ] */\n\nfoo(function() { this.a; });\n\nfoo(function() { (() => this); });\n\nsomeArray.map(function(item) { return this.doSomething(item); }, someObject);"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Correct Switch Statement Examples without Duplicate Cases",
    "codeDescription": "Examples showing correct usage of switch statements where each case clause has a unique test expression.",
    "codeLanguage": "javascript",
    "codeTokens": 167,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-duplicate-case.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint no-duplicate-case Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-duplicate-case: \"error\"*/\n\nconst a = 1,\n    one = 1;\n\nswitch (a) {\n    case 1:\n        break;\n    case 2:\n        break;\n    case 3:\n        break;\n    default:\n        break;\n}\n\nswitch (a) {\n    case one:\n        break;\n    case 2:\n        break;\n    case 3:\n        break;\n    default:\n        break;\n}\n\nswitch (a) {\n    case \"1\":\n        break;\n    case \"2\":\n        break;\n    case \"3\":\n        break;\n    default:\n        break;\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Demonstrating Incorrect Usage of try-catch in JavaScript",
    "codeDescription": "Examples of code that violate the no-useless-catch rule by using catch clauses that only rethrow the caught error without any additional processing.",
    "codeLanguage": "JavaScript",
    "codeTokens": 110,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-useless-catch.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-useless-catch",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-useless-catch: \"error\"*/\n\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  throw e;\n}\n\ntry {\n  doSomethingThatMightThrow();\n} catch (e) {\n  throw e;\n} finally {\n  cleanUp();\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Demonstrating Duplicate Keys in JavaScript Object Literals",
    "codeDescription": "This snippet shows an example of duplicate keys in an object literal, which is considered incorrect usage and can lead to unexpected behavior.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-dupe-keys.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Rule: no-dupe-keys",
    "codeList": [
      {
        "language": "javascript",
        "code": "const foo = {\n    bar: \"baz\",\n    bar: \"qux\"\n};"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Basic Function Style Examples",
    "codeDescription": "Demonstrates the different ways to define functions in JavaScript including function declarations, arrow functions, and function expressions",
    "codeLanguage": "javascript",
    "codeTokens": 92,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/func-style.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint Function Style Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// function declaration\nfunction doSomething() {\n    // ...\n}\n\n// arrow function expression assigned to a variable\nconst doSomethingElse = () => {\n    // ...\n};\n\n// function expression assigned to a variable\nconst doSomethingAgain = function() {\n    // ...\n};"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Array Bracket Newline Rule - Multiline Option Examples",
    "codeDescription": "Examples demonstrating usage with the multiline option, which requires line breaks if there are line breaks inside elements or between elements.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-newline.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint Array Bracket Newline Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint array-bracket-newline: [\"error\", { \"multiline\": true }]*/\n\nconst a = [\n];\nconst b = [\n    1\n];\nconst c = [\n    1, 2\n];\nconst d = [1,\n    2];\nconst e = [function foo() {\n    dosomething();\n}];"
      },
      {
        "language": "javascript",
        "code": "/*eslint array-bracket-newline: [\"error\", { \"multiline\": true }]*/\n\nconst a = [];\nconst b = [1];\nconst c = [1, 2];\nconst d = [\n    1,\n    2\n];\nconst e = [\n    function foo() {\n        dosomething();\n    }\n];"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Correct For Loop Direction Examples in JavaScript",
    "codeDescription": "These examples show for loops that comply with the 'for-direction' rule by having counter variables that change in a way that allows the stop condition to be met, avoiding potential infinite loops.",
    "codeLanguage": "JavaScript",
    "codeTokens": 156,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/for-direction.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule: for-direction",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint for-direction: \"error\"*/\nfor (let i = 0; i < 10; i++) {\n}\n\nfor (let i = 0; 10 > i; i++) { // with counter \"i\" on the right\n}\n\nfor (let i = 10; i >= 0; i += this.step) { // direction unknown\n}\n\nfor (let i = MIN; i <= MAX; i -= 0) { // not increasing or decreasing\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Basic Array Bracket Spacing Examples in JavaScript",
    "codeDescription": "Examples showing the two main spacing styles (with and without spaces) for array literals and destructuring assignments that this rule controls.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/array-bracket-spacing.md#2025-04-14_snippet_0",
    "pageTitle": "ESLint array-bracket-spacing Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "var arr = [ 'foo', 'bar' ];\nvar [ x, y ] = z;\n\nvar arr = ['foo', 'bar'];\nvar [x,y] = z;"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Correct examples for 'omitLastInOneLineClassBody' option",
    "codeDescription": "Examples of valid code when using the 'omitLastInOneLineClassBody' option, which allows omitting semicolons at the end of one-line class bodies.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/semi.md#2025-04-14_snippet_7",
    "pageTitle": "ESLint Semi Rule Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint semi: [\"error\", \"always\", { \"omitLastInOneLineClassBody\": true}] */\n\nexport class SomeClass{\n    logType(){\n        console.log(this.type);\n        console.log(this.anotherType);\n    }\n}\n\nexport class Variant1 extends SomeClass{type=1}\nexport class Variant2 extends SomeClass{type=2; anotherType=3}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Correct Usage Examples",
    "codeDescription": "Demonstrates valid use cases including proper ES6 numeric literals and acceptable uses of parseInt() functions that don't trigger the rule.",
    "codeLanguage": "javascript",
    "codeTokens": 135,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/prefer-numeric-literals.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: prefer-numeric-literals",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint prefer-numeric-literals: \"error\"*/\n\nparseInt(1);\nparseInt(1, 3);\nNumber.parseInt(1);\nNumber.parseInt(1, 3);\n\n0b111110111 === 503;\n0o767 === 503;\n0x1F7 === 503;\n\na[parseInt](1,2);\n\nparseInt(foo);\nparseInt(foo, 2);\nNumber.parseInt(foo);\nNumber.parseInt(foo, 2);"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Correct Usage of Accessor Pairs with getWithoutSet Option",
    "codeDescription": "These examples demonstrate correct implementations that satisfy the 'accessor-pairs' rule with the 'getWithoutSet' option enabled, showing objects with both getters and setters.",
    "codeLanguage": "JavaScript",
    "codeTokens": 147,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/accessor-pairs.md#2025-04-14_snippet_4",
    "pageTitle": "ESLint Rule: accessor-pairs",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint accessor-pairs: [\"error\", { \"getWithoutSet\": true }]*/\nconst y = {\n    set a(value) {\n        this.val = value;\n    },\n    get a() {\n        return this.val;\n    }\n};\n\nconst z = {d: 1};\nObject.defineProperty(z, 'c', {\n    set: function(value) {\n        this.val = value;\n    },\n    get: function() {\n        return this.val;\n    }\n});"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Correct Error Handling with ESLint Rule (JavaScript)",
    "codeDescription": "These examples demonstrate correct error handling in Node.js callbacks, complying with the 'handle-callback-err' rule. The error is properly checked and handled.",
    "codeLanguage": "JavaScript",
    "codeTokens": 105,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/handle-callback-err.md#2025-04-14_snippet_2",
    "pageTitle": "ESLint Rule: handle-callback-err",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint handle-callback-err: \"error\"*/\n\nfunction loadData (err, data) {\n    if (err) {\n        console.log(err.stack);\n    }\n    doSomething();\n}\n\nfunction generateError (err) {\n    if (err) {}\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Configuring no-implicit-coercion Rule to Maintain Previous Behavior",
    "codeDescription": "Configuration example for the 'no-implicit-coercion' rule to retain the behavior from ESLint v8.x by allowing unary and double unary negation operations.",
    "codeLanguage": "json",
    "codeTokens": 85,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/use/migrate-to-9.0.0.md#2025-04-14_snippet_7",
    "pageTitle": "Migration Guide for ESLint v9.x",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"rules\": {\n\t\t\"no-implicit-coercion\": [2, { \"allow\": [\"-\", \"- -\"] }]\n\t}\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Incorrect Code Examples for Default Configuration",
    "codeDescription": "Examples of code patterns that would be flagged as errors with the default configuration options (allowShortCircuit: false, allowTernary: false).",
    "codeLanguage": "javascript",
    "codeTokens": 125,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-unused-expressions.md#2025-04-14_snippet_1",
    "pageTitle": "ESLint Rule Documentation: no-unused-expressions",
    "codeList": [
      {
        "language": "javascript",
        "code": "/*eslint no-unused-expressions: \"error\"*/\n\n0\n\nif(0) 0\n\n{0}\n\nf(0), {}\n\na && b()\n\na, b()\n\nc = a, b;\n\na() && function namedFunctionInExpressionContext () {f();}\n\n(function anIncompleteIIFE () {});\n\ninjectGlobal`body{ color: red; }`"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Correct Usage of JSX Comments",
    "codeDescription": "Examples of JSX code that complies with the no-inline-comments rule by placing comments in their own braces and on separate lines.",
    "codeLanguage": "jsx",
    "codeTokens": 163,
    "codeId": "https://github.com/eslint/eslint/blob/main/docs/src/rules/no-inline-comments.md#2025-04-14_snippet_3",
    "pageTitle": "ESLint no-inline-comments Rule Documentation",
    "codeList": [
      {
        "language": "jsx",
        "code": "/*eslint no-inline-comments: \"error\"*/\n\nconst foo = (\n    <div>\n      {/* These braces are just for this comment and there is nothing else on this line */}\n      <h1>Some heading</h1>\n    </div>\n)\n\nconst bar = (\n    <div>\n    {\n        // There is nothing else on this line\n        baz\n    }\n    </div>\n);\n\nconst quux = (\n    <div>\n      {/*\n        Multiline\n        comment\n      */}\n      <h1>Some heading</h1>\n    </div>\n)"
      }
    ],
    "relevance": 0.915
  }
]