[
  {
    "codeTitle": "Complete HTML Structure for CKEditor 5 Setup",
    "codeDescription": "This snippet provides a complete HTML structure for setting up CKEditor 5 with import maps, including necessary stylesheets, the editor container, import map configuration, and initialization script.",
    "codeLanguage": "html",
    "codeTokens": 555,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/quick-start.md#2025-04-16_snippet_10",
    "pageTitle": "CKEditor 5 CDN Installation Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title>CKEditor 5 - Quick start CDN</title>\n\t\t<link rel=\"stylesheet\" href=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.css\" />\n\t\t<link rel=\"stylesheet\" href=\"https://cdn.ckeditor.com/ckeditor5-premium-features/{@var ckeditor5-version}/ckeditor5-premium-features.css\" />\n\t</head>\n\t<body>\n\t\t<div id=\"editor\">\n\t\t\t<p>Hello from CKEditor 5!</p>\n\t\t</div>\n\n\t\t<script type=\"importmap\">\n\t\t\t{\n\t\t\t\t\"imports\": {\n\t\t\t\t\t\"ckeditor5\": \"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.js\",\n\t\t\t\t\t\"ckeditor5/\": \"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/\",\n\t\t\t\t\t\"ckeditor5-premium-features\": \"https://cdn.ckeditor.com/ckeditor5-premium-features/{@var ckeditor5-version}/ckeditor5-premium-features.js\",\n\t\t\t\t\t\"ckeditor5-premium-features/\": \"https://cdn.ckeditor.com/ckeditor5-premium-features/{@var ckeditor5-version}/\"\n\t\t\t\t}\n\t\t\t}\n\t\t</script>\n\n\t\t<script type=\"module\">\n\t\t\timport {\n\t\t\t\tClassicEditor,\n\t\t\t\tEssentials,\n\t\t\t\tBold,\n\t\t\t\tItalic,\n\t\t\t\tFont,\n\t\t\t\tParagraph\n\t\t\t} from 'ckeditor5';\n\t\t\timport { FormatPainter } from 'ckeditor5-premium-features';\n\n\t\t\tClassicEditor\n\t\t\t\t.create( document.querySelector( '#editor' ), {\n\t\t\t\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\t\t\t\tplugins: [ Essentials, Bold, Italic, Font, Paragraph, FormatPainter ],\n\t\t\t\t\ttoolbar: [\n\t\t\t\t\t\t'undo', 'redo', '|', 'bold', 'italic', '|',\n\t\t\t\t\t\t'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', '|', 'formatPainter'\n\t\t\t\t\t]\n\t\t\t\t} )\n\t\t\t\t.then( /* ... */ )\n\t\t\t\t.catch( /* ... */ );\n\t\t</script>\n\t</body>\n</html>"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Using CKEditor 5 with TypeScript in React",
    "codeDescription": "This code demonstrates how to use CKEditor 5 with TypeScript in a React application. It shows the import of specific types from the CKEditor 5 typings package and their usage in the component.",
    "codeLanguage": "tsx",
    "codeTokens": 324,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/react-default-cdn.md#2025-04-16_snippet_5",
    "pageTitle": "React CKEditor 5 Integration Guide with CDN",
    "codeList": [
      {
        "language": "tsx",
        "code": "import React from 'react';\nimport { CKEditor, useCKEditorCloud } from '@ckeditor/ckeditor5-react';\n\nimport type { EventInfo } from 'https://cdn.ckeditor.com/typings/ckeditor5.d.ts';\n\nconst CKEditorDemo = () => {\n\tconst cloud = useCKEditorCloud( {\n\t\tversion: '{@var ckeditor5-version}',\n\t\ttranslations: [ 'es' ]\n\t} );\n\n\tif ( cloud.status === 'error' ) {\n\t\treturn <div>Error!</div>;\n\t}\n\n\tif ( cloud.status === 'loading' ) {\n\t\treturn <div>Loading...</div>;\n\t}\n\n\tconst {\n\t\tClassicEditor,\n\t\tEssentials,\n\t\tBold,\n\t\tItalic,\n\t\tParagraph\n\t} = cloud.CKEditor;\n\n\treturn (\n\t\t<CKEditor\n\t\t\teditor={ ClassicEditor }\n\t\t\tdata={ '<p>Hello world!</p>' }\n\t\t\tconfig={ {\n\t\t\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\t\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic' ],\n\t\t\t\tplugins: [ Bold, Essentials, Italic, Paragraph ],\n\t\t\t} }\n\t\t\tonBlur={ ( event: EventInfo ) => {\n\t\t\t\t// your event handler\n\t\t\t} }\n\t\t/>\n\t);\n};"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Loading CKEditor 5 JavaScript via CDN",
    "codeDescription": "Imports the CKEditor 5 JavaScript bundle from CDN, exposing the CKEDITOR global variable.",
    "codeLanguage": "html",
    "codeTokens": 66,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/quick-start.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 CDN Installation Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<script src=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.umd.js\"></script>"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Implementing Custom Upload Adapter in JavaScript for CKEditor 5",
    "codeDescription": "This code snippet demonstrates the basic structure of a custom upload adapter class implementing the UploadAdapter interface for CKEditor 5. It includes the constructor, upload method for handling file uploads, and abort method for cancelling uploads.",
    "codeLanguage": "JavaScript",
    "codeTokens": 215,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-image/docs/framework/deep-dive/upload-adapter.md#2025-04-16_snippet_0",
    "pageTitle": "Custom Image Upload Adapter for CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "class MyUploadAdapter {\n\tconstructor( loader ) {\n\t\t// The file loader instance to use during the upload.\n\t\tthis.loader = loader;\n\t}\n\n\t// Starts the upload process.\n\tupload() {\n\t\t// Update the loader's progress.\n\t\tserver.onUploadProgress( data => {\n\t\t\tloader.uploadTotal = data.total;\n\t\t\tloader.uploaded = data.uploaded;\n\t\t} );\n\n\t\t// Return a promise that will be resolved when the file is uploaded.\n\t\treturn loader.file\n\t\t\t.then( file => server.upload( file ) );\n\t}\n\n\t// Aborts the upload process.\n\tabort() {\n\t\t// Reject the promise returned from the upload() method.\n\t\tserver.abortUpload();\n\t}\n}"
      }
    ],
    "relevance": 0.987
  },
  {
    "codeTitle": "Implementing SimpleBoxEditing Plugin using CKEditor5 and JavaScript",
    "codeDescription": "This code snippet demonstrates the implementation of the SimpleBoxEditing plugin in CKEditor5. The plugin utilizes the Widget plugin to convert simple box elements into widgets within the editor. The conversion is defined through the _defineConverters method, which separates the upcast, data downcast, and editing downcast processes. Dependencies include 'ckeditor5' with 'Plugin', 'Widget', 'toWidget', and 'toWidgetEditable', which are crucial for widget transformation. The code ensures elements are correctly rendered with desired properties in both the model and view layers.",
    "codeLanguage": "JavaScript",
    "codeTokens": 876,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/implementing-a-block-widget.md#2025-04-16_snippet_7",
    "pageTitle": "Implementing a Block Widget in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// simplebox/simpleboxediting.js\n\n// ADDED 2 imports.\nimport { Plugin, Widget, toWidget, toWidgetEditable } from 'ckeditor5';\n\nexport default class SimpleBoxEditing extends Plugin {\n\tstatic get requires() {                                                    // ADDED\n\t\treturn [ Widget ];\n\t}\n\n\tinit() {\n\t\tconsole.log( 'SimpleBoxEditing#init() got called' );\n\n\t\tthis._defineSchema();\n\t\tthis._defineConverters();\n\t}\n\n\t_defineSchema() {\n\t\t// Previously registered schema.\n\t\t// ...\n\t}\n\n\t_defineConverters() {                                                      // MODIFIED\n\t\tconst conversion = this.editor.conversion;\n\n\t\t// <simpleBox> converters.\n\t\tconversion.for( 'upcast' ).elementToElement( {\n\t\t\tmodel: 'simpleBox',\n\t\t\tview: {\n\t\t\t\tname: 'section',\n\t\t\t\tclasses: 'simple-box'\n\t\t\t}\n\t\t} );\n\t\tconversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'simpleBox',\n\t\t\tview: {\n\t\t\t\tname: 'section',\n\t\t\t\tclasses: 'simple-box'\n\t\t\t}\n\t\t} );\n\t\tconversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'simpleBox',\n\t\t\tview: ( modelElement, { writer: viewWriter } ) => {\n\t\t\t\tconst section = viewWriter.createContainerElement( 'section', { class: 'simple-box' } );\n\n\t\t\t\treturn toWidget( section, viewWriter, { label: 'simple box widget' } );\n\t\t\t}\n\t\t} );\n\n\t\t// <simpleBoxTitle> converters.\n\t\tconversion.for( 'upcast' ).elementToElement( {\n\t\t\tmodel: 'simpleBoxTitle',\n\t\t\tview: {\n\t\t\t\tname: 'h1',\n\t\t\t\tclasses: 'simple-box-title'\n\t\t\t}\n\t\t} );\n\t\tconversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'simpleBoxTitle',\n\t\t\tview: {\n\t\t\t\tname: 'h1',\n\t\t\t\tclasses: 'simple-box-title'\n\t\t\t}\n\t\t} );\n\t\tconversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'simpleBoxTitle',\n\t\t\tview: ( modelElement, { writer: viewWriter } ) => {\n\t\t\t\t// Note: You use a more specialized createEditableElement() method here.\n\t\t\t\tconst h1 = viewWriter.createEditableElement( 'h1', { class: 'simple-box-title' } );\n\n\t\t\t\treturn toWidgetEditable( h1, viewWriter );\n\t\t\t}\n\t\t} );\n\n\t\t// <simpleBoxDescription> converters.\n\t\tconversion.for( 'upcast' ).elementToElement( {\n\t\t\tmodel: 'simpleBoxDescription',\n\t\t\tview: {\n\t\t\t\tname: 'div',\n\t\t\t\tclasses: 'simple-box-description'\n\t\t\t}\n\t\t} );\n\t\tconversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'simpleBoxDescription',\n\t\t\tview: {\n\t\t\t\tname: 'div',\n\t\t\t\tclasses: 'simple-box-description'\n\t\t\t}\n\t\t} );\n\t\tconversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'simpleBoxDescription',\n\t\t\tview: ( modelElement, { writer: viewWriter } ) => {\n\t\t\t\t// Note: You use a more specialized createEditableElement() method here.\n\t\t\t\tconst div = viewWriter.createEditableElement( 'div', { class: 'simple-box-description' } );\n\n\t\t\t\treturn toWidgetEditable( div, viewWriter );\n\t\t\t}\n\t\t} );\n\t}\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Customizing Editor Settings in CKEditor 5",
    "codeDescription": "Shows comprehensive editor configuration including toolbar setup, heading options, font families, and color picker settings.",
    "codeLanguage": "javascript",
    "codeTokens": 363,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/configuration.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 Feature Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Heading, BlockQuote, Bold, Italic, Font, Link, List } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\ttoolbar: [\n\t\t\t'heading',\n\t\t\t'|',\n\t\t\t'bold',\n\t\t\t'italic',\n\t\t\t'fontSize',\n\t\t\t'fontFamily',\n\t\t\t'fontColor',\n\t\t\t'|',\n\t\t\t'link',\n\t\t\t'bulletedList',\n\t\t\t'numberedList',\n\t\t\t'blockQuote'\n\t\t\t],\n\t\theading: {\n\t\t\toptions: [\n\t\t\t\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n\t\t\t\t{ model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },\n\t\t\t\t{ model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' }\n\t\t\t]\n\t\t},\n\t\tfontFamily: {\n\t\t\toptions: [\n\t\t\t\t'default',\n\t\t\t\t'Ubuntu, Arial, sans-serif',\n\t\t\t\t'Ubuntu Mono, Courier New, Courier, monospace'\n\t\t\t]\n\t\t},\n\t\tfontColor: {\n\t\t\tcolorPicker: {\n\t\t\t\t// Use 'hex' format for output instead of 'hsl'.\n\t\t\t\tformat: 'hex'\n\t\t\t}\n\t\t},\n\t} )\n\t.catch( error => {\n\t\tconsole.log( error );\n\t} );"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Using useCKEditorCloud Function in React/Vue.js",
    "codeDescription": "Example of using the useCKEditorCloud function to load CKEditor 5 resources in React or Vue.js applications. This function handles adding necessary script and stylesheet tags to the page.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/loading-cdn-resources.md#2025-04-16_snippet_0",
    "pageTitle": "Loading CKEditor 5 CDN Resources",
    "codeList": [
      {
        "language": "javascript",
        "code": "const cloud = useCKEditorCloud( {\n\tversion: '{@var ckeditor5-version}',\n\tpremium: true\n} );"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Creating a Custom Highlight Plugin",
    "codeDescription": "Example of creating a basic custom plugin function for CKEditor 5. The plugin logs a message to confirm successful registration.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/crash-course/plugins.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 Plugin Development Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "export function Highlight( editor ) {\n\tconsole.log( 'Highlight plugin has been registered' );\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Integrating CKEditor with ngModel in Angular",
    "codeDescription": "Shows how to use CKEditor with Angular's ngModel for two-way data binding. It includes creating a model in the component and using it in the template.",
    "codeLanguage": "TypeScript",
    "codeTokens": 88,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/angular.md#2025-04-16_snippet_6",
    "pageTitle": "Angular Integration Guide for CKEditor 5",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "@Component( {\n\t// ...\n} )\nexport class MyComponent {\n\tpublic model = {\n\t\teditorData: '<p>Hello, world!</p>'\n\t};\n\t// ...\n}"
      },
      {
        "language": "HTML",
        "code": "<ckeditor [(ngModel)]=\"model.editorData\" [editor]=\"Editor\"></ckeditor>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Getting Editor Instance in Plugin",
    "codeDescription": "Example showing how to access the editor instance within a custom CKEditor 5 plugin",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/how-tos.md#2025-04-16_snippet_3",
    "pageTitle": "CKEditor 5 Framework How-to Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "function MyPlugin(editor) {\n\t// Interact with the API.\n\t// ...\n}\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tplugins: [\n\t\t\tMyPlugin,\n\t\t\t// Other plugins.\n\t\t\t// ...\n\t\t]\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Adding Basic Features to CKEditor 5",
    "codeDescription": "Shows how to import and configure basic editor features like block indentation from the main CKEditor 5 package. Demonstrates plugin import and toolbar configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 163,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/configuration.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Feature Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Indent, IndentBlock, BlockQuote } from 'ckeditor5';\n/* ... */\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Indent, IndentBlock, BlockQuote, /* ... */ ], // Plugins import.\n\t\ttoolbar: [ 'outdent', 'indent', 'blockquote', /* ... */ ] // Toolbar configuration.\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "TypeScript Configuration for CKEditor 5",
    "codeDescription": "Sample TypeScript configuration (tsconfig.json) for use with CKEditor 5. Specifies compiler options and includes/excludes paths.",
    "codeLanguage": "json",
    "codeTokens": 203,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/advanced/integrating-from-source-webpack.md#2025-04-16_snippet_6",
    "pageTitle": "Integrating CKEditor 5 from Source Using Webpack",
    "codeList": [
      {
        "language": "json",
        "code": "{\n\t\"compilerOptions\": {\n\t\t\"types\": [],\n\t\t\"lib\": [\n\t\t\"ES2019\",\n\t\t\"ES2020.String\",\n\t\t\"DOM\",\n\t\t\"DOM.Iterable\"\n\t\t],\n\t\t\"noImplicitAny\": true,\n\t\t\"noImplicitOverride\": true,\n\t\t\"strict\": true,\n\t\t\"module\": \"es6\",\n\t\t\"target\": \"es2019\",\n\t\t\"sourceMap\": true,\n\t\t\"allowJs\": true,\n\t\t\"moduleResolution\": \"node\",\n\t\t\"skipLibCheck\": true\n\t},\n\t\"include\": [\"./**/*.ts\"],\n\t\"exclude\": [\n\t\t\"node_modules/**/*\"\n\t]\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Example Integration of CKEditor 5 DLL with Collaboration Features",
    "codeDescription": "This code demonstrates how to integrate CKEditor 5 with collaboration features using DLL builds. It includes loading the necessary DLL scripts, initializing the editor with the EditorWatchdog, and configuring plugins, toolbar items, and collaboration features.",
    "codeLanguage": "html",
    "codeTokens": 1282,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/advanced/dll-builds-collaboration-features.md#2025-04-16_snippet_0",
    "pageTitle": "DLL Builds for CKEditor 5 Collaboration Features",
    "codeList": [
      {
        "language": "html",
        "code": "<div id=\"presence-list-container\"></div>\n\n<div class=\"container\">\n\t<div id=\"editor\"><p>Let's edit this together!</p></div>\n\t<div class=\"sidebar\" id=\"sidebar\"></div>\n</div>\n\n<!-- Base DLL build. -->\n<!-- Note: It includes ckeditor5-paragraph too. -->\n<script src=\"path/to/node_modules/ckeditor5/build/ckeditor5-dll.js\"></script>\n\n<!-- DLL-compatible build of ckeditor5-editor-classic. -->\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-editor-classic/build/editor-classic.js\"></script>\n\n<!-- DLL-compatible builds of editor features. -->\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-autoformat/build/autoformat.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-basic-styles/build/basic-styles.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-block-quote/build/block-quote.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-essentials/build/essentials.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-heading/build/heading.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-image/build/image.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-indent/build/indent.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-link/build/link.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-list/build/list.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-media-embed/build/media-embed.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-paste-from-office/build/paste-from-office.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-table/build/table.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-cloud-services/build/cloud-services.js\"></script>\n\n<!-- Base DLL build for Collaboration features -->\n<script src=\"path/to/node_modules/ckeditor5-collaboration/build/ckeditor5-collaboration-dll.js\"></script>\n\n<!-- DLL-compatible builds of collaboration features. -->\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-comments/build/comments.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-track-changes/build/track-changes.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-real-time-collaboration/build/real-time-collaboration.js\"></script>\n\n<script>\n\tconst watchdog = new CKEditor5.watchdog.EditorWatchdog( Editor );\n\n\twatchdog.create( document.querySelector( '#editor', {\n\t\tplugins: [\n\t\t\tCKEditor5.autoformat.Autoformat,\n\t\t\tCKEditor5.basicStyles.Bold,\n\t\t\tCKEditor5.basicStyles.Italic,\n\t\t\tCKEditor5.blockQuote.BlockQuote,\n\t\t\tCKEditor5.essentials.Essentials,\n\t\t\tCKEditor5.heading.Heading,\n\t\t\tCKEditor5.image.Image,\n\t\t\tCKEditor5.image.ImageCaption,\n\t\t\tCKEditor5.image.ImageStyle,\n\t\t\tCKEditor5.image.ImageToolbar,\n\t\t\tCKEditor5.image.ImageUpload,\n\t\t\tCKEditor5.indent.Indent,\n\t\t\tCKEditor5.link.Link,\n\t\t\tCKEditor5.list.List,\n\t\t\tCKEditor5.mediaEmbed.MediaEmbed,\n\t\t\tCKEditor5.paragraph.Paragraph,\n\t\t\tCKEditor5.pasteFromOffice.PasteFromOffice,\n\t\t\tCKEditor5.table.Table,\n\t\t\tCKEditor5.table.TableToolbar,\n\t\t\tCKEditor5.cloudServices.CloudServices,\n\t\t\tCKEditor5.comments.Comments,\n\t\t\tCKEditor5.trackChanges.TrackChanges,\n\t\t\tCKEditor5.realTimeCollaboration.RealTimeCollaborativeEditing,\n\t\t\tCKEditor5.realTimeCollaboration.RealTimeCollaborativeComments,\n\t\t\tCKEditor5.realTimeCollaboration.RealTimeCollaborativeTrackChanges,\n\t\t],\n\t\ttoolbar: {\n\t\t\titems: [\n\t\t\t\t'heading',\n\t\t\t\t'|',\n\t\t\t\t'bold',\n\t\t\t\t'italic',\n\t\t\t\t'link',\n\t\t\t\t'bulletedList',\n\t\t\t\t'numberedList',\n\t\t\t\t'|',\n\t\t\t\t'outdent',\n\t\t\t\t'indent',\n\t\t\t\t'|',\n\t\t\t\t'uploadImage',\n\t\t\t\t'blockQuote',\n\t\t\t\t'insertTable',\n\t\t\t\t'mediaEmbed',\n\t\t\t\t'undo',\n\t\t\t\t'redo',\n\t\t\t\t'-',\n\t\t\t\t'comment',\n\t\t\t\t'-',\n\t\t\t\t'trackChanges'\n\t\t\t]\n\t\t},\n\t\timage: {\n\t\t\ttoolbar: [\n\t\t\t\t'imageStyle:inline',\n\t\t\t\t'imageStyle:block',\n\t\t\t\t'imageStyle:side',\n\t\t\t\t'|',\n\t\t\t\t'toggleImageCaption',\n\t\t\t\t'imageTextAlternative'\n\t\t\t]\n\t\t},\n\t\ttable: {\n\t\t\tcontentToolbar: [\n\t\t\t\t'tableColumn',\n\t\t\t\t'tableRow',\n\t\t\t\t'mergeTableCells'\n\t\t\t]\n\t\t},\n\t\tcomments: {\n\t\t\teditorConfig: {\n\t\t\t\textraPlugins: [ CKEditor5.basicStyles.Bold, CKEditor5.basicStyles.Italic, CKEditor5.list.List, CKEditor5.autoformat.Autoformat ]\n\t\t\t}\n\t\t},\n\t\tpresenceList: {\n\t\t\tcontainer: document.querySelector( '#presence-list-container' )\n\t\t},\n\t\tsidebar: {\n\t\t\tcontainer: document.querySelector( '#sidebar' )\n\t\t},\n\t\tcloudServices: {\n\t\t\t// PROVIDE CORRECT VALUES HERE:\n\t\t\ttokenUrl: 'https://example.com/cs-token-endpoint',\n\t\t\tuploadUrl: 'https://your-organization-id.cke-cs.com/easyimage/upload/',\n\t\t\twebSocketUrl: 'your-organization-id.cke-cs.com/ws/'\n\t\t},\n\t\tcollaboration: {\n\t\t\tchannelId: 'document-id'\n\t\t}\n\t} ) );\n</script>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Handling CKEditor Change Event in Angular Component",
    "codeDescription": "Demonstrates how to handle the 'change' event emitted by CKEditor in an Angular component. It shows the component template using the event binding and the corresponding TypeScript code to handle the event.",
    "codeLanguage": "TypeScript",
    "codeTokens": 75,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/angular.md#2025-04-16_snippet_5",
    "pageTitle": "Angular Integration Guide for CKEditor 5",
    "codeList": [
      {
        "language": "HTML",
        "code": "<ckeditor [editor]=\"Editor\" (change)=\"onChange($event)\"></ckeditor>"
      },
      {
        "language": "TypeScript",
        "code": "import { ClassicEditor } from 'ckeditor5';\nimport { ChangeEvent } from '@ckeditor/ckeditor5-angular/ckeditor.component';\n\n@Component( {\n\t// ...\n} )\nexport class MyComponent {\n\tpublic Editor = ClassicEditor;\n\n\tpublic onChange( { editor }: ChangeEvent ) {\n\t\tconst data = editor.getData();\n\n\t\tconsole.log( data );\n\t}\n\t// ...\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "HTML Structure for Simple Box Widget in CKEditor 5",
    "codeDescription": "This HTML snippet demonstrates the structure of a Simple Box widget in CKEditor 5. It includes the necessary CSS styles and an example of the widget's HTML structure in the editor content.",
    "codeLanguage": "html",
    "codeTokens": 379,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/implementing-a-block-widget.md#2025-04-16_snippet_5",
    "pageTitle": "Implementing a Block Widget in CKEditor 5",
    "codeList": [
      {
        "language": "html",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title>CKEditor 5 Framework – Implementing a simple widget</title>\n\n\t\t<style>\n\t\t\t.simple-box {\n\t\t\t\tpadding: 10px;\n\t\t\t\tmargin: 1em 0;\n\n\t\t\t\tbackground: rgba( 0, 0, 0, 0.1 );\n\t\t\t\tborder: solid 1px hsl(0, 0%, 77%);\n\t\t\t\tborder-radius: 2px;\n\t\t\t}\n\n\t\t\t.simple-box-title, .simple-box-description {\n\t\t\t\tpadding: 10px;\n\t\t\t\tmargin: 0;\n\n\t\t\t\tbackground: #FFF;\n\t\t\t\tborder: solid 1px hsl(0, 0%, 77%);\n\t\t\t}\n\n\t\t\t.simple-box-title {\n\t\t\t\tmargin-bottom: 10px;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div id=\"editor\">\n\t\t\t<p>This is a simple box:</p>\n\n\t\t\t<section class=\"simple-box\">\n\t\t\t\t<h1 class=\"simple-box-title\">Box title</h1>\n\t\t\t\t<div class=\"simple-box-description\">\n\t\t\t\t\t<p>The description goes here.</p>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>It can contain lists,</li>\n\t\t\t\t\t\t<li>and other block elements like headings.</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t</div>\n\n\t\t<script src=\"dist/bundle.js\"></script>\n\t</body>\n</html>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Integrating Show Blocks Feature with CKEditor 5 Classic Editor in JavaScript",
    "codeDescription": "This code demonstrates how to install and configure the Show Blocks feature in CKEditor 5 Classic Editor. It imports the necessary modules, adds the ShowBlocks plugin to the editor configuration, and includes the showBlocks button in the toolbar.",
    "codeLanguage": "javascript",
    "codeTokens": 150,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-show-blocks/docs/features/show-blocks.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Show Blocks Feature Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, ShowBlocks } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ ShowBlocks, /* ... */ ],\n\t\ttoolbar: [ 'showBlocks', /* ... */ ],\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Handling Custom Clipboard Input in CKEditor 5",
    "codeDescription": "This JavaScript snippet demonstrates how to use the 'clipboardInput' event to handle custom content types, such as 'application/rtf', during paste or drop operations. It ensures that RTF content is correctly converted and processes it further if present. Assumes the presence of a function 'convertRtfStringToView' for converting RTF to a view document fragment.",
    "codeLanguage": "javascript",
    "codeTokens": 228,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-clipboard/docs/framework/deep-dive/clipboard.md#2025-04-16_snippet_0",
    "pageTitle": "Managing Clipboard Integration with CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.editing.view.document.on( 'clipboardInput', ( evt, data ) => {\n\tconst dataTransfer = data.dataTransfer;\n\tconst rtfContent = dataTransfer.getData( 'application/rtf' );\n\n\t// If no RTF was pasted, abort and let the clipboard feature handle the input.\n\tif ( !rtfContent ) {\n\t\treturn;\n\t}\n\n\t// Convert an RTF raw string to a view document fragment.\n\tconst viewContent = convertRtfStringToView( rtfContent );\n\n\t// Pass the view fragment to the default clipboard input handler\n\t// to allow further processing of the content.\n\tdata.content = viewContent;\n} );"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Creating a Basic CKEditor 5 Plugin in JavaScript",
    "codeDescription": "Demonstrates how to create a basic plugin for CKEditor 5 by extending the Plugin class. The example shows how to define plugin dependencies using the static requires property and how to implement the init method for plugin initialization.",
    "codeLanguage": "javascript",
    "codeTokens": 119,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/core-editor-architecture.md#2025-04-16_snippet_0",
    "pageTitle": "Core Editor Architecture in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import MyDependency from 'some/other/plugin';\n\nclass MyPlugin extends Plugin {\n\tstatic get requires() {\n\t\treturn [ MyDependency ];\n\t}\n\n\tinit() {\n\t\t// Initialize your plugin here.\n\n\t\tthis.editor; // The editor instance which loaded this plugin.\n\t}\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Configuring Webpack for CKEditor 5 (JavaScript)",
    "codeDescription": "Webpack configuration for integrating CKEditor 5 in a JavaScript project. Handles CSS files, SVG icons, and translations.",
    "codeLanguage": "javascript",
    "codeTokens": 380,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/advanced/integrating-from-source-webpack.md#2025-04-16_snippet_3",
    "pageTitle": "Integrating CKEditor 5 from Source Using Webpack",
    "codeList": [
      {
        "language": "javascript",
        "code": "// webpack.config.js\n\nconst path = require( 'path' );\nconst { CKEditorTranslationsPlugin } = require( '@ckeditor/ckeditor5-dev-translations' );\nconst { styles } = require( '@ckeditor/ckeditor5-dev-utils' );\n\nmodule.exports = {\n\tentry: './main.js',\n\toutput: {\n\t\tpath: path.resolve( __dirname, 'dist' ),\n\t\tfilename: 'bundle.js'\n\t},\n\tplugins: [\n\t\t// More plugins.\n\t\t// ...\n\n\t\tnew CKEditorTranslationsPlugin( {\n\t\t\t// See https://ckeditor.com/docs/ckeditor5/latest/features/ui-language.html\n\t\t\tlanguage: 'pl'\n\t\t} )\n\t],\n\tmodule: {\n\t\trules: [\n\t\t\t{\n\t\t\t\ttest: /\\.svg$/,\n\t\t\t\tuse: [ 'raw-loader' ]\n\t\t\t},\n\t\t\t{\n\t\t\t\ttest: /ckeditor5-[^/\\\\]+[/\\\\]theme[/\\\\].+\\.css$/,\n\t\t\t\tuse: [\n\t\t\t\t\t{\n\t\t\t\t\t\tloader: 'style-loader',\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tinjectType: 'singletonStyleTag',\n\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\t'data-cke': true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'css-loader',\n\t\t\t\t\t{\n\t\t\t\t\t\tloader: 'postcss-loader',\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tpostcssOptions: styles.getPostCssConfig( {\n\t\t\t\t\t\t\t\tthemeImporter: {\n\t\t\t\t\t\t\t\t\tthemePath: require.resolve( '@ckeditor/ckeditor5-theme-lark' )\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tminify: true\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t}\n};"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Implementing Multi-Root Editor in React Component",
    "codeDescription": "Example of using the useMultiRootEditor hook in a React component. It demonstrates how to set up the editor with cloud configuration, define plugins, and render the editor elements.",
    "codeLanguage": "JSX",
    "codeTokens": 373,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/react-multiroot-cdn.md#2025-04-16_snippet_1",
    "pageTitle": "React Multi-Root Editor Integration with CDN",
    "codeList": [
      {
        "language": "JSX",
        "code": "import React from \"react\";\nimport { useMultiRootEditor, withCKEditorCloud } from \"@ckeditor/ckeditor5-react\";\n\nconst withCKCloud = withCKEditorCloud( {\n\tcloud: {\n\t\tversion: \"{@var ckeditor5-version}\",\n\t\tlanguages: [ \"es\" ],\n\t\tpremium: true,\n\t},\n\n\t// Optional:\n\trenderError: ( error ) => <div>Error!</div>,\n\n\t// Optional:\n\trenderLoader: () => <div>Loading...</div>,\n} );\n\nconst MultiRootEditorDemo = withCKCloud(\n\t( { data, cloud } ) => {\n\t\tconst {\n\t\t\tMultiRootEditor: MultiRootEditorBase,\n\t\t\tEssentials,\n\t\t\tParagraph\n\t\t\tBold,\n\t\t\tItalic\n\t\t} = cloud.CKEditor;\n\n\t\tconst { FormatPainter } = cloud.CKEditorPremiumFeatures;\n\n\t\tclass MultiRootEditor extends MultiRootEditorBase {\n\t\t\tstatic builtinPlugins = [\n\t\t\t\tEssentials,\n\t\t\t\tParagraph,\n\t\t\t\tBold,\n\t\t\t\tItalic,\n\t\t\t\tFormatPainter\n\t\t\t];\n\n\t\t\tstatic defaultConfig = {\n\t\t\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic', '|', 'formatPainter' ]\n\t\t\t};\n\t\t}\n\n\t\tconst { toolbarElement, editableElements } = useMultiRootEditor( {\n\t\t\teditor: MultiRootEditor,\n\t\t\tdata,\n\t\t} );\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{ toolbarElement }\n\t\t\t\t{ editableElements }\n\t\t\t</div>\n\t\t);\n\t}\n);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Initializing CKEditor with JavaScript Configuration",
    "codeDescription": "Demonstrates how to initialize CKEditor with initial data using JavaScript configuration. This method is useful when loading data asynchronously or when HTML cannot be modified.",
    "codeLanguage": "javascript",
    "codeTokens": 125,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/getting-and-setting-data.md#2025-04-16_snippet_1",
    "pageTitle": "Data Handling Guide for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ /* ... */ ],\n\t\ttoolbar: [ /* ... */ ],\n\t\tinitialData: '<p>Hello, world!</p>'\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Direct CKEditor 5 Initialization with Plugins (TypeScript)",
    "codeDescription": "This TypeScript snippet shows how to initialize CKEditor 5 directly using the ClassicEditor class, without creating an intermediary subclass. It includes plugin configuration and toolbar setup within the create method, with TypeScript-specific type assertions.",
    "codeLanguage": "typescript",
    "codeTokens": 369,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/advanced/integrating-from-source-webpack.md#2025-04-16_snippet_12",
    "pageTitle": "Integrating CKEditor 5 from Source Using Webpack",
    "codeList": [
      {
        "language": "typescript",
        "code": "// main.ts\n\nimport { ClassicEditor } from '@ckeditor/ckeditor5-editor-classic';\nimport { Essentials } from '@ckeditor/ckeditor5-essentials';\nimport { Autoformat } from '@ckeditor/ckeditor5-autoformat';\nimport { Bold, Italic } from '@ckeditor/ckeditor5-basic-styles';\nimport { BlockQuote } from '@ckeditor/ckeditor5-block-quote';\nimport { Heading } from '@ckeditor/ckeditor5-heading';\nimport { Link } from '@ckeditor/ckeditor5-link';\nimport { List } from '@ckeditor/ckeditor5-list';\nimport { Paragraph } from '@ckeditor/ckeditor5-paragraph';\n\nClassicEditor\n\t.create( document.querySelector( '#app') as HTMLElement, {\n\t\t// The plugins are now passed directly to .create().\n\t\tplugins: [\n\t\t\tEssentials,\n\t\t\tAutoformat,\n\t\t\tBold,\n\t\t\tItalic,\n\t\t\tBlockQuote,\n\t\t\tHeading,\n\t\t\tLink,\n\t\t\tList,\n\t\t\tParagraph\n\t\t],\n\n\t\t// So is the rest of the default configuration.\n\t\ttoolbar: [\n\t\t\t'heading',\n\t\t\t'bold',\n\t\t\t'italic',\n\t\t\t'link',\n\t\t\t'bulletedList',\n\t\t\t'numberedList',\n\t\t\t'blockQuote',\n\t\t\t'undo',\n\t\t\t'redo'\n\t\t]\n\t} )\n\t.then( editor => {\n\t\tconsole.log( editor );\n\t} )\n\t.catch( error => {\n\t\tconsole.error( error );\n\t} );"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Importing CKFinder and CKFinderUploadAdapter in CKEditor 5",
    "codeDescription": "This code snippet demonstrates how to import the necessary modules (CKFinder and CKFinderUploadAdapter) from the 'ckeditor5' package to enable CKFinder integration within a CKEditor 5 instance. It also shows adding the plugins and toolbar options. This is required to use CKFinder for file management and image uploads.",
    "codeLanguage": "javascript",
    "codeTokens": 198,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-ckfinder/docs/features/ckfinder.md#2025-04-16_snippet_0",
    "pageTitle": "CKFinder File Manager Integration in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, CKFinder, CKFinderUploadAdapter } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\tplugins: [ CKFinder, CKFinderUploadAdapter, /* ... */ ],\n\t\ttoolbar: [ 'ckfinder', 'uploadImage', /* ... */ ], // Depending on your preference.\n\t\tckfinder: {\n\t\t\t// Configuration.\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Basic CKEditor 5 integration in React component",
    "codeDescription": "Example of using the CKEditor component in a React application with both open-source and premium plugins. Includes editor configuration with license key, plugins, toolbar settings, and initial data.",
    "codeLanguage": "jsx",
    "codeTokens": 238,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/react-default-npm.md#2025-04-16_snippet_2",
    "pageTitle": "React Rich Text Editor Component with npm Integration",
    "codeList": [
      {
        "language": "jsx",
        "code": "import { CKEditor } from '@ckeditor/ckeditor5-react';\nimport { ClassicEditor, Essentials, Paragraph, Bold, Italic } from 'ckeditor5';\nimport { FormatPainter } from 'ckeditor5-premium-features';\n\nimport 'ckeditor5/ckeditor5.css';\nimport 'ckeditor5-premium-features/ckeditor5-premium-features.css';\n\nfunction App() {\n\treturn (\n\t\t<CKEditor\n\t\t\teditor={ ClassicEditor }\n\t\t\tconfig={ {\n\t\t\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\t\t\tplugins: [ Essentials, Paragraph, Bold, Italic, FormatPainter ],\n\t\t\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic', '|', 'formatPainter' ],\n\t\t\t\tinitialData: '<p>Hello from CKEditor 5 in React!</p>',\n\t\t\t} }\n\t\t/>\n\t);\n}\n\nexport default App;"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Inserting Content into CKEditor 5",
    "codeDescription": "Multiple examples showing different ways to insert content into the editor, including links, plain text, and HTML",
    "codeLanguage": "javascript",
    "codeTokens": 103,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/how-tos.md#2025-04-16_snippet_5",
    "pageTitle": "CKEditor 5 Framework How-to Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.model.change( writer => {\n\tconst insertPosition = editor.model.document.selection.getFirstPosition();\n\n\tconst myLink = writer.createText(\n\t\t'CKEditor 5 rocks!',\n\t\t{ linkHref: 'https://ckeditor.com/' }\n\t);\n\n\teditor.model.insertContent( myLink, insertPosition )\n} );"
      },
      {
        "language": "javascript",
        "code": "const content =\n\t'<p>A paragraph with <a href=\"https://ckeditor.com\">some link</a>.</p>';\nconst viewFragment = editor.data.processor.toView( content );\nconst modelFragment = editor.data.toModel( viewFragment );\n\neditor.model.insertContent( modelFragment );"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Initializing CKEditor 5 with basic configuration",
    "codeDescription": "JavaScript code to import necessary modules, configure, and initialize CKEditor 5 with basic plugins and toolbar items.",
    "codeLanguage": "javascript",
    "codeTokens": 180,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/quick-start.md#2025-04-16_snippet_1",
    "pageTitle": "Installing Vanilla JS CKEditor 5 using npm or ZIP",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Essentials, Bold, Italic, Font, Paragraph } from 'ckeditor5';\n\nimport 'ckeditor5/ckeditor5.css';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Essentials, Bold, Italic, Font, Paragraph ],\n\t\ttoolbar: [\n\t\t\t'undo', 'redo', '|', 'bold', 'italic', '|',\n\t\t\t'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor'\n\t\t]\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Implementing Save Button and Page Protection in CKEditor 5",
    "codeDescription": "Complete implementation showing how to initialize CKEditor 5 with save functionality, handle pending actions, and prevent accidental page leaves. Includes editor initialization, save button handling, status updates, and beforeunload event management.",
    "codeLanguage": "javascript",
    "codeTokens": 697,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/getting-and-setting-data.md#2025-04-16_snippet_7",
    "pageTitle": "Data Handling Guide for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, PendingActions } from 'ckeditor5';\n\nlet isDirty = false;\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tplugins: [\n\t\t\tPendingActions,\n\n\t\t\t// ... other plugins\n\t\t]\n\t} )\n\t.then( editor => {\n\t\twindow.editor = editor;\n\n\t\thandleStatusChanges( editor );\n\t\thandleSaveButton( editor );\n\t\thandleBeforeunload( editor );\n\t} )\n\t.catch( err => {\n\t\tconsole.error( err.stack );\n\t} );\n\n// Handle clicking the \"Save\" button by sending the data to a\n// fake HTTP server (emulated here with setTimeout()).\nfunction handleSaveButton( editor ) {\n\tconst saveButton = document.querySelector( '#save' );\n\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n\n\tsaveButton.addEventListener( 'click', evt => {\n\t\tconst data = editor.getData();\n\n\t\t// Register the action of saving the data as a \"pending action\".\n\t\t// All asynchronous actions related to the editor are tracked like this,\n\t\t// so later on you only need to check `pendingActions.hasAny` to check\n\t\t// whether the editor is busy or not.\n\t\tconst action = pendingActions.add( 'Saving changes' );\n\n\t\tevt.preventDefault();\n\n\t\t// Save the data to a fake HTTP server.\n\t\tsetTimeout( () => {\n\t\t\tpendingActions.remove( action );\n\n\t\t\t// Reset isDirty only if the data did not change in the meantime.\n\t\t\tif ( data == editor.getData() ) {\n\t\t\t\tisDirty = false;\n\t\t\t}\n\n\t\t\tupdateStatus( editor );\n\t\t}, HTTP_SERVER_LAG );\n\t} );\n}\n\n// Listen to new changes (to enable the \"Save\" button) and to\n// pending actions (to show the spinner animation when the editor is busy).\nfunction handleStatusChanges( editor ) {\n\teditor.plugins.get( 'PendingActions' ).on( 'change:hasAny', () => updateStatus( editor ) );\n\n\teditor.model.document.on( 'change:data', () => {\n\t\tisDirty = true;\n\n\t\tupdateStatus( editor );\n\t} );\n}\n\n// If the user tries to leave the page before the data is saved, ask\n// them whether they are sure they want to proceed.\nfunction handleBeforeunload( editor ) {\n\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n\n\twindow.addEventListener( 'beforeunload', evt => {\n\t\tif ( pendingActions.hasAny ) {\n\t\t\tevt.preventDefault();\n\t\t}\n\t} );\n}\n\nfunction updateStatus( editor ) {\n\tconst saveButton = document.querySelector( '#save' );\n\n\t// Disables the \"Save\" button when the data on the server is up to date.\n\tif ( isDirty ) {\n\t\tsaveButton.classList.add( 'active' );\n\t} else {\n\t\tsaveButton.classList.remove( 'active' );\n\t}\n\n\t// Shows the spinner animation.\n\tif ( editor.plugins.get( 'PendingActions' ).hasAny ) {\n\t\tsaveButton.classList.add( 'saving' );\n\t} else {\n\t\tsaveButton.classList.remove( 'saving' );\n\t}\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Extending CKEditor Translations Object Safely",
    "codeDescription": "Demonstrates how to safely extend the existing translations object with new translations while preserving existing ones using Object.assign().",
    "codeLanguage": "javascript",
    "codeTokens": 173,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/deep-dive/localization.md#2025-04-16_snippet_5",
    "pageTitle": "Localization in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Make sure that the global object is defined. If not, define it.\nwindow.CKEDITOR_TRANSLATIONS = window.CKEDITOR_TRANSLATIONS || {};\n\n// Make sure that the dictionary for Polish translations exist.\nwindow.CKEDITOR_TRANSLATIONS[ 'pl' ] = window.CKEDITOR_TRANSLATIONS[ 'pl' ] || {};\nwindow.CKEDITOR_TRANSLATIONS[ 'pl' ].dictionary =  window.CKEDITOR_TRANSLATIONS[ 'pl' ].dictionary || {};\n\n// Extend the dictionary for Polish translations with your translations:\nObject.assign( window.CKEDITOR_TRANSLATIONS[ 'pl' ].dictionary, {\n\t'Save': 'Zapisz'\n} );"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Setting Up HTML Structure for Multi-Root Editor",
    "codeDescription": "This HTML snippet sets up the structure required for a multi-root editor. It includes sections like toolbar, header, content, and footer, styled to showcase different functionalities of the editor. The various HTML elements serve as placeholders for editor root elements and must be accessible in the JavaScript initialization.",
    "codeLanguage": "html",
    "codeTokens": 434,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/custom-editor-creator.md#2025-04-16_snippet_3",
    "pageTitle": "Implementing a Custom Editor Creator in CKEditor 5",
    "codeList": [
      {
        "language": "html",
        "code": "<div id=\"toolbar\"></div>\n\n<header id=\"header\">\n\t<h2>Gone traveling</h2>\n\t<h3>Monthly travel news and inspiration</h3>\n</header>\n\n<div id=\"content\">\n\t<h3>Destination of the Month</h3>\n\n\t<h4>Valletta</h4>\n\n\t<figure class=\"image image-style-align-right\">\n\t\t<img alt=\"Picture of a sunlit facade of a Maltan building.\" src=\"%BASE_PATH%/assets/img/malta.jpg\">\n\t\t<figcaption>It's siesta time in Valletta.</figcaption>\n\t</figure>\n\n\t<p>The capital city of <a href=\"https://en.wikipedia.org/wiki/Malta\" target=\"_blank\" rel=\"external\">Malta</a> is the top destination this summer. It’s home to a cutting-edge contemporary architecture, baroque masterpieces, delicious local cuisine, and at least 8 months of sun. It’s also a top destination for filmmakers, so you can take a tour through locations familiar to you from Game of Thrones, Gladiator, Troy and many more.</p>\n</div>\n\n<div class=\"demo-row\">\n\t<div class=\"demo-row__half\">\n\t\t<div id=\"footer-left\">\n\t\t\t<h3>The three greatest things you learn from traveling</h3>\n\t\t\t<p><a href=\"#\">Find out more</a></p>\n\t\t</div>\n\t</div>\n\n\t<div class=\"demo-row__half\">\n\t\t<div id=\"footer-right\">\n\t\t\t<h3>Walking the capitals of Europe: Warsaw</h3>\n\t\t\t<p><a href=\"#\">Find out more</a></p>\n\t\t</div>\n\t</div>\n</div>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Configuring CKEditor Superbuild with Premium Features",
    "codeDescription": "Comprehensive CKEditor configuration that extends multiple editor types (Classic, Inline, Balloon, Decoupled) with a full suite of plugins including premium features. Defines specialized configurations for different editor types with extensive toolbar options and features.",
    "codeLanguage": "javascript",
    "codeTokens": 1668,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/updating/nim-migration/predefined-builds.md#2025-04-16_snippet_28",
    "pageTitle": "Migrating from CKEditor 5 Predefined Builds to New Installation Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "const {\n\tClassicEditor: ClassicEditorBase,\n\tInlineEditor: InlineEditorBase,\n\tBalloonEditor: BalloonEditorBase,\n\tDecoupledEditor: DecoupledEditorBase,\n\tCKFinderUploadAdapter,\n\tAlignment,\n\tAutoformat,\n\tBold,\n\tItalic,\n\tUnderline,\n\tStrikethrough,\n\tSuperscript,\n\tSubscript,\n\tCode,\n\tBlockQuote,\n\tCKBox,\n\tCKBoxImageEdit,\n\tCKFinder,\n\tCloudServices,\n\tCodeBlock,\n\tEasyImage,\n\tEssentials,\n\tHeading,\n\tImage,\n\tImageCaption,\n\tImageStyle,\n\tImageToolbar,\n\tAutoImage,\n\tImageResize,\n\tImageUpload,\n\tImageInsert,\n\tPictureEditing,\n\tIndent,\n\tIndentBlock,\n\tTextPartLanguage,\n\tLink,\n\tAutoLink,\n\tLinkImage,\n\tList,\n\tListProperties,\n\tTodoList,\n\tMediaEmbed,\n\tParagraph,\n\tFindAndReplace,\n\tFontBackgroundColor,\n\tFontColor,\n\tFontFamily,\n\tFontSize,\n\tHighlight,\n\tHorizontalLine,\n\tHtmlEmbed,\n\tGeneralHtmlSupport,\n\tHtmlComment,\n\tMention,\n\tPageBreak,\n\tPasteFromOffice,\n\tRemoveFormat,\n\tStandardEditingMode,\n\tShowBlocks,\n\tStyle,\n\tSourceEditing,\n\tSpecialCharacters,\n\tSpecialCharactersEssentials,\n\tTable,\n\tTableToolbar,\n\tTableCellProperties,\n\tTableProperties,\n\tTableCaption,\n\tTableColumnResize,\n\tTextTransformation,\n\tWordCount,\n\tBase64UploadAdapter\n} = CKEDITOR;\n\nconst {\n\tAIAssistant,\n\tOpenAITextAdapter,\n\tCaseChange,\n\tComments,\n\tExportPdf,\n\tExportWord,\n\tMultiLevelList,\n\tPagination,\n\tRealTimeCollaborativeComments,\n\tRealTimeCollaborativeRevisionHistory,\n\tRealTimeCollaborativeTrackChanges,\n\tRevisionHistory,\n\tTrackChanges,\n\tTrackChangesData\n} = CKEDITOR_PREMIUM_FEATURES;\n\nclass ClassicEditor extends ClassicEditorBase {}\n\nclass InlineEditor extends InlineEditorBase {}\n\nclass BalloonEditor extends BalloonEditorBase {}\n\nclass DecoupledEditor extends DecoupledEditorBase {}\n\nfor ( const Editor of [ ClassicEditor, InlineEditor, BalloonEditor, DecoupledEditor ] ) {\n\t// Plugins to include in the build.\n\tEditor.builtinPlugins = [\n\t\tAIAssistant, OpenAITextAdapter,\n\t\tBase64UploadAdapter,\n\t\tAlignment,\n\t\tAutoformat,\n\t\tBold, Italic, Underline, Strikethrough, Superscript, Subscript, Code,\n\t\tBlockQuote,\n\t\tCKBox, CKBoxImageEdit,\n\t\tCKFinder, CKFinderUploadAdapter,\n\t\tCloudServices,\n\t\tCodeBlock,\n\t\tComments,\n\t\tEasyImage,\n\t\tEssentials,\n\t\tExportPdf,\n\t\tExportWord,\n\t\tHeading,\n\t\tImage, ImageCaption, ImageStyle, ImageToolbar, AutoImage, ImageResize, ImageUpload, ImageInsert, PictureEditing,\n\t\tIndent, IndentBlock,\n\t\tTextPartLanguage,\n\t\tLink, AutoLink, LinkImage,\n\t\tList, ListProperties, TodoList,\n\t\tMultiLevelList,\n\t\tMediaEmbed,\n\t\tParagraph,\n\t\tFindAndReplace,\n\t\tFontBackgroundColor, FontColor, FontFamily, FontSize,\n\t\tHighlight,\n\t\tHorizontalLine,\n\t\tHtmlEmbed,\n\t\tGeneralHtmlSupport, HtmlComment,\n\t\tMention,\n\t\tPageBreak,\n\t\tPasteFromOffice,\n\t\tPagination,\n\t\tRealTimeCollaborativeComments, RealTimeCollaborativeRevisionHistory, RealTimeCollaborativeTrackChanges, PresenceList,\n\t\tRemoveFormat,\n\t\tRevisionHistory,\n\t\tStandardEditingMode,\n\t\tShowBlocks,\n\t\tStyle,\n\t\tSpecialCharacters, SpecialCharactersEssentials,\n\t\tTable, TableToolbar, TableCellProperties, TableProperties, TableCaption, TableColumnResize,\n\t\tTrackChanges, TrackChangesData,\n\t\tTextTransformation,\n\t\tWordCount,\n\t\tDocumentOutline, TableOfContents, FormatPainter, Template, SlashCommand, PasteFromOfficeEnhanced, CaseChange\n\t];\n\n\tEditor.defaultConfig = {\n\t\ttoolbar: [\n\t\t\t'aiCommands', 'aiAssistant',\n\t\t\t'|',\n\t\t\t// Productivity pack.\n\t\t\t'tableOfContents', 'formatPainter', 'insertTemplate', 'caseChange',\n\t\t\t'|',\n\t\t\t'pagination',\n\t\t\t'|',\n\t\t\t'trackChanges', 'revisionHistory', 'comment',\n\t\t\t'|',\n\t\t\t'heading', 'style',\n\t\t\t'|',\n\t\t\t'removeFormat', 'bold', 'italic', 'strikethrough', 'underline', 'code', 'subscript', 'superscript', 'link',\n\t\t\t'|',\n\t\t\t'highlight', 'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor',\n\t\t\t'|',\n\t\t\t'bulletedList', 'numberedList', 'multiLevelList', 'todoList',\n\t\t\t'|',\n\t\t\t'blockQuote', 'uploadImage', 'insertTable', 'mediaEmbed', 'codeBlock',\n\t\t\t'|',\n\t\t\t'htmlEmbed',\n\t\t\t'|',\n\t\t\t'alignment', 'outdent', 'indent',\n\t\t\t'|',\n\t\t\t'pageBreak', 'horizontalLine', 'specialCharacters',\n\t\t\t'|',\n\t\t\t'textPartLanguage',\n\t\t\t'|',\n\t\t\t'showBlocks',\n\t\t\t'|',\n\t\t\t'undo', 'redo', 'findAndReplace'\n\t\t],\n\t\ttable: {\n\t\t\tcontentToolbar: [\n\t\t\t\t'tableColumn', 'tableRow', 'mergeTableCells', 'tableProperties', 'tableCellProperties', 'toggleTableCaption'\n\t\t\t]\n\t\t},\n\t\timage: {\n\t\t\tstyles: [\n\t\t\t\t'alignCenter',\n\t\t\t\t'alignLeft',\n\t\t\t\t'alignRight'\n\t\t\t],\n\t\t\tresizeOptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'resizeImage:original',\n\t\t\t\t\tlabel: 'Original size',\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'resizeImage:50',\n\t\t\t\t\tlabel: '50%',\n\t\t\t\t\tvalue: '50'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'resizeImage:75',\n\t\t\t\t\tlabel: '75%',\n\t\t\t\t\tvalue: '75'\n\t\t\t\t}\n\t\t\t],\n\t\t\ttoolbar: [\n\t\t\t\t'imageTextAlternative', 'toggleImageCaption', '|',\n\t\t\t\t'imageStyle:inline', 'imageStyle:wrapText', 'imageStyle:breakText', 'imageStyle:side', '|',\n\t\t\t\t'resizeImage', '|',\n\t\t\t\t'ckboxImageEdit'\n\t\t\t],\n\t\t\tinsert: {\n\t\t\t\tintegrations: [\n\t\t\t\t\t'insertImageViaUrl'\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\tcomments: {\n\t\t\teditorConfig: {\n\t\t\t\textraPlugins: [ Bold, Italic, Underline, List ]\n\t\t\t}\n\t\t},\n\t\tplaceholder: 'Type the content here!',\n\t\tlanguage: 'en'\n\t};\n\n\t// Enable the `SourceEditing` plugin for ClassicEditor only.\n\tif ( Editor === ClassicEditor ) {\n\t\tEditor.builtinPlugins.push( SourceEditing );\n\n\t\tEditor.defaultConfig.toolbar.push( '|', 'sourceEditing' );\n\t}\n\n\t// Enable the `Pagination` plugin for DecoupledEditor only.\n\tif ( Editor === DecoupledEditor ) {\n\t\tEditor.builtinPlugins.push( Pagination );\n\n\t\tEditor.defaultConfig.toolbar.unshift( 'sourceEditing', '|' );\n\n\t\tEditor.defaultConfig.pagination = {\n\t\t\t// A4\n\t\t\tpageWidth: '21cm',\n\t\t\tpageHeight: '29.7cm',\n\n\t\t\tpageMargins: {\n\t\t\t\ttop: '20mm',\n\t\t\t\tbottom: '20mm',\n\t\t\t\tright: '12mm',\n\t\t\t\tleft: '12mm'\n\t\t\t}\n\t\t};\n\t}\n}"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Localizing CKEditor 5 in Vue 2",
    "codeDescription": "This snippet shows how to implement localization for CKEditor 5 in a Vue 2 application. It includes importing translation files, setting up the editor configuration, and passing translations to the CKEditor component.",
    "codeLanguage": "html",
    "codeTokens": 221,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/vuejs-v2.md#2025-04-16_snippet_5",
    "pageTitle": "Vue.js 2.x CKEditor 5 Integration Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<template>\n\t<ckeditor :editor=\"editor\" v-model=\"editorData\" :config=\"editorConfig\" />\n</template>\n\n<script>\nimport { ClassicEditor, Bold, Essentials, Italic, Paragraph } from 'ckeditor5';\n// More imports...\n\nimport coreTranslations from 'ckeditor5/translations/es.js';\nimport premiumFeaturesTranslations from 'ckeditor5-premium-features/translations/es.js';\n\nexport default {\n\tname: 'app',\n\tdata() {\n\t\treturn {\n\t\t\teditor: ClassicEditor,\n\t\t\teditorData: '<p>Hola desde CKEditor 5 en Vue 2!</p>',\n\t\t\teditorConfig: {\n\t\t\t\t// ... Other configuration options ...\n\t\t\t\ttranslations: [ coreTranslations, premiumFeaturesTranslations ]\n\t\t\t}\n\t\t};\n\t}\n};\n</script>"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Adding Regenerator Runtime to Webpack Entry Point",
    "codeDescription": "This JavaScript snippet demonstrates how to include the regenerator-runtime in the Webpack entry point, which is necessary for enabling support for ES6 generators after code transpilation.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/advanced/integrating-from-source-webpack.md#2025-04-16_snippet_17",
    "pageTitle": "Integrating CKEditor 5 from Source Using Webpack",
    "codeList": [
      {
        "language": "javascript",
        "code": "entry: [\n\trequire.resolve( 'regenerator-runtime/runtime.js' ),\n\n\t// Your entries.\n\t// ...\n]"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Localizing Plugin UI in CKEditor 5",
    "codeDescription": "Shows how to create a localizable user interface for a plugin in CKEditor 5. The example creates a button with a localizable tooltip for inserting a smiling face emoji.",
    "codeLanguage": "JavaScript",
    "codeTokens": 167,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/deep-dive/localization.md#2025-04-16_snippet_1",
    "pageTitle": "Localization in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.ui.componentFactory.add( 'smilingFaceEmoji', locale => {\n\tconst buttonView = new ButtonView( locale );\n\n\t// The translation function.\n\tconst { t } = editor.locale;\n\n\t// The localized label.\n\tconst label = t( 'Insert smiling face emoji' );\n\n\tbuttonView.set( {\n\t\tlabel,\n\t\ticon: emojiIcon,\n\t\ttooltip: true\n\t} );\n\n\tbuttonView.on( 'execute', () => {\n\t\teditor.execute( 'insertSmilingFaceEmoji' );\n\t\teditor.editing.view.focus();\n\t} );\n} );"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Configuring loadCKEditorCloud Function with All Options",
    "codeDescription": "Comprehensive example showing all available options for the loadCKEditorCloud function, including version specification, translations, premium features, CKBox integration, and custom plugin loading.",
    "codeLanguage": "javascript",
    "codeTokens": 242,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/loading-cdn-resources.md#2025-04-16_snippet_3",
    "pageTitle": "Loading CKEditor 5 CDN Resources",
    "codeList": [
      {
        "language": "javascript",
        "code": "{\n\tversion: '{@var ckeditor5-version}',\n\ttranslations: [ 'es', 'de' ],\n\tpremium: true,\n\tckbox: {\n\t\tversion: '2.5.1',\n\t\ttheme: 'lark' // Optional, default 'lark'.\n\t},\n\tplugins: {\n\t\tThirdPartyPlugin: [\n\t\t\t'https://cdn.example.com/plugin.umd.js',\n\t\t\t'https://cdn.example.com/plugin.css'\n\t\t],\n\t\tAnotherPlugin: () => import( './path/to/plugin.umd.js' ),\n\t\tYetAnotherPlugin: {\n\t\t\tscripts: [ 'https://cdn.example.com/plugin.umd.js' ],\n\t\t\tstylesheets: [ 'https://cdn.example.com/plugin.css' ],\n\n\t\t\t// Optional, if it's not passed then the name of the plugin will be used.\n\t\t\tcheckPluginLoaded: () => window.PLUGIN_NAME\n\t\t}\n\t}\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Setting Simple Upload Configuration in CKEditor 5 - JavaScript",
    "codeDescription": "This snippet provides a configuration example for the Simple Upload Adapter in CKEditor 5. It sets key configurations such as the image upload URL, credentials flag, and custom headers for HTTP requests. These settings enable the editor to send authenticated upload requests. Configuration options like 'uploadUrl' and 'headers' are customizable to fit server-side requirements.",
    "codeLanguage": "JavaScript",
    "codeTokens": 223,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-upload/docs/features/simple-upload-adapter.md#2025-04-16_snippet_1",
    "pageTitle": "Implementing Simple Upload Adapter in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\tsimpleUpload: {\n\t\t\t// The URL that the images are uploaded to.\n\t\t\tuploadUrl: 'http://example.com',\n\n\t\t\t// Enable the XMLHttpRequest.withCredentials property.\n\t\t\twithCredentials: true,\n\n\t\t\t// Headers sent along with the XMLHttpRequest to the upload server.\n\t\t\theaders: {\n\t\t\t\t'X-CSRF-TOKEN': 'CSRF-Token',\n\t\t\t\tAuthorization: 'Bearer <JSON Web Token>'\n\t\t\t}\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Configuring Webpack for CKEditor 5 (TypeScript)",
    "codeDescription": "Webpack configuration for integrating CKEditor 5 in a TypeScript project. Includes TypeScript-specific settings in addition to CSS, SVG, and translation handling.",
    "codeLanguage": "javascript",
    "codeTokens": 450,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/advanced/integrating-from-source-webpack.md#2025-04-16_snippet_4",
    "pageTitle": "Integrating CKEditor 5 from Source Using Webpack",
    "codeList": [
      {
        "language": "javascript",
        "code": "// webpack.config.js\n\nconst path = require( 'path' );\nconst { CKEditorTranslationsPlugin } = require( '@ckeditor/ckeditor5-dev-translations' );\nconst { styles } = require( '@ckeditor/ckeditor5-dev-utils' );\n\nmodule.exports = {\n\tentry: './main.ts',\n\toutput: {\n\t\tpath: path.resolve( __dirname, 'dist' ),\n\t\tfilename: 'bundle.js'\n\t},\n\tplugins: [\n\t\t// More plugins.\n\t\t// ...\n\n\t\tnew CKEditorTranslationsPlugin( {\n\t\t\t// See https://ckeditor.com/docs/ckeditor5/latest/features/ui-language.html\n\t\t\tlanguage: 'pl'\n\t\t} )\n\t],\n\tresolve: {\n\t\textensions: [ '.ts', '.js', '.json' ],\n\t\textensionAlias: {\n\t\t\t'.js': [ '.js', '.ts' ]\n\t\t}\n\t},\n\tmodule: {\n\t\trules: [\n\t\t\t{\n\t\t\t\ttest: /\\.ts/,\n\t\t\t\tuse: [ 'ts-loader' ]\n\t\t\t},\n\t\t\t{\n\t\t\t\ttest: /\\.svg$/,\n\n\t\t\t\tuse: [ 'raw-loader' ]\n\t\t\t},\n\t\t\t{\n\t\t\t\ttest: /ckeditor5-[^/\\\\]+[/\\\\]theme[/\\\\].+\\.css$/,\n\n\t\t\t\tuse: [\n\t\t\t\t\t{\n\t\t\t\t\t\tloader: 'style-loader',\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tinjectType: 'singletonStyleTag',\n\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\t'data-cke': true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'css-loader',\n\t\t\t\t\t{\n\t\t\t\t\t\tloader: 'postcss-loader',\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tpostcssOptions: styles.getPostCssConfig( {\n\t\t\t\t\t\t\t\tthemeImporter: {\n\t\t\t\t\t\t\t\t\tthemePath: require.resolve( '@ckeditor/ckeditor5-theme-lark' )\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tminify: true\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t}\n};"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Creating and Managing Context with ContextWatchdog in JavaScript",
    "codeDescription": "This code snippet demonstrates initializing and managing multiple editors within a shared context using the ContextWatchdog in CKEditor 5. It requires importing the necessary CKEditor components and involves creating an instance of ContextWatchdog, initializing it with the context configuration, and adding editor instances with configurations for plugins and toolbars. This setup is particularly useful for applications with multiple related editor instances, enabling synchronized error handling and recovery.",
    "codeLanguage": "JavaScript",
    "codeTokens": 564,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-watchdog/docs/features/watchdog.md#2025-04-16_snippet_1",
    "pageTitle": "Managing Editor Instances Using Watchdog in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { ClassicEditor, ContextWatchdog, Bold, Italic, Context, Essentials, Paragraph } from 'ckeditor5';\n\n// Create a context watchdog and pass the context class with optional watchdog configuration:\nconst watchdog = new ContextWatchdog( Context, {\n\tcrashNumberLimit: 10\n} );\n\n// Initialize the watchdog with the context configuration:\nawait watchdog.create( {\n\tplugins: [\n\t\t// A list of plugins for the context.\n\t\t// ...\n\t],\n\t// More configuration options for the plugin.\n\t// ...\n} );\n\n// Add editor instances.\n// You may also use multiple `ContextWatchdog#add()` calls, each adding a single editor.\nawait watchdog.add( [ {\n\tid: 'editor1',\n\ttype: 'editor',\n\tsourceElementOrData: document.querySelector( '#editor' ),\n\tconfig: {\n\t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n\t\ttoolbar: [ 'bold', 'italic', 'alignment' ]\n\t},\n\tcreator: ( element, config ) => ClassicEditor.create( element, config )\n}, {\n\tid: 'editor2',\n\ttype: 'editor',\n\tsourceElementOrData: document.querySelector( '#editor' ),\n\tconfig: {\n\t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n\t\ttoolbar: [ 'bold', 'italic', 'alignment' ]\n\t},\n\tcreator: ( element, config ) => ClassicEditor.create( element, config )\n} ] );\n\n// Or:\nawait watchdog.add( {\n\tid: 'editor1',\n\ttype: 'editor',\n\tsourceElementOrData: document.querySelector( '#editor' ),\n\tconfig: {\n\t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n\t\ttoolbar: [ 'bold', 'italic', 'alignment' ]\n\t},\n\tcreator: ( element, config ) => ClassicEditor.create( element, config )\n} );\n\nawait watchdog.add( {\n\tid: 'editor2',\n\ttype: 'editor',\n\tsourceElementOrData: document.querySelector( '#editor' ),\n\tconfig: {\n\t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n\t\ttoolbar: [ 'bold', 'italic', 'alignment' ]\n\t},\n\tcreator: ( element, config ) => ClassicEditor.create( element, config )\n} );"
      },
      {
        "language": "JavaScript",
        "code": "await watchdog.remove( [ 'editor1', 'editor2' ] );\n\n// Or:\nawait watchdog.remove( 'editor1' );\nawait watchdog.remove( 'editor2' );"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Implementing Split Button Dropdown in CKEditor 5",
    "codeDescription": "Creates a split button dropdown that has two clickable sections - one for main action and another for expanding additional options. Shows integration with toolbar items.",
    "codeLanguage": "javascript",
    "codeTokens": 218,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/ui-components.md#2025-04-16_snippet_14",
    "pageTitle": "UI Components in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import {\n\taddToolbarToDropdown,\n\tButtonView,\n\tcreateDropdown,\n\tSplitButtonViewm,\n\tLocale,\n\tIconBold,\n\tIconItalic\n} from 'ckeditor5';\n\nconst locale = new Locale();\n\nconst bold = new ButtonView();\nconst italic = new ButtonView();\n\nbold.set( { label: 'Bold', withText: false, icon: IconBold } );\nitalic.set( { label: 'Italic', withText: false, icon: IconItalic } );\n\nconst buttons = [ bold, italic ];\n\nconst splitButtonDropdown = createDropdown( locale, SplitButtonView );\naddToolbarToDropdown( splitButtonDropdown, buttons);\nsplitButtonDropdown.buttonView.set ( {\n\tlabel: 'Split button dropdown',\n\twithText: true\n} );\nsplitButtonDropdown.render();\n\ndocument.getElementById( 'dropdown-split-button' ).append( buttonDropdown.element );"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "HTML Form Integration with CKEditor",
    "codeDescription": "Complete example of integrating CKEditor with HTML forms, including initialization and automatic form submission handling.",
    "codeLanguage": "html",
    "codeTokens": 330,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/getting-and-setting-data.md#2025-04-16_snippet_4",
    "pageTitle": "Data Handling Guide for CKEditor 5",
    "codeList": [
      {
        "language": "html",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>CKEditor 5 - Classic editor</title>\n\t<link rel=\"stylesheet\" href=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.css\" />\n\t<script src=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.umd.js\"></script>\n</head>\n<body>\n\t<h1>Classic editor</h1>\n\t<form action=\"[URL]\" method=\"post\">\n\t\t<textarea name=\"content\" id=\"editor\">\n\t\t\t&lt;p&gt;This is some sample content.&lt;/p&gt;\n\t\t</textarea>\n\t\t<p><input type=\"submit\" value=\"Submit\"></p>\n\t</form>\n\t<script>\n\t  \tconst {\n\t\t\tClassicEditor,\n\t\t\tEssentials,\n\t\t\tParagraph,\n\t\t\tBold,\n\t\t\tItalic\n\t\t} = CKEDITOR;\n\n\t\tClassicEditor\n\t\t\t.create( document.querySelector( '#editor' ), {\n\t\t\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\t\t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n\t\t\t\ttoolbar: [ 'bold', 'italic' ]\n\t\t\t} )\n\t\t\t.catch( error => {\n\t\t\t\tconsole.error( error );\n\t\t\t} );\n\t</script>\n</body>\n</html>"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Creating a basic CKEditor 5 instance (JavaScript)",
    "codeDescription": "Imports the ClassicEditor, initializes styles, and creates a basic editor instance with a license key.",
    "codeLanguage": "javascript",
    "codeTokens": 130,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/crash-course/editor.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 Crash Course: Editor and Configuration",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Import the editor.\nimport { ClassicEditor } from 'ckeditor5';\n\n// Import the styles.\nimport 'ckeditor5/ckeditor5.css';\n\n// Get the HTML element with the ID of 'app'.\nconst element = document.querySelector( '#app' );\n\n// Instantiate the editor using the `create` method.\nconst editor = await ClassicEditor.create( element, {\n\tlicenseKey: 'GPL' // Or '<YOUR_LICENSE_KEY>'.\n} );"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Initializing CKEditor 5 with Media Embed Plugin",
    "codeDescription": "Basic configuration for initializing CKEditor 5 with the MediaEmbed plugin. This code imports the necessary components, initializes the editor on a DOM element, and includes media embed in the toolbar.",
    "codeLanguage": "JavaScript",
    "codeTokens": 155,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-media-embed/docs/features/media-embed.md#2025-04-16_snippet_0",
    "pageTitle": "Media Embed Feature in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { ClassicEditor, MediaEmbed } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ MediaEmbed, /* ... */ ],\n\t\ttoolbar: [ 'mediaEmbed', /* ... */ ]\n\t\tmediaEmbed: {\n\t\t\t// Configuration.\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Creating a Custom Widget with Nested Model Elements in CKEditor 5",
    "codeDescription": "This snippet demonstrates how to create a custom widget in CKEditor 5 with a single view element and multiple nested model elements. It includes schema registration, upcast and downcast converters, and handling of nested editable elements.",
    "codeLanguage": "javascript",
    "codeTokens": 888,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/how-tos.md#2025-04-16_snippet_9",
    "pageTitle": "CKEditor 5 Framework How-to Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { Plugin, toWidget, toWidgetEditable } from 'ckeditor5'\n\nclass Forms extends Plugin {\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst schema = editor.model.schema;\n\n\t\tschema.register( 'forms', {\n\t\t\tinheritAllFrom: '$inlineObject',\n\t\t\tallowAttributes: 'type'\n\t\t} );\n\n\t\tschema.register( 'formName', {\n\t\t\tallowIn: 'forms',\n\t\t\tallowChildren: '$text',\n\t\t\tisLimit: true\n\t\t} );\n\n\t\t// Disallow all attributes on $text inside `formName` (there won't be any bold/italic etc. inside).\n\t\tschema.addAttributeCheck( context => {\n\t\t\tif ( context.endsWith( 'formName $text' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\t// Allow only text nodes inside `formName` (without any elements that could be down-casted to HTML elements).\n\t\tschema.addChildCheck( ( context, childDefinition ) => {\n\t\t\tif (\n\t\t\t\tcontext.endsWith( 'formName' ) &&\n\t\t\t\tchildDefinition.name !== '$text'\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\t// Data upcast. Convert a single element loaded by the editor to a structure of model elements.\n\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n\t\t\tview: {\n\t\t\t\tname: 'input',\n\t\t\t\tattributes: [ 'type', 'name' ]\n\t\t\t},\n\t\t\tmodel: ( viewElement, { writer } ) => {\n\t\t\t\tconst modelElement = writer.createElement( 'forms', {\n\t\t\t\t\ttype: viewElement.getAttribute( 'type' )\n\t\t\t\t} );\n\t\t\t\tconst nameModelElement = writer.createElement( 'formName' );\n\n\t\t\t\t// Build model structure out of a single view element.\n\t\t\t\twriter.insert( nameModelElement, modelElement, 0 );\n\t\t\t\twriter.insertText(\n\t\t\t\t\tviewElement.getAttribute( 'name' ),\n\t\t\t\t\tnameModelElement,\n\t\t\t\t\t0\n\t\t\t\t);\n\n\t\t\t\treturn modelElement;\n\t\t\t}\n\t\t} );\n\n\t\t// Editing downcast. Convert model elements separately to widget and to widget-editable nested inside.\n\t\teditor.conversion\n\t\t\t.for( 'editingDowncast' )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: 'forms',\n\t\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\t\tconst viewElement = writer.createContainerElement( 'span', {\n\t\t\t\t\t\t'data-type': modelElement.getAttribute( 'type' ),\n\t\t\t\t\t\tstyle: 'display: inline-block'\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn toWidget( viewElement, writer );\n\t\t\t\t}\n\t\t\t} )\n\t\t\t.elementToElement( {\n\t\t\t\tmodel: 'formName',\n\t\t\t\tview: ( modelElement, { writer } ) => {\n\t\t\t\t\tconst viewElement = writer.createEditableElement( 'span' );\n\n\t\t\t\t\treturn toWidgetEditable( viewElement, writer );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t// Data downcast. Convert the outermost model element and all its content into a single view element.\n\t\teditor.conversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'forms',\n\t\t\tview: ( modelElement, { writer, consumable } ) => {\n\t\t\t\tlet nameModelElement;\n\n\t\t\t\t// Find the `formName` model element and consume everything inside the model element range,\n\t\t\t\t// so it won't get converted by any other downcast converters.\n\t\t\t\tfor ( const { item } of editor.model.createRangeIn( modelElement ) ) {\n\t\t\t\t\tif ( item.is( 'element', 'formName' ) ) {\n\t\t\t\t\t\tnameModelElement = modelElement.getChild( 0 );\n\t\t\t\t\t}\n\n\t\t\t\t\tconsumable.consume( item, 'insert' );\n\t\t\t\t}\n\n\t\t\t\treturn writer.createContainerElement( 'input', {\n\t\t\t\t\ttype: modelElement.getAttribute( 'type' ),\n\t\t\t\t\tname: nameModelElement.getChild( 0 ).data\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Adding Custom Button to CKEditor 5 Link Dialog",
    "codeDescription": "This snippet shows how to add a custom button to the link dialog in CKEditor 5. It creates a new plugin that listens for the link form view to be displayed, then injects a custom button into the form. The button is bound to the link command's state and can perform custom actions when clicked.",
    "codeLanguage": "javascript",
    "codeTokens": 510,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/how-tos.md#2025-04-16_snippet_10",
    "pageTitle": "CKEditor 5 Framework How-to Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ButtonView, Plugin, LinkUI } from 'ckeditor5';\n\nclass InternalLink extends Plugin {\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst linkUI = editor.plugins.get( LinkUI );\n\t\tconst contextualBalloonPlugin = editor.plugins.get( 'ContextualBalloon' );\n\n\t\tthis.listenTo( contextualBalloonPlugin, 'change:visibleView', ( evt, name, visibleView ) => {\n\t\t\tif ( visibleView === linkUI.formView ) {\n\t\t\t\t// Detach the listener.\n\t\t\t\tthis.stopListening( contextualBalloonPlugin, 'change:visibleView' );\n\n\t\t\t\tthis.linkFormView = linkUI.formView;\n\t\t\t\tthis.button = this._createButton();\n\n\t\t\t\tconsole.log( 'The link form view has been displayed', this.linkFormView );\n\n\t\t\t\t// Render the button template.\n\t\t\t\tthis.button.render();\n\n\t\t\t\t// Register the button under the link form view, it will handle its destruction.\n\t\t\t\tthis.linkFormView.registerChild( this.button );\n\n\t\t\t\t// Inject the element into DOM.\n\t\t\t\tthis.linkFormView.element.insertBefore( this.button.element, this.linkFormView.saveButtonView.element );\n\t\t\t}\n\t\t} );\n\t}\n\n\t_createButton() {\n\t\tconst editor = this.editor;\n\t\tconst button = new ButtonView( this.locale );\n\t\tconst linkCommand = editor.commands.get( 'link' );\n\n\t\tbutton.set( {\n\t\t\tlabel: 'Internal link',\n\t\t\twithText: true,\n\t\t\ttooltip: true\n\t\t} );\n\n\t\t// This button should be also disabled when the link command is disabled.\n\t\t// Try setting editor.isReadOnly = true to see it in action.\n\t\tbutton.bind( 'isEnabled' ).to( linkCommand );\n\n\t\tbutton.on( 'execute', () => {\n\t\t\t// Do something (for emaple, open the popup), then update the link URL field's value.\n\t\t\t// The line below will be executed inside some callback.\n\t\t\tthis.linkFormView.urlInputView.value = 'http://some.internal.link';\n\t\t} );\n\n\t\treturn button;\n\t}\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "CKEditor 5 Setup After Optimization",
    "codeDescription": "Optimized CKEditor configuration using granular imports and specific translation files. Features direct package imports and detailed CSS imports for each component.",
    "codeLanguage": "javascript",
    "codeTokens": 1729,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/optimizing-build-size.md#2025-04-16_snippet_10",
    "pageTitle": "CKEditor 5 Build Size Optimization Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor } from '@ckeditor/ckeditor5-editor-classic/dist/index.js';\nimport { Essentials } from '@ckeditor/ckeditor5-essentials/dist/index.js';\nimport { CKFinderUploadAdapter } from '@ckeditor/ckeditor5-adapter-ckfinder/dist/index.js';\nimport { Autoformat } from '@ckeditor/ckeditor5-autoformat/dist/index.js';\nimport { Bold, Italic } from '@ckeditor/ckeditor5-basic-styles/dist/index.js';\nimport { BlockQuote } from '@ckeditor/ckeditor5-block-quote/dist/index.js';\nimport { CKBox } from '@ckeditor/ckeditor5-ckbox/dist/index.js';\nimport { CKFinder } from '@ckeditor/ckeditor5-ckfinder/dist/index.js';\nimport { CloudServices } from '@ckeditor/ckeditor5-cloud-services/dist/index.js';\nimport { EasyImage } from '@ckeditor/ckeditor5-easy-image/dist/index.js';\nimport { Heading } from '@ckeditor/ckeditor5-heading/dist/index.js';\nimport { Image, ImageCaption, ImageStyle, ImageToolbar, ImageUpload, PictureEditing } from '@ckeditor/ckeditor5-image/dist/index.js';\nimport { Indent } from '@ckeditor/ckeditor5-indent/dist/index.js';\nimport { Link } from '@ckeditor/ckeditor5-link/dist/index.js';\nimport { List } from '@ckeditor/ckeditor5-list/dist/index.js';\nimport { MediaEmbed } from '@ckeditor/ckeditor5-media-embed/dist/index.js';\nimport { Paragraph } from '@ckeditor/ckeditor5-paragraph/dist/index.js';\nimport { PasteFromOffice } from '@ckeditor/ckeditor5-paste-from-office/dist/index.js';\nimport { Table, TableToolbar } from '@ckeditor/ckeditor5-table/dist/index.js';\nimport { TextTransformation } from '@ckeditor/ckeditor5-typing/dist/index.js';\nimport { Mention } from '@ckeditor/ckeditor5-mention/dist/index.js';\nimport { CaseChange } from '@ckeditor/ckeditor5-case-change/dist/index.js';\nimport { SlashCommand } from '@ckeditor/ckeditor5-slash-command/dist/index.js';\n\nimport clipboardTranslations from '@ckeditor/ckeditor5-clipboard/dist/translations/pl.js';\nimport coreTranslations from '@ckeditor/ckeditor5-core/dist/translations/pl.js';\nimport enterTranslations from '@ckeditor/ckeditor5-enter/dist/translations/pl.js';\nimport selectAllTranslations from '@ckeditor/ckeditor5-select-all/dist/translations/pl.js';\nimport uiTranslations from '@ckeditor/ckeditor5-ui/dist/translations/pl.js';\nimport undoTranslations from '@ckeditor/ckeditor5-undo/dist/translations/pl.js';\nimport uploadTranslations from '@ckeditor/ckeditor5-upload/dist/translations/pl.js';\nimport widgetTranslations from '@ckeditor/ckeditor5-widget/dist/translations/pl.js';\nimport autoformatTranslations from '@ckeditor/ckeditor5-autoformat/dist/translations/pl.js';\nimport basicStylesTranslations from '@ckeditor/ckeditor5-basic-styles/dist/translations/pl.js';\nimport blockQuoteTranslations from '@ckeditor/ckeditor5-block-quote/dist/translations/pl.js';\nimport ckboxTranslations from '@ckeditor/ckeditor5-ckbox/dist/translations/pl.js';\nimport ckfinderTranslations from '@ckeditor/ckeditor5-ckfinder/dist/translations/pl.js';\nimport headingTranslations from '@ckeditor/ckeditor5-heading/dist/translations/pl.js';\nimport imageTranslations from '@ckeditor/ckeditor5-image/dist/translations/pl.js';\nimport indentTranslations from '@ckeditor/ckeditor5-indent/dist/translations/pl.js';\nimport linkTranslations from '@ckeditor/ckeditor5-link/dist/translations/pl.js';\nimport listTranslations from '@ckeditor/ckeditor5-list/dist/translations/pl.js';\nimport mediaEmbedTranslations from '@ckeditor/ckeditor5-media-embed/dist/translations/pl.js';\nimport tableTranslations from '@ckeditor/ckeditor5-table/dist/translations/pl.js';\nimport caseChangeTranslations from '@ckeditor/ckeditor5-case-change/dist/translations/pl.js';\nimport slashCommandTranslations from '@ckeditor/ckeditor5-slash-command/dist/translations/pl.js';\n\nimport '@ckeditor/ckeditor5-theme-lark/dist/index.css';\nimport '@ckeditor/ckeditor5-clipboard/dist/index.css';\nimport '@ckeditor/ckeditor5-core/dist/index.css';\nimport '@ckeditor/ckeditor5-engine/dist/index.css';\nimport '@ckeditor/ckeditor5-enter/dist/index.css';\nimport '@ckeditor/ckeditor5-paragraph/dist/index.css';\nimport '@ckeditor/ckeditor5-select-all/dist/index.css';\nimport '@ckeditor/ckeditor5-typing/dist/index.css';\nimport '@ckeditor/ckeditor5-ui/dist/index.css';\nimport '@ckeditor/ckeditor5-undo/dist/index.css';\nimport '@ckeditor/ckeditor5-upload/dist/index.css';\nimport '@ckeditor/ckeditor5-utils/dist/index.css';\nimport '@ckeditor/ckeditor5-watchdog/dist/index.css';\nimport '@ckeditor/ckeditor5-widget/dist/index.css';\nimport '@ckeditor/ckeditor5-editor-classic/dist/index.css';\nimport '@ckeditor/ckeditor5-essentials/dist/index.css';\nimport '@ckeditor/ckeditor5-adapter-ckfinder/dist/index.css';\nimport '@ckeditor/ckeditor5-autoformat/dist/index.css';\nimport '@ckeditor/ckeditor5-basic-styles/dist/index.css';\nimport '@ckeditor/ckeditor5-block-quote/dist/index.css';\nimport '@ckeditor/ckeditor5-ckbox/dist/index.css';\nimport '@ckeditor/ckeditor5-ckfinder/dist/index.css';\nimport '@ckeditor/ckeditor5-cloud-services/dist/index.css';\nimport '@ckeditor/ckeditor5-easy-image/dist/index.css';\nimport '@ckeditor/ckeditor5-heading/dist/index.css';\nimport '@ckeditor/ckeditor5-image/dist/index.css';\nimport '@ckeditor/ckeditor5-indent/dist/index.css';\nimport '@ckeditor/ckeditor5-link/dist/index.css';\nimport '@ckeditor/ckeditor5-list/dist/index.css';\nimport '@ckeditor/ckeditor5-media-embed/dist/index.css';\nimport '@ckeditor/ckeditor5-paragraph/dist/index.css';\nimport '@ckeditor/ckeditor5-paste-from-office/dist/index.css';\nimport '@ckeditor/ckeditor5-table/dist/index.css';\nimport '@ckeditor/ckeditor5-typing/dist/index.css';\nimport '@ckeditor/ckeditor5-mention/dist/index.css';\nimport '@ckeditor/ckeditor5-case-change/dist/index.css';\nimport '@ckeditor/ckeditor5-slash-command/dist/index.css';\n\nClassicEditor.create( document.querySelector( '#editor' ), {\n\tplugins: [\n\t\tEssentials,\n\t\tCKFinderUploadAdapter,\n\t\tAutoformat,\n\t\tBold,\n\t\tItalic,\n\t\tBlockQuote,\n\t\tCKBox,\n\t\tCKFinder,\n\t\tCloudServices,\n\t\tEasyImage,\n\t\tHeading,\n\t\tImage,\n\t\tImageCaption,\n\t\tImageStyle,\n\t\tImageToolbar,\n\t\tImageUpload,\n\t\tIndent,\n\t\tLink,\n\t\tList,\n\t\tMediaEmbed,\n\t\tParagraph,\n\t\tPasteFromOffice,\n\t\tPictureEditing,\n\t\tTable,\n\t\tTableToolbar,\n\t\tTextTransformation,\n\t\tMention,\n\n\t\tCaseChange,\n\t\tSlashCommand\n\t],\n\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\ttoolbar: {\n\t\titems: [\n\t\t\t'undo', 'redo',\n\t\t\t'|', 'heading',\n\t\t\t'|', 'bold', 'italic',\n\t\t\t'|', 'link', 'uploadImage', 'insertTable', 'blockQuote', 'mediaEmbed',\n\t\t\t'|', 'bulletedList', 'numberedList', 'outdent', 'indent', 'caseChange'\n\t\t]\n\t},\n\timage: {\n\t\ttoolbar: [\n\t\t\t'imageStyle:inline',\n\t\t\t'imageStyle:block',\n\t\t\t'imageStyle:side',\n\t\t\t'|',\n\t\t\t'toggleImageCaption',\n\t\t\t'imageTextAlternative'\n\t\t]\n\t},\n\ttable: {\n\t\tcontentToolbar: [\n\t\t\t'tableColumn',\n\t\t\t'tableRow',\n\t\t\t'mergeTableCells'\n\t\t]\n\t},\n\ttranslations: [\n\t\tclipboardTranslations,\n\t\tcoreTranslations,\n\t\tenterTranslations,\n\t\tselectAllTranslations,\n\t\tuiTranslations,\n\t\tundoTranslations,\n\t\tuploadTranslations,\n\t\twidgetTranslations,\n\t\tautoformatTranslations,\n\t\tbasicStylesTranslations,\n\t\tblockQuoteTranslations,\n\t\tckboxTranslations,\n\t\tckfinderTranslations,\n\t\theadingTranslations,\n\t\timageTranslations,\n\t\tindentTranslations,\n\t\tlinkTranslations,\n\t\tlistTranslations,\n\t\tmediaEmbedTranslations,\n\t\ttableTranslations,\n\t\tcaseChangeTranslations,\n\t\tslashCommandTranslations,\n\t],\n\tlanguage: 'pl'\n} );"
      }
    ],
    "relevance": 0.979
  },
  {
    "codeTitle": "Creating Simple Box UI Button in CKEditor 5",
    "codeDescription": "Creates a UI button for inserting the 'simpleBox' widget in the CKEditor 5 toolbar.  The button is registered using `editor.ui.componentFactory.add`, bound to the 'insertSimpleBox' command, and its state (enabled/disabled) is synchronized with the command's `isEnabled` property. Clicking the button executes the 'insertSimpleBox' command.",
    "codeLanguage": "javascript",
    "codeTokens": 410,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/implementing-a-block-widget.md#2025-04-16_snippet_13",
    "pageTitle": "Implementing a Block Widget in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "// simplebox/simpleboxui.js\n\nimport { ButtonView, Plugin } from 'ckeditor5';\n\nexport default class SimpleBoxUI extends Plugin {\n\tinit() {\n\t\tconsole.log( 'SimpleBoxUI#init() got called' );\n\n\t\tconst editor = this.editor;\n\t\tconst t = editor.t;\n\n\t\t// The \"simpleBox\" button must be registered among the UI components of the editor\n\t\t// to be displayed in the toolbar.\n\t\teditor.ui.componentFactory.add( 'simpleBox', locale => {\n\t\t\t// The state of the button will be bound to the widget command.\n\t\t\tconst command = editor.commands.get( 'insertSimpleBox' );\n\n\t\t\t// The button will be an instance of ButtonView.\n\t\t\tconst buttonView = new ButtonView( locale );\n\n\t\t\tbuttonView.set( {\n\t\t\t\t// The t() function helps localize the editor. All strings enclosed in t() can be\n\t\t\t\t// translated and change when the language of the editor changes.\n\t\t\t\tlabel: t( 'Simple Box' ),\n\t\t\t\twithText: true,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\t// Bind the state of the button to the command.\n\t\t\tbuttonView.bind( 'isOn', 'isEnabled' ).to( command, 'value', 'isEnabled' );\n\n\t\t\t// Execute the command when the button is clicked (executed).\n\t\t\tthis.listenTo( buttonView, 'execute', () => editor.execute( 'insertSimpleBox' ) );\n\n\t\t\treturn buttonView;\n\t\t} );\n\t}\n}"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Creating and Managing an Editor with EditorWatchdog in JavaScript",
    "codeDescription": "This snippet showcases how to initialize an editor with error-handling capabilities using the EditorWatchdog in CKEditor 5. It requires importing necessary editor components and plugins, and then substituting the `ClassicEditor.create()` call with `watchdog.create()`. The example includes setting up the constructor and destructor callbacks to manage editor lifecycle events. Key parameters include the HTML element selector and editor configuration options. The generator ensures a new editor instance post-crash by leveraging the EditorWatchdog functionality.",
    "codeLanguage": "JavaScript",
    "codeTokens": 226,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-watchdog/docs/features/watchdog.md#2025-04-16_snippet_0",
    "pageTitle": "Managing Editor Instances Using Watchdog in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { ClassicEditor, Bold, EditorWatchdog, Essentials, Italic, Paragraph } from 'ckeditor5';\n\n// Create a watchdog for the given editor type.\nconst watchdog = new EditorWatchdog( ClassicEditor );\n\n// Create a new editor instance.\nwatchdog.create( document.querySelector( '#editor' ), {\n\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n\ttoolbar: [ 'bold', 'italic', 'alignment' ]\n} );"
      },
      {
        "language": "JavaScript",
        "code": "// Create an editor watchdog.\nconst watchdog = new EditorWatchdog();\n\n// Define a callback that will create an editor instance and return it.\nwatchdog.setCreator( ( elementOrData, editorConfig ) => {\n\treturn ClassicEditor\n\t\t.create( elementOrData, editorConfig )\n\t\t.then( editor => {\n\t\t\t// Do something with the new editor instance.\n\t\t\t// ...\n\t\t} );\n} );\n\n// Do something before the editor is destroyed. Return a promise.\nwatchdog.setDestructor( editor => {\n\t// Do something before the editor is destroyed.\n\t// ...\n\treturn editor\n\t\t.destroy()\n\t\t.then( () => {\n\t\t\t// Do something after the editor is destroyed.\n\t\t\t// ...\n\t\t} );\n} );\n\n// Create an editor instance and start watching it.\nwatchdog.create( elementOrData, editorConfig );"
      },
      {
        "language": "JavaScript",
        "code": "watchdog.on( 'error', () => { console.log( 'Editor crashed.' ) } );\nwatchdog.on( 'restart', () => { console.log( 'Editor was restarted.' ) } );\n\n// Destroy the watchdog and the current editor instance.\nwatchdog.destroy();\n\n// The current editor instance.\nwatchdog.editor;\n\n// The current state of the editor.\n// The editor might be in one of the following states:\n//\n// * `initializing` - Before the first initialization, and after crashes, before the editor is ready.\n// * `ready` - A state when the user can interact with the editor.\n// * `crashed` - A state when an error occurs. It quickly changes to `initializing` or `crashedPermanently` depending on how many and how frequent errors have been caught recently.\n// * `crashedPermanently` - A state when the watchdog stops reacting to errors and keeps the editor crashed.\n// * `destroyed` - A state when the editor is manually destroyed by the user after calling `watchdog.destroy()`.\nwatchdog.state;\n\n// Listen to state changes.\n\nlet prevState = watchdog.state;\n\nwatchdog.on( 'stateChange', () => {\n\tconst currentState = watchdog.state;\n\n\tconsole.log( `State changed from ${ currentState } to ${ prevState }` );\n\n\tif ( currentState === 'crashedPermanently' ) {\n\t\twatchdog.editor.enableReadOnlyMode( 'crashed-editor' );\n\t}\n\n\tprevState = currentState;\n} );\n\n// An array of editor crash information.\nwatchdog.crashes.forEach( crashInfo => console.log( crashInfo ) );"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Importing and Configuring Classic Editor in JavaScript",
    "codeDescription": "This snippet demonstrates how to import the ClassicEditor and essential plugins from the ckeditor5 package, and then configure the editor with a license key, plugins, and toolbar options.",
    "codeLanguage": "javascript",
    "codeTokens": 158,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/editor-types.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Editor Types",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Bold, Italic, Link } from 'ckeditor5'; // Imports.\n\nClassicEditor // Editor type declaration.\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Bold, Italic, Link ], // Plugins import.\n\t\ttoolbar: [ 'bold', 'italic', 'link' ] // Toolbar configuration.\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "CKEditor Context Feature Implementation",
    "codeDescription": "Example implementation of CKEditor context feature with multiple editor instances and collaboration features support.",
    "codeLanguage": "jsx",
    "codeTokens": 499,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/react-default-cdn.md#2025-04-16_snippet_2",
    "pageTitle": "React CKEditor 5 Integration Guide with CDN",
    "codeList": [
      {
        "language": "jsx",
        "code": "import React from 'react';\nimport { CKEditor, CKEditorContext, useCKEditorCloud } from '@ckeditor/ckeditor5-react';\n\nexport const CKEditorCloudContextDemo = () => {\n\tconst cloud = useCKEditorCloud( {\n\t\tversion: '{@var ckeditor5-version}'\n\t} );\n\n\tif ( cloud.status === 'error' ) {\n\t\treturn <div>Error!</div>;\n\t}\n\n\tif ( cloud.status === 'loading' ) {\n\t\treturn <div>Loading...</div>;\n\t}\n\n\tconst { ClassicEditor } = cloud.CKEditor;\n\n\treturn (\n\t\t<CKEditorContext\n\t\t\tcontext={ ClassicEditor.Context }\n\t\t\tcontextWatchdog={ ClassicEditor.ContextWatchdog }\n\t\t\tonChangeInitializedEditors={ editors => {\n\t\t\t\tconsole.log( 'Initialized editors:', editors );\n\t\t\t} }\n\t\t>\n\t\t\t<CKEditorNestedInstanceDemo\n\t\t\t\tname='editor1'\n\t\t\t\tcontent='<p>Editor 1</p>'\n\t\t\t/>\n\n\t\t\t<br />\n\n\t\t\t<CKEditorNestedInstanceDemo\n\t\t\t\tname='editor2'\n\t\t\t\tcontent='<p>Editor 2</p>'\n\t\t\t/>\n\t\t</CKEditorContext>\n\t);\n};\n\nfunction CKEditorNestedInstanceDemo( { name, content } ) {\n\tconst cloud = useCKEditorCloud( {\n\t\tversion: '{@var ckeditor5-version}',\n\t\tpremium: true\n\t} );\n\n\tif ( cloud.status === 'error' ) {\n\t\tconsole.error( cloud );\n\t\treturn <div>Error!</div>;\n\t}\n\n\tif ( cloud.status === 'loading' ) {\n\t\treturn <div>Loading...</div>;\n\t}\n\n\tconst {\n\t\tClassicEditor,\n\t\tEssentials,\n\t\tParagraph,\n\t\tBold,\n\t\tItalic,\n\t\tMention\n\t} = cloud.CKEditor;\n\n\treturn (\n\t\t<CKEditor\n\t\t\tcontextItemMetadata={ {\n\t\t\t\tname\n\t\t\t} }\n\t\t\teditor={ ClassicEditor }\n\t\t\tdata={ content }\n\t\t\tconfig={ {\n\t\t\t\tplugins: [\n\t\t\t\t\tEssentials,\n\t\t\t\t\tParagraph,\n\t\t\t\t\tBold,\n\t\t\t\t\tItalic,\n\t\t\t\t\tMention\n\t\t\t\t],\n\t\t\t\ttoolbar: {\n\t\t\t\t\titems: [ 'undo', 'redo', '|', 'bold', 'italic' ],\n\t\t\t\t}\n\t\t\t} }\n\t\t/>\n\t);\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Complete CKEditor 5 Integration in Visualforce Page",
    "codeDescription": "This snippet provides the complete code for integrating CKEditor 5 into a Salesforce Visualforce page. It includes all necessary resources, editor container, and initialization script.",
    "codeLanguage": "HTML",
    "codeTokens": 486,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/salesforce.md#2025-04-16_snippet_3",
    "pageTitle": "Integrating CKEditor 5 with Salesforce",
    "codeList": [
      {
        "language": "HTML",
        "code": "<apex:page showHeader=\"false\" standardStylesheets=\"false\" docType=\"html-5.0\">\n\t<head>\n\t\t<!-- Load your editor's JavaScript and CSS from the CDN -->\n\t\t<script src=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.umd.js\"></script>\n\t\t<link rel=\"stylesheet\" href=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.css\" />\n\n\t\t<!-- Add if you use premium features. -->\n\t\t<link rel=\"stylesheet\" href=\"https://cdn.ckeditor.com/ckeditor5-premium-features/{@var ckeditor5-version}/ckeditor5-premium-features.css\" />\n\t\t<script src=\"https://cdn.ckeditor.com/ckeditor5-premium-features/{@var ckeditor5-version}/ckeditor5-premium-features.umd.js\"></script>\n\t</head>\n\t<body>\n\t\t<!-- Editor container -->\n\t\t <div id=\"editor\" style=\"min-height: 300px; border: 1px solid #ccc;\">CKEditor&nbsp;5 integration with Salesforce.</div>\n\n\t\t <!-- Initialization script -->\n\t\t  <script>\n\t\t\tconst {\n\t\t\t\tClassicEditor,\n\t\t\t\tEssentials,\n\t\t\t\tBold,\n\t\t\t\tItalic,\n\t\t\t\tFont,\n\t\t\t\tParagraph\n\t\t\t} = CKEDITOR;\n\t\t\tconst { FormatPainter } = CKEDITOR_PREMIUM_FEATURES;\n\n\t\t\tClassicEditor\n\t\t\t\t.create( document.querySelector( '#editor' ), {\n\t\t\t\t\tlicenseKey: '<YOUR-LICENSE-KEY>',\n\t\t\t\t\tplugins: [ Essentials, Bold, Italic, Font, Paragraph, FormatPainter ],\n\t\t\t\t\ttoolbar: [\n\t\t\t\t\t\t'undo', 'redo', '|', 'bold', 'italic', '|',\n\t\t\t\t\t\t'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', '|',\n\t\t\t\t\t\t'formatPainter'\n\t\t\t\t\t]\n\t\t\t\t} )\n\t\t\t\t.then( /* ... */ )\n\t\t\t\t.catch( /* ... */ );\n\t\t</script>\n\t</body>\n</apex:page>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Timestamp Insertion Logic",
    "codeDescription": "Complete implementation of the Timestamp plugin with model manipulation to insert timestamps",
    "codeLanguage": "javascript",
    "codeTokens": 149,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/creating-simple-plugin-timestamp.md#2025-04-16_snippet_3",
    "pageTitle": "Creating a Timestamp Plugin for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "class Timestamp extends Plugin {\n\tinit() {\n\t\tconst editor = this.editor;\n\t\teditor.ui.componentFactory.add( 'timestamp', () => {\n\t\t\tconst button = new ButtonView();\n\n\t\t\tbutton.set( {\n\t\t\t\tlabel: 'Timestamp',\n\t\t\t\twithText: true\n\t\t\t} );\n\n\t\t\tbutton.on( 'execute', () => {\n\t\t\t\tconst now = new Date();\n\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\teditor.model.insertContent( writer.createText( now.toString() ) );\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\treturn button;\n\t\t} );\n\t}\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "CKEditor 5 Base HTML Template",
    "codeDescription": "Initial HTML template setup with required CDN scripts and styles for CKEditor 5, including both open-source and premium features.",
    "codeLanguage": "html",
    "codeTokens": 322,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/laravel.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 Laravel CDN Integration Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>CKEditor 5 - Quick start CDN</title>\n\t<link rel=\"stylesheet\" href=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.css\" />\n\t<script src=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.umd.js\"></script>\n\t<!-- Add if you use premium features. -->\n\t<link rel=\"stylesheet\" href=\"https://cdn.ckeditor.com/ckeditor5-premium-features/{@var ckeditor5-version}/ckeditor5-premium-features.css\" />\n\t<script src=\"https://cdn.ckeditor.com/ckeditor5-premium-features/{@var ckeditor5-version}/ckeditor5-premium-features.umd.js\"></script>\n\t<!--  -->\n\t<style>\n\t.main-container {\n\t\twidth: 795px;\n\t\tmargin-left: auto;\n\t\tmargin-right: auto;\n\t}\n    </style>\n</head>\n<body>\n\t<div class=\"main-container\">\n\t\t<div id=\"editor\">\n\t\t\t<p>Hello from CKEditor 5!</p>\n\t\t</div>\n    </div>\n</body>\n</html>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Initializing CKEditor with Essential Plugins",
    "codeDescription": "Basic setup of CKEditor with essential plugins like Essentials and Paragraph. Shows how to initialize the editor with required plugins and license configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 98,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/crash-course/plugins.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Plugin Development Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { Essentials, Paragraph } from 'ckeditor5';\n\nconst editor = await ClassicEditor.create( element, {\n\tlicenseKey: 'GPL', // Or '<YOUR_LICENSE_KEY>'.\n\tplugins: [\n\t\tEssentials,\n\t\tParagraph\n\t]\n} );"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Accessing CKEditor Instance in Angular Component",
    "codeDescription": "Shows how to access the CKEditor instance in an Angular component using ViewChild decorator. It includes the template setup and the component code to get the editor instance.",
    "codeLanguage": "TypeScript",
    "codeTokens": 62,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/angular.md#2025-04-16_snippet_8",
    "pageTitle": "Angular Integration Guide for CKEditor 5",
    "codeList": [
      {
        "language": "HTML",
        "code": "<ckeditor #editor [editor]=\"Editor\"></ckeditor>"
      },
      {
        "language": "TypeScript",
        "code": "@Component()\nexport class MyComponent {\n\t@ViewChild( 'editor' ) editorComponent: CKEditorComponent;\n\n\tpublic getEditor() {\n\t\t// Warning: This may return \"undefined\" if the editor is hidden behind the `*ngIf` directive or\n\t\t// if the editor is not fully initialised yet.\n\t\treturn this.editorComponent.editorInstance;\n\t}\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Installing CKEditor 5 Dependencies via npm",
    "codeDescription": "Commands to install required CKEditor 5 packages including core editor and React integration component.",
    "codeLanguage": "bash",
    "codeTokens": 49,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/next-js.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Integration with Next.js",
    "codeList": [
      {
        "language": "bash",
        "code": "npm install ckeditor5 ckeditor5-premium-features"
      },
      {
        "language": "bash",
        "code": "npm install @ckeditor/ckeditor5-react"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Accessing the Model in CKEditor 5",
    "codeDescription": "Demonstrates how to access the model and its components from the editor instance. This shows how to get references to the data model, document, root, selection, and schema.",
    "codeLanguage": "javascript",
    "codeTokens": 113,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/editing-engine.md#2025-04-16_snippet_0",
    "pageTitle": "Editing Engine Architecture in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.model;                       // -> The data model.\neditor.model.document;              // -> The document.\neditor.model.document.getRoot();    // -> The document's root.\neditor.model.document.selection;    // -> The document's selection.\neditor.model.schema;                // -> The model's schema."
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Basic Toolbar Configuration in JavaScript",
    "codeDescription": "Shows how to configure a basic CKEditor 5 toolbar with essential editing features like undo/redo and text formatting.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/toolbar.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Toolbar Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\ttoolbar: [ 'undo', 'redo', 'bold', 'italic', 'numberedList', 'bulletedList' ]\n\t} )\n\t.catch( error => {\n\t\tconsole.log( error );\n\t} );"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Configuring HTML Support in CKEditor 5",
    "codeDescription": "This code snippet shows how to configure the htmlSupport option when creating a CKEditor 5 instance. It demonstrates the structure for allowing and disallowing specific HTML features.",
    "codeLanguage": "javascript",
    "codeTokens": 128,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-html-support/docs/features/general-html-support.md#2025-04-16_snippet_1",
    "pageTitle": "General HTML Support in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\thtmlSupport: {\n\t\t\tallow: [ /* HTML features to allow. */ ],\n\t\t\tdisallow: [ /* HTML features to disallow. */ ]\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing CKEditor 5 DecoupledEditor with Custom Formatting Dropdown in JavaScript",
    "codeDescription": "A comprehensive JavaScript configuration for CKEditor 5 DecoupledEditor with a custom FormattingOptions plugin. This setup includes plugin imports, custom dropdown implementation, editor initialization, and positioning functions for tooltips and dropdowns.",
    "codeLanguage": "javascript",
    "codeTokens": 2158,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/examples/custom/bottom-toolbar-editor.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 Bottom Toolbar with Button Grouping Example",
    "codeList": [
      {
        "language": "javascript",
        "code": "import {\n\tDecoupledEditor,\n\tPlugin,\n\tAlignment,\n\tAutoformat,\n\tBold,\n\tItalic,\n\tStrikethrough,\n\tSubscript,\n\tSuperscript,\n\tUnderline,\n\tBlockQuote,\n\tclickOutsideHandler,\n\tEssentials,\n\tFont,\n\tHeading,\n\tHorizontalLine,\n\tImage,\n\tImageCaption,\n\tImageResize,\n\tImageStyle,\n\tImageToolbar,\n\tImageUpload,\n\tIndent,\n\tLink,\n\tList,\n\tMediaEmbed,\n\tParagraph,\n\tRemoveFormat,\n\tTable,\n\tTableToolbar,\n\tDropdownButtonView,\n\tDropdownPanelView,\n\tDropdownView,\n\tToolbarView,\n\tIconFontColor,\n\tregisterIcon\n} from 'ckeditor5';\nimport { EasyImage } from 'ckeditor5-premium-features';\n\nconst fontColorIcon =/* #__PURE__ */ registerIcon( 'fontColor', IconFontColor );\n\nclass FormattingOptions extends Plugin {\n\t/**\n\t* @inheritDoc\n\t*/\n\tstatic get pluginName() {\n\t\treturn 'FormattingOptions';\n\t}\n\n\t/**\n\t* @inheritDoc\n\t*/\n\tconstructor( editor ) {\n\t\tsuper( editor );\n\n\t\teditor.ui.componentFactory.add( 'formattingOptions', locale => {\n\t\t\tconst t = locale.t;\n\t\t\tconst buttonView = new DropdownButtonView( locale );\n\t\t\tconst panelView = new DropdownPanelView( locale );\n\t\t\tconst dropdownView = new DropdownView( locale, buttonView, panelView );\n\t\t\tconst toolbarView = this.toolbarView = dropdownView.toolbarView = new ToolbarView( locale );\n\n\t\t\t// Accessibility: Give the toolbar a human-readable ARIA label.\n\t\t\ttoolbarView.set( {\n\t\t\t\tariaLabel: t( 'Formatting options toolbar' )\n\t\t\t} );\n\n\t\t\t// Accessibility: Give the dropdown a human-readable ARIA label.\n\t\t\tdropdownView.set( {\n\t\t\t\tlabel: t( 'Formatting options' )\n\t\t\t} );\n\n\t\t\t// Toolbars in dropdowns need specific styling, hence the class.\n\t\t\tdropdownView.extendTemplate( {\n\t\t\t\tattributes: {\n\t\t\t\t\tclass: [ 'ck-toolbar-dropdown' ]\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// Accessibility: If the dropdown panel is already open, the arrow down key should focus the first child of the #panelView.\n\t\t\tdropdownView.keystrokes.set( 'arrowdown', ( data, cancel ) => {\n\t\t\t\tif ( dropdownView.isOpen ) {\n\t\t\t\t\ttoolbarView.focus();\n\t\t\t\t\tcancel();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// Accessibility: If the dropdown panel is already open, the arrow up key should focus the last child of the #panelView.\n\t\t\tdropdownView.keystrokes.set( 'arrowup', ( data, cancel ) => {\n\t\t\t\tif ( dropdownView.isOpen ) {\n\t\t\t\t\ttoolbarView.focusLast();\n\t\t\t\t\tcancel();\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// The formatting options should not close when the user clicked:\n\t\t\t// * the dropdown or it contents,\n\t\t\t// * any editing root,\n\t\t\t// * any floating UI in the \"body\" collection\n\t\t\t// It should close, for instance, when another (main) toolbar button was pressed, though.\n\t\t\tdropdownView.on( 'render', () => {\n\t\t\t\tclickOutsideHandler( {\n\t\t\t\t\temitter: dropdownView,\n\t\t\t\t\tactivator: () => dropdownView.isOpen,\n\t\t\t\t\tcallback: () => { dropdownView.isOpen = false; },\n\t\t\t\t\tcontextElements: [\n\t\t\t\t\t\tdropdownView.element,\n\t\t\t\t\t\t...[ ...editor.ui.getEditableElementsNames() ].map( name => editor.ui.getEditableElement( name ) ),\n\t\t\t\t\t\tdocument.querySelector( '.ck-body-wrapper' )\n\t\t\t\t\t]\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\t// The main button of the dropdown should be bound to the state of the dropdown.\n\t\t\tbuttonView.bind( 'isOn' ).to( dropdownView, 'isOpen' );\n\t\t\tbuttonView.bind( 'isEnabled' ).to( dropdownView );\n\n\t\t\t// Using the font color icon to visually represent the formatting.\n\t\t\tbuttonView.set( {\n\t\t\t\ttooltip: t( 'Formatting options' ),\n\t\t\t\ticon: fontColorIcon()\n\t\t\t} );\n\n\t\t\tdropdownView.panelView.children.add( toolbarView );\n\n\t\t\ttoolbarView.fillFromConfig(\n\t\t\t\teditor.config.get( 'formattingOptions' ),\n\t\t\t\teditor.ui.componentFactory\n\t\t\t);\n\n\t\t\treturn dropdownView;\n\t\t} );\n\t}\n}\n\nDecoupledEditor\n\t.create( document.querySelector( '#editor-content' ), {\n\t\tlicenseKey: 'GPL', // Or '<YOUR_LICENSE_KEY>'.\n\t\tplugins: [\n\t\t\tAlignment,\n\t\t\tAutoformat,\n\t\t\tBlockQuote,\n\t\t\tBold,\n\t\t\tEasyImage,\n\t\t\tEssentials,\n\t\t\tFont,\n\t\t\tHeading,\n\t\t\tHorizontalLine,\n\t\t\tImage,\n\t\t\tImageCaption,\n\t\t\tImageResize,\n\t\t\tImageStyle,\n\t\t\tImageToolbar,\n\t\t\tImageUpload,\n\t\t\tIndent,\n\t\t\tItalic,\n\t\t\tLink,\n\t\t\tList,\n\t\t\tMediaEmbed,\n\t\t\tParagraph,\n\t\t\tRemoveFormat,\n\t\t\tStrikethrough,\n\t\t\tSubscript,\n\t\t\tSuperscript,\n\t\t\tTable,\n\t\t\tTableToolbar,\n\t\t\tUnderline,\n\n\t\t\tFormattingOptions\n\t\t],\n\t\ttoolbar: [\n\t\t\t'undo',\n\t\t\t'redo',\n\t\t\t'|',\n\t\t\t'formattingOptions',\n\t\t\t'|',\n\t\t\t'link',\n\t\t\t'blockQuote',\n\t\t\t'uploadImage',\n\t\t\t'insertTable',\n\t\t\t'mediaEmbed',\n\t\t\t'horizontalLine',\n\t\t\t'|',\n\t\t\t{\n\t\t\t\tlabel: 'Lists',\n\t\t\t\ticon: false,\n\t\t\t\titems: [ 'bulletedList', 'numberedList', '|', 'outdent', 'indent' ]\n\t\t\t}\n\t\t],\n\t\t// Configuration of the formatting dropdown.\n\t\tformattingOptions: [\n\t\t\t'undo',\n\t\t\t'redo',\n\t\t\t'|',\n\t\t\t'fontFamily',\n\t\t\t'fontSize',\n\t\t\t'fontColor',\n\t\t\t'fontBackgroundColor',\n\t\t\t'|',\n\t\t\t'bold',\n\t\t\t'italic',\n\t\t\t'underline',\n\t\t\t'strikethrough',\n\t\t\t'|',\n\t\t\t'alignment',\n\t\t\t'|',\n\t\t\t'bulletedList',\n\t\t\t'numberedList',\n\t\t\t'|',\n\t\t\t'outdent',\n\t\t\t'indent',\n\t\t\t'|',\n\t\t\t'removeFormat'\n\t\t],\n\n\t\timage: {\n\t\t\tresizeUnit: 'px',\n\t\t\ttoolbar: [\n\t\t\t\t'imageStyle:inline',\n\t\t\t\t'imageStyle:wrapText',\n\t\t\t\t'imageStyle:breakText',\n\t\t\t\t'|',\n\t\t\t\t'toggleImageCaption',\n\t\t\t\t'imageTextAlternative'\n\t\t\t]\n\t\t},\n\n\t\ttable: {\n\t\t\tcontentToolbar: [\n\t\t\t\t'tableColumn',\n\t\t\t\t'tableRow',\n\t\t\t\t'mergeTableCells'\n\t\t\t]\n\t\t},\n\t\tcloudServices: {\n\t\t\t// This editor configuration includes the Easy Image feature.\n\t\t\t// Provide correct configuration values to use it.\n\t\t\ttokenUrl: 'https://example.com/cs-token-endpoint',\n\t\t\tuploadUrl: 'https://your-organization-id.cke-cs.com/easyimage/upload/'\n\t\t\t// For other image upload methods see the guide - https://ckeditor.com/docs/ckeditor5/latest/features/images/image-upload/image-upload.html.\n\t\t},\n\t} )\n\t.then( editor => {\n\t\twindow.editor = editor;\n\n\t\tconst toolbarContainer = document.querySelector( '#editor-toolbar-container' );\n\n\t\ttoolbarContainer.appendChild( editor.ui.view.toolbar.element );\n\n\t\toverrideDropdownPositionsToNorth( editor, editor.ui.view.toolbar );\n\t\toverrideDropdownPositionsToNorth( editor, editor.plugins.get( 'FormattingOptions' ).toolbarView );\n\n\t\toverrideTooltipPositions( editor.ui.view.toolbar );\n\t\toverrideTooltipPositions( editor.plugins.get( 'FormattingOptions' ).toolbarView );\n\t} )\n\t.catch( err => {\n\t\tconsole.error( err.stack );\n\t} );\n\n/**\n * Force all toolbar dropdown panels to use northern positions rather than southern (editor default).\n * This will position them correctly relative to the toolbar at the bottom of the editing root.\n *\n * @private\n * @param {module:core/editor/editor~Editor} editor\n * @param {module:ui/toolbar/toolbarview~ToolbarView} toolbarView\n */\nfunction overrideDropdownPositionsToNorth( editor, toolbarView ) {\n\tconst {\n\t\tsouth, north, southEast, southWest, northEast, northWest,\n\t\tsouthMiddleEast, southMiddleWest, northMiddleEast, northMiddleWest\n\t} = DropdownView.defaultPanelPositions;\n\n\tlet panelPositions;\n\n\tif ( editor.locale.uiLanguageDirection !== 'rtl' ) {\n\t\tpanelPositions = [\n\t\t\tnorthEast, northWest, northMiddleEast, northMiddleWest, north,\n\t\t\tsouthEast, southWest, southMiddleEast, southMiddleWest, south\n\t\t];\n\t} else {\n\t\tpanelPositions = [\n\t\t\tnorthWest, northEast, northMiddleWest, northMiddleEast, north,\n\t\t\tsouthWest, southEast, southMiddleWest, southMiddleEast, south\n\t\t];\n\t}\n\n\tfor ( const item of toolbarView.items ) {\n\t\tif ( !( item instanceof DropdownView ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\titem.on( 'change:isOpen', () => {\n\t\t\tif ( !item.isOpen ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\titem.panelView.position = DropdownView._getOptimalPosition( {\n\t\t\t\telement: item.panelView.element,\n\t\t\t\ttarget: item.buttonView.element,\n\t\t\t\tfitInViewport: true,\n\t\t\t\tpositions: panelPositions\n\t\t\t} ).name;\n\t\t} );\n\t}\n}\n\n/**\n * Forces all toolbar items to display tooltips to the north.\n * This will position them correctly relative to the toolbar at the bottom of the editing root.\n *\n * @param {module:ui/toolbar/toolbarview~ToolbarView} toolbarView\n */\nfunction overrideTooltipPositions( toolbarView ) {\n\tfor ( const item of toolbarView.items ) {\n\t\tif ( item.buttonView ) {\n\t\t\titem.buttonView.tooltipPosition = 'n';\n\t\t} else if ( item.tooltipPosition ) {\n\t\t\titem.tooltipPosition = 'n';\n\t\t}\n\t}\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Initializing Multi-Root Editor with CKEditor5 in JavaScript",
    "codeDescription": "This JavaScript code initializes a multi-root editor instance with CKEditor5 for a predefined HTML structure. It specifies multiple root elements, a license key, and a plethora of plugins for extended functionality. The toolbar and placeholders are customized to fit the needs of the web application. If the editor successfully initializes, its toolbar is appended to the HTML, otherwise, errors are logged.",
    "codeLanguage": "js",
    "codeTokens": 447,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/custom-editor-creator.md#2025-04-16_snippet_4",
    "pageTitle": "Implementing a Custom Editor Creator in CKEditor 5",
    "codeList": [
      {
        "language": "js",
        "code": "MultirootEditor\n\t.create( {\n\t\theader: document.querySelector( '#header' ),\n\t\tcontent: document.querySelector( '#content' ),\n\t\tfooterleft: document.querySelector( '#footer-left' ),\n\t\tfooterright: document.querySelector( '#footer-right' )\n\t}, {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Essentials, Paragraph, Heading, Bold, Italic, List, Link, BlockQuote, Image, ImageCaption,\n\t\t\tImageStyle, ImageToolbar, ImageUpload, Table, TableToolbar, MediaEmbed, EasyImage ],\n\t\ttoolbar: [ 'heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'uploadImage', 'blockQuote',\n\t\t\t'insertTable', 'mediaEmbed', 'undo', 'redo' ],\n\t\timage: {\n\t\t\ttoolbar: [ 'toggleImageCaption', 'imageTextAlternative', '|', 'imageStyle:inline', 'imageStyle:wrapText', 'imageStyle:breakText' ],\n\t\t},\n\t\ttable: {\n\t\t\tcontentToolbar: [\n\t\t\t\t'tableColumn',\n\t\t\t\t'tableRow',\n\t\t\t\t'mergeTableCells'\n\t\t\t]\n\t\t},\n\t\tplaceholder: {\n\t\t\theader: 'Header text goes here',\n\t\t\tcontent: 'Type content here',\n\t\t\tfooterleft: 'Left footer content',\n\t\t\tfooterright: 'Right footer content'\n\t\t},\n\t} )\n\t.then( newEditor => {\n\t\tdocument.querySelector( '#toolbar' ).appendChild( newEditor.ui.view.toolbar.element );\n\n\t\twindow.editor = newEditor;\n\t} )\n\t.catch( err => {\n\t\tconsole.error( err.stack );\n\t} );"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "TypeScript Integration with CKEditor in Vue",
    "codeDescription": "Demonstrates TypeScript setup with CKEditor 5 in Vue, including type definitions and custom editor configuration with proper typing.",
    "codeLanguage": "html",
    "codeTokens": 231,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/vuejs-v3.md#2025-04-16_snippet_6",
    "pageTitle": "Vue.js 3+ Rich Text Editor Component with CDN Integration",
    "codeList": [
      {
        "language": "html",
        "code": "<script setup>\nimport { useCKEditorCloud } from '@ckeditor/ckeditor5-vue';\nimport type { ClassicEditor } from 'https://cdn.ckeditor.com/typings/ckeditor5.d.ts';\n\nconst cloud = useCKEditorCloud( {\n\tversion: '{@var ckeditor5-version}',\n\ttranslations: [ 'es' ]\n} );\n\nconst TestEditor = computed<typeof ClassicEditor | null>( () => {\n\tif ( !cloud.data.value ) {\n\t\treturn null;\n\t}\n\n\tconst {\n\t\tClassicEditor: BaseEditor,\n\t\tParagraph,\n\t\tEssentials,\n\t\tHeading,\n\t\tBold,\n\t\tItalic\n\t} = cloud.data.value.CKEditor;\n\n\treturn class TestEditor extends BaseEditor {\n\t\tstatic builtinPlugins = [\n\t\t\tEssentials,\n\t\t\tParagraph,\n\t\t\tHeading,\n\t\t\tBold,\n\t\t\tItalic\n\t\t];\n\t};\n} );\n</script>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Configuring Simple Upload Adapter in CKEditor 5 - JavaScript",
    "codeDescription": "This snippet shows how to set up the Simple Upload Adapter in a CKEditor 5 instance. It involves importing necessary plugins, adding them to the toolbar configuration, and specifying upload settings such as the upload URL and request headers. Dependencies include CKEditor 5 and a server-side upload handler. The JSON Web Token and CSRF Tokens are important parameters for authentication. The output is an editor instance capable of handling image uploads with given configurations.",
    "codeLanguage": "JavaScript",
    "codeTokens": 204,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-upload/docs/features/simple-upload-adapter.md#2025-04-16_snippet_0",
    "pageTitle": "Implementing Simple Upload Adapter in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { ClassicEditor, SimpleUploadAdapter } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ SimpleUploadAdapter, /* ... */ ],\n\t\ttoolbar: [ /* ... */ ],\n\t\tsimpleUpload: {\n\t\t\t// Configuration.\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Localizing CKEditor 5 in React",
    "codeDescription": "This snippet shows how to localize CKEditor 5 in a React application. It demonstrates importing and configuring translations for both core and premium features.",
    "codeLanguage": "jsx",
    "codeTokens": 178,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/react-default-npm.md#2025-04-16_snippet_5",
    "pageTitle": "React Rich Text Editor Component with npm Integration",
    "codeList": [
      {
        "language": "jsx",
        "code": "import { ClassicEditor } from 'ckeditor5';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\n// More imports...\n\nimport coreTranslations from 'ckeditor5/translations/es.js';\nimport premiumFeaturesTranslations from 'ckeditor5-premium-features/translations/es.js';\n\nfunction App() {\n\treturn (\n\t\t<CKEditor\n\t\t\teditor={ ClassicEditor }\n\t\t\tconfig={ {\n\t\t\t\t// ... Other configuration options ...\n\t\t\t\ttranslations: [ coreTranslations, premiumFeaturesTranslations ],\n\t\t\t\tinitialData: '<p>Hola desde CKEditor 5 en React!</p>'\n\t\t\t} }\n\t\t/>\n\t);\n}\n\nexport default App;"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Creating Decoupled Editor Instance in JavaScript",
    "codeDescription": "JavaScript code to create a Decoupled Editor instance. It uses the DecoupledEditor.create() method to initialize the editor and manually appends the toolbar to a separate container.",
    "codeLanguage": "javascript",
    "codeTokens": 172,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/editor-lifecycle.md#2025-04-16_snippet_3",
    "pageTitle": "CKEditor 5 Editor Lifecycle Management",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { DecoupledEditor, Essentials } from 'ckeditor5';\n\nDecoupledEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Essentials, /* ... */ ],\n\t\ttoolbar: [ /* .. */ ],\n\t} )\n\t.then( editor => {\n\t\tconst toolbarContainer = document.querySelector( '#toolbar-container' );\n\n\t\ttoolbarContainer.appendChild( editor.ui.view.toolbar.element );\n\t} )\n\t.catch( error => {\n\t\tconsole.error( error );\n\t} );"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Creating Multi-level Menu Dropdown in CKEditor 5",
    "codeDescription": "Demonstrates how to create a dropdown with a multi-level menu structure using the addMenuToDropdown helper function. Shows menu item definitions with nested children.",
    "codeLanguage": "javascript",
    "codeTokens": 254,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/ui-components.md#2025-04-16_snippet_13",
    "pageTitle": "UI Components in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import {\n\taddMenuToDropdown,\n    createDropdown\n} from 'ckeditor5';\n\nconst locale = new Locale(); // Can be `editor.locale`.\nconst body = new BodyCollection(); // Can be `editor.ui.view.body`.\n\nconst menuDropdown = createDropdown( locale );\n\n// The menu items definitions.\nconst definition = [\n\t{\n\t\tid: 'menu_1',\n\t\tmenu: 'Menu 1',\n\t\tchildren: [\n\t\t\t{\n\t\t\t\tid: 'menu_1_a',\n\t\t\t\tlabel: 'Item A'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'menu_1_b',\n\t\t\t\tlabel: 'Item B'\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tid: 'top_a',\n\t\tlabel: 'Top Item A'\n\t},\n\t{\n\t\tid: 'top_b',\n\t\tlabel: 'Top Item B'\n\t}\n];\n\naddMenuToDropdown( menuDropdown, body, definition );\n\nmenuDropdown.render();\n\ndocument.getElementById( 'menu-dropdown' ).append( menuDropdown.element );"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Basic CKEditor React Component Implementation",
    "codeDescription": "React component implementation showing how to use CKEditor 5 with CDN distribution, including both open source and premium plugins configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 282,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/react-default-cdn.md#2025-04-16_snippet_1",
    "pageTitle": "React CKEditor 5 Integration Guide with CDN",
    "codeList": [
      {
        "language": "javascript",
        "code": "import React from 'react';\nimport { CKEditor, useCKEditorCloud } from '@ckeditor/ckeditor5-react';\n\nconst CKEditorDemo = () => {\n\tconst cloud = useCKEditorCloud( {\n\t\tversion: '{@var ckeditor5-version}',\n\t\tpremium: true\n\t} );\n\n\tif ( cloud.status === 'error' ) {\n\t\treturn <div>Error!</div>;\n\t}\n\n\tif ( cloud.status === 'loading' ) {\n\t\treturn <div>Loading...</div>;\n\t}\n\n\tconst {\n\t\tClassicEditor,\n\t\tEssentials,\n\t\tParagraph,\n\t\tBold,\n\t\tItalic\n\t} = cloud.CKEditor;\n\n\tconst { FormatPainter } = cloud.CKEditorPremiumFeatures;\n\n\treturn (\n\t\t<CKEditor\n\t\t\teditor={ ClassicEditor }\n\t\t\tdata={ '<p>Hello world!</p>' }\n\t\t\tconfig={ {\n\t\t\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\t\t\tplugins: [ Essentials, Paragraph, Bold, Italic, FormatPainter ],\n\t\t\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic', '|', 'formatPainter' ]\n\t\t\t} }\n\t\t/>\n\t);\n};"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Initializing CodeBlock Plugin in CKEditor 5",
    "codeDescription": "Configures CKEditor with CodeBlock plugin, specifying license key, plugins, and toolbar configuration. Demonstrates basic setup for adding code block functionality to the editor.",
    "codeLanguage": "javascript",
    "codeTokens": 148,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-code-block/docs/features/code-blocks.md#2025-04-16_snippet_0",
    "pageTitle": "Code Blocks in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, CodeBlock } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ CodeBlock, /* ... */ ],\n\t\ttoolbar: [ 'codeBlock', /* ... */ ]\n\t\tcodeBlock: {\n\t\t\t// Configuration.\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Optimized Feature Import Example",
    "codeDescription": "Optimized import pattern showing how to import specific editor features directly from their source packages to reduce bundle size.",
    "codeLanguage": "javascript",
    "codeTokens": 115,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/optimizing-build-size.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 Build Size Optimization Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "- import { ClassicEditor, Bold, Italic and Table } from 'ckeditor5';\n\n+ import { ClassicEditor } from '@ckeditor/ckeditor5-editor-classic/dist/index.js';\n+ import { Bold, Italic } from '@ckeditor/ckeditor5-basic-styles/dist/index.js';\n+ import { Table } from '@ckeditor/ckeditor5-table/dist/index.js';"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing full conversion without helpers in CKEditor 5 using JavaScript",
    "codeDescription": "This code snippet shows a full implementation of conversion without using helpers. It includes upcast conversion from HTML to model attribute, and both data and editing downcast conversions from model attribute to HTML element.",
    "codeLanguage": "javascript",
    "codeTokens": 178,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/crash-course/data-conversion.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 Data Conversion Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Convert the input `<mark>` HTML element to model attribute.\neditor.conversion.for( 'upcast' ).elementToAttribute( {\n\tmodel: 'highlight',\n\tview: 'mark'\n} );\n\n// Convert model attribute to output `<mark>` HTML element.\neditor.conversion.for( 'dataDowncast' ).attributeToElement( {\n\tmodel: 'highlight',\n\tview: 'mark'\n} );\n\n// Convert model attribute to `<mark>` in editing view.\neditor.conversion.for( 'editingDowncast' ).attributeToElement( {\n\tmodel: 'highlight',\n\tview: 'mark'\n} );"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Advanced Word Count with BalloonEditor",
    "codeDescription": "This JavaScript code shows a more advanced implementation using BalloonEditor, including character limit visualization and dynamic UI updates based on content statistics. It calculates progress using SVG elements and modifies CSS classes based on whether the character limit is close to or has been exceeded.",
    "codeLanguage": "JavaScript",
    "codeTokens": 639,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-word-count/docs/features/word-count.md#2025-04-16_snippet_4",
    "pageTitle": "CKEditor 5 Word and Character Count Feature",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "\"const maxCharacters = 120;\\nconst container = document.querySelector( '.demo-update' );\\nconst progressCircle = document.querySelector( '.demo-update__chart__circle' );\\nconst charactersBox = document.querySelector( '.demo-update__chart__characters' );\\nconst wordsBox = document.querySelector( '.demo-update__words' );\\nconst circleCircumference = Math.floor( 2 * Math.PI * progressCircle.getAttribute( 'r' ) );\\nconst sendButton = document.querySelector( '.demo-update__send' );\\n\\nBalloonEditor\\n\\t.create( document.querySelector( '#demo-update__editor' ), {\\n\\t\\t// Editor configuration.\\n\\t\\twordCount: {\\n\\t\\t\\tonUpdate: stats => {\\n\\t\\t\\t\\tconst charactersProgress = stats.characters / maxCharacters * circleCircumference;\\n\\t\\t\\t\\tconst isLimitExceeded = stats.characters > maxCharacters;\\n\\t\\t\\t\\tconst isCloseToLimit = !isLimitExceeded && stats.characters > maxCharacters * .8;\\n\\t\\t\\t\\tconst circleDashArray = Math.min( charactersProgress, circleCircumference );\\n\\n\\t\\t\\t\\t// Set the stroke of the circle to show how many characters were typed.\\n\\t\\t\\t\\tprogressCircle.setAttribute( 'stroke-dasharray', `${ circleDashArray },${ circleCircumference }` );\\n\\n\\t\\t\\t\\t// Display the number of characters in the progress chart. When the limit is exceeded,\\n\\t\\t\\t\\t// display how many characters should be removed.\\n\\t\\t\\t\\tif ( isLimitExceeded ) {\\n\\t\\t\\t\\t\\tcharactersBox.textContent = `-${ stats.characters - maxCharacters }`;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tcharactersBox.textContent = stats.characters;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\twordsBox.textContent = `Words in the post: ${ stats.words }`;\\n\\n\\t\\t\\t\\t// If the content length is close to the character limit, add a CSS class to warn the user.\\n\\t\\t\\t\\tcontainer.classList.toggle( 'demo-update__limit-close', isCloseToLimit );\\n\\n\\t\\t\\t\\t// If the character limit is exceeded, add a CSS class that makes the content's background red.\\n\\t\\t\\t\\tcontainer.classList.toggle( 'demo-update__limit-exceeded', isLimitExceeded );\\n\\n\\t\\t\\t\\t// If the character limit is exceeded, disable the send button.\\n\\t\\t\\t\\tsendButton.toggleAttribute( 'disabled', isLimitExceeded );\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} );\""
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "CKEditor 5 Initialization Script",
    "codeDescription": "JavaScript code to initialize CKEditor 5 with basic and premium plugins, including configuration options and toolbar setup.",
    "codeLanguage": "javascript",
    "codeTokens": 211,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/laravel.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 Laravel CDN Integration Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<script>\n\tconst {\n\t\tClassicEditor,\n\t\tEssentials,\n\t\tBold,\n\t\tItalic,\n\t\tFont,\n\t\tParagraph\n\t} = CKEDITOR;\n\tconst { FormatPainter } = CKEDITOR_PREMIUM_FEATURES;\n\n\tClassicEditor\n\t\t.create( document.querySelector( '#editor' ), {\n\t\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\t\tplugins: [ Essentials, Bold, Italic, Font, Paragraph, FormatPainter ],\n\t\t\ttoolbar: [\n\t\t\t\t'undo', 'redo', '|', 'bold', 'italic', '|',\n\t\t\t\t'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', '|',\n\t\t\t\t'formatPainter'\n\t\t\t]\n\t\t} )\n\t\t.then( /* ... */ )\n\t\t.catch( /* ... */ );\n</script>"
      }
    ],
    "relevance": 0.973
  },
  {
    "codeTitle": "Customizing Mention Autocomplete List Item Rendering",
    "codeDescription": "Implementation of a custom item renderer for the mention autocomplete dropdown. This function creates a styled DOM element with the user's name and ID to enhance the visual appearance of mention suggestions.",
    "codeLanguage": "javascript",
    "codeTokens": 243,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-mention/docs/features/mentions.md#2025-04-16_snippet_3",
    "pageTitle": "Mentions (Autocompletion) Feature in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\tmention: {\n\t\t\tfeeds: [\n\t\t\t\t{\n\t\t\t\t\tfeed: [ /* ... */ ],\n\t\t\t\t\t// Define the custom item renderer.\n\t\t\t\t\titemRenderer: customItemRenderer\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );\n\nfunction customItemRenderer( item ) {\n\tconst itemElement = document.createElement( 'span' );\n\n\titemElement.classList.add( 'custom-item' );\n\titemElement.id = `mention-list-item-id-${ item.userId }`;\n\titemElement.textContent = `${ item.name } `;\n\n\tconst usernameElement = document.createElement( 'span' );\n\n\tusernameElement.classList.add( 'custom-item-username' );\n\tusernameElement.textContent = item.id;\n\n\titemElement.appendChild( usernameElement );\n\n\treturn itemElement;\n}"
      }
    ],
    "relevance": 0.973
  },
  {
    "codeTitle": "Configuring CKEditor 5 Plugins and Default Settings (JavaScript)",
    "codeDescription": "This snippet shows how to import required CKEditor 5 plugins and configure the default settings for the editor. It creates a custom ClassicEditor class with built-in plugins and a default toolbar configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 318,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/advanced/integrating-from-source-webpack.md#2025-04-16_snippet_7",
    "pageTitle": "Integrating CKEditor 5 from Source Using Webpack",
    "codeList": [
      {
        "language": "javascript",
        "code": "// ckeditor.js\n\nimport { ClassicEditor as ClassicEditorBase } from '@ckeditor/ckeditor5-editor-classic';\nimport { Essentials } from '@ckeditor/ckeditor5-essentials';\nimport { Autoformat } from '@ckeditor/ckeditor5-autoformat';\nimport { Bold, Italic } from '@ckeditor/ckeditor5-basic-styles';\nimport { BlockQuote } from '@ckeditor/ckeditor5-block-quote';\nimport { Heading } from '@ckeditor/ckeditor5-heading';\nimport { Link } from '@ckeditor/ckeditor5-link';\nimport { List } from '@ckeditor/ckeditor5-list';\nimport { Paragraph } from '@ckeditor/ckeditor5-paragraph';\n\nexport default class ClassicEditor extends ClassicEditorBase {}\n\nClassicEditor.builtinPlugins = [\n\tEssentials,\n\tAutoformat,\n\tBold,\n\tItalic,\n\tBlockQuote,\n\tHeading,\n\tLink,\n\tList,\n\tParagraph\n];\n\nClassicEditor.defaultConfig = {\n\ttoolbar: {\n\t\titems: [\n\t\t\t'heading',\n\t\t\t'|',\n\t\t\t'bold',\n\t\t\t'italic',\n\t\t\t'link',\n\t\t\t'bulletedList',\n\t\t\t'numberedList',\n\t\t\t'blockQuote',\n\t\t\t'undo',\n\t\t\t'redo'\n\t\t]\n\t},\n\tlanguage: 'en'\n};"
      }
    ],
    "relevance": 0.973
  },
  {
    "codeTitle": "Initializing CKEditor with HTML Content",
    "codeDescription": "Shows how to initialize CKEditor with content from a div element. The editor will use the HTML content inside the div as its initial data.",
    "codeLanguage": "html",
    "codeTokens": 82,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/getting-and-setting-data.md#2025-04-16_snippet_0",
    "pageTitle": "Data Handling Guide for CKEditor 5",
    "codeList": [
      {
        "language": "html",
        "code": "<div id=\"editor\">\n\t<!-- This content will appear in the editor if you initialize with this element. -->\n\t<p>Hello, world!</p>\n</div>"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Mocking DOM APIs for Jest Testing with CKEditor 5",
    "codeDescription": "Provides necessary DOM API mocks for testing CKEditor 5 in Jest environment, including ResizeObserver, input events, and range-related functionality.",
    "codeLanguage": "javascript",
    "codeTokens": 285,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/angular.md#2025-04-16_snippet_11",
    "pageTitle": "Angular Integration Guide for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "beforeAll( () => {\n\twindow.scrollTo = jest.fn();\n\n\twindow.ResizeObserver = class ResizeObserver {\n\t\tobserve() {}\n\t\tunobserve() {}\n\t\tdisconnect() {}\n\t};\n\n\tfor ( const key of [ 'InputEvent', 'KeyboardEvent' ] ) {\n\t\twindow[ key ].prototype.getTargetRanges = () => {\n\t\t\tconst range = new StaticRange( {\n\t\t\t\tstartContainer: document.body.querySelector( '.ck-editor__editable p' ),\n\t\t\t\tstartOffset: 0,\n\t\t\t\tendContainer: document.body.querySelector( '.ck-editor__editable p' ),\n\t\t\t\tendOffset: 0\n\t\t\t} );\n\n\t\t\treturn [ range ];\n\t\t};\n\t}\n\n\tconst getClientRects = () => ({\n\t\titem: () => null,\n\t\tlength: 0,\n\t\t[Symbol.iterator]: function* () {}\n\t});\n\n\tRange.prototype.getClientRects = getClientRects;\n\tElement.prototype.getClientRects = getClientRects;\n\n\tif ( !Document.prototype.createElementNS ) {\n\t\tDocument.prototype.createElementNS = ( namespace, name ) => {\n\t\t\tconst element = document.createElement( name );\n\t\t\telement.namespaceURI = namespace;\n\t\t\treturn element;\n\t\t};\n\t}\n} );"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Configuring Editor Watchdog in JavaScript",
    "codeDescription": "Shows how to configure EditorWatchdog with custom parameters including crash limits, error time periods, and save intervals. Demonstrates the configuration options available for both EditorWatchdog and ContextWatchdog.",
    "codeLanguage": "javascript",
    "codeTokens": 103,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-watchdog/docs/features/watchdog.md#2025-04-16_snippet_3",
    "pageTitle": "Managing Editor Instances Using Watchdog in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "const editorWatchdog = new EditorWatchdog( ClassicEditor, {\n\tminimumNonErrorTimePeriod: 2000,\n\tcrashNumberLimit: 4,\n\tsaveInterval: 1000\n} );"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Complete CKEditor 5 Basic Implementation",
    "codeDescription": "Full HTML page example showing basic CKEditor 5 implementation with CDN resources.",
    "codeLanguage": "html",
    "codeTokens": 327,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/quick-start.md#2025-04-16_snippet_4",
    "pageTitle": "CKEditor 5 CDN Installation Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>CKEditor 5 - Quick start CDN</title>\n        <link rel=\"stylesheet\" href=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.css\" />\n    </head>\n    <body>\n        <div id=\"editor\">\n            <p>Hello from CKEditor 5!</p>\n        </div>\n\n        <script src=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.umd.js\"></script>\n\n        <script>\n            const {\n                ClassicEditor,\n                Essentials,\n                Bold,\n                Italic,\n                Font,\n                Paragraph\n            } = CKEDITOR;\n\n            ClassicEditor\n                .create( document.querySelector( '#editor' ), {\n                    licenseKey: '<YOUR_LICENSE_KEY>',\n                    plugins: [ Essentials, Bold, Italic, Font, Paragraph ],\n                    toolbar: [\n                        'undo', 'redo', '|', 'bold', 'italic', '|',\n                        'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor'\n                    ]\n                } )\n                .then( /* ... */ )\n                .catch( /* ... */ );\n        </script>\n    </body>\n</html>"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Complete Razor page template with CKEditor 5 integration",
    "codeDescription": "Full HTML template for an ASP.NET Core Razor page that includes CKEditor 5 scripts, styles, and initialization code. This combines all the previous snippets into a complete, working example.",
    "codeLanguage": "html",
    "codeTokens": 480,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/dotnet.md#2025-04-16_snippet_3",
    "pageTitle": "Integrating CKEditor 5 with .NET using CDN",
    "codeList": [
      {
        "language": "html",
        "code": "@page\n@model IndexModel\n@{\n\tViewData[\"Title\"] = \"Home page\";\n}\n\n<div class=\"text-center\">\n\t<link rel=\"stylesheet\" href=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.css\" />\n\t<script src=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.umd.js\"></script>\n\t<!-- Add if you use premium features. -->\n\t<link rel=\"stylesheet\" href=\"https://cdn.ckeditor.com/ckeditor5-premium-features/{@var ckeditor5-version}/ckeditor5-premium-features.css\" />\n\t<script src=\"https://cdn.ckeditor.com/ckeditor5-premium-features/{@var ckeditor5-version}/ckeditor5-premium-features.umd.js\"></script>\n\t<!--  -->\n\t<style>\n\t.main-container {\n\t\twidth: 795px;\n\t\tmargin-left: auto;\n\t\tmargin-right: auto;\n\t}\n    </style>\n\n\t<div class=\"main-container\">\n\t\t<div id=\"editor\">\n\t\t\t<p>Hello from CKEditor 5!</p>\n\t\t</div>\n    </div>\n\n\t<script>\n        const {\n\t\t\tClassicEditor,\n\t\t\tEssentials,\n\t\t\tBold,\n\t\t\tItalic,\n\t\t\tFont,\n\t\t\tParagraph\n\t\t} = CKEDITOR;\n\t\tconst { FormatPainter } = CKEDITOR_PREMIUM_FEATURES;\n\n\t\tClassicEditor\n\t\t\t.create( document.querySelector( '#editor' ), {\n\t\t\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\t\t\tplugins: [ Essentials, Bold, Italic, Font, Paragraph, FormatPainter ],\n\t\t\t\ttoolbar: [\n\t\t\t\t\t'undo', 'redo', '|', 'bold', 'italic', '|',\n\t\t\t\t\t'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', '|',\n\t\t\t\t\t'formatPainter'\n\t\t\t\t]\n\t\t\t} )\n\t\t\t.then( /* ... */ )\n\t\t\t.catch( /* ... */ );\n    </script>\n</div>"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Complete Autosave Implementation Example with Status Display",
    "codeDescription": "A comprehensive example that shows how to implement the autosave feature with a fake HTTP server and display the saving status to users. It includes editor initialization, the save function, and status indicator functionality.",
    "codeLanguage": "JavaScript",
    "codeTokens": 310,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-autosave/docs/features/autosave.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 Autosave Feature Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\tautosave: {\n\t\t\tsave( editor ) {\n\t\t\t\treturn saveData( editor.getData() );\n\t\t\t}\n\t\t}\n\t} )\n\t.then( editor => {\n\t\twindow.editor = editor;\n\n\t\tdisplayStatus( editor );\n\t} )\n\t.catch( err => {\n\t\tconsole.error( err.stack );\n\t} );\n\n// Save the data to a fake HTTP server (emulated here with a setTimeout()).\nfunction saveData( data ) {\n\treturn new Promise( resolve => {\n\t\tsetTimeout( () => {\n\t\t\tconsole.log( 'Saved', data );\n\n\t\t\tresolve();\n\t\t}, HTTP_SERVER_LAG );\n\t} );\n}\n\n// Update the \"Status: Saving...\" information.\nfunction displayStatus( editor ) {\n\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n\tconst statusIndicator = document.querySelector( '#editor-status' );\n\n\tpendingActions.on( 'change:hasAny', ( evt, propertyName, newValue ) => {\n\t\tif ( newValue ) {\n\t\t\tstatusIndicator.classList.add( 'busy' );\n\t\t} else {\n\t\t\tstatusIndicator.classList.remove( 'busy' );\n\t\t}\n\t} );\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Direct CKEditor 5 Initialization with Plugins (JavaScript)",
    "codeDescription": "This JavaScript snippet demonstrates how to initialize CKEditor 5 directly using the ClassicEditor class, without creating an intermediary subclass. It includes plugin configuration and toolbar setup within the create method.",
    "codeLanguage": "javascript",
    "codeTokens": 359,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/advanced/integrating-from-source-webpack.md#2025-04-16_snippet_11",
    "pageTitle": "Integrating CKEditor 5 from Source Using Webpack",
    "codeList": [
      {
        "language": "javascript",
        "code": "// main.js\n\nimport { ClassicEditor } from '@ckeditor/ckeditor5-editor-classic';\nimport { Essentials } from '@ckeditor/ckeditor5-essentials';\nimport { Autoformat } from '@ckeditor/ckeditor5-autoformat';\nimport { Bold, Italic } from '@ckeditor/ckeditor5-basic-styles';\nimport { BlockQuote } from '@ckeditor/ckeditor5-block-quote';\nimport { Heading } from '@ckeditor/ckeditor5-heading';\nimport { Link } from '@ckeditor/ckeditor5-link';\nimport { List } from '@ckeditor/ckeditor5-list';\nimport { Paragraph } from '@ckeditor/ckeditor5-paragraph';\n\nClassicEditor\n\t.create( document.querySelector( '#app'), {\n\t\t// The plugins are now passed directly to .create().\n\t\tplugins: [\n\t\t\tEssentials,\n\t\t\tAutoformat,\n\t\t\tBold,\n\t\t\tItalic,\n\t\t\tBlockQuote,\n\t\t\tHeading,\n\t\t\tLink,\n\t\t\tList,\n\t\t\tParagraph,\n\t\t],\n\n\t\t// So is the rest of the default configuration.\n\t\ttoolbar: [\n\t\t\t'heading',\n\t\t\t'bold',\n\t\t\t'italic',\n\t\t\t'link',\n\t\t\t'bulletedList',\n\t\t\t'numberedList',\n\t\t\t'blockQuote',\n\t\t\t'undo',\n\t\t\t'redo'\n\t\t]\n\t} )\n\t.then( editor => {\n\t\tconsole.log( editor );\n\t} )\n\t.catch( error => {\n\t\tconsole.error( error );\n\t} );"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Initializing CKEditor 5 with TypeScript",
    "codeDescription": "TypeScript implementation of CKEditor 5 Classic Editor with essential plugins and toolbar configuration. The code imports required modules, sets up plugins like Autoformat, Basic Styles, and Block Quote, and configures the toolbar with various editing options.",
    "codeLanguage": "typescript",
    "codeTokens": 354,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/advanced/integrating-from-source-vite.md#2025-04-16_snippet_6",
    "pageTitle": "CKEditor 5 Source Integration with Vite Setup Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "// main.ts\n\nimport { ClassicEditor } from '@ckeditor/ckeditor5-editor-classic';\nimport { Essentials } from '@ckeditor/ckeditor5-essentials';\nimport { Autoformat } from '@ckeditor/ckeditor5-autoformat';\nimport { Bold, Italic } from '@ckeditor/ckeditor5-basic-styles';\nimport { BlockQuote } from '@ckeditor/ckeditor5-block-quote';\nimport { Heading } from '@ckeditor/ckeditor5-heading';\nimport { Link } from '@ckeditor/ckeditor5-link';\nimport { List } from '@ckeditor/ckeditor5-list';\nimport { Paragraph } from '@ckeditor/ckeditor5-paragraph';\n\nClassicEditor\n    .create( document.querySelector( '#app') as HTMLElement, {\n        // The plugins are now passed directly to .create().\n        plugins: [\n            Essentials,\n            Autoformat,\n            Bold,\n            Italic,\n            BlockQuote,\n            Heading,\n            Link,\n            List,\n            Paragraph,\n        ],\n\n        // So is the rest of the default configuration.\n        toolbar: [\n            'heading',\n            'bold',\n            'italic',\n            'link',\n            'bulletedList',\n            'numberedList',\n            'blockQuote',\n            'undo',\n            'redo'\n        ]\n    } )\n    .then( editor => {\n        console.log( editor );\n    } )\n    .catch( error => {\n        console.error( error );\n    } );"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Destroying Editor Instance",
    "codeDescription": "JavaScript code showing how to properly destroy a CKEditor 5 instance using the destroy() method.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/editor-lifecycle.md#2025-04-16_snippet_5",
    "pageTitle": "CKEditor 5 Editor Lifecycle Management",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor\n\t.destroy()\n\t.catch( error => {\n\t\tconsole.log( error );\n\t} );"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Using CKEditor with Nuxt.js Server-Side Rendering",
    "codeDescription": "Example of how to use the CKEditor Vue component with Nuxt.js when server-side rendering is enabled, using the ClientOnly component.",
    "codeLanguage": "html",
    "codeTokens": 73,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/vuejs-v3.md#2025-04-16_snippet_3",
    "pageTitle": "Vue.js 3+ Rich Text Editor Integration with CKEditor 5",
    "codeList": [
      {
        "language": "html",
        "code": "<template>\n\t<ClientOnly>\n\t\t<Editor />\n\t</ClientOnly>\n</template>"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating a custom CKEditor component in Next.js",
    "codeDescription": "React component that implements CKEditor 5 with both open-source and premium plugins, using the useCKEditorCloud hook for loading from CDN.",
    "codeLanguage": "jsx",
    "codeTokens": 303,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/next-js.md#2025-04-16_snippet_1",
    "pageTitle": "Integrating CKEditor 5 with Next.js using CDN",
    "codeList": [
      {
        "language": "jsx",
        "code": "'use client' // Required only in App Router.\n\nimport React from 'react';\nimport { CKEditor, useCKEditorCloud } from '@ckeditor/ckeditor5-react';\n\nconst CustomEditor = () => {\n\tconst cloud = useCKEditorCloud( {\n\t\tversion: '{@var ckeditor5-version}',\n\t\tpremium: true\n\t} );\n\n\tif ( cloud.status === 'error' ) {\n\t\treturn <div>Error!</div>;\n\t}\n\n\tif ( cloud.status === 'loading' ) {\n\t\treturn <div>Loading...</div>;\n\t}\n\n\tconst {\n\t\tClassicEditor,\n\t\tEssentials,\n\t\tParagraph,\n\t\tBold,\n\t\tItalic\n\t} = cloud.CKEditor;\n\n\tconst { FormatPainter } = cloud.CKEditorPremiumFeatures;\n\n\treturn (\n\t\t<CKEditor\n\t\t\teditor={ ClassicEditor }\n\t\t\tdata={ '<p>Hello world!</p>' }\n\t\t\tconfig={ {\n\t\t\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\t\t\tplugins: [ Essentials, Paragraph, Bold, Italic, FormatPainter ],\n\t\t\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic', '|', 'formatPainter' ]\n\t\t\t} }\n\t\t/>\n\t);\n};\n\nexport default CustomEditor;"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Classic Editor Configuration",
    "codeDescription": "Complete setup for CKEditor 5 Classic editor variant, including plugin definitions, toolbar configuration, and image/table settings.",
    "codeLanguage": "javascript",
    "codeTokens": 362,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/updating/nim-migration/predefined-builds.md#2025-04-16_snippet_24",
    "pageTitle": "Migrating from CKEditor 5 Predefined Builds to New Installation Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "class Editor extends ClassicEditor {\n\tstatic builtinPlugins = [\n\t\tEssentials,\n\t\tCKFinderUploadAdapter,\n\t\tAutoformat,\n\t\tBold,\n\t\tItalic,\n\t\tBlockQuote,\n\t\tCKBox,\n\t\tCKFinder,\n\t\tCloudServices,\n\t\tEasyImage,\n\t\tHeading,\n\t\tImage,\n\t\tImageCaption,\n\t\tImageStyle,\n\t\tImageToolbar,\n\t\tImageUpload,\n\t\tIndent,\n\t\tLink,\n\t\tList,\n\t\tMediaEmbed,\n\t\tParagraph,\n\t\tPasteFromOffice,\n\t\tPictureEditing,\n\t\tTable,\n\t\tTableToolbar,\n\t\tTextTransformation\n\t];\n\n\tstatic defaultConfig = {\n\t\ttoolbar: {\n\t\t\titems: [\n\t\t\t\t'undo', 'redo',\n\t\t\t\t'|', 'heading',\n\t\t\t\t'|', 'bold', 'italic',\n\t\t\t\t'|', 'link', 'uploadImage', 'insertTable', 'blockQuote', 'mediaEmbed',\n\t\t\t\t'|', 'bulletedList', 'numberedList', 'outdent', 'indent'\n\t\t\t]\n\t\t},\n\t\timage: {\n\t\t\ttoolbar: [\n\t\t\t\t'imageStyle:inline',\n\t\t\t\t'imageStyle:block',\n\t\t\t\t'imageStyle:side',\n\t\t\t\t'|',\n\t\t\t\t'toggleImageCaption',\n\t\t\t\t'imageTextAlternative'\n\t\t\t]\n\t\t},\n\t\ttable: {\n\t\t\tcontentToolbar: [\n\t\t\t\t'tableColumn',\n\t\t\t\t'tableRow',\n\t\t\t\t'mergeTableCells'\n\t\t\t]\n\t\t},\n\t\tlanguage: 'en'\n\t};\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating CKEditor Instance with License Key in JavaScript",
    "codeDescription": "This code snippet demonstrates how to create an instance of ClassicEditor with the required license key specified in the configuration. The license key is mandatory from version 44.0.0, and users must update to the new key format. The snippet shows where to include the license key in the setup. Dependencies include CKEditor 5 and a valid license key. The editor expects a valid HTML element ID as input and initializes an instance of the editor. Users should replace '<YOUR_LICENSE_KEY>' with their actual license key or use 'GPL' if applicable under open-source terms.",
    "codeLanguage": "JavaScript",
    "codeTokens": 190,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/updating/update-to-44.md#2025-04-16_snippet_4",
    "pageTitle": "Updating CKEditor 5 to Version 44.x",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>' // Or 'GPL'.\n\n\t\t// ... Other configuration options ...\n\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Handling Button Execute Event in CKEditor 5",
    "codeDescription": "Shows how to handle the button's execute event by running a command and refocusing the editor view.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/crash-course/events-and-observables.md#2025-04-16_snippet_3",
    "pageTitle": "Events and Observables Guide for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "button.on( 'execute', () => {\n\teditor.execute( 'highlight' );\n\teditor.editing.view.focus();\n} );"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Installing and Configuring Link Feature in CKEditor 5",
    "codeDescription": "This snippet demonstrates how to install and configure the link feature in CKEditor 5, including adding it to the plugin list and toolbar configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 146,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-link/docs/features/link.md#2025-04-16_snippet_0",
    "pageTitle": "Link Feature in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, AutoLink, Link } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Link, AutoLink, /* ... */ ],\n\t\ttoolbar: [ 'link', /* ... */ ],\n\t\tlink: {\n\t\t\t// Configuration.\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating Custom CKEditor Component in Next.js",
    "codeDescription": "Implementation of a custom editor component with CKEditor 5, including necessary imports, configuration, and React integration.",
    "codeLanguage": "jsx",
    "codeTokens": 238,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/next-js.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 Integration with Next.js",
    "codeList": [
      {
        "language": "jsx",
        "code": "'use client' // Required only in App Router.\n\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport { ClassicEditor, Essentials, Paragraph, Bold, Italic } from 'ckeditor5';\nimport { FormatPainter } from 'ckeditor5-premium-features';\n\nimport 'ckeditor5/ckeditor5.css';\nimport 'ckeditor5-premium-features/ckeditor5-premium-features.css';\n\nfunction CustomEditor() {\n\treturn (\n\t\t<CKEditor\n\t\t\teditor={ ClassicEditor }\n\t\t\tconfig={ {\n\t\t\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\t\t\tplugins: [ Essentials, Paragraph, Bold, Italic, FormatPainter ],\n\t\t\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic', '|', 'formatPainter' ],\n\t\t\t\tinitialData: '<p>Hello from CKEditor 5 in React!</p>'\n\t\t\t} }\n\t\t/>\n\t);\n}\n\nexport default CustomEditor;"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "CKEditor 5 Mention Customization Demo",
    "codeDescription": "This JavaScript snippet configures a CKEditor 5 instance with customized mention feature settings. It demonstrates how to limit the dropdown, customize the feeds, and define a custom item renderer.",
    "codeLanguage": "JavaScript",
    "codeTokens": 1257,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-mention/docs/features/mentions.md#2025-04-16_snippet_9",
    "pageTitle": "Mentions (Autocompletion) Feature in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "\"ClassicEditor\n\t.create( document.querySelector( '#snippet-mention-customization' ), {\n\t\t// ... Other configuration options ...\n\t\tplugins: [ Mention, MentionCustomization, /* ... */ ],\n\t\tmention: {\n\t\t\tdropdownLimit: 4,\n\t\t\tfeeds: [\n\t\t\t\t{\n\t\t\t\t\tmarker: '@',\n\t\t\t\t\tfeed: getFeedItems,\n\t\t\t\t\titemRenderer: customItemRenderer\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t} )\n\t.then( editor => {\n\t\twindow.editor = editor;\n\t} )\n\t.catch( err => {\n\t\tconsole.error( err.stack );\n\t} );\n\nfunction MentionCustomization( editor ) {\n\t// The upcast converter will convert <a class=\\\"mention\\\" href=\\\"\\\" data-user-id=\\\"\\\">\\n\t// elements to the model 'mention' attribute.\n\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t\tview: {\n\t\t\tname: 'a',\n\t\t\tkey: 'data-mention',\n\t\t\tclasses: 'mention',\n\t\t\tattributes: {\n\t\t\t\thref: true,\n\t\t\t\t'data-user-id': true\n\t\t\t}\n\t\t},\n\t\tmodel: {\n\t\t\tkey: 'mention',\n\t\t\tvalue: viewItem => {\n\t\t\t\t// The mention feature expects that the mention attribute value\n\t\t\t\t// in the model is a plain object with a set of additional attributes.\n\t\t\t\t// In order to create a proper object, use the toMentionAttribute helper method:\n\t\t\t\tconst mentionAttribute = editor.plugins.get( 'Mention' ).toMentionAttribute( viewItem, {\n\t\t\t\t\t// Add any other properties that you need.\n\t\t\t\t\tlink: viewItem.getAttribute( 'href' ),\n\t\t\t\t\tuserId: viewItem.getAttribute( 'data-user-id' )\n\t\t\t\t} );\n\n\t\t\t\treturn mentionAttribute;\n\t\t\t}\n\t\t},\n\t\tconverterPriority: 'high'\n\t} );\n\n\t// Downcast the model 'mention' text attribute to a view <a> element.\n\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t\tmodel: 'mention',\n\t\tview: ( modelAttributeValue, { writer } ) => {\n\t\t\t// Do not convert empty attributes (lack of value means no mention).\n\t\t\tif ( !modelAttributeValue ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn writer.createAttributeElement( 'a', {\n\t\t\t\tclass: 'mention',\n\t\t\t\t'data-mention': modelAttributeValue.id,\n\t\t\t\t'data-user-id': modelAttributeValue.userId,\n\t\t\t\t'href': modelAttributeValue.link\n\t\t\t}, {\n\t\t\t\t// Make mention attribute to be wrapped by other attribute elements.\n\t\t\t\tpriority: 20,\n\t\t\t\t// Prevent merging mentions together.\n\t\t\t\tid: modelAttributeValue.uid\n\t\t\t} );\n\t\t},\n\t\tconverterPriority: 'high'\n\t} );\n}\n\nconst items = [\n\t{ id: '@swarley', userId: '1', name: 'Barney Stinson', link: 'https://www.imdb.com/title/tt0460649/characters/nm0000439' },\n\t{ id: '@lilypad', userId: '2', name: 'Lily Aldrin', link: 'https://www.imdb.com/title/tt0460649/characters/nm0004989' },\n\t{ id: '@marry', userId: '3', name: 'Marry Ann Lewis', link: 'https://www.imdb.com/title/tt0460649/characters/nm1130627' },\n\t{ id: '@marshmallow', userId: '4', name: 'Marshall Eriksen', link: 'https://www.imdb.com/title/tt0460649/characters/nm0781981' },\n\t{ id: '@rsparkles', userId: '5', name: 'Robin Scherbatsky', link: 'https://www.imdb.com/title/tt0460649/characters/nm1130627' },\n\t{ id: '@tdog', userId: '6', name: 'Ted Mosby', link: 'https://www.imdb.com/title/tt0460649/characters/nm1102140' }\n];\n\nfunction getFeedItems( queryText ) {\n\t// As an example of an asynchronous action, return a promise\n\t// that resolves after a 100ms timeout.\n\t// This can be a server request or any sort of delayed action.\n\treturn new Promise( resolve => {\n\t\tsetTimeout( () => {\n\t\t\tconst itemsToDisplay = items\n\t\t\t\t// Filter out the full list of all items to only those matching the query text.\n\t\t\t\t.filter( isItemMatching )\n\t\t\t\t// Return 10 items max - needed for generic queries when the list may contain hundreds of elements.\n\t\t\t\t.slice( 0, 10 );\n\n\t\t\tresolve( itemsToDisplay );\n\t\t}, 100 );\n\t} );\n\n\t// Filtering function - it uses `name` and `username` properties of an item to find a match.\n\tfunction isItemMatching( item ) {\n\t\t// Make the search case-insensitive.\n\t\tconst searchString = queryText.toLowerCase();\n\n\t\t// Include an item in the search results if name or username includes the current user input.\n\t\treturn (\n\t\t\titem.name.toLowerCase().includes( searchString ) ||\n\t\t\titem.id.toLowerCase().includes( searchString )\n\t\t);\n\t}\n}\n\nfunction customItemRenderer( item ) {\n\tconst itemElement = document.createElement( 'span' );\n\n\titemElement.classList.add( 'custom-item' );\n\titemElement.id = `mention-list-item-id-${ item.userId }`;\n\titemElement.textContent = `${ item.name } `;\n\n\tconst usernameElement = document.createElement( 'span' );\n\n\tusernameElement.classList.add( 'custom-item-username' );\n\tusernameElement.textContent = item.id;\n\n\titemElement.appendChild( usernameElement );\n\n\treturn itemElement;\n}\""
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Integrating React Components as Widgets in CKEditor 5",
    "codeDescription": "This code snippet demonstrates how to include a React component as a block widget within CKEditor 5. It references a specific example showing a product list component that can be added to the editor content.",
    "codeLanguage": "html",
    "codeTokens": 70,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/examples/framework/using-react-in-a-widget.md#2025-04-16_snippet_0",
    "pageTitle": "React Components Integration with CKEditor 5",
    "codeList": [
      {
        "language": "html",
        "code": "{@snippet framework/tutorials/using-react-in-widget}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating a Modal Dialog in CKEditor 5",
    "codeDescription": "This code demonstrates how to create a modal dialog in CKEditor 5 by implementing a custom plugin. The plugin adds a button to the editor toolbar that toggles a modal window with custom content.",
    "codeLanguage": "javascript",
    "codeTokens": 712,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/ui-components.md#2025-04-16_snippet_18",
    "pageTitle": "UI Components in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Necessary imports. Remember to install the packages first.\nimport {\n\tButtonView,\n\tDialog,\n\tView,\n\tPlugin,\n\tClassicEditor,\n\tParagraph,\n\tEssentials,\n\tBold,\n\tItalic\n} from 'ckeditor5';\n\n// Create a plugin that brings a button which toggles the visibility of a modal window.\n// Read more about creating the plugins here: https://ckeditor.com/docs/ckeditor5/latest/framework/architecture/plugins.html.\nclass MinimalisticModal extends Plugin {\n\t// Make sure the \"Dialog\" plugin is loaded.\n\tget requires() {\n\t\treturn [ Dialog ];\n\t}\n\n\tinit() {\n\t\t// Add a button to the component factory so it is available for the editor.\n\t\tthis.editor.ui.componentFactory.add( 'showModal', locale => {\n\t\t\tconst buttonView = new ButtonView( locale );\n\n\t\t\tbuttonView.set( {\n\t\t\t\tlabel: 'Show a modal',\n\t\t\t\ttooltip: true,\n\t\t\t\twithText: true\n\t\t\t} );\n\n\t\t\t// Define the button behavior on press.\n\t\t\tbuttonView.on( 'execute', () => {\n\t\t\t\tconst dialog = this.editor.plugins.get( 'Dialog' );\n\n\t\t\t\t// If the button is turned on, hide the modal.\n\t\t\t\tif ( buttonView.isOn ) {\n\t\t\t\t\tdialog.hide();\n\t\t\t\t\tbuttonView.isOn = false;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbuttonView.isOn = true;\n\n\t\t\t\t// Otherwise, show the modal.\n\t\t\t\t// First, create a view with some simple content. It will be displayed as the dialog's body.\n\t\t\t\tconst textView = new View( locale );\n\n\t\t\t\ttextView.setTemplate( {\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tpadding: 'var(--ck-spacing-large)',\n\t\t\t\t\t\t\twhiteSpace: 'initial',\n\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t\tmaxWidth: '500px'\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttabindex: -1\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t'This is a sample content of the modal.',\n\t\t\t\t\t\t'You can put here text, images, inputs, buttons, etc.'\n\t\t\t\t\t]\n\t\t\t\t} );\n\n\t\t\t\t// Tell the plugin to display a modal with the title, content, and one action button.\n\t\t\t\tdialog.show( {\n\t\t\t\t\tisModal: true,\n\t\t\t\t\ttitle: 'Modal with text',\n\t\t\t\t\tcontent: textView,\n\t\t\t\t\tactionButtons: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'OK',\n\t\t\t\t\t\t\tclass: 'ck-button-action',\n\t\t\t\t\t\t\twithText: true,\n\t\t\t\t\t\t\tonExecute: () => dialog.hide()\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tonHide() { buttonView.isOn = false; }\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\treturn buttonView;\n\t\t} );\n\t}\n}\n\n// Create an editor instance. Remember to have an element with the `[id=\"editor\"]` attribute in the document.\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Essentials, Paragraph, Bold, Italic, MinimalisticDialog, Dialog ],\n\t\ttoolbar: [ 'bold', 'italic', '|', 'showModal' ]\n\t} )\n\t.catch( error => {\n\t\tconsole.error( error.stack );\n\t} );"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Initializing React Application with Product Data in main.jsx",
    "codeDescription": "This code mounts the App component and provides it with sample product data. It initializes the React application with pre-defined travel destination products that include IDs, names, prices, and image references that will be used by the ProductPreview component.",
    "codeLanguage": "js",
    "codeTokens": 341,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/using-react-in-a-widget.md#2025-04-16_snippet_7",
    "pageTitle": "React Component Integration in CKEditor 5 Widget Tutorial",
    "codeList": [
      {
        "language": "js",
        "code": "// main.jsx\n\nimport ReactDOM from 'react-dom/client';\nimport App from './app';\n\n// Render the <App> in the <div class=\"root\"></div> element found in the DOM.\nReactDOM.createRoot( document.getElementById( 'root' ) ).render(\n\t<App \n\t\t// Feeding the application with predefined products.\n\t\t// In a real-life application, this sort of data would be loaded\n\t\t// from a database. To keep this tutorial simple, a few\n\t\t// hard–coded product definitions will be used.\n\t\tproducts={ [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tname: 'Colors of summer in Poland',\n\t\t\t\tprice: '$1500',\n\t\t\t\timage: 'fields.jpg'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tname: 'Mediterranean sun on Malta',\n\t\t\t\tprice: '$1899',\n\t\t\t\timage: 'malta.jpg'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tname: 'Tastes of Asia',\n\t\t\t\tprice: '$2599',\n\t\t\t\timage: 'umbrellas.jpg'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 4,\n\t\t\t\tname: 'Exotic India',\n\t\t\t\tprice: '$2200',\n\t\t\t\timage: 'tajmahal.jpg'\n\t\t\t}\n\t\t] }\n\t/>\n)"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Handling Responsive Images in CKEditor Upload Adapter",
    "codeDescription": "Demonstrates how to handle responsive images by resolving the upload promise with multiple image URLs for different sizes, which will be used for the srcset attribute.",
    "codeLanguage": "javascript",
    "codeTokens": 183,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-image/docs/framework/deep-dive/upload-adapter.md#2025-04-16_snippet_7",
    "pageTitle": "Custom Image Upload Adapter for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "// The rest of the MyUploadAdapter class definition.\n// ...\n\nxhr.addEventListener( 'load', () => {\n\tconst response = xhr.response;\n\n\t// Response handling.\n\t// ...\n\n\t// response.urls = {\n\t// \tdefault: 'http://example.com/images/image–default-size.png',\n\t// \t'160': '...',\n\t// \t'500': '...',\n\t// \tMore response urls.\n\t//  ...\n\t// \t'1052': 'http://example.com/images/image–default-size.png'\n\t// }\n\tresolve( response.urls );\n} );\n\n// The rest of the MyUploadAdapter class definition.\n// ..."
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Using Markdown Data Processor in CKEditor 5",
    "codeDescription": "This snippet shows how to use the Markdown data processor to get and set data in Markdown format. It demonstrates the usage of getData() and setData() methods with Markdown content.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-markdown-gfm/docs/features/markdown.md#2025-04-16_snippet_1",
    "pageTitle": "Markdown Output Plugin for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.getData(); // -> 'This is [CKEditor&nbsp;5](https://ckeditor.com).'\n\neditor.setData( 'This is **bold**.' );"
      }
    ],
    "relevance": 0.967
  },
  {
    "codeTitle": "Implementing Custom HTML Elements in CKEditor 5",
    "codeDescription": "This code snippet demonstrates how to create a plugin that extends the General HTML Support feature to enable custom HTML elements. It shows how to register inline and block elements, allow attributes and classes, and configure the editor.",
    "codeLanguage": "javascript",
    "codeTokens": 432,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-html-support/docs/features/general-html-support.md#2025-04-16_snippet_4",
    "pageTitle": "General HTML Support in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Essentials, Paragraph, Plugin, SourceEditingEnhanced, GeneralHtmlSupport } from 'ckeditor5';\n\n/**\n* A plugin extending General HTML Support, for example, with custom HTML elements.\n*/\nclass ExtendHTMLSupport extends Plugin {\n\tstatic get requires() {\n\t\treturn [ GeneralHtmlSupport ];\n\t}\n\n\tinit() {\n\t\t// Extend the schema with custom HTML elements.\n\t\tconst dataFilter = this.editor.plugins.get( 'DataFilter' );\n\t\tconst dataSchema = this.editor.plugins.get( 'DataSchema' );\n\n\t\t// Inline element.\n\t\tdataSchema.registerInlineElement( {\n\t\t\tview: 'element-inline',\n\t\t\tmodel: 'myElementInline'\n\t\t} );\n\n\t\t// Custom elements need to be registered using direct API instead of configuration.\n\t\tdataFilter.allowElement( 'element-inline' );\n\t\tdataFilter.allowAttributes( { name: 'element-inline', attributes: { 'data-foo': false }, classes: [ 'foo' ] } );\n\n\t\t// Block element.\n\t\tdataSchema.registerBlockElement( {\n\t\t\tview: 'element-block',\n\t\t\tmodel: 'myElementBlock',\n\t\t\tmodelSchema: {\n\t\t\t\tinheritAllFrom: '$block'\n\t\t\t}\n\t\t} );\n\n\t\tdataFilter.allowElement( 'element-block' );\n\t}\n}\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tplugins: [\n\t\t\tEssentials,\n\t\t\tParagraph,\n\t\t\tSourceEditingEnhanced,\n\t\t\tExtendHTMLSupport\n\t\t],\n\t\thtmlSupport: {\n\t\t\tallow: [\n\t\t\t\t{\n\t\t\t\t\tname: /.*/,\n\t\t\t\t\tattributes: true,\n\t\t\t\t\tclasses: true,\n\t\t\t\t\tstyles: true\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.967
  },
  {
    "codeTitle": "Implementing Document Editor Type in React",
    "codeDescription": "This code snippet demonstrates how to use the document (decoupled) editor type in a React application. It shows the setup of the editor, including toolbar placement and handling of editor lifecycle events.",
    "codeLanguage": "jsx",
    "codeTokens": 438,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/react-default-cdn.md#2025-04-16_snippet_3",
    "pageTitle": "React CKEditor 5 Integration Guide with CDN",
    "codeList": [
      {
        "language": "jsx",
        "code": "import { useEffect, useRef, useState } from 'react';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\n\nfunction App() {\n\tconst cloud = useCKEditorCloud( {\n\t\tversion: '{@var ckeditor5-version}'\n\t} );\n\n\tconst editorToolbarRef = useRef( null );\n\tconst [ isMounted, setMounted ] = useState( false );\n\n\tuseEffect( () => {\n\t\tsetMounted( true );\n\n\t\treturn () => {\n\t\t\tsetMounted( false );\n\t\t};\n\t}, [] );\n\n\tif ( cloud.status === 'error' ) {\n\t\tconsole.error( cloud );\n\t\treturn <div>Error!</div>;\n\t}\n\n\tif ( cloud.status === 'loading' ) {\n\t\treturn <div>Loading...</div>;\n\t}\n\n\tconst { DecoupledEditor, Essentials, Paragraph, Bold, Italic } = cloud.CKEditor;\n\n\treturn (\n\t\t<div>\n\t\t\t<div ref={ editorToolbarRef }></div>\n\t\t\t<div>\n\t\t\t\t{ isMounted && (\n\t\t\t\t\t<CKEditor\n\t\t\t\t\t\teditor={ DecoupledEditor }\n\t\t\t\t\t\tdata='<p>Hello from CKEditor 5 decoupled editor!</p>'\n\t\t\t\t\t\tconfig={ {\n\t\t\t\t\t\t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n\t\t\t\t\t\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic' ]\n\t\t\t\t\t\t} }\n\t\t\t\t\t\tonReady={ ( editor ) => {\n\t\t\t\t\t\t\tif ( editorToolbarRef.current ) {\n\t\t\t\t\t\t\t\teditorToolbarRef.current.appendChild( editor.ui.view.toolbar.element );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonAfterDestroy={ ( editor ) => {\n\t\t\t\t\t\t\tif ( editorToolbarRef.current ) {\n\t\t\t\t\t\t\t\tArray.from( editorToolbarRef.current.children ).forEach( child => child.remove() );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Double-Click Observer in CKEditor 5",
    "codeDescription": "This snippet shows how to create a custom DoubleClickObserver and listen for double-click events on specific elements (e.g., links) in CKEditor 5. It extends the DomEventObserver class and registers the observer with the editor's view.",
    "codeLanguage": "javascript",
    "codeTokens": 209,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/how-tos.md#2025-04-16_snippet_8",
    "pageTitle": "CKEditor 5 Framework How-to Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { DomEventObserver } from 'ckeditor5';\n\nclass DoubleClickObserver extends DomEventObserver {\n\tconstructor( view ) {\n\t\tsuper( view );\n\n\t\tthis.domEventType = 'dblclick';\n\t}\n\n\tonDomEvent( domEvent ) {\n\t\tthis.fire( domEvent.type, domEvent );\n\t}\n}\n\n// Then use in the editor:\nconst view = editor.editing.view;\nconst viewDocument = view.document;\n\nview.addObserver( DoubleClickObserver );\n\neditor.listenTo(\n\tviewDocument,\n\t'dblclick',\n\t( evt, data ) => {\n\t\tconsole.log( 'clicked' );\n\t\t// Fire your custom actions here.\n\t},\n\t{ context: 'a' }\n);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Converting HTML element to model attribute using attributeToElement helper in JavaScript",
    "codeDescription": "This snippet demonstrates how to use the attributeToElement() conversion helper to convert a <mark> HTML element to a 'highlight' model attribute and vice versa.",
    "codeLanguage": "javascript",
    "codeTokens": 71,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/crash-course/data-conversion.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Data Conversion Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.conversion.attributeToElement( {\n\tmodel: 'highlight',\n\tview: 'mark'\n} );"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Initializing Classic Editor with TypeScript",
    "codeDescription": "Basic example of initializing CKEditor 5's Classic Editor using TypeScript, including type assertion for the editor element.",
    "codeLanguage": "typescript",
    "codeTokens": 89,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/typescript-support.md#2025-04-16_snippet_0",
    "pageTitle": "TypeScript Support in CKEditor 5",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { ClassicEditor } from 'ckeditor5'\n\nconst editorPlaceholder = document.querySelector( '#editor' ) as HTMLElement;\n\nClassicEditor\n\t.create( editorPlaceholder ).catch( error => {\n\t\tconsole.error( error );\n\t} );"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Main External Data Widget Plugin Implementation",
    "codeDescription": "Master plugin that glues together the editing and UI components of the widget",
    "codeLanguage": "javascript",
    "codeTokens": 98,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/data-from-external-source.md#2025-04-16_snippet_1",
    "pageTitle": "External Data Widget Implementation in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { Plugin } from 'ckeditor5';\n\nimport ExternalDataWidgetEditing from './externaldatawidgetediting';\nimport ExternalDataWidgetUI from './externaldatawidgetui';\n\nexport default class ExternalDataWidget extends Plugin {\n\tstatic get requires() {\n\t\treturn [ ExternalDataWidgetEditing, ExternalDataWidgetUI ];\n\t}\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "React Multi-Root Editor Implementation",
    "codeDescription": "Example implementation of CKEditor 5 multi-root editor in a React component using the useMultiRootEditor hook. Shows basic configuration including plugins, toolbar setup, and data handling.",
    "codeLanguage": "tsx",
    "codeTokens": 313,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/react-multiroot-npm.md#2025-04-16_snippet_1",
    "pageTitle": "React Multi-Root Editor Integration Guide",
    "codeList": [
      {
        "language": "tsx",
        "code": "// App.jsx / App.tsx\n\nimport { MultiRootEditor, Bold, Essentials, Italic, Paragraph } from 'ckeditor5';\nimport { useMultiRootEditor } from '@ckeditor/ckeditor5-react';\n\nimport 'ckeditor5/ckeditor5.css';\n\nconst App = () => {\n\tconst editorProps = {\n\t\teditor: MultiRootEditor,\n\t\tdata: {\n\t\t\tintro: '<h1>React multi-root editor</h1>',\n\t\t\tcontent: '<p>Hello from CKEditor&nbsp;5 multi-root!</p>'\n\t\t},\n\t\tconfig: {\n\t\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\t\tplugins: [ Essentials, Bold, Italic, Paragraph ],\n\t\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic' ]\n\t\t}\n\t};\n\n\tconst {\n\t\teditor,\n\t\ttoolbarElement,\n\t\teditableElements,\n\t\tdata,\n\t\tsetData,\n\t\tattributes,\n\t\tsetAttributes\n\t} = useMultiRootEditor( editorProps );\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h2>Using CKEditor&nbsp;5 multi-root editor in React</h2>\n\n\t\t\t{ toolbarElement }\n\n\t\t\t{ editableElements }\n\t\t</div>\n\t);\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring HTML for CKEditor 5 CDN Setup",
    "codeDescription": "HTML template that includes the necessary CDN links for CKEditor 5 CSS and JavaScript files. Sets up the basic editor container and includes the required script tags.",
    "codeLanguage": "html",
    "codeTokens": 220,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/implementing-a-block-widget.md#2025-04-16_snippet_16",
    "pageTitle": "Implementing a Block Widget in CKEditor 5",
    "codeList": [
      {
        "language": "html",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title>CKEditor 5 Framework – tutorial CDN</title>\n\t\t<link rel=\"stylesheet\" href=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.css\" />\n\t</head>\n\t<body>\n\t\t<div id=\"editor\">\n\t\t\t<p>Hello world!</p>\n\t\t</div>\n\t\t<script src=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.umd.js\"></script>\n\n\t\t<script type=\"module\" src=\"/main.js\"></script>\n\t</body>\n</html>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing CKEditor in Next.js page",
    "codeDescription": "Example of how to use the client-side CKEditor component in a Next.js page, applicable for both App Router and Pages Router.",
    "codeLanguage": "jsx",
    "codeTokens": 99,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/next-js.md#2025-04-16_snippet_3",
    "pageTitle": "Integrating CKEditor 5 with Next.js using CDN",
    "codeList": [
      {
        "language": "jsx",
        "code": "// app/page.js (App Router)\n// pages/index.js (Pages Router)\n\nimport ClientSideCustomEditor from '@/components/client-side-custom-editor';\n\nfunction Home() {\n  return (\n    <ClientSideCustomEditor />\n  );\n}\n\nexport default Home;"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Installing CKEditor 5 premium features package",
    "codeDescription": "Command to install the CKEditor 5 premium features package using npm.",
    "codeLanguage": "bash",
    "codeTokens": 46,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/quick-start.md#2025-04-16_snippet_3",
    "pageTitle": "Installing Vanilla JS CKEditor 5 using npm or ZIP",
    "codeList": [
      {
        "language": "bash",
        "code": "npm install ckeditor5-premium-features"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Executing the Undo Command in CKEditor 5",
    "codeDescription": "This code snippet shows how to programmatically execute the `undo` command in CKEditor 5 using the `editor.execute()` method. It demonstrates how to undo the latest batch of changes in the editor's history.",
    "codeLanguage": "javascript",
    "codeTokens": 71,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-undo/docs/features/undo-redo.md#2025-04-16_snippet_1",
    "pageTitle": "Undo/Redo Feature in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.execute( 'undo');"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Initializing Multi-root Editor with CKEditor 5",
    "codeDescription": "Configuration script for setting up a multi-root editor with essential plugins and toolbar items. Includes initialization of multiple editable areas, toolbar setup, and focus tracking for sticky behavior.",
    "codeLanguage": "javascript",
    "codeTokens": 421,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/examples/builds/multi-root-editor.md#2025-04-16_snippet_0",
    "pageTitle": "Multi-root Editor Implementation with CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import {\n\tMultiRootEditor,\n\tEssentials,\n\tBold,\n\tItalic,\n\tHeading,\n\tLink,\n\tTable,\n\tMediaEmbed,\n\tList,\n\tIndent\n} from 'ckeditor5';\n\nimport 'ckeditor5/ckeditor5.css';\n\nMultiRootEditor\n\t.create(\n\t\t{\n\t\t\theader: document.querySelector( '#header' ),\n\t\t\tcontent: document.querySelector( '#content' ),\n\t\t\tleftSide: document.querySelector( '#left-side' ),\n\t\t\trightSide: document.querySelector( '#right-side' )\n\t\t},\n\t\t{\n\t\t\tlicenseKey: 'GPL',\n\t\t\tplugins: [\n\t\t\t\tEssentials,\n\t\t\t\tHeading,\n\t\t\t\tBold,\n\t\t\t\tItalic,\n\t\t\t\tLink,\n\t\t\t\tTable,\n\t\t\t\tMediaEmbed,\n\t\t\t\tList,\n\t\t\t\tIndent\n\t\t\t],\n\t\t\ttoolbar: {\n\t\t\t\titems: [\n\t\t\t\t\t'undo', 'redo',\n\t\t\t\t\t'|', 'heading',\n\t\t\t\t\t'|', 'bold', 'italic',\n\t\t\t\t\t'|', 'link', 'insertTable', 'mediaEmbed',\n\t\t\t\t\t'|', 'bulletedList', 'numberedList', 'outdent', 'indent'\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t)\n\t.then( editor => {\n\t\twindow.editor = editor;\n\t\tconst toolbarContainer = document.querySelector( '#toolbar' );\n\t\ttoolbarContainer.appendChild( editor.ui.view.toolbar.element );\n\t\teditor.ui.focusTracker.on( 'change:isFocused', () => {\n\t\t\tif ( editor.ui.focusTracker.isFocused ) {\n\t\t\t\ttoolbarContainer.classList.add( 'sticky' );\n\t\t\t} else {\n\t\t\t\ttoolbarContainer.classList.remove( 'sticky' );\n\t\t\t}\n\t\t} );\n\t} )\n\t.catch( error => {\n\t\tconsole.error( 'There was a problem initializing the editor.', error );\n\t} );"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Using CKEditor Component in Vue 2 Template",
    "codeDescription": "Vue component example demonstrating how to use the CKEditor component with open-source and premium plugins, including configuration and data binding.",
    "codeLanguage": "html",
    "codeTokens": 226,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/vuejs-v2.md#2025-04-16_snippet_3",
    "pageTitle": "Integrating CKEditor 5 with Vue.js 2.x using CDN",
    "codeList": [
      {
        "language": "html",
        "code": "<template>\n\t<ckeditor :editor=\"editor\" v-model=\"editorData\" :config=\"editorConfig\" />\n</template>\n\n<script>\nconst {\n\tClassicEditor,\n\tEssentials,\n\tBold,\n\tItalic,\n\tParagraph,\n} = CKEDITOR;\nconst { FormatPainter } = CKEDITOR_PREMIUM_FEATURES;\n\nexport default {\n\tname: 'app',\n\tdata() {\n\t\treturn {\n\t\t\teditor: ClassicEditor,\n\t\t\teditorData: '<p>Hello from CKEditor 5 in Vue 2!</p>',\n\t\t\teditorConfig: {\n\t\t\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\t\t\tplugins: [ Essentials, Paragraph, Bold, Italic, FormatPainter ],\n\t\t\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic', '|', 'formatPainter' ]\n\t\t\t}\n\t\t};\n\t}\n};\n</script>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Registering an Allowed Element in CKEditor 5 Schema",
    "codeDescription": "This code snippet registers a new model element 'myElement' in the CKEditor 5 schema, specifying that this element is allowed within the root element of the model. This registration is crucial for defining how the element can be structured in the document's model.",
    "codeLanguage": "javascript",
    "codeTokens": 91,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/schema.md#2025-04-16_snippet_0",
    "pageTitle": "Registering Schema Elements in CKEditor 5 Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "schema.register( 'myElement', {\n\tallowIn: '$root'\n} );"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring CKEditor 5 Plugins and Default Settings (TypeScript)",
    "codeDescription": "This TypeScript snippet configures CKEditor 5 plugins and default settings. It creates a custom ClassicEditor class with built-in plugins and a default toolbar configuration, similar to the JavaScript version but with TypeScript syntax.",
    "codeLanguage": "typescript",
    "codeTokens": 317,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/advanced/integrating-from-source-webpack.md#2025-04-16_snippet_9",
    "pageTitle": "Integrating CKEditor 5 from Source Using Webpack",
    "codeList": [
      {
        "language": "typescript",
        "code": "// ckeditor.ts\n\nimport { ClassicEditor } from '@ckeditor/ckeditor5-editor-classic';\nimport { Essentials } from '@ckeditor/ckeditor5-essentials';\nimport { Autoformat } from '@ckeditor/ckeditor5-autoformat';\nimport { Bold, Italic } from '@ckeditor/ckeditor5-basic-styles';\nimport { BlockQuote } from '@ckeditor/ckeditor5-block-quote';\nimport { Heading } from '@ckeditor/ckeditor5-heading';\nimport { Link } from '@ckeditor/ckeditor5-link';\nimport { List } from '@ckeditor/ckeditor5-list';\nimport { Paragraph } from '@ckeditor/ckeditor5-paragraph';\n\nexport default class CustomEditor extends ClassicEditor {}\n\nCustomEditor.builtinPlugins = [\n\tEssentials,\n\tAutoformat,\n\tBold,\n\tItalic,\n\tBlockQuote,\n\tHeading,\n\tLink,\n\tList,\n\tParagraph\n];\n\nCustomEditor.defaultConfig = {\n\ttoolbar: {\n\t\titems: [\n\t\t\t'heading',\n\t\t\t'|',\n\t\t\t'bold',\n\t\t\t'italic',\n\t\t\t'link',\n\t\t\t'bulletedList',\n\t\t\t'numberedList',\n\t\t\t'blockQuote',\n\t\t\t'undo',\n\t\t\t'redo'\n\t\t]\n\t},\n\tlanguage: 'en'\n};"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Initializing DecoupledEditor with Custom Configuration",
    "codeDescription": "Demonstrates how to create a CKEditor 5 document editor using DecoupledEditor, configuring the editor with a specific editable container and injecting the toolbar dynamically",
    "codeLanguage": "javascript",
    "codeTokens": 155,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-editor-decoupled/docs/framework/document-editor.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Document Editor Setup and Customization",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { DecoupledEditor } from 'ckeditor5';\n\nDecoupledEditor.create( document.querySelector( '.document-editor__editable' ), {\n\tcloudServices: {\n\t\t// A configuration of CKEditor Cloud Services.\n\t\t// ...\n\t}\n} )\n.then( editor => {\n\tconst toolbarContainer = document.querySelector( '.document-editor__toolbar' );\n\n\ttoolbarContainer.appendChild( editor.ui.view.toolbar.element );\n\n\twindow.editor = editor;\n} )\n.catch( err => {\n\tconsole.error( err );\n} );"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Complete CKEditor 5 Salesforce Integration Code",
    "codeDescription": "Full integration code for implementing CKEditor 5 in a Salesforce Visualforce page. Includes HTML structure, resource loading, and editor initialization with basic toolbar configuration.",
    "codeLanguage": "html",
    "codeTokens": 362,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/salesforce.md#2025-04-16_snippet_3",
    "pageTitle": "Integrating CKEditor 5 with Salesforce using ZIP archive",
    "codeList": [
      {
        "language": "html",
        "code": "<apex:page showHeader=\"false\" standardStylesheets=\"false\" docType=\"html-5.0\">\n\t<head>\n\t\t<!-- Load CKEditor&nbsp;5 JavaScript and CSS from static resources -->\n\t\t<apex:includeScript value=\"{!$Resource.CKEditor5JS}\"/>\n\t\t<apex:stylesheet value=\"{!$Resource.CKEditor5CSS}\"/>\n\t</head>\n\t<body>\n\t\t<!-- Editor container -->\n\t\t <div id=\"editor\" style=\"min-height: 300px; border: 1px solid #ccc;\">CKEditor&nbsp;5 integration with Salesforce.</div>\n\n\t\t <!-- Initialization script -->\n\t\t  <script type=\"module\">\n\t\t\tconst {\n\t\t\t\tClassicEditor,\n\t\t\t\tEssentials,\n\t\t\t\tBold,\n\t\t\t\tItalic,\n\t\t\t\tFont,\n\t\t\t\tParagraph\n\t\t\t} = CKEDITOR;\n\n\t\t\tClassicEditor\n\t\t\t\t.create( document.querySelector( '#editor' ), {\n\t\t\t\t\tlicenseKey: '<YOUR-LICENSE-KEY>' // Or 'GPL',\n\t\t\t\t\tplugins: [ Essentials, Bold, Italic, Font, Paragraph ],\n\t\t\t\t\ttoolbar: [\n\t\t\t\t\t\t'undo', 'redo', '|', 'bold', 'italic', '|',\n\t\t\t\t\t\t'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor'\n\t\t\t\t\t]\n\t\t\t\t} )\n\t\t\t\t.then( /* ... */ )\n\t\t\t\t.catch( /* ... */ );\n\t\t</script>\n\t</body>\n</apex:page>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Using MultiRootEditor with withCKEditorCloud HOC (After Migration)",
    "codeDescription": "Updated implementation of the useMultiRootEditor hook using the withCKEditorCloud HOC to load CKEditor 5 from CDN, with proper handling of loading and error states.",
    "codeLanguage": "jsx",
    "codeTokens": 501,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/updating/migration-to-cdn/react.md#2025-04-16_snippet_11",
    "pageTitle": "Migrating CKEditor 5 React Integration from npm to CDN",
    "codeList": [
      {
        "language": "jsx",
        "code": "import { withCKEditorCloud } from '@ckeditor/ckeditor5-react';\n\n/**\n * The `withCKEditorCloud` HOC allows you to load CKEditor 5 from the CKEditor Cloud and inject loaded data\n * as `cloud` property into your component. Configuration of the `cloud` passed to `withCKEditorCloud` is\n * the same as for the `useCKEditorCloud` hook and you can specify the version of CKEditor 5 to load and\n * optionally enable premium features.\n */\nconst withCKCloud = withCKEditorCloud( {\n\tcloud: {\n\t\tversion: '43.0.0',\n\t\tlanguages: [ 'en', 'de' ]\n\t},\n\n\t// Optional. Render error when loading CKEditor 5 from the CKEditor Cloud fails.\n\trenderError: ( error ) => {\n\t\tconsole.error( error );\n\n\t\treturn <div>Error!</div>;\n\t},\n\n\t// Optional: Render loading state when CKEditor 5 is being loaded from the CKEditor Cloud.\n\trenderLoader: () => <div>Loading...</div>,\n} );\n\nconst App = withCKCloud( ( { cloud } ) => {\n\tconst {\n\t\tMultiRootEditor,\n\t\tBold,\n\t\tEssentials,\n\t\tItalic,\n\t\tParagraph\n\t} = cloud.CKEditor;\n\n\tconst editorProps = {\n\t\teditor: MultiRootEditor,\n\t\tdata: {\n\t\t\tintro: '<h1>React multi-root editor</h1>',\n\t\t\tcontent: '<p>Hello from CKEditor&nbsp;5 multi-root!</p>'\n\t\t},\n\t\tconfig: {\n\t\t\tplugins: [ Essentials, Bold, Italic, Paragraph ],\n\t\t\ttoolbar: {\n\t\t\t\titems: [ 'undo', 'redo', '|', 'bold', 'italic' ]\n\t\t\t},\n\t\t}\n\t};\n\n\tconst {\n\t\teditor,\n\t\ttoolbarElement,\n\t\teditableElements,\n\t\tdata,\n\t\tsetData,\n\t\tattributes,\n\t\tsetAttributes\n\t} = useMultiRootEditor( editorProps );\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{ toolbarElement }\n\t\t\t{ editableElements }\n\t\t</div>\n\t);\n} );"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Installing Image Features in CKEditor 5",
    "codeDescription": "Basic setup for installing CKEditor 5 image features including Image, ImageCaption, ImageResize, ImageStyle, ImageToolbar, and LinkImage plugins. Shows how to initialize the editor with necessary configurations.",
    "codeLanguage": "javascript",
    "codeTokens": 183,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-image/docs/features/images-installation.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Image Features Installation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import {\n\tClassicEditor,\n\tImage,\n\tImageCaption,\n\tImageResize,\n\tImageStyle,\n\tImageToolbar,\n\tLinkImage\n} from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Image, ImageToolbar, ImageCaption, ImageStyle, ImageResize, LinkImage ],\n\t\ttoolbar: [ 'insertImage', /* ... */ ],\n\t\timage: {\n\t\t\t// Configuration.\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring Block Toolbar Items in JavaScript",
    "codeDescription": "Defines the items that appear in the block toolbar using the blockToolbar configuration option. This example adds bold, italic, and link buttons to the toolbar.",
    "codeLanguage": "javascript",
    "codeTokens": 74,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/toolbar.md#2025-04-16_snippet_8",
    "pageTitle": "CKEditor 5 Toolbar Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "blockToolbar: {\n\titems: [\n\t\t'bold',\n\t\t'italic',\n\t\t'link'\n\t]\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Installing and Configuring Mermaid Plugin for CKEditor 5",
    "codeDescription": "This code snippet demonstrates how to import and configure the Mermaid plugin for CKEditor 5. It shows the necessary imports, including the CSS file, and how to add the plugin to the editor's configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 179,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/features/mermaid.md#2025-04-16_snippet_0",
    "pageTitle": "Mermaid Flowcharts and Diagrams Integration in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor } from 'ckeditor5';\nimport { Mermaid } from '@ckeditor/ckeditor5-mermaid/dist/index.js';\n\nimport '@ckeditor/ckeditor5-mermaid/dist/index.css';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Mermaid, /* ... */ ],\n\t\ttoolbar: [ 'mermaid', /* ... */ ]\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Defining PlaceholderEditing plugin with schema and converters for CKEditor 5",
    "codeDescription": "JavaScript code for the PlaceholderEditing plugin, including schema definition and conversion methods for the placeholder feature.",
    "codeLanguage": "javascript",
    "codeTokens": 493,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/implementing-an-inline-widget.md#2025-04-16_snippet_3",
    "pageTitle": "Implementing an Inline Widget Tutorial for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { Plugin, Widget, toWidget } from 'ckeditor5';\n\nimport './theme/placeholder.css';\n\nexport default class PlaceholderEditing extends Plugin {\n\tstatic get requires() {\n\t\treturn [ Widget ];\n\t}\n\n\tinit() {\n\t\tconsole.log( 'PlaceholderEditing#init() got called' );\n\n\t\tthis._defineSchema();\n\t\tthis._defineConverters();\n\t}\n\n\t_defineSchema() {\n\t\tconst schema = this.editor.model.schema;\n\n\t\tschema.register( 'placeholder', {\n\t\t\tinheritAllFrom: '$inlineObject',\n\t\t\tallowAttributes: [ 'name' ]\n\t\t} );\n\t}\n\n\t_defineConverters() {\n\t\tconst conversion = this.editor.conversion;\n\n\t\tconversion.for( 'upcast' ).elementToElement( {\n\t\t\tview: {\n\t\t\t\tname: 'span',\n\t\t\t\tclasses: [ 'placeholder' ]\n\t\t\t},\n\t\t\tmodel: ( viewElement, { writer: modelWriter } ) => {\n\t\t\t\tconst name = viewElement.getChild( 0 ).data.slice( 1, -1 );\n\n\t\t\t\treturn modelWriter.createElement( 'placeholder', { name } );\n\t\t\t}\n\t\t} );\n\n\t\tconversion.for( 'editingDowncast' ).elementToElement( {\n\t\t\tmodel: 'placeholder',\n\t\t\tview: ( modelItem, { writer: viewWriter } ) => {\n\t\t\t\tconst widgetElement = createPlaceholderView( modelItem, viewWriter );\n\n\t\t\t\treturn toWidget( widgetElement, viewWriter );\n\t\t\t}\n\t\t} );\n\n\t\tconversion.for( 'dataDowncast' ).elementToElement( {\n\t\t\tmodel: 'placeholder',\n\t\t\tview: ( modelItem, { writer: viewWriter } ) => createPlaceholderView( modelItem, viewWriter )\n\t\t} );\n\n\t\tfunction createPlaceholderView( modelItem, viewWriter ) {\n\t\t\tconst name = modelItem.getAttribute( 'name' );\n\n\t\t\tconst placeholderView = viewWriter.createContainerElement( 'span', {\n\t\t\t\tclass: 'placeholder'\n\t\t\t} );\n\n\t\t\tconst innerText = viewWriter.createText( '{' + name + '}' );\n\t\t\tviewWriter.insert( viewWriter.createPositionAt( placeholderView, 0 ), innerText );\n\n\t\t\treturn placeholderView;\n\t\t}\n\t}\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Initializing CKEditor 5 with Table and TableToolbar Plugins",
    "codeDescription": "This snippet demonstrates how to import and configure CKEditor 5 with the Table and TableToolbar plugins. It includes setting up the editor with a license key, specifying plugins, and configuring the toolbar.",
    "codeLanguage": "javascript",
    "codeTokens": 162,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-table/docs/features/tables.md#2025-04-16_snippet_0",
    "pageTitle": "Tables in CKEditor 5 (Overview)",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Table, TableToolbar } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Table, TableToolbar, Bold, /* ... */ ],\n\t\ttoolbar: [ 'insertTable', /* ... */ ],\n\t\ttable: {\n\t\t\t// Configuration.\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing InsertProductPreviewCommand for CKEditor 5",
    "codeDescription": "This command inserts the productPreview element into the model at the current selection position. It is executed by the ProductPreview React component to insert a widget into the editor content.",
    "codeLanguage": "javascript",
    "codeTokens": 203,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/using-react-in-a-widget.md#2025-04-16_snippet_3",
    "pageTitle": "React Component Integration in CKEditor 5 Widget Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { Command } from 'ckeditor5';\n\nexport default class InsertProductPreviewCommand extends Command {\n\texecute( id ) {\n\t\tthis.editor.model.change( writer => {\n\t\t\t// Insert <productPreview id=\"...\">*</productPreview> at the current selection position\n\t\t\t// in a way which will result in creating a valid model structure.\n\t\t\tthis.editor.model.insertContent( writer.createElement( 'productPreview', { id } ) );\n\t\t} );\n\t}\n\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst allowedIn = model.schema.findAllowedParent( selection.getFirstPosition(), 'productPreview' );\n\n\t\tthis.isEnabled = allowedIn !== null;\n\t}\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Extended Toolbar Configuration Format",
    "codeDescription": "Demonstrates the extended toolbar configuration format with comprehensive options including item grouping and layout settings.",
    "codeLanguage": "javascript",
    "codeTokens": 169,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/toolbar.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 Toolbar Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "toolbar: {\n\titems: [\n\t\t'undo', 'redo',\n\t\t'|',\n\t\t'heading',\n\t\t'|',\n\t\t'fontfamily', 'fontsize', 'fontColor', 'fontBackgroundColor',\n\t\t'|',\n\t\t'bold', 'italic', 'strikethrough', 'subscript', 'superscript', 'code',\n\t\t'|',\n\t\t'link', 'uploadImage', 'blockQuote', 'codeBlock',\n\t\t'|',\n\t\t'bulletedList', 'numberedList', 'todoList', 'outdent', 'indent'\n\t],\n\tshouldNotGroupWhenFull: false\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Placeholder Command in JavaScript for CKEditor 5",
    "codeDescription": "This code defines a command class that inserts a placeholder element at the current selection position. The command accepts a 'value' parameter to set the placeholder name and ensures the placeholder can only be inserted in valid locations.",
    "codeLanguage": "javascript",
    "codeTokens": 270,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/implementing-an-inline-widget.md#2025-04-16_snippet_6",
    "pageTitle": "Implementing an Inline Widget Tutorial for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "// placeholder/placeholdercommand.js\n\nimport { Command } from 'ckeditor5';\n\nexport default class PlaceholderCommand extends Command {\n\texecute( { value } ) {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\n\t\teditor.model.change( writer => {\n\t\t\t// Create a <placeholder> element with the \"name\" attribute (and all the selection attributes)...\n\t\t\tconst placeholder = writer.createElement( 'placeholder', {\n\t\t\t\t...Object.fromEntries( selection.getAttributes() ),\n\t\t\t\tname: value\n\t\t\t} );\n\n\t\t\t// ... and insert it into the document. Put the selection on the inserted element.\n\t\t\teditor.model.insertObject( placeholder, null, null, { setSelection: 'on' } );\n\t\t} );\n\t}\n\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tconst isAllowed = model.schema.checkChild( selection.focus.parent, 'placeholder' );\n\n\t\tthis.isEnabled = isAllowed;\n\t}\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Low-level Keyboard Event Handling Implementation",
    "codeDescription": "Detailed implementation of keyboard event handling using the CKEditor 5 event system, showing how to handle keystroke events at a lower level.",
    "codeLanguage": "javascript",
    "codeTokens": 127,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/crash-course/keystrokes.md#2025-04-16_snippet_4",
    "pageTitle": "CKEditor 5 Keyboard Shortcuts Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.editing.view.document.on( 'keydown:5570632', ( event, data ) => {\n\t// Call the `highlight` command.\n\teditor.execute( 'highlight' );\n\n\t// Stop the event in the DOM.\n\tdata.preventDefault();\n\tdata.stopPropagation();\n\n\t// Stop the event in the framework.\n\tevent.stop();\n\n\t// Mark this event as handled.\n\tevent.return = true;\n} );"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Creating CKEditor Vue Component",
    "codeDescription": "Vue component implementation that integrates CKEditor 5 with both open-source and premium plugins. Includes component setup, configuration, and necessary imports.",
    "codeLanguage": "html",
    "codeTokens": 256,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/nuxt.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 Integration with Nuxt Framework",
    "codeList": [
      {
        "language": "html",
        "code": "<template>\n\t<ckeditor\n\t\tv-model=\"data\"\n\t\t:editor=\"ClassicEditor\"\n\t\t:config=\"config\"\n\t/>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\nimport { ClassicEditor, Essentials, Paragraph, Bold, Italic } from 'ckeditor5';\nimport { FormatPainter } from 'ckeditor5-premium-features';\nimport { Ckeditor } from '@ckeditor/ckeditor5-vue';\n\nimport 'ckeditor5/ckeditor5.css';\nimport 'ckeditor5-premium-features/ckeditor5-premium-features.css';\n\nconst data = ref( '<p>Hello world!</p>' );\n\nconst config = computed( () => {\n\treturn {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Essentials, Paragraph, Bold, Italic, FormatPainter ],\n\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic', '|', 'formatPainter' ]\n\t};\n} );\n</script>"
      }
    ],
    "relevance": 0.964
  },
  {
    "codeTitle": "Configuring Link Toolbar in CKEditor 5",
    "codeDescription": "Example of how to configure the link toolbar in CKEditor 5 v45.0.0. This snippet demonstrates setting custom toolbar items for the link feature.",
    "codeLanguage": "javascript",
    "codeTokens": 117,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/updating/update-to-45.md#2025-04-16_snippet_0",
    "pageTitle": "Update Guide for CKEditor 5 v45.x",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlink: {\n\t\t\ttoolbar: [ 'myCustomLinkInfo', '|', 'editLink', 'linkProperties', 'unlink' ]\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.963
  },
  {
    "codeTitle": "Using Observable Properties in CKEditor 5 Commands",
    "codeDescription": "This snippet demonstrates how to make properties observable in a CKEditor 5 command. It shows setting up observable properties and listening to their changes.",
    "codeLanguage": "javascript",
    "codeTokens": 145,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/core-editor-architecture.md#2025-04-16_snippet_7",
    "pageTitle": "Core Editor Architecture in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "class Command {\n\tconstructor() {\n\t\tthis.set( 'value', undefined );\n\t\tthis.set( 'isEnabled', undefined );\n\t}\n}\n\nmix( Command, ObservableMixin );\n\nconst command = new Command();\n\ncommand.on( 'change:value', ( evt, propertyName, newValue, oldValue ) => {\n\tconsole.log(\n\t\t`${ propertyName } has changed from ${ oldValue } to ${ newValue }`\n\t);\n} )\n\ncommand.value = true; // -> 'value has changed from undefined to true'"
      }
    ],
    "relevance": 0.963
  },
  {
    "codeTitle": "Disabling Nested Block Quotes in CKEditor 5",
    "codeDescription": "This code demonstrates how to disable the nesting of block quotes by creating a custom plugin that adds a schema rule. The plugin checks the context and prevents placing a block quote inside another block quote.",
    "codeLanguage": "javascript",
    "codeTokens": 184,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-block-quote/docs/features/block-quote.md#2025-04-16_snippet_1",
    "pageTitle": "Block Quote Feature in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "function DisallowNestingBlockQuotes( editor ) {\n\teditor.model.schema.addChildCheck( ( context, childDefinition ) => {\n\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition.name == 'blockQuote' ) {\n\t\t\treturn false;\n\t\t}\n\t} );\n}\n\n// Pass it via config.extraPlugins or config.plugins:\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\textraPlugins: [ DisallowNestingBlockQuotes ],\n\n\t\t// The rest of the configuration.\n\t\t// ...\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.963
  },
  {
    "codeTitle": "Implementing Toolbar Hide/Show in Read-only Mode with CKEditor 5",
    "codeDescription": "Code demonstrating how to dynamically hide and show the editor toolbar when toggling read-only mode. Uses the editor's change:isReadOnly event to control toolbar visibility through CSS display property.",
    "codeLanguage": "javascript",
    "codeTokens": 179,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/features/read-only.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Read-only Mode Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// The editor's configuration.\n\t\t// ...\n\t} )\n\t.then( editor => {\n\t\tconst toolbarElement = editor.ui.view.toolbar.element;\n\n\t\teditor.on( 'change:isReadOnly', ( evt, propertyName, isReadOnly ) => {\n\t\t\tif ( isReadOnly ) {\n\t\t\t\ttoolbarElement.style.display = 'none';\n\t\t\t} else {\n\t\t\t\ttoolbarElement.style.display = 'flex';\n\t\t\t}\n\t\t} );\n\t} )\n\t.catch( error => {\n\t\tconsole.log( error );\n\t} );"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Converting HTML to CKEditor 5 Model for Highlighting",
    "codeDescription": "This snippet sets up conversion between the 'highlight' model attribute and the HTML 'mark' element. It enables bi-directional conversion for highlighted text.",
    "codeLanguage": "JavaScript",
    "codeTokens": 70,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/crash-course/model-and-schema.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 Model and Schema Tutorial",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "editor.conversion.attributeToElement( {\n\tmodel: 'highlight',\n\tview: 'mark'\n} );"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "CKEditor 5 integration with CKBox using JavaScript",
    "codeDescription": "This JavaScript code snippet shows how to integrate CKBox with CKEditor 5. It imports necessary modules, configures the editor with CKBox plugin and toolbar, and initializes the editor instance. Ensure you have a valid license key.",
    "codeLanguage": "JavaScript",
    "codeTokens": 207,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-ckbox/docs/features/ckbox.md#2025-04-16_snippet_1",
    "pageTitle": "CKBox File Manager Integration in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "\"import { ClassicEditor, Image, ImageUpload, PictureEditing, CKBox, CKBoxImageEdit, CloudServices } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\tplugins: [ Image, PictureEditing, ImageUpload, CloudServices, CKBox, CKBoxImageEdit, /* ... */ ],\n\t\ttoolbar: [ 'ckbox', 'ckboxImageEdit', /* ... */ ], // Depending on your preference.\n\t\tckbox: {\n\t\t\t// Configuration.\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );\""
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Configuring Auto Image Embedding in CKEditor 5",
    "codeDescription": "Configuration code for enabling automatic image embedding from pasted URLs in CKEditor 5. Includes the AutoImage plugin for automatic conversion of image links to embedded images.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-image/docs/features/images-inserting.md#2025-04-16_snippet_1",
    "pageTitle": "Image Insertion Documentation for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\tplugins: [ /* ... */ , Image, AutoImage ]\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Implementing Custom Plugin with TypeScript",
    "codeDescription": "Complete example of creating a custom Timestamp plugin with TypeScript, including interface augmentation and configuration options.",
    "codeLanguage": "typescript",
    "codeTokens": 425,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/typescript-support.md#2025-04-16_snippet_3",
    "pageTitle": "TypeScript Support in CKEditor 5",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {\n  ClassicEditor,\n  Bold,\n  Essentials,\n  Heading,\n  Italic,\n  Paragraph,\n  List,\n  Plugin,\n  ButtonView\n} from 'ckeditor5';\n\nimport 'ckeditor5/ckeditor5.css';\n\ndeclare module '@ckeditor/ckeditor5-core' {\n\tinterface EditorConfig {\n\t\ttimestamp?: { utc: boolean };\n\t}\n\n\tinterface PluginsMap {\n\t\t[ Timestamp.pluginName ]: Timestamp;\n\t}\n}\n\nclass Timestamp extends Plugin {\n\tpublic static get pluginName() {\n\t\treturn 'Timestamp' as const;\n\t}\n\n\tpublic init(): void {\n\t\tconst editor = this.editor;\n\n\t\tconst utc = editor.config.get( 'timestamp.utc' );\n\n\t\teditor.ui.componentFactory.add( 'timestamp', () => {\n\t\t\tconst button = new ButtonView();\n\n\t\t\tbutton.set( {\n\t\t\t\tlabel: 'Timestamp',\n\t\t\t\twithText: true\n\t\t\t} );\n\n\t\t\tbutton.on( 'execute', () => {\n\t\t\t\tconst now = new Date();\n\n\t\t\t\tconst date = utc ? now.toUTCString() : now.toString();\n\n\t\t\t\teditor.model.change( writer => {\n\t\t\t\t\teditor.model.insertContent( writer.createText( date ) );\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\treturn button;\n\t\t} );\n\t}\n}\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ) as HTMLElement, {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\tplugins: [ Essentials, Paragraph, Heading, List, Bold, Italic, Timestamp ],\n\t\ttoolbar: [ 'heading', 'bold', 'italic', 'numberedList', 'bulletedList', 'timestamp' ],\n\t\ttimestamp: { utc: true }\n\t} )\n\t.then( editor => {\n\t\tconsole.log( 'Editor was initialized', editor );\n\t\tconsole.log( editor.plugins.get( 'Timestamp' ) );\n\t} )\n\t.catch( error => {\n\t\tconsole.error( error.stack );\n\t} );"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing Balloon Block Editor in CKEditor 5",
    "codeDescription": "This snippet demonstrates how to include and use the balloon block editor in your web page. The balloon block editor provides two toolbars: a balloon toolbar for inline formatting and a block toolbar with a drag indicator for block-level formatting and rearrangement.",
    "codeLanguage": "html",
    "codeTokens": 79,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/examples/builds/balloon-block-editor.md#2025-04-16_snippet_0",
    "pageTitle": "Balloon Block Editor Implementation in CKEditor 5",
    "codeList": [
      {
        "language": "html",
        "code": "{@snippet examples/balloon-block-editor}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Creating CKEditor 5 Vue Component for Nuxt",
    "codeDescription": "This Vue single file component demonstrates how to set up CKEditor 5 with both open-source and premium plugins using the CDN approach. It uses the useCKEditorCloud hook to load editor resources.",
    "codeLanguage": "html",
    "codeTokens": 325,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/nuxt.md#2025-04-16_snippet_1",
    "pageTitle": "Integrating CKEditor 5 with Nuxt using CDN",
    "codeList": [
      {
        "language": "html",
        "code": "<template>\n\t<ckeditor\n\t\tv-if=\"editor\"\n\t\tv-model=\"data\"\n\t\t:editor=\"editor\"\n\t\t:config=\"config\"\n\t/>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\nimport { Ckeditor, useCKEditorCloud } from '@ckeditor/ckeditor5-vue';\n\nconst cloud = useCKEditorCloud( {\n\tversion: '{@var ckeditor5-version}',\n\tpremium: true\n} );\n\nconst data = ref( '<p>Hello world!</p>' );\n\nconst editor = computed( () => {\n\tif ( !cloud.data.value ) {\n\t\treturn null;\n\t}\n\n\treturn cloud.data.value.CKEditor.ClassicEditor;\n} );\n\nconst config = computed( () => {\n\t\tif ( !cloud.data.value ) {\n\t\treturn null;\n\t}\n\n\tconst { Essentials, Paragraph, Bold, Italic } = cloud.data.value.CKEditor;\n\tconst { FormatPainter } = cloud.data.value.CKEditorPremiumFeatures;\n\n\treturn {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\tplugins: [ Essentials, Paragraph, Bold, Italic, FormatPainter ],\n\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic', '|', 'formatPainter' ]\n\t};\n} );\n</script>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Using loadCKEditorCloud Function in Vanilla JavaScript",
    "codeDescription": "Example of using the loadCKEditorCloud function to asynchronously load CKEditor 5 resources in a vanilla JavaScript environment. This function returns a promise with the loaded resources.",
    "codeLanguage": "javascript",
    "codeTokens": 104,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/loading-cdn-resources.md#2025-04-16_snippet_2",
    "pageTitle": "Loading CKEditor 5 CDN Resources",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { loadCKEditorCloud } from '@ckeditor/ckeditor5-integrations-common';\n\nconst { CKEditor, CKEditorPremiumFeatures } = await loadCKEditorCloud( {\n\tversion: '{@var ckeditor5-version}',\n\tpremium: true\n} );"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "CKEditor 5 Context feature integration in React",
    "codeDescription": "Implementation of the CKEditor 5 Context feature for collaboration in a React application. Shows how to use CKEditorContext to share context between multiple editor instances, with configuration for both context and editor components.",
    "codeLanguage": "jsx",
    "codeTokens": 402,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/react-default-npm.md#2025-04-16_snippet_3",
    "pageTitle": "React Rich Text Editor Component with npm Integration",
    "codeList": [
      {
        "language": "jsx",
        "code": "import { ClassicEditor, Context, Bold, Essentials, Italic, Paragraph, ContextWatchdog } from 'ckeditor5';\nimport { CKEditor, CKEditorContext } from '@ckeditor/ckeditor5-react';\n\nimport 'ckeditor5/ckeditor5.css';\n\nfunction App() {\n  return (\n\t<CKEditorContext context={ Context } contextWatchdog={ ContextWatchdog }>\n\t  <CKEditor\n\t\teditor={ ClassicEditor }\n\t\tconfig={ {\n\t\t  licenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\t  plugins: [ Essentials, Bold, Italic, Paragraph ],\n\t\t  toolbar: [ 'undo', 'redo', '|', 'bold', 'italic' ],\n\t\t} }\n\t\tdata='<p>Hello from the first editor working with the context!</p>'\n\t\tonReady={ ( editor ) => {\n\t\t  // You can store the \"editor\" and use when it is needed.\n\t\t  console.log( 'Editor 1 is ready to use!', editor );\n\t\t} }\n\t  />\n\n\t  <CKEditor\n\t\teditor={ ClassicEditor }\n\t\tconfig={ {\n\t\t  licenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\t  plugins: [ Essentials, Bold, Italic, Paragraph ],\n\t\t  toolbar: [ 'undo', 'redo', '|', 'bold', 'italic' ],\n\t\t} }\n\t\tdata='<p>Hello from the second editor working with the context!</p>'\n\t\tonReady={ ( editor ) => {\n\t\t  // You can store the \"editor\" and use when it is needed.\n\t\t  console.log( 'Editor 2 is ready to use!', editor );\n\t\t} }\n\t  />\n\t</CKEditorContext>\n  );\n}\n\nexport default App;"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Setting Up XMLHttpRequest Event Listeners for CKEditor Upload",
    "codeDescription": "Configures event listeners for the XMLHttpRequest to handle errors, aborts, successful uploads, and progress events. Resolves the upload promise with image URL data when successful.",
    "codeLanguage": "javascript",
    "codeTokens": 475,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-image/docs/framework/deep-dive/upload-adapter.md#2025-04-16_snippet_5",
    "pageTitle": "Custom Image Upload Adapter for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "class MyUploadAdapter {\n\t// More methods.\n\t// ...\n\n\t// Initializes XMLHttpRequest listeners.\n\t_initListeners( resolve, reject, file ) {\n\t\tconst xhr = this.xhr;\n\t\tconst loader = this.loader;\n\t\tconst genericErrorText = `Couldn't upload file: ${ file.name }.`;\n\n\t\txhr.addEventListener( 'error', () => reject( genericErrorText ) );\n\t\txhr.addEventListener( 'abort', () => reject() );\n\t\txhr.addEventListener( 'load', () => {\n\t\t\tconst response = xhr.response;\n\n\t\t\t// This example assumes the XHR server's \"response\" object will come with\n\t\t\t// an \"error\" which has its own \"message\" that can be passed to reject()\n\t\t\t// in the upload promise.\n\t\t\t//\n\t\t\t// Your integration may handle upload errors in a different way so make sure\n\t\t\t// it is done properly. The reject() function must be called when the upload fails.\n\t\t\tif ( !response || response.error ) {\n\t\t\t\treturn reject( response && response.error ? response.error.message : genericErrorText );\n\t\t\t}\n\n\t\t\t// If the upload is successful, resolve the upload promise with an object containing\n\t\t\t// at least the \"default\" URL, pointing to the image on the server.\n\t\t\t// This URL will be used to display the image in the content. Learn more in the\n\t\t\t// UploadAdapter#upload documentation.\n\t\t\tresolve( {\n\t\t\t\tdefault: response.url\n\t\t\t} );\n\t\t} );\n\n\t\t// Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded\n\t\t// properties which are used e.g. to display the upload progress bar in the editor\n\t\t// user interface.\n\t\tif ( xhr.upload ) {\n\t\t\txhr.upload.addEventListener( 'progress', evt => {\n\t\t\t\tif ( evt.lengthComputable ) {\n\t\t\t\t\tloader.uploadTotal = evt.total;\n\t\t\t\t\tloader.uploaded = evt.loaded;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t}\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Installing CKEditor 5 Package with Autosave Feature",
    "codeDescription": "Command to install the complete CKEditor 5 package which includes the autosave feature. This npm installation command provides access to all CKEditor 5 capabilities including the autosave functionality.",
    "codeLanguage": "bash",
    "codeTokens": 60,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-autosave/README.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Autosave Feature",
    "codeList": [
      {
        "language": "bash",
        "code": "npm install ckeditor5"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Ensuring Editor Focus After Command Execution in CKEditor 5",
    "codeDescription": "The following code ensures the CKEditor retains focus after executing a command. This is particularly useful for maintaining editing continuity and a seamless user experience.",
    "codeLanguage": "JavaScript",
    "codeTokens": 95,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/ui-library.md#2025-04-16_snippet_29",
    "pageTitle": "UI Library for CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// Execute some action on the \"dropdown#execute\" event.\ndropdownView.buttonView.on( 'execute', () => {\n\teditor.execute( 'command', { value: \"command-value\" } );\n\teditor.editing.view.focus();\n} );"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Handling Model Elements with Attributes - JavaScript",
    "codeDescription": "This snippet demonstrates how to convert a model element that has attributes, specifically converting a 'heading' model with a 'level' attribute to the corresponding heading tag dynamically.",
    "codeLanguage": "JavaScript",
    "codeTokens": 135,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/conversion/helpers/downcast.md#2025-04-16_snippet_3",
    "pageTitle": "Downcasting Elements in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.conversion\n\t.for( 'downcast' )\n\t.elementToElement( {\n\t\tmodel: {\n\t\t\tname: 'heading',\n\t\t\tattributes: [ 'level' ]\n\t\t},\n\t\tview: ( modelElement, { writer } ) => {\n\t\t\treturn writer.createContainerElement(\n\t\t\t\t'h' + modelElement.getAttribute( 'level' )\n\t\t\t);\n\t\t}\n\t} );"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing CKEditor React Integration with Product Widgets in App Component",
    "codeDescription": "This code defines the main App React component that integrates CKEditor 5 with custom product preview functionality. It manages editor state, configures the editor with necessary plugins including a custom ProductPreviewEditing plugin, and handles the rendering of product widgets in the editor content.",
    "codeLanguage": "jsx",
    "codeTokens": 1583,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/using-react-in-a-widget.md#2025-04-16_snippet_6",
    "pageTitle": "React Component Integration in CKEditor 5 Widget Tutorial",
    "codeList": [
      {
        "language": "jsx",
        "code": "// app.jsx\n\n// Imports necessary to run a React application.\nimport { useState } from 'react';\nimport { createRoot } from 'react-dom/client';\n// The official <CKEditor> component for React.\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\n// The base editor class and features required to run the editor.\nimport {\n\tClassicEditor,\n\tBold,\n\tItalic,\n\tUnderline,\n\tEssentials,\n\tHeading,\n\tLink,\n\tParagraph,\n\tTable,\n\tTableToolbar\n} from 'ckeditor5';\n// The official CKEditor 5 instance inspector. It helps understand the editor view and model.\nimport CKEditorInspector from '@ckeditor/ckeditor5-inspector';\n// CKEditor plugin implementing a product widget to be used in the editor content.\nimport ProductPreviewEditing from './ckeditor/productpreviewediting';\n// React components to render the list of products and the product preview.\nimport ProductList from './react/productlist';\nimport ProductPreview from './react/productpreview';\n\nimport 'ckeditor5/ckeditor5.css';\nimport './styles.css';\n\n// The React application function component. It renders the editor and the product list.\nexport default function App( props ) {\n\t// A place to store the reference to the editor instance created by the <CKEditor> component.\n\t// The editor instance is created asynchronously and is only available when the editor is ready.\n\tconst [ editorRef, setEditorRef ] = useState( null );\n\t// The initial editor data. It is bound to the editor instance and will change as\n\t// the user types and modifies the content of the editor.\n\tconst [ editorData, setEditorData ] = useState( `<h2>Check our last minute deals!</h2>\n\n\t<p>Aenean erat conubia pretium libero habitant turpis vivamus dignissim molestie, phasellus libero! Curae; consequat cubilia mattis. Litora non iaculis tincidunt.</p>\n\t<section class=\"product\" data-id=\"2\">&nbsp;</section>\n\t<p>Mollis gravida parturient ad maecenas euismod consectetur lacus rutrum urna eget ligula. Nisi imperdiet scelerisque natoque scelerisque cubilia nulla gravida. Eleifend malesuada pharetra est commodo venenatis aenean habitasse curae; fusce elit.</p>\n\t<section class=\"product\" data-id=\"1\">&nbsp;</section>\n\n\t<h3>Other deals</h3>\n\t<p>Ultricies dapibus placerat orci natoque fames commodo facilisi sollicitudin. Sed hendrerit mi dis non lacinia ipsum. Luctus fames scelerisque auctor pellentesque mi nunc mattis, amet sapien.</p>\n\n\t<figure class=\"table\">\n\t\t<table>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Our deal</th>\n\t\t\t\t\t<th>Why this one?</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<section class=\"product\" data-id=\"3\">&nbsp;</section>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>Nascetur, nullam hac nibh curabitur elementum. Est ridiculus turpis adipiscing erat maecenas habitant montes. Curabitur mauris ut luctus semper. Neque orci auctor luctus accumsan quam cursus purus condimentum dis?</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<section class=\"product\" data-id=\"4\">&nbsp;</section>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>Elementum condimentum convallis porttitor cubilia consectetur cum. In pretium neque accumsan pharetra. Magna in quisque dignissim praesent facilisi diam. Ad habitant ultricies at faucibus. Ultricies auctor sodales massa nisi eget sem porta?</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t</figure>` );\n\n\treturn (\n\t\t// The application renders two columns:\n\t\t// * in the left one, the <CKEditor> and the textarea displaying live\n\t\t//   editor data are rendered.\n\t\t// * in the right column, a <ProductList> is rendered with available <ProductPreviews>\n\t\t//   to choose from.\n\t\t<div ref={ setEditorRef } className='app'>\n\t\t\t{ editorRef && <>\n\t\t\t\t<div className='app__offer-editor' key='offer-editor'>\n\t\t\t\t\t<CKEditor\n\t\t\t\t\t\teditor={ ClassicEditor }\n\t\t\t\t\t\t// The configuration of the <CKEditor> instance.\n\t\t\t\t\t\tconfig={ {\n\t\t\t\t\t\t\tlicenseKey: 'GPL', // Or '<YOUR_LICENSE_KEY>'.\n\t\t\t\t\t\t\tplugins: [\n\t\t\t\t\t\t\t\t// A set of editor features to be enabled and made available to the user.\n\t\t\t\t\t\t\t\tEssentials, Heading, Bold, Italic, Underline,\n\t\t\t\t\t\t\t\tLink, Paragraph, Table, TableToolbar,\n\t\t\t\t\t\t\t\t// Your custom plugin implementing the widget is loaded here.\n\t\t\t\t\t\t\t\tProductPreviewEditing\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttoolbar: [\n\t\t\t\t\t\t\t\t'heading',\n\t\t\t\t\t\t\t\t'|',\n\t\t\t\t\t\t\t\t'bold', 'italic', 'underline',\n\t\t\t\t\t\t\t\t'|',\n\t\t\t\t\t\t\t\t'link', 'insertTable',\n\t\t\t\t\t\t\t\t'|',\n\t\t\t\t\t\t\t\t'undo', 'redo'\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttable: {\n\t\t\t\t\t\t\t\tcontentToolbar: [\n\t\t\t\t\t\t\t\t\t'tableColumn',\n\t\t\t\t\t\t\t\t\t'tableRow',\n\t\t\t\t\t\t\t\t\t'mergeTableCells'\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t// The configuration of the Products plugin. It specifies a function that will allow\n\t\t\t\t\t\t\t// the editor to render a React <ProductPreview> component inside a product widget.\n\t\t\t\t\t\t\tproducts: {\n\t\t\t\t\t\t\t\tproductRenderer: ( id, domElement ) => {\n\t\t\t\t\t\t\t\t\tconst product = props.products.find( product => product.id === id );\n\t\t\t\t\t\t\t\t\tconst root = createRoot( domElement );\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\troot.render(\n\t\t\t\t\t\t\t\t\t\t<ProductPreview id={ id } { ...product } />\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} }\n\t\t\t\t\t\tdata={ editorData }\n\t\t\t\t\t\tonReady={ ( editor ) => {\n\t\t\t\t\t\t\t// A function executed when the editor has been initialized and is ready.\n\t\t\t\t\t\t\t// It synchronizes the initial data state and saves the reference to the editor instance.\n\t\t\t\t\t\t\tsetEditorRef( editor );\n\t\t\t\t\t\t\t// CKEditor&nbsp;5 inspector allows you to take a peek into the editor's model and view\n\t\t\t\t\t\t\t// data layers. Use it to debug the application and learn more about the editor.\n\t\t\t\t\t\t\tCKEditorInspector.attach( editor );\n\t\t\t\t\t\t} }\n\t\t\t\t\t\tonChange={ ( evt, editor ) => {\n\t\t\t\t\t\t\t// A function executed when the user types or modifies the editor content.\n\t\t\t\t\t\t\t// It updates the state of the application.\n\t\t\t\t\t\t\tsetEditorData( editor.getData() );\n\t\t\t\t\t\t} }\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<ProductList\n\t\t\t\t\tkey='product-list'\n\t\t\t\t\tproducts={ props.products }\n\t\t\t\t\tonClick={ ( id  ) => {\n\t\t\t\t\t\teditorRef.execute( 'insertProduct', id );\n\t\t\t\t\t\teditorRef.editing.view.focus();\n\t\t\t\t\t} }\n\t\t\t\t/>\n\t\t\t</> }\n\t\t</div>\n\t)\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Adding a Custom Observer in CKEditor 5",
    "codeDescription": "Example of how to add a custom observer to the CKEditor 5 view. The observer should be a subclass of the Observer class and can be added using the view.addObserver() method.",
    "codeLanguage": "JavaScript",
    "codeTokens": 60,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/editing-engine.md#2025-04-16_snippet_10",
    "pageTitle": "Editing Engine Architecture in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "view.addObserver()"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "CKEditor 5 Mention Plugin Customization",
    "codeDescription": "This JavaScript snippet defines a CKEditor 5 plugin that overrides the default mention output. It includes upcast and downcast converters to transform a view `<a>` element with specific attributes to a model 'mention' text attribute, and vice versa.",
    "codeLanguage": "JavaScript",
    "codeTokens": 607,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-mention/docs/features/mentions.md#2025-04-16_snippet_8",
    "pageTitle": "Mentions (Autocompletion) Feature in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "\"ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\tplugins: [ Mention, MentionCustomization, /* ... */ ], // Add the custom mention plugin function.\n\t\tmention: {\n\t\t\t// Configuration.\n\t\t\t// ...\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );\n\nfunction MentionCustomization( editor ) {\n\t// The upcast converter will convert view <a class=\\\"mention\\\" href=\\\"\\\" data-user-id=\\\"\\\">\\n\t// elements to the model 'mention' text attribute.\n\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n\t\tview: {\n\t\t\tname: 'a',\n\t\t\tkey: 'data-mention',\n\t\t\tclasses: 'mention',\n\t\t\tattributes: {\n\t\t\t\thref: true,\n\t\t\t\t'data-user-id': true\n\t\t\t}\n\t\t},\n\t\tmodel: {\n\t\t\tkey: 'mention',\n\t\t\tvalue: viewItem => {\n\t\t\t\t// The mention feature expects that the mention attribute value\n\t\t\t\t// in the model is a plain object with a set of additional attributes.\n\t\t\t\t// In order to create a proper object use the toMentionAttribute() helper method:\n\t\t\t\tconst mentionAttribute = editor.plugins.get( 'Mention' ).toMentionAttribute( viewItem, {\n\t\t\t\t\t// Add any other properties that you need.\n\t\t\t\t\tlink: viewItem.getAttribute( 'href' ),\n\t\t\t\t\tuserId: viewItem.getAttribute( 'data-user-id' )\n\t\t\t\t} );\n\n\t\t\t\treturn mentionAttribute;\n\t\t\t}\n\t\t},\n\t\tconverterPriority: 'high'\n\t} );\n\n\t// Downcast the model 'mention' text attribute to a view <a> element.\n\teditor.conversion.for( 'downcast' ).attributeToElement( {\n\t\tmodel: 'mention',\n\t\tview: ( modelAttributeValue, { writer } ) => {\n\t\t\t// Do not convert empty attributes (lack of value means no mention).\n\t\t\tif ( !modelAttributeValue ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn writer.createAttributeElement( 'a', {\n\t\t\t\tclass: 'mention',\n\t\t\t\t'data-mention': modelAttributeValue.id,\n\t\t\t\t'data-user-id': modelAttributeValue.userId,\n\t\t\t\t'href': modelAttributeValue.link\n\t\t\t}, {\n\t\t\t\t// Make mention attribute to be wrapped by other attribute elements.\n\t\t\t\tpriority: 20,\n\t\t\t\t// Prevent merging mentions together.\n\t\t\t\tid: modelAttributeValue.uid\n\t\t\t} );\n\t\t},\n\t\tconverterPriority: 'high'\n\t} );\n}\""
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing Document Editor with Toolbar in Vue 2",
    "codeDescription": "This snippet demonstrates how to use the Document (decoupled) editor in a Vue 2 component, manually adding the editor toolbar to the DOM. It includes the component template, script setup, and a method to insert the toolbar on editor ready event.",
    "codeLanguage": "html",
    "codeTokens": 224,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/vuejs-v2.md#2025-04-16_snippet_4",
    "pageTitle": "Vue.js 2.x CKEditor 5 Integration Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<template>\n\t<ckeditor :editor=\"editor\" @ready=\"onReady\" />\n</template>\n\n<script>\n\timport { DecoupledEditor, Bold, Essentials, Italic, Paragraph } from 'ckeditor5';\n\n\timport 'ckeditor5/ckeditor5.css'\n\n\texport default {\n\t\tname: 'app',\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\teditor: DecoupledEditor,\n\t\t\t\t// ...\n\t\t\t};\n\t\t},\n\t\tmethods: {\n\t\t\tonReady( editor )  {\n\t\t\t\t// Insert the toolbar before the editable area.\n\t\t\t\teditor.ui.getEditableElement().parentElement.insertBefore(\n\t\t\t\t\teditor.ui.view.toolbar.element,\n\t\t\t\t\teditor.ui.getEditableElement()\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n</script>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing Classic Editor Snippet - CKEditor 5",
    "codeDescription": "Example code snippet demonstrating the classic editor implementation, referenced as {@snippet examples/classic-editor}. This represents a basic setup of CKEditor 5's classic editor type with default configurations.",
    "codeLanguage": "html",
    "codeTokens": 64,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/examples/builds/classic-editor.md#2025-04-16_snippet_0",
    "pageTitle": "Classic Editor Implementation Example - CKEditor 5",
    "codeList": [
      {
        "language": "html",
        "code": "{@snippet examples/classic-editor}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Creating a Plugin to Remove Formatting from Links",
    "codeDescription": "This code creates a custom plugin that extends the RemoveFormat feature to also remove formatting from links by marking the 'linkHref' attribute as a formatting attribute in the editor schema.",
    "codeLanguage": "javascript",
    "codeTokens": 116,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-remove-format/docs/features/remove-format.md#2025-04-16_snippet_1",
    "pageTitle": "Removing Text Formatting in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "// A simple plugin that extends the remove format feature to consider links.\nfunction RemoveFormatLinks( editor ) {\n\t// Extend the editor schema and mark the \"linkHref\" model attribute as formatting.\n\teditor.model.schema.setAttributeProperties( 'linkHref', {\n\t\tisFormatting: true\n\t} );\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "List Properties Feature Installation in CKEditor 5",
    "codeDescription": "Code snippet demonstrating how to install and configure the list properties feature in CKEditor 5, which enables advanced list functionality like custom styles, start index, and reversed order.",
    "codeLanguage": "javascript",
    "codeTokens": 166,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-list/docs/features/lists.md#2025-04-16_snippet_1",
    "pageTitle": "Ordered and Unordered Lists in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, List, ListProperties } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tplugins: [ List, ListProperties, /* ... */ ],\n\t\ttoolbar: [ 'bulletedList', 'numberedList', /* ... */ ],\n\t\tlist: {\n\t\t\tproperties: {\n\t\t\t\tstyles: true,\n\t\t\t\tstartIndex: true,\n\t\t\t\treversed: true\n\t\t\t}\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Importing and Configuring Select All Feature in CKEditor 5",
    "codeDescription": "This snippet demonstrates how to import the SelectAll plugin and add it to the editor configuration. It includes the plugin in the plugin list and adds a toolbar button for the select all functionality.",
    "codeLanguage": "JavaScript",
    "codeTokens": 140,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-select-all/docs/features/select-all.md#2025-04-16_snippet_0",
    "pageTitle": "Select All Feature in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, SelectAll } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ SelectAll, /* ... */ ],\n\t\ttoolbar: [ 'selectAll', /* ... */ ],\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Using Document Editor Type in Angular",
    "codeDescription": "Demonstrates how to use the Document (decoupled) editor type in an Angular application. It includes the component setup, configuration, and template usage.",
    "codeLanguage": "TypeScript",
    "codeTokens": 280,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/angular.md#2025-04-16_snippet_9",
    "pageTitle": "Angular Integration Guide for CKEditor 5",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "// app.component.ts\n\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { CKEditorModule } from '@ckeditor/ckeditor5-angular';\nimport { DecoupledEditor, Essentials, Italic, Paragraph, Bold } from 'ckeditor5';\n\n@Component( {\n\tselector: 'app-root',\n\ttemplateUrl: './app.component.html',\n\tstyleUrls: [ './app.component.css' ],\n\tencapsulation: ViewEncapsulation.None\n\timports: [ CKEditorModule ],\n\tstandalone: true\n} )\nexport class AppComponent {\n\ttitle = 'angular';\n\n\tpublic Editor = DecoupledEditor;\n\tpublic config = {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Bold, Essentials, Italic, Paragraph ],\n\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic' ]\n\t}\n\tpublic onReady( editor: DecoupledEditor ): void {\n\t\tconst element = editor.ui.getEditableElement()!;\n\t\tconst parent = element.parentElement!;\n\n\t\tparent.insertBefore(\n\t\t\teditor.ui.view.toolbar.element!,\n\t\t\telement\n\t\t);\n\t}\n}"
      },
      {
        "language": "CSS",
        "code": "/* app.component.css */\n\n@import 'ckeditor5/ckeditor5.css';"
      },
      {
        "language": "HTML",
        "code": "<!-- app.component.html -->\n\n<ckeditor [editor]=\"Editor\" data=\"<p>Hello, world!</p>\" (ready)=\"onReady($event)\"></ckeditor>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Configuring Table Contextual Toolbar in CKEditor 5",
    "codeDescription": "This snippet demonstrates how to configure the table contextual toolbar in CKEditor 5. It specifies which table-related tools should appear in the content toolbar when a table is selected.",
    "codeLanguage": "javascript",
    "codeTokens": 120,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-table/docs/features/tables.md#2025-04-16_snippet_3",
    "pageTitle": "Tables in CKEditor 5 (Overview)",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\ttable: {\n\t\t\tcontentToolbar: [ 'tableColumn', 'tableRow', 'mergeTableCells' ]\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Initializing Basic Timestamp Plugin",
    "codeDescription": "Initial implementation of the Timestamp plugin class with editor configuration",
    "codeLanguage": "javascript",
    "codeTokens": 122,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/creating-simple-plugin-timestamp.md#2025-04-16_snippet_1",
    "pageTitle": "Creating a Timestamp Plugin for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "class Timestamp extends Plugin {\n\tinit() {\n\t\tconsole.log( 'Timestamp was initialized.' );\n\t}\n}\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: 'GPL', // Or '<YOUR_LICENSE_KEY>'.\n\t\t// Add the Timestamp plugin to config.plugins array.\n\t\tplugins: [\n\t\t\tEssentials, Paragraph, Heading, List, Bold, Italic, Timestamp\n\t\t]\n\t} );"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Registering Generic Schema Items in JavaScript",
    "codeDescription": "Defines basic schema items like $root, $container, $block, $blockObject, $inlineObject and $text with their core properties and relationships.",
    "codeLanguage": "javascript",
    "codeTokens": 202,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/schema.md#2025-04-16_snippet_9",
    "pageTitle": "Registering Schema Elements in CKEditor 5 Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "schema.register( '$root', {\n\tisLimit: true\n} );\n\nschema.register( '$container', {\n\tallowIn: [ '$root', '$container' ]\n} );\n\nschema.register( '$block', {\n\tallowIn: [ '$root', '$container' ],\n\tisBlock: true\n} );\n\nschema.register( '$blockObject', {\n\tallowWhere: '$block',\n\tisBlock: true,\n\tisObject: true\n} );\n\nschema.register( '$inlineObject', {\n\tallowWhere: '$text',\n\tallowAttributesOf: '$text',\n\tisInline: true,\n\tisObject: true\n} );\n\nschema.register( '$text', {\n\tallowIn: '$block',\n\tisInline: true,\n\tisContent: true\n} );"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Initializing CKEditor with Image Resize Plugins",
    "codeDescription": "Basic setup for enabling image resizing with handles using the ImageResizeEditing and ImageResizeHandles plugins.",
    "codeLanguage": "javascript",
    "codeTokens": 137,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-image/docs/features/images-resizing.md#2025-04-16_snippet_0",
    "pageTitle": "Image Resizing Implementation in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Image, ImageResizeEditing, ImageResizeHandles } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Image, ImageResizeEditing, ImageResizeHandles, /* ... */ ],\n\t\timage: {\n\t\t\t// Configuration.\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Configuring CKEditor 5 with External Data Widget in JavaScript",
    "codeDescription": "Sets up the CKEditor 5 instance with the external data widget plugin and adds the widget button to the toolbar. This snippet demonstrates how to integrate the custom widget into the editor configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 258,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/data-from-external-source.md#2025-04-16_snippet_8",
    "pageTitle": "External Data Widget Implementation in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import {\n\tClassicEditor,\n\tBold,\n\tItalic,\n\tEssentials,\n\tHeading,\n\tList,\n\tParagraph\n} from 'ckeditor5';\n\nimport ExternalDataWidgetCommand from './externaldatawidgetcommand';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: 'GPL', // Or '<YOUR_LICENSE_KEY>'.\n\t\tplugins: [ Essentials, Paragraph, Heading, List, Bold, Italic, ExternalDataWidget ],\n\n\t\t// Insert the \"external\" button into the editor toolbar.\n\t\ttoolbar: [ 'heading', 'bold', 'italic', 'numberedList', 'bulletedList', '|', 'external', '|', 'undo', 'redo' ]\n\t} )\n\t.then( editor => {\n\t\tconsole.log( 'Editor was initialized', editor );\n\n\t\t// Expose for playing in the console.\n\t\twindow.editor = editor;\n\t} )\n\t.catch( error => {\n\t\tconsole.error( error.stack );\n\t} );"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Implementing Document Editor in Vue",
    "codeDescription": "Example of how to use the Document (decoupled) editor type in a Vue component, including manually adding the editor toolbar to the DOM.",
    "codeLanguage": "html",
    "codeTokens": 166,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/vuejs-v3.md#2025-04-16_snippet_7",
    "pageTitle": "Vue.js 3+ Rich Text Editor Integration with CKEditor 5",
    "codeList": [
      {
        "language": "html",
        "code": "<template>\n\t<ckeditor :editor=\"DecoupledEditor\" @ready=\"onReady\" />\n</template>\n\n<script setup>\nimport { DecoupledEditor } from 'ckeditor5';\nimport { Ckeditor } from '@ckeditor/ckeditor5-vue';\n\nimport 'ckeditor5/ckeditor5.css';\n\nfunction onReady( editor )  {\n\t// Insert the toolbar before the editable area.\n\teditor.ui.getEditableElement().parentElement.insertBefore(\n\t\teditor.ui.view.toolbar.element,\n\t\teditor.ui.getEditableElement()\n\t);\n}\n</script>"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Initializing CKEditor 5 with Simple Box Plugin and Inspector",
    "codeDescription": "This JavaScript code initializes CKEditor 5 with the Simple Box plugin and sets up the CKEditor 5 inspector for debugging. It demonstrates how to include custom plugins and configure the editor instance.",
    "codeLanguage": "javascript",
    "codeTokens": 216,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/implementing-a-block-widget.md#2025-04-16_snippet_6",
    "pageTitle": "Implementing a Block Widget in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "// main.js\n\nimport SimpleBox from './simplebox/simplebox';\n\nimport CKEditorInspector from '@ckeditor/ckeditor5-inspector';                 // ADDED\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: 'GPL', // Or '<YOUR_LICENSE_KEY>'.\n\t\tplugins: [\n\t\t\tEssentials, Paragraph, Heading, List, Bold, Italic,\n\t\t\tSimpleBox\n\t\t],\n\t\ttoolbar: [ 'heading', 'bold', 'italic', 'numberedList', 'bulletedList' ]\n\t} )\n\t.then( editor => {\n\t\tconsole.log( 'Editor was initialized', editor );\n\n\t\tCKEditorInspector.attach( { 'editor': editor } );\n\n\t\twindow.editor = editor;\n\t} );"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Implementing refresh() Method for HighlightCommand",
    "codeDescription": "Updates the command's value and isEnabled properties based on the current selection in the editor. This method is called whenever the model is updated.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/crash-course/commands.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 Commands Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "refresh() {\n\tconst { document, schema } = this.editor.model;\n\n\t// Check if selection is already highlighted.\n\tthis.value = document.selection.getAttribute( 'highlight' );\n\n\t// Check if command is allowed on current selection.\n\tthis.isEnabled = schema.checkAttributeInSelection( document.selection, 'highlight' );\n}"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Element to Element Conversion: Basic",
    "codeDescription": "This snippet demonstrates a basic element-to-element conversion, mapping a `<p>` view element to a `<paragraph>` model element. It's a simple example showing how to rename elements during the upcast conversion process.",
    "codeLanguage": "javascript",
    "codeTokens": 97,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/conversion/helpers/upcast.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Framework: Upcast Conversion Helpers",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.conversion\n\t.for( 'upcast' )\n\t.elementToElement( {\n\t\tview: 'p',\n\t\tmodel: 'paragraph'\n\t} );"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Installing Source Editing Plugin for CKEditor 5 (JavaScript)",
    "codeDescription": "This snippet demonstrates how to install and configure the source editing plugin for CKEditor 5. It imports the necessary modules and adds the plugin to the editor configuration.",
    "codeLanguage": "JavaScript",
    "codeTokens": 136,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-source-editing/docs/features/source-editing.md#2025-04-16_snippet_0",
    "pageTitle": "Source Code Editing in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, SourceEditing } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ SourceEditing, /* ... */ ],\n\t\ttoolbar: [ 'sourceEditing', /* ... */ ]\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Reading Placeholder Configuration in CKEditor 5 UI Plugin",
    "codeDescription": "This code modifies the UI plugin to read placeholder types from the editor configuration instead of using hardcoded values, making the plugin more customizable.",
    "codeLanguage": "javascript",
    "codeTokens": 128,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/implementing-an-inline-widget.md#2025-04-16_snippet_14",
    "pageTitle": "Implementing an Inline Widget Tutorial for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "// placeholder/placeholderui.js\n\nexport default class PlaceholderUI extends Plugin {\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\tconst placeholderNames = editor.config.get( 'placeholderConfig.types' );            // CHANGED\n\n\t\teditor.ui.componentFactory.add( 'placeholder', locale => {\n\t\t\t// Previously registered dropdown among UI components.\n\t\t\t// ...\n\t\t} );\n\t}\n}"
      }
    ],
    "relevance": 0.957
  },
  {
    "codeTitle": "Adding CKBox Image Editing to CKEditor 5 in JavaScript",
    "codeDescription": "Shows how to import and configure the CKBox image editing feature in CKEditor 5 v40.2.0, including necessary plugins and toolbar configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 205,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/updating/update-to-40.md#2025-04-16_snippet_2",
    "pageTitle": "Updating CKEditor 5 to version 40.x",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ImageUpload, PictureEditing } from '@ckeditor/ckeditor5-image';\nimport { CloudServices } from '@ckeditor/ckeditor5-cloud-services';\nimport { CKBox, CKBoxImageEdit } from \"@ckeditor/ckeditor5-ckbox\";\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tplugins: [  PictureEditing, ImageUpload, CloudServices, CKBox, CKBoxImageEdit, /* ... */ ],\n\t\ttoolbar: [ 'ckbox', 'ckboxImageEdit', /* ... */ ], // Depending on your preference.\n\t\tckbox: {\n\t\t\t// Feature configuration.\n\t\t\t// ...\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.956
  },
  {
    "codeTitle": "Implementing Automatic Link Decorator in CKEditor 5",
    "codeDescription": "Demonstrates how to configure an automatic link decorator in CKEditor 5 to add target and rel attributes to external links using a callback function.",
    "codeLanguage": "javascript",
    "codeTokens": 171,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-link/docs/features/link.md#2025-04-16_snippet_6",
    "pageTitle": "Link Feature in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\tlink: {\n\t\t\tdecorators: {\n\t\t\t\taddTargetToExternalLinks: {\n\t\t\t\t\tmode: 'automatic',\n\t\t\t\t\tcallback: url => /^(https?:)?\\/\\//.test( url ),\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\t\trel: 'noopener noreferrer'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// More of the editor's configuration.\n\t\t\t// ...\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Basic CKEditor Feature Imports",
    "codeDescription": "Default way of importing CKEditor features from consolidated packages. This approach is simpler but may include unused code.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/optimizing-build-size.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Build Size Optimization Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { /* ... */ } from 'ckeditor5';\nimport { /* ... */ } from 'ckeditor5-premium-features';"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing Dynamic Mention Feed with Promise-based Callback",
    "codeDescription": "Advanced implementation of a mention feed using a callback function that returns a Promise. This approach allows for asynchronous filtering of mentions based on user input, with custom item properties for display and identification.",
    "codeLanguage": "javascript",
    "codeTokens": 661,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-mention/docs/features/mentions.md#2025-04-16_snippet_2",
    "pageTitle": "Mentions (Autocompletion) Feature in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\tmention: {\n\t\t\tfeeds: [\n\t\t\t\t{\n\t\t\t\t\tmarker: '@',\n\t\t\t\t\tfeed: getFeedItems\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );\n\nconst items = [\n\t{ id: '@swarley', userId: '1', name: 'Barney Stinson', link: 'https://www.imdb.com/title/tt0460649/characters/nm0000439' },\n\t{ id: '@lilypad', userId: '2', name: 'Lily Aldrin', link: 'https://www.imdb.com/title/tt0460649/characters/nm0004989' },\n\t{ id: '@marry', userId: '3', name: 'Marry Ann Lewis', link: 'https://www.imdb.com/title/tt0460649/characters/nm1130627' },\n\t{ id: '@marshmallow', userId: '4', name: 'Marshall Eriksen', link: 'https://www.imdb.com/title/tt0460649/characters/nm0781981' },\n\t{ id: '@rsparkles', userId: '5', name: 'Robin Scherbatsky', link: 'https://www.imdb.com/title/tt0460649/characters/nm1130627' },\n\t{ id: '@tdog', userId: '6', name: 'Ted Mosby', link: 'https://www.imdb.com/title/tt0460649/characters/nm1102140' }\n];\n\nfunction getFeedItems( queryText ) {\n\t// As an example of an asynchronous action, return a promise\n\t// that resolves after a 100ms timeout.\n\t// This can be a server request or any sort of delayed action.\n\treturn new Promise( resolve => {\n\t\tsetTimeout( () => {\n\t\t\tconst itemsToDisplay = items\n\t\t\t\t// Filter out the full list of all items to only those matching the query text.\n\t\t\t\t.filter( isItemMatching )\n\t\t\t\t// Return 10 items max - needed for generic queries when the list may contain hundreds of elements.\n\t\t\t\t.slice( 0, 10 );\n\n\t\t\tresolve( itemsToDisplay );\n\t\t}, 100 );\n\t} );\n\n\t// Filtering function - it uses the `name` and `username` properties of an item to find a match.\n\tfunction isItemMatching( item ) {\n\t\t// Make the search case-insensitive.\n\t\tconst searchString = queryText.toLowerCase();\n\n\t\t// Include an item in the search results if the name or username includes the current user input.\n\t\treturn (\n\t\t\titem.name.toLowerCase().includes( searchString ) ||\n\t\t\titem.id.toLowerCase().includes( searchString )\n\t\t);\n\t}\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing Multi-root Editor Class in JavaScript for CKEditor 5",
    "codeDescription": "This code defines a MultirootEditor class that extends the base Editor class. It implements a custom editor with multiple editable roots and a single toolbar. The class includes methods for initialization, destruction, and creation of the editor instance.",
    "codeLanguage": "javascript",
    "codeTokens": 879,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/custom-editor-creator.md#2025-04-16_snippet_0",
    "pageTitle": "Implementing a Custom Editor Creator in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { Editor, getDataFromElement, setDataInElement } from 'ckeditor5';\n\n/**\n * The multi-root editor implementation. It provides inline editables and a single toolbar.\n *\n * Unlike other editors, the toolbar is not rendered automatically and needs to be attached to the DOM manually.\n *\n * This type of an editor is dedicated to integrations which require a customized UI with an open\n * structure, allowing developers to specify the exact location of the interface.\n *\n * @implements module:core/editor/editorwithui~EditorWithUI\n * @extends module:core/editor/editor~Editor\n */\nclass MultirootEditor extends Editor {\n\t/**\n\t* Creates an instance of the multi-root editor.\n\t*\n\t* **Note:** Do not use the constructor to create editor instances. Use the static `MultirootEditor.create()` method instead.\n\t*\n\t* @protected\n\t* @param {Object.<String,HTMLElement>} sourceElements The list of DOM elements that will be the source\n\t* for the created editor (on which the editor will be initialized).\n\t* @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\n\t*/\n\tconstructor( sourceElements, config ) {\n\t\tsuper( config );\n\n\t\tif ( this.config.get( 'initialData' ) === undefined ) {\n\t\t\t// Create initial data object containing data from all roots.\n\t\t\tconst initialData = {};\n\n\t\t\tfor ( const rootName of Object.keys( sourceElements ) ) {\n\t\t\t\tinitialData[ rootName ] = getDataFromElement( sourceElements[ rootName ] );\n\t\t\t}\n\n\t\t\tthis.config.set( 'initialData', initialData );\n\t\t}\n\n\t\t// Create root and UIView element for each editable container.\n\t\tfor ( const rootName of Object.keys( sourceElements ) ) {\n\t\t\tthis.model.document.createRoot( '$root', rootName );\n\t\t}\n\n\t\tthis.ui = new MultirootEditorUI( this, new MultirootEditorUIView( this.locale, this.editing.view, sourceElements ) );\n\t}\n\n\t/**\n\t* @inheritDoc\n\t*/\n\tdestroy() {\n\t\t// Cache the data and editable DOM elements, then destroy.\n\t\t// It's safe to assume that the model->view conversion will not work after super.destroy(),\n\t\t// same as `ui.getEditableElement()` method will not return editables.\n\t\tconst data = {};\n\t\tconst editables = {};\n\t\tconst editablesNames = Array.from( this.ui.getEditableElementsNames() );\n\n\t\tfor ( const rootName of editablesNames ) {\n\t\t\tdata[ rootName ] = this.getData( { rootName } );\n\t\t\teditables[ rootName ] = this.ui.getEditableElement( rootName );\n\t\t}\n\n\t\tthis.ui.destroy();\n\n\t\treturn super.destroy()\n\t\t\t.then( () => {\n\t\t\t\tfor ( const rootName of editablesNames ) {\n\t\t\t\t\tsetDataInElement( editables[ rootName ], data[ rootName ] );\n\t\t\t\t}\n\t\t\t} );\n\t}\n\n\t/**\n\t* Creates a multi-root editor instance.\n\t*\n\t* @param {Object.<String,HTMLElement>} sourceElements The list of DOM elements that will be the source\n\t* for the created editor (on which the editor will be initialized).\n\t* @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\n\t* @returns {Promise} A promise resolved once the editor is ready. The promise returns the created multi-root editor instance.\n\t*/\n\tstatic create( sourceElements, config ) {\n\t\treturn new Promise( resolve => {\n\t\t\tconst editor = new this( sourceElements, config );\n\n\t\t\tresolve(\n\t\t\t\teditor.initPlugins()\n\t\t\t\t\t.then( () => editor.ui.init() )\n\t\t\t\t\t.then( () => editor.data.init( editor.config.get( 'initialData' ) ) )\n\t\t\t\t\t.then( () => editor.fire( 'ready' ) )\n\t\t\t\t\t.then( () => editor )\n\t\t\t);\n\t\t} );\n\t}\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Listening to Observable Property Changes in CKEditor 5",
    "codeDescription": "This code snippet shows how to listen to changes in observable properties using the `on()` method. It attaches a listener function to the `change:label` event, which is fired whenever the `label` property changes. The listener receives event details such as the property name, new value, and old value.",
    "codeLanguage": "javascript",
    "codeTokens": 197,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-utils/docs/framework/deep-dive/observables.md#2025-04-16_snippet_3",
    "pageTitle": "CKEditor 5 Framework - Observables",
    "codeList": [
      {
        "language": "javascript",
        "code": "const view = new Button();\n\nview.on( 'change:label', ( evt, propertyName, newValue, oldValue ) => {\n    console.log(\n        `#${ propertyName } has changed from \\\"${ oldValue }\\\" to \\\"${ newValue }\\\"`\n    );\n} )\n\nview.label = 'Hello world!'; // -> #label has changed from \\\"undefined\\\" to \\\"Hello world!\\\"\nview.label = 'Bold'; // -> #label has changed from \\\"Hello world!\\\" to \\\"Bold\\\"\n\nview.type = 'submit'; // Changing a regular property fires no event."
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Configuring Source Element Update",
    "codeDescription": "Shows how to configure CKEditor to update the source element with pipeline output when the editor is destroyed.",
    "codeLanguage": "javascript",
    "codeTokens": 70,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/getting-and-setting-data.md#2025-04-16_snippet_6",
    "pageTitle": "Data Handling Guide for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ...\n\t\tupdateSourceElementOnDestroy: true\n\t} );"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Setting Default Table Headers in CKEditor 5",
    "codeDescription": "This code shows how to configure CKEditor 5 to automatically add default headers to newly inserted tables. It sets one row and one column as headers by default.",
    "codeLanguage": "javascript",
    "codeTokens": 115,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-table/docs/features/tables.md#2025-04-16_snippet_4",
    "pageTitle": "Tables in CKEditor 5 (Overview)",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\ttable: {\n\t\t\tdefaultHeadings: { rows: 1, columns: 1 }\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Configuring Premium Features in CKEditor 5",
    "codeDescription": "Demonstrates how to import and configure premium features like PDF export from the ckeditor5-premium-features package. Includes detailed export configuration options.",
    "codeLanguage": "javascript",
    "codeTokens": 260,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/configuration.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 Feature Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor } from 'ckeditor5';\nimport { ExportPdf } from 'ckeditor5-premium-features';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\tplugins: [ ExportPdf, /* ... */ ],\n\t\ttoolbar: [ 'exportPdf', '|', /* ... */ ],\n\t\texportPdf: {\n\t\t\ttokenUrl: 'https://example.com/cs-token-endpoint',\n\t\t\tstylesheets: [\n\t\t\t\t'./path/to/fonts.css',\n\t\t\t\t'EDITOR_STYLES',\n\t\t\t\t'./path/to/style.css'\n\t\t\t],\n\t\t\tfileName: 'my-file.pdf',\n\t\t\tconverterOptions: {\n\t\t\t\tformat: 'A4',\n\t\t\t\tmargin_top: '20mm',\n\t\t\t\tmargin_bottom: '20mm',\n\t\t\t\tmargin_right: '12mm',\n\t\t\t\tmargin_left: '12mm',\n\t\t\t\tpage_orientation: 'portrait'\n\t\t\t}\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Registering Listeners with Custom Callback Context in CKEditor 5 (JavaScript)",
    "codeDescription": "Shows how to register listeners for bubbling events in CKEditor 5 using a custom callback function as the context.",
    "codeLanguage": "javascript",
    "codeTokens": 131,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/event-system.md#2025-04-16_snippet_14",
    "pageTitle": "Implementing Event System in CKEditor 5 Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { isWidget } from 'ckeditor5';\n\nthis.listenTo( view.document, 'arrowKey', ( evt, data ) => {\n\t// Listener's code.\n\t// ...\n}, { context: isWidget } );\n\nthis.listenTo( view.document, 'arrowKey', ( evt, data ) => {\n\t// Listener's code.\n\t// ...\n}, { context: isWidget, priority: 'high' } );"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing List View with Focus Management in JavaScript",
    "codeDescription": "Creates a custom list view class with keyboard navigation support using CKEditor 5's focus management utilities. Implements focus cycling between list items using arrow keys and maintains proper focus tracking.",
    "codeLanguage": "javascript",
    "codeTokens": 653,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-ui/docs/framework/deep-dive/focus-tracking.md#2025-04-16_snippet_10",
    "pageTitle": "Deep Dive into Focus Tracking in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { FocusCycler, View, FocusTracker, KeystrokeHandler } from 'ckeditor5';\n\nclass MyListView extends View {\n\tconstructor( locale ) {\n\t\tsuper( locale );\n\n\t\t// The view collection containing items of the list.\n\t\tthis.items = this.createCollection();\n\n\t\t// The instance of the focus tracker that tracks focus in #items.\n\t\tthis.focusTracker = new FocusTracker();\n\n\t\t// The keystroke handler that will help the focus cycler respond to the keystrokes.\n\t\tthis.keystrokes = new KeystrokeHandler();\n\n\t\t// The focus cycler that glues it all together.\n\t\tthis.focusCycler = new FocusCycler( {\n\t\t\tfocusables: this.items,\n\t\t\tfocusTracker: this.focusTracker,\n\t\t\tkeystrokeHandler: this.keystrokes,\n\t\t\tactions: {\n\t\t\t\t// Navigate list items backward using the arrow up key.\n\t\t\t\tfocusPrevious: 'arrowup',\n\n\t\t\t\t// Navigate toolbar items forward using the arrow down key.\n\t\t\t\tfocusNext: 'arrowdown'\n\t\t\t}\n\t\t} );\n\n\t\t// More intializations.\n\t\t// ...\n\n\t\tthis.setTemplate( {\n\t\t\t\ttag: 'ul',\n\t\t\t\tchildren: this.items\n\t\t} );\n\t}\n\n\trender() {\n\t\tsuper.render();\n\n\t\t// Items added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\t// Make sure items added to the collection are recognized by the #focusTracker.\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\t// Make sure items removed from the collection are ignored by the #focusTracker.\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\n\t\t// Start listening for the keystrokes coming from #element, which will allow\n\t\t// the #focusCycler to handle the keyboard navigation.\n\t\tthis.keystrokes.listenTo( this.element );\n\t}\n\n\tfocus() {\n\t\tif ( this.items.length ) {\n\t\t\t// This will call MyListItemView#focus().\n\t\t\tthis.items.first.focus();\n\t\t}\n\t}\n\n\tdestroy() {\n\t\t// Stop listening to all keystrokes when the view is destroyed.\n\t\tthis.keystrokes.destroy();\n\t}\n}\n\nclass MyListItemView extends View {\n\tconstructor( locale, text ) {\n\t\tsuper( locale );\n\n\t\t// More initializations.\n\t\t// ...\n\n\t\tthis.setTemplate( {\n\t\t\ttag: 'li',\n\t\t\tattributes: {\n\t\t\t\ttabindex: -1\n\t\t\t},\n\t\t\tchildren: [ text ]\n\t\t} );\n\t}\n\n\t// More methods.\n\t// ...\n\n\tfocus() {\n\t\tthis.element.focus();\n\t}\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Installing CKEditor 5 Dependencies with npm",
    "codeDescription": "Command to install core CKEditor 5 packages and plugins using npm. This installs the editor core, theme, and various plugins.",
    "codeLanguage": "bash",
    "codeTokens": 142,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/advanced/integrating-from-source-webpack.md#2025-04-16_snippet_0",
    "pageTitle": "Integrating CKEditor 5 from Source Using Webpack",
    "codeList": [
      {
        "language": "bash",
        "code": "npm install --save @ckeditor/ckeditor5-theme-lark \\\n  @ckeditor/ckeditor5-autoformat \\\n  @ckeditor/ckeditor5-basic-styles \\\n  @ckeditor/ckeditor5-block-quote \\\n  @ckeditor/ckeditor5-editor-classic \\\n  @ckeditor/ckeditor5-essentials \\\n  @ckeditor/ckeditor5-heading \\\n  @ckeditor/ckeditor5-link \\\n  @ckeditor/ckeditor5-list \\\n  @ckeditor/ckeditor5-paragraph"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating a Bold Button in JavaScript",
    "codeDescription": "This code demonstrates how to create a bold button using the ButtonView class from CKEditor 5. It sets the button label, enables text display, and adds a CSS class for bold styling.",
    "codeLanguage": "javascript",
    "codeTokens": 119,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/ui-components.md#2025-04-16_snippet_3",
    "pageTitle": "UI Components in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ButtonView } from 'ckeditor5';\n\nconst boldButton = new ButtonView();\n\nboldButton.set( {\n\tlabel: 'Bold button',\n\twithText: true,\n\tclass: 'ck-button-bold'\n} );\nboldButton.render();\n\ndocument.getElementById( 'button-bold' ).append( boldButton.element );"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Complete CKEditor 5 DLL Implementation",
    "codeDescription": "Full example showing how to load and configure CKEditor 5 using DLL builds, including loading core DLL, editor creator, and feature plugins. Demonstrates script loading order and editor configuration.",
    "codeLanguage": "html",
    "codeTokens": 821,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/advanced/dll-builds.md#2025-04-16_snippet_1",
    "pageTitle": "Implementing CKEditor 5 DLL Builds",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- Base DLL build. -->\n<!-- Note: It includes ckeditor5-paragraph too. -->\n<script src=\"path/to/node_modules/ckeditor5/build/ckeditor5-dll.js\"></script>\n\n<!-- DLL-compatible build of ckeditor5-editor-classic. -->\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-editor-classic/build/editor-classic.js\"></script>\n\n<!-- DLL-compatible builds of editor features. -->\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-autoformat/build/autoformat.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-basic-styles/build/basic-styles.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-block-quote/build/block-quote.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-essentials/build/essentials.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-heading/build/heading.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-image/build/image.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-indent/build/indent.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-link/build/link.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-list/build/list.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-media-embed/build/media-embed.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-paste-from-office/build/paste-from-office.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-table/build/table.js\"></script>\n\n<script>\n\tconst config = {\n\t\tplugins: [\n\t\t\tCKEditor5.autoformat.Autoformat,\n\t\t\tCKEditor5.basicStyles.Bold,\n\t\t\tCKEditor5.basicStyles.Italic,\n\t\t\tCKEditor5.blockQuote.BlockQuote,\n\t\t\tCKEditor5.essentials.Essentials,\n\t\t\tCKEditor5.heading.Heading,\n\t\t\tCKEditor5.image.Image,\n\t\t\tCKEditor5.image.ImageCaption,\n\t\t\tCKEditor5.image.ImageStyle,\n\t\t\tCKEditor5.image.ImageToolbar,\n\t\t\tCKEditor5.image.ImageUpload,\n\t\t\tCKEditor5.indent.Indent,\n\t\t\tCKEditor5.link.Link,\n\t\t\tCKEditor5.list.List,\n\t\t\tCKEditor5.mediaEmbed.MediaEmbed,\n\t\t\tCKEditor5.paragraph.Paragraph,\n\t\t\tCKEditor5.pasteFromOffice.PasteFromOffice,\n\t\t\tCKEditor5.table.Table,\n\t\t\tCKEditor5.table.TableToolbar\n\t\t],\n\t\ttoolbar: {\n\t\t\titems: [\n\t\t\t\t'heading',\n\t\t\t\t'|',\n\t\t\t\t'bold',\n\t\t\t\t'italic',\n\t\t\t\t'link',\n\t\t\t\t'bulletedList',\n\t\t\t\t'numberedList',\n\t\t\t\t'|',\n\t\t\t\t'outdent',\n\t\t\t\t'indent',\n\t\t\t\t'|',\n\t\t\t\t'uploadImage',\n\t\t\t\t'blockQuote',\n\t\t\t\t'insertTable',\n\t\t\t\t'mediaEmbed',\n\t\t\t\t'undo',\n\t\t\t\t'redo'\n\t\t\t]\n\t\t},\n\t\timage: {\n\t\t\ttoolbar: [\n\t\t\t\t'imageStyle:inline',\n\t\t\t\t'imageStyle:block',\n\t\t\t\t'imageStyle:side',\n\t\t\t\t'|',\n\t\t\t\t'toggleImageCaption',\n\t\t\t\t'imageTextAlternative'\n\t\t\t]\n\t\t},\n\t\ttable: {\n\t\t\tcontentToolbar: [\n\t\t\t\t'tableColumn',\n\t\t\t\t'tableRow',\n\t\t\t\t'mergeTableCells'\n\t\t\t]\n\t\t}\n\t};\n\n\tCKEditor5.editorClassic.ClassicEditor\n\t\t.create( document.querySelector( '#editor' ), config )\n\t\t.then( editor => {\n\t\t\twindow.editor = editor;\n\t\t} );\n</script>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing Balloon Editor Snippet in HTML",
    "codeDescription": "Code snippet reference for embedding the balloon editor interface. The balloon editor displays a floating toolbar next to selected editable elements, allowing for contextual content editing directly in place.",
    "codeLanguage": "html",
    "codeTokens": 60,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/examples/builds/balloon-editor.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Balloon Editor Implementation",
    "codeList": [
      {
        "language": "html",
        "code": "{@snippet examples/balloon-editor}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing MultirootEditorUIView Class for CKEditor 5",
    "codeDescription": "This snippet defines the MultirootEditorUIView class, which extends the base EditorUIView class. It creates and manages multiple editable elements and initializes the toolbar for a multi-root editor.",
    "codeLanguage": "javascript",
    "codeTokens": 607,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/custom-editor-creator.md#2025-04-16_snippet_2",
    "pageTitle": "Implementing a Custom Editor Creator in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { EditorUIView, InlineEditableUIView, Template, ToolbarView } from 'ckeditor5';\n\n/**\n * The multi-root editor UI view. It is a virtual view providing an inline editable, but without\n * any specific arrangement of the components in the DOM.\n *\n * @extends module:ui/editorui/editoruiview~EditorUIView\n */\nclass MultirootEditorUIView extends EditorUIView {\n\t/**\n\t* Creates an instance of the multi-root editor UI view.\n\t*\n\t* @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t* @param {module:engine/view/view~View} editingView The editing view instance this view is related to.\n\t* @param {Object.<String,HTMLElement>} editableElements The list of editable elements, containing name and html element\n\t* for each editable.\n\t*/\n\tconstructor( locale, editingView, editableElements ) {\n\t\tsuper( locale );\n\n\t\t/**\n\t\t* The main toolbar of the multi-root editor UI.\n\t\t*\n\t\t* @readonly\n\t\t* @member {module:ui/toolbar/toolbarview~ToolbarView}\n\t\t*/\n\t\tthis.toolbar = new ToolbarView( locale );\n\n\t\t/**\n\t\t* The editables of the multi-root editor UI.\n\t\t*\n\t\t* @readonly\n\t\t* @member {Array.<module:ui/editableui/inline/inlineeditableuiview~InlineEditableUIView>}\n\t\t*/\n\t\tthis.editables = [];\n\n\t\t// Create InlineEditableUIView instance for each editable.\n\t\tfor ( const editableName of Object.keys( editableElements ) ) {\n\t\t\tconst editable = new InlineEditableUIView( locale, editingView, editableElements[ editableName ] );\n\n\t\t\teditable.name = editableName;\n\t\t\tthis.editables.push( editable );\n\t\t}\n\n\t\t// This toolbar may be placed anywhere in the page so things like font size need to be reset in it.\n\t\t// Because of the above, make sure the toolbar supports rounded corners.\n\t\t// Also, make sure the toolbar has the proper dir attribute because its ancestor may not have one\n\t\t// and some toolbar item styles depend on this attribute.\n\t\tTemplate.extend( this.toolbar.template, {\n\t\t\tattributes: {\n\t\t\t\tclass: [\n\t\t\t\t\t'ck-reset_all',\n\t\t\t\t\t'ck-rounded-corners'\n\t\t\t\t],\n\t\t\t\tdir: locale.uiLanguageDirection\n\t\t\t}\n\t\t} );\n\t}\n\n\t/**\n\t* @inheritDoc\n\t*/\n\trender() {\n\t\tsuper.render();\n\n\t\tthis.registerChild( this.editables );\n\t\tthis.registerChild( [ this.toolbar ] );\n\t}\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating a Button with Keystroke in JavaScript",
    "codeDescription": "This code shows how to create a button with a keystroke shortcut using the ButtonView class from CKEditor 5. It sets the button label, enables text and keystroke display, and adds a keystroke shortcut.",
    "codeLanguage": "javascript",
    "codeTokens": 142,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/ui-components.md#2025-04-16_snippet_5",
    "pageTitle": "UI Components in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ButtonView } from 'ckeditor5';\n\nconst keystrokeButton = new ButtonView();\n\nkeystrokeButton.set( {\n\tlabel: 'Italic',\n\twithText: true,\n\twithKeystroke: true,\n\tkeystroke: 'Ctrl+I'\n} );\nkeystrokeButton.render();\n\ndocument.getElementById( 'button-keystroke' ).append( keystrokeButton.element );"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Element to Element Conversion: Handling View Attributes",
    "codeDescription": "This snippet demonstrates handling view element attributes when creating a model element. It extracts the 'data-level' attribute from the view element and uses it to set the 'level' attribute of the model element.",
    "codeLanguage": "javascript",
    "codeTokens": 144,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/conversion/helpers/upcast.md#2025-04-16_snippet_3",
    "pageTitle": "CKEditor 5 Framework: Upcast Conversion Helpers",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.conversion\n\t.for( 'upcast' )\n\t.elementToElement( {\n\t\tview: {\n\t\t\tname: 'p',\n\t\t\tattributes: [ 'data-level' ]\n\t\t},\n\t\tmodel: ( viewElement, { writer } ) => {\n\t\t\treturn writer.createElement( 'heading', { level: viewElement.getAttribute( 'data-level' ) } );\n\t\t}\n\t} );"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating a Button with Tooltip in JavaScript",
    "codeDescription": "This snippet demonstrates how to create a button with a tooltip using the ButtonView class from CKEditor 5. It sets the button label, enables text display, adds a tooltip, and specifies the tooltip position.",
    "codeLanguage": "javascript",
    "codeTokens": 132,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/ui-components.md#2025-04-16_snippet_6",
    "pageTitle": "UI Components in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ButtonView } from 'ckeditor5';\n\nconst tooltipButton = new ButtonView();\n\ntooltipButton.set( {\n\tlabel: 'Tooltip button',\n\twithText: true,\n\ttooltip: 'The content of the tooltip',\n\ttooltipPosition: 's'\n} );\ntooltipButton.render();\n\ndocument.getElementById( 'button-tooltip' ).append( tooltipButton.element );"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing Dialog Window in CKEditor 5",
    "codeDescription": "Creates a plugin that adds a dialog window functionality to the editor, including a toggle button and custom content display. Shows complete dialog implementation with action buttons.",
    "codeLanguage": "javascript",
    "codeTokens": 512,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/ui-components.md#2025-04-16_snippet_17",
    "pageTitle": "UI Components in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import {\n\tButtonView,\n\tDialog,\n\tView,\n\tPlugin,\n\tClassicEditor,\n\tParagraph,\n\tEssentials,\n\tBold,\n\tItalic\n} from 'ckeditor5';\n\nclass MinimalisticDialog extends Plugin {\n\tget requires() {\n\t\treturn [ Dialog ];\n\t}\n\n\tinit() {\n\t\tthis.editor.ui.componentFactory.add( 'showDialog', locale => {\n\t\t\tconst buttonView = new ButtonView( locale );\n\n\t\t\tbuttonView.set( {\n\t\t\t\tlabel: 'Show a dialog',\n\t\t\t\ttooltip: true,\n\t\t\t\twithText: true\n\t\t\t} );\n\n\t\t\tbuttonView.on( 'execute', () => {\n\t\t\t\tconst dialog = this.editor.plugins.get( 'Dialog' );\n\n\t\t\t\tif ( buttonView.isOn ) {\n\t\t\t\t\tdialog.hide();\n\t\t\t\t\tbuttonView.isOn = false;\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbuttonView.isOn = true;\n\n\t\t\t\tconst textView = new View( locale );\n\n\t\t\t\ttextView.setTemplate( {\n\t\t\t\t\ttag: 'div',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\tpadding: 'var(--ck-spacing-large)',\n\t\t\t\t\t\t\twhiteSpace: 'initial',\n\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t\tmaxWidth: '500px'\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttabindex: -1\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t'This is the content of the dialog.',\n\t\t\t\t\t\t'You can put here text, images, inputs, buttons, etc.'\n\t\t\t\t\t]\n\t\t\t\t} );\n\n\t\t\t\tdialog.show( {\n\t\t\t\t\ttitle: 'Dialog with text',\n\t\t\t\t\tcontent: textView,\n\t\t\t\t\tactionButtons: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'OK',\n\t\t\t\t\t\t\tclass: 'ck-button-action',\n\t\t\t\t\t\t\twithText: true,\n\t\t\t\t\t\t\tonExecute: () => dialog.hide()\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tonHide() { buttonView.isOn = false; }\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\treturn buttonView;\n\t\t} );\n\t}\n}\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Essentials, Paragraph, Bold, Italic, MinimalisticDialog, Dialog ],\n\t\ttoolbar: [ 'bold', 'italic', '|', 'showDialog' ]\n\t} )\n\t.catch( error => {\n\t\tconsole.error( error.stack );\n\t} );"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Importing and Initializing Mention Plugin in CKEditor 5",
    "codeDescription": "Code for importing and initializing the Mention plugin in CKEditor 5. This shows the basic setup for adding the plugin to a ClassicEditor instance.",
    "codeLanguage": "javascript",
    "codeTokens": 136,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-mention/docs/features/mentions.md#2025-04-16_snippet_0",
    "pageTitle": "Mentions (Autocompletion) Feature in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Mention } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Mention, /* ... */ ],\n\t\tmention: {\n\t\t\t// Configuration.\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Installing Autosave Plugin for CKEditor 5",
    "codeDescription": "Code for importing and adding the Autosave plugin to a CKEditor 5 instance. This basic configuration initializes the editor with the autosave feature and allows for custom configuration options.",
    "codeLanguage": "JavaScript",
    "codeTokens": 140,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-autosave/docs/features/autosave.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Autosave Feature Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { ClassicEditor, Autosave } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Autosave, /* ... */ ],\n\n\t\tautosave: {\n\t\t\t// Configuration.\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.954
  },
  {
    "codeTitle": "Import and Configure CKEditor 5 with Clipboard Plugin",
    "codeDescription": "This snippet demonstrates how to import the ClassicEditor and Clipboard plugins from CKEditor 5 and configure them for use in your application. It initializes the editor with a license key and specifies the plugins to be used, including Clipboard and Bold.",
    "codeLanguage": "javascript",
    "codeTokens": 137,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-clipboard/docs/features/drag-drop.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Drag and Drop Feature",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Clipboard } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Clipboard, Bold, /* ... */ ],\n\t})\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.953
  },
  {
    "codeTitle": "Styling and HTML Structure for CKEditor 5 DecoupledEditor",
    "codeDescription": "HTML and CSS for setting up the decoupled CKEditor 5 interface with proper styling. It defines a container layout with separate areas for content and toolbar, and includes custom styling for editor content elements like headings and horizontal lines.",
    "codeLanguage": "html",
    "codeTokens": 373,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/examples/custom/bottom-toolbar-editor.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 Bottom Toolbar with Button Grouping Example",
    "codeList": [
      {
        "language": "html",
        "code": "<style>\n\t#editor {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\t#editor-content {\n\t\tborder-bottom-left-radius: 0;\n\t\tborder-bottom-right-radius: 0;\n\t}\n\n\t#editor-content:not(.ck-focused) {\n\t\tborder-color: var(--ck-color-base-border);\n\t}\n\n\t#editor-toolbar-container > .ck.ck-toolbar {\n\t\tborder-top-width: 0;\n\t\tborder-top-left-radius: 0;\n\t\tborder-top-right-radius: 0;\n\t}\n\n\t.ck.ck-content {\n\t\tfont-family: Helvetica, Arial, sans-serif;\n\t\tpadding: 3em 2em 2em;\n\t}\n\n\t.ck.ck-content h2 {\n\t\tborder: 0;\n\t\tfont-size: 1.3em;\n\t\tpadding-top: 0.2em;\n\t\tpadding-bottom: 0.2em;\n\t\tmargin-bottom: 0.4em;\n\t}\n\n\t.ck.ck-content .ck-horizontal-line.ck-widget {\n\t\ttext-align: center;\n\t}\n\n\t.ck.ck-content .ck-horizontal-line.ck-widget hr {\n\t\tmargin: 5px auto;\n\t\twidth: 50px;\n\t\theight: 1px;\n\t\tdisplay: inline-block;\n\t}\n</style>\n\n<div id=\"editor\">\n\t<div id=\"editor-content\">\n\t\t\tEditor content is inserted here.\n\t</div>\n\t<div id=\"editor-toolbar-container\"></div>\n</div>"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Attribute to Attribute Conversion: Basic",
    "codeDescription": "This snippet shows a basic attribute-to-attribute conversion. It converts the 'src' attribute in `<img src=\"foo.jpg\">` to the 'source' attribute in `<imageInline source=\"foo.jpg\"></imageInline>`. ",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/conversion/helpers/upcast.md#2025-04-16_snippet_10",
    "pageTitle": "CKEditor 5 Framework: Upcast Conversion Helpers",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.conversion\n\t.for( 'upcast' )\n\t.attributeToAttribute( {\n\t\tview: 'src',\n\t\tmodel: 'source'\n\t} );"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Executing Page Break Command Programmatically in CKEditor 5",
    "codeDescription": "Code snippet demonstrating how to execute the page break command programmatically using the editor.execute() method. This inserts a page break at the current selection point.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-page-break/docs/features/page-break.md#2025-04-16_snippet_1",
    "pageTitle": "Page Break Feature in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Inserts a page break into the selected content.\neditor.execute( 'pageBreak' );"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Initializing Abbreviation Command in CKEditor 5",
    "codeDescription": "Defines a custom command for handling abbreviation attributes with dynamic state refreshing and selection-based logic",
    "codeLanguage": "javascript",
    "codeTokens": 121,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/abbreviation-plugin-tutorial/abbreviation-plugin-level-3.md#2025-04-16_snippet_8",
    "pageTitle": "Creating an Advanced Abbreviation Plugin for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default class AbbreviationCommand extends Command {\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tthis.isEnabled = model.schema.checkAttributeInSelection(\n\t\t\tselection, 'abbreviation'\n\t\t);\n\t}\n\n\texecute( { title, abbr } ) {\n\t\t// The code runs after command execution.\n\t\t// ...\n\t}\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Inserting Text at Selection Position in CKEditor 5",
    "codeDescription": "Shows how to insert text at the current selection position using the model writer. The writer is accessed through the model.change() method which ensures changes are properly tracked.",
    "codeLanguage": "javascript",
    "codeTokens": 87,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/editing-engine.md#2025-04-16_snippet_1",
    "pageTitle": "Editing Engine Architecture in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Inserts text \"foo\" at the selection position.\neditor.model.change( writer => {\n\twriter.insertText( 'foo', editor.model.document.selection.getFirstPosition() );\n} );"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "HTML Template Setup for CKEditor 5 CDN Implementation",
    "codeDescription": "HTML structure for implementing CKEditor 5 using CDN, including required stylesheet and script references",
    "codeLanguage": "html",
    "codeTokens": 207,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/implementing-an-inline-widget.md#2025-04-16_snippet_18",
    "pageTitle": "Implementing an Inline Widget Tutorial for CKEditor 5",
    "codeList": [
      {
        "language": "html",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title>CKEditor 5 Framework – tutorial CDN</title>\n\t\t<link rel=\"stylesheet\" href=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.css\" />\n\t</head>\n\t<body>\n\t\t<div id=\"editor\">\n\t\t\t<p>Hello world!</p>\n\t\t</div>\n\t\t<script src=\"https://cdn.ckeditor.com/ckeditor5/{@var ckeditor5-version}/ckeditor5.umd.js\"></script>\n\n\t\t<script type=\"module\" src=\"/main.js\"></script>\n\t</body>\n</html>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing Document Editor in React with CKEditor 5",
    "codeDescription": "This snippet demonstrates how to use the DecoupledEditor in a React component. It shows how to manually add the toolbar to the DOM, configure the editor, and handle lifecycle events.",
    "codeLanguage": "jsx",
    "codeTokens": 390,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/react-default-npm.md#2025-04-16_snippet_4",
    "pageTitle": "React Rich Text Editor Component with npm Integration",
    "codeList": [
      {
        "language": "jsx",
        "code": "import { useEffect, useRef, useState } from 'react';\nimport { DecoupledEditor, Bold, Essentials, Italic, Paragraph } from 'ckeditor5';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\n\nimport 'ckeditor5/ckeditor5.css';\n\nfunction App() {\n\tconst editorToolbarRef = useRef( null );\n\tconst [ isMounted, setMounted ] = useState( false );\n\n\tuseEffect( () => {\n\t\tsetMounted( true );\n\n\t\treturn () => {\n\t\t\tsetMounted( false );\n\t\t};\n\t}, [] );\n\n\treturn (\n\t\t<div>\n\t\t\t<div ref={ editorToolbarRef }></div>\n\t\t\t<div>\n\t\t\t\t{ isMounted && (\n\t\t\t\t\t<CKEditor\n\t\t\t\t\t\teditor={ DecoupledEditor }\n\t\t\t\t\t\tdata='<p>Hello from CKEditor 5 decoupled editor!</p>'\n\t\t\t\t\t\tconfig={ {\n\t\t  \t\t\t\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\t\t\t\t\t\tplugins: [ Bold, Italic, Paragraph, Essentials ],\n\t\t\t\t\t\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic' ]\n\t\t\t\t\t\t} }\n\t\t\t\t\t\tonReady={ ( editor ) => {\n\t\t\t\t\t\t\tif ( editorToolbarRef.current ) {\n\t\t\t\t\t\t\t\teditorToolbarRef.current.appendChild( editor.ui.view.toolbar.element );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonAfterDestroy={ ( editor ) => {\n\t\t\t\t\t\t\tif ( editorToolbarRef.current ) {\n\t\t\t\t\t\t\t\tArray.from( editorToolbarRef.current.children ).forEach( child => child.remove() );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Configuring Image Toolbar in CKEditor 5",
    "codeDescription": "Example configuration for setting up an image toolbar with caption toggle, text alternative, and editing buttons in CKEditor 5. This code demonstrates how to customize the toolbar options available when an image is selected.",
    "codeLanguage": "javascript",
    "codeTokens": 119,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-image/docs/features/images-overview.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Image Features Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\timage: {\n\t\t\ttoolbar: [ 'toggleImageCaption', 'imageTextAlternative', 'ckboxImageEdit' ]\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Creating UI for External Data Widget in JavaScript",
    "codeDescription": "Implements the UI part of the external data widget, including a button for inserting the widget. It sets up the button's appearance, binds its state to the command, and handles the button click event.",
    "codeLanguage": "javascript",
    "codeTokens": 298,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/data-from-external-source.md#2025-04-16_snippet_7",
    "pageTitle": "External Data Widget Implementation in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { Plugin, ButtonView } from 'ckeditor5';\n\nimport BitcoinLogoIcon from './theme/bitcoin-logo.svg';\n\nclass ExternalDataWidgetUI extends Plugin {\n\tinit() {\n\t\tconst editor = this.editor;\n\t\tconst externalWidgetCommand = editor.commands.get( 'external' );\n\n\t\t// The \"external\" button must be registered among the UI components of the editor\n\t\t// to be displayed in the toolbar.\n\t\teditor.ui.componentFactory.add( 'external', locale => {\n\t\t\tconst button = new ButtonView( locale );\n\n\t\t\tbutton.set( {\n\t\t\t\tlabel: 'Bitcoin rate',\n\t\t\t\ttooltip: true,\n\t\t\t\twithText: false,\n\t\t\t\ticon: BitcoinLogoIcon\n\t\t\t} );\n\n\t\t\t// Disable the external data widget button when the command is disabled.\n\t\t\tbutton.bind( 'isEnabled' ).to( externalWidgetCommand );\n\n\t\t\t// Execute the command when the button is clicked (executed).\n\t\t\tbutton.on( 'execute', () => {\n\t\t\t\teditor.execute( 'external' );\n\t\t\t\t// Set focus on the editor content\n\t\t\t\teditor.editing.view.focus();\n\t\t\t} );\n\n\t\t\treturn button;\n\t\t} );\n\t}\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Finding Words and Ranges in CKEditor 5 Document",
    "codeDescription": "This snippet demonstrates how to search for words in a CKEditor 5 document, create model ranges for each word, and log their positions and content. It iterates through the document root, identifies text blocks, and uses regex to find words.",
    "codeLanguage": "javascript",
    "codeTokens": 391,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/how-tos.md#2025-04-16_snippet_7",
    "pageTitle": "CKEditor 5 Framework How-to Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const model = editor.model;\nconst rootElement = model.document.getRoot();\nconst rootRange = model.createRangeIn( rootElement );\nconst wordRanges = [];\n\nfor ( const item of rootRange.getItems() ) {\n\t// Find `$block` elements (those accept text).\n\tif ( item.is( 'element' ) && model.schema.checkChild( item, '$text' ) ) {\n\t\t// Get the whole text from block.\n\t\t// Inline elements (like softBreak or imageInline) are replaced\n\t\t// with a single whitespace to keep the position offset correct.\n\t\tconst blockText = Array.from( item.getChildren() )\n\t\t\t.reduce( ( rangeText, item ) => rangeText + ( item.is( '$text' ) ? item.data : ' ' ), '' );\n\n\t\t// Find all words.\n\t\tfor ( const match of blockText.matchAll( /\\b\\S+\\b/g ) ) {\n\t\t\t// The position in a text node is always parented by the block element.\n\t\t\tconst startPosition = model.createPositionAt( item, match.index );\n\t\t\tconst endPosition = model.createPositionAt( item, match.index + match[ 0 ].length );\n\n\t\t\twordRanges.push( model.createRange( startPosition, endPosition ) );\n\t\t}\n\t}\n}\n\n// Example usage of the collected words:\nfor ( const range of wordRanges ) {\n\tconst fragment = model.getSelectedContent( model.createSelection( range ) );\n\tconst html = editor.data.stringify( fragment );\n\n\tconsole.log( `[${ range.start.path }] - [${ range.end.path }]`, html );\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Configuring General HTML Support for CKEditor 5 in JavaScript",
    "codeDescription": "This code snippet defines a custom configuration for the General HTML Support feature in CKEditor 5. It specifies allowed HTML elements and their attributes, providing fine-grained control over the editor's content handling.",
    "codeLanguage": "JavaScript",
    "codeTokens": 227,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-html-support/tests/manual/ghs-custom-config.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 General HTML Support Configuration Test",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor.create(document.querySelector('#editor'), {\n\thtmlSupport: {\n\t\tallow: [\n\t\t\t{\n\t\t\t\tname: /.*/,\n\t\t\t\tattributes: true,\n\t\t\t\tclasses: true,\n\t\t\t\tstyles: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'div',\n\t\t\t\tattributes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: /^data-/,\n\t\t\t\t\t\tvalue: true\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'abbr',\n\t\t\t\tattributes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: 'title',\n\t\t\t\t\t\tvalue: true\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'article',\n\t\t\t\tattributes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: 'class',\n\t\t\t\t\t\tvalue: 'news'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t}\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Configuring Font Family Options in CKEditor 5",
    "codeDescription": "Shows the default configuration for font family options in CKEditor 5. This configuration defines the available font families that can be used with the 'fontFamily' command.",
    "codeLanguage": "JavaScript",
    "codeTokens": 144,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-font/docs/features/font.md#2025-04-16_snippet_11",
    "pageTitle": "Font Features Configuration Guide for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "fontFamily.options = [\n\t'default',\n\t'Arial, Helvetica, sans-serif',\n\t'Courier New, Courier, monospace',\n\t'Georgia, serif',\n\t'Lucida Sans Unicode, Lucida Grande, sans-serif',\n\t'Tahoma, Geneva, sans-serif',\n\t'Times New Roman, Times, serif',\n\t'Trebuchet MS, Helvetica, sans-serif',\n\t'Verdana, Geneva, sans-serif'\n]"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Configuring CKEditor 5 for Chat Application in JavaScript",
    "codeDescription": "This snippet shows how to configure CKEditor 5 for a chat application. It includes plugin setup, toolbar configuration, and custom mention feeds. The code also handles sending messages and updating the chat interface.",
    "codeLanguage": "javascript",
    "codeTokens": 1456,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-mention/docs/examples/chat-with-mentions.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Configuration for Chat Application",
    "codeList": [
      {
        "language": "javascript",
        "code": "import {\n\tClassicEditor,\n\tBold,\n\tItalic,\n\tStrikethrough,\n\tUnderline,\n\tEssentials,\n\tLink,\n\tMention,\n\tParagraph\n} from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '.chat__editor' ), {\n\t\tlicenseKey: 'GPL', // Or '<YOUR_LICENSE_KEY>'.\n\t\textraPlugins: [ Essentials, Paragraph, Mention, MentionLinks, Bold, Italic, Underline, Strikethrough, Link ],\n\t\ttoolbar: {\n\t\t\titems: [\n\t\t\t\t'undo', 'redo',\n\t\t\t\t'|',\n\t\t\t\t'heading',\n\t\t\t\t'|',\n\t\t\t\t'bold', 'italic', 'underline', 'strikethrough',\n\t\t\t\t'|',\n\t\t\t\t'link', 'uploadImage', 'insertTable', 'mediaEmbed',\n\t\t\t\t'|',\n\t\t\t\t'bulletedList', 'numberedList', 'outdent', 'indent'\n\t\t\t]\n\t\t},\n\t\tmention: {\n\t\t\tfeeds: [\n\t\t\t\t{\n\t\t\t\t\tmarker: '@',\n\t\t\t\t\tfeed: [\n\t\t\t\t\t\t{ id: '@cflores', avatar: 'm_1', name: 'Charles Flores' },\n\t\t\t\t\t\t{ id: '@gjackson', avatar: 'm_2', name: 'Gerald Jackson' },\n\t\t\t\t\t\t{ id: '@wreed', avatar: 'm_3', name: 'Wayne Reed' },\n\t\t\t\t\t\t{ id: '@lgarcia', avatar: 'm_4', name: 'Louis Garcia' },\n\t\t\t\t\t\t{ id: '@rwilson', avatar: 'm_5', name: 'Roy Wilson' },\n\t\t\t\t\t\t{ id: '@mnelson', avatar: 'm_6', name: 'Matthew Nelson' },\n\t\t\t\t\t\t{ id: '@rwilliams', avatar: 'm_7', name: 'Randy Williams' },\n\t\t\t\t\t\t{ id: '@ajohnson', avatar: 'm_8', name: 'Albert Johnson' },\n\t\t\t\t\t\t{ id: '@sroberts', avatar: 'm_9', name: 'Steve Roberts' },\n\t\t\t\t\t\t{ id: '@kevans', avatar: 'm_10', name: 'Kevin Evans' },\n\t\t\t\t\t\t{ id: '@mwilson', avatar: 'w_1', name: 'Mildred Wilson' },\n\t\t\t\t\t\t{ id: '@mnelson', avatar: 'w_2', name: 'Melissa Nelson' },\n\t\t\t\t\t\t{ id: '@kallen', avatar: 'w_3', name: 'Kathleen Allen' },\n\t\t\t\t\t\t{ id: '@myoung', avatar: 'w_4', name: 'Mary Young' },\n\t\t\t\t\t\t{ id: '@arogers', avatar: 'w_5', name: 'Ashley Rogers' },\n\t\t\t\t\t\t{ id: '@dgriffin', avatar: 'w_6', name: 'Debra Griffin' },\n\t\t\t\t\t\t{ id: '@dwilliams', avatar: 'w_7', name: 'Denise Williams' },\n\t\t\t\t\t\t{ id: '@ajames', avatar: 'w_8', name: 'Amy James' },\n\t\t\t\t\t\t{ id: '@randerson', avatar: 'w_9', name: 'Ruby Anderson' },\n\t\t\t\t\t\t{ id: '@wlee', avatar: 'w_10', name: 'Wanda Lee' }\n\t\t\t\t\t],\n\t\t\t\t\titemRenderer: customItemRenderer\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tmarker: '#',\n\t\t\t\t\tfeed: [\n\t\t\t\t\t\t'#american', '#asian', '#baking', '#breakfast', '#cake', '#caribbean',\n\t\t\t\t\t\t'#chinese', '#chocolate', '#cooking', '#dairy', '#delicious', '#delish',\n\t\t\t\t\t\t'#dessert', '#desserts', '#dinner', '#eat', '#eating', '#eggs', '#fish',\n\t\t\t\t\t\t'#food', '#foodgasm', '#foodie', '#foodporn', '#foods', '#french', '#fresh',\n\t\t\t\t\t\t'#fusion', '#glutenfree', '#greek', '#grilling', '#halal', '#homemade',\n\t\t\t\t\t\t'#hot', '#hungry', '#icecream', '#indian', '#italian', '#japanese', '#keto',\n\t\t\t\t\t\t'#korean', '#lactosefree', '#lunch', '#meat', '#mediterranean', '#mexican',\n\t\t\t\t\t\t'#moroccan', '#nom', '#nomnom', '#paleo', '#poultry', '#snack', '#spanish',\n\t\t\t\t\t\t'#sugarfree', '#sweet', '#sweettooth', '#tasty', '#thai', '#vegan',\n\t\t\t\t\t\t'#vegetarian', '#vietnamese', '#yum', '#yummy'\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t} )\n\t.then( editor => {\n\t\tconst editingView = editor.editing.view;\n\t\tconst rootElement = editingView.document.getRoot();\n\n\t\twindow.editor = editor;\n\n\t\t// Clone the first message in the chat when \"Send\" is clicked, fill it with new data\n\t\t// and append to the chat list.\n\t\tdocument.querySelector( '.chat-send' ).addEventListener( 'click', () => {\n\t\t\tconst message = editor.getData();\n\n\t\t\tif ( !message ) {\n\t\t\t\teditingView.change( writer => {\n\t\t\t\t\twriter.addClass( 'highlighted', rootElement );\n\t\t\t\t\teditingView.focus();\n\t\t\t\t} );\n\n\t\t\t\tsetTimeout( () => {\n\t\t\t\t\teditingView.change( writer => {\n\t\t\t\t\t\twriter.removeClass( 'highlighted', rootElement );\n\t\t\t\t\t} );\n\t\t\t\t}, 650 );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst clone = document.querySelector( '.chat__posts li' ).cloneNode( true );\n\n\t\t\tclone.classList.add( 'new-post' );\n\t\t\tclone.querySelector( 'img' ).src = 'https://ckeditor.com/docs/ckeditor5/latest/assets/img/m_0.jpg';\n\t\t\tclone.querySelector( 'strong' ).textContent = 'CKEditor User';\n\n\t\t\tconst mailtoUser = clone.querySelector( '.chat__posts__post__mailto-user' );\n\n\t\t\tmailtoUser.textContent = '@ckeditor';\n\t\t\tmailtoUser.href = 'mailto:info@cksource.com';\n\n\t\t\tclone.querySelector( '.chat__posts__post__time' ).textContent = 'just now';\n\t\t\tclone.querySelector( '.chat__posts__post__content' ).innerHTML = message;\n\n\t\t\tdocument.querySelector( '.chat__posts' ).appendChild( clone );\n\n\t\t\teditor.setData( '' );\n\t\t\teditingView.focus();\n\t\t} );\n\t} )\n\t.catch( err => {\n\t\tconsole.error( err.stack );\n\t} );"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Installing CKEditor 5 React Package",
    "codeDescription": "Command to install CKEditor 5 WYSIWYG editor package for React and the multi-root editor type using npm.",
    "codeLanguage": "bash",
    "codeTokens": 54,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/react-multiroot-npm.md#2025-04-16_snippet_0",
    "pageTitle": "React Multi-Root Editor Integration Guide",
    "codeList": [
      {
        "language": "bash",
        "code": "npm install ckeditor5 @ckeditor/ckeditor5-react"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Defining Observable Properties in CKEditor 5",
    "codeDescription": "This code snippet illustrates how to define observable properties within a CKEditor 5 `View` class using the `set()` method. It demonstrates setting different types of initial values (undefined, boolean) for observable properties. Because `Button` extends the `View` class, it inherits the observable functionalities.",
    "codeLanguage": "javascript",
    "codeTokens": 204,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-utils/docs/framework/deep-dive/observables.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 Framework - Observables",
    "codeList": [
      {
        "language": "javascript",
        "code": "class Button extends View {\n\tconstructor() {\n\t\tsuper();\n\n\t\t// This property is not observable.\n\t\t// Not all properties must be observable, it's always up to you!\n\t\tthis.type = 'button';\n\n\t\tconst bind = this.bindTemplate;\n\n\t\t// this.label is observable but undefined.\n\t\tthis.set( 'label' );\n\n\t\t// this.isOn is observable and false.\n\t\tthis.set( 'isOn', false );\n\n\t\t// this.isEnabled is observable and true.\n\t\tthis.set( 'isEnabled', true );\n\n\t\t// More observable's properties.\n\t\t// ...\n\t}\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Configuring Custom Color Palettes for Table Styling",
    "codeDescription": "This code snippet shows how to define and apply custom color palettes for table and cell borders and backgrounds in CKEditor 5.",
    "codeLanguage": "javascript",
    "codeTokens": 371,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-table/docs/features/tables-styling.md#2025-04-16_snippet_1",
    "pageTitle": "Table and Cell Styling in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "const customColorPalette = [\n\t{\n\t\tcolor: 'hsl(4, 90%, 58%)',\n\t\tlabel: 'Red'\n\t},\n\t{\n\t\tcolor: 'hsl(340, 82%, 52%)',\n\t\tlabel: 'Pink'\n\t},\n\t{\n\t\tcolor: 'hsl(291, 64%, 42%)',\n\t\tlabel: 'Purple'\n\t},\n\t{\n\t\tcolor: 'hsl(262, 52%, 47%)',\n\t\tlabel: 'Deep Purple'\n\t},\n\t{\n\t\tcolor: 'hsl(231, 48%, 48%)',\n\t\tlabel: 'Indigo'\n\t},\n\t{\n\t\tcolor: 'hsl(207, 90%, 54%)',\n\t\tlabel: 'Blue'\n\t},\n\n\t// More colors.\n\t// ...\n];\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\ttable: {\n\t\t\tcontentToolbar: [\n\t\t\t\t'tableColumn', 'tableRow', 'mergeTableCells',\n\t\t\t\t'tableProperties', 'tableCellProperties'\n\t\t\t],\n\n\t\t\t// Set the palettes for tables.\n\t\t\ttableProperties: {\n\t\t\t\tborderColors: customColorPalette,\n\t\t\t\tbackgroundColors: customColorPalette\n\t\t\t},\n\n\t\t\t// Set the palettes for table cells.\n\t\t\ttableCellProperties: {\n\t\t\t\tborderColors: customColorPalette,\n\t\t\t\tbackgroundColors: customColorPalette\n\t\t\t}\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Defining Custom BootstrapEditor Class",
    "codeDescription": "Creates a custom BootstrapEditor class that extends the base Editor class. It initializes the editor with a custom UI, sets up the model root, and handles form attachment and destruction. The static create method initializes plugins, UI, and data.",
    "codeLanguage": "javascript",
    "codeTokens": 398,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-ui/docs/framework/external-ui.md#2025-04-16_snippet_1",
    "pageTitle": "Implementing Third-Party UI with CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default class BootstrapEditor extends ElementApiMixin( Editor ) {\n\tconstructor( element, config ) {\n\t\tsuper( config );\n\n\t\t// Remember the element the editor is created with.\n\t\tthis.sourceElement = element;\n\n\t\t// Create the (\"main\") root element of the model tree.\n\t\tthis.model.document.createRoot();\n\n\t\t// The UI layer of the editor.\n\t\tthis.ui = new BootstrapEditorUI( this );\n\n\t\t// When editor#element is a textarea inside a form element,\n\t\t// the content of this textarea will be updated on form submit.\n\t\tattachToForm( this );\n\t}\n\n\tdestroy() {\n\t\t// When destroyed, the editor sets the output of editor#getData() into editor#element...\n\t\tthis.updateSourceElement();\n\n\t\t// ...and destroys the UI.\n\t\tthis.ui.destroy();\n\n\t\treturn super.destroy();\n\t}\n\n\tstatic create( element, config ) {\n\t\treturn new Promise( resolve => {\n\t\t\tconst editor = new this( element, config );\n\n\t\t\tresolve(\n\t\t\t\teditor.initPlugins()\n\t\t\t\t\t// Initialize the UI first. See the BootstrapEditorUI class to learn more.\n\t\t\t\t\t.then( () => editor.ui.init( element ) )\n\t\t\t\t\t// Fill the editable with the initial data.\n\t\t\t\t\t.then( () => editor.data.init( getDataFromElement( element ) ) )\n\t\t\t\t\t// Fire the `editor#ready` event that announce the editor is complete and ready to use.\n\t\t\t\t\t.then( () => editor.fire( 'ready' ) )\n\t\t\t\t\t.then( () => editor )\n\t\t\t);\n\t\t} );\n\t}\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Managing Editor Selection and Content",
    "codeDescription": "Collection of utility functions for deleting content, positioning caret and finding elements in the editor",
    "codeLanguage": "javascript",
    "codeTokens": 39,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/how-tos.md#2025-04-16_snippet_6",
    "pageTitle": "CKEditor 5 Framework How-to Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.focus();"
      },
      {
        "language": "javascript",
        "code": "const range = editor.model.createRangeIn( editor.model.document.getRoot() );\n\nconst links = new Set();\n\nfor ( const value of range.getWalker() ) {\n\tif ( value.type === 'text' && value.item.hasAttribute( 'linkHref' ) ) {\n\t\tlinks.add( value.item.getAttribute( 'linkHref' ) );\n\t}\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Font Family Configuration in CKEditor 5",
    "codeDescription": "Configuration example for custom font family options including default and custom fonts.",
    "codeLanguage": "javascript",
    "codeTokens": 149,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-font/docs/features/font.md#2025-04-16_snippet_2",
    "pageTitle": "Font Features Configuration Guide for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\tfontFamily: {\n\t\t\toptions: [\n\t\t\t\t'default',\n\t\t\t\t'Ubuntu, Arial, sans-serif',\n\t\t\t\t'Ubuntu Mono, Courier New, Courier, monospace'\n\t\t\t]\n\t\t},\n\t\ttoolbar: [\n\t\t\t'heading', 'bulletedList', 'numberedList', 'fontFamily', 'undo', 'redo'\n\t\t]\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Customizing Mention Item Renderer in JavaScript",
    "codeDescription": "This function customizes the way user suggestions are displayed in the mention dropdown. It creates a custom HTML structure for each user item, including an avatar, username, and full name.",
    "codeLanguage": "javascript",
    "codeTokens": 211,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-mention/docs/examples/chat-with-mentions.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 Configuration for Chat Application",
    "codeList": [
      {
        "language": "javascript",
        "code": "function customItemRenderer( item ) {\n\tconst itemElement = document.createElement( 'span' );\n\tconst avatar = document.createElement( 'img' );\n\tconst userNameElement = document.createElement( 'span' );\n\tconst fullNameElement = document.createElement( 'span' );\n\n\titemElement.classList.add( 'mention__item' );\n\n\tavatar.src = `https://ckeditor.com/docs/ckeditor5/latest/assets/img/${ item.avatar }.jpg`;\n\n\tuserNameElement.classList.add( 'mention__item__user-name' );\n\tuserNameElement.textContent = item.id;\n\n\tfullNameElement.classList.add( 'mention__item__full-name' );\n\tfullNameElement.textContent = item.name;\n\n\titemElement.appendChild( avatar );\n\titemElement.appendChild( userNameElement );\n\titemElement.appendChild( fullNameElement );\n\n\treturn itemElement;\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Initializing ClassicEditor with Word Count",
    "codeDescription": "This JavaScript snippet initializes a ClassicEditor instance with the word count feature. It retrieves the `WordCount` plugin instance and appends its container to the designated HTML element (`word-count`).",
    "codeLanguage": "JavaScript",
    "codeTokens": 149,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-word-count/docs/features/word-count.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 Word and Character Count Feature",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "\"ClassicEditor\\n\\t.create( document.querySelector( '#editor' ), {\\n\\t\\t// Configuration details.\\n\\t} )\\n\\t.then( editor => {\\n\\t\\tconst wordCountPlugin = editor.plugins.get( 'WordCount' );\\n\\t\\tconst wordCountWrapper = document.getElementById( 'word-count' );\\n\\n\\t\\twordCountWrapper.appendChild( wordCountPlugin.wordCountContainer );\\n\\t} );\""
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing MultirootEditorUI Class for CKEditor 5",
    "codeDescription": "This snippet defines the MultirootEditorUI class, which extends the base EditorUI class. It initializes UI components, sets up focus tracking, and manages placeholders for multiple editable elements.",
    "codeLanguage": "javascript",
    "codeTokens": 1483,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/custom-editor-creator.md#2025-04-16_snippet_1",
    "pageTitle": "Implementing a Custom Editor Creator in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { EditorUI, enablePlaceholder } from 'ckeditor5';\n\n/**\n * The multi-root editor UI class.\n *\n * @extends module:ui/editorui/editorui~EditorUI\n */\nclass MultirootEditorUI extends EditorUI {\n\t/**\n\t* Creates an instance of the multi-root editor UI class.\n\t*\n\t* @param {module:core/editor/editor~Editor} editor The editor instance.\n\t* @param {module:ui/editorui/editoruiview~EditorUIView} view The view of the UI.\n\t*/\n\tconstructor( editor, view ) {\n\t\tsuper( editor );\n\n\t\t/**\n\t\t* The main (top–most) view of the editor UI.\n\t\t*\n\t\t* @readonly\n\t\t* @member {module:ui/editorui/editoruiview~EditorUIView} #view\n\t\t*/\n\t\tthis.view = view;\n\t}\n\n\t/**\n\t* Initializes the UI.\n\t*/\n\tinit() {\n\t\tconst view = this.view;\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\tlet lastFocusedEditableElement;\n\n\t\tview.render();\n\n\t\t// Keep track of the last focused editable element. Knowing which one was focused\n\t\t// is useful when the focus moves from editable to other UI components like balloons\n\t\t// (especially inputs) but the editable remains the \"focus context\" (e.g. link balloon\n\t\t// attached to a link in an editable). In this case, the editable should preserve visual\n\t\t// focus styles.\n\t\tthis.focusTracker.on( 'change:focusedElement', ( evt, name, focusedElement ) => {\n\t\t\tfor ( const editable of this.view.editables ) {\n\t\t\t\tif ( editable.element === focusedElement ) {\n\t\t\t\t\tlastFocusedEditableElement = editable.element;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// If the focus tracker loses focus, stop tracking the last focused editable element.\n\t\t// Wherever the focus is restored, it will no longer be in the context of that editable\n\t\t// because the focus \"came from the outside\", as opposed to the focus moving from one element\n\t\t// to another within the editor UI.\n\t\tthis.focusTracker.on( 'change:isFocused', ( evt, name, isFocused ) => {\n\t\t\tif ( !isFocused ) {\n\t\t\t\tlastFocusedEditableElement = null;\n\t\t\t}\n\t\t} );\n\n\t\tfor ( const editable of this.view.editables ) {\n\t\t\t// The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n\t\t\t// But it can be available earlier if a DOM element has been passed to MultirootEditor.create().\n\t\t\tconst editableElement = editable.element;\n\n\t\t\t// Register each editable UI view in the editor.\n\t\t\tthis.setEditableElement( editable.name, editableElement );\n\n\t\t\t// Let the editable UI element respond to the changes in the global editor focus\n\t\t\t// tracker. It has been added to the same tracker a few lines above but, in reality, there are\n\t\t\t// many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n\t\t\t// as they have focus, the editable should act like it is focused too (although technically\n\t\t\t// it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n\t\t\t// Doing otherwise will result in editable focus styles disappearing, once e.g. the\n\t\t\t// toolbar gets focused.\n\t\t\teditable.bind( 'isFocused' ).to( this.focusTracker, 'isFocused', this.focusTracker, 'focusedElement',\n\t\t\t\t( isFocused, focusedElement ) => {\n\t\t\t\t\t// When the focus tracker is blurred, it means the focus moved out of the editor UI.\n\t\t\t\t\t// No editable will maintain focus then.\n\t\t\t\t\tif ( !isFocused ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the focus tracker says the editor UI is focused and currently focused element\n\t\t\t\t\t// is the editable, then the editable should be visually marked as focused too.\n\t\t\t\t\tif ( focusedElement === editableElement ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t// If the focus tracker says the editor UI is focused but the focused element is\n\t\t\t\t\t// not an editable, it is possible that the editable is still (context–)focused.\n\t\t\t\t\t// For instance, the focused element could be an input inside of a balloon attached\n\t\t\t\t\t// to the content in the editable. In such case, the editable should remain _visually_\n\t\t\t\t\t// focused even though technically the focus is somewhere else. The focus moved from\n\t\t\t\t\t// the editable to the input but the focus context remained the same.\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn lastFocusedEditableElement === editableElement;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t// Bind the editable UI element to the editing view, making it an end– and entry–point\n\t\t\t// of the editor's engine. This is where the engine meets the UI.\n\t\t\teditingView.attachDomRoot( editableElement, editable.name );\n\t\t}\n\n\t\tthis._initPlaceholder();\n\t\tthis._initToolbar();\n\t\tthis.fire( 'ready' );\n\t}\n\n\t/**\n\t* @inheritDoc\n\t*/\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tconst view = this.view;\n\t\tconst editingView = this.editor.editing.view;\n\n\t\tfor ( const editable of this.view.editables ) {\n\t\t\teditingView.detachDomRoot( editable.name );\n\t\t}\n\n\t\tview.destroy();\n\t}\n\n\t/**\n\t* Initializes the editor main toolbar and its panel.\n\t*\n\t* @private\n\t*/\n\t_initToolbar() {\n\t\tconst editor = this.editor;\n\t\tconst view = this.view;\n\t\tconst toolbar = view.toolbar;\n\n\t\ttoolbar.fillFromConfig( editor.config.get( 'toolbar' ), this.componentFactory );\n\n\t\t// Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n\t\tthis.addToolbar( view.toolbar );\n\t}\n\n\t/**\n\t* Enable the placeholder text on the editing root, if any was configured.\n\t*\n\t* @private\n\t*/\n\t_initPlaceholder() {\n\t\tconst editor = this.editor;\n\t\tconst editingView = editor.editing.view;\n\n\t\tfor ( const editable of this.view.editables ) {\n\t\t\tconst editingRoot = editingView.document.getRoot( editable.name );\n\t\t\tconst sourceElement = this.getEditableElement( editable.name );\n\n\t\t\tconst placeholderText = editor.config.get( 'placeholder' )[ editable.name ] ||\n\t\t\t\tsourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.getAttribute( 'placeholder' );\n\n\t\t\tif ( placeholderText ) {\n\t\t\t\teditingRoot.placeholder = placeholderText;\n\n\t\t\t\tenablePlaceholder( {\n\t\t\t\t\tview: editingView,\n\t\t\t\t\telement: editingRoot,\n\t\t\t\t\tisDirectHost: false,\n\t\t\t\t\tkeepOnFocus: true\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t}\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Adding DOM Attributes to CKEditor 5 Editable",
    "codeDescription": "Two JavaScript examples showing how to add custom attributes to the editor's editable element, both with and without direct editor instance reference",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/how-tos.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 Framework How-to Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.editing.view.change( writer => {\n\tconst viewEditableRoot = editor.editing.view.document.getRoot();\n\n\twriter.setAttribute( 'myAttribute', 'value', viewEditableRoot );\n} );"
      },
      {
        "language": "javascript",
        "code": "const domEditableElement = document.querySelector( '.ck-editor__editable_inline' );\nconst editorInstance = domEditableElement.ckeditorInstance;\n\neditorInstance.editing.view.change( writer => {\n\tconst viewEditableRoot =\n\t\teditorInstance.editing.view.domConverter.mapDomToView(\n\t\t\tdomEditableElement\n\t\t);\n\n\twriter.setAttribute( 'myAttribute', 'value', viewEditableRoot );\n} );"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Basic Attribute to Attribute Conversion in CKEditor 5 (JavaScript)",
    "codeDescription": "Demonstrates how to use the attributeToAttribute() helper for basic attribute conversion from model to view. This example converts the 'source' model attribute to the 'src' view attribute.",
    "codeLanguage": "javascript",
    "codeTokens": 90,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/conversion/helpers/downcast.md#2025-04-16_snippet_11",
    "pageTitle": "Downcasting Elements in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.conversion\n\t.for( 'downcast' )\n\t.attributeToAttribute( {\n\t\tmodel: 'source',\n\t\tview: 'src'\n\t} );"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Configuring Available Languages for Text Part Language Feature",
    "codeDescription": "This code snippet shows how to configure the list of available languages for the Text Part Language feature. It uses the config.language.textPartLanguage option to specify language titles and codes.",
    "codeLanguage": "JavaScript",
    "codeTokens": 174,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-language/docs/features/language.md#2025-04-16_snippet_1",
    "pageTitle": "Text Part Language Feature for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\tlanguage: {\n\t\t\ttextPartLanguage: [\n\t\t\t\t{ title: 'Arabic', languageCode: 'ar' },\n\t\t\t\t{ title: 'French', languageCode: 'fr' },\n\t\t\t\t{ title: 'Hebrew', languageCode: 'he' },\n\t\t\t\t{ title: 'Spanish', languageCode: 'es' }\n\t\t\t]\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Installing Full Page HTML Feature in CKEditor 5",
    "codeDescription": "Basic setup code for adding the Full Page HTML feature to CKEditor 5. Imports required modules and configures the editor instance with the FullPage plugin.",
    "codeLanguage": "javascript",
    "codeTokens": 145,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-html-support/docs/features/full-page-html.md#2025-04-16_snippet_0",
    "pageTitle": "Full Page HTML Feature Documentation - CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, FullPage } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ FullPage, /* ... */ ],\n\t\thtmlSupport: {\n\t\t\tfullPage: {\n\t\t\t\t// Configuration.\n\t\t\t}\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Registering Upcast Converter for Div Structure - JavaScript",
    "codeDescription": "The snippet illustrates how to register an upcast converter using an event-based API to convert structured view elements (like nested divs) into a single model element. It checks for specific child structures and handles their conversion.",
    "codeLanguage": "JavaScript",
    "codeTokens": 538,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/conversion/upcast.md#2025-04-16_snippet_4",
    "pageTitle": "Registering Upcast Converters - CKEditor 5 Framework Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "editor.conversion.for( 'upcast' ).add( dispatcher => {\n\t// Look for every view <div> element.\n\tdispatcher.on( 'element:div', ( evt, data, conversionApi ) => {\n\t\t// Get all the necessary items from the conversion API object.\n\t\tconst {\n\t\t\tconsumable,\n\t\t\twriter,\n\t\t\tsafeInsert,\n\t\t\tconvertChildren,\n\t\t\tupdateConversionResult\n\t\t} = conversionApi;\n\n\t\t// Get view item from data object.\n\t\tconst { viewItem } = data;\n\n\t\t// Define elements consumables.\n\t\tconst wrapper = { name: true, classes: 'wrapper' };\n\t\tconst innerWrapper = { name: true, classes: 'inner-wrapper' };\n\n\t\t// Tests if the view element can be consumed.\n\t\tif ( !consumable.test( viewItem, wrapper ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if there is only one child.\n\t\tif ( viewItem.childCount !== 1 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the first child element.\n\t\tconst firstChildItem = viewItem.getChild( 0 );\n\n\t\t// Check if the first element is a <div>.\n\t\tif ( !firstChildItem.is( 'element', 'div' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Tests if the first child element can be consumed.\n\t\tif ( !consumable.test( firstChildItem, innerWrapper ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Create model element.\n\t\tconst modelElement = writer.createElement( 'myElement' );\n\n\t\t// Insert element on a current cursor location.\n\t\tif ( !safeInsert( modelElement, data.modelCursor ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Consume the main outer wrapper element.\n\t\tconsumable.consume( viewItem, wrapper );\n\t\t// Consume the inner wrapper element.\n\t\tconsumable.consume( firstChildItem, innerWrapper );\n\n\t\t// Handle children conversion inside inner wrapper element.\n\t\tconvertChildren( firstChildItem, modelElement );\n\n\t\t// Necessary function call to help setting model range and cursor\n\t\t// for some specific cases when elements being split.\n\t\tupdateConversionResult( modelElement, data );\n\t} );\n} );"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Defining upload categories for CKBox",
    "codeDescription": "This JavaScript code demonstrates how to define custom upload categories for CKBox. It uses the `config.ckbox.defaultUploadCategories` option to map file extensions to category names or IDs.",
    "codeLanguage": "JavaScript",
    "codeTokens": 198,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-ckbox/docs/features/ckbox.md#2025-04-16_snippet_3",
    "pageTitle": "CKBox File Manager Integration in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "\"ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\tckbox: {\n\t\t\tdefaultUploadCategories: {\n\t\t\t\tBitmaps: [ 'bmp' ],\n\t\t\t\tPictures: [ 'jpg', 'jpeg' ],\n\t\t\t\tScans: [ 'png', 'tiff' ],\n\t\t\t\t// The category below is referenced by its ID.\n\t\t\t\t'fdf2a647-b67f-4a6c-b692-5ba1dc1ed87b': [ 'gif' ]\n\t\t\t}\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );\""
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Table Border Commands in CKEditor 5",
    "codeDescription": "Commands for configuring table border properties including color, style, and width",
    "codeLanguage": "JavaScript",
    "codeTokens": 39,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-table/docs/features/tables-styling.md#2025-04-16_snippet_3",
    "pageTitle": "Table and Cell Styling in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "'tableBorderColor'"
      },
      {
        "language": "JavaScript",
        "code": "'tableBorderStyle'"
      },
      {
        "language": "JavaScript",
        "code": "'tableBorderWidth'"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Configuring HTML Embed with Preview Sanitization",
    "codeDescription": "Configuration example showing how to enable HTML preview with sanitization to prevent XSS attacks.",
    "codeLanguage": "javascript",
    "codeTokens": 174,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-html-embed/docs/features/html-embed.md#2025-04-16_snippet_1",
    "pageTitle": "HTML Embed Feature Documentation for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\thtmlEmbed: {\n\t\t\tshowPreviews: true,\n\t\t\tsanitizeHtml: ( inputHtml ) => {\n\t\t\t\t// Strip unsafe elements and attributes, for example:\n\t\t\t\t// the `<script>` elements and `on*` attributes.\n\t\t\t\tconst outputHtml = sanitize( inputHtml );\n\n\t\t\t\treturn {\n\t\t\t\t\thtml: outputHtml,\n\t\t\t\t\t// true or false depending on whether the sanitizer stripped anything.\n\t\t\t\t\thasChanged: true\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Updating Button Tooltip with Keyboard Shortcut",
    "codeDescription": "Enhancement of button tooltip to display the associated keyboard shortcut information.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/crash-course/keystrokes.md#2025-04-16_snippet_3",
    "pageTitle": "CKEditor 5 Keyboard Shortcuts Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "button.set( {\n\tlabel: t( 'Highlight' ),\n\twithText: true,\n\ttooltip: true,\n\tisToggleable: true,\n\tkeystroke: 'Ctrl+Alt+H' // Add this attribute.\n} );"
      }
    ],
    "relevance": 0.946
  },
  {
    "codeTitle": "Implementing External Data Widget Command in JavaScript",
    "codeDescription": "Creates a command for inserting the external data widget into the editor. It defines the execute and refresh methods to handle widget insertion and enable/disable the command based on schema rules.",
    "codeLanguage": "javascript",
    "codeTokens": 305,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/data-from-external-source.md#2025-04-16_snippet_5",
    "pageTitle": "External Data Widget Implementation in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { Command } from 'ckeditor5';\n\n// example external data source url\nconst RESOURCE_URL = 'https://api2.binance.com/api/v3/ticker/24hr?symbol=BTCUSDT';\n\nclass ExternalDataWidgetCommand extends Command {\n\texecute() {\n\t\tconst editor = this.editor;\n\t\tconst selection = editor.model.document.selection;\n\n\t\teditor.model.change( writer => {\n\t\t\t// Create an <externalElement> element with the \"data-resource-url\" attribute\n\t\t\t// (and all the selection attributes)...\n\t\t\tconst externalWidget = writer.createElement(\n\t\t\t\t'externalElement', {\n\t\t\t\t\t...Object.fromEntries( selection.getAttributes() ),\n\t\t\t\t\t'data-resource-url': RESOURCE_URL\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// ... insert it into the document and put the selection on the inserted element.\n\t\t\teditor.model.insertObject( externalWidget, null, null, {\n\t\t\t\tsetSelection: 'on'\n\t\t\t} );\n\t\t} );\n\t}\n\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\n\t\tconst isAllowed = model.schema.checkChild( selection.focus.parent, 'externalElement' );\n\n\t\tthis.isEnabled = isAllowed;\n\t}\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Defining Main SimpleBox Plugin",
    "codeDescription": "Creates the main SimpleBox plugin that requires and loads the editing and UI components.",
    "codeLanguage": "JavaScript",
    "codeTokens": 94,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/implementing-a-block-widget.md#2025-04-16_snippet_1",
    "pageTitle": "Implementing a Block Widget in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import SimpleBoxEditing from './simpleboxediting';\nimport SimpleBoxUI from './simpleboxui';\nimport { Plugin } from 'ckeditor5';\n\nexport default class SimpleBox extends Plugin {\n\tstatic get requires() {\n\t\treturn [ SimpleBoxEditing, SimpleBoxUI ];\n\t}\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using Find and Replace API Commands",
    "codeDescription": "Examples of programmatically executing find and replace operations using the editor's command API.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-find-and-replace/docs/features/find-and-replace.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 Find and Replace Feature Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Find all occurrences of a given text.\neditor.execute( 'find', 'steam' );"
      },
      {
        "language": "javascript",
        "code": "// Move the search highlight to the next match.\neditor.execute( 'findNext' );"
      },
      {
        "language": "javascript",
        "code": "editor.execute( 'replaceAll', 'diesel', 'steam' );"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Loading CKEditor from CDN with TypeScript Support",
    "codeDescription": "Example of loading CKEditor 5 from CDN using the official injection script with TypeScript support and optional premium features.",
    "codeLanguage": "typescript",
    "codeTokens": 139,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/typescript-support.md#2025-04-16_snippet_1",
    "pageTitle": "TypeScript Support in CKEditor 5",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { loadCKEditorCloud } from '@ckeditor/ckeditor5-integrations-common';\n\nconst { CKEditor, CKEditorPremiumFeatures } = await loadCKEditorCloud({\n\tversion: '{@var ckeditor5-version}',\n\n\t// Optional configuration:\n\tpremium: true,\n\ttranslations: ['en', 'de'],\n});\n\n// Now you can use CKEditor and CKEditorPremiumFeatures.\nconst { CaseChange } = CKEditorPremiumFeatures;\nconst { Alignment } = CKEditor;"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Customizing Toolbar Tooltips",
    "codeDescription": "Shows how to customize tooltip text for toolbar buttons to improve accessibility and user experience.",
    "codeLanguage": "javascript",
    "codeTokens": 79,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/toolbar.md#2025-04-16_snippet_4",
    "pageTitle": "CKEditor 5 Toolbar Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "toolbar: [\n\t{\n\t\tlabel: 'Others',\n\t\ttooltip: 'Basic formatting features',\n\t\titems: [ 'bold', 'italic' ]\n\t},\n\t'|',\n\t'undo', 'redo'\n]"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing Editor in Next.js Page",
    "codeDescription": "Example of using the client-side editor component in a Next.js page component.",
    "codeLanguage": "jsx",
    "codeTokens": 69,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/next-js.md#2025-04-16_snippet_3",
    "pageTitle": "CKEditor 5 Integration with Next.js",
    "codeList": [
      {
        "language": "jsx",
        "code": "import ClientSideCustomEditor from '@/components/client-side-custom-editor';\n\nfunction Home() {\n  return (\n    <ClientSideCustomEditor />\n  );\n}\n\nexport default Home;"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Initializing CKEditor 5 with General HTML Support",
    "codeDescription": "This snippet demonstrates how to import and configure the GeneralHtmlSupport plugin when initializing CKEditor 5. It includes the basic setup for enabling HTML support.",
    "codeLanguage": "javascript",
    "codeTokens": 136,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-html-support/docs/features/general-html-support.md#2025-04-16_snippet_0",
    "pageTitle": "General HTML Support in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, GeneralHtmlSupport } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ GeneralHtmlSupport, /* ... */ ],\n\t\thtmlSupport: {\n\t\t\t// Configuration.\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Enabling Custom Upload Adapter in CKEditor 5 Configuration",
    "codeDescription": "This code snippet shows how to enable the custom upload adapter in the CKEditor 5 configuration by defining the FileRepository.createUploadAdapter() factory method.",
    "codeLanguage": "JavaScript",
    "codeTokens": 78,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-image/docs/framework/deep-dive/upload-adapter.md#2025-04-16_snippet_1",
    "pageTitle": "Custom Image Upload Adapter for CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "editor.plugins.get( 'FileRepository' ).createUploadAdapter = ( loader ) => {\n\treturn new MyUploadAdapter( loader );\n};"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Creating Simple Box Insert Command in CKEditor 5",
    "codeDescription": "Defines a command to insert a 'simpleBox' element into the CKEditor 5 model.  It extends the `Command` class and implements the `execute` method to insert the element using `model.insertObject`. It also implements the `refresh` method to determine whether the command is enabled based on the schema's allowed parent.",
    "codeLanguage": "javascript",
    "codeTokens": 353,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/implementing-a-block-widget.md#2025-04-16_snippet_8",
    "pageTitle": "Implementing a Block Widget in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "// simplebox/insertsimpleboxcommand.js\n\nimport { Command } from 'ckeditor5';\n\nexport default class InsertSimpleBoxCommand extends Command {\n\texecute() {\n\t\tthis.editor.model.change( writer => {\n\t\t\t// Insert <simpleBox>*</simpleBox> at the current selection position\n\t\t\t// in a way that will result in creating a valid model structure.\n\t\t\tthis.editor.model.insertObject( createSimpleBox( writer ) );\n\t\t} );\n\t}\n\n\trefresh() {\n\t\tconst model = this.editor.model;\n\t\tconst selection = model.document.selection;\n\t\tconst allowedIn = model.schema.findAllowedParent( selection.getFirstPosition(), 'simpleBox' );\n\n\t\tthis.isEnabled = allowedIn !== null;\n\t}\n}\n\nfunction createSimpleBox( writer ) {\n\tconst simpleBox = writer.createElement( 'simpleBox' );\n\tconst simpleBoxTitle = writer.createElement( 'simpleBoxTitle' );\n\tconst simpleBoxDescription = writer.createElement( 'simpleBoxDescription' );\n\n\twriter.append( simpleBoxTitle, simpleBox );\n\twriter.append( simpleBoxDescription, simpleBox );\n\n\t// There must be at least one paragraph for the description to be editable.\n\t// See https://github.com/ckeditor/ckeditor5/issues/1464.\n\twriter.appendElement( 'paragraph', simpleBoxDescription );\n\n\treturn simpleBox;\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Configuring Markdown Source Editing for CKEditor 5 (JavaScript)",
    "codeDescription": "This code snippet shows how to set up Markdown source editing in CKEditor 5. It imports the SourceEditing and Markdown plugins and adds them to the editor configuration.",
    "codeLanguage": "JavaScript",
    "codeTokens": 141,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-source-editing/docs/features/source-editing.md#2025-04-16_snippet_1",
    "pageTitle": "Source Code Editing in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, SourceEditing, Markdown } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ SourceEditing, Markdown, /* ... */ ],\n\t\ttoolbar: [ 'sourceEditing', /* ... */ ]\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Disallowing Specific Structures in CKEditor 5 Schema",
    "codeDescription": "This code snippet shows how to register a custom schema element 'myElement' that disallows certain child elements (like inline images) from being inserted. This is useful for maintaining control over the types of content allowed within specific parent elements.",
    "codeLanguage": "javascript",
    "codeTokens": 95,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/schema.md#2025-04-16_snippet_2",
    "pageTitle": "Registering Schema Elements in CKEditor 5 Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "schema.register( 'myElement', {\n\tinheritAllFrom: '$block',\n\tdisallowChildren: 'imageInline'\n} );"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Initializing CKEditor 5 with Plugins",
    "codeDescription": "This code snippet shows how to import CKEditor 5 plugins and initialize the editor with custom configuration, including both open source and premium features.",
    "codeLanguage": "html",
    "codeTokens": 219,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/quick-start.md#2025-04-16_snippet_9",
    "pageTitle": "CKEditor 5 CDN Installation Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<script type=\"module\">\n\timport {\n\t\tClassicEditor,\n\t\tEssentials,\n\t\tBold,\n\t\tItalic,\n\t\tFont,\n\t\tParagraph\n\t} from 'ckeditor5';\n\timport { FormatPainter } from 'ckeditor5-premium-features';\n\n\tClassicEditor\n\t\t.create( document.querySelector( '#editor' ), {\n\t\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\t\tplugins: [ Essentials, Bold, Italic, Font, Paragraph, FormatPainter ],\n\t\t\ttoolbar: [\n\t\t\t\t'undo', 'redo', '|', 'bold', 'italic', '|',\n\t\t\t\t'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', '|', 'formatPainter'\n\t\t\t]\n\t\t} )\n\t\t.then( /* ... */ )\n\t\t.catch( /* ... */ );\n</script>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Local CKEditor Component Registration",
    "codeDescription": "Example showing how to use CKEditor component locally within a specific Vue component instead of globally",
    "codeLanguage": "html",
    "codeTokens": 229,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/vuejs-v2.md#2025-04-16_snippet_3",
    "pageTitle": "Vue.js 2.x CKEditor 5 Integration Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<template>\n\t<ckeditor :editor=\"editor\" v-model=\"editorData\" :config=\"editorConfig\" />\n</template>\n\n<script>\nimport CKEditor from '@ckeditor/ckeditor5-vue2';\nimport { Bold, ClassicEditor, Essentials, Italic, Paragraph } from 'ckeditor5';\n\nimport 'ckeditor5/ckeditor5.css';\n\nexport default {\n\tname: 'app',\n\tcomponents: {\n\t\tckeditor: CKEditor.component\n\t},\n\tdata() {\n\t\treturn {\n\t\t\teditor: ClassicEditor,\n\t\t\teditorData: '<p>Hello from CKEditor 5 in Vue 2!</p>',\n\t\t\teditorConfig: {\n\t\t\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\t\t\tplugins: [ Bold, Essentials, Italic, Paragraph ],\n\t\t\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic' ]\n\t\t\t}\n\t\t};\n\t}\n};\n</script>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Executing Block Quote Command Programmatically",
    "codeDescription": "This snippet shows how to programmatically apply a block quote to selected content using the editor's execute method with the 'blockQuote' command.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-block-quote/docs/features/block-quote.md#2025-04-16_snippet_2",
    "pageTitle": "Block Quote Feature in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Applies block quote to the selected content.\neditor.execute( 'blockQuote' );"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "CKEditor JavaScript Configuration",
    "codeDescription": "JavaScript implementation of CKEditor configuration with plugins and toolbar setup.",
    "codeLanguage": "javascript",
    "codeTokens": 278,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/advanced/integrating-from-source-vite.md#2025-04-16_snippet_4",
    "pageTitle": "CKEditor 5 Source Integration with Vite Setup Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor as ClassicEditorBase } from '@ckeditor/ckeditor5-editor-classic';\nimport { Essentials } from '@ckeditor/ckeditor5-essentials';\nimport { Autoformat } from '@ckeditor/ckeditor5-autoformat';\nimport { Bold, Italic } from '@ckeditor/ckeditor5-basic-styles';\nimport { BlockQuote } from '@ckeditor/ckeditor5-block-quote';\nimport { Heading } from '@ckeditor/ckeditor5-heading';\nimport { Link } from '@ckeditor/ckeditor5-link';\nimport { List } from '@ckeditor/ckeditor5-list';\nimport { Paragraph } from '@ckeditor/ckeditor5-paragraph';\n\nexport default class ClassicEditor extends ClassicEditorBase {}\n\nClassicEditor.builtinPlugins = [\n    Essentials,\n    Autoformat,\n    Bold,\n    Italic,\n    BlockQuote,\n    Heading,\n    Link,\n    List,\n    Paragraph\n];\n\nClassicEditor.defaultConfig = {\n    toolbar: {\n        items: [\n            'heading',\n            '|',\n            'bold',\n            'italic',\n            'link',\n            'bulletedList',\n            'numberedList',\n            'blockQuote',\n            'undo',\n            'redo'\n        ]\n    },\n    language: 'en'\n};"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Installing Basic Text Styles in CKEditor 5",
    "codeDescription": "Code example showing how to install and configure basic text styles in CKEditor 5. It demonstrates importing the necessary plugins (Bold, Code, Italic, Strikethrough, Subscript, Superscript, Underline) and configuring the toolbar to include these formatting options.",
    "codeLanguage": "javascript",
    "codeTokens": 222,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-basic-styles/docs/features/basic-styles.md#2025-04-16_snippet_0",
    "pageTitle": "Basic Text Styles in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Bold, Code, Italic, Strikethrough, Subscript, Superscript, Underline } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Bold, Code, Italic, Strikethrough, Subscript, Superscript, Underline ],\n\t\ttoolbar: {\n\t\t\titems: [ 'bold', 'italic', 'underline', 'strikethrough', 'code', 'subscript', 'superscript'  ]\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Importing Core Components for CKEditor 5 v42.0.0+",
    "codeDescription": "Example of importing core plugin components using the modern ckeditor5 package approach for version 42.0.0 and later.",
    "codeLanguage": "javascript",
    "codeTokens": 57,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/supporting-multiple-versions.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Plugin Version Compatibility Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { Plugin, ButtonView } from 'ckeditor5';"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Pattern Matching View Attribute Conversion in CKEditor 5",
    "codeDescription": "Shows how to use regular expressions to match and convert view attributes based on patterns. This example converts data-style attributes that contain no whitespace characters.",
    "codeLanguage": "javascript",
    "codeTokens": 98,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/conversion/helpers/upcast.md#2025-04-16_snippet_13",
    "pageTitle": "CKEditor 5 Framework: Upcast Conversion Helpers",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.conversion\n\t.for( 'upcast' )\n\t.attributeToAttribute( {\n\t\tview: {\n\t\t\tkey: 'data-style',\n\t\t\tvalue: /\\S+/\n\t\t},\n\t\tmodel: 'styled'\n\t} );"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Laravel Blade Template with CKEditor 5 Integration",
    "codeDescription": "A complete HTML template for Laravel's welcome.blade.php that includes CKEditor 5. It sets up the necessary imports, defines a container for the editor, and initializes CKEditor with a basic configuration. The template also includes proper import map configuration and styling.",
    "codeLanguage": "html",
    "codeTokens": 465,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/laravel.md#2025-04-16_snippet_1",
    "pageTitle": "Integrating CKEditor 5 with Laravel using ZIP Archive",
    "codeList": [
      {
        "language": "html",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<title>CKEditor 5 - Quick start ZIP</title>\n\t\t<link rel=\"stylesheet\" href=\"../../assets/vendor/ckeditor5.css\">\n\t\t<style>\n\t\t\t.main-container {\n\t\t\t\twidth: 795px;\n\t\t\t\tmargin-left: auto;\n\t\t\t\tmargin-right: auto;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"main-container\">\n\t\t\t<div id=\"editor\">\n\t\t\t\t<p>Hello from CKEditor 5!</p>\n\t\t\t</div>\n\t\t</div>\n\t\t<script type=\"importmap\">\n\t\t\t{\n\t\t\t\t\"imports\": {\n\t\t\t\t\t\"ckeditor5\": \"../../assets/vendor/ckeditor5.js\",\n\t\t\t\t\t\"ckeditor5/\": \"../../assets/vendor/\"\n\t\t\t\t}\n\t\t\t}\n\t\t</script>\n\t\t<script type=\"module\">\n\t\t\timport {\n\t\t\t\tClassicEditor,\n\t\t\t\tEssentials,\n\t\t\t\tParagraph,\n\t\t\t\tBold,\n\t\t\t\tItalic,\n\t\t\t\tFont\n\t\t\t} from 'ckeditor5';\n\n\t\t\tClassicEditor\n\t\t\t\t.create( document.querySelector( '#editor' ), {\n\t\t\t\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\t\t\t\tplugins: [ Essentials, Paragraph, Bold, Italic, Font ],\n\t\t\t\t\ttoolbar: [\n\t\t\t\t\t\t'undo', 'redo', '|', 'bold', 'italic', '|',\n\t\t\t\t\t\t'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor'\n\t\t\t\t\t]\n\t\t\t\t} )\n\t\t\t\t.then( editor => {\n\t\t\t\t\twindow.editor = editor;\n\t\t\t\t} )\n\t\t\t\t.catch( error => {\n\t\t\t\t\tconsole.error( error );\n\t\t\t\t} );\n\t\t</script>\n\t</body>\n</html>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Configuring Contextual Image Toolbar in CKEditor 5",
    "codeDescription": "Configuration for the contextual image toolbar including style options, caption toggle, text alternative, and image linking features with proper separators.",
    "codeLanguage": "javascript",
    "codeTokens": 174,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-image/docs/features/images-installation.md#2025-04-16_snippet_3",
    "pageTitle": "CKEditor 5 Image Features Installation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\timage: {\n\t\t\ttoolbar: [\n\t\t\t\t'imageStyle:block',\n\t\t\t\t'imageStyle:side',\n\t\t\t\t'|',\n\t\t\t\t'toggleImageCaption',\n\t\t\t\t'imageTextAlternative',\n\t\t\t\t'|',\n\t\t\t\t'linkImage'\n\t\t\t],\n\t\t\tinsert: {\n\t\t\t\t// If this setting is omitted, the editor defaults to 'block'.\n\t\t\t\t// See explanation below.\n\t\t\t\ttype: 'auto'\n\t\t\t}\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Hiding Type Around Widget Buttons using CSS",
    "codeDescription": "This CSS snippet hides the buttons that allow users to insert paragraphs around widgets in CKEditor 5, enhancing visual clarity for specific integrations.",
    "codeLanguage": "css",
    "codeTokens": 72,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-widget/docs/framework/deep-dive/widget-internals.md#2025-04-16_snippet_0",
    "pageTitle": "Disabling Widgets in CKEditor 5",
    "codeList": [
      {
        "language": "css",
        "code": ".ck.ck-editor__editable .ck-widget .ck-widget__type-around__button {\n\tdisplay: none;\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing Inline Editor Example with CKEditor 5",
    "codeDescription": "HTML snippet for implementing CKEditor 5's inline editor. The snippet reference demonstrates the editor's inline editing capabilities with a floating toolbar.",
    "codeLanguage": "html",
    "codeTokens": 53,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/examples/builds/inline-editor.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Inline Editor Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "{@snippet examples/inline-editor}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Defining Social Links Plugin - JavaScript",
    "codeDescription": "Creates the SocialLinksPlugin to register a provider for social links in the CKEditor 5 interface. It includes methods to return a list of social media links and customize link previews when activated. Required dependencies include 'Link' and 'LinkUI' plugins. The returned objects contain 'id', 'href', 'label', and an 'icon', enhancing user interaction with social links.",
    "codeLanguage": "JavaScript",
    "codeTokens": 300,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-link/docs/features/link.md#2025-04-16_snippet_12",
    "pageTitle": "Link Feature in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "class SocialLinksPlugin extends Plugin {\n\tstatic get requires() {\n\t\treturn [ Link ];\n\t}\n\n\tasync init() {\n\t\tconst linkUI = this.editor.plugins.get( LinkUI );\n\n\t\tlinkUI.registerLinksListProvider( {\n\t\t\tlabel: 'Social links',\n\t\t\tgetListItems: () => [\n\t\t\t\t{\n\t\t\t\t\tid: 'facebook',\n\t\t\t\t\thref: 'https://facebook.com',\n\t\t\t\t\tlabel: 'Facebook',\n\t\t\t\t\ticon: linkIcon\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'twitter',\n\t\t\t\t\thref: 'https://twitter.com',\n\t\t\t\t\tlabel: 'Twitter',\n\t\t\t\t\ticon: linkIcon\n\t\t\t\t}\n\t\t\t],\n\n\t\t\t// Optionally: You can customize your link preview by custom implementation of link getter.\n\t\t\tgetItem: href => {\n\t\t\t\treturn {\n\t\t\t\t\thref,\n\t\t\t\t\ticon: linkIcon,\n\t\t\t\t\tlabel: 'My custom label in link preview',\n\t\t\t\t\ttooltip: 'My custom tooltip in link preview'\n\t\t\t\t};\n\t\t\t}\n\t\t} );\n\t}\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Installing Highlight Feature in CKEditor 5",
    "codeDescription": "Basic setup code for adding the highlight feature to CKEditor 5 with plugin and toolbar configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 133,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-highlight/docs/features/highlight.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Highlight Feature Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Highlight } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Highlight, /* ... */ ],\n\t\ttoolbar: [ 'highlight', /* ... */ ]\n\t\thighlight: {\n\t\t\t// Configuration.\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Registering Custom Highlight Plugin",
    "codeDescription": "Shows how to import and register a custom plugin in the editor's configuration. Demonstrates plugin integration with existing editor setup.",
    "codeLanguage": "javascript",
    "codeTokens": 103,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/crash-course/plugins.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 Plugin Development Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { Highlight } from './plugin';\n\nconst editor = await ClassicEditor.create( element, {\n\tlicenseKey: 'GPL', // Or '<YOUR_LICENSE_KEY>'.\n\tplugins: [\n\t\t// Other plugins are omitted for readability - do not remove them.\n\t\tHighlight\n\t]\n} );"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing Decoupled Editor",
    "codeDescription": "Example of implementing a decoupled editor with custom toolbar placement in HTML structure.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/toolbar.md#2025-04-16_snippet_6",
    "pageTitle": "CKEditor 5 Toolbar Configuration Guide",
    "codeList": [
      {
        "language": "html",
        "code": "\t<div id=\"toolbarContainer\"></div>\n\t<div id=\"editor\"><p>Document content.</p></div>"
      },
      {
        "language": "javascript",
        "code": "DecoupledEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\ttoolbar: [ 'undo', 'redo', 'bold', 'italic', 'numberedList', 'bulletedList' ],\n\t} )\n\t.then( editor => {\n\t\tdocument.querySelector( '#toolbarContainer' ).appendChild( editor.ui.view.toolbar.element );\n\t} );"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Modifying View with DowncastWriter in CKEditor 5",
    "codeDescription": "Example showing how to properly modify the view using the change() block and DowncastWriter. This demonstrates inserting text at a specific position in the view structure.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/editing-engine.md#2025-04-16_snippet_8",
    "pageTitle": "Editing Engine Architecture in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.editing.view.change( writer => {\n\twriter.insert( position, writer.createText( 'foo' ) );\n} );"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Using ImageUtils Plugin for Image Identification Since v29.0.0",
    "codeDescription": "This code shows how to check if a selected element is an image in CKEditor 5 v29.0.0 and later. Instead of importing a utility function, it uses the ImageUtils plugin instance.",
    "codeLanguage": "javascript",
    "codeTokens": 116,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/updating/update-to-29.md#2025-04-16_snippet_6",
    "pageTitle": "Updating CKEditor 5 to version 29.x",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Since v29.0.0.\n// ...\nconst imageUtils = this.editor.plugins.get( 'ImageUtils' );\nconst selectedElement = editor.model.document.selection.getSelectedElement();\n\nif ( imageUtils.isImage( selectedElement ) ) {\n\t// ...\n}"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Element to Structure Conversion for a Model Element - JavaScript",
    "codeDescription": "This snippet converts a 'horizontalLine' model to a complex structure that includes multiple view elements, demonstrating how to create a wrapper around a view element.",
    "codeLanguage": "JavaScript",
    "codeTokens": 127,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/conversion/helpers/downcast.md#2025-04-16_snippet_5",
    "pageTitle": "Downcasting Elements in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.conversion\n\t.for( 'downcast' )\n\t.elementToStructure( {\n\t\tmodel: 'horizontalLine',\n\t\tview: ( modelElement, { writer } ) => {\n\t\t\treturn writer.createContainerElement( 'div', { class: 'horizontal-line' }, [\n\t\t\t\twriter.createEmptyElement( 'hr' )\n\t\t\t] );\n\t\t}\n\t} );"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Initializing CKEditor 5 Instance (TypeScript)",
    "codeDescription": "This TypeScript code shows how to import the configured ClassicEditor and create an instance of the editor. It attaches the editor to a DOM element and handles initialization success and error cases, with TypeScript-specific type assertions.",
    "codeLanguage": "typescript",
    "codeTokens": 150,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/advanced/integrating-from-source-webpack.md#2025-04-16_snippet_10",
    "pageTitle": "Integrating CKEditor 5 from Source Using Webpack",
    "codeList": [
      {
        "language": "typescript",
        "code": "// main.ts\n\nimport ClassicEditor from './ckeditor';\n\nClassicEditor\n\t// Note that you do not have to specify the plugin and toolbar configuration — using defaults from the build.\n\t.create( document.querySelector( '#app' ) as HTMLElement )\n\t.then( editor => {\n\t\tconsole.log( 'Editor was initialized', editor );\n\t} )\n\t.catch( error => {\n\t\tconsole.error( error.stack );\n\t} );"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Initializing CKEditor 5 with Restricted Editing Mode",
    "codeDescription": "Code for setting up CKEditor 5 with the RestrictedEditingMode plugin, which allows users to only edit regions previously marked as editable. This mode is used for filling in template documents.",
    "codeLanguage": "javascript",
    "codeTokens": 144,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-restricted-editing/docs/features/restricted-editing.md#2025-04-16_snippet_1",
    "pageTitle": "Restricted Editing Feature Documentation for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, RestrictedEditingMode } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ RestrictedEditingMode, /* ... */ ],\n\t\ttoolbar: [ 'restrictedEditing', /* ... */ ]\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Creating Classic Editor Instance in JavaScript",
    "codeDescription": "JavaScript code to create a Classic Editor instance. It uses the ClassicEditor.create() method to initialize the editor, replacing the specified HTML element.",
    "codeLanguage": "javascript",
    "codeTokens": 141,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/editor-lifecycle.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 Editor Lifecycle Management",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Essentials } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Essentials, /* ... */ ],\n\t\ttoolbar: [ /* .. */ ],\n\t} )\n\t.then( editor => {\n\t\tconsole.log( editor );\n\t} )\n\t.catch( error => {\n\t\tconsole.error( error );\n\t} );"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Initializing CKEditor 5 with Minimap and Toolbar Placement",
    "codeDescription": "This JavaScript code initializes the DecoupledEditor with the minimap feature and places the toolbar in the designated container. It demonstrates the complete setup process including container selection and toolbar attachment.",
    "codeLanguage": "javascript",
    "codeTokens": 140,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-minimap/docs/features/minimap.md#2025-04-16_snippet_4",
    "pageTitle": "Content Minimap Feature Documentation for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "DecoupledEditor\n\t.create( document.querySelector( '#editor-content' ), {\n\t\t// ... Other configuration options ...\n\t\tminimap: {\n\t\t\tcontainer: document.querySelector( '.minimap-container' ),\n\t\t}\n\t} )\n\t.then( editor => {\n\t\tconst toolbarContainer = document.querySelector( '#toolbar-container' );\n\n\t\ttoolbarContainer.appendChild( editor.ui.view.toolbar.element );\n\t} );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Creating and Adding a Custom Command in CKEditor 5",
    "codeDescription": "This snippet demonstrates how to create a custom command and add it to the editor's command collection. The command logs a message to the console when executed.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/core-editor-architecture.md#2025-04-16_snippet_1",
    "pageTitle": "Core Editor Architecture in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "class MyCommand extends Command {\n\texecute( message ) {\n\t\tconsole.log( message );\n\t}\n}\n\nclass MyPlugin extends Plugin {\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\teditor.commands.add( 'myCommand', new MyCommand( editor ) );\n\t}\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Initializing CKEditor 5 with Text Part Language Feature",
    "codeDescription": "This snippet demonstrates how to initialize CKEditor 5 with the Text Part Language feature. It imports necessary modules, adds the feature to the plugin list, and includes it in the toolbar configuration.",
    "codeLanguage": "JavaScript",
    "codeTokens": 159,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-language/docs/features/language.md#2025-04-16_snippet_0",
    "pageTitle": "Text Part Language Feature for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, TextPartLanguage } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ TextPartLanguage, /* ... */ ],\n\t\ttoolbar: [ 'textPartLanguage', /* ... */ ]\n\t\tlanguage: {\n\t\t\t// Configuration.\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Updating CKEditor 5 Inline Editor Initialization",
    "codeDescription": "Code snippet demonstrating how to update the initialization of CKEditor 5 Inline Editor from predefined build to source package. It includes importing necessary modules and configuring plugins.",
    "codeLanguage": "javascript",
    "codeTokens": 501,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/updating/nim-migration/predefined-builds.md#2025-04-16_snippet_4",
    "pageTitle": "Migrating from CKEditor 5 Predefined Builds to New Installation Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "import {\n\tInlineEditor,\n\tEssentials,\n\tCKFinderUploadAdapter,\n\tAutoformat,\n\tBold,\n\tItalic,\n\tBlockQuote,\n\tCKBox,\n\tCKFinder,\n\tEasyImage,\n\tHeading,\n\tImage,\n\tImageCaption,\n\tImageStyle,\n\tImageToolbar,\n\tImageUpload,\n\tPictureEditing,\n\tIndent,\n\tLink,\n\tList,\n\tMediaEmbed,\n\tParagraph,\n\tPasteFromOffice,\n\tTable,\n\tTableToolbar,\n\tTextTransformation,\n\tCloudServices\n} from 'ckeditor5';\n\nimport 'ckeditor5/ckeditor5.css';\n\nclass Editor extends InlineEditor {\n\tstatic builtinPlugins = [\n\t\tEssentials,\n\t\tCKFinderUploadAdapter,\n\t\tAutoformat,\n\t\tBold,\n\t\tItalic,\n\t\tBlockQuote,\n\t\tCKBox,\n\t\tCKFinder,\n\t\tCloudServices,\n\t\tEasyImage,\n\t\tHeading,\n\t\tImage,\n\t\tImageCaption,\n\t\tImageStyle,\n\t\tImageToolbar,\n\t\tImageUpload,\n\t\tIndent,\n\t\tLink,\n\t\tList,\n\t\tMediaEmbed,\n\t\tParagraph,\n\t\tPasteFromOffice,\n\t\tPictureEditing,\n\t\tTable,\n\t\tTableToolbar,\n\t\tTextTransformation\n\t];\n\n\tstatic defaultConfig = {\n\t\ttoolbar: {\n\t\t\titems: [\n\t\t\t\t'undo', 'redo',\n\t\t\t\t'|', 'heading',\n\t\t\t\t'|', 'bold', 'italic',\n\t\t\t\t'|', 'link', 'uploadImage', 'insertTable', 'blockQuote', 'mediaEmbed',\n\t\t\t\t'|', 'bulletedList', 'numberedList', 'outdent', 'indent'\n\t\t\t]\n\t\t},\n\t\timage: {\n\t\t\ttoolbar: [\n\t\t\t\t'imageStyle:inline',\n\t\t\t\t'imageStyle:block',\n\t\t\t\t'imageStyle:side',\n\t\t\t\t'|',\n\t\t\t\t'toggleImageCaption',\n\t\t\t\t'imageTextAlternative'\n\t\t\t]\n\t\t},\n\t\ttable: {\n\t\t\tcontentToolbar: [\n\t\t\t\t'tableColumn',\n\t\t\t\t'tableRow',\n\t\t\t\t'mergeTableCells'\n\t\t\t]\n\t\t},\n\t\tlanguage: 'en'\n\t};\n}\n\nEditor\n\t.create( /* Configuration */ )\n\t.catch( error => console.error( error ) );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Stopping Events in Handlers - JavaScript",
    "codeDescription": "This snippet demonstrates the use of the EventInfo instance to stop the processing of events from within a listener handler, ensuring that other listeners are not called if an event is stopped.",
    "codeLanguage": "javascript",
    "codeTokens": 130,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/event-system.md#2025-04-16_snippet_5",
    "pageTitle": "Implementing Event System in CKEditor 5 Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "emitter.on( 'eventName', ( eventInfo, data ) => {\n\tconsole.log( 'foo' );\n\teventInfo.stop();\n} );\n\nemitter.on( 'eventName', ( eventInfo, data ) => {\n\tconsole.log( 'bar' ); // This won't be called.\n} );\n\nemitter.fire( 'eventName' ); // Logs \"foo\" only."
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Migrating CKEditor 5 Initialization from npm to CDN",
    "codeDescription": "This snippet demonstrates how to migrate CKEditor 5 initialization code from npm-based imports to using the window.CKEDITOR global variable provided by the CDN.",
    "codeLanguage": "javascript",
    "codeTokens": 135,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/updating/migration-to-cdn/vanilla-js.md#2025-04-16_snippet_1",
    "pageTitle": "Migrating CKEditor 5 from npm to CDN in Vanilla JavaScript",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { ClassicEditor } = window.CKEDITOR;\nconst { AIAdapter, /* ... other imports */ } = window.CKEDITOR_PREMIUM_FEATURES;\n\nClassicEditor\n\t.create( document.querySelector('#editor'), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\t// ... other configuration\n\t} )\n\t.catch( error => {\n\t\tconsole.error(error);\n\t} );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Overriding Media Providers in CKEditor 5 - JavaScript",
    "codeDescription": "This snippet demonstrates how to override the default media providers in CKEditor 5 by configuring the media embed options. The example includes a URL regex for matching media and a basic HTML structure for rendering previews.",
    "codeLanguage": "javascript",
    "codeTokens": 182,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-media-embed/docs/features/media-embed.md#2025-04-16_snippet_6",
    "pageTitle": "Media Embed Feature in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\tmediaEmbed: {\n\t\t\tproviders: [\n\t\t\t\t{\n\t\t\t\t\t// A URL regular expression or an array of URL regular expressions:\n\t\t\t\t\turl: /^example\\.com\\/media\\/(\\w+)/,\n\n\t\t\t\t\t// To be defined only if the media are previewable:\n\t\t\t\t\thtml: match => '...'\n\t\t\t\t},\n\t\t\t\t// More providers.\n\t\t\t\t// ...\n\t\t\t]\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Implementing NgModel Integration with CKEditor",
    "codeDescription": "Demonstrates how to implement two-way data binding using ngModel with CKEditor in Angular.",
    "codeLanguage": "typescript",
    "codeTokens": 90,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/angular.md#2025-04-16_snippet_4",
    "pageTitle": "Angular Rich Text Editor Integration Guide with CDN",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component( {\n\t// ...\n} )\nexport class MyComponent {\n\tpublic model;\n\n\tprivate _setupEditor( cloud ) {\n\t\tthis.model = {\n\t\t\teditorData: '<p>Hello, world!</p>'\n\t\t};\n\t}\n\t// ...\n}"
      },
      {
        "language": "html",
        "code": "<ckeditor [(ngModel)]=\"model.editorData\" [editor]=\"Editor\"></ckeditor>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Custom Type Declarations for JavaScript Modules",
    "codeDescription": "Example of creating custom type declarations for JavaScript modules in TypeScript using declaration files.",
    "codeLanguage": "typescript",
    "codeTokens": 66,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/typescript-support.md#2025-04-16_snippet_4",
    "pageTitle": "TypeScript Support in CKEditor 5",
    "codeList": [
      {
        "language": "typescript",
        "code": "declare module 'path' {\n  export function normalize( p: string ): string;\n  export function join( ...paths: any[] ): string;\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Installing CKEditor 5 with npm",
    "codeDescription": "This command installs the complete CKEditor 5 package using npm. It's a prerequisite for using the undo feature. This will download and add CKEditor 5 and its dependencies to your project's node_modules directory.",
    "codeLanguage": "bash",
    "codeTokens": 67,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-undo/README.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Undo Feature Documentation",
    "codeList": [
      {
        "language": "bash",
        "code": "npm install ckeditor5"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Initializing Decoupled Editor in HTML",
    "codeDescription": "HTML markup for initializing a Decoupled Editor instance. It defines separate containers for the toolbar and editable area.",
    "codeLanguage": "html",
    "codeTokens": 88,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/editor-lifecycle.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 Editor Lifecycle Management",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- The toolbar will be rendered in this container. -->\n<div id=\"toolbar-container\"></div>\n\n<!-- This container will become the editable. -->\n<div id=\"editor\">\n\t<p>This is the initial editor content.</p>\n</div>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Registering Custom HTML Elements in CKEditor 5",
    "codeDescription": "List of supported custom HTML elements that can be added to the CKEditor 5 instance. Includes both inline and block-level elements, as well as object variants.",
    "codeLanguage": "html",
    "codeTokens": 63,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-html-support/tests/manual/customelements.md#2025-04-16_snippet_0",
    "pageTitle": "Custom Elements Documentation for CKEditor 5",
    "codeList": [
      {
        "language": "html",
        "code": "element-inline\nelement-block\nobject-inline\nobject-block"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Creating a View Element with a Callback - JavaScript",
    "codeDescription": "This snippet shows how to use a callback to create a view element for a 'fancyParagraph'. The callback provides flexibility in dynamically creating the element according to model attributes.",
    "codeLanguage": "JavaScript",
    "codeTokens": 122,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/conversion/helpers/downcast.md#2025-04-16_snippet_2",
    "pageTitle": "Downcasting Elements in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.conversion\n\t.for( 'downcast' )\n\t.elementToElement( {\n\t\tmodel: 'fancyParagraph',\n\t\tview: ( modelElement, { writer } ) => {\n\t\t\treturn writer.createContainerElement(\n\t\t\t\t'p', { class: 'fancy' }\n\t\t\t);\n\t\t}\n\t} );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Configuring Preferred External Table Type in CKEditor 5",
    "codeDescription": "This code demonstrates how to configure the preferred table type for loading external tables in CKEditor 5. It sets the 'preferredExternalTableType' option to either 'content' or 'layout'.",
    "codeLanguage": "javascript",
    "codeTokens": 162,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-table/docs/features/layout-tables.md#2025-04-16_snippet_1",
    "pageTitle": "Layout Tables in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Table, TableLayout } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Table, TableLayout /* ... */ ],\n\t\ttable: {\n\t\t\ttableLayout :{\n\t\t\t\tpreferredExternalTableType: 'content' // or 'layout'\n\t\t\t}\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Initializing CKEditor with Error Handling",
    "codeDescription": "Basic initialization pattern for CKEditor with error handling using the Editor.create method. This pattern is used across all editor types to initialize the editor and catch any errors that might occur during initialization.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/updating/nim-migration/predefined-builds.md#2025-04-16_snippet_25",
    "pageTitle": "Migrating from CKEditor 5 Predefined Builds to New Installation Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "Editor\n\t.create( /* Configuration */ )\n\t.catch( error => console.error( error ) );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Custom Heading Elements Configuration",
    "codeDescription": "Implementation of custom heading elements with special styling, including HTML structure with CSS and JavaScript configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 154,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-heading/docs/features/headings.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 Headings Feature Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<style>\n\th2.fancy, .ck.ck-button.ck-heading_heading2_fancy {\n\t\tcolor: #ff0050;\n\t\tfont-size: 17px;\n\t}\n</style>\n\n<div id=\"snippet-custom-heading-levels\">\n\t<h1>Heading 1</h1>\n\t<h2>Heading 2</h2>\n\t<h2 class=\"fancy\">Fancy Heading 2</h2>\n\t<p>This is <a href=\"https://ckeditor.com\">CKEditor&nbsp;5</a>.</p>\n</div>"
      },
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\theading: {\n\t\t\toptions: [\n\t\t\t\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n\t\t\t\t{ model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },\n\t\t\t\t{ model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' },\n\t\t\t\t{\n\t\t\t\t\tmodel: 'headingFancy',\n\t\t\t\t\tview: {\n\t\t\t\t\t\tname: 'h2',\n\t\t\t\t\t\tclasses: 'fancy'\n\t\t\t\t\t},\n\t\t\t\t\ttitle: 'Heading 2 (fancy)',\n\t\t\t\t\tclass: 'ck-heading_heading2_fancy',\n\t\t\t\t\tconverterPriority: 'high'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Customizing Block Toolbar Icon in JavaScript",
    "codeDescription": "Configuration for changing the default block toolbar icon. This example demonstrates two approaches: using a predefined icon name ('pilcrow') or providing a custom SVG string.",
    "codeLanguage": "javascript",
    "codeTokens": 172,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/toolbar.md#2025-04-16_snippet_11",
    "pageTitle": "CKEditor 5 Toolbar Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "blockToolbar: {\n  items: [ /* ... */ ],\n  icon: 'pilcrow'\n  // or\n  // icon: '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 -960 960 960\" width=\"24\">' +\n  // '<path d=\"M120-240v-80h720v80H120Zm0-200v-80h720v80H120Zm0-200v-80h720v80H120Z\"/></svg>'\n},\ntoolbar: [ /* ... */ ]"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Property Binding with Renaming in CKEditor 5",
    "codeDescription": "This code snippet shows how to bind properties with different names between two observable objects. It binds the `isOn` property of a `Button` to the `value` property of a `Command`, effectively renaming the property in the binding. Whenever the `command.value` changes, the `button.isOn` will reflect the new value.",
    "codeLanguage": "javascript",
    "codeTokens": 103,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-utils/docs/framework/deep-dive/observables.md#2025-04-16_snippet_8",
    "pageTitle": "CKEditor 5 Framework - Observables",
    "codeList": [
      {
        "language": "javascript",
        "code": "button.bind( 'isOn' ).to( command, 'value' );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Configuring Standalone Resize Buttons",
    "codeDescription": "Configuration for implementing individual resize buttons with specific size options and toolbar setup.",
    "codeLanguage": "javascript",
    "codeTokens": 205,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-image/docs/features/images-resizing.md#2025-04-16_snippet_2",
    "pageTitle": "Image Resizing Implementation in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "const imageConfiguration = {\n\tresizeOptions: [\n\t\t{\n\t\t\tname: 'resizeImage:original',\n\t\t\tvalue: null,\n\t\t\ticon: 'original'\n\t\t},\n\t\t{\n\t\t\tname: 'resizeImage:custom',\n\t\t\tvalue: 'custom',\n\t\t\ticon: 'custom'\n\t\t},\n\t\t{\n\t\t\tname: 'resizeImage:50',\n\t\t\tvalue: '50',\n\t\t\ticon: 'medium'\n\t\t},\n\t\t{\n\t\t\tname: 'resizeImage:75',\n\t\t\tvalue: '75',\n\t\t\ticon: 'large'\n\t\t}\n\t],\n\ttoolbar: [\n\t\t'resizeImage:50',\n\t\t'resizeImage:75', \n\t\t'resizeImage:original',\n\t\t'resizeImage:custom',\n\t\t// More toolbar options.\n\t\t// ...\n\t]\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Registering Allowed Children for a Schema Element",
    "codeDescription": "This code snippet registers a model element 'myElement' and defines that it can contain text nodes as children. This allows for greater flexibility in how 'myElement' can be used within the CKEditor 5 framework.",
    "codeLanguage": "javascript",
    "codeTokens": 90,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/schema.md#2025-04-16_snippet_1",
    "pageTitle": "Registering Schema Elements in CKEditor 5 Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "schema.register( 'myElement', {\n\tallowIn: '$root',\n\tallowChildren: '$text'\n} );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Element to Attribute Conversion: Predefined Value",
    "codeDescription": "This snippet shows setting a predefined value to a model attribute. It converts `<span class=\"styled styled-dark\">` to a model text node with the 'styled' attribute set to 'dark'.",
    "codeLanguage": "javascript",
    "codeTokens": 127,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/conversion/helpers/upcast.md#2025-04-16_snippet_7",
    "pageTitle": "CKEditor 5 Framework: Upcast Conversion Helpers",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.conversion\n\t.for( 'upcast' )\n\t.elementToAttribute( {\n\t\tview: {\n\t\t\tname: 'span',\n\t\t\tclasses: [ 'styled', 'styled-dark' ]\n\t\t},\n\t\tmodel: {\n\t\t\tkey: 'styled',\n\t\t\tvalue: 'dark'\n\t\t}\n\t} );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Implementing Automatic Link Decorator for PDF Downloads in CKEditor 5",
    "codeDescription": "Configures an automatic link decorator in CKEditor 5 to add a download attribute to links ending with '.pdf', enhancing user experience for PDF links.",
    "codeLanguage": "javascript",
    "codeTokens": 161,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-link/docs/features/link.md#2025-04-16_snippet_10",
    "pageTitle": "Link Feature in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\tlink: {\n\t\t\tdecorators: {\n\t\t\t\tdetectDownloadable: {\n\t\t\t\t\tmode: 'automatic',\n\t\t\t\t\tcallback: url => url.endsWith( '.pdf' ),\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tdownload: 'file.pdf'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// More of the editor's configuration.\n\t\t// ...\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Removing Features from CKEditor 5",
    "codeDescription": "Demonstrates how to remove plugins from the editor setup while handling plugin dependencies. Shows progressive removal of Heading, Link, and Autolink plugins.",
    "codeLanguage": "javascript",
    "codeTokens": 159,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/configuration.md#2025-04-16_snippet_3",
    "pageTitle": "CKEditor 5 Feature Configuration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Heading, BlockQuote, Bold, Italic, Autolink, Link, List } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tremovePlugins: [ 'Heading', 'Link', 'Autolink' ], // Remove a few plugins from the setup.\n\t\ttoolbar: [ 'bold', 'italic', 'bulletedList', 'numberedList', 'blockQuote' ]\n\t} )\n\t.catch( error => {\n\t\tconsole.log( error );\n\t} );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Directory Structure of a CKEditor 5 JavaScript Plugin Package",
    "codeDescription": "An overview of the project's directory structure showing all files and folders created by the Package Generator, including source files, tests, themes, and configuration files.",
    "codeLanguage": "plain-text",
    "codeTokens": 467,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/development-tools/package-generator/javascript-package.md#2025-04-16_snippet_0",
    "pageTitle": "JavaScript Package Content for CKEditor 5 Plugin Development",
    "codeList": [
      {
        "language": "plain-text",
        "code": "├─ lang\n│  └─ contexts.json        # Entries used for creating translations.\n├─ sample\n│  ├─ (*) dll.html         # The editor initialized using the DLL builds.\n│  ├─ index.html           # The sample file.\n│  └─ ckeditor.js          # The editor initialization script.\n├─ scripts\n│  └─ build-dist.mjs       # Script creates `npm` and browser builds for your plugin.\n├─ src\n│  ├─ pluginname.js        # The plugin with example functionality.\n│  ├─ index.js             # The modules exported by the package.\n│  └─ **/*.js              # All JavaScript source files should be saved here.\n├─ tests\n│  ├─ pluginname.js\n│  ├─ index.js             # Tests for the plugin.\n│  └─ **/*.js              # All tests should be saved here.\n├─ theme\n│  ├─ icons\n│  │  ├─ ckeditor.svg      # The CKEditor 5 icon displayed in the toolbar.\n│  │  └─ **/*.svg          # All icon files should be saved here.\n│  └─ **/*.css             # All CSS files should be saved here.\n│\n├─ .editorconfig           # See link below for details.\n├─ .eslintrc.cjs           # ESLint configuration file.\n├─ .gitattributes          # See link below for details.\n├─ .gitignore              # See link below for details.\n├─ .stylelintrc            # Stylelint configuration file.\n├─ ckeditor5-metadata.json # See link below for details.\n├─ LICENSE.md              # All created packages fall under the MIT license.\n├─ package.json            # See link below for details.\n├─ README.md               # Description of your project and usage instructions.\n└─ vitest.config.js        # Vitest configuration file."
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Accessing Editor Instance from DOM",
    "codeDescription": "Code demonstrating how to get the editor instance from a DOM element using the ckeditorInstance property",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/how-tos.md#2025-04-16_snippet_4",
    "pageTitle": "CKEditor 5 Framework How-to Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const domEditableElement = document.querySelector( '.ck-editor__editable_inline' );\n\nconst editorInstance = domEditableElement.ckeditorInstance;\n\neditorInstance.setData( '<p>Hello world!<p>' );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Initializing Autoformatting in CKEditor 5 (JavaScript)",
    "codeDescription": "This snippet demonstrates how to initialize the autoformatting feature within a CKEditor 5 instance. It ensures that the Autoformat plugin is included in the editor configuration and shows how to set the toolbar options accordingly.",
    "codeLanguage": "JavaScript",
    "codeTokens": 143,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-autoformat/docs/features/autoformat.md#2025-04-16_snippet_0",
    "pageTitle": "Autoformatting Feature Implementation in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Autoformat } from 'ckeditor5';\n\nClassicEditor.\n\tcreate( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Autoformat, /* ... */ ],\n\t\ttoolbar: [ /* ... */ ]\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Configuring CKEditor in Vue Component",
    "codeDescription": "Example of how to specify the configuration for CKEditor in a Vue component using the config directive.",
    "codeLanguage": "html",
    "codeTokens": 177,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/vuejs-v3.md#2025-04-16_snippet_6",
    "pageTitle": "Vue.js 3+ Rich Text Editor Integration with CKEditor 5",
    "codeList": [
      {
        "language": "html",
        "code": "<template>\n    <ckeditor :editor=\"ClassicEditor\" :config=\"config\" />\n</template>\n\n<script setup>\nimport { computed } from 'vue';\nimport { ClassicEditor, Essentials, Paragraph, Bold, Italic } from 'ckeditor5';\nimport { Ckeditor } from '@ckeditor/ckeditor5-vue';\n\nconst config = computed( () => {\n\treturn {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic' ]\n\t};\n} );\n</script>"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "New NPM-based CKEditor 5 Setup",
    "codeDescription": "Modern npm-based setup for CKEditor 5 showing simplified imports, CSS handling, and translations configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 209,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/updating/nim-migration/migration-to-new-installation-methods.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 Installation Methods Migration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Essentials, Bold, Italic, Paragraph, Mention } from 'ckeditor5';\nimport { FormatPainter, SlashCommand } from 'ckeditor5-premium-features';\n\nimport coreTranslations from 'ckeditor5/translations/pl.js';\nimport premiumFeaturesTranslations from 'ckeditor5-premium-features/translations/pl.js';\n\nimport 'ckeditor5/ckeditor5.css';\nimport 'ckeditor5-premium-features/ckeditor5-premium-features.css';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tplugins: [ Essentials, Bold, Italic, Paragraph, Mention, FormatPainter, SlashCommand ],\n\t\ttoolbar: [ /* ... */ ],\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\ttranslations: [\n\t\t\tcoreTranslations,\n\t\t\tpremiumFeaturesTranslations\n\t\t]\n\t} );"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Inheriting Schema Properties in CKEditor",
    "codeDescription": "Shows how to inherit schema properties from generic items using inheritAllFrom, and demonstrates the expanded form of inheritance.",
    "codeLanguage": "javascript",
    "codeTokens": 61,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/schema.md#2025-04-16_snippet_10",
    "pageTitle": "Registering Schema Elements in CKEditor 5 Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "schema.register( 'paragraph', {\n\tinheritAllFrom: '$block'\n} );"
      },
      {
        "language": "javascript",
        "code": "schema.register( 'paragraph', {\n\tallowWhere: '$block',\n\tallowContentOf: '$block',\n\tallowAttributesOf: '$block',\n\tinheritTypesFrom: '$block'\n} );"
      },
      {
        "language": "javascript",
        "code": "schema.register( 'blockQuote', {\n\tinheritAllFrom: '$container'\n} );"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Configuring Expanded Image Insert Dropdown in CKEditor 5",
    "codeDescription": "Shows how to configure the expanded image insert dropdown in CKEditor 5 v40.2.0, including necessary plugins and toolbar configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 163,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/updating/update-to-40.md#2025-04-16_snippet_4",
    "pageTitle": "Updating CKEditor 5 to version 40.x",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { Image, ImageCaption, ImageResize, ImageStyle, ImageToolbar } from '@ckeditor/ckeditor5-image';\nimport { LinkImage } from '@ckeditor/ckeditor5-link';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tplugins: [ Image, ImageToolbar, ImageCaption, ImageStyle, ImageResize, LinkImage ],\n\t\t// The insert image dropdown toolbar item.\n\t\ttoolbar: [ 'insertImage', /* ... */ ],\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Loading CKFinder JavaScript Library",
    "codeDescription": "This HTML snippet demonstrates how to load the CKFinder JavaScript library by including a `<script>` tag that points to the `ckfinder.js` file.  This script is necessary for the full integration of CKFinder with CKEditor 5, enabling the file manager user interface.",
    "codeLanguage": "html",
    "codeTokens": 95,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-ckfinder/docs/features/ckfinder.md#2025-04-16_snippet_2",
    "pageTitle": "CKFinder File Manager Integration in CKEditor 5",
    "codeList": [
      {
        "language": "html",
        "code": "<script src=\"https://example.com/ckfinder/ckfinder.js\"></script>"
      }
    ],
    "relevance": 0.937
  },
  {
    "codeTitle": "Implementing Editor Without Resize Handles",
    "codeDescription": "Configuration for CKEditor setup with image resizing only through buttons, excluding the resize handles functionality.",
    "codeLanguage": "javascript",
    "codeTokens": 287,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-image/docs/features/images-resizing.md#2025-04-16_snippet_3",
    "pageTitle": "Image Resizing Implementation in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Image, ImageResizeButtons, ImageResizeEditing, ImageToolbar } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tplugins: [ Image, ImageResizeEditing, ImageResizeButtons, ImageToolbar, /* ... */ ],\n\t\timage: {\n\t\t\tresizeOptions: [\n\t\t\t{\n\t\t\t\tname: 'resizeImage:original',\n\t\t\t\tvalue: null,\n\t\t\t\ticon: 'original'\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'resizeImage:custom',\n\t\t\t\tvalue: 'custom',\n\t\t\t\ticon: 'custom'\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'resizeImage:50',\n\t\t\t\tvalue: '50',\n\t\t\t\ticon: 'medium'\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'resizeImage:75',\n\t\t\t\tvalue: '75',\n\t\t\t\ticon: 'large'\n\t\t\t}\n\t\t],\n\t\ttoolbar: [\n\t\t\t'resizeImage:50',\n\t\t\t'resizeImage:75',\n\t\t\t'resizeImage:original',\n\t\t\t'resizeImage:custom',\n\t\t\t// More toolbar options.\n\t\t\t// ...\n\t\t] }\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.936
  },
  {
    "codeTitle": "Configuring Full Page HTML with CSS Sanitization",
    "codeDescription": "Advanced configuration example showing how to enable CSS rendering from head section with security measures. Includes setup for CSS sanitization to prevent malicious code execution.",
    "codeLanguage": "javascript",
    "codeTokens": 209,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-html-support/docs/features/full-page-html.md#2025-04-16_snippet_1",
    "pageTitle": "Full Page HTML Feature Documentation - CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\thtmlSupport: {\n\t\t\tfullPage: {\n\t\t\t\tallowRenderStylesFromHead: true,\n\t\t\t\t// Strip unsafe properties and values, for example:\n\t\t\t\t// values like url( ... ) that may execute malicious code\n\t\t\t\t// from an unknown source.\n\t\t\t\tsanitizeCss( CssString ) {\n\t\t\t\t\tconst sanitizedCss = sanitize( CssString );\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcss: sanitizedCss,\n\t\t\t\t\t\t// true or false depending on whether\n\t\t\t\t\t\t// the sanitizer stripped anything.\n\t\t\t\t\t\thasChanged: true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Adding Placeholder Dropdown to CKEditor 5 Toolbar",
    "codeDescription": "This code shows how to add the placeholder plugin to the editor configuration and include the placeholder dropdown in the toolbar. It sets up the plugin among other essential editor features.",
    "codeLanguage": "javascript",
    "codeTokens": 163,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/implementing-an-inline-widget.md#2025-04-16_snippet_12",
    "pageTitle": "Implementing an Inline Widget Tutorial for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "// main.js\n\nimport Placeholder from './placeholder/placeholder';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: 'GPL', // Or '<YOUR_LICENSE_KEY>'.\n\t\tplugins: [ Essentials, Paragraph, Heading, List, Bold, Italic, Placeholder ],\n\n\t\t// Insert the \"placeholder\" dropdown into the editor toolbar.\n\t\ttoolbar: [ 'heading', 'bold', 'italic', 'numberedList', 'bulletedList', '|', 'placeholder' ]\n\t} );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Adding Custom Button to Menu Bar (JavaScript)",
    "codeDescription": "This code snippet demonstrates how to create a custom plugin that adds a button to the menu bar inside the \"Format\" menu, after the \"Bold\" button.",
    "codeLanguage": "javascript",
    "codeTokens": 234,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/menubar.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 Menu Bar Configuration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { Plugin, ButtonView } from 'ckeditor5';\n\nclass MyCustomPlugin extends Plugin {\n\tinit() {\n\t\tconst editor = this.editor;\n\n\t\t// Register the toolbar button.\n\t\teditor.ui.componentFactory.add( 'menuBar:myCustomButton', locale => {\n\t\t\tconst view = new ButtonView(locale);\n\n\t\t\tview.set( {\n\t\t\t\tlabel: 'My Custom Button',\n\t\t\t\twithText: true,\n\t\t\t\ttooltip: true\n\t\t\t} );\n\n\t\t\t// Execute a command when the button is clicked.\n\t\t\tview.on( 'execute', () => {\n\t\t\t\teditor.execute('myCustomCommand');\n\t\t\t} );\n\n\t\t\treturn view;\n\t\t} );\n\n\t\t// Add your component in the preferred position.\n\t\teditor.ui.extendMenuBar( {\n\t\t\titem: 'menuBar:myCustomButton',\n\t\t\tposition: 'after:menuBar:bold'\n\t\t} );\n    }\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Updating CKEditor 5 Decoupled Document Editor Initialization",
    "codeDescription": "Code snippet demonstrating how to update the initialization of CKEditor 5 Decoupled Document Editor from predefined build to source package. It includes importing necessary modules and configuring plugins with additional features.",
    "codeLanguage": "javascript",
    "codeTokens": 361,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/updating/nim-migration/predefined-builds.md#2025-04-16_snippet_7",
    "pageTitle": "Migrating from CKEditor 5 Predefined Builds to New Installation Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "import {\n\tDecoupledEditor,\n\tEssentials,\n\tAlignment,\n\tFontSize,\n\tFontFamily,\n\tFontColor,\n\tFontBackgroundColor,\n\tCKFinderUploadAdapter,\n\tAutoformat,\n\tBold,\n\tItalic,\n\tStrikethrough,\n\tUnderline,\n\tBlockQuote,\n\tCKBox,\n\tCKFinder,\n\tEasyImage,\n\tHeading,\n\tImage,\n\tImageCaption,\n\tImageResize,\n\tImageStyle,\n\tImageToolbar,\n\tImageUpload,\n\tPictureEditing,\n\tIndent,\n\tIndentBlock,\n\tLink,\n\tList,\n\tListProperties,\n\tMediaEmbed,\n\tParagraph,\n\tPasteFromOffice,\n\tTable,\n\tTableToolbar,\n\tTextTransformation,\n\tCloudServices\n} from 'ckeditor5';\n\nimport 'ckeditor5/ckeditor5.css';\n\nclass Editor extends DecoupledEditor {\n\tstatic builtinPlugins = [\n\t\tEssentials,\n\t\tAlignment,\n\t\tFontSize,\n\t\tFontFamily,\n\t\tFontColor,\n\t\tFontBackgroundColor,\n\t\tCKFinderUploadAdapter,\n\t\tAutoformat,\n\t\tBold,\n\t\tItalic,\n\t\tStrikethrough,\n\t\tUnderline,\n\t\tBlockQuote,\n\t\tCKBox,\n\t\tCKFinder,\n\t\tCloudServices,\n\t\tEasyImage,\n\t\tHeading,\n\t\tImage,\n\t\tImageCaption,\n\t\tImageResize,\n\t\tImageStyle,\n\t\tImageToolbar,\n\t\tImageUpload,\n\t\tIndent,\n\t\tIndentBlock,\n\t\tLink,\n\t\tList,\n\t\tListProperties,\n];\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementing Spanish Localization in CKEditor 5 DLL Build",
    "codeDescription": "Complete example showing how to set up CKEditor 5 with Spanish localization. Includes loading the base DLL build, editor features, and corresponding Spanish translation files. The configuration demonstrates setting the language to Spanish and initializing the editor.",
    "codeLanguage": "html",
    "codeTokens": 681,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/advanced/dll-builds.md#2025-04-16_snippet_2",
    "pageTitle": "Implementing CKEditor 5 DLL Builds",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- Base DLL build. -->\n<script src=\"path/to/node_modules/ckeditor5/build/ckeditor5-dll.js\"></script>\n\n<!-- DLL-compatible build of ckeditor5-editor-classic. -->\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-editor-classic/build/editor-classic.js\"></script>\n\n<!-- DLL-compatible builds of editor features. -->\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-autoformat/build/autoformat.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-basic-styles/build/basic-styles.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-block-quote/build/block-quote.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-essentials/build/essentials.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-heading/build/heading.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-image/build/image.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-indent/build/indent.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-link/build/link.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-list/build/list.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-media-embed/build/media-embed.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-paste-from-office/build/paste-from-office.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-table/build/table.js\"></script>\n\n<!-- Spanish translation files. -->\n<script src=\"path/to/node_modules/ckeditor5/build/translations/es.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-basic-styles/build/translations/es.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-block-quote/build/translations/es.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-heading/build/translations/es.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-image/build/translations/es.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-indent/build/translations/es.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-link/build/translations/es.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-list/build/translations/es.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-media-embed/build/translations/es.js\"></script>\n<script src=\"path/to/node_modules/@ckeditor/ckeditor5-table/build/translations/es.js\"></script>\n\n<script>\n\tconst config = {\n\t\t// Use the Spanish language.\n\t\tlanguage: 'es',\n\t\t// ...the rest of configuration object.\n\t};\n\n\tCKEditor5.editorClassic.ClassicEditor\n\t\t.create( document.querySelector( '#editor' ), config )\n\t\t.then( editor => {\n\t\t\twindow.editor = editor;\n\t\t} );\n</script>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Configuring CKEditor 5 Toolbar with Custom Button",
    "codeDescription": "Shows how to register the new highlight button in the editor's configuration by adding it to the toolbar items array. Includes essential plugins and basic toolbar setup.",
    "codeLanguage": "javascript",
    "codeTokens": 128,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/crash-course/view.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 UI Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const editor = await ClassicEditor.create( element, {\n\tlicenseKey: 'GPL', // Or '<YOUR_LICENSE_KEY>'.\n\tplugins: [\n\t\tEssentials,\n\t\tParagraph,\n\t\tHighlight\n\t],\n\ttoolbar: {\n\t\titems: [\n\t\t\t'undo',\n\t\t\t'redo',\n\t\t\t'highlight' // Add this line.\n\t\t]\n\t}\n} );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Installing Image Resize Plugin in CKEditor 5",
    "codeDescription": "Code example showing how to import and enable the ImageResize plugin in CKEditor 5. This plugin includes all necessary features for image resizing functionality: ImageResizeEditing, ImageResizeHandles, and ImageResizeButtons.",
    "codeLanguage": "javascript",
    "codeTokens": 131,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-image/docs/features/images-resizing.md#2025-04-16_snippet_8",
    "pageTitle": "Image Resizing Implementation in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Image, ImageResize } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\tplugins: [ Image, ImageResize, /* ... */ ]\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Updating Editor Read-Only Mode Usage",
    "codeDescription": "This code snippet demonstrates the updated method for setting and clearing the editor's read-only mode in CKEditor 5 v34.x. It uses the `enableReadOnlyMode` and `disableReadOnlyMode` methods with a lock ID instead of directly setting the `isReadOnly` property.",
    "codeLanguage": "javascript",
    "codeTokens": 162,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/updating/update-to-34.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 v34.x Update Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// ❌ Old usage:\nfunction makeEditorReadOnly() {\n\teditor.isReadOnly = true;\n}\n\nfunction makeEditorEditable() {\n\teditor.isReadOnly = false;\n}\n\n// ✅ New usage:\nconst myFeatureLockId = Symbol( 'my-feature' );\n\nfunction makeEditorReadOnly() {\n\teditor.enableReadOnlyMode( myFeatureLockId );\n}\n\nfunction makeEditorEditable() {\n\teditor.disableReadOnlyMode( myFeatureLockId );\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Converting Heading Model Element to View Element",
    "codeDescription": "This snippet shows two ways to convert a heading model element into an h1 view element in CKEditor 5. The first version uses a string view property, while the second version demonstrates a custom callback function. Requires the editor's conversion API.",
    "codeLanguage": "JavaScript",
    "codeTokens": 103,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/conversion/downcast.md#2025-04-16_snippet_3",
    "pageTitle": "Downcast Conversion in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "editor.conversion\n\t.for( 'downcast' )\n\t.elementToElement( {\n\t\tmodel: 'heading',\n\t\tview: 'h1'\n\t} );"
      },
      {
        "language": "JavaScript",
        "code": "editor.conversion\n\t.for( 'downcast' )\n\t.elementToElement( {\n\t\tmodel: 'heading',\n\t\tview: ( modelElement, { writer } ) => {\n\t\t\treturn writer.createContainerElement(\n\t\t\t\t'h1'\n\t\t\t);\n\t\t}\n\t} );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Configuring Custom Code Block Languages",
    "codeDescription": "Demonstrates how to customize available programming languages for code blocks, restricting language selection and defining custom language settings.",
    "codeLanguage": "javascript",
    "codeTokens": 115,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-code-block/docs/features/code-blocks.md#2025-04-16_snippet_1",
    "pageTitle": "Code Blocks in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tcodeBlock: {\n\t\t\tlanguages: [\n\t\t\t\t{ language: 'css', label: 'CSS' },\n\t\t\t\t{ language: 'html', label: 'HTML' }\n\t\t\t]\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Installing Page Break Feature in CKEditor 5",
    "codeDescription": "Code snippet showing how to import and configure the Page Break feature in CKEditor 5. The example demonstrates adding the plugin to the editor's plugin list and including the page break button in the toolbar configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 145,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-page-break/docs/features/page-break.md#2025-04-16_snippet_0",
    "pageTitle": "Page Break Feature in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, PageBreak } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ PageBreak, /* ... */ ],\n\t\ttoolbar: [ 'pageBreak', /* ... */ ],\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Integrating Menu Bar in Decoupled Editor (HTML & JavaScript)",
    "codeDescription": "This example shows how to manually insert the menu bar when using Decoupled Editor or other editor types that require manual placement.",
    "codeLanguage": "javascript",
    "codeTokens": 72,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/setup/menubar.md#2025-04-16_snippet_1",
    "pageTitle": "CKEditor 5 Menu Bar Configuration and Usage",
    "codeList": [
      {
        "language": "html",
        "code": "\t<div id=\"menuBarContainer\"></div>\n\t<div id=\"editor\"><p>Document content.</p></div>"
      },
      {
        "language": "javascript",
        "code": "DecoupledEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\ttoolbar: [ 'undo', 'redo', 'bold', 'italic', 'numberedList', 'bulletedList' ],\n\t} )\n\t.then( editor => {\n\t\tdocument.querySelector( '#menuBarContainer' ).appendChild( editor.ui.view.menuBarView.element );\n\t} );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementing Search Functionality in CKEditor 5",
    "codeDescription": "This code demonstrates how to create a search component with CKEditor 5 using the SearchTextView class. It sets up a filtered view with a custom filter function that returns information about search results.",
    "codeLanguage": "javascript",
    "codeTokens": 158,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/ui-components.md#2025-04-16_snippet_24",
    "pageTitle": "UI Components in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ListView, SearchTextView, Locale } from 'ckeditor5';\n\nconst locale = new Locale();\n\nconst filteredView = new ListView();\nfilteredView.filter = () => {\n\treturn {\n\t\tresultsCount: 1,\n\t\ttotalItemsCount: 5\n\t};\n};\n\nconst searchView = new SearchTextView( locale, {\n\tfilteredView,\n\tqueryView: {\n\t\tlabel: 'Label'\n\t}\n} );\n\nsearchView.render();\n\ndocument.querySelector( '.ui-search' ).append( searchView.element );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using CKEditor Component in Nuxt",
    "codeDescription": "Example of using the created Editor component within a Nuxt application, wrapped in ClientOnly component for client-side rendering.",
    "codeLanguage": "html",
    "codeTokens": 64,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/nuxt.md#2025-04-16_snippet_2",
    "pageTitle": "CKEditor 5 Integration with Nuxt Framework",
    "codeList": [
      {
        "language": "html",
        "code": "<template>\n\t<ClientOnly>\n\t\t<Editor />\n\t</ClientOnly>\n</template>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementing Document Editor in Vue with CKEditor Cloud",
    "codeDescription": "Example of setting up a Document Editor in Vue using CKEditor Cloud service, including toolbar configuration and plugin setup. Shows how to manually insert the editor toolbar into the DOM on component ready.",
    "codeLanguage": "html",
    "codeTokens": 383,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations-cdn/vuejs-v3.md#2025-04-16_snippet_4",
    "pageTitle": "Vue.js 3+ Rich Text Editor Component with CDN Integration",
    "codeList": [
      {
        "language": "html",
        "code": "<template>\n\t<ckeditor\n\t\tv-if=\"editor\"\n\t\tv-model=\"data\"\n\t\t:editor=\"editor\"\n\t\t:config=\"config\"\n\t\t@ready=\"onReady\"\n\t/>\n</template>\n\n<script setup>\nimport { ref, computed } from 'vue';\nimport { Ckeditor, useCKEditorCloud } from '@ckeditor/ckeditor5-vue';\n\nconst cloud = useCKEditorCloud( {\n\tversion: '{@var ckeditor5-version}'\n} );\n\nconst data = ref( '<p>Hello world!</p>' );\n\nconst editor = computed( () => {\n\tif ( !cloud.data.value ) {\n\t\treturn null;\n\t}\n\n\treturn cloud.data.value.CKEditor.ClassicEditor;\n} );\n\nconst config = computed( () => {\n\tif ( !cloud.data.value ) {\n\t\treturn null;\n\t}\n\n\tconst { Essentials, Paragraph, Bold, Italic, Mention } = cloud.data.value.CKEditor;\n\tconst { SlashCommand } = cloud.data.value.CKEditorPremiumFeatures;\n\n\treturn {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>',\n\t\ttoolbar: [ 'undo', 'redo', '|', 'bold', 'italic' ],\n\t\tplugins: [\n\t\t\tEssentials,\n\t\t\tParagraph,\n\t\t\tBold,\n\t\t\tItalic,\n\t\t\tMention,\n\t\t\tSlashCommand\n\t\t]\n\t};\n} );\n\nfunction onReady( editor ) {\n\t// Insert the toolbar before the editable area.\n\teditor.ui.getEditableElement().parentElement.insertBefore(\n\t\teditor.ui.view.toolbar.element,\n\t\teditor.ui.getEditableElement()\n\t);\n}\n</script>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Inheritance and Priority of Disallow Rules in CKEditor 5 Schema",
    "codeDescription": "This snippet exemplifies how different schema elements can inherit properties from one another, detailing the priority of disallow rules over allow rules. This is important for building complex nested structures while controlling element behavior.",
    "codeLanguage": "javascript",
    "codeTokens": 134,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-engine/docs/framework/deep-dive/schema.md#2025-04-16_snippet_3",
    "pageTitle": "Registering Schema Elements in CKEditor 5 Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "schema.register( 'baseChild' );\nschema.register( 'baseParent', { allowChildren: [ 'baseChild' ] } );\n\nschema.register( 'extendedChild', { inheritAllFrom: 'baseChild' } );\nschema.register( 'extendedParent', { inheritAllFrom: 'baseParent', disallowChildren: [ 'baseChild' ] } );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Installing and Configuring Block Quote in CKEditor 5",
    "codeDescription": "This snippet shows how to import, install, and configure the Block Quote feature in CKEditor 5. It includes adding the plugin to the editor's configuration and adding the button to the toolbar.",
    "codeLanguage": "javascript",
    "codeTokens": 143,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-block-quote/docs/features/block-quote.md#2025-04-16_snippet_0",
    "pageTitle": "Block Quote Feature in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, BlockQuote } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ BlockQuote, /* ... */ ],\n\t\ttoolbar: [ 'blockQuote', /* ... */ ]\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementing Timestamp Button UI",
    "codeDescription": "Adding a toolbar button component for the timestamp functionality with editor configuration",
    "codeLanguage": "javascript",
    "codeTokens": 252,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/creating-simple-plugin-timestamp.md#2025-04-16_snippet_2",
    "pageTitle": "Creating a Timestamp Plugin for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { \n\t// Other imports\n\tButtonView\n} from 'ckeditor5';\n\nimport 'ckeditor5/ckeditor5.css';\n\nclass Timestamp extends Plugin {\n\tinit() {\n\t\tconst editor = this.editor;\n\t\teditor.ui.componentFactory.add( 'timestamp', () => {\n\t\t\tconst button = new ButtonView();\n\n\t\t\tbutton.set( {\n\t\t\t\tlabel: 'Timestamp',\n\t\t\t\twithText: true\n\t\t\t} );\n\n\t\t\treturn button;\n\t\t} );\n\t}\n}\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: 'GPL', // Or '<YOUR_LICENSE_KEY>'.\n\t\tplugins: [\n\t\t\tEssentials, Paragraph, Heading, List, Bold, Italic, Timestamp\n\t\t],\n\t\ttoolbar: [\n\t\t\t'heading', 'bold', 'italic', 'numberedList', 'bulletedList', 'timestamp'\n\t\t]\n\t} )\n\t.then( editor => {\n\t\tconsole.log( 'Editor was initialized', editor );\n\t} )\n\t.catch( error => {\n\t\tconsole.error( error.stack );\n\t} );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Initializing AbbreviationCommand in AbbreviationEditing Plugin",
    "codeDescription": "This code snippet shows how to initialize the AbbreviationCommand in the AbbreviationEditing plugin. It adds the command to the editor's command list with the name 'addAbbreviation'.",
    "codeLanguage": "javascript",
    "codeTokens": 146,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/abbreviation-plugin-tutorial/abbreviation-plugin-level-3.md#2025-04-16_snippet_6",
    "pageTitle": "Creating an Advanced Abbreviation Plugin for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { Plugin } from 'ckeditor5';\nimport AbbreviationCommand from './abbreviationcommand';\n\nexport default class AbbreviationEditing extends Plugin {\n\tinit() {\n\t\tthis._defineSchema();\n\t\tthis._defineConverters();\n\n\t\tthis.editor.commands.add(\n\t\t\t'addAbbreviation', new AbbreviationCommand( this.editor )\n\t\t);\n\t}\n\n\t// Previously declared methods.\n\t// ...\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Disabling Esc Key Closure in CKEditor 5 Dialog",
    "codeDescription": "This code snippet demonstrates how to prevent the default behavior of closing the dialog when pressing the Escape key by using the 'close' event in a dialog's onShow callback.",
    "codeLanguage": "JavaScript",
    "codeTokens": 94,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/framework/architecture/ui-library.md#2025-04-16_snippet_24",
    "pageTitle": "UI Library for CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "editor.plugins.get( 'Dialog' ).view.on( 'close', ( evt, data ) => {\n\tif ( data.source === 'escKeyPress' ) {\n\t\tevt.stop();\n\t}\n} )"
      },
      {
        "language": "JavaScript",
        "code": "editor.plugins.get( 'Dialog' ).show( {\n\tonShow: dialog => {\n\t\tdialog.view.on( 'close', ( evt, data ) => {\n\t\t\tif ( data.source === 'escKeyPress' ) {\n\t\t\t\tevt.stop();\n\t\t\t}\n\t\t}, { priority: 'high' } );\n\t}\n\t// The rest of the dialog definition.\n} );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Multiple Observable Binding in JavaScript",
    "codeDescription": "Demonstrates binding a button's enabled state to multiple observable conditions using a custom callback function.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-utils/docs/framework/deep-dive/observables.md#2025-04-16_snippet_11",
    "pageTitle": "CKEditor 5 Framework - Observables",
    "codeList": [
      {
        "language": "javascript",
        "code": "const button = new Button();\nconst command = editor.commands.get( 'bold' );\nconst editingDocument = editor.editing.view.document;\n\nbutton.bind( 'isEnabled' ).to( command, 'isEnabled', editingDocument, 'isFocused',\n\t( isCommandEnabled, isDocumentFocused ) => isCommandEnabled && isDocumentFocused );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Adding CKBox image editing button to image toolbar",
    "codeDescription": "This code snippet demonstrates how to add the CKBox image editing button to the image contextual toolbar in CKEditor 5. It configures the `image.toolbar` option to include `ckboxImageEdit`.",
    "codeLanguage": "JavaScript",
    "codeTokens": 133,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-ckbox/docs/features/ckbox.md#2025-04-16_snippet_2",
    "pageTitle": "CKBox File Manager Integration in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "\"ClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\t// ... Other configuration options ...\n\t\timage: {\n\t\t\ttoolbar: [ 'toggleImageCaption', 'imageTextAlternative', 'ckboxImageEdit' ]\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );\""
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Updating Editor Placeholder at Runtime",
    "codeDescription": "Demonstrates how to change the editor placeholder text dynamically using JavaScript.",
    "codeLanguage": "javascript",
    "codeTokens": 50,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/features/editor-placeholder.md#2025-04-16_snippet_5",
    "pageTitle": "Editor Placeholder Feature in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.editing.view.document.getRoot( 'main' ).placeholder = 'new placeholder';"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Synchronizing Focus Tracker in Render Method",
    "codeDescription": "This code demonstrates synchronizing a focus tracker with a collection of items in the render method of a MyListView class in CKEditor. It ensures that items are added to and removed from the focus tracker as they are added or removed from the view collection. Essential for ensuring dynamic changes in view items update focus tracking.",
    "codeLanguage": "JavaScript",
    "codeTokens": 271,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-ui/docs/framework/deep-dive/focus-tracking.md#2025-04-16_snippet_7",
    "pageTitle": "Deep Dive into Focus Tracking in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// Previously imported packages.\n// ...\n\nclass MyListView extends View {\n\tconstructor( locale ) {\n\t\t// More initializations.\n\t\t// ...\n\t}\n\n\t// More methods.\n\t// ...\n\n\trender() {\n\t\tsuper.render();\n\n\t\t// Children added before rendering should be known to the #focusTracker.\n\t\tfor ( const item of this.items ) {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t}\n\n\t\t// Make sure items added to the collection are recognized by the #focusTracker.\n\t\tthis.items.on( 'add', ( evt, item ) => {\n\t\t\tthis.focusTracker.add( item.element );\n\t\t} );\n\n\t\t// Make sure items removed from the collection are ignored by the #focusTracker.\n\t\tthis.items.on( 'remove', ( evt, item ) => {\n\t\t\tthis.focusTracker.remove( item.element );\n\t\t} );\n\t}\n\n\t// More methods.\n\t// ...\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Configuring NGModule with CKEditor",
    "codeDescription": "Angular module configuration for integrating CKEditor 5 using the traditional NGModule approach",
    "codeLanguage": "typescript",
    "codeTokens": 115,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/getting-started/integrations/angular.md#2025-04-16_snippet_4",
    "pageTitle": "Angular Integration Guide for CKEditor 5",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CKEditorModule } from '@ckeditor/ckeditor5-angular';\n\nimport { AppComponent } from './app.component';\n\n@NgModule( {\n\tdeclarations: [ AppComponent ],\n\timports: [ BrowserModule, CKEditorModule ],\n\tproviders: [],\n\tbootstrap: [ AppComponent ]\n} )\nexport class AppModule { }"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Installing Table Styling Plugins in CKEditor 5",
    "codeDescription": "This snippet demonstrates how to install and configure table styling plugins in CKEditor 5, including TableProperties and TableCellProperties.",
    "codeLanguage": "javascript",
    "codeTokens": 226,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-table/docs/features/tables-styling.md#2025-04-16_snippet_0",
    "pageTitle": "Table and Cell Styling in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Table, TableCellProperties, TableProperties, TableToolbar } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Table, TableToolbar, TableProperties, TableCellProperties, /* ... */ ],\n\t\ttoolbar: [ 'insertTable', /* ... */ ],\n\t\ttable: {\n\t\t\tcontentToolbar: [\n\t\t\t\t'tableColumn', 'tableRow', 'mergeTableCells',\n\t\t\t\t'tableProperties', 'tableCellProperties'\n\t\t\t],\n\n\t\t\ttableProperties: {\n\t\t\t\t// The configuration of the TableProperties plugin.\n\t\t\t},\n\n\t\t\ttableCellProperties: {\n\t\t\t\t// The configuration of the TableCellProperties plugin.\n\t\t\t}\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Handling WordCount Update Event in CKEditor 5",
    "codeDescription": "Example showing how to listen for word count updates using the WordCount plugin's update event. The callback receives statistics about the current number of words and characters in the editor content.",
    "codeLanguage": "javascript",
    "codeTokens": 108,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-word-count/docs/features/word-count.md#2025-04-16_snippet_6",
    "pageTitle": "CKEditor 5 Word and Character Count Feature",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.plugins.get( 'WordCount' ).on( 'update', ( evt, stats ) => {\n    // Prints the current content statistics.\n    console.log( `Characters: ${ stats.characters }\\nWords:      ${ stats.words }` );\n} );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Executing Link Commands - JavaScript",
    "codeDescription": "Demonstrates how to execute link and unlink commands within the CKEditor 5 environment. It shows the effect of linking on selected content and the ability to remove links when needed. Parameters demonstrate setting links as external and managing selections. The expected input includes a valid URL and options for handling link decorators.",
    "codeLanguage": "JavaScript",
    "codeTokens": 171,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-link/docs/features/link.md#2025-04-16_snippet_13",
    "pageTitle": "Link Feature in CKEditor 5",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "// Applies the link to the selected content.\n// When the selection is collapsed, it creates new text wrapped in a link.\neditor.execute( 'link', 'http://example.com' );\n\n// If there are decorators configured, the command can set their state.\neditor.execute( 'link', 'http://example.com', { linkIsExternal: true } );\n\n// Removes the link from the selection (and all decorators if present).\neditor.execute( 'unlink' );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Initializing CKEditor 5 with Title Plugin",
    "codeDescription": "Code showing how to import and configure the Title plugin when initializing CKEditor 5. Includes basic setup with license key and plugin configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 128,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-heading/docs/features/title.md#2025-04-16_snippet_0",
    "pageTitle": "CKEditor 5 Document Title Feature Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ClassicEditor, Title } from 'ckeditor5';\n\nClassicEditor\n\t.create( document.querySelector( '#editor' ), {\n\t\tlicenseKey: '<YOUR_LICENSE_KEY>', // Or 'GPL'.\n\t\tplugins: [ Title, /* ... */ ]\n\t\ttitle: {\n\t\t\t// Configuration.\n\t\t}\n\t} )\n\t.then( /* ... */ )\n\t.catch( /* ... */ );"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Binding Observable Properties in CKEditor 5",
    "codeDescription": "This snippet initializes instances of a `Button` view and a `Command` from the CKEditor 5 editor.  These instances are used in subsequent code examples to demonstrate how to bind observable properties between different objects to synchronize their states.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-utils/docs/framework/deep-dive/observables.md#2025-04-16_snippet_6",
    "pageTitle": "CKEditor 5 Framework - Observables",
    "codeList": [
      {
        "language": "javascript",
        "code": "const button = new Button();\nconst command = editor.commands.get( 'bold' );"
      }
    ],
    "relevance": 0.934
  },
  {
    "codeTitle": "Executing Placeholder Command in CKEditor 5",
    "codeDescription": "A simple example showing how to execute the placeholder command to insert a placeholder with the value 'time'. This demonstrates the command usage after it has been registered.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/implementing-an-inline-widget.md#2025-04-16_snippet_8",
    "pageTitle": "Implementing an Inline Widget Tutorial for CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "editor.execute( 'placeholder', { value: 'time' } );"
      }
    ],
    "relevance": 0.933
  },
  {
    "codeTitle": "Adding External Data Widget Command to Editor in JavaScript",
    "codeDescription": "Imports the ExternalDataWidgetCommand and adds it to the editor's command collection. This snippet is part of the ExternalDataWidgetEditing plugin.",
    "codeLanguage": "javascript",
    "codeTokens": 203,
    "codeId": "https://github.com/ckeditor/ckeditor5/blob/master/docs/tutorials/widgets/data-from-external-source.md#2025-04-16_snippet_6",
    "pageTitle": "External Data Widget Implementation in CKEditor 5",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { Plugin, Widget, toWidget } from 'ckeditor5';\n\nimport ExternalDataWidgetCommand from './externaldatawidgetcommand';\nimport './theme/externaldatawidget.css';\n\nexport default class ExternalDataWidgetEditing extends Plugin {\n\tstatic get requires() {\n\t\treturn [ Widget ];\n\t}\n\n\tinit() {\n\t\tconsole.log( 'ExternalDataWidgetEditing#init() got called' );\n\n\t\tthis._defineSchema();\n\t\tthis._defineConverters();\n\n\t\t// ADDED\n\t\tthis.editor.commands.add( 'external', new ExternalDataWidgetCommand( this.editor ) );\n\t}\n\n\t_defineSchema() {\n\t\t// Previously registered schema.\n\t\t// ...\n\t}\n\n\t_defineConverters() {\n\t\t// Previously defined converters.\n\t\t// ...\n\t}\n}"
      }
    ],
    "relevance": 0.932
  }
]