[
  {
    "codeTitle": "Displaying Open Dialog for Multiple File Selection in Electron",
    "codeDescription": "This snippet demonstrates how to use the dialog module to show an open file dialog that allows multiple file selections. It uses the showOpenDialog method with specific properties.",
    "codeLanguage": "javascript",
    "codeTokens": 75,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Dialog Module",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { dialog } = require('electron')\nconsole.log(dialog.showOpenDialog({ properties: ['openFile', 'multiSelections'] }))"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Complete Renderer Process Notification Example with DOM Interaction",
    "codeDescription": "A renderer process notification example that updates the DOM when a notification is clicked. This demonstrates how to create a notification and handle click events to modify page content.",
    "codeLanguage": "javascript",
    "codeTokens": 114,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/notifications.md#2025-04-18_snippet_3",
    "pageTitle": "Electron Notifications Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const NOTIFICATION_TITLE = 'Title'\nconst NOTIFICATION_BODY = 'Notification from the Renderer process. Click to log to console.'\nconst CLICK_MESSAGE = 'Notification clicked!'\n\nnew window.Notification(NOTIFICATION_TITLE, { body: NOTIFICATION_BODY })\n  .onclick = () => { document.getElementById('output').innerText = CLICK_MESSAGE }"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Creating and Using Multiple WebContentsView Instances in Electron",
    "codeDescription": "This example demonstrates how to create a BaseWindow with two WebContentsView instances side by side, each loading different URLs. It shows how to set bounds for positioning and sizing each view within the window.",
    "codeLanguage": "javascript",
    "codeTokens": 197,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-contents-view.md#2025-04-18_snippet_0",
    "pageTitle": "WebContentsView in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BaseWindow, WebContentsView } = require('electron')\nconst win = new BaseWindow({ width: 800, height: 400 })\n\nconst view1 = new WebContentsView()\nwin.contentView.addChildView(view1)\nview1.webContents.loadURL('https://electronjs.org')\nview1.setBounds({ x: 0, y: 0, width: 400, height: 400 })\n\nconst view2 = new WebContentsView()\nwin.contentView.addChildView(view2)\nview2.webContents.loadURL('https://github.com/electron/electron')\nview2.setBounds({ x: 400, y: 0, width: 400, height: 400 })"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Implementing main process logic in Electron",
    "codeDescription": "Main process script to create a BrowserWindow and load an HTML file when the app is ready.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-18_snippet_4",
    "pageTitle": "Building Your First Electron App",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow } = require('electron')\n\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\napp.whenReady().then(() => {\n  createWindow()\n})"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Exposing APIs with Context Isolation using contextBridge",
    "codeDescription": "Demonstrates the recommended way to expose APIs from preload scripts when context isolation is enabled. Uses the contextBridge module to safely share functionality between contexts.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-18_snippet_2",
    "pageTitle": "Context Isolation in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// preload with contextIsolation enabled\nconst { contextBridge } = require('electron')\n\ncontextBridge.exposeInMainWorld('myAPI', {\n  doAThing: () => {}\n})"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Handling Invokable IPC Messages in Electron Main Process",
    "codeDescription": "Demonstrates how to use ipcMain.handle() to process invokable IPC messages from renderer processes. The handler function can return a Promise or a direct value, which will be sent back to the renderer process as a reply.",
    "codeLanguage": "javascript",
    "codeTokens": 95,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/ipc-main.md#2025-04-18_snippet_0",
    "pageTitle": "ipcMain API in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "ipcMain.handle('my-invokable-ipc', async (event, ...args) => {\n  const result = await somePromise(...args)\n  return result\n})"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Creating Basic BrowserWindow - Electron JavaScript",
    "codeDescription": "Demonstrates basic creation of a BrowserWindow instance and loading content from remote URL or local file.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_0",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "// In the main process.\nconst { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow({ width: 800, height: 600 })\n\n// Load a remote URL\nwin.loadURL('https://github.com')\n\n// Or load a local HTML file\nwin.loadFile('index.html')"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Using MessageChannelMain to communicate between main and renderer processes in Electron",
    "codeDescription": "This example demonstrates how to create a MessageChannel in the main process, transfer one port to a renderer process, and then use it for communication. The main process creates the channel, sends port2 to the renderer, and posts a message through port1. The renderer listens for the port and sets up a message handler.",
    "codeLanguage": "javascript",
    "codeTokens": 211,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/message-channel-main.md#2025-04-18_snippet_0",
    "pageTitle": "MessageChannelMain Module in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Main process\nconst { BrowserWindow, MessageChannelMain } = require('electron')\nconst w = new BrowserWindow()\nconst { port1, port2 } = new MessageChannelMain()\nw.webContents.postMessage('port', null, [port2])\nport1.postMessage({ some: 'message' })\n\n// Renderer process\nconst { ipcRenderer } = require('electron')\nipcRenderer.on('port', (e) => {\n  // e.ports is a list of ports sent along with this message\n  e.ports[0].onmessage = (messageEvent) => {\n    console.log(messageEvent.data)\n  }\n})"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Implementing Offscreen Rendering in Electron",
    "codeDescription": "Example demonstrating how to create an offscreen BrowserWindow that captures webpage content and saves it as a PNG file. The code disables hardware acceleration, sets up an offscreen window with a 60fps frame rate, and handles window lifecycle events.",
    "codeLanguage": "javascript",
    "codeTokens": 285,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/offscreen-rendering.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Offscreen Rendering Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow } = require('electron/main')\nconst fs = require('node:fs')\nconst path = require('node:path')\n\napp.disableHardwareAcceleration()\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      offscreen: true\n    }\n  })\n\n  win.loadURL('https://github.com')\n  win.webContents.on('paint', (event, dirty, image) => {\n    fs.writeFileSync('ex.png', image.toPNG())\n  })\n  win.webContents.setFrameRate(60)\n  console.log(`The screenshot has been successfully saved to ${path.join(process.cwd(), 'ex.png')}`)\n}\n\napp.whenReady().then(() => {\n  createWindow()\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Setting Window Button Position on macOS",
    "codeDescription": "Method to set a custom position for the traffic light buttons in a frameless window. Takes a Point object or null as parameter.",
    "codeLanguage": "JavaScript",
    "codeTokens": 51,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_26",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "win.setWindowButtonPosition(position)"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Making HTTP Request with Electron's Net Module",
    "codeDescription": "Demonstrates how to use the 'net' module to make an HTTPS request to GitHub. The example shows event handling for response, data chunks, and request completion.",
    "codeLanguage": "javascript",
    "codeTokens": 173,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/net.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Net Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app } = require('electron')\napp.whenReady().then(() => {\n  const { net } = require('electron')\n  const request = net.request('https://github.com')\n  request.on('response', (response) => {\n    console.log(`STATUS: ${response.statusCode}`)\n    console.log(`HEADERS: ${JSON.stringify(response.headers)}`)\n    response.on('data', (chunk) => {\n      console.log(`BODY: ${chunk}`)\n    })\n    response.on('end', () => {\n      console.log('No more data in response.')\n    })\n  })\n  request.end()\n})"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Starting and Stopping Content Tracing in Electron",
    "codeDescription": "This example demonstrates how to use the contentTracing module to record tracing data. It starts recording when the app is ready, waits for 5 seconds, then stops recording and logs the path to the recorded data file.",
    "codeLanguage": "javascript",
    "codeTokens": 155,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/content-tracing.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Content Tracing API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, contentTracing } = require('electron')\n\napp.whenReady().then(() => {\n  (async () => {\n    await contentTracing.startRecording({\n      included_categories: ['*']\n    })\n    console.log('Tracing started')\n    await new Promise(resolve => setTimeout(resolve, 5000))\n    const path = await contentTracing.stopRecording()\n    console.log('Tracing data recorded to ' + path)\n  })()\n})"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Transferring MessagePorts Between Renderer and Main Process",
    "codeDescription": "Demonstrates how to transfer MessagePort objects between renderer and main processes using ipcRenderer.postMessage(). This enables direct communication channels between processes.",
    "codeLanguage": "javascript",
    "codeTokens": 108,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/ipc-renderer.md#2025-04-18_snippet_1",
    "pageTitle": "IPC Renderer Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Renderer process\nconst { port1, port2 } = new MessageChannel()\nipcRenderer.postMessage('port', { message: 'hello' }, [port1])\n\n// Main process\nipcMain.on('port', (e, msg) => {\n  const [port] = e.ports\n  // ...\n})"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Configuring package.json for Electron app",
    "codeDescription": "Example package.json file for an Electron project, including main script and start command.",
    "codeLanguage": "json",
    "codeTokens": 139,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-18_snippet_1",
    "pageTitle": "Building Your First Electron App",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"name\": \"my-electron-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Hello World!\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"Jane Doe\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"electron\": \"23.1.3\"\n  }\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Setting up crashReporter in Electron",
    "codeDescription": "Example of configuring Electron to automatically submit crash reports to a remote server. This code initializes the crashReporter module with a submission URL.",
    "codeLanguage": "javascript",
    "codeTokens": 71,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/crash-reporter.md#2025-04-18_snippet_0",
    "pageTitle": "Electron crashReporter Module",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { crashReporter } = require('electron')\n\ncrashReporter.start({ submitURL: 'https://your-domain.com/url-to-submit' })"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Exposing APIs to Renderer Process Using contextBridge in Preload Script",
    "codeDescription": "This code demonstrates how to use the contextBridge module to securely expose custom APIs from the preload script to the renderer process.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-18_snippet_3",
    "pageTitle": "Electron Process Model Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { contextBridge } = require('electron')\n\ncontextBridge.exposeInMainWorld('myAPI', {\n  desktop: true\n})"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Creating Basic Tray Icon with Context Menu in Electron",
    "codeDescription": "Demonstrates how to create a basic system tray icon with a context menu containing radio menu items. The code shows initialization of the tray icon and setting up a context menu with multiple items.",
    "codeLanguage": "javascript",
    "codeTokens": 178,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Tray API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, Menu, Tray } = require('electron')\n\nlet tray = null\napp.whenReady().then(() => {\n  tray = new Tray('/path/to/my/icon')\n  const contextMenu = Menu.buildFromTemplate([\n    { label: 'Item1', type: 'radio' },\n    { label: 'Item2', type: 'radio' },\n    { label: 'Item3', type: 'radio', checked: true },\n    { label: 'Item4', type: 'radio' }\n  ])\n  tray.setToolTip('This is my application.')\n  tray.setContextMenu(contextMenu)\n})"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Implementing Online/Offline Event Listeners in Electron's Renderer Process",
    "codeDescription": "This JavaScript file for the renderer process adds event listeners for 'online' and 'offline' events. It updates the status display in the HTML based on the navigator.onLine property.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/online-offline-events.md#2025-04-18_snippet_1",
    "pageTitle": "Online/Offline Event Detection in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const updateOnlineStatus = () => {\n  document.getElementById('status').innerHTML = navigator.onLine ? 'online' : 'offline'\n}\n\nwindow.addEventListener('online', updateOnlineStatus)\nwindow.addEventListener('offline', updateOnlineStatus)\n\nupdateOnlineStatus()"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Using Exposed APIs in Renderer with Context Isolation",
    "codeDescription": "Shows how to access APIs exposed through contextBridge in the renderer process. The API is accessed the same way as before, but is now safely isolated.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-18_snippet_3",
    "pageTitle": "Context Isolation in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// use the exposed API in the renderer\nwindow.myAPI.doAThing()"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Using the Mousetrap Library for Advanced Keyboard Shortcut Handling",
    "codeDescription": "Demonstrates the use of the third-party Mousetrap library for handling complex keyboard shortcuts in Electron's renderer process, including key combinations, sequences, and the Konami code.",
    "codeLanguage": "javascript",
    "codeTokens": 265,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#2025-04-18_snippet_4",
    "pageTitle": "Keyboard Shortcuts in Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "Mousetrap.bind('4', () => { console.log('4') })\nMousetrap.bind('?', () => { console.log('show shortcuts!') })\nMousetrap.bind('esc', () => { console.log('escape') }, 'keyup')\n\n// combinations\nMousetrap.bind('command+shift+k', () => { console.log('command shift k') })\n\n// map multiple combinations to the same callback\nMousetrap.bind(['command+k', 'ctrl+k'], () => {\n  console.log('command k or control k')\n\n  // return false to prevent default behavior and stop event from bubbling\n  return false\n})\n\n// gmail style sequences\nMousetrap.bind('g i', () => { console.log('go to inbox') })\nMousetrap.bind('* a', () => { console.log('select all') })\n\n// konami code!\nMousetrap.bind('up up down down left right left right b a enter', () => {\n  console.log('konami code')\n})"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing IPC Communication in Renderer",
    "codeDescription": "Demonstrates how to invoke IPC communication from the renderer process to the main process.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-18_snippet_6",
    "pageTitle": "Electron Preload Scripts Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "const func = async () => {\n  const response = await window.versions.ping()\n  console.log(response) // prints out 'pong'\n}\n\nfunc()"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Invoking IPC Communication Between Renderer and Main Process",
    "codeDescription": "Example showing how to invoke asynchronous communication between renderer and main processes using ipcRenderer.invoke() and ipcMain.handle(). The renderer sends a request and receives a Promise-based response from the main process.",
    "codeLanguage": "javascript",
    "codeTokens": 116,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/ipc-renderer.md#2025-04-18_snippet_0",
    "pageTitle": "IPC Renderer Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Renderer process\nipcRenderer.invoke('some-name', someArgument).then((result) => {\n  // ...\n})\n\n// Main process\nipcMain.handle('some-name', async (event, someArgument) => {\n  const result = await doSomeWork(someArgument)\n  return result\n})"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Setting up IPC Handler in Main Process",
    "codeDescription": "Configures the main process to handle IPC communications from the renderer process.",
    "codeLanguage": "javascript",
    "codeTokens": 137,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-18_snippet_5",
    "pageTitle": "Electron Preload Scripts Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow, ipcMain } = require('electron/main')\nconst path = require('node:path')\n\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n  win.loadFile('index.html')\n}\napp.whenReady().then(() => {\n  ipcMain.handle('ping', () => 'pong')\n  createWindow()\n})"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Creating and Loading Content in Electron BrowserWindow",
    "codeDescription": "This snippet shows how to create a new BrowserWindow instance with specific dimensions and load a URL into it. It demonstrates the basic pattern for initializing and using a BrowserWindow in Electron applications.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_7",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\n// In this example `win` is our instance\nconst win = new BrowserWindow({ width: 800, height: 600 })\nwin.loadURL('https://github.com')"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Running Electron with the --inspect Flag for Main Process Debugging",
    "codeDescription": "Command to start Electron with debugging enabled on port 9229. This allows an external debugger to connect to the main process for inspection and debugging.",
    "codeLanguage": "shell",
    "codeTokens": 56,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/debugging-main-process.md#2025-04-18_snippet_0",
    "pageTitle": "Debugging the Main Process in Electron",
    "codeList": [
      {
        "language": "shell",
        "code": "electron --inspect=9229 your/app"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Handling Asynchronous Open Dialog Results in Electron",
    "codeDescription": "This snippet shows how to use the asynchronous showOpenDialog method and handle its results using promises. It demonstrates accessing the canceled status and selected file paths.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-18_snippet_3",
    "pageTitle": "Electron Dialog Module",
    "codeList": [
      {
        "language": "javascript",
        "code": "dialog.showOpenDialog(mainWindow, {\n  properties: ['openFile', 'openDirectory']\n}).then(result => {\n  console.log(result.canceled)\n  console.log(result.filePaths)\n}).catch(err => {\n  console.log(err)\n})"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Setting up Desktop Capture in Main Process with Electron",
    "codeDescription": "This code demonstrates how to set up desktop capture in the main process of an Electron application. It creates a BrowserWindow, configures the session's display media request handler to capture the screen, and loads an HTML file.",
    "codeLanguage": "javascript",
    "codeTokens": 229,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/desktop-capturer.md#2025-04-18_snippet_0",
    "pageTitle": "Desktop Capturer Module in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// main.js\nconst { app, BrowserWindow, desktopCapturer, session } = require('electron')\n\napp.whenReady().then(() => {\n  const mainWindow = new BrowserWindow()\n\n  session.defaultSession.setDisplayMediaRequestHandler((request, callback) => {\n    desktopCapturer.getSources({ types: ['screen'] }).then((sources) => {\n      // Grant access to the first screen found.\n      callback({ video: sources[0], audio: 'loopback' })\n    })\n    // If true, use the system picker if available.\n    // Note: this is currently experimental. If the system picker\n    // is available, it will be used and the media request handler\n    // will not be invoked.\n  }, { useSystemPicker: true })\n\n  mainWindow.loadFile('index.html')\n})"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Loading React Developer Tools Extension in Electron",
    "codeDescription": "This code snippet demonstrates how to load the React Developer Tools extension in an Electron application on macOS. It uses the session API to load the extension from its filesystem location.",
    "codeLanguage": "JavaScript",
    "codeTokens": 161,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/devtools-extension.md#2025-04-18_snippet_0",
    "pageTitle": "DevTools Extension Support in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, session } = require('electron')\nconst path = require('node:path')\nconst os = require('node:os')\n\n// on macOS\nconst reactDevToolsPath = path.join(\n  os.homedir(),\n  '/Library/Application Support/Google/Chrome/Default/Extensions/fmkadmapgofadopljbjfkapdkoienihi/4.9.0_0'\n)\n\napp.whenReady().then(async () => {\n  await session.defaultSession.loadExtension(reactDevToolsPath)\n})"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Cloning and Running the Electron Quick Start Repository",
    "codeDescription": "Shows how to clone the electron-quick-start repository and run a minimal Electron app. This provides a practical example of setting up and starting an Electron application.",
    "codeLanguage": "sh",
    "codeTokens": 71,
    "codeId": "https://github.com/electron/electron/blob/main/README.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Framework Overview",
    "codeList": [
      {
        "language": "sh",
        "code": "git clone https://github.com/electron/electron-quick-start\ncd electron-quick-start\nnpm install\nnpm start"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Parent-Child Process Communication in Electron",
    "codeDescription": "This example demonstrates how to communicate between a main process and a utility process using the parentPort interface. The main process sends a message to the child process, which then responds with a modified message. The parentPort object emits 'message' events when receiving data and provides postMessage() method for sending data.",
    "codeLanguage": "javascript",
    "codeTokens": 156,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/parent-port.md#2025-04-18_snippet_0",
    "pageTitle": "Parent Port Communication in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Main process\nconst child = utilityProcess.fork(path.join(__dirname, 'test.js'))\nchild.postMessage({ message: 'hello' })\nchild.on('message', (data) => {\n  console.log(data) // hello world!\n})\n\n// Child process\nprocess.parentPort.on('message', (e) => {\n  process.parentPort.postMessage(`${e.data} world!`)\n})"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Optimized Lazy Loading in Node.js (JavaScript)",
    "codeDescription": "This snippet shows an optimized version of the previous code, implementing lazy loading of dependencies and asynchronous file reading. It defers expensive operations until they are actually needed, improving performance and resource utilization.",
    "codeLanguage": "javascript",
    "codeTokens": 143,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/performance.md#2025-04-18_snippet_2",
    "pageTitle": "Performance Optimization Guidelines for Electron Apps",
    "codeList": [
      {
        "language": "javascript",
        "code": "const fs = require('node:fs')\n\nclass Parser {\n  async getFiles () {\n    this.files = this.files || await fs.promises.readdir('.')\n\n    return this.files\n  }\n\n  async getParsedFiles () {\n    const fooParser = require('foo-parser')\n    const files = await this.getFiles()\n\n    return fooParser.parse(files)\n  }\n}\n\nconst parser = new Parser()\n\nmodule.exports = { parser }"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Creating Application Menu with Template API in Electron",
    "codeDescription": "This snippet demonstrates how to create an application menu in Electron using the template API. It creates a platform-specific menu structure with standard menu items and roles, handling macOS-specific differences.",
    "codeLanguage": "javascript",
    "codeTokens": 689,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Menu API Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, Menu } = require('electron')\n\nconst isMac = process.platform === 'darwin'\n\nconst template = [\n  // { role: 'appMenu' }\n  ...(isMac\n    ? [{\n        label: app.name,\n        submenu: [\n          { role: 'about' },\n          { type: 'separator' },\n          { role: 'services' },\n          { type: 'separator' },\n          { role: 'hide' },\n          { role: 'hideOthers' },\n          { role: 'unhide' },\n          { type: 'separator' },\n          { role: 'quit' }\n        ]\n      }]\n    : []),\n  // { role: 'fileMenu' }\n  {\n    label: 'File',\n    submenu: [\n      isMac ? { role: 'close' } : { role: 'quit' }\n    ]\n  },\n  // { role: 'editMenu' }\n  {\n    label: 'Edit',\n    submenu: [\n      { role: 'undo' },\n      { role: 'redo' },\n      { type: 'separator' },\n      { role: 'cut' },\n      { role: 'copy' },\n      { role: 'paste' },\n      ...(isMac\n        ? [\n            { role: 'pasteAndMatchStyle' },\n            { role: 'delete' },\n            { role: 'selectAll' },\n            { type: 'separator' },\n            {\n              label: 'Speech',\n              submenu: [\n                { role: 'startSpeaking' },\n                { role: 'stopSpeaking' }\n              ]\n            }\n          ]\n        : [\n            { role: 'delete' },\n            { type: 'separator' },\n            { role: 'selectAll' }\n          ])\n    ]\n  },\n  // { role: 'viewMenu' }\n  {\n    label: 'View',\n    submenu: [\n      { role: 'reload' },\n      { role: 'forceReload' },\n      { role: 'toggleDevTools' },\n      { type: 'separator' },\n      { role: 'resetZoom' },\n      { role: 'zoomIn' },\n      { role: 'zoomOut' },\n      { type: 'separator' },\n      { role: 'togglefullscreen' }\n    ]\n  },\n  // { role: 'windowMenu' }\n  {\n    label: 'Window',\n    submenu: [\n      { role: 'minimize' },\n      { role: 'zoom' },\n      ...(isMac\n        ? [\n            { type: 'separator' },\n            { role: 'front' },\n            { type: 'separator' },\n            { role: 'window' }\n          ]\n        : [\n            { role: 'close' }\n          ])\n    ]\n  },\n  {\n    role: 'help',\n    submenu: [\n      {\n        label: 'Learn More',\n        click: async () => {\n          const { shell } = require('electron')\n          await shell.openExternal('https://electronjs.org')\n        }\n      }\n    ]\n  }\n]\n\nconst menu = Menu.buildFromTemplate(template)\nMenu.setApplicationMenu(menu)"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Creating and Managing Browser Windows in Electron's Main Process",
    "codeDescription": "This snippet demonstrates how to create a BrowserWindow instance in the main process, load a URL, and access the window's webContents object.",
    "codeLanguage": "javascript",
    "codeTokens": 92,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Process Model Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow({ width: 800, height: 1500 })\nwin.loadURL('https://github.com')\n\nconst contents = win.webContents\nconsole.log(contents)"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Reading HTML from Clipboard",
    "codeDescription": "Demonstrates how to read HTML markup content from the system clipboard. This example writes HTML to the clipboard first, then reads it back.",
    "codeLanguage": "javascript",
    "codeTokens": 88,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-18_snippet_3",
    "pageTitle": "Electron Clipboard API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { clipboard } = require('electron')\n\nclipboard.writeHTML('<b>Hi</b>')\nconst html = clipboard.readHTML()\n\nconsole.log(html)\n// <meta charset='utf-8'><b>Hi</b>"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Exposing API from Preload Script",
    "codeDescription": "Example of exposing an API to a renderer from an isolated preload script using contextBridge.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-18_snippet_0",
    "pageTitle": "Context Bridge in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld(\n  'electron',\n  {\n    doThing: () => ipcRenderer.send('do-a-thing')\n  }\n)"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Message Port Communication Example in Electron",
    "codeDescription": "Demonstrates how to establish communication between main process and child process using MessagePort in Electron's utilityProcess",
    "codeLanguage": "javascript",
    "codeTokens": 113,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/utility-process.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Utility Process Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Main process\nconst { port1, port2 } = new MessageChannelMain()\nconst child = utilityProcess.fork(path.join(__dirname, 'test.js'))\nchild.postMessage({ message: 'hello' }, [port1])\n\n// Child process\nprocess.parentPort.once('message', (e) => {\n  const [port] = e.ports\n  // ...\n})"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Configuring Main Process with Preload Script in Electron",
    "codeDescription": "Sets up the main process window with preload script configuration using BrowserWindow constructor.",
    "codeLanguage": "javascript",
    "codeTokens": 122,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Preload Scripts Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow } = require('electron')\nconst path = require('node:path')\n\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n\n  win.loadFile('index.html')\n}\n\napp.whenReady().then(() => {\n  createWindow()\n})"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Implementing Local Keyboard Shortcuts in Electron",
    "codeDescription": "Creates a local keyboard shortcut using Electron's Menu module. The shortcut is triggered only when the application is focused and uses platform-specific accelerator combinations.",
    "codeLanguage": "javascript",
    "codeTokens": 241,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#2025-04-18_snippet_0",
    "pageTitle": "Keyboard Shortcuts in Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow, Menu, MenuItem } = require('electron/main')\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\nconst menu = new Menu()\nmenu.append(new MenuItem({\n  label: 'Electron',\n  submenu: [{\n    role: 'help',\n    accelerator: process.platform === 'darwin' ? 'Alt+Cmd+I' : 'Alt+Shift+I',\n    click: () => { console.log('Electron rocks!') }\n  }]\n}))\n\nMenu.setApplicationMenu(menu)\n\napp.whenReady().then(createWindow)\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Cloning and Opening Electron Quick Start in VSCode",
    "codeDescription": "Commands to clone the electron-quick-start repository and open it in Visual Studio Code for debugging purposes.",
    "codeLanguage": "sh",
    "codeTokens": 61,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/debugging-vscode.md#2025-04-18_snippet_0",
    "pageTitle": "Debugging Electron Applications in VSCode",
    "codeList": [
      {
        "language": "sh",
        "code": "$ git clone git@github.com:electron/electron-quick-start.git\n$ code electron-quick-start"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Fetching Resources with Electron's Net Module",
    "codeDescription": "Shows how to use the 'net.fetch()' method to send a request and handle the response asynchronously. This method is similar to the browser's fetch API but uses Chrome's network stack.",
    "codeLanguage": "javascript",
    "codeTokens": 96,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/net.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Net Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function example () {\n  const response = await net.fetch('https://my.app')\n  if (response.ok) {\n    const body = await response.json()\n    // ... use the result.\n  }\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Implementing Preload Script with Context Bridge in Electron",
    "codeDescription": "Creates a preload script that exposes Chrome, Node, and Electron version information to the renderer process using contextBridge API.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Preload Scripts Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { contextBridge } = require('electron')\n\ncontextBridge.exposeInMainWorld('versions', {\n  node: () => process.versions.node,\n  chrome: () => process.versions.chrome,\n  electron: () => process.versions.electron\n  // we can also expose variables, not just functions\n})"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Accessing MenuItem Properties in Electron",
    "codeDescription": "This snippet demonstrates the various properties available on a MenuItem object in Electron. It includes properties for managing the item's label, visibility, state, and associated actions.",
    "codeLanguage": "markdown",
    "codeTokens": 337,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/menu-item.md#2025-04-18_snippet_1",
    "pageTitle": "MenuItem Class Documentation - Electron Framework",
    "codeList": [
      {
        "language": "markdown",
        "code": "#### `menuItem.sublabel`\n\nA `string` indicating the item's sublabel.\n\n#### `menuItem.toolTip` _macOS_\n\nA `string` indicating the item's hover text.\n\n#### `menuItem.enabled`\n\nA `boolean` indicating whether the item is enabled, this property can be\ndynamically changed.\n\n#### `menuItem.visible`\n\nA `boolean` indicating whether the item is visible, this property can be\ndynamically changed.\n\n#### `menuItem.checked`\n\nA `boolean` indicating whether the item is checked, this property can be\ndynamically changed.\n\nA `checkbox` menu item will toggle the `checked` property on and off when\nselected.\n\nA `radio` menu item will turn on its `checked` property when clicked, and\nwill turn off that property for all adjacent items in the same menu.\n\nYou can add a `click` function for additional behavior.\n\n#### `menuItem.registerAccelerator`\n\nA `boolean` indicating if the accelerator should be registered with the\nsystem or just displayed.\n\nThis property can be dynamically changed.\n\n#### `menuItem.sharingItem` _macOS_\n\nA `SharingItem` indicating the item to share when the `role` is `shareMenu`.\n\nThis property can be dynamically changed.\n\n#### `menuItem.commandId`\n\nA `number` indicating an item's sequential unique id.\n\n#### `menuItem.menu`\n\nA `Menu` that the item is a part of."
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Initializing npm project and installing Electron",
    "codeDescription": "Commands to create a new directory, initialize an npm project, and install Electron as a dev dependency.",
    "codeLanguage": "shell",
    "codeTokens": 58,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-18_snippet_0",
    "pageTitle": "Building Your First Electron App",
    "codeList": [
      {
        "language": "shell",
        "code": "mkdir my-electron-app && cd my-electron-app\nnpm init\nnpm install electron --save-dev"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating a BrowserWindow with Preload Script in Electron's Main Process",
    "codeDescription": "This snippet illustrates how to create a BrowserWindow instance with a preload script specified in the webPreferences option.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Process Model Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\n// ...\nconst win = new BrowserWindow({\n  webPreferences: {\n    preload: 'path/to/preload.js'\n  }\n})\n// ..."
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Adding User-Agent Header for Requests in Electron",
    "codeDescription": "Example of modifying HTTP requests by adding a custom User-Agent header for specific URLs using Electron's webRequest API. The code applies a filter to only modify requests to GitHub-related domains.",
    "codeLanguage": "javascript",
    "codeTokens": 141,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-request.md#2025-04-18_snippet_0",
    "pageTitle": "WebRequest Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { session } = require('electron')\n\n// Modify the user agent for all requests to the following urls.\nconst filter = {\n  urls: ['https://*.github.com/*', '*://electron.github.io/*']\n}\n\nsession.defaultSession.webRequest.onBeforeSendHeaders(filter, (details, callback) => {\n  details.requestHeaders['User-Agent'] = 'MyAgent'\n  callback({ requestHeaders: details.requestHeaders })\n})"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Creating BrowserView in Electron Main Process",
    "codeDescription": "Example showing how to create a BrowserView instance, attach it to a BrowserWindow, set its bounds and load a URL. Must be run in the main process after the app is ready.",
    "codeLanguage": "javascript",
    "codeTokens": 150,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-view.md#2025-04-18_snippet_0",
    "pageTitle": "BrowserView API Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserView, BrowserWindow } = require('electron')\n\napp.whenReady().then(() => {\n  const win = new BrowserWindow({ width: 800, height: 600 })\n\n  const view = new BrowserView()\n  win.setBrowserView(view)\n  view.setBounds({ x: 0, y: 0, width: 300, height: 300 })\n  view.webContents.loadURL('https://electronjs.org')\n})"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Attaching and Using Debugger in Electron (JavaScript)",
    "codeDescription": "This snippet demonstrates how to create a BrowserWindow, attach a debugger to its webContents, handle debugger events, and send a command. It includes error handling for debugger attachment and shows how to detach the debugger based on specific network requests.",
    "codeLanguage": "javascript",
    "codeTokens": 210,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/debugger.md#2025-04-18_snippet_0",
    "pageTitle": "Debugger Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n\ntry {\n  win.webContents.debugger.attach('1.1')\n} catch (err) {\n  console.log('Debugger attach failed : ', err)\n}\n\nwin.webContents.debugger.on('detach', (event, reason) => {\n  console.log('Debugger detached due to : ', reason)\n})\n\nwin.webContents.debugger.on('message', (event, method, params) => {\n  if (method === 'Network.requestWillBeSent') {\n    if (params.request.url === 'https://www.github.com') {\n      win.webContents.debugger.detach()\n    }\n  }\n})\n\nwin.webContents.debugger.sendCommand('Network.enable')"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Creating a ClientRequest for HTTPS in Electron",
    "codeDescription": "Demonstrates how to create a ClientRequest object for an HTTPS request to github.com using the net.request method in Electron.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-18_snippet_0",
    "pageTitle": "ClientRequest Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const request = net.request({\n  method: 'GET',\n  protocol: 'https:',\n  hostname: 'github.com',\n  port: 443,\n  path: '/'\n})"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Using dialog.showMessageBox Method in Electron",
    "codeDescription": "Shows an asynchronous message box that returns a Promise with the response. Can be customized with various options including message content, buttons, checkboxes, and icons. Supports attaching to a parent window.",
    "codeLanguage": "JavaScript",
    "codeTokens": 61,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-18_snippet_6",
    "pageTitle": "Electron Dialog Module",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "dialog.showMessageBox([window, ]options)"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Creating a simple main.js for Electron",
    "codeDescription": "Initial main.js file to test Electron setup by logging a message to the console.",
    "codeLanguage": "javascript",
    "codeTokens": 42,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-18_snippet_2",
    "pageTitle": "Building Your First Electron App",
    "codeList": [
      {
        "language": "javascript",
        "code": "console.log('Hello from Electron 👋')"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Progress Bar in Electron BrowserWindow",
    "codeDescription": "Creates an Electron application with a progress bar that incrementally updates in the taskbar/dock. The example demonstrates how to create a window, set up a progress interval, and handle application lifecycle events. The progress bar cycles between 0 and 2, showing both determinate and indeterminate states.",
    "codeLanguage": "javascript",
    "codeTokens": 354,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/progress-bar.md#2025-04-18_snippet_0",
    "pageTitle": "Progress Bar Implementation in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow } = require('electron/main')\n\nlet progressInterval\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n\n  const INCREMENT = 0.03\n  const INTERVAL_DELAY = 100 // ms\n\n  let c = 0\n  progressInterval = setInterval(() => {\n    // update progress bar to next value\n    // values between 0 and 1 will show progress, >1 will show indeterminate or stick at 100%\n    win.setProgressBar(c)\n\n    // increment or reset progress bar\n    if (c < 2) {\n      c += INCREMENT\n    } else {\n      c = (-INCREMENT * 5) // reset to a bit less than 0 to show reset state\n    }\n  }, INTERVAL_DELAY)\n}\n\napp.whenReady().then(createWindow)\n\n// before the app is terminated, clear both timers\napp.on('before-quit', () => {\n  clearInterval(progressInterval)\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Displaying Notifications in Electron Main Process",
    "codeDescription": "A basic example of creating and displaying a notification from the main process using Electron's Notification module. This creates a notification with a title and body text and displays it using the show() method.",
    "codeLanguage": "javascript",
    "codeTokens": 104,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/notifications.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Notifications Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { Notification } = require('electron')\n\nconst NOTIFICATION_TITLE = 'Basic Notification'\nconst NOTIFICATION_BODY = 'Notification from the Main process'\n\nnew Notification({\n  title: NOTIFICATION_TITLE,\n  body: NOTIFICATION_BODY\n}).show()"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Renderer Process Script in Electron",
    "codeDescription": "Creates a renderer script that displays version information using the exposed versions API from preload script.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Preload Scripts Tutorial",
    "codeList": [
      {
        "language": "javascript",
        "code": "const information = document.getElementById('info')\ninformation.innerText = `This app is using Chrome (v${versions.chrome()}), Node.js (v${versions.node()}), and Electron (v${versions.electron()})`"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Handling File Downloads with DownloadItem in Electron (JavaScript)",
    "codeDescription": "This code snippet demonstrates how to use the DownloadItem class in Electron's main process. It shows how to set a custom save path, handle download state changes, and respond to download completion events.",
    "codeLanguage": "javascript",
    "codeTokens": 258,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/download-item.md#2025-04-18_snippet_0",
    "pageTitle": "DownloadItem Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// In the main process.\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.webContents.session.on('will-download', (event, item, webContents) => {\n  // Set the save path, making Electron not to prompt a save dialog.\n  item.setSavePath('/tmp/save.pdf')\n\n  item.on('updated', (event, state) => {\n    if (state === 'interrupted') {\n      console.log('Download is interrupted but can be resumed')\n    } else if (state === 'progressing') {\n      if (item.isPaused()) {\n        console.log('Download is paused')\n      } else {\n        console.log(`Received bytes: ${item.getReceivedBytes()}`)\n      }\n    }\n  })\n  item.once('done', (event, state) => {\n    if (state === 'completed') {\n      console.log('Download successfully')\n    } else {\n      console.log(`Download failed: ${state}`)\n    }\n  })\n})"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring File Filters for Electron Dialog",
    "codeDescription": "This code snippet shows how to configure file filters for an open or save dialog in Electron. It specifies allowed file types and their extensions for images, movies, and custom file types.",
    "codeLanguage": "javascript",
    "codeTokens": 128,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Dialog Module",
    "codeList": [
      {
        "language": "javascript",
        "code": "{\n  filters: [\n    { name: 'Images', extensions: ['jpg', 'png', 'gif'] },\n    { name: 'Movies', extensions: ['mkv', 'avi', 'mp4'] },\n    { name: 'Custom File Type', extensions: ['as'] },\n    { name: 'All Files', extensions: ['*'] }\n  ]\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Installing Electron as a Development Dependency",
    "codeDescription": "Demonstrates how to install Electron as a development dependency in your app using npm. This is the preferred method for installing Electron.",
    "codeLanguage": "sh",
    "codeTokens": 46,
    "codeId": "https://github.com/electron/electron/blob/main/README.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Framework Overview",
    "codeList": [
      {
        "language": "sh",
        "code": "npm install electron --save-dev"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Creating a Notification in Electron's Main Process",
    "codeDescription": "Demonstrates how to create a new Notification object with various configuration options. This includes setting properties like title, body, icon, and OS-specific features.",
    "codeLanguage": "javascript",
    "codeTokens": 179,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/notification.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Notification API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "new Notification({\n  title: \"Notification Title\",\n  subtitle: \"Subtitle\", // macOS only\n  body: \"Notification message body\",\n  silent: false,\n  icon: \"path/to/icon.png\",\n  hasReply: true, // macOS only\n  timeoutType: \"default\", // Linux and Windows only\n  replyPlaceholder: \"Type your reply\", // macOS only\n  sound: \"Sound Name\", // macOS only\n  urgency: \"normal\", // Linux only\n  actions: [], // macOS only\n  closeButtonText: \"Close\", // macOS only\n  toastXml: \"<toast>...</toast>\" // Windows only\n})"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Implementing Global Keyboard Shortcuts in Electron",
    "codeDescription": "Sets up a global keyboard shortcut using Electron's globalShortcut module. The shortcut is active system-wide, even when the application does not have keyboard focus.",
    "codeLanguage": "javascript",
    "codeTokens": 198,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#2025-04-18_snippet_1",
    "pageTitle": "Keyboard Shortcuts in Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow, globalShortcut } = require('electron/main')\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\napp.whenReady().then(() => {\n  globalShortcut.register('Alt+CommandOrControl+I', () => {\n    console.log('Electron loves global shortcuts!')\n  })\n}).then(createWindow)\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Excluding a Window from the macOS Windows Menu",
    "codeDescription": "This snippet demonstrates how to exclude a specific BrowserWindow from appearing in the application's Windows menu on macOS. It creates a window, sets the excludedFromShownWindowsMenu property to true, and builds a menu with the windowmenu role.",
    "codeLanguage": "javascript",
    "codeTokens": 123,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_8",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "const win = new BrowserWindow({ height: 600, width: 600 })\n\nconst template = [\n  {\n    role: 'windowmenu'\n  }\n]\n\nwin.excludedFromShownWindowsMenu = true\n\nconst menu = Menu.buildFromTemplate(template)\nMenu.setApplicationMenu(menu)"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Displaying Notifications in Electron Renderer Process",
    "codeDescription": "An example of displaying notifications from the renderer process using the web Notifications API. This creates a notification with a title and body, and includes an onclick handler to log a message when the notification is clicked.",
    "codeLanguage": "javascript",
    "codeTokens": 116,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/notifications.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Notifications Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const NOTIFICATION_TITLE = 'Title'\nconst NOTIFICATION_BODY =\n  'Notification from the Renderer process. Click to log to console.'\nconst CLICK_MESSAGE = 'Notification clicked'\n\nnew Notification(NOTIFICATION_TITLE, { body: NOTIFICATION_BODY }).onclick =\n  () => console.log(CLICK_MESSAGE)"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Creating Custom macOS Dock Menu in Electron",
    "codeDescription": "This code demonstrates how to create a custom menu for the macOS Dock in an Electron application. It builds a menu with various options including a submenu, sets it to the dock using app.dock.setMenu, and creates a basic application window. The example includes event handling for window creation and application lifecycle.",
    "codeLanguage": "javascript",
    "codeTokens": 286,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/macos-dock.md#2025-04-18_snippet_0",
    "pageTitle": "Configuring macOS Dock in Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow, Menu } = require('electron/main')\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\nconst dockMenu = Menu.buildFromTemplate([\n  {\n    label: 'New Window',\n    click () { console.log('New Window') }\n  }, {\n    label: 'New Window with Settings',\n    submenu: [\n      { label: 'Basic' },\n      { label: 'Pro' }\n    ]\n  },\n  { label: 'New Command...' }\n])\n\napp.whenReady().then(() => {\n  app.dock?.setMenu(dockMenu)\n}).then(createWindow)\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Package.json Scripts Configuration",
    "codeDescription": "Script configuration in package.json for Electron Forge commands including start, package, and make scripts.",
    "codeLanguage": "json",
    "codeTokens": 73,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-5-packaging.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Application Packaging Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"scripts\": {\n    \"start\": \"electron-forge start\",\n    \"package\": \"electron-forge package\",\n    \"make\": \"electron-forge make\"\n  }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Showing and Closing a Notification in Electron",
    "codeDescription": "Demonstrates the basic usage of instance methods to display a notification to the user and dismiss it programmatically.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/notification.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Notification API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Create a notification\nconst notification = new Notification({ title: \"Hello\", body: \"World\" })\n\n// Show the notification (required to display it)\nnotification.show()\n\n// Dismiss the notification\nnotification.close()"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Restoring Navigation History Between Windows in Electron",
    "codeDescription": "Shows how to implement an \"undo close tab\" feature by restoring the navigation history from one window to another. This preserves both the history entries and the current position in the navigation stack.",
    "codeLanguage": "javascript",
    "codeTokens": 134,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/navigation-history.md#2025-04-18_snippet_4",
    "pageTitle": "Navigation History API in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const firstWindow = new BrowserWindow()\n\n// Later, you want a second window to have the same history and navigation position\nasync function restore () {\n  const entries = firstWindow.webContents.navigationHistory.getAllEntries()\n  const index = firstWindow.webContents.navigationHistory.getActiveIndex()\n\n  const secondWindow = new BrowserWindow()\n  await secondWindow.webContents.navigationHistory.restore({ index, entries })\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Loading Chrome Extensions in Electron Session",
    "codeDescription": "Demonstrates how to load an unpacked Chrome extension into Electron's default session. The extension must be loaded per-session and only works with persistent sessions. Returns a promise with the extension ID.",
    "codeLanguage": "javascript",
    "codeTokens": 87,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/extensions.md#2025-04-18_snippet_0",
    "pageTitle": "Chrome Extension Support in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { session } = require('electron')\n\nsession.defaultSession.loadExtension('path/to/unpacked/extension').then(({ id }) => {\n  // ...\n})"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Initializing TouchBarButton in Electron's Main Process",
    "codeDescription": "Creates a new TouchBarButton instance with customizable options including label, accessibility support, styling, and click behavior. This constructor is used within the main process to create touch bar buttons for macOS applications.",
    "codeLanguage": "javascript",
    "codeTokens": 61,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/touch-bar-button.md#2025-04-18_snippet_0",
    "pageTitle": "TouchBarButton Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "new TouchBarButton(options)"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Registering Global Keyboard Shortcut in Electron",
    "codeDescription": "Example demonstrating how to register a global keyboard shortcut using the globalShortcut module in Electron. Shows implementation of a CommandOrControl+Y shortcut listener.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/accelerator.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Accelerator Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, globalShortcut } = require('electron')\n\napp.whenReady().then(() => {\n  // Register a 'CommandOrControl+Y' shortcut listener.\n  globalShortcut.register('CommandOrControl+Y', () => {\n    // Do stuff when Y and either Command/Control is pressed.\n  })\n})"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Secure API Exposure Example",
    "codeDescription": "Demonstrates the recommended pattern for safely exposing IPC-based APIs. This approach provides one method per IPC message, limiting the scope of what websites can access.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-18_snippet_5",
    "pageTitle": "Context Isolation in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// ✅ Good code\ncontextBridge.exposeInMainWorld('myAPI', {\n  loadPreferences: () => ipcRenderer.invoke('load-prefs')\n})"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Adding Recent Documents Menu to macOS Application",
    "codeDescription": "Configuration for adding a Recent Documents menu item to the macOS application menu, including options to open recent files and clear the recent documents list.",
    "codeLanguage": "json",
    "codeTokens": 97,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/recent-documents.md#2025-04-18_snippet_1",
    "pageTitle": "Recent Documents Management in Electron",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"submenu\":[\n    {\n      \"label\":\"Open Recent\",\n      \"role\":\"recentdocuments\",\n      \"submenu\":[\n        {\n          \"label\":\"Clear Recent\",\n          \"role\":\"clearrecentdocuments\"\n        }\n      ]\n    }\n  ]\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating NativeImage Instances for Icons in Electron (JavaScript)",
    "codeDescription": "Shows how to create NativeImage instances from file paths and use them for tray and window icons in Electron's main process.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/native-image.md#2025-04-18_snippet_1",
    "pageTitle": "NativeImage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow, nativeImage, Tray } = require('electron')\n\nconst trayIcon = nativeImage.createFromPath('/Users/somebody/images/icon.png')\nconst appIcon = nativeImage.createFromPath('/Users/somebody/images/window.png')\nconst tray = new Tray(trayIcon)\nconst win = new BrowserWindow({ icon: appIcon })"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Registering and Managing Global Shortcuts in Electron",
    "codeDescription": "This example demonstrates how to register, check, and unregister global keyboard shortcuts in an Electron application. It also shows how to enable Wayland's GlobalShortcutsPortal and properly clean up shortcuts when the application quits.",
    "codeLanguage": "javascript",
    "codeTokens": 248,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/global-shortcut.md#2025-04-18_snippet_0",
    "pageTitle": "Electron globalShortcut Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, globalShortcut } = require('electron')\n\n// Enable usage of Portal's globalShortcuts. This is essential for cases when\n// the app runs in a Wayland session.\napp.commandLine.appendSwitch('enable-features', 'GlobalShortcutsPortal')\n\napp.whenReady().then(() => {\n  // Register a 'CommandOrControl+X' shortcut listener.\n  const ret = globalShortcut.register('CommandOrControl+X', () => {\n    console.log('CommandOrControl+X is pressed')\n  })\n\n  if (!ret) {\n    console.log('registration failed')\n  }\n\n  // Check whether a shortcut is registered.\n  console.log(globalShortcut.isRegistered('CommandOrControl+X'))\n})\n\napp.on('will-quit', () => {\n  // Unregister a shortcut.\n  globalShortcut.unregister('CommandOrControl+X')\n\n  // Unregister all shortcuts.\n  globalShortcut.unregisterAll()\n})"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating a Tray Icon with Automatic DPI Scaling in Electron (JavaScript)",
    "codeDescription": "Demonstrates how to create a tray icon that automatically uses the appropriate DPI-scaled image based on the display settings.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/native-image.md#2025-04-18_snippet_2",
    "pageTitle": "NativeImage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { Tray } = require('electron')\nconst appTray = new Tray('/Users/somebody/images/icon.png')"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating Context Menu from Renderer Process in Electron",
    "codeDescription": "This example demonstrates how to create a context menu triggered from the renderer process. It uses IPC to communicate between renderer and main processes, showing the menu when the user right-clicks on the page.",
    "codeLanguage": "javascript",
    "codeTokens": 212,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Menu API Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// renderer\nwindow.addEventListener('contextmenu', (e) => {\n  e.preventDefault()\n  ipcRenderer.send('show-context-menu')\n})\n\nipcRenderer.on('context-menu-command', (e, command) => {\n  // ...\n})\n\n// main\nipcMain.on('show-context-menu', (event) => {\n  const template = [\n    {\n      label: 'Menu Item 1',\n      click: () => { event.sender.send('context-menu-command', 'menu-item-1') }\n    },\n    { type: 'separator' },\n    { label: 'Menu Item 2', type: 'checkbox', checked: true }\n  ]\n  const menu = Menu.buildFromTemplate(template)\n  menu.popup({ window: BrowserWindow.fromWebContents(event.sender) })\n})"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Handling Notification Events in Electron",
    "codeDescription": "Shows how to listen for various events from a Notification object including show, click, close, and platform-specific events like reply and action.",
    "codeLanguage": "javascript",
    "codeTokens": 212,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/notification.md#2025-04-18_snippet_3",
    "pageTitle": "Electron Notification API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const notification = new Notification({ title: \"Event Example\", body: \"Click me\", hasReply: true })\n\n// Basic events\nnotification.on('show', (event) => {\n  console.log('Notification was shown')\n})\n\nnotification.on('click', (event) => {\n  console.log('Notification was clicked')\n})\n\nnotification.on('close', (event) => {\n  console.log('Notification was closed')\n})\n\n// macOS specific events\nnotification.on('reply', (event, reply) => {\n  console.log(`User replied: ${reply}`)\n})\n\nnotification.on('action', (event, index) => {\n  console.log(`Action at index ${index} was clicked`)\n})\n\n// Windows specific events\nnotification.on('failed', (event, error) => {\n  console.error(`Notification failed: ${error}`)\n})\n\nnotification.show()"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Create Custom Title Bar in Electron",
    "codeDescription": "Implements a basic custom title bar using HTML and CSS in the BrowserWindow webContents.",
    "codeLanguage": "javascript",
    "codeTokens": 48,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-18_snippet_2",
    "pageTitle": "Custom Title Bar Implementation in Electron",
    "codeList": [
      {
        "language": "fiddle",
        "code": "docs/fiddles/features/window-customization/custom-title-bar/custom-title-bar"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using Typed APIs in Renderer with TypeScript",
    "codeDescription": "Demonstrates how to use contextBridge-exposed APIs in the renderer process with TypeScript. The TypeScript compiler will recognize the API and provide type checking.",
    "codeLanguage": "typescript",
    "codeTokens": 54,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-18_snippet_8",
    "pageTitle": "Context Isolation in Electron",
    "codeList": [
      {
        "language": "typescript",
        "code": "window.electronAPI.loadPreferences()"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing Automatic Updates in Electron Main Process",
    "codeDescription": "This JavaScript code imports and calls the update-electron-app module in the main process. It sets up automatic updates for the Electron application using update.electronjs.org.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-18_snippet_4",
    "pageTitle": "Publishing and Updating Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "require('update-electron-app')()"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Writing Bookmarks to Clipboard",
    "codeDescription": "Shows how to write a bookmark (title and URL) to the clipboard on macOS and Windows. The title parameter is unused on Windows.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-18_snippet_7",
    "pageTitle": "Electron Clipboard API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { clipboard } = require('electron')\n\nclipboard.writeBookmark('Electron Homepage', 'https://electronjs.org')"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using IpcRenderer Wrapper",
    "codeDescription": "Example of using the safely exposed IpcRenderer wrapper in the renderer process.",
    "codeLanguage": "javascript",
    "codeTokens": 45,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-18_snippet_6",
    "pageTitle": "Context Bridge in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "window.electron.onMyEventName(data => { /* ... */ })"
      }
    ],
    "relevance": 0.954
  },
  {
    "codeTitle": "Accessing System Preferences in Electron",
    "codeDescription": "Demonstrates how to require and use the systemPreferences module to get the system's effective appearance setting.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/system-preferences.md#2025-04-18_snippet_0",
    "pageTitle": "System Preferences API Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { systemPreferences } = require('electron')\nconsole.log(systemPreferences.getEffectiveAppearance())"
      }
    ],
    "relevance": 0.953
  },
  {
    "codeTitle": "Monitoring Upload Progress in Electron",
    "codeDescription": "Method that returns an object containing upload progress information including active status, whether upload has started, current bytes uploaded, and total bytes to upload. Useful for tracking file uploads in POST requests.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-18_snippet_5",
    "pageTitle": "ClientRequest Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "request.getUploadProgress()"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Creating Parent and Child Windows - Electron JavaScript",
    "codeDescription": "Demonstrates creation of parent and child windows using the parent option.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_4",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\n\nconst top = new BrowserWindow()\nconst child = new BrowserWindow({ parent: top })\nchild.show()\ntop.show()"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Manually Building Native Modules for Electron using node-gyp",
    "codeDescription": "This snippet demonstrates how to use node-gyp to manually rebuild a native module for Electron, specifying the Electron version, architecture, and header location.",
    "codeLanguage": "sh",
    "codeTokens": 84,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-18_snippet_3",
    "pageTitle": "Native Node Modules in Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "cd /path-to-module/\nHOME=~/.electron-gyp node-gyp rebuild --target=1.2.3 --arch=x64 --dist-url=https://electronjs.org/headers"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Navigating Back and Forward Through Browser History in Electron",
    "codeDescription": "Demonstrates how to implement back and forward navigation using NavigationHistory. It checks if navigation is possible before attempting to navigate.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/navigation-history.md#2025-04-18_snippet_1",
    "pageTitle": "Navigation History API in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Go back\nif (navigationHistory.canGoBack()) {\n  navigationHistory.goBack()\n}\n\n// Go forward\nif (navigationHistory.canGoForward()) {\n  navigationHistory.goForward()\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Checking for Updates in Electron autoUpdater",
    "codeDescription": "Queries the server for available updates. Requires setFeedURL to be called first. Automatically downloads updates if available.",
    "codeLanguage": "javascript",
    "codeTokens": 45,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/auto-updater.md#2025-04-18_snippet_2",
    "pageTitle": "Electron autoUpdater Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "autoUpdater.checkForUpdates()"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Creating Modal Windows - Electron JavaScript",
    "codeDescription": "Shows how to create modal windows that disable their parent window using parent and modal options.",
    "codeLanguage": "javascript",
    "codeTokens": 95,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_5",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\n\nconst top = new BrowserWindow()\nconst child = new BrowserWindow({ parent: top, modal: true, show: false })\nchild.loadURL('https://github.com')\nchild.once('ready-to-show', () => {\n  child.show()\n})"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Fixing Tray Disappearance with Global Variables in Electron",
    "codeDescription": "This example shows how to prevent the app's tray icon from disappearing due to garbage collection by making the tray variable global instead of keeping it in local scope.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/electron/electron/blob/main/docs/faq.md#2025-04-18_snippet_0",
    "pageTitle": "Electron FAQ",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, Tray } = require('electron')\napp.whenReady().then(() => {\n  const tray = new Tray('/path/to/icon.png')\n  tray.setTitle('hello world')\n})"
      },
      {
        "language": "javascript",
        "code": "const { app, Tray } = require('electron')\nlet tray = null\napp.whenReady().then(() => {\n  tray = new Tray('/path/to/icon.png')\n  tray.setTitle('hello world')\n})"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Accessing Notification Properties in Electron",
    "codeDescription": "Shows how to access and modify various properties of a Notification instance after creation, including title, body, sound and other configuration options.",
    "codeLanguage": "javascript",
    "codeTokens": 138,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/notification.md#2025-04-18_snippet_4",
    "pageTitle": "Electron Notification API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const notification = new Notification({ title: \"Initial Title\" })\n\n// Accessing and modifying properties\nconsole.log(notification.title) // \"Initial Title\"\nnotification.title = \"Updated Title\"\n\nnotification.body = \"This is the notification message\"\nnotification.silent = true\nnotification.sound = \"Ping\" // macOS only\n\n// Platform-specific properties\nnotification.urgency = \"critical\" // Linux only\nnotification.timeoutType = \"never\" // Linux and Windows only\n\nnotification.show()"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Enabling Global Sandbox in Electron",
    "codeDescription": "Demonstrates how to force sandboxing for all renderer processes using the app.enableSandbox API before the app's ready event.",
    "codeLanguage": "javascript",
    "codeTokens": 92,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/sandbox.md#2025-04-18_snippet_2",
    "pageTitle": "Process Sandboxing in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.enableSandbox()\napp.whenReady().then(() => {\n  // any sandbox:false calls are overridden since `app.enableSandbox()` was called.\n  const win = new BrowserWindow()\n  win.loadURL('https://google.com')\n})"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Exposing Drag Start Function via Context Bridge in Electron Preload Script",
    "codeDescription": "This snippet demonstrates how to use the contextBridge in the preload script to expose a method for starting the drag operation to the renderer process.",
    "codeLanguage": "javascript",
    "codeTokens": 89,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-file-drag-drop.md#2025-04-18_snippet_0",
    "pageTitle": "Native File Drag & Drop in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electron', {\n  startDrag: (fileName) => ipcRenderer.send('ondragstart', fileName)\n})"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Registering an Error Listener with webRequest.onErrorOccurred in Electron",
    "codeDescription": "This method registers a listener function that is called when a network error occurs during a web request. The listener receives a details object containing information about the request that failed, including the error description, resource type, and other request metadata.",
    "codeLanguage": "javascript",
    "codeTokens": 74,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-request.md#2025-04-18_snippet_2",
    "pageTitle": "WebRequest Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "webRequest.onErrorOccurred([filter, ]listener)"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Invoking IPC Messages from Electron Renderer Process",
    "codeDescription": "Shows how to call an invokable IPC method from a renderer process using ipcRenderer.invoke(). This creates a Promise-based request-response pattern between renderer and main processes.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/ipc-main.md#2025-04-18_snippet_1",
    "pageTitle": "ipcMain API in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "async () => {\n  const result = await ipcRenderer.invoke('my-invokable-ipc', arg1, arg2)\n  // ...\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Creating a Secure IPC Bridge for Dark Mode Controls in Electron",
    "codeDescription": "Preload script that establishes a secure bridge between renderer and main processes using contextBridge. It exposes two dark mode methods that invoke IPC channels for toggling the theme and resetting to system preferences.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/dark-mode.md#2025-04-18_snippet_2",
    "pageTitle": "Dark Mode in Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('darkMode', {\n  toggle: () => ipcRenderer.invoke('dark-mode:toggle'),\n  system: () => ipcRenderer.invoke('dark-mode:system')\n})"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Implementing Basic File Protocol Handler in Electron",
    "codeDescription": "Demonstrates how to implement a custom 'atom://' protocol that serves files similar to the file:// protocol. Uses the app and protocol modules to handle requests when the application is ready.",
    "codeLanguage": "javascript",
    "codeTokens": 133,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Protocol Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, protocol, net } = require('electron')\nconst path = require('node:path')\nconst url = require('node:url')\n\napp.whenReady().then(() => {\n  protocol.handle('atom', (request) => {\n    const filePath = request.url.slice('atom://'.length)\n    return net.fetch(url.pathToFileURL(path.join(__dirname, filePath)).toString())\n  })\n})"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Loading URL with POST Data in Electron BrowserWindow (JavaScript)",
    "codeDescription": "Shows how to load a URL using a POST request with URL-encoded data in an Electron BrowserWindow. This example sends 'hello=world' as the POST data.",
    "codeLanguage": "javascript",
    "codeTokens": 119,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_13",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n\nwin.loadURL('http://localhost:8000/post', {\n  postData: [{\n    type: 'rawData',\n    bytes: Buffer.from('hello=world')\n  }],\n  extraHeaders: 'Content-Type: application/x-www-form-urlencoded'\n})"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using dialog.showSaveDialog Method in Electron",
    "codeDescription": "Shows a save dialog that returns a Promise with information about the selected file. The method accepts an optional window parameter and options object with various configuration settings for customizing the dialog appearance and behavior.",
    "codeLanguage": "JavaScript",
    "codeTokens": 63,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-18_snippet_4",
    "pageTitle": "Electron Dialog Module",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "dialog.showSaveDialog([window, ]options)"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Encrypting a String in Electron",
    "codeDescription": "Method to encrypt a plaintext string, returning a Buffer containing the encrypted bytes. Will throw an error if encryption fails.",
    "codeLanguage": "javascript",
    "codeTokens": 48,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/safe-storage.md#2025-04-18_snippet_1",
    "pageTitle": "Electron SafeStorage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "safeStorage.encryptString(plainText)"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Accessing ServiceWorkers and Handling Events in Electron",
    "codeDescription": "Example demonstrating how to access the ServiceWorkers class through the session object, get all running service workers, and handle console messages from service workers.",
    "codeLanguage": "javascript",
    "codeTokens": 134,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/service-workers.md#2025-04-18_snippet_0",
    "pageTitle": "ServiceWorkers Class in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { session } = require('electron')\n\n// Get all service workers.\nconsole.log(session.defaultSession.serviceWorkers.getAllRunning())\n\n// Handle logs and get service worker info\nsession.defaultSession.serviceWorkers.on('console-message', (event, messageDetails) => {\n  console.log(\n    'Got service worker message',\n    messageDetails,\n    'from',\n    session.defaultSession.serviceWorkers.getFromVersionID(messageDetails.versionId)\n  )\n})"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Loading an Extension with Electron's Session API",
    "codeDescription": "Example of loading a Chrome extension (React DevTools) in an Electron application using the session.defaultSession.extensions.loadExtension method. The extension is loaded when the app is ready, with file access allowed to support devtools on file:// URLs.",
    "codeLanguage": "javascript",
    "codeTokens": 172,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/extensions-api.md#2025-04-18_snippet_0",
    "pageTitle": "Extensions Class Documentation in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, session } = require('electron')\nconst path = require('node:path')\n\napp.whenReady().then(async () => {\n  await session.defaultSession.extensions.loadExtension(\n    path.join(__dirname, 'react-devtools'),\n    // allowFileAccess is required to load the devtools extension on file:// URLs.\n    { allowFileAccess: true }\n  )\n  // Note that in order to use the React DevTools extension, you'll need to\n  // download and unzip a copy of the extension.\n})"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Complete Electron Application with Main Process Notifications",
    "codeDescription": "A complete Electron application example that creates a window and displays a notification from the main process. It includes application lifecycle management and demonstrates when to show the notification.",
    "codeLanguage": "javascript",
    "codeTokens": 212,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/notifications.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Notifications Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow, Notification } = require('electron/main')\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\nconst NOTIFICATION_TITLE = 'Basic Notification'\nconst NOTIFICATION_BODY = 'Notification from the Main process'\n\nfunction showNotification () {\n  new Notification({ title: NOTIFICATION_TITLE, body: NOTIFICATION_BODY }).show()\n}\n\napp.whenReady().then(createWindow).then(showNotification)\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Opening DevTools for Renderer Processes in Electron",
    "codeDescription": "This code demonstrates how to programmatically open Chrome Developer Tools for a BrowserWindow instance using the openDevTools() API on the webContents object.",
    "codeLanguage": "javascript",
    "codeTokens": 70,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/application-debugging.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Application Debugging Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow()\nwin.webContents.openDevTools()"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Creating the Main Process for Online/Offline Status Application in Electron",
    "codeDescription": "This JavaScript file defines the main process for the Electron application. It creates a browser window, loads the HTML file, and handles app lifecycle events like 'activate' and 'window-all-closed'.",
    "codeLanguage": "javascript",
    "codeTokens": 170,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/online-offline-events.md#2025-04-18_snippet_2",
    "pageTitle": "Online/Offline Event Detection in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow } = require('electron')\n\nconst createWindow = () => {\n  const onlineStatusWindow = new BrowserWindow()\n\n  onlineStatusWindow.loadFile('index.html')\n}\n\napp.whenReady().then(() => {\n  createWindow()\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Handling Application Lifecycle Events in Electron's Main Process",
    "codeDescription": "This code shows how to use the app module to handle the window-all-closed event, quitting the application when all windows are closed on non-macOS platforms.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Process Model Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit()\n})"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Creating a basic HTML file for Electron app",
    "codeDescription": "Simple HTML file to be loaded into an Electron BrowserWindow, including Content Security Policy meta tags.",
    "codeLanguage": "html",
    "codeTokens": 179,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-18_snippet_3",
    "pageTitle": "Building Your First Electron App",
    "codeList": [
      {
        "language": "html",
        "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP -->\n    <meta\n      http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\"\n    />\n    <meta\n      http-equiv=\"X-Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\"\n    />\n    <title>Hello from Electron renderer!</title>\n  </head>\n  <body>\n    <h1>Hello from Electron renderer!</h1>\n    <p>👋</p>\n  </body>\n</html>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Handling Window Closure in Electron (Windows & Linux)",
    "codeDescription": "Event handler that quits the application when all windows are closed on Windows and Linux platforms. Uses process.platform check to exclude macOS from this behavior.",
    "codeLanguage": "javascript",
    "codeTokens": 69,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-18_snippet_5",
    "pageTitle": "Building Your First Electron App",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit()\n})"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Modifying Navigation History in Electron",
    "codeDescription": "Methods to clear the history or remove specific entries.",
    "codeLanguage": "javascript",
    "codeTokens": 39,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/navigation-history.md#2025-04-18_snippet_3",
    "pageTitle": "Navigation History Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "navigationHistory.clear()\n\nnavigationHistory.removeEntryAtIndex(index)"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Safe IpcRenderer Wrapper Example",
    "codeDescription": "Demonstrates how to safely expose IpcRenderer functionality through contextBridge.",
    "codeLanguage": "javascript",
    "codeTokens": 70,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-18_snippet_5",
    "pageTitle": "Context Bridge in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "contextBridge.exposeInMainWorld('electron', {\n  onMyEventName: (callback) => ipcRenderer.on('MyEventName', (e, ...args) => callback(args))\n})"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Loading Local HTML File in Electron BrowserWindow (JavaScript)",
    "codeDescription": "Demonstrates how to load a local HTML file into an Electron BrowserWindow using Node.js path and url modules. This ensures proper formatting of file URLs.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_12",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n\nconst url = require('url').format({\n  protocol: 'file',\n  slashes: true,\n  pathname: require('node:path').join(__dirname, 'index.html')\n})\n\nwin.loadURL(url)"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Exposing Node Crypto API",
    "codeDescription": "Example of safely exposing Node.js crypto functionality through contextBridge.",
    "codeLanguage": "javascript",
    "codeTokens": 93,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-18_snippet_7",
    "pageTitle": "Context Bridge in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { contextBridge } = require('electron')\nconst crypto = require('node:crypto')\ncontextBridge.exposeInMainWorld('nodeCrypto', {\n  sha256sum (data) {\n    const hash = crypto.createHash('sha256')\n    hash.update(data)\n    return hash.digest('hex')\n  }\n})"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Building and Setting a Context Menu for Tray in Electron",
    "codeDescription": "This snippet shows how to create a context menu with radio-type items and attach it to the Tray icon. It uses Menu.buildFromTemplate to construct the menu.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tray.md#2025-04-18_snippet_2",
    "pageTitle": "Creating a Tray Icon with Context Menu in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const contextMenu = Menu.buildFromTemplate([\n  { label: 'Item1', type: 'radio' },\n  { label: 'Item2', type: 'radio' },\n  { label: 'Item3', type: 'radio', checked: true },\n  { label: 'Item4', type: 'radio' }\n])\n\ntray.setContextMenu(contextMenu)"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Accessing and Displaying Browser History Entries in Electron",
    "codeDescription": "Shows how to retrieve all browsing history entries and iterate through them to display information. Each entry contains title and URL properties.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/navigation-history.md#2025-04-18_snippet_2",
    "pageTitle": "Navigation History API in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const entries = navigationHistory.getAllEntries()\n\nentries.forEach((entry) => {\n  console.log(`${entry.title}: ${entry.url}`)\n})"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Implementing Dark Mode CSS with prefers-color-scheme Media Query",
    "codeDescription": "CSS that uses the prefers-color-scheme media query to automatically apply different styles based on the system's theme setting. It defines contrasting background and text colors for both dark and light modes.",
    "codeLanguage": "css",
    "codeTokens": 105,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/dark-mode.md#2025-04-18_snippet_1",
    "pageTitle": "Dark Mode in Electron Applications",
    "codeList": [
      {
        "language": "css",
        "code": "@media (prefers-color-scheme: dark) {\n  body { background: #333; color: white; }\n}\n\n@media (prefers-color-scheme: light) {\n  body { background: #ddd; color: black; }\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Setting User Tasks for Windows JumpList in Electron",
    "codeDescription": "This snippet demonstrates how to use the app.setUserTasks API to create a custom JumpList task for an Electron application. It creates a 'New Window' task that opens a new window when clicked.",
    "codeLanguage": "JavaScript",
    "codeTokens": 121,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-18_snippet_0",
    "pageTitle": "Windows Taskbar Customization in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app } = require('electron')\n\napp.setUserTasks([\n  {\n    program: process.execPath,\n    arguments: '--new-window',\n    iconPath: process.execPath,\n    iconIndex: 0,\n    title: 'New Window',\n    description: 'Create a new window'\n  }\n])"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Capturing Page Screenshot in Electron BrowserWindow",
    "codeDescription": "Shows how to capture a screenshot of a specific region or the entire visible page in an Electron BrowserWindow. The method returns a Promise that resolves with a NativeImage.",
    "codeLanguage": "JavaScript",
    "codeTokens": 59,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_11",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "win.capturePage([rect, opts])"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Configuring Dark Mode Handling in Electron Main Process",
    "codeDescription": "Main process script that creates a browser window and sets up IPC handlers for dark mode controls. It uses the nativeTheme API to toggle between light and dark themes and to reset to system preferences based on renderer process requests.",
    "codeLanguage": "javascript",
    "codeTokens": 298,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/dark-mode.md#2025-04-18_snippet_4",
    "pageTitle": "Dark Mode in Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow, ipcMain, nativeTheme } = require('electron')\nconst path = require('node:path')\n\nconst createWindow = () => {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n\n  win.loadFile('index.html')\n\n  ipcMain.handle('dark-mode:toggle', () => {\n    if (nativeTheme.shouldUseDarkColors) {\n      nativeTheme.themeSource = 'light'\n    } else {\n      nativeTheme.themeSource = 'dark'\n    }\n    return nativeTheme.shouldUseDarkColors\n  })\n\n  ipcMain.handle('dark-mode:system', () => {\n    nativeTheme.themeSource = 'system'\n  })\n}\n\napp.whenReady().then(() => {\n  createWindow()\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Implementing TouchBar Slot Machine Game in Electron",
    "codeDescription": "A complete example showing how to create an interactive slot machine game using Electron's TouchBar API. The implementation includes spinning reels, random symbol generation, win detection, and TouchBar layout configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 717,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/touch-bar.md#2025-04-18_snippet_0",
    "pageTitle": "TouchBar API Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow, TouchBar } = require('electron')\n\nconst { TouchBarLabel, TouchBarButton, TouchBarSpacer } = TouchBar\n\nlet spinning = false\n\n// Reel labels\nconst reel1 = new TouchBarLabel({ label: '' })\nconst reel2 = new TouchBarLabel({ label: '' })\nconst reel3 = new TouchBarLabel({ label: '' })\n\n// Spin result label\nconst result = new TouchBarLabel({ label: '' })\n\n// Spin button\nconst spin = new TouchBarButton({\n  label: '🎰 Spin',\n  backgroundColor: '#7851A9',\n  click: () => {\n    // Ignore clicks if already spinning\n    if (spinning) {\n      return\n    }\n\n    spinning = true\n    result.label = ''\n\n    let timeout = 10\n    const spinLength = 4 * 1000 // 4 seconds\n    const startTime = Date.now()\n\n    const spinReels = () => {\n      updateReels()\n\n      if ((Date.now() - startTime) >= spinLength) {\n        finishSpin()\n      } else {\n        // Slow down a bit on each spin\n        timeout *= 1.1\n        setTimeout(spinReels, timeout)\n      }\n    }\n\n    spinReels()\n  }\n})\n\nconst getRandomValue = () => {\n  const values = ['🍒', '💎', '7️⃣', '🍊', '🔔', '⭐', '🍇', '🍀']\n  return values[Math.floor(Math.random() * values.length)]\n}\n\nconst updateReels = () => {\n  reel1.label = getRandomValue()\n  reel2.label = getRandomValue()\n  reel3.label = getRandomValue()\n}\n\nconst finishSpin = () => {\n  const uniqueValues = new Set([reel1.label, reel2.label, reel3.label]).size\n  if (uniqueValues === 1) {\n    // All 3 values are the same\n    result.label = '💰 Jackpot!'\n    result.textColor = '#FDFF00'\n  } else if (uniqueValues === 2) {\n    // 2 values are the same\n    result.label = '😍 Winner!'\n    result.textColor = '#FDFF00'\n  } else {\n    // No values are the same\n    result.label = '🙁 Spin Again'\n    result.textColor = null\n  }\n  spinning = false\n}\n\nconst touchBar = new TouchBar({\n  items: [\n    spin,\n    new TouchBarSpacer({ size: 'large' }),\n    reel1,\n    new TouchBarSpacer({ size: 'small' }),\n    reel2,\n    new TouchBarSpacer({ size: 'small' }),\n    reel3,\n    new TouchBarSpacer({ size: 'large' }),\n    result\n  ]\n})\n\nlet window\n\napp.whenReady().then(() => {\n  window = new BrowserWindow({\n    frame: false,\n    titleBarStyle: 'hiddenInset',\n    width: 200,\n    height: 200,\n    backgroundColor: '#000'\n  })\n  window.loadURL('about:blank')\n  window.setTouchBar(touchBar)\n})"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "TypeScript Context Bridge Implementation",
    "codeDescription": "Shows how to expose APIs using contextBridge in a TypeScript preload script. This pattern allows for type safety when accessing the API from the renderer process.",
    "codeLanguage": "typescript",
    "codeTokens": 74,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-18_snippet_6",
    "pageTitle": "Context Isolation in Electron",
    "codeList": [
      {
        "language": "typescript",
        "code": "contextBridge.exposeInMainWorld('electronAPI', {\n  loadPreferences: () => ipcRenderer.invoke('load-prefs')\n})"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Prompting Touch ID Authentication in Electron (JavaScript)",
    "codeDescription": "Demonstrates how to use the systemPreferences.promptTouchID() method to request Touch ID authentication from the user. The method returns a Promise that resolves on successful authentication or rejects with an error.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/system-preferences.md#2025-04-18_snippet_2",
    "pageTitle": "System Preferences API Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { systemPreferences } = require('electron')\n\nsystemPreferences.promptTouchID('To get consent for a Security-Gated Thing').then(success => {\n  console.log('You have successfully authenticated with Touch ID!')\n}).catch(err => {\n  console.log(err)\n})"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Registering File Stream Protocol in Electron",
    "codeDescription": "Shows how to register a custom stream protocol that returns a file stream using the deprecated registerStreamProtocol method. This example demonstrates returning an HTML file as a response.",
    "codeLanguage": "JavaScript",
    "codeTokens": 72,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-18_snippet_5",
    "pageTitle": "Electron Protocol Module Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "protocol.registerStreamProtocol('atom', (request, callback) => {\n  callback(fs.createReadStream('index.html'))\n})"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Handling ready-to-show Event - Electron JavaScript",
    "codeDescription": "Shows how to gracefully display a window after the content is ready to prevent visual flash.",
    "codeLanguage": "javascript",
    "codeTokens": 71,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_1",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({ show: false })\nwin.once('ready-to-show', () => {\n  win.show()\n})"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "One-time Event Listening in IpcMainServiceWorker",
    "codeDescription": "Method to listen for a single IPC message on a specific channel. The listener is automatically removed after being triggered once.",
    "codeLanguage": "javascript",
    "codeTokens": 52,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-18_snippet_1",
    "pageTitle": "IPC Main Service Worker API Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "ipcMainServiceWorker.once(channel, listener)"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Decrypting an Encrypted String in Electron",
    "codeDescription": "Method to decrypt a previously encrypted buffer back into a string. Takes a Buffer created by encryptString() and returns the original plaintext. Will throw an error if decryption fails.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/safe-storage.md#2025-04-18_snippet_2",
    "pageTitle": "Electron SafeStorage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "safeStorage.decryptString(encrypted)"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Intercepting Keyboard Events in the Electron Main Process",
    "codeDescription": "Intercepts keyboard events before they reach the renderer process using the 'before-input-event' handler on webContents. This allows custom shortcut handling at the application level.",
    "codeLanguage": "javascript",
    "codeTokens": 147,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#2025-04-18_snippet_3",
    "pageTitle": "Keyboard Shortcuts in Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow } = require('electron/main')\n\napp.whenReady().then(() => {\n  const win = new BrowserWindow({ width: 800, height: 600 })\n\n  win.loadFile('index.html')\n  win.webContents.on('before-input-event', (event, input) => {\n    if (input.control && input.key.toLowerCase() === 'i') {\n      console.log('Pressed Control+I')\n      event.preventDefault()\n    }\n  })\n})"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Programmatic Usage of Electron in Node.js",
    "codeDescription": "Demonstrates how to use Electron programmatically within a Node.js application. The example shows how to require the Electron module to get the binary path and spawn an Electron process.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/electron/electron/blob/main/README.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Framework Overview",
    "codeList": [
      {
        "language": "javascript",
        "code": "const electron = require('electron')\nconst proc = require('node:child_process')\n\n// will print something similar to /Users/maf/.../Electron\nconsole.log(electron)\n\n// spawn Electron\nconst child = proc.spawn(electron)"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Bouncing an Application Icon in the macOS Dock with Electron",
    "codeDescription": "Example demonstrating how to make your application's icon bounce in the macOS dock using Electron's Dock API. The optional chaining operator ensures the code runs safely even if the dock property is not available on non-macOS platforms.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/dock.md#2025-04-18_snippet_0",
    "pageTitle": "Dock Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app } = require('electron')\napp.dock?.bounce()"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Creating Window with Custom Features in Electron Renderer",
    "codeDescription": "Demonstrates opening a window using window.open() with specific features like position, frame settings, and Node integration options.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/window-open.md#2025-04-18_snippet_0",
    "pageTitle": "Opening Windows in Electron Renderer",
    "codeList": [
      {
        "language": "javascript",
        "code": "window.open('https://github.com', '_blank', 'top=500,left=200,frame=false,nodeIntegration=no')"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Creating a Tray Icon in Electron",
    "codeDescription": "This code demonstrates how to create a Tray icon using a NativeImage when the Electron app is ready. It sets up the foundation for adding a context menu and other properties.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tray.md#2025-04-18_snippet_1",
    "pageTitle": "Creating a Tray Icon with Context Menu in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "let tray\n\napp.whenReady().then(() => {\n  const icon = nativeImage.createFromPath('path/to/asset.png')\n  tray = new Tray(icon)\n\n  // note: your contextMenu, Tooltip and Title code will go here!\n})"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Exposing API in Isolated World",
    "codeDescription": "Example of exposing an API to a specific isolated world using exposeInIsolatedWorld.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-18_snippet_3",
    "pageTitle": "Context Bridge in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInIsolatedWorld(\n  1004,\n  'electron',\n  {\n    doThing: () => ipcRenderer.send('do-a-thing')\n  }\n)"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Registering and Handling APNS Notifications in Electron",
    "codeDescription": "This snippet demonstrates how to register for APNS notifications and handle received notifications in an Electron application. It shows the registration process, which returns a token, and sets up an event listener for received notifications.",
    "codeLanguage": "javascript",
    "codeTokens": 124,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/push-notifications.md#2025-04-18_snippet_0",
    "pageTitle": "Push Notifications Module in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { pushNotifications, Notification } = require('electron')\n\npushNotifications.registerForAPNSNotifications().then((token) => {\n  // forward token to your remote notification server\n})\n\npushNotifications.on('received-apns-notification', (event, userInfo) => {\n  // generate a new Notification object with the relevant userInfo fields\n})"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Handle Invoke Messages in IpcMainServiceWorker",
    "codeDescription": "Method to handle invokeable IPC messages on a specific channel. The listener can return a Promise or value directly.",
    "codeLanguage": "javascript",
    "codeTokens": 51,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-18_snippet_4",
    "pageTitle": "IPC Main Service Worker API Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "ipcMainServiceWorker.handle(channel, listener)"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Creating MenuItem Constructor - Electron",
    "codeDescription": "Constructor signature for creating new MenuItem instances with configuration options. The options object allows customization of appearance, behavior, and placement of menu items.",
    "codeLanguage": "typescript",
    "codeTokens": 174,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/menu-item.md#2025-04-18_snippet_0",
    "pageTitle": "MenuItem Class Documentation - Electron Framework",
    "codeList": [
      {
        "language": "typescript",
        "code": "new MenuItem(options: {\n  click?: Function,\n  role?: string,\n  type?: string,\n  label?: string,\n  sublabel?: string,\n  toolTip?: string,\n  accelerator?: Accelerator,\n  icon?: NativeImage | string,\n  enabled?: boolean,\n  acceleratorWorksWhenHidden?: boolean,\n  visible?: boolean,\n  checked?: boolean,\n  registerAccelerator?: boolean,\n  sharingItem?: SharingItem,\n  submenu?: MenuItemConstructorOptions[] | Menu,\n  id?: string,\n  before?: string[],\n  after?: string[],\n  beforeGroupContaining?: string[],\n  afterGroupContaining?: string[]\n})"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using Synchronous Open Dialog with Window in Electron",
    "codeDescription": "This example demonstrates how to use the synchronous version of the open dialog with a parent window. It sets properties for both file and directory selection.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Dialog Module",
    "codeList": [
      {
        "language": "javascript",
        "code": "dialog.showOpenDialogSync(mainWindow, {\n  properties: ['openFile', 'openDirectory']\n})"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Quitting and Installing Updates in Electron",
    "codeDescription": "Restarts the app and installs downloaded updates. Should be called after the 'update-downloaded' event is emitted. Closes all windows and calls app.quit().",
    "codeLanguage": "javascript",
    "codeTokens": 55,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/auto-updater.md#2025-04-18_snippet_3",
    "pageTitle": "Electron autoUpdater Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "autoUpdater.quitAndInstall()"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Complex API Exposure Example",
    "codeDescription": "Demonstrates exposing a complex API with nested objects, promises, and various data types through contextBridge.",
    "codeLanguage": "javascript",
    "codeTokens": 181,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-18_snippet_2",
    "pageTitle": "Context Bridge in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld(\n  'electron',\n  {\n    doThing: () => ipcRenderer.send('do-a-thing'),\n    myPromises: [Promise.resolve(), Promise.reject(new Error('whoops'))],\n    anAsyncFunction: async () => 123,\n    data: {\n      myFlags: ['a', 'b', 'c'],\n      bootTime: 1234\n    },\n    nestedAPI: {\n      evenDeeper: {\n        youCanDoThisAsMuchAsYouWant: {\n          fn: () => ({\n            returnData: 123\n          })\n        }\n      }\n    }\n  }\n)"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using dialog.showMessageBoxSync Method in Electron",
    "codeDescription": "Displays a synchronous message box that blocks the process until closed. Returns the index of the clicked button. Accepts an optional window parameter for modal attachment and an options object for customizing the dialog.",
    "codeLanguage": "JavaScript",
    "codeTokens": 64,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-18_snippet_5",
    "pageTitle": "Electron Dialog Module",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "dialog.showMessageBoxSync([window, ]options)"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Add Native Window Controls in Electron",
    "codeDescription": "Implements native window controls for Windows and Linux platforms using titleBarOverlay parameter.",
    "codeLanguage": "javascript",
    "codeTokens": 46,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-18_snippet_1",
    "pageTitle": "Custom Title Bar Implementation in Electron",
    "codeList": [
      {
        "language": "fiddle",
        "code": "docs/fiddles/features/window-customization/custom-title-bar/native-window-controls"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Using Electron's process-specific module aliases in JavaScript",
    "codeDescription": "This snippet demonstrates how to use Electron's process-specific module aliases for importing main process and common modules. It shows the usage of 'electron/main' for main process modules and 'electron/common' for modules that can run in both main and renderer processes.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/process-model.md#2025-04-18_snippet_4",
    "pageTitle": "Electron Process Model Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app } = require('electron/main')\nconst { shell } = require('electron/common')"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Signing WiX MSI Installer with electron-wix-msi",
    "codeDescription": "This code example shows how to use electron-wix-msi to create and sign a WiX MSI installer for an Electron application on Windows. It includes configuration for custom signing parameters and tool path.",
    "codeLanguage": "javascript",
    "codeTokens": 319,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/code-signing.md#2025-04-18_snippet_3",
    "pageTitle": "Code Signing for Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { MSICreator } from 'electron-wix-msi'\n\n// Step 1: Instantiate the MSICreator\nconst msiCreator = new MSICreator({\n  appDirectory: '/path/to/built/app',\n  description: 'My amazing Kitten simulator',\n  exe: 'kittens',\n  name: 'Kittens',\n  manufacturer: 'Kitten Technologies',\n  version: '1.1.2',\n  outputDirectory: '/path/to/output/folder',\n  windowsSign: {\n    signWithParams: '--my=custom --parameters',\n    // If signtool.exe does not work for you, customize!\n    signToolPath: 'C:\\\\Path\\\\To\\\\my-custom-tool.exe'\n  }\n})\n\n// Step 2: Create a .wxs template file\nconst supportBinaries = await msiCreator.create()\n\n// 🆕 Step 2a: optionally sign support binaries if you\n// sign you binaries as part of of your packaging script\nfor (const binary of supportBinaries) {\n  // Binaries are the new stub executable and optionally\n  // the Squirrel auto updater.\n  await signFile(binary)\n}\n\n// Step 3: Compile the template to a .msi file\nawait msiCreator.compile()"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Custom Spell Check Provider in Electron WebFrame",
    "codeDescription": "This example shows how to set up a custom spell check provider using node-spellchecker in Electron's WebFrame. It disables the built-in spellchecker and implements an asynchronous spell check function.",
    "codeLanguage": "javascript",
    "codeTokens": 131,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-18_snippet_1",
    "pageTitle": "WebFrame API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { webFrame } = require('electron')\nconst spellChecker = require('spellchecker')\nwebFrame.setSpellCheckProvider('en-US', {\n  spellCheck (words, callback) {\n    setTimeout(() => {\n      const misspelled = words.filter(x => spellchecker.isMisspelled(x))\n      callback(misspelled)\n    }, 0)\n  }\n})"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Using Exposed APIs in Renderer without Context Isolation",
    "codeDescription": "Shows how to access APIs exposed through the preload script when context isolation is disabled. The API is directly available on the global window object.",
    "codeLanguage": "javascript",
    "codeTokens": 61,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-18_snippet_1",
    "pageTitle": "Context Isolation in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// use the exposed API in the renderer\nwindow.myAPI.doAThing()"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Using webFrameMain to Modify Frame Content in Electron",
    "codeDescription": "This snippet demonstrates how to use the webFrameMain module to access and modify the content of a frame after navigation. It replaces occurrences of 'heck' with 'h*ck' in the frame's body.",
    "codeLanguage": "javascript",
    "codeTokens": 194,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-frame-main.md#2025-04-18_snippet_0",
    "pageTitle": "WebFrameMain Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow, webFrameMain } = require('electron')\n\nconst win = new BrowserWindow({ width: 800, height: 1500 })\nwin.loadURL('https://twitter.com')\n\nwin.webContents.on(\n  'did-frame-navigate',\n  (event, url, httpResponseCode, httpStatusText, isMainFrame, frameProcessId, frameRoutingId) => {\n    const frame = webFrameMain.fromId(frameProcessId, frameRoutingId)\n    if (frame) {\n      const code = 'document.body.innerHTML = document.body.innerHTML.replaceAll(\"heck\", \"h*ck\")'\n      frame.executeJavaScript(code)\n    }\n  }\n)"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Enabling Node.js Integration in Web Workers with Electron",
    "codeDescription": "Creates a BrowserWindow with Node.js integration enabled in Web Workers. This allows Web Workers to use Node.js features by setting the nodeIntegrationInWorker option to true in webPreferences.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/multithreading.md#2025-04-18_snippet_0",
    "pageTitle": "Multithreading in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const win = new BrowserWindow({\n  webPreferences: {\n    nodeIntegrationInWorker: true\n  }\n})"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Implementing In-App Purchases in Electron for Mac App Store",
    "codeDescription": "This comprehensive JavaScript example demonstrates how to implement in-app purchases in an Electron application for the Mac App Store. It covers listening for transactions, checking purchase eligibility, retrieving product information, and handling the purchase process.",
    "codeLanguage": "javascript",
    "codeTokens": 664,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/in-app-purchases.md#2025-04-18_snippet_1",
    "pageTitle": "Implementing In-App Purchases in Electron for Mac App Store",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Main process\nconst { inAppPurchase } = require('electron')\nconst PRODUCT_IDS = ['id1', 'id2']\n\n// Listen for transactions as soon as possible.\ninAppPurchase.on('transactions-updated', (event, transactions) => {\n  if (!Array.isArray(transactions)) {\n    return\n  }\n\n  // Check each transaction.\n  for (const transaction of transactions) {\n    const payment = transaction.payment\n\n    switch (transaction.transactionState) {\n      case 'purchasing':\n        console.log(`Purchasing ${payment.productIdentifier}...`)\n        break\n\n      case 'purchased': {\n        console.log(`${payment.productIdentifier} purchased.`)\n\n        // Get the receipt url.\n        const receiptURL = inAppPurchase.getReceiptURL()\n\n        console.log(`Receipt URL: ${receiptURL}`)\n\n        // Submit the receipt file to the server and check if it is valid.\n        // @see https://developer.apple.com/library/content/releasenotes/General/ValidateAppStoreReceipt/Chapters/ValidateRemotely.html\n        // ...\n        // If the receipt is valid, the product is purchased\n        // ...\n\n        // Finish the transaction.\n        inAppPurchase.finishTransactionByDate(transaction.transactionDate)\n\n        break\n      }\n\n      case 'failed':\n\n        console.log(`Failed to purchase ${payment.productIdentifier}.`)\n\n        // Finish the transaction.\n        inAppPurchase.finishTransactionByDate(transaction.transactionDate)\n\n        break\n      case 'restored':\n\n        console.log(`The purchase of ${payment.productIdentifier} has been restored.`)\n\n        break\n      case 'deferred':\n\n        console.log(`The purchase of ${payment.productIdentifier} has been deferred.`)\n\n        break\n      default:\n        break\n    }\n  }\n})\n\n// Check if the user is allowed to make in-app purchase.\nif (!inAppPurchase.canMakePayments()) {\n  console.log('The user is not allowed to make in-app purchase.')\n}\n\n// Retrieve and display the product descriptions.\ninAppPurchase.getProducts(PRODUCT_IDS).then(products => {\n  // Check the parameters.\n  if (!Array.isArray(products) || products.length <= 0) {\n    console.log('Unable to retrieve the product information.')\n    return\n  }\n\n  // Display the name and price of each product.\n  for (const product of products) {\n    console.log(`The price of ${product.localizedTitle} is ${product.formattedPrice}.`)\n  }\n\n  // Ask the user which product they want to purchase.\n  const selectedProduct = products[0]\n  const selectedQuantity = 1\n\n  // Purchase the selected product.\n  inAppPurchase.purchaseProduct(selectedProduct.productIdentifier, selectedQuantity).then(isProductValid => {\n    if (!isProductValid) {\n      console.log('The product is not valid.')\n      return\n    }\n\n    console.log('The payment has been added to the payment queue.')\n  })\n})"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Importing Electron Modules for Tray Creation",
    "codeDescription": "This snippet shows how to import the required modules from Electron to create a Tray icon.",
    "codeLanguage": "javascript",
    "codeTokens": 54,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tray.md#2025-04-18_snippet_0",
    "pageTitle": "Creating a Tray Icon with Context Menu in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, Tray, Menu, nativeImage } = require('electron')"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Checking Notification Support in Electron",
    "codeDescription": "Shows how to check if desktop notifications are supported on the current system using the static method of the Notification class.",
    "codeLanguage": "javascript",
    "codeTokens": 47,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/notification.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Notification API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const isNotificationSupported = Notification.isSupported()"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Logging Resource Usage in Electron WebFrame",
    "codeDescription": "This snippet demonstrates how to retrieve and log the resource usage information from Blink's internal memory caches using the WebFrame API in Electron.",
    "codeLanguage": "javascript",
    "codeTokens": 59,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-18_snippet_2",
    "pageTitle": "WebFrame API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { webFrame } = require('electron')\nconsole.log(webFrame.getResourceUsage())"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Advanced Protocol Handler with Security Checks in Electron",
    "codeDescription": "Demonstrates a comprehensive protocol handler implementation with security checks, multiple hosts handling, and different response types including HTML and file serving.",
    "codeLanguage": "javascript",
    "codeTokens": 376,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-18_snippet_3",
    "pageTitle": "Electron Protocol Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, net, protocol } = require('electron')\nconst path = require('node:path')\nconst { pathToFileURL } = require('url')\n\nprotocol.registerSchemesAsPrivileged([\n  {\n    scheme: 'app',\n    privileges: {\n      standard: true,\n      secure: true,\n      supportFetchAPI: true\n    }\n  }\n])\n\napp.whenReady().then(() => {\n  protocol.handle('app', (req) => {\n    const { host, pathname } = new URL(req.url)\n    if (host === 'bundle') {\n      if (pathname === '/') {\n        return new Response('<h1>hello, world</h1>', {\n          headers: { 'content-type': 'text/html' }\n        })\n      }\n      // NB, this checks for paths that escape the bundle, e.g.\n      // app://bundle/../../secret_file.txt\n      const pathToServe = path.resolve(__dirname, pathname)\n      const relativePath = path.relative(__dirname, pathToServe)\n      const isSafe = relativePath && !relativePath.startsWith('..') && !path.isAbsolute(relativePath)\n      if (!isSafe) {\n        return new Response('bad', {\n          status: 400,\n          headers: { 'content-type': 'text/html' }\n        })\n      }\n\n      return net.fetch(pathToFileURL(pathToServe).toString())\n    } else if (host === 'api') {\n      return net.fetch('https://api.my-server.com/' + pathname, {\n        method: req.method,\n        headers: req.headers,\n        body: req.body\n      })\n    }\n  })\n})"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Remove All Listeners in IpcMainServiceWorker",
    "codeDescription": "Method to remove all listeners from a specified channel, or all channels if no channel is specified.",
    "codeLanguage": "javascript",
    "codeTokens": 48,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-18_snippet_3",
    "pageTitle": "IPC Main Service Worker API Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "ipcMainServiceWorker.removeAllListeners([channel])"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Menu Template with 'before' and 'after' Positioning in JavaScript",
    "codeDescription": "Shows a menu template using 'before' and 'after' keywords to control item positioning relative to other items.",
    "codeLanguage": "javascript",
    "codeTokens": 89,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-18_snippet_6",
    "pageTitle": "Electron Menu API Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "[\n  { id: '1', label: 'one', after: ['3'] },\n  { id: '2', label: 'two', before: ['1'] },\n  { id: '3', label: 'three' }\n]"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Registering Privileged Protocol Scheme in Electron",
    "codeDescription": "Example of registering a privileged protocol scheme that bypasses Content Security Policy. This must be done before the app ready event.",
    "codeLanguage": "javascript",
    "codeTokens": 75,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Protocol Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { protocol } = require('electron')\nprotocol.registerSchemesAsPrivileged([\n  { scheme: 'foo', privileges: { bypassCSP: true } }\n])"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Creating a Window That Fills the Screen in Electron",
    "codeDescription": "Example of creating an Electron window that fills the available work area of the primary display. The code retrieves the primary display's dimensions and creates a window with matching size.",
    "codeLanguage": "javascript",
    "codeTokens": 173,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/screen.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Screen Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Retrieve information about screen size, displays, cursor position, etc.\n//\n// For more info, see:\n// https://www.electronjs.org/docs/latest/api/screen\n\nconst { app, BrowserWindow, screen } = require('electron/main')\n\nlet mainWindow = null\n\napp.whenReady().then(() => {\n  // Create a window that fills the screen's available work area.\n  const primaryDisplay = screen.getPrimaryDisplay()\n  const { width, height } = primaryDisplay.workAreaSize\n\n  mainWindow = new BrowserWindow({ width, height })\n  mainWindow.loadURL('https://electronjs.org')\n})"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Retrieving Product Information",
    "codeDescription": "Method to get product descriptions using an array of product IDs. Returns a Promise that resolves with an array of Product objects.",
    "codeLanguage": "javascript",
    "codeTokens": 51,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-18_snippet_1",
    "pageTitle": "In-App Purchase Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "inAppPurchase.getProducts(productIDs)"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Appending Command Line Switches in Electron Main Script",
    "codeDescription": "Example showing how to use app.commandLine.appendSwitch() to add command line switches before the app's ready event is emitted. This allows for enabling remote debugging ports and setting host rules.",
    "codeLanguage": "javascript",
    "codeTokens": 116,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Command Line Switches Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app } = require('electron')\napp.commandLine.appendSwitch('remote-debugging-port', '8315')\napp.commandLine.appendSwitch('host-rules', 'MAP * 127.0.0.1')\n\napp.whenReady().then(() => {\n  // Your code here\n})"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Implementing Dark Mode Toggle Controls in Electron Renderer Process",
    "codeDescription": "Renderer script that adds click event listeners to buttons for toggling dark mode and resetting to system theme. It updates the UI to show the current theme source based on the response from the main process.",
    "codeLanguage": "javascript",
    "codeTokens": 139,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/dark-mode.md#2025-04-18_snippet_3",
    "pageTitle": "Dark Mode in Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "document.getElementById('toggle-dark-mode').addEventListener('click', async () => {\n  const isDarkMode = await window.darkMode.toggle()\n  document.getElementById('theme-source').innerHTML = isDarkMode ? 'Dark' : 'Light'\n})\n\ndocument.getElementById('reset-to-system').addEventListener('click', async () => {\n  await window.darkMode.system()\n  document.getElementById('theme-source').innerHTML = 'System'\n})"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Installing and Rebuilding Modules with @electron/rebuild",
    "codeDescription": "This snippet demonstrates how to install the @electron/rebuild package and use it to rebuild native modules for Electron via the command line.",
    "codeLanguage": "sh",
    "codeTokens": 95,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-18_snippet_1",
    "pageTitle": "Native Node Modules in Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "npm install --save-dev @electron/rebuild\n\n# Every time you run \"npm install\", run this:\n./node_modules/.bin/electron-rebuild\n\n# If you have trouble on Windows, try:\n.\\node_modules\\.bin\\electron-rebuild.cmd"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Setting Thumbnail Toolbar Buttons in Electron for Windows Taskbar",
    "codeDescription": "This example demonstrates how to create thumbnail toolbar buttons for an Electron application's window in the Windows taskbar. It sets up two buttons with custom icons and click handlers.",
    "codeLanguage": "JavaScript",
    "codeTokens": 179,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-18_snippet_2",
    "pageTitle": "Windows Taskbar Customization in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow, nativeImage } = require('electron')\nconst path = require('node:path')\n\nconst win = new BrowserWindow()\n\nwin.setThumbarButtons([\n  {\n    tooltip: 'button1',\n    icon: nativeImage.createFromPath(path.join(__dirname, 'button1.png')),\n    click () { console.log('button1 clicked') }\n  }, {\n    tooltip: 'button2',\n    icon: nativeImage.createFromPath(path.join(__dirname, 'button2.png')),\n    flags: ['enabled', 'dismissonclick'],\n    click () { console.log('button2 clicked.') }\n  }\n])"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Setting Context Menu for Tray Icon in Electron",
    "codeDescription": "This method sets the context menu for the tray icon. It accepts a Menu object or null as a parameter to define the menu items.",
    "codeLanguage": "javascript",
    "codeTokens": 48,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-18_snippet_4",
    "pageTitle": "Electron Tray API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "tray.setContextMenu(menu)"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Creating HTML Structure for Online/Offline Status Display in Electron",
    "codeDescription": "This HTML file sets up the basic structure for displaying the connection status. It includes a title, a content security policy, and a placeholder for the status that will be updated by JavaScript.",
    "codeLanguage": "html",
    "codeTokens": 146,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/online-offline-events.md#2025-04-18_snippet_0",
    "pageTitle": "Online/Offline Event Detection in Electron",
    "codeList": [
      {
        "language": "html",
        "code": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World!</title>\n    <meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'unsafe-inline';\" />\n</head>\n<body>\n    <h1>Connection status: <strong id='status'></strong></h1>\n    <script src=\"renderer.js\"></script>\n</body>\n</html>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Electron Quick Start Example",
    "codeDescription": "A basic Electron example that can be opened and run in Electron Fiddle. The code is referenced but not shown in the original content.",
    "codeLanguage": "fiddle",
    "codeTokens": 51,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/examples.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Examples and Features Documentation",
    "codeList": [
      {
        "language": "fiddle",
        "code": "docs/fiddles/quick-start"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Creating ShareMenu Instance in Electron (JavaScript)",
    "codeDescription": "Creates a new ShareMenu instance with a sharing item. This is used to initialize a share menu on macOS.",
    "codeLanguage": "javascript",
    "codeTokens": 47,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/share-menu.md#2025-04-18_snippet_0",
    "pageTitle": "ShareMenu Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "new ShareMenu(sharingItem)"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Reading Plain Text from Clipboard",
    "codeDescription": "Demonstrates how to read plain text content from the system clipboard. This example writes text to the clipboard first, then reads it back.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Clipboard API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { clipboard } = require('electron')\n\nclipboard.writeText('hello i am a bit of text!')\n\nconst text = clipboard.readText()\nconsole.log(text)\n// hello i am a bit of text!'"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Using webUtils.getPathForFile() to Retrieve File Path from HTML Input",
    "codeDescription": "Example showing how to use the webUtils.getPathForFile() method to get the file system path from a File object. It demonstrates both the older approach using the deprecated path property and the current recommended approach using the webUtils module.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-utils.md#2025-04-18_snippet_0",
    "pageTitle": "Electron WebUtils Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Before\nconst oldPath = document.querySelector('input').files[0].path\n\n// After\nconst { webUtils } = require('electron')\nconst newPath = webUtils.getPathForFile(document.querySelector('input').files[0])"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Handling Custom Protocols with Electron's Net Module",
    "codeDescription": "Demonstrates how to use 'net.fetch()' with custom protocol handling. The example shows how to bypass custom protocol handlers for specific requests.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/net.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Net Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "protocol.handle('https', (req) => {\n  if (req.url === 'https://my-app.com') {\n    return new Response('<body>my app</body>')\n  } else {\n    return net.fetch(req, { bypassCustomProtocolHandlers: true })\n  }\n})"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Opening a URL with Electron's shell Module",
    "codeDescription": "Opens a URL in the user's default browser using Electron's shell module. This example demonstrates how to import the shell module and use the openExternal method to open a GitHub URL.",
    "codeLanguage": "javascript",
    "codeTokens": 70,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/shell.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Shell Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { shell } = require('electron')\n\nshell.openExternal('https://github.com')"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Handling Drag Start Event in Electron Renderer Process",
    "codeDescription": "This JavaScript code for the renderer process sets up an event listener for the dragstart event on the draggable element, preventing the default behavior and calling the startDrag method exposed by the preload script.",
    "codeLanguage": "javascript",
    "codeTokens": 88,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-file-drag-drop.md#2025-04-18_snippet_2",
    "pageTitle": "Native File Drag & Drop in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "document.getElementById('drag').ondragstart = (event) => {\n  event.preventDefault()\n  window.electron.startDrag('drag-and-drop.md')\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Using Exposed API in Renderer",
    "codeDescription": "Example of using the exposed API in the renderer's main world.",
    "codeLanguage": "javascript",
    "codeTokens": 35,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-18_snippet_1",
    "pageTitle": "Context Bridge in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "window.electron.doThing()"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Getting System Idle State in Electron",
    "codeDescription": "Retrieves the current system idle state using powerMonitor. The state can be 'active', 'idle', 'locked' or 'unknown', based on the specified idle threshold in seconds.",
    "codeLanguage": "markdown",
    "codeTokens": 61,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/power-monitor.md#2025-04-18_snippet_0",
    "pageTitle": "powerMonitor Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "powerMonitor.getSystemIdleState(idleThreshold)"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Enabling Spellchecker in Electron BrowserWindow",
    "codeDescription": "Configuration code to enable the spellchecker in Electron 8 and above through webPreferences settings when creating a new BrowserWindow.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/spellchecker.md#2025-04-18_snippet_0",
    "pageTitle": "Electron SpellChecker Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const myWindow = new BrowserWindow({\n  webPreferences: {\n    spellcheck: true\n  }\n})"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Handling App Command Events in Electron BrowserWindow",
    "codeDescription": "This snippet demonstrates how to listen for 'app-command' events in an Electron BrowserWindow. It specifically shows how to implement backwards navigation when the user presses the back button on their mouse on Windows.",
    "codeLanguage": "javascript",
    "codeTokens": 130,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_6",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.on('app-command', (e, cmd) => {\n  // Navigate the window back when the user hits their mouse back button\n  if (cmd === 'browser-backward' && win.webContents.canGoBack()) {\n    win.webContents.goBack()\n  }\n})"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Updating Tray Context Menu Items in Linux",
    "codeDescription": "Shows how to properly update individual menu items in the tray context menu for Linux systems. Demonstrates the need to reset the context menu after making changes to menu items.",
    "codeLanguage": "javascript",
    "codeTokens": 172,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Tray API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, Menu, Tray } = require('electron')\n\nlet appIcon = null\napp.whenReady().then(() => {\n  appIcon = new Tray('/path/to/my/icon')\n  const contextMenu = Menu.buildFromTemplate([\n    { label: 'Item1', type: 'radio' },\n    { label: 'Item2', type: 'radio' }\n  ])\n\n  // Make a change to the context menu\n  contextMenu.items[1].checked = false\n\n  // Call this again for Linux because we modified the context menu\n  appIcon.setContextMenu(contextMenu)\n})"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "TypeScript Declaration File for Context Bridge API",
    "codeDescription": "Defines TypeScript interfaces to augment the Window interface, ensuring type safety when accessing APIs exposed through contextBridge in the renderer process.",
    "codeLanguage": "typescript",
    "codeTokens": 76,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-18_snippet_7",
    "pageTitle": "Context Isolation in Electron",
    "codeList": [
      {
        "language": "typescript",
        "code": "export interface IElectronAPI {\n  loadPreferences: () => Promise<void>,\n}\n\ndeclare global {\n  interface Window {\n    electronAPI: IElectronAPI\n  }\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Checking Encryption Availability in Electron",
    "codeDescription": "Method to check if encryption is available on the current system. Returns true if the app has emitted the 'ready' event and the system meets platform-specific requirements for encryption.",
    "codeLanguage": "javascript",
    "codeTokens": 57,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/safe-storage.md#2025-04-18_snippet_0",
    "pageTitle": "Electron SafeStorage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "safeStorage.isEncryptionAvailable()"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Checking Command Line Switch in Electron (JavaScript)",
    "codeDescription": "This snippet demonstrates how to check if the '--disable-gpu' flag is set using the CommandLine class in Electron.",
    "codeLanguage": "javascript",
    "codeTokens": 57,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-18_snippet_0",
    "pageTitle": "CommandLine Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app } = require('electron')\napp.commandLine.hasSwitch('disable-gpu')"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Signing Windows Apps with Electron Packager",
    "codeDescription": "This code snippet shows how to configure Electron Packager to sign a Windows Electron application. It includes options for custom signing parameters and specifying a custom signing tool path.",
    "codeLanguage": "javascript",
    "codeTokens": 124,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/code-signing.md#2025-04-18_snippet_1",
    "pageTitle": "Code Signing for Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "const packager = require('@electron/packager')\n\npackager({\n  dir: '/path/to/my/app',\n  windowsSign: {\n    signWithParams: '--my=custom --parameters',\n    // If signtool.exe does not work for you, customize!\n    signToolPath: 'C:\\\\Path\\\\To\\\\my-custom-tool.exe'\n  }\n})"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Signing and Notarizing macOS Apps with Electron Packager",
    "codeDescription": "This snippet demonstrates how to use Electron Packager to sign and notarize a macOS Electron application. It includes configuration for both signing and notarization processes.",
    "codeLanguage": "javascript",
    "codeTokens": 113,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/code-signing.md#2025-04-18_snippet_0",
    "pageTitle": "Code Signing for Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "const packager = require('@electron/packager')\n\npackager({\n  dir: '/path/to/my/app',\n  osxSign: {},\n  osxNotarize: {\n    appleId: 'felix@felix.fun',\n    appleIdPassword: 'my-apple-id-password'\n  }\n})"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Setting Tooltip and Title for Tray in Electron",
    "codeDescription": "This code demonstrates how to set a tooltip and title for the Tray icon, providing additional information when users interact with it.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tray.md#2025-04-18_snippet_3",
    "pageTitle": "Creating a Tray Icon with Context Menu in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "tray.setToolTip('This is my application')\ntray.setTitle('This is my title')"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Creating HTML Structure for Dark Mode Toggle Interface in Electron",
    "codeDescription": "HTML layout for a simple dark mode demonstration in Electron. It includes headings, a theme source indicator, and buttons to toggle dark mode and reset to system theme settings.",
    "codeLanguage": "html",
    "codeTokens": 200,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/dark-mode.md#2025-04-18_snippet_0",
    "pageTitle": "Dark Mode in Electron Applications",
    "codeList": [
      {
        "language": "html",
        "code": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World!</title>\n    <meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self' 'unsafe-inline';\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./styles.css\">\n</head>\n<body>\n    <h1>Hello World!</h1>\n    <p>Current theme source: <strong id=\"theme-source\">System</strong></p>\n\n    <button id=\"toggle-dark-mode\">Toggle Dark Mode</button>\n    <button id=\"reset-to-system\">Reset to System Theme</button>\n\n    <script src=\"renderer.js\"></script>\n</body>\n</html>"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Implementing Recent Documents Management in Electron",
    "codeDescription": "Creates an Electron application that demonstrates adding and clearing recent documents. Uses fs module to create a sample document and registers it in the recent documents list. Also handles window creation and application lifecycle events.",
    "codeLanguage": "javascript",
    "codeTokens": 225,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/recent-documents.md#2025-04-18_snippet_0",
    "pageTitle": "Recent Documents Management in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow } = require('electron/main')\nconst fs = require('node:fs')\nconst path = require('node:path')\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.loadFile('index.html')\n}\n\nconst fileName = 'recently-used.md'\nfs.writeFile(fileName, 'Lorem Ipsum', () => {\n  app.addRecentDocument(path.join(__dirname, fileName))\n})\n\napp.whenReady().then(createWindow)\n\napp.on('window-all-closed', () => {\n  app.clearRecentDocuments()\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Managing Window Creation on macOS Activation",
    "codeDescription": "Implementation of macOS-specific behavior to create new windows when app is activated with no windows open. Includes initialization in the app.whenReady() callback.",
    "codeLanguage": "javascript",
    "codeTokens": 85,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-18_snippet_6",
    "pageTitle": "Building Your First Electron App",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.whenReady().then(() => {\n  createWindow()\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Add Custom Drag Region in Electron",
    "codeDescription": "Adds draggable region functionality to the custom title bar using CSS app-region property.",
    "codeLanguage": "javascript",
    "codeTokens": 47,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-18_snippet_3",
    "pageTitle": "Custom Title Bar Implementation in Electron",
    "codeList": [
      {
        "language": "fiddle",
        "code": "docs/fiddles/features/window-customization/custom-title-bar/custom-drag-region"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Setting Spellchecker Languages in Electron",
    "codeDescription": "Code to configure spellchecker languages and retrieve available language options for Windows and Linux platforms.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/spellchecker.md#2025-04-18_snippet_1",
    "pageTitle": "Electron SpellChecker Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Sets the spellchecker to check English US and French\nmyWindow.webContents.session.setSpellCheckerLanguages(['en-US', 'fr'])\n\n// An array of all available language codes\nconst possibleLanguages = myWindow.webContents.session.availableSpellCheckerLanguages"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Writing Plain Text to Clipboard",
    "codeDescription": "Shows how to write plain text content to the system clipboard. This snippet demonstrates the basic clipboard writing operation.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Clipboard API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { clipboard } = require('electron')\n\nconst text = 'hello i am a bit of text!'\nclipboard.writeText(text)"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Signing Electron App for Mac App Store Submission",
    "codeDescription": "JavaScript code showing how to sign an Electron app for Mac App Store submission using the @electron/osx-sign module with Apple Distribution certificate.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-18_snippet_2",
    "pageTitle": "Mac App Store Submission Guide for Electron Apps",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { signAsync } = require('@electron/osx-sign')\n\nsignAsync({\n  app: 'path/to/your.app',\n  identity: 'Apple Distribution'\n})"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Starting a Task to Keep Service Worker Alive in Electron",
    "codeDescription": "Method to initiate a task that keeps the service worker alive until explicitly ended. Returns an object with an 'end' function that must be called to allow the service worker to terminate when idle.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/service-worker-main.md#2025-04-18_snippet_2",
    "pageTitle": "ServiceWorkerMain API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "serviceWorker.startTask()"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Creating Tray and Window Icons in Electron (JavaScript)",
    "codeDescription": "Demonstrates how to create a tray icon and set a window icon using file paths in Electron's main process.",
    "codeLanguage": "javascript",
    "codeTokens": 83,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/native-image.md#2025-04-18_snippet_0",
    "pageTitle": "NativeImage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow, Tray } = require('electron')\n\nconst tray = new Tray('/Users/somebody/images/icon.png')\nconst win = new BrowserWindow({ icon: '/Users/somebody/images/window.png' })"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Getting Bounds of Tray Icon in Electron",
    "codeDescription": "This method returns a Rectangle object representing the bounds of the tray icon. It is available on macOS and Windows platforms.",
    "codeLanguage": "javascript",
    "codeTokens": 42,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-18_snippet_5",
    "pageTitle": "Electron Tray API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "tray.getBounds()"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Configuring Window Creation Handler in Electron Main Process",
    "codeDescription": "Shows how to set up a window open handler in the main process to control window creation with custom options and URL filtering.",
    "codeLanguage": "javascript",
    "codeTokens": 171,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/window-open.md#2025-04-18_snippet_1",
    "pageTitle": "Opening Windows in Electron Renderer",
    "codeList": [
      {
        "language": "javascript",
        "code": "// main.js\nconst mainWindow = new BrowserWindow()\n\n// In this example, only windows with the `about:blank` url will be created.\n// All other urls will be blocked.\nmainWindow.webContents.setWindowOpenHandler(({ url }) => {\n  if (url === 'about:blank') {\n    return {\n      action: 'allow',\n      overrideBrowserWindowOptions: {\n        frame: false,\n        fullscreenable: false,\n        backgroundColor: 'black',\n        webPreferences: {\n          preload: 'my-child-window-preload-script.js'\n        }\n      }\n    }\n  }\n  return { action: 'deny' }\n})"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Creating a Window on an External Display in Electron",
    "codeDescription": "Example of creating an Electron window on an external display. The code finds an external display by checking for non-zero x or y coordinates in the display bounds, then positions a new window on that display.",
    "codeLanguage": "javascript",
    "codeTokens": 170,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/screen.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Screen Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow, screen } = require('electron')\n\nlet win\n\napp.whenReady().then(() => {\n  const displays = screen.getAllDisplays()\n  const externalDisplay = displays.find((display) => {\n    return display.bounds.x !== 0 || display.bounds.y !== 0\n  })\n\n  if (externalDisplay) {\n    win = new BrowserWindow({\n      x: externalDisplay.bounds.x + 50,\n      y: externalDisplay.bounds.y + 50\n    })\n    win.loadURL('https://github.com')\n  }\n})"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Using dialog.showErrorBox Method in Electron",
    "codeDescription": "Displays a modal error dialog with title and content. This method can be called before the app is ready and is useful for showing early startup errors. On Linux, messages will be sent to stderr if called before app ready.",
    "codeLanguage": "JavaScript",
    "codeTokens": 66,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-18_snippet_7",
    "pageTitle": "Electron Dialog Module",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "dialog.showErrorBox(title, content)"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Setting Background Color - Electron JavaScript",
    "codeDescription": "Examples of setting background color for BrowserWindow using different color formats.",
    "codeLanguage": "javascript",
    "codeTokens": 57,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_2",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "const win = new BrowserWindow({ backgroundColor: '#2e2c29' })\nwin.loadURL('https://github.com')"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Implementing Media Controls in Renderer Process",
    "codeDescription": "This renderer process code handles the start and stop buttons for display media capture. It uses the navigator.mediaDevices.getDisplayMedia API to capture the screen with specific video constraints and manages the video playback.",
    "codeLanguage": "javascript",
    "codeTokens": 186,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/desktop-capturer.md#2025-04-18_snippet_1",
    "pageTitle": "Desktop Capturer Module in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// renderer.js\nconst startButton = document.getElementById('startButton')\nconst stopButton = document.getElementById('stopButton')\nconst video = document.querySelector('video')\n\nstartButton.addEventListener('click', () => {\n  navigator.mediaDevices.getDisplayMedia({\n    audio: true,\n    video: {\n      width: 320,\n      height: 240,\n      frameRate: 30\n    }\n  }).then(stream => {\n    video.srcObject = stream\n    video.onloadedmetadata = (e) => video.play()\n  }).catch(e => console.log(e))\n})\n\nstopButton.addEventListener('click', () => {\n  video.pause()\n})"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Starting and Stopping Network Logging in Electron",
    "codeDescription": "This snippet demonstrates how to use the netLog module to start logging network events to a file, and then stop logging after some network activity has occurred. It uses the app.whenReady() method to ensure the app is initialized before starting logging.",
    "codeLanguage": "javascript",
    "codeTokens": 128,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/net-log.md#2025-04-18_snippet_0",
    "pageTitle": "Electron netLog API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, netLog } = require('electron')\n\napp.whenReady().then(async () => {\n  await netLog.startLogging('/path/to/net-log')\n  // After some network events\n  const path = await netLog.stopLogging()\n  console.log('Net-logs written to', path)\n})"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Displaying ShareMenu Popup in Electron (JavaScript)",
    "codeDescription": "Shows the share menu as a context menu in a BrowserWindow. Accepts optional parameters for positioning and callback.",
    "codeLanguage": "javascript",
    "codeTokens": 46,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/share-menu.md#2025-04-18_snippet_1",
    "pageTitle": "ShareMenu Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "shareMenu.popup([options])"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Purchasing Products with In-App Purchase",
    "codeDescription": "Method to purchase a product using its ID. Returns a Promise that resolves to boolean indicating if the product was successfully added to payment queue.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-18_snippet_0",
    "pageTitle": "In-App Purchase Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "inAppPurchase.purchaseProduct(productID[, opts])"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Handling Dynamic Imports in Main Process ESM",
    "codeDescription": "This example demonstrates a potential timing issue when using dynamic imports in the main process without awaiting them, where the app may be ready before the import resolves.",
    "codeLanguage": "javascript",
    "codeTokens": 98,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/esm.md#2025-04-18_snippet_0",
    "pageTitle": "ES Modules (ESM) in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// add an await call here to guarantee that path setup will finish before `ready`\nimport('./set-up-paths.mjs')\n\napp.whenReady().then(() => {\n  console.log('This code may execute before the above import')\n})"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Directory Structure for Electron App on Windows and Linux",
    "codeDescription": "Shows the required file structure when manually packaging an Electron app on Windows and Linux. The app folder must be placed in the resources directory of the Electron distribution.",
    "codeLanguage": "plain",
    "codeTokens": 68,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/application-distribution.md#2025-04-18_snippet_1",
    "pageTitle": "Application Packaging in Electron",
    "codeList": [
      {
        "language": "plain",
        "code": "electron/resources/app\n├── package.json\n├── main.js\n└── index.html"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Setting Draggable Region on Body Element",
    "codeDescription": "CSS implementation to make the entire window draggable by applying the app-region drag property to the body element.",
    "codeLanguage": "css",
    "codeTokens": 47,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-18_snippet_0",
    "pageTitle": "Custom Window Interactions in Electron",
    "codeList": [
      {
        "language": "css",
        "code": "body {\n  app-region: drag;\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Registering Protocol Handler",
    "codeDescription": "Sets up the application to handle electron-fiddle:// protocol URLs.",
    "codeLanguage": "javascript",
    "codeTokens": 91,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-18_snippet_1",
    "pageTitle": "Deep Links in Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "if (process.defaultApp) {\n  if (process.argv.length >= 2) {\n    app.setAsDefaultProtocolClient('electron-fiddle', process.execPath, [path.resolve(process.argv[1])])\n  }\n} else {\n  app.setAsDefaultProtocolClient('electron-fiddle')\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Safely Loading Native Modules in Electron Web Workers",
    "codeDescription": "Demonstrates how to prevent loading native Node.js modules after Web Workers have started by overriding the process.dlopen function. This helps avoid crashes and memory corruption since native modules are generally not thread-safe.",
    "codeLanguage": "javascript",
    "codeTokens": 85,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/multithreading.md#2025-04-18_snippet_1",
    "pageTitle": "Multithreading in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "process.dlopen = () => {\n  throw new Error('Load native module is not safe')\n}\nconst worker = new Worker('script.js')"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Using electron-installer-snap programmatically in JavaScript",
    "codeDescription": "JavaScript code snippet demonstrating how to use electron-installer-snap programmatically in an existing build pipeline.",
    "codeLanguage": "js",
    "codeTokens": 75,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-18_snippet_2",
    "pageTitle": "Snapcraft Guide for Packaging Electron Applications on Linux",
    "codeList": [
      {
        "language": "js",
        "code": "const snap = require('electron-installer-snap')\n\nsnap(options)\n  .then(snapPath => console.log(`Created snap at ${snapPath}!`))"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Creating a TouchBarLabel instance in Electron",
    "codeDescription": "Constructor for creating a new TouchBarLabel in the macOS touch bar. Accepts options for label text, accessibility label for screen readers, and text color in hex format.",
    "codeLanguage": "javascript",
    "codeTokens": 57,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/touch-bar-label.md#2025-04-18_snippet_0",
    "pageTitle": "TouchBarLabel Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "new TouchBarLabel(options)"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Setting BrowserWindow Bounds in JavaScript",
    "codeDescription": "Demonstrates how to set and get the bounds of a BrowserWindow instance, including setting individual properties and retrieving the full bounds object.",
    "codeLanguage": "javascript",
    "codeTokens": 132,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_9",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n\n// set all bounds properties\nwin.setBounds({ x: 440, y: 225, width: 800, height: 600 })\n\n// set a single bounds property\nwin.setBounds({ width: 100 })\n\n// { x: 440, y: 225, width: 100, height: 600 }\nconsole.log(win.getBounds())"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Basic Update Implementation",
    "codeDescription": "Simple implementation of update-electron-app module for automatic updates.",
    "codeLanguage": "javascript",
    "codeTokens": 39,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Application Auto-Update Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "require('update-electron-app')()"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Remove Default Title Bar in Electron",
    "codeDescription": "Configures an Electron BrowserWindow with hidden native title bar using titleBarStyle parameter.",
    "codeLanguage": "javascript",
    "codeTokens": 48,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-18_snippet_0",
    "pageTitle": "Custom Title Bar Implementation in Electron",
    "codeList": [
      {
        "language": "fiddle",
        "code": "docs/fiddles/features/window-customization/custom-title-bar/remove-title-bar"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Using powerSaveBlocker in Electron",
    "codeDescription": "Demonstrates how to use the powerSaveBlocker module to prevent display sleep. The example shows importing the module, starting a power save blocker, checking its status, and stopping it.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/power-save-blocker.md#2025-04-18_snippet_0",
    "pageTitle": "Power Save Blocker API Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { powerSaveBlocker } = require('electron')\n\nconst id = powerSaveBlocker.start('prevent-display-sleep')\nconsole.log(powerSaveBlocker.isStarted(id))\n\npowerSaveBlocker.stop(id)"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Event Listening in IpcMainServiceWorker",
    "codeDescription": "Method to listen for IPC messages on a specific channel. The listener receives an event object and any additional arguments sent with the message.",
    "codeLanguage": "javascript",
    "codeTokens": 55,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-18_snippet_0",
    "pageTitle": "IPC Main Service Worker API Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "ipcMainServiceWorker.on(channel, listener)"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Implementing Flash Frame Effect for Windows Taskbar in Electron",
    "codeDescription": "This example shows how to use the flashFrame method to highlight the taskbar button of an Electron application's window. It also demonstrates how to stop the flashing effect when the window gains focus.",
    "codeLanguage": "JavaScript",
    "codeTokens": 91,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-18_snippet_5",
    "pageTitle": "Windows Taskbar Customization in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow()\n\nwin.once('focus', () => win.flashFrame(false))\nwin.flashFrame(true)"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Handling Keyboard Shortcuts in BrowserWindow Using Web APIs",
    "codeDescription": "Captures keyboard events within a BrowserWindow using standard DOM event listeners in the renderer process. This approach uses the addEventListener API to handle keyup events.",
    "codeLanguage": "javascript",
    "codeTokens": 103,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#2025-04-18_snippet_2",
    "pageTitle": "Keyboard Shortcuts in Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "function handleKeyPress (event) {\n  // You can put code here to handle the keypress.\n  document.getElementById('last-keypress').innerText = event.key\n  console.log(`You pressed ${event.key}`)\n}\n\nwindow.addEventListener('keyup', handleKeyPress, true)"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Windows and Linux Protocol Handler Implementation",
    "codeDescription": "Handles protocol activation for Windows and Linux platforms using single instance lock.",
    "codeLanguage": "javascript",
    "codeTokens": 135,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-18_snippet_3",
    "pageTitle": "Deep Links in Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "const gotTheLock = app.requestSingleInstanceLock()\n\nif (!gotTheLock) {\n  app.quit()\n} else {\n  app.on('second-instance', (event, commandLine, workingDirectory) => {\n    if (mainWindow) {\n      if (mainWindow.isMinimized()) mainWindow.restore()\n      mainWindow.focus()\n    }\n    dialog.showErrorBox('Welcome Back', `You arrived from: ${commandLine.pop()}`)\n  })\n\n  app.whenReady().then(() => {\n    createWindow()\n  })\n}"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Creating Modal Window in Electron Renderer Process",
    "codeDescription": "Example of creating a child window from the renderer process and writing content to it directly.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/window-open.md#2025-04-18_snippet_2",
    "pageTitle": "Opening Windows in Electron Renderer",
    "codeList": [
      {
        "language": "javascript",
        "code": "// renderer process (mainWindow)\nconst childWindow = window.open('', 'modal')\nchildWindow.document.write('<h1>Hello</h1>')"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Canceling HTTP Request in Electron",
    "codeDescription": "Method to abort an ongoing HTTP transaction. Will emit 'abort' and 'close' events if the request hasn't closed, and 'aborted' event on the response object if it exists.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-18_snippet_3",
    "pageTitle": "ClientRequest Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "request.abort()"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Setting Represented File in Electron BrowserWindow",
    "codeDescription": "Example code demonstrating how to set a represented file and document edited state for an Electron window on macOS. Uses BrowserWindow.setRepresentedFilename to set the user's home directory as the represented file and marks the document as edited.",
    "codeLanguage": "javascript",
    "codeTokens": 212,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/represented-file.md#2025-04-18_snippet_0",
    "pageTitle": "Representing Files in a BrowserWindow",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow } = require('electron/main')\nconst os = require('node:os')\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600\n  })\n\n  win.setRepresentedFilename(os.homedir())\n  win.setDocumentEdited(true)\n\n  win.loadFile('index.html')\n}\n\napp.whenReady().then(() => {\n  createWindow()\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow()\n    }\n  })\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Initializing TouchBarSlider in Electron",
    "codeDescription": "Constructor for creating a new TouchBarSlider instance with configurable options including label, value range, and change event handler.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/touch-bar-slider.md#2025-04-18_snippet_0",
    "pageTitle": "TouchBarSlider Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "new TouchBarSlider({\n  label: 'Slider Label',\n  value: 50,\n  minValue: 0,\n  maxValue: 100,\n  change: (newValue) => {\n    console.log(`Slider value changed to ${newValue}`);\n  }\n})"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Customize Window Controls Overlay",
    "codeDescription": "Shows how to customize window controls overlay with custom height, color, and symbol color properties.",
    "codeLanguage": "javascript",
    "codeTokens": 95,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-18_snippet_5",
    "pageTitle": "Custom Title Bar Implementation in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({\n  titleBarStyle: 'hidden',\n  titleBarOverlay: {\n    color: '#2f3241',\n    symbolColor: '#74b1be',\n    height: 60\n  }\n})"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Accessing and Using Cookies in Electron",
    "codeDescription": "Demonstrates how to access the Cookies class through a Session object, query cookies for all URLs or a specific URL, and set a new cookie with basic properties.",
    "codeLanguage": "javascript",
    "codeTokens": 227,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/cookies.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Cookies Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { session } = require('electron')\n\n// Query all cookies.\nsession.defaultSession.cookies.get({})\n  .then((cookies) => {\n    console.log(cookies)\n  }).catch((error) => {\n    console.log(error)\n  })\n\n// Query all cookies associated with a specific url.\nsession.defaultSession.cookies.get({ url: 'https://www.github.com' })\n  .then((cookies) => {\n    console.log(cookies)\n  }).catch((error) => {\n    console.log(error)\n  })\n\n// Set a cookie with the given cookie data;\n// may overwrite equivalent cookies if they exist.\nconst cookie = { url: 'https://www.github.com', name: 'dummy_name', value: 'dummy' }\nsession.defaultSession.cookies.set(cookie)\n  .then(() => {\n    // success\n  }, (error) => {\n    console.error(error)\n  })"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Checking if NativeImage is Template Image in Electron (macOS)",
    "codeDescription": "Determines whether the NativeImage is a macOS template image. Returns a boolean value indicating the template image state.",
    "codeLanguage": "javascript",
    "codeTokens": 42,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/native-image.md#2025-04-18_snippet_8",
    "pageTitle": "NativeImage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "image.isTemplateImage()"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Reading RTF from Clipboard",
    "codeDescription": "Demonstrates how to read Rich Text Format (RTF) content from the system clipboard. This example writes RTF to the clipboard first, then reads it back.",
    "codeLanguage": "javascript",
    "codeTokens": 157,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-18_snippet_5",
    "pageTitle": "Electron Clipboard API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { clipboard } = require('electron')\n\nclipboard.writeRTF('{\\\\rtf1\\\\ansi{\\\\fonttbl\\\\f0\\\\fswiss Helvetica;}\\\\f0\\\\pard\\nThis is some {\\\\b bold} text.\\\\par\\n}')\n\nconst rtf = clipboard.readRTF()\nconsole.log(rtf)\n// {\\\\rtf1\\\\ansi{\\\\fonttbl\\\\f0\\\\fswiss Helvetica;}\\\\f0\\\\pard\\nThis is some {\\\\b bold} text.\\\\par\\n}"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Requesting Media Access Permission in Electron (macOS)",
    "codeDescription": "Method to request user permission for accessing media devices like microphone and camera on macOS. Returns a Promise that resolves to a boolean indicating whether access was granted. Requires NSMicrophoneUsageDescription and NSCameraUsageDescription to be set in Info.plist.",
    "codeLanguage": "javascript",
    "codeTokens": 75,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/system-preferences.md#2025-04-18_snippet_3",
    "pageTitle": "System Preferences API Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "systemPreferences.askForMediaAccess(mediaType)"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Using API in Isolated World",
    "codeDescription": "Example of using the exposed API in a specific isolated world.",
    "codeLanguage": "javascript",
    "codeTokens": 34,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/context-bridge.md#2025-04-18_snippet_4",
    "pageTitle": "Context Bridge in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "window.electron.doThing()"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Writing Multiple Formats to Clipboard",
    "codeDescription": "Demonstrates how to write multiple data formats to the clipboard simultaneously. This example writes text, HTML, RTF, and bookmark data in a single operation.",
    "codeLanguage": "javascript",
    "codeTokens": 171,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-18_snippet_12",
    "pageTitle": "Electron Clipboard API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { clipboard } = require('electron')\n\nclipboard.write({\n  text: 'test',\n  html: '<b>Hi</b>',\n  rtf: '{\\\\rtf1\\\\utf8 text}',\n  bookmark: 'a title'\n})\n\nconsole.log(clipboard.readText())\n// 'test'\n\nconsole.log(clipboard.readHTML())\n// <meta charset='utf-8'><b>Hi</b>\n\nconsole.log(clipboard.readRTF())\n// '{\\\\rtf1\\\\utf8 text}'\n\nconsole.log(clipboard.readBookmark())\n// { title: 'a title', url: 'test' }"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Checking Available Clipboard Formats",
    "codeDescription": "Demonstrates how to check what formats are currently available on the clipboard. Returns an array of supported formats for the clipboard type.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-18_snippet_8",
    "pageTitle": "Electron Clipboard API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { clipboard } = require('electron')\n\nconst formats = clipboard.availableFormats()\nconsole.log(formats)\n// [ 'text/plain', 'text/html' ]"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "MacOS Protocol Handler Implementation",
    "codeDescription": "Handles protocol activation specifically for MacOS using the open-url event.",
    "codeLanguage": "javascript",
    "codeTokens": 72,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-18_snippet_4",
    "pageTitle": "Deep Links in Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.whenReady().then(() => {\n  createWindow()\n})\n\napp.on('open-url', (event, url) => {\n  dialog.showErrorBox('Welcome Back', `You arrived from: ${url}`)\n})"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Setting Feed URL for autoUpdater in Electron",
    "codeDescription": "Sets the URL for the update feed and initializes the auto updater. This method accepts options including the URL, HTTP headers for macOS, and server type.",
    "codeLanguage": "javascript",
    "codeTokens": 54,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/auto-updater.md#2025-04-18_snippet_0",
    "pageTitle": "Electron autoUpdater Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "autoUpdater.setFeedURL(options)"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Setting Overlay Icon for Windows Taskbar in Electron",
    "codeDescription": "This code demonstrates how to set an overlay icon on the taskbar button of an Electron application's window using the setOverlayIcon method. It includes a description for accessibility.",
    "codeLanguage": "JavaScript",
    "codeTokens": 94,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-18_snippet_4",
    "pageTitle": "Windows Taskbar Customization in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow, nativeImage } = require('electron')\n\nconst win = new BrowserWindow()\n\nwin.setOverlayIcon(nativeImage.createFromPath('path/to/overlay.png'), 'Description for overlay')"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Using postMessage Method in MessagePortMain",
    "codeDescription": "Method for sending a message from the port and optionally transferring ownership of objects to other browsing contexts.",
    "codeLanguage": "javascript",
    "codeTokens": 44,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/message-port-main.md#2025-04-18_snippet_0",
    "pageTitle": "MessagePortMain Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "port.postMessage(message, [transfer])"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Disabling ASAR support using process.noAsar flag",
    "codeDescription": "Shows how to disable ASAR archive support in the fs module by setting process.noAsar to true, allowing the ASAR archive to be treated as a regular file.",
    "codeLanguage": "js",
    "codeTokens": 76,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-18_snippet_7",
    "pageTitle": "ASAR Archives in Electron",
    "codeList": [
      {
        "language": "js",
        "code": "const fs = require('node:fs')\nprocess.noAsar = true\nfs.readFileSync('/path/to/example.asar')"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Configuring VSCode launch.json for Electron Main Process Debugging",
    "codeDescription": "JSON configuration for VSCode's launch.json file that enables debugging the main process of an Electron application. It sets up the proper runtime executable and arguments needed for Electron debugging.",
    "codeLanguage": "json",
    "codeTokens": 165,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/debugging-vscode.md#2025-04-18_snippet_1",
    "pageTitle": "Debugging Electron Applications in VSCode",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Main Process\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"cwd\": \"${workspaceFolder}\",\n      \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron\",\n      \"windows\": {\n        \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron.cmd\"\n      },\n      \"args\" : [\".\"],\n      \"outputCapture\": \"std\"\n    }\n  ]\n}"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "HTML Structure for Desktop Capture Application",
    "codeDescription": "This HTML file provides the structure for the desktop capture application. It includes start and stop buttons, a video element for displaying the captured content, and links to the renderer script with appropriate security policies.",
    "codeLanguage": "html",
    "codeTokens": 151,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/desktop-capturer.md#2025-04-18_snippet_2",
    "pageTitle": "Desktop Capturer Module in Electron",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- index.html -->\n<html>\n<meta http-equiv=\"content-security-policy\" content=\"script-src 'self' 'unsafe-inline'\" />\n  <body>\n    <button id=\"startButton\" class=\"button\">Start</button>\n    <button id=\"stopButton\" class=\"button\">Stop</button>\n    <video width=\"320\" height=\"240\" autoplay></video>\n    <script src=\"renderer.js\"></script>\n  </body>\n</html>"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "MacOS Code Signing Configuration",
    "codeDescription": "Forge configuration for code signing and notarizing macOS applications with Apple credentials.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-5-packaging.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Application Packaging Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n  packagerConfig: {\n    osxSign: {},\n    osxNotarize: {\n      tool: 'notarytool',\n      appleId: process.env.APPLE_ID,\n      appleIdPassword: process.env.APPLE_PASSWORD,\n      teamId: process.env.APPLE_TEAM_ID\n    }\n  }\n}"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Checking Window Focusability on macOS and Windows",
    "codeDescription": "Method to check if a window can be focused. Returns a boolean indicating focusability status.",
    "codeLanguage": "JavaScript",
    "codeTokens": 41,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_20",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "win.isFocusable()"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Checking Battery Power Status in Electron",
    "codeDescription": "Determines whether the system is currently running on battery power, returning a boolean value.",
    "codeLanguage": "markdown",
    "codeTokens": 37,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/power-monitor.md#2025-04-18_snippet_3",
    "pageTitle": "powerMonitor Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "powerMonitor.isOnBatteryPower()"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Accessing Frames of Existing Pages in Electron",
    "codeDescription": "This code shows how to access frames of existing pages using the mainFrame property of WebContents. It filters YouTube embeds from a loaded Reddit page.",
    "codeLanguage": "javascript",
    "codeTokens": 154,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-frame-main.md#2025-04-18_snippet_1",
    "pageTitle": "WebFrameMain Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\n\nasync function main () {\n  const win = new BrowserWindow({ width: 800, height: 600 })\n  await win.loadURL('https://reddit.com')\n\n  const youtubeEmbeds = win.webContents.mainFrame.frames.filter((frame) => {\n    try {\n      const url = new URL(frame.url)\n      return url.host === 'www.youtube.com'\n    } catch {\n      return false\n    }\n  })\n\n  console.log(youtubeEmbeds)\n}\n\nmain()"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Setting Zoom Factor in Electron WebFrame",
    "codeDescription": "This snippet demonstrates how to zoom the current page to 200% using the WebFrame API in Electron.",
    "codeLanguage": "javascript",
    "codeTokens": 55,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-18_snippet_0",
    "pageTitle": "WebFrame API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { webFrame } = require('electron')\n\nwebFrame.setZoomFactor(2)"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Checking if Clipboard Supports a Format",
    "codeDescription": "Demonstrates how to check if the clipboard supports a specific format. Returns a boolean indicating whether the format is supported.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-18_snippet_9",
    "pageTitle": "Electron Clipboard API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { clipboard } = require('electron')\n\nconst hasFormat = clipboard.has('public/utf8-plain-text')\nconsole.log(hasFormat)\n// 'true' or 'false'"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Popping Up Context Menu for Tray Icon in Electron",
    "codeDescription": "This method displays the context menu for a tray icon. It can optionally show a custom menu and specify a position on Windows. The position defaults to (0, 0) if not provided.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Tray API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "tray.popUpContextMenu([menu, position])"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Loading HTML from an ASAR archive into a BrowserWindow",
    "codeDescription": "Shows how to create an Electron BrowserWindow and load an HTML file from inside an ASAR archive using the file:// protocol.",
    "codeLanguage": "js",
    "codeTokens": 74,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-18_snippet_4",
    "pageTitle": "ASAR Archives in Electron",
    "codeList": [
      {
        "language": "js",
        "code": "const { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n\nwin.loadURL('file:///path/to/example.asar/static/index.html')"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Creating Frameless Windows in Electron",
    "codeDescription": "This snippet demonstrates how to create a frameless window in Electron by setting the 'frame' parameter to false in the BrowserWindow constructor.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-styles.md#2025-04-18_snippet_0",
    "pageTitle": "Custom Window Styles in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "```fiddle docs/fiddles/features/window-customization/custom-window-styles/frameless-windows\n\n```"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Starting MessagePortMain Message Queue",
    "codeDescription": "Method that starts the sending of messages queued on the port. Messages will be queued until this method is called.",
    "codeLanguage": "javascript",
    "codeTokens": 43,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/message-port-main.md#2025-04-18_snippet_1",
    "pageTitle": "MessagePortMain Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "port.start()"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Accessing First Child Frame in Electron WebFrame",
    "codeDescription": "Retrieves the first child frame of the current webFrame. Returns null if webFrame has no children or if the first child is not in the current renderer process.",
    "codeLanguage": "markdown",
    "codeTokens": 104,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-18_snippet_5",
    "pageTitle": "WebFrame API Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "### `webFrame.firstChild` _Readonly_\n\nA `WebFrame | null` representing the first child frame of `webFrame`, the property\nwould be `null` if `webFrame` has no children or if first child is not in the\ncurrent renderer process."
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Creating Draggable Element in HTML for Electron App",
    "codeDescription": "This HTML snippet creates a draggable div element and includes a reference to the renderer script.",
    "codeLanguage": "html",
    "codeTokens": 80,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-file-drag-drop.md#2025-04-18_snippet_1",
    "pageTitle": "Native File Drag & Drop in Electron",
    "codeList": [
      {
        "language": "html",
        "code": "<div style=\"border:2px solid black;border-radius:3px;padding:5px;display:inline-block\" draggable=\"true\" id=\"drag\">Drag me</div>\n<script src=\"renderer.js\"></script>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Reading a file from an ASAR archive using Node.js fs module",
    "codeDescription": "Demonstrates how to read a file contained within an ASAR archive using Node's fs module, which in Electron treats ASAR archives as virtual directories.",
    "codeLanguage": "js",
    "codeTokens": 67,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-18_snippet_1",
    "pageTitle": "ASAR Archives in Electron",
    "codeList": [
      {
        "language": "js",
        "code": "const fs = require('node:fs')\nfs.readFileSync('/path/to/example.asar/file.txt')"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Setting Window Background Material on Windows",
    "codeDescription": "Method to set the browser window's system-drawn background material. Takes a string parameter specifying the material type.",
    "codeLanguage": "JavaScript",
    "codeTokens": 45,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_25",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "win.setBackgroundMaterial(material)"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Getting Animation Settings in Electron",
    "codeDescription": "Method that returns an object containing system animation preferences including rich animation rendering status, scroll animation enablement, and reduced motion preferences.",
    "codeLanguage": "javascript",
    "codeTokens": 49,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/system-preferences.md#2025-04-18_snippet_4",
    "pageTitle": "System Preferences API Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "systemPreferences.getAnimationSettings()"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Advanced Menu Template with Positioning in JavaScript",
    "codeDescription": "Illustrates a more complex menu template using separators and positioning keywords like 'beforeGroupContaining' and 'afterGroupContaining'.",
    "codeLanguage": "javascript",
    "codeTokens": 124,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-18_snippet_4",
    "pageTitle": "Electron Menu API Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "[\n  { id: '1', label: 'one' },\n  { type: 'separator' },\n  { id: '3', label: 'three', beforeGroupContaining: ['1'] },\n  { id: '4', label: 'four', afterGroupContaining: ['2'] },\n  { type: 'separator' },\n  { id: '2', label: 'two' }\n]"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Creating a New TouchBarColorPicker Instance in Electron",
    "codeDescription": "Constructor for creating a new TouchBarColorPicker instance with customizable options including available colors, initially selected color, and a change event handler function.",
    "codeLanguage": "markdown",
    "codeTokens": 152,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/touch-bar-color-picker.md#2025-04-18_snippet_0",
    "pageTitle": "TouchBarColorPicker Class Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "### `new TouchBarColorPicker(options)`\n\n* `options` Object\n  * `availableColors` string[] (optional) - Array of hex color strings to\n    appear as possible colors to select.\n  * `selectedColor` string (optional) - The selected hex color in the picker,\n    i.e `#ABCDEF`.\n  * `change` Function (optional) - Function to call when a color is selected.\n    * `color` string - The color that the user selected from the picker."
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Mouse Event Handling in Preload Script",
    "codeDescription": "JavaScript implementation in preload script to handle mouse enter/leave events for click-through functionality.",
    "codeLanguage": "javascript",
    "codeTokens": 108,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-18_snippet_5",
    "pageTitle": "Custom Window Interactions in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "window.addEventListener('DOMContentLoaded', () => {\n  const el = document.getElementById('clickThroughElement')\n  el.addEventListener('mouseenter', () => {\n    ipcRenderer.send('set-ignore-mouse-events', true, { forward: true })\n  })\n  el.addEventListener('mouseleave', () => {\n    ipcRenderer.send('set-ignore-mouse-events', false)\n  })\n})"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Disabling Default Menu in Electron Application",
    "codeDescription": "This snippet demonstrates how to disable the default menu in an Electron application for improved startup performance. It calls Menu.setApplicationMenu(null) before the app's ready event.",
    "codeLanguage": "javascript",
    "codeTokens": 57,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/performance.md#2025-04-18_snippet_3",
    "pageTitle": "Performance Optimization Guidelines for Electron Apps",
    "codeList": [
      {
        "language": "javascript",
        "code": "Menu.setApplicationMenu(null)"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Resizing NativeImage in Electron",
    "codeDescription": "Resizes the NativeImage based on the provided options. Accepts an options object with width, height, and quality parameters. Returns a new NativeImage instance with the resized image. Preserves aspect ratio if only width or height is specified.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/native-image.md#2025-04-18_snippet_10",
    "pageTitle": "NativeImage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "image.resize(options)"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Writing Buffer to Clipboard",
    "codeDescription": "Shows how to write a Buffer to the clipboard with a specific format. This is useful for custom data formats or binary data transfer.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-18_snippet_11",
    "pageTitle": "Electron Clipboard API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { clipboard } = require('electron')\n\nconst buffer = Buffer.from('writeBuffer', 'utf8')\nclipboard.writeBuffer('public/utf8-plain-text', buffer)"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "macOS Update JSON Response Format",
    "codeDescription": "Example of the expected JSON response format from a Squirrel.Mac update server endpoint. The response includes the mandatory update package URL and optional fields like version name, release notes, and publication date.",
    "codeLanguage": "json",
    "codeTokens": 132,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-18_snippet_8",
    "pageTitle": "Electron Application Auto-Update Implementation Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n    \"url\": \"https://your-static.storage/your-app-1.2.3-darwin.zip\",\n    \"name\": \"1.2.3\",\n    \"notes\": \"Theses are some release notes innit\",\n    \"pub_date\": \"2024-09-18T12:29:53+01:00\"\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Using dialog.showCertificateTrustDialog Method in Electron",
    "codeDescription": "Displays a certificate trust dialog on macOS and Windows. Returns a Promise that resolves when the dialog is shown. On macOS, it's a customizable modal dialog, while on Windows it uses the OS's standard confirmation dialog.",
    "codeLanguage": "JavaScript",
    "codeTokens": 69,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-18_snippet_8",
    "pageTitle": "Electron Dialog Module",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "dialog.showCertificateTrustDialog([window, ]options)"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Checking if NativeImage is Empty in Electron",
    "codeDescription": "Determines whether the NativeImage instance is empty. Returns a boolean value indicating the empty state of the image.",
    "codeLanguage": "javascript",
    "codeTokens": 40,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/native-image.md#2025-04-18_snippet_5",
    "pageTitle": "NativeImage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "image.isEmpty()"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Disabling Text Selection in Draggable Region",
    "codeDescription": "CSS implementation to prevent text selection while dragging by combining user-select and app-region properties.",
    "codeLanguage": "css",
    "codeTokens": 52,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-18_snippet_2",
    "pageTitle": "Custom Window Interactions in Electron",
    "codeList": [
      {
        "language": "css",
        "code": ".titlebar {\n  user-select: none;\n  app-region: drag;\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Starting Service Workers in Electron",
    "codeDescription": "Example showing how to start service workers for specific scopes when a browser window is created, and send messages to those workers.",
    "codeLanguage": "javascript",
    "codeTokens": 183,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/service-workers.md#2025-04-18_snippet_1",
    "pageTitle": "ServiceWorkers Class in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, session } = require('electron')\nconst { serviceWorkers } = session.defaultSession\n\n// Collect service workers scopes\nconst workerScopes = Object.values(serviceWorkers.getAllRunning()).map((info) => info.scope)\n\napp.on('browser-window-created', async (event, window) => {\n  for (const scope of workerScopes) {\n    try {\n      // Ensure worker is started\n      const serviceWorker = await serviceWorkers.startWorkerForScope(scope)\n      serviceWorker.send('window-created', { windowId: window.id })\n    } catch (error) {\n      console.error(`Failed to start service worker for ${scope}`)\n      console.error(error)\n    }\n  }\n})"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Enabling ASAR Integrity with Electron Fuses (JavaScript)",
    "codeDescription": "JavaScript code using @electron/fuses to enable ASAR integrity validation in an Electron app. This code flips the EnableEmbeddedAsarIntegrityValidation and OnlyLoadAppFromAsar fuses to secure the application.",
    "codeLanguage": "js",
    "codeTokens": 149,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/asar-integrity.md#2025-04-18_snippet_1",
    "pageTitle": "ASAR Integrity in Electron",
    "codeList": [
      {
        "language": "js",
        "code": "const { flipFuses, FuseVersion, FuseV1Options } = require('@electron/fuses')\n\nflipFuses(\n  // E.g. /a/b/Foo.app\n  pathToPackagedApp,\n  {\n    version: FuseVersion.V1,\n    [FuseV1Options.EnableEmbeddedAsarIntegrityValidation]: true,\n    [FuseV1Options.OnlyLoadAppFromAsar]: true\n  }\n)"
      }
    ],
    "relevance": 0.888
  },
  {
    "codeTitle": "Adding Publish Command to npm Scripts",
    "codeDescription": "This JSON snippet adds the Forge publish command to the npm scripts in package.json. It allows running the publish process using npm run publish.",
    "codeLanguage": "json",
    "codeTokens": 93,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-18_snippet_2",
    "pageTitle": "Publishing and Updating Electron Applications",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"scripts\": {\n    \"start\": \"electron-forge start\",\n    \"package\": \"electron-forge package\",\n    \"make\": \"electron-forge make\",\n    \"publish\": \"electron-forge publish\"\n  }\n}"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Defining SegmentedControlSegment Properties in Electron",
    "codeDescription": "Specifies the configuration options for a segment within a segmented control component. Includes properties for label text, icon image, and segment enablement state.",
    "codeLanguage": "markdown",
    "codeTokens": 99,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/segmented-control-segment.md#2025-04-18_snippet_0",
    "pageTitle": "SegmentedControlSegment Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "* `label` string (optional) - The text to appear in this segment.\n* `icon` NativeImage (optional) - The image to appear in this segment.\n* `enabled` boolean (optional) - Whether this segment is selectable. Default: true."
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Getting Parent Window",
    "codeDescription": "Method to get the parent window of the current window. Returns a BrowserWindow object or null if there's no parent.",
    "codeLanguage": "JavaScript",
    "codeTokens": 46,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_22",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "win.getParentWindow()"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Installing GitHub Publisher for Electron Forge",
    "codeDescription": "This command installs the GitHub Publisher plugin for Electron Forge as a dev dependency. It allows automatic publishing of packaged applications to GitHub releases.",
    "codeLanguage": "shell",
    "codeTokens": 56,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-18_snippet_0",
    "pageTitle": "Publishing and Updating Electron Applications",
    "codeList": [
      {
        "language": "shell",
        "code": "npm install --save-dev @electron-forge/publisher-github"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Creating a TouchBarGroup Instance in Electron",
    "codeDescription": "Constructor for creating a group in the touch bar for native macOS applications. The constructor accepts an options object with an 'items' property that should be a TouchBar instance containing the items to display as a group.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/touch-bar-group.md#2025-04-18_snippet_0",
    "pageTitle": "TouchBarGroup Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "new TouchBarGroup(options)"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Flipping Electron Fuses with @electron/fuses",
    "codeDescription": "Demonstrates how to use the @electron/fuses npm package to programmatically enable/disable Electron features. The code shows flipping the RunAsNode fuse to false using the package's API.",
    "codeLanguage": "javascript",
    "codeTokens": 121,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/fuses.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Fuses Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { flipFuses, FuseVersion, FuseV1Options } = require('@electron/fuses')\n\nflipFuses(\n  // Path to electron\n  require('electron'),\n  // Fuses to flip\n  {\n    version: FuseVersion.V1,\n    [FuseV1Options.RunAsNode]: false\n  }\n)"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Setting Plain Text Encryption Mode in Electron",
    "codeDescription": "Method to force the safeStorage module to use an in-memory password for creating a symmetric encryption key when a valid OS password manager is unavailable. This is a no-op on Windows and macOS.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/safe-storage.md#2025-04-18_snippet_3",
    "pageTitle": "Electron SafeStorage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "safeStorage.setUsePlainTextEncryption(usePlainText)"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Cropping NativeImage in Electron",
    "codeDescription": "Crops the NativeImage based on the specified rectangle. Takes a Rectangle object as a parameter and returns a new NativeImage instance with the cropped image.",
    "codeLanguage": "javascript",
    "codeTokens": 50,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/native-image.md#2025-04-18_snippet_9",
    "pageTitle": "NativeImage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "image.crop(rect)"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Getting System Idle Time in Electron",
    "codeDescription": "Calculates and returns the system idle time in seconds using the powerMonitor module.",
    "codeLanguage": "markdown",
    "codeTokens": 37,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/power-monitor.md#2025-04-18_snippet_1",
    "pageTitle": "powerMonitor Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "powerMonitor.getSystemIdleTime()"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "MacOS Update Metadata Configuration - JSON Format",
    "codeDescription": "JSON structure for releases.json file used by Squirrel.Mac to handle application updates. Defines version information, release notes, and download URLs for different versions.",
    "codeLanguage": "json",
    "codeTokens": 272,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Application Auto-Update Implementation Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"currentRelease\": \"1.2.3\",\n  \"releases\": [\n    {\n      \"version\": \"1.2.1\",\n      \"updateTo\": {\n        \"version\": \"1.2.1\",\n        \"pub_date\": \"2023-09-18T12:29:53+01:00\",\n        \"notes\": \"Theses are some release notes innit\",\n        \"name\": \"1.2.1\",\n        \"url\": \"https://mycompany.example.com/myapp/releases/myrelease\"\n      }\n    },\n    {\n      \"version\": \"1.2.3\",\n      \"updateTo\": {\n        \"version\": \"1.2.3\",\n        \"pub_date\": \"2024-09-18T12:29:53+01:00\",\n        \"notes\": \"Theses are some more release notes innit\",\n        \"name\": \"1.2.3\",\n        \"url\": \"https://mycompany.example.com/myapp/releases/myrelease3\"\n      }\n    }\n  ]\n}"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Remove Message Handler in IpcMainServiceWorker",
    "codeDescription": "Method to remove an invoke message handler from a specific channel.",
    "codeLanguage": "javascript",
    "codeTokens": 40,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-18_snippet_6",
    "pageTitle": "IPC Main Service Worker API Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "ipcMainServiceWorker.removeHandler(channel)"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Clearing Thumbnail Toolbar Buttons in Electron for Windows Taskbar",
    "codeDescription": "This snippet shows how to remove all thumbnail toolbar buttons from an Electron application's window in the Windows taskbar by passing an empty array to the setThumbarButtons method.",
    "codeLanguage": "JavaScript",
    "codeTokens": 79,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-18_snippet_3",
    "pageTitle": "Windows Taskbar Customization in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow()\nwin.setThumbarButtons([])"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Creating Click-Through Window",
    "codeDescription": "JavaScript implementation to create a click-through window by ignoring mouse events using the setIgnoreMouseEvents API.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-18_snippet_3",
    "pageTitle": "Custom Window Interactions in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\nwin.setIgnoreMouseEvents(true)"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Stdout Stream Handling in Electron Utility Process",
    "codeDescription": "Example of reading stdout data from a child process in Electron's utility process implementation",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/utility-process.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Utility Process Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Main process\nconst { port1, port2 } = new MessageChannelMain()\nconst child = utilityProcess.fork(path.join(__dirname, 'test.js'))\nchild.stdout.on('data', (data) => {\n  console.log(`Received chunk ${data}`)\n})"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Defining ProxyRules Syntax in Electron",
    "codeDescription": "This snippet defines the syntax for proxy rules in Electron. It specifies the structure for scheme proxies, URL schemes, proxy URI lists, and proxy URLs.",
    "codeLanguage": "sh",
    "codeTokens": 127,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/proxy-config.md#2025-04-18_snippet_0",
    "pageTitle": "ProxyConfig Object Documentation",
    "codeList": [
      {
        "language": "sh",
        "code": "proxyRules = schemeProxies[\";\"<schemeProxies>]\nschemeProxies = [<urlScheme>\"=\"]<proxyURIList>\nurlScheme = \"http\" | \"https\" | \"ftp\" | \"socks\"\nproxyURIList = <proxyURL>[\",\"<proxyURIList>]\nproxyURL = [<proxyScheme>\"://\"]<proxyHost>[\":\"<proxyPort>]"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Setting Parent Window",
    "codeDescription": "Method to set the parent window of the current window. Takes a BrowserWindow object or null as parameter.",
    "codeLanguage": "JavaScript",
    "codeTokens": 44,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_21",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "win.setParentWindow(parent)"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Windows Code Signing Configuration",
    "codeDescription": "Forge configuration for code signing Windows applications using certificate files.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-5-packaging.md#2025-04-18_snippet_3",
    "pageTitle": "Electron Application Packaging Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n  makers: [\n    {\n      name: '@electron-forge/maker-squirrel',\n      config: {\n        certificateFile: './cert.pfx',\n        certificatePassword: process.env.CERTIFICATE_PASSWORD\n      }\n    }\n  ]\n}"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Process ID Management in Electron Utility Process",
    "codeDescription": "Shows how to handle and monitor process IDs in an Electron utility process, including spawn and exit events",
    "codeLanguage": "javascript",
    "codeTokens": 95,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/utility-process.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Utility Process Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const child = utilityProcess.fork(path.join(__dirname, 'test.js'))\n\nconsole.log(child.pid) // undefined\n\nchild.on('spawn', () => {\n  console.log(child.pid) // Integer\n})\n\nchild.on('exit', () => {\n  console.log(child.pid) // undefined\n})"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Remove Specific Listener in IpcMainServiceWorker",
    "codeDescription": "Method to remove a specific listener function from a channel's listener array.",
    "codeLanguage": "javascript",
    "codeTokens": 43,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-18_snippet_2",
    "pageTitle": "IPC Main Service Worker API Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "ipcMainServiceWorker.removeListener(channel, listener)"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Installing update-electron-app Module",
    "codeDescription": "This command installs the update-electron-app module as a runtime dependency. It simplifies the setup of the autoUpdater for update.electronjs.org.",
    "codeLanguage": "shell",
    "codeTokens": 53,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-18_snippet_3",
    "pageTitle": "Publishing and Updating Electron Applications",
    "codeList": [
      {
        "language": "shell",
        "code": "npm install update-electron-app"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Restoring Completed Transactions",
    "codeDescription": "Method to restore previously completed transactions for reinstalled apps or additional devices.",
    "codeLanguage": "javascript",
    "codeTokens": 40,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-18_snippet_3",
    "pageTitle": "In-App Purchase Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "inAppPurchase.restoreCompletedTransactions()"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Implementing -electron-corner-smoothing CSS rule with percentage value",
    "codeDescription": "This CSS snippet demonstrates how to apply corner smoothing to an element with border-radius. The example creates a 128px square box with cornflower blue background and 24px border radius, with variable corner smoothing percentage.",
    "codeLanguage": "css",
    "codeTokens": 119,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/corner-smoothing-css.md#2025-04-18_snippet_0",
    "pageTitle": "CSS Rule: -electron-corner-smoothing in Electron",
    "codeList": [
      {
        "language": "css",
        "code": ".box {\n  width: 128px;\n  height: 128px;\n  background-color: cornflowerblue;\n  border-radius: 24px;\n  -electron-corner-smoothing: var(--percent);  /* Column header in table below. */\n}"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Writing HTML to Clipboard",
    "codeDescription": "Shows how to write HTML markup to the system clipboard. This snippet demonstrates writing formatted content to the clipboard.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-18_snippet_4",
    "pageTitle": "Electron Clipboard API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { clipboard } = require('electron')\n\nclipboard.writeHTML('<b>Hi</b>')"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Forwarding Mouse Events Handler - Main Process",
    "codeDescription": "JavaScript implementation for the main process to handle mouse event forwarding in click-through windows.",
    "codeLanguage": "javascript",
    "codeTokens": 124,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-18_snippet_4",
    "pageTitle": "Custom Window Interactions in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow, ipcMain } = require('electron')\nconst path = require('node:path')\n\nconst win = new BrowserWindow({\n  webPreferences: {\n    preload: path.join(__dirname, 'preload.js')\n  }\n})\n\nipcMain.on('set-ignore-mouse-events', (event, ignore, options) => {\n  const win = BrowserWindow.fromWebContents(event.sender)\n  win.setIgnoreMouseEvents(ignore, options)\n})"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Navigating Through History in Electron",
    "codeDescription": "Methods to navigate backward, forward, or to a specific index in the browsing history.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/navigation-history.md#2025-04-18_snippet_1",
    "pageTitle": "Navigation History Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "navigationHistory.goBack()\n\nnavigationHistory.goForward()\n\nnavigationHistory.goToIndex(index)\n\nnavigationHistory.goToOffset(offset)"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Accessing Battery Power Property in Electron",
    "codeDescription": "A boolean property that indicates whether the system is currently running on battery power. This is an alternative to using the isOnBatteryPower() method.",
    "codeLanguage": "markdown",
    "codeTokens": 49,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/power-monitor.md#2025-04-18_snippet_4",
    "pageTitle": "powerMonitor Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "powerMonitor.onBatteryPower"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Enabling Content Protection on macOS and Windows",
    "codeDescription": "Method to prevent window contents from being captured by other apps. Takes a boolean parameter to enable/disable protection.",
    "codeLanguage": "JavaScript",
    "codeTokens": 44,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_18",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "win.setContentProtection(enable)"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Defining JumpListCategory Object Structure in Markdown",
    "codeDescription": "This snippet outlines the structure of a JumpListCategory object, including its properties, types, and usage notes. It's crucial for developers working with Jump Lists in Electron applications.",
    "codeLanguage": "markdown",
    "codeTokens": 404,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/jump-list-category.md#2025-04-18_snippet_0",
    "pageTitle": "JumpListCategory Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "# JumpListCategory Object\n\n* `type` string (optional) - One of the following:\n  * `tasks` - Items in this category will be placed into the standard `Tasks`\n    category. There can be only one such category, and it will always be\n    displayed at the bottom of the Jump List.\n  * `frequent` - Displays a list of files frequently opened by the app, the\n    name of the category and its items are set by Windows.\n  * `recent` - Displays a list of files recently opened by the app, the name\n    of the category and its items are set by Windows. Items may be added to\n    this category indirectly using `app.addRecentDocument(path)`.\n  * `custom` - Displays tasks or file links, `name` must be set by the app.\n* `name` string (optional) - Must be set if `type` is `custom`, otherwise it should be\n  omitted.\n* `items` JumpListItem[] (optional) - Array of [`JumpListItem`](jump-list-item.md) objects if `type` is `tasks` or\n  `custom`, otherwise it should be omitted.\n\n**Note:** If a `JumpListCategory` object has neither the `type` nor the `name`\nproperty set then its `type` is assumed to be `tasks`. If the `name` property\nis set but the `type` property is omitted then the `type` is assumed to be\n`custom`.\n\n**Note:** The maximum length of a Jump List item's `description` property is\n260 characters. Beyond this limit, the item will not be added to the Jump\nList, nor will it be displayed."
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Sending Messages to Service Worker Process in Electron",
    "codeDescription": "Method to send asynchronous messages to a service worker process via a specified channel with arguments. Arguments are serialized using the Structured Clone Algorithm, with limitations on certain JavaScript types.",
    "codeLanguage": "javascript",
    "codeTokens": 59,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/service-worker-main.md#2025-04-18_snippet_1",
    "pageTitle": "ServiceWorkerMain API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "serviceWorker.send(channel, ...args)"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Closing ShareMenu Popup in Electron (JavaScript)",
    "codeDescription": "Closes the context menu in the specified BrowserWindow or the focused window if not specified.",
    "codeLanguage": "javascript",
    "codeTokens": 44,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/share-menu.md#2025-04-18_snippet_2",
    "pageTitle": "ShareMenu Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "shareMenu.closePopup([browserWindow])"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Accessing files in an ASAR archive using jQuery in the renderer process",
    "codeDescription": "Shows how to access files in an ASAR archive using jQuery's AJAX capabilities within a web page rendered in Electron, using the file:// protocol.",
    "codeLanguage": "html",
    "codeTokens": 85,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-18_snippet_5",
    "pageTitle": "ASAR Archives in Electron",
    "codeList": [
      {
        "language": "html",
        "code": "<script>\nlet $ = require('./jquery.min.js')\n$.get('file:///path/to/example.asar/file.txt', (data) => {\n  console.log(data)\n})\n</script>"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Defining BrowserWindow Constructor Interface in TypeScript",
    "codeDescription": "Interface definition for BrowserWindow constructor options that extends BaseWindowConstructorOptions. Includes webPreferences for web feature settings and paintWhenInitiallyHidden flag for controlling initial renderer behavior.",
    "codeLanguage": "typescript",
    "codeTokens": 78,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/browser-window-options.md#2025-04-18_snippet_0",
    "pageTitle": "BrowserWindow Constructor Options Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface BrowserWindowConstructorOptions extends BaseWindowConstructorOptions {\n  webPreferences?: WebPreferences;\n  paintWhenInitiallyHidden?: boolean;\n}"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Handle Single Invoke Message in IpcMainServiceWorker",
    "codeDescription": "Method to handle a single invokeable IPC message on a specific channel. The handler is removed after one use.",
    "codeLanguage": "javascript",
    "codeTokens": 52,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/ipc-main-service-worker.md#2025-04-18_snippet_5",
    "pageTitle": "IPC Main Service Worker API Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "ipcMainServiceWorker.handleOnce(channel, listener)"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Electron Packager API Configuration",
    "codeDescription": "JavaScript configuration for Electron Packager API to support protocol handlers.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-18_snippet_7",
    "pageTitle": "Deep Links in Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "const packager = require('@electron/packager')\n\npackager({\n  protocols: [\n    {\n      name: 'Electron Fiddle',\n      schemes: ['electron-fiddle']\n    }\n  ]\n}).then(paths => console.log(`SUCCESS: Created ${paths.join(', ')}`)).catch(err => console.error(`ERROR: ${err.message}`))"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "SerialPort Interface Definition - Electron TypeScript",
    "codeDescription": "TypeScript interface definition for the SerialPort object, including both required and optional properties. Contains platform-specific fields for macOS and Windows.",
    "codeLanguage": "typescript",
    "codeTokens": 151,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/serial-port.md#2025-04-18_snippet_0",
    "pageTitle": "SerialPort Object Documentation - Electron Framework",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface SerialPort {\n  portId: string;           // Unique identifier for the port\n  portName: string;         // Name of the port\n  displayName?: string;     // User-friendly device description\n  vendorId?: string;       // USB vendor ID\n  productId?: string;      // USB product ID\n  serialNumber?: string;   // USB device serial number\n  usbDriverName?: string;  // macOS-specific driver name\n  deviceInstanceId?: string; // Windows-specific device identifier\n}"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Basic Menu Template in JavaScript",
    "codeDescription": "Demonstrates a simple menu template with four items, each having an id and label.",
    "codeLanguage": "javascript",
    "codeTokens": 87,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Menu API Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "[\n  { id: '1', label: 'one' },\n  { id: '2', label: 'two' },\n  { id: '3', label: 'three' },\n  { id: '4', label: 'four' }\n]"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Finishing All Transactions",
    "codeDescription": "Method to complete all pending transactions.",
    "codeLanguage": "javascript",
    "codeTokens": 33,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-18_snippet_5",
    "pageTitle": "In-App Purchase Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "inAppPurchase.finishAllTransactions()"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Disabling USB blocklist in Electron using command line switch",
    "codeDescription": "This code demonstrates how to disable the default USB device blocklist in Electron by setting the 'disable-usb-blocklist' command line switch.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/devices.md#2025-04-18_snippet_2",
    "pageTitle": "Device Access in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.commandLine.appendSwitch('disable-usb-blocklist')"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "URL Pattern Examples for Electron's WebRequest Filter",
    "codeDescription": "Examples of valid URL patterns that can be used in the filter object for Electron's webRequest API. These patterns determine which HTTP requests will be intercepted by the webRequest listeners.",
    "codeLanguage": "javascript",
    "codeTokens": 124,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-request.md#2025-04-18_snippet_1",
    "pageTitle": "WebRequest Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "'<all_urls>'\n'http://foo:1234/'\n'http://foo.com/'\n'http://foo:1234/bar'\n'*://*/*'\n'*://example.com/*'\n'*://example.com/foo/*'\n'http://*.foo:1234/'\n'file://foo:1234/bar'\n'http://foo:*/'\n'*://www.foo.com/'"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Creating Transparent Windows in Electron",
    "codeDescription": "This snippet shows how to create a fully transparent window in Electron by setting the 'transparent' parameter to true in the BrowserWindow constructor. It also uses CSS styling to create a circular window effect.",
    "codeLanguage": "javascript",
    "codeTokens": 75,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-styles.md#2025-04-18_snippet_1",
    "pageTitle": "Custom Window Styles in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "```fiddle docs/fiddles/features/window-customization/custom-window-styles/transparent-windows\n\n```"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Defining ScrubberItem Object Properties in Markdown",
    "codeDescription": "This snippet defines the properties of a ScrubberItem object. It includes an optional 'label' property for text and an optional 'icon' property for an image, both used to represent the item visually.",
    "codeLanguage": "markdown",
    "codeTokens": 99,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/scrubber-item.md#2025-04-18_snippet_0",
    "pageTitle": "ScrubberItem Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "# ScrubberItem Object\n\n* `label` string (optional) - The text to appear in this item.\n* `icon` NativeImage (optional) - The image to appear in this item."
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Initializing Offscreen BrowserWindow in Electron JavaScript",
    "codeDescription": "Creates a BrowserWindow with offscreen rendering enabled and shared texture mode activated.",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/electron/electron/blob/main/shell/browser/osr/README.md#2025-04-18_snippet_0",
    "pageTitle": "Offscreen Rendering in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron');\n\nconst win = new BrowserWindow({\n  webPreferences: {\n    offscreen: true,\n    offscreen: {\n      useSharedTexture: true\n    }\n  }\n});"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Getting NativeImage Size in Electron",
    "codeDescription": "Retrieves the size of the NativeImage. Optionally accepts a scale factor parameter. Returns a Size object. If a scale factor is provided, it returns the size corresponding to the image representation closest to that value.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/native-image.md#2025-04-18_snippet_6",
    "pageTitle": "NativeImage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "image.getSize([scaleFactor])"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Creating Node.js Addon Bridge",
    "codeDescription": "N-API wrapper code that bridges C++ implementation with Node.js/JavaScript, including class definition, method exposure, and argument validation.",
    "codeLanguage": "cpp",
    "codeTokens": 358,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-18_snippet_8",
    "pageTitle": "Native Code Integration in Electron",
    "codeList": [
      {
        "language": "cpp",
        "code": "#include <napi.h>\n#include <string>\n#include \"../include/cpp_code.h\"\n\nclass MyAddon : public Napi::ObjectWrap<MyAddon> {\npublic:\n    static Napi::Object Init(Napi::Env env, Napi::Object exports) {\n        Napi::Function func = DefineClass(env, \"MyAddon\", {\n            InstanceMethod(\"helloWorld\", &MyAddon::HelloWorld)\n        });\n\n        Napi::FunctionReference* constructor = new Napi::FunctionReference();\n        *constructor = Napi::Persistent(func);\n        env.SetInstanceData(constructor);\n\n        exports.Set(\"MyAddon\", func);\n        return exports;\n    }\n\n    MyAddon(const Napi::CallbackInfo& info)\n        : Napi::ObjectWrap<MyAddon>(info) {}\n\nprivate:\n    Napi::Value HelloWorld(const Napi::CallbackInfo& info) {\n        Napi::Env env = info.Env();\n\n        if (info.Length() < 1 || !info[0].IsString()) {\n            Napi::TypeError::New(env, \"Expected string argument\").ThrowAsJavaScriptException();\n            return env.Null();\n        }\n\n        std::string input = info[0].As<Napi::String>();\n        std::string result = cpp_code::hello_world(input);\n        return Napi::String::New(env, result);\n    }\n};\n\nNapi::Object Init(Napi::Env env, Napi::Object exports) {\n    return MyAddon::Init(env, exports);\n}\n\nNODE_API_MODULE(my_addon, Init)"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Setting Title Bar Overlay on Windows and Linux",
    "codeDescription": "Method to update the style of the title bar overlay on a window with Window Controls Overlay enabled. Takes an options object as parameter.",
    "codeLanguage": "JavaScript",
    "codeTokens": 50,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_28",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "win.setTitleBarOverlay(options)"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Checking Window Visibility Across Workspaces on macOS and Linux",
    "codeDescription": "Method to check if a window is visible on all workspaces. Returns a boolean indicating visibility status.",
    "codeLanguage": "JavaScript",
    "codeTokens": 45,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_16",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "win.isVisibleOnAllWorkspaces()"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Getting Child Windows",
    "codeDescription": "Method to get all child windows of the current window. Returns an array of BrowserWindow objects.",
    "codeLanguage": "JavaScript",
    "codeTokens": 41,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_23",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "win.getChildWindows()"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Getting Selected Storage Backend in Electron (Linux Only)",
    "codeDescription": "Linux-specific method that returns a user-friendly name of the selected password manager backend. Returns values like 'basic_text', 'gnome_libsecret', 'kwallet', etc. based on the current desktop environment.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/safe-storage.md#2025-04-18_snippet_4",
    "pageTitle": "Electron SafeStorage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "safeStorage.getSelectedStorageBackend()"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Creating a TouchBarScrubber Instance in Electron",
    "codeDescription": "Constructor for a TouchBarScrubber object that creates a scrollable selector for the macOS Touch Bar. Requires an options object with items array and optional configuration for selection behavior, styling, and interaction mode.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/touch-bar-scrubber.md#2025-04-18_snippet_0",
    "pageTitle": "TouchBarScrubber Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "new TouchBarScrubber(options)"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Closing MessagePortMain Connection",
    "codeDescription": "Method that disconnects the port, so it is no longer active.",
    "codeLanguage": "javascript",
    "codeTokens": 35,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/message-port-main.md#2025-04-18_snippet_2",
    "pageTitle": "MessagePortMain Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "port.close()"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Configuring Custom Dictionary Download URL in Electron",
    "codeDescription": "Code to set a custom URL for downloading spellchecker dictionary files instead of using the default Google CDN.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/spellchecker.md#2025-04-18_snippet_3",
    "pageTitle": "Electron SpellChecker Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "myWindow.webContents.session.setSpellCheckerDictionaryDownloadURL('https://example.com/dictionaries/')"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Snapcraft configuration for desktop capture with PipeWire",
    "codeDescription": "YAML configuration snippet for enabling desktop capture in snap packages using PipeWire library.",
    "codeLanguage": "yaml",
    "codeTokens": 105,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-18_snippet_8",
    "pageTitle": "Snapcraft Guide for Packaging Electron Applications on Linux",
    "codeList": [
      {
        "language": "yaml",
        "code": "  pipewire:\n    plugin: nil\n    build-packages: [libpipewire-0.3-dev]\n    stage-packages: [pipewire]\n    prime:\n      - usr/lib/*/pipewire-*\n      - usr/lib/*/spa-*\n      - usr/lib/*/libpipewire*.so*\n      - usr/share/pipewire"
      },
      {
        "language": "yaml",
        "code": "    environment:\n      SPA_PLUGIN_DIR: $SNAP/usr/lib/$CRAFT_ARCH_TRIPLET/spa-0.2\n      PIPEWIRE_CONFIG_NAME: $SNAP/usr/share/pipewire/pipewire.conf\n      PIPEWIRE_MODULE_DIR: $SNAP/usr/lib/$CRAFT_ARCH_TRIPLET/pipewire-0.3"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Custom Protocol with Session Partition in Electron",
    "codeDescription": "Shows how to register a custom protocol with a specific session partition. This enables custom protocol handling for windows with custom session configurations.",
    "codeLanguage": "javascript",
    "codeTokens": 161,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Protocol Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow, net, protocol, session } = require('electron')\nconst path = require('node:path')\nconst url = require('url')\n\napp.whenReady().then(() => {\n  const partition = 'persist:example'\n  const ses = session.fromPartition(partition)\n\n  ses.protocol.handle('atom', (request) => {\n    const filePath = request.url.slice('atom://'.length)\n    return net.fetch(url.pathToFileURL(path.resolve(__dirname, filePath)).toString())\n  })\n\n  const mainWindow = new BrowserWindow({ webPreferences: { partition } })\n})"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Defining Rectangle Object Properties in Markdown",
    "codeDescription": "This snippet defines the properties of a Rectangle object using a Markdown list. It specifies that x, y, width, and height are all numbers and must be integers.",
    "codeLanguage": "markdown",
    "codeTokens": 126,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/rectangle.md#2025-04-18_snippet_0",
    "pageTitle": "Rectangle Object Documentation in Electron",
    "codeList": [
      {
        "language": "markdown",
        "code": "* `x` number - The x coordinate of the origin of the rectangle (must be an integer).\n* `y` number - The y coordinate of the origin of the rectangle (must be an integer).\n* `width` number - The width of the rectangle (must be an integer).\n* `height` number - The height of the rectangle (must be an integer)."
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Disabling Sandbox for Single Browser Window in Electron",
    "codeDescription": "Demonstrates how to disable sandboxing for a specific renderer process by setting sandbox: false in the BrowserWindow constructor.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/sandbox.md#2025-04-18_snippet_0",
    "pageTitle": "Process Sandboxing in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.whenReady().then(() => {\n  const win = new BrowserWindow({\n    webPreferences: {\n      sandbox: false\n    }\n  })\n  win.loadURL('https://google.com')\n})"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Setting Up Windows on Arm Cross-Compilation Environment",
    "codeDescription": "Configures the environment for cross-compiling Electron for Windows on Arm architecture by setting the ELECTRON_BUILDING_WOA variable before syncing dependencies.",
    "codeLanguage": "bat",
    "codeTokens": 66,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-gn.md#2025-04-18_snippet_16",
    "pageTitle": "Building Electron from Source",
    "codeList": [
      {
        "language": "bat",
        "code": "set ELECTRON_BUILDING_WOA=1\ngclient sync -f --with_branch_heads --with_tags"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "HTML Template for Electron Application",
    "codeDescription": "Sets up the HTML structure for the Electron application with necessary security policies and script references.",
    "codeLanguage": "html",
    "codeTokens": 180,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-3-preload.md#2025-04-18_snippet_3",
    "pageTitle": "Electron Preload Scripts Tutorial",
    "codeList": [
      {
        "language": "html",
        "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta\n      http-equiv=\"Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\"\n    />\n    <meta\n      http-equiv=\"X-Content-Security-Policy\"\n      content=\"default-src 'self'; script-src 'self'\"\n    />\n    <title>Hello from Electron renderer!</title>\n  </head>\n  <body>\n    <h1>Hello from Electron renderer!</h1>\n    <p>👋</p>\n    <p id=\"info\"></p>\n  </body>\n  <script src=\"./renderer.js\"></script>\n</html>"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Reading and Writing Binary Data with Clipboard",
    "codeDescription": "Demonstrates how to read and write binary data to the clipboard using Buffers. This example writes a buffer to the clipboard and then verifies it can be read back correctly.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-18_snippet_10",
    "pageTitle": "Electron Clipboard API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { clipboard } = require('electron')\n\nconst buffer = Buffer.from('this is binary', 'utf8')\nclipboard.writeBuffer('public/utf8-plain-text', buffer)\n\nconst ret = clipboard.readBuffer('public/utf8-plain-text')\n\nconsole.log(buffer.equals(ret))\n// true"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Handling Login Event in ClientRequest",
    "codeDescription": "Shows how to handle the 'login' event of a ClientRequest object, providing username and password for authentication.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-18_snippet_1",
    "pageTitle": "ClientRequest Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "request.on('login', (authInfo, callback) => {\n  callback('username', 'password')\n})"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Registering Stream Protocol in Electron",
    "codeDescription": "Demonstrates how to register a custom stream protocol named 'atom' using the deprecated registerStreamProtocol method. The example shows creating a stream from text and returning it as a response.",
    "codeLanguage": "JavaScript",
    "codeTokens": 166,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/protocol.md#2025-04-18_snippet_4",
    "pageTitle": "Electron Protocol Module Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "const { protocol } = require('electron')\nconst { PassThrough } = require('stream')\n\nfunction createStream (text) {\n  const rv = new PassThrough() // PassThrough is also a Readable stream\n  rv.push(text)\n  rv.push(null)\n  return rv\n}\n\nprotocol.registerStreamProtocol('atom', (request, callback) => {\n  callback({\n    statusCode: 200,\n    headers: {\n      'content-type': 'text/html'\n    },\n    data: createStream('<h5>Response</h5>')\n  })\n})"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Defining SharingItem Properties in Electron",
    "codeDescription": "Specifies the properties of a SharingItem object used for sharing different types of content. The object can contain arrays of texts, file paths, and URLs that need to be shared.",
    "codeLanguage": "markdown",
    "codeTokens": 103,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/sharing-item.md#2025-04-18_snippet_0",
    "pageTitle": "SharingItem Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "* `texts` string[] (optional) - An array of text to share.\n* `filePaths` string[] (optional) - An array of files to share.\n* `urls` string[] (optional) - An array of URLs to share."
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Accessing WebContents Property in WebContentsView",
    "codeDescription": "This snippet shows how to access the webContents property of a WebContentsView instance to load a URL. The webContents property provides access to the displayed web content and allows interacting with it.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-contents-view.md#2025-04-18_snippet_1",
    "pageTitle": "WebContentsView in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { WebContentsView } = require('electron')\nconst view = new WebContentsView()\nview.webContents.loadURL('https://electronjs.org/')"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Reading Electron Fuse Status via CLI",
    "codeDescription": "Shows how to use the @electron/fuses CLI tool to read the current fuse status of an installed Electron application",
    "codeLanguage": "bash",
    "codeTokens": 52,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/fuses.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Fuses Documentation",
    "codeList": [
      {
        "language": "bash",
        "code": "npx @electron/fuses read --app /Applications/Foo.app"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Handling Paint Event in Electron JavaScript",
    "codeDescription": "Listens for the 'paint' event on webContents to receive the offscreen frame data.",
    "codeLanguage": "javascript",
    "codeTokens": 89,
    "codeId": "https://github.com/electron/electron/blob/main/shell/browser/osr/README.md#2025-04-18_snippet_1",
    "pageTitle": "Offscreen Rendering in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "win.webContents.on('paint', (event, dirty, image, textureInfo) => {\n  // Handle the offscreen frame data\n  // textureInfo contains the shared texture information\n  // Call textureInfo.release() when done to free the frame\n});"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Navigating to Specific History Entries in Electron",
    "codeDescription": "Demonstrates how to navigate to a specific entry in the browsing history using an index or offset. It includes checks to verify if navigation to a specific offset is possible.",
    "codeLanguage": "javascript",
    "codeTokens": 112,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/navigation-history.md#2025-04-18_snippet_3",
    "pageTitle": "Navigation History API in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Navigate to the 5th entry in the history, if the index is valid\nnavigationHistory.goToIndex(4)\n\n// Navigate to the 2nd entry forward from the current position\nif (navigationHistory.canGoToOffset(2)) {\n  navigationHistory.goToOffset(2)\n}"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Retrieving System Version Example in Electron",
    "codeDescription": "Demonstrates how to get the host operating system version using process.getSystemVersion(). Returns different format responses based on the operating system.",
    "codeLanguage": "javascript",
    "codeTokens": 91,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/process.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Process API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const version = process.getSystemVersion()\nconsole.log(version)\n// On macOS -> '10.13.6'\n// On Windows -> '10.0.17763'\n// On Linux -> '4.15.0-45-generic'"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Implementing Spellchecker Context Menu in Electron",
    "codeDescription": "Example implementation of a context menu that displays spelling suggestions and allows adding words to the dictionary using the context-menu event.",
    "codeLanguage": "javascript",
    "codeTokens": 199,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/spellchecker.md#2025-04-18_snippet_2",
    "pageTitle": "Electron SpellChecker Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { Menu, MenuItem } = require('electron')\n\nmyWindow.webContents.on('context-menu', (event, params) => {\n  const menu = new Menu()\n\n  // Add each spelling suggestion\n  for (const suggestion of params.dictionarySuggestions) {\n    menu.append(new MenuItem({\n      label: suggestion,\n      click: () => myWindow.webContents.replaceMisspelling(suggestion)\n    }))\n  }\n\n  // Allow users to add the misspelled word to the dictionary\n  if (params.misspelledWord) {\n    menu.append(\n      new MenuItem({\n        label: 'Add to dictionary',\n        click: () => myWindow.webContents.session.addWordToSpellCheckerDictionary(params.misspelledWord)\n      })\n    )\n  }\n\n  menu.popup()\n})"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Creating a TouchBarSpacer instance in Electron",
    "codeDescription": "Constructor for creating a new TouchBarSpacer with configuration options for size. The size can be set to 'small', 'large', or 'flexible' to control spacing between touch bar items.",
    "codeLanguage": "markdown",
    "codeTokens": 161,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/touch-bar-spacer.md#2025-04-18_snippet_0",
    "pageTitle": "TouchBarSpacer Class Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "### `new TouchBarSpacer(options)`\n\n* `options` Object\n  * `size` string (optional) - Size of spacer, possible values are:\n    * `small` - Small space between items. Maps to `NSTouchBarItemIdentifierFixedSpaceSmall`. This is the default.\n    * `large` - Large space between items. Maps to `NSTouchBarItemIdentifierFixedSpaceLarge`.\n    * `flexible` - Take up all available space. Maps to `NSTouchBarItemIdentifierFlexibleSpace`."
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Installing Dependencies on Ubuntu 20.04+ for Electron Build",
    "codeDescription": "Command to install all necessary development libraries and tools required to build Electron on Ubuntu 20.04 or newer. Includes build tools, GTK libraries, and various system dependencies.",
    "codeLanguage": "sh",
    "codeTokens": 129,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-18_snippet_0",
    "pageTitle": "Building Electron on Linux",
    "codeList": [
      {
        "language": "sh",
        "code": "$ sudo apt-get install build-essential clang libdbus-1-dev libgtk-3-dev \\\n                       libnotify-dev libasound2-dev libcap-dev \\\n                       libcups2-dev libxtst-dev \\\n                       libxss1 libnss3-dev gcc-multilib g++-multilib curl \\\n                       gperf bison python3-dbusmock openjdk-8-jre"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Accessing Parent Frame in Electron WebFrame",
    "codeDescription": "Retrieves the parent frame of the current webFrame. Returns null if webFrame is the top frame or if the parent is not in the current renderer process.",
    "codeLanguage": "markdown",
    "codeTokens": 97,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-18_snippet_4",
    "pageTitle": "WebFrame API Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "### `webFrame.parent` _Readonly_\n\nA `WebFrame | null` representing parent frame of `webFrame`, the property would be\n`null` if `webFrame` is top or parent is not in the current renderer process."
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Signing Electron App for Development with @electron/osx-sign",
    "codeDescription": "JavaScript code demonstrating how to sign an Electron app for development using the @electron/osx-sign module with Apple Development certificate and provisioning profile.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-18_snippet_1",
    "pageTitle": "Mac App Store Submission Guide for Electron Apps",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { signAsync } = require('@electron/osx-sign')\n\nsignAsync({\n  app: '/path/to/your.app',\n  identity: 'Apple Development',\n  provisioningProfile: '/path/to/your.provisionprofile'\n})"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Accessing Next Sibling Frame in Electron WebFrame",
    "codeDescription": "Retrieves the next sibling frame of the current webFrame. Returns null if webFrame is the last frame in its parent or if the next sibling is not in the current renderer process.",
    "codeLanguage": "markdown",
    "codeTokens": 108,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-18_snippet_6",
    "pageTitle": "WebFrame API Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "### `webFrame.nextSibling` _Readonly_\n\nA `WebFrame | null` representing next sibling frame, the property would be `null` if\n`webFrame` is the last frame in its parent or if the next sibling is not in the\ncurrent renderer process."
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Getting System Accent Color in Electron",
    "codeDescription": "Shows how to get and parse the system accent color into RGBA components. This functionality is available on Windows and macOS 10.14 Mojave or newer.",
    "codeLanguage": "javascript",
    "codeTokens": 125,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/system-preferences.md#2025-04-18_snippet_1",
    "pageTitle": "System Preferences API Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const color = systemPreferences.getAccentColor() // `\"aabbccdd\"`\nconst red = color.substr(0, 2) // \"aa\"\nconst green = color.substr(2, 2) // \"bb\"\nconst blue = color.substr(4, 2) // \"cc\"\nconst alpha = color.substr(6, 2) // \"dd\""
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Accessing Raw HTTP Headers in Electron's IncomingMessage",
    "codeDescription": "This snippet demonstrates how to access and log the raw HTTP headers from an Electron IncomingMessage response object. The rawHeaders property returns an array where even indices contain header names and odd indices contain the corresponding values.",
    "codeLanguage": "javascript",
    "codeTokens": 135,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/incoming-message.md#2025-04-18_snippet_0",
    "pageTitle": "IncomingMessage Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Prints something like:\n//\n// [ 'user-agent',\n//   'this is invalid because there can be only one',\n//   'User-Agent',\n//   'curl/7.22.0',\n//   'Host',\n//   '127.0.0.1:8000',\n//   'ACCEPT',\n//   '*/*' ]\nconsole.log(response.rawHeaders)"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Making Buttons Non-Draggable",
    "codeDescription": "CSS implementation to make button elements non-draggable within a draggable window region.",
    "codeLanguage": "css",
    "codeTokens": 45,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/custom-window-interactions.md#2025-04-18_snippet_1",
    "pageTitle": "Custom Window Interactions in Electron",
    "codeList": [
      {
        "language": "css",
        "code": "button {\n  app-region: no-drag;\n}"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Setting NativeImage as Template Image in Electron (macOS)",
    "codeDescription": "Marks the NativeImage as a macOS template image. Takes a boolean parameter to set the template image state.",
    "codeLanguage": "javascript",
    "codeTokens": 43,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/native-image.md#2025-04-18_snippet_7",
    "pageTitle": "NativeImage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "image.setTemplateImage(option)"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Update Error Handler",
    "codeDescription": "Error handling implementation for auto-updater failures.",
    "codeLanguage": "javascript",
    "codeTokens": 57,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-18_snippet_5",
    "pageTitle": "Electron Application Auto-Update Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "autoUpdater.on('error', (message) => {\n  console.error('There was a problem updating the application')\n  console.error(message)\n})"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Signing Squirrel.Windows Installer with electron-winstaller",
    "codeDescription": "This snippet demonstrates how to use electron-winstaller to generate and sign a Squirrel.Windows installer for an Electron app. It includes configuration for custom signing parameters and tool path.",
    "codeLanguage": "javascript",
    "codeTokens": 217,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/code-signing.md#2025-04-18_snippet_2",
    "pageTitle": "Code Signing for Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "const electronInstaller = require('electron-winstaller')\n// NB: Use this syntax within an async function, Node does not have support for\n//     top-level await as of Node 12.\ntry {\n  await electronInstaller.createWindowsInstaller({\n    appDirectory: '/tmp/build/my-app-64',\n    outputDirectory: '/tmp/build/installer64',\n    authors: 'My App Inc.',\n    exe: 'myapp.exe',\n    windowsSign: {\n      signWithParams: '--my=custom --parameters',\n      // If signtool.exe does not work for you, customize!\n      signToolPath: 'C:\\\\Path\\\\To\\\\my-custom-tool.exe'\n    }\n  })\n  console.log('It worked!')\n} catch (e) {\n  console.log(`No dice: ${e.message}`)\n}"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Update Notification Handler",
    "codeDescription": "Event handler for update-downloaded event to notify users and handle application restart.",
    "codeLanguage": "javascript",
    "codeTokens": 151,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-18_snippet_4",
    "pageTitle": "Electron Application Auto-Update Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "autoUpdater.on('update-downloaded', (event, releaseNotes, releaseName) => {\n  const dialogOpts = {\n    type: 'info',\n    buttons: ['Restart', 'Later'],\n    title: 'Application Update',\n    message: process.platform === 'win32' ? releaseNotes : releaseName,\n    detail:\n      'A new version has been downloaded. Restart the application to apply the updates.'\n  }\n\n  dialog.showMessageBox(dialogOpts).then((returnValue) => {\n    if (returnValue.response === 0) autoUpdater.quitAndInstall()\n  })\n})"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Setting Sheet Offset in Electron Window",
    "codeDescription": "Demonstrates how to adjust the offset position of dialog sheets attached to windows in macOS using the BaseWindow API.",
    "codeLanguage": "javascript",
    "codeTokens": 47,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/dialog.md#2025-04-18_snippet_9",
    "pageTitle": "Electron Dialog Module",
    "codeList": [
      {
        "language": "javascript",
        "code": "BaseWindow.getCurrentWindow().setSheetOffset(offset)"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Disabling HID blocklist in Electron using command line switch",
    "codeDescription": "This code demonstrates how to disable the default HID device blocklist in Electron by setting the 'disable-hid-blocklist' command line switch.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/devices.md#2025-04-18_snippet_0",
    "pageTitle": "Device Access in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.commandLine.appendSwitch('disable-hid-blocklist')"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Restoring Navigation History in Electron",
    "codeDescription": "Method to restore navigation history and load a specific entry, including page state.",
    "codeLanguage": "javascript",
    "codeTokens": 38,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/navigation-history.md#2025-04-18_snippet_4",
    "pageTitle": "Navigation History Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "navigationHistory.restore(options)"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Basic Menu Output in Shell",
    "codeDescription": "Shows the resulting menu structure from the basic template, with items in the order they were defined.",
    "codeLanguage": "shellscript",
    "codeTokens": 51,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-18_snippet_3",
    "pageTitle": "Electron Menu API Guide",
    "codeList": [
      {
        "language": "shellscript",
        "code": "- 1\n- 2\n- 3\n- 4"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Running electron-installer-snap from command line",
    "codeDescription": "Command to run electron-installer-snap with the required --src parameter, specifying the location of the packaged Electron application.",
    "codeLanguage": "sh",
    "codeTokens": 61,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-18_snippet_1",
    "pageTitle": "Snapcraft Guide for Packaging Electron Applications on Linux",
    "codeList": [
      {
        "language": "sh",
        "code": "npx electron-installer-snap --src=out/myappname-linux-x64"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Following HTTP Redirects in Electron",
    "codeDescription": "Method to continue any pending HTTP redirection. Can only be called during a 'redirect' event handler.",
    "codeLanguage": "javascript",
    "codeTokens": 40,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-18_snippet_4",
    "pageTitle": "ClientRequest Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "request.followRedirect()"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Retrieving Navigation History Information in Electron",
    "codeDescription": "Methods to get information about the current navigation state and history entries.",
    "codeLanguage": "javascript",
    "codeTokens": 52,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/navigation-history.md#2025-04-18_snippet_2",
    "pageTitle": "Navigation History Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "navigationHistory.getActiveIndex()\n\nnavigationHistory.getEntryAtIndex(index)\n\nnavigationHistory.length()\n\nnavigationHistory.getAllEntries()"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Defining BaseWindowConstructorOptions Object in Markdown",
    "codeDescription": "This snippet defines the BaseWindowConstructorOptions object with all its properties and their descriptions. It includes details on default values, platform-specific options, and usage guidelines for various window configuration settings.",
    "codeLanguage": "markdown",
    "codeTokens": 2484,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/base-window-options.md#2025-04-18_snippet_0",
    "pageTitle": "BaseWindowConstructorOptions Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "# BaseWindowConstructorOptions Object\n\n* `width` Integer (optional) - Window's width in pixels. Default is `800`.\n* `height` Integer (optional) - Window's height in pixels. Default is `600`.\n* `x` Integer (optional) - (**required** if y is used) Window's left offset from screen.\n  Default is to center the window.\n* `y` Integer (optional) - (**required** if x is used) Window's top offset from screen.\n  Default is to center the window.\n* `useContentSize` boolean (optional) - The `width` and `height` would be used as web\n  page's size, which means the actual window's size will include window\n  frame's size and be slightly larger. Default is `false`.\n* `center` boolean (optional) - Show window in the center of the screen. Default is `false`.\n* `minWidth` Integer (optional) - Window's minimum width. Default is `0`.\n* `minHeight` Integer (optional) - Window's minimum height. Default is `0`.\n* `maxWidth` Integer (optional) - Window's maximum width. Default is no limit.\n* `maxHeight` Integer (optional) - Window's maximum height. Default is no limit.\n* `resizable` boolean (optional) - Whether window is resizable. Default is `true`.\n* `movable` boolean (optional) _macOS_ _Windows_ - Whether window is\n  movable. This is not implemented on Linux. Default is `true`.\n* `minimizable` boolean (optional) _macOS_ _Windows_ - Whether window is\n  minimizable. This is not implemented on Linux. Default is `true`.\n* `maximizable` boolean (optional) _macOS_ _Windows_ - Whether window is\n  maximizable. This is not implemented on Linux. Default is `true`.\n* `closable` boolean (optional) _macOS_ _Windows_ - Whether window is\n  closable. This is not implemented on Linux. Default is `true`.\n* `focusable` boolean (optional) - Whether the window can be focused. Default is\n  `true`. On Windows setting `focusable: false` also implies setting\n  `skipTaskbar: true`. On Linux setting `focusable: false` makes the window\n  stop interacting with wm, so the window will always stay on top in all\n  workspaces.\n* `alwaysOnTop` boolean (optional) - Whether the window should always stay on top of\n  other windows. Default is `false`.\n* `fullscreen` boolean (optional) - Whether the window should show in fullscreen. When\n  explicitly set to `false` the fullscreen button will be hidden or disabled\n  on macOS. Default is `false`.\n* `fullscreenable` boolean (optional) - Whether the window can be put into fullscreen\n  mode. On macOS, also whether the maximize/zoom button should toggle full\n  screen mode or maximize window. Default is `true`.\n* `simpleFullscreen` boolean (optional) _macOS_ - Use pre-Lion fullscreen on\n  macOS. Default is `false`.\n* `skipTaskbar` boolean (optional) _macOS_ _Windows_ - Whether to show the window in taskbar.\n  Default is `false`.\n* `hiddenInMissionControl` boolean (optional) _macOS_ - Whether window should be hidden when the user toggles into mission control.\n* `kiosk` boolean (optional) - Whether the window is in kiosk mode. Default is `false`.\n* `title` string (optional) - Default window title. Default is `\"Electron\"`. If the HTML tag `<title>` is defined in the HTML file loaded by `loadURL()`, this property will be ignored.\n* `icon` ([NativeImage](../native-image.md) | string) (optional) - The window icon. On Windows it is\n  recommended to use `ICO` icons to get best visual effects, you can also\n  leave it undefined so the executable's icon will be used.\n* `show` boolean (optional) - Whether window should be shown when created. Default is\n  `true`.\n* `frame` boolean (optional) - Specify `false` to create a\n  [frameless window](../../tutorial/custom-window-styles.md#frameless-windows). Default is `true`.\n* `parent` BaseWindow (optional) - Specify parent window. Default is `null`.\n* `modal` boolean (optional) - Whether this is a modal window. This only works when the\n  window is a child window. Default is `false`.\n* `acceptFirstMouse` boolean (optional) _macOS_ - Whether clicking an\n  inactive window will also click through to the web contents. Default is\n  `false` on macOS. This option is not configurable on other platforms.\n* `disableAutoHideCursor` boolean (optional) - Whether to hide cursor when typing.\n  Default is `false`.\n* `autoHideMenuBar` boolean (optional) - Auto hide the menu bar unless the `Alt`\n  key is pressed. Default is `false`.\n* `enableLargerThanScreen` boolean (optional) _macOS_ - Enable the window to\n  be resized larger than screen. Only relevant for macOS, as other OSes\n  allow larger-than-screen windows by default. Default is `false`.\n* `backgroundColor` string (optional) - The window's background color in Hex, RGB, RGBA, HSL, HSLA or named CSS color format. Alpha in #AARRGGBB format is supported if `transparent` is set to `true`. Default is `#FFF` (white). See [win.setBackgroundColor](../browser-window.md#winsetbackgroundcolorbackgroundcolor) for more information.\n* `hasShadow` boolean (optional) - Whether window should have a shadow. Default is `true`.\n* `opacity` number (optional) _macOS_ _Windows_ - Set the initial opacity of\n  the window, between 0.0 (fully transparent) and 1.0 (fully opaque). This\n  is only implemented on Windows and macOS.\n* `darkTheme` boolean (optional) - Forces using dark theme for the window, only works on\n  some GTK+3 desktop environments. Default is `false`.\n* `transparent` boolean (optional) - Makes the window [transparent](../../tutorial/custom-window-styles.md#transparent-windows).\n  Default is `false`. On Windows, does not work unless the window is frameless.\n* `type` string (optional) - The type of window, default is normal window. See more about\n  this below.\n* `visualEffectState` string (optional) _macOS_ - Specify how the material\n  appearance should reflect window activity state on macOS. Must be used\n  with the `vibrancy` property. Possible values are:\n  * `followWindow` - The backdrop should automatically appear active when the window is active, and inactive when it is not. This is the default.\n  * `active` - The backdrop should always appear active.\n  * `inactive` - The backdrop should always appear inactive.\n* `titleBarStyle` string (optional) - The style of window title bar.\n  Default is `default`. Possible values are:\n  * `default` - Results in the standard title bar for macOS or Windows respectively.\n  * `hidden` - Results in a hidden title bar and a full size content window. On macOS, the window still has the standard window controls (\"traffic lights\") in the top left. On Windows and Linux, when combined with `titleBarOverlay: true` it will activate the Window Controls Overlay (see `titleBarOverlay` for more information), otherwise no window controls will be shown.\n  * `hiddenInset` _macOS_ - Results in a hidden title bar\n    with an alternative look where the traffic light buttons are slightly\n    more inset from the window edge.\n  * `customButtonsOnHover` _macOS_ - Results in a hidden\n    title bar and a full size content window, the traffic light buttons will\n    display when being hovered over in the top left of the window.\n    **Note:** This option is currently experimental.\n* `titleBarOverlay` Object | Boolean (optional) -  When using a frameless window in conjunction with `win.setWindowButtonVisibility(true)` on macOS or using a `titleBarStyle` so that the standard window controls (\"traffic lights\" on macOS) are visible, this property enables the Window Controls Overlay [JavaScript APIs][overlay-javascript-apis] and [CSS Environment Variables][overlay-css-env-vars]. Specifying `true` will result in an overlay with default system colors. Default is `false`.\n  * `color` String (optional) _Windows_ _Linux_ - The CSS color of the Window Controls Overlay when enabled. Default is the system color.\n  * `symbolColor` String (optional) _Windows_ _Linux_ - The CSS color of the symbols on the Window Controls Overlay when enabled. Default is the system color.\n  * `height` Integer (optional) - The height of the title bar and Window Controls Overlay in pixels. Default is system height.\n* `trafficLightPosition` [Point](point.md) (optional) _macOS_ -\n  Set a custom position for the traffic light buttons in frameless windows.\n* `roundedCorners` boolean (optional) _macOS_ _Windows_ - Whether frameless window\n  should have rounded corners. Default is `true`. Setting this property\n  to `false` will prevent the window from being fullscreenable on macOS.\n  On Windows versions older than Windows 11 Build 22000 this property has no effect, and frameless windows will not have rounded corners.\n* `thickFrame` boolean (optional) - Use `WS_THICKFRAME` style for frameless windows on\n  Windows, which adds standard window frame. Setting it to `false` will remove\n  window shadow and window animations. Default is `true`.\n* `vibrancy` string (optional) _macOS_ - Add a type of vibrancy effect to\n  the window, only on macOS. Can be `appearance-based`, `titlebar`, `selection`,\n  `menu`, `popover`, `sidebar`, `header`, `sheet`, `window`, `hud`, `fullscreen-ui`,\n  `tooltip`, `content`, `under-window`, or `under-page`.\n* `backgroundMaterial` string (optional) _Windows_ - Set the window's\n  system-drawn background material, including behind the non-client area.\n  Can be `auto`, `none`, `mica`, `acrylic` or `tabbed`. See [win.setBackgroundMaterial](../browser-window.md#winsetbackgroundmaterialmaterial-windows) for more information.\n* `zoomToPageWidth` boolean (optional) _macOS_ - Controls the behavior on\n  macOS when option-clicking the green stoplight button on the toolbar or by\n  clicking the Window > Zoom menu item. If `true`, the window will grow to\n  the preferred width of the web page when zoomed, `false` will cause it to\n  zoom to the width of the screen. This will also affect the behavior when\n  calling `maximize()` directly. Default is `false`.\n* `tabbingIdentifier` string (optional) _macOS_ - Tab group name, allows\n  opening the window as a native tab. Windows with the same\n  tabbing identifier will be grouped together. This also adds a native new"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Instantiating TouchBarOtherItemsProxy in Electron",
    "codeDescription": "Creates a new instance of TouchBarOtherItemsProxy. This class is used to nest TouchBar elements inherited from Chromium at a specified space. Only one instance can be added per TouchBar.",
    "codeLanguage": "markdown",
    "codeTokens": 66,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/touch-bar-other-items-proxy.md#2025-04-18_snippet_0",
    "pageTitle": "TouchBarOtherItemsProxy Class Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "### `new TouchBarOtherItemsProxy()`"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Insecure API Exposure Example",
    "codeDescription": "Example of unsafe code that directly exposes powerful APIs without filtering. This approach allows websites to send arbitrary IPC messages, creating security vulnerabilities.",
    "codeLanguage": "javascript",
    "codeTokens": 69,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-18_snippet_4",
    "pageTitle": "Context Isolation in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// ❌ Bad code\ncontextBridge.exposeInMainWorld('myAPI', {\n  send: ipcRenderer.send\n})"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Static Storage Update Configuration",
    "codeDescription": "Configuration for update-electron-app module to use static storage updates with custom base URL.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Application Auto-Update Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { updateElectronApp, UpdateSourceType } = require('update-electron-app')\n\nupdateElectronApp({\n  updateSource: {\n    type: UpdateSourceType.StaticStorage,\n    baseUrl: `https://my-bucket.s3.amazonaws.com/my-app-updates/${process.platform}/${process.arch}`\n  }\n})"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Disabling Node Integration in Electron BrowserWindow",
    "codeDescription": "This code demonstrates how to turn off Node.js integration in an Electron BrowserWindow to avoid conflicts with libraries that use the same global symbols as Node.js.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/electron/electron/blob/main/docs/faq.md#2025-04-18_snippet_1",
    "pageTitle": "Electron FAQ",
    "codeList": [
      {
        "language": "javascript",
        "code": "// In the main process.\nconst { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({\n  webPreferences: {\n    nodeIntegration: false\n  }\n})\nwin.show()"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Cookie Object Structure in Electron",
    "codeDescription": "Defines the structure of a Cookie object in Electron, including required properties like name and value, along with optional properties such as domain, path, security settings, and expiration information.",
    "codeLanguage": "markdown",
    "codeTokens": 311,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/cookie.md#2025-04-18_snippet_0",
    "pageTitle": "Cookie Object Documentation for Electron",
    "codeList": [
      {
        "language": "markdown",
        "code": "* `name` string - The name of the cookie.\n* `value` string - The value of the cookie.\n* `domain` string (optional) - The domain of the cookie; this will be normalized with a preceding dot so that it's also valid for subdomains.\n* `hostOnly` boolean (optional) - Whether the cookie is a host-only cookie; this will only be `true` if no domain was passed.\n* `path` string (optional) - The path of the cookie.\n* `secure` boolean (optional) - Whether the cookie is marked as secure.\n* `httpOnly` boolean (optional) - Whether the cookie is marked as HTTP only.\n* `session` boolean (optional) - Whether the cookie is a session cookie or a persistent\n  cookie with an expiration date.\n* `expirationDate` Double (optional) - The expiration date of the cookie as\n  the number of seconds since the UNIX epoch. Not provided for session\n  cookies.\n* `sameSite` string - The [Same Site](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#SameSite_cookies) policy applied to this cookie.  Can be `unspecified`, `no_restriction`, `lax` or `strict`."
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Debugging at a Breakpoint in Browser::SetName",
    "codeDescription": "LLDB output showing the program stopped at a breakpoint in the Browser::SetName method. It displays the current execution location and surrounding code context.",
    "codeLanguage": "sh",
    "codeTokens": 281,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-18_snippet_4",
    "pageTitle": "Debugging Electron on macOS with LLDB",
    "codeList": [
      {
        "language": "sh",
        "code": "(lldb) run\nProcess 25244 launched: '/Users/fr/Code/electron/out/Testing/Electron.app/Contents/MacOS/Electron' (x86_64)\nProcess 25244 stopped\n* thread #1: tid = 0x839a4c, 0x0000000100162db4 Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name=\"Electron\") + 20 at browser.cc:118, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x0000000100162db4 Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name=\"Electron\") + 20 at browser.cc:118\n   115 \t}\n   116 \t\n   117 \tvoid Browser::SetName(const std::string& name) {\n-> 118 \t  name_override_ = name;\n   119 \t}\n   120 \t\n   121 \tint Browser::GetBadgeCount() {\n(lldb)"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Comprehensive API Documentation Structure with Session Example",
    "codeDescription": "Example showing the complete documentation structure for modules with multiple classes, including the correct organization of methods, events, and properties at both module and class levels.",
    "codeLanguage": "markdown",
    "codeTokens": 122,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-18_snippet_3",
    "pageTitle": "Electron Documentation Style Guide",
    "codeList": [
      {
        "language": "markdown",
        "code": "# session\n\n## Methods\n\n### session.fromPartition(partition)\n\n## Static Properties\n\n### session.defaultSession\n\n## Class: Session\n\n### Instance Events\n\n#### Event: 'will-download'\n\n### Instance Methods\n\n#### `ses.getCacheSize()`\n\n### Instance Properties\n\n#### `ses.cookies`\n\n## Class: Cookies\n\n### Instance Methods\n\n#### `cookies.get(filter, callback)`"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Installing Latest Stable Electron (Shell)",
    "codeDescription": "Command to install the most recent stable build of Electron as a dev dependency using npm or yarn.",
    "codeLanguage": "sh",
    "codeTokens": 41,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/electron-versioning.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Versioning Documentation",
    "codeList": [
      {
        "language": "sh",
        "code": "npm install --save-dev electron"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Closing Context Menu for Tray Icon in Electron",
    "codeDescription": "This method closes an open context menu that was previously set using tray.setContextMenu(). It is available on macOS and Windows platforms.",
    "codeLanguage": "javascript",
    "codeTokens": 45,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-18_snippet_3",
    "pageTitle": "Electron Tray API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "tray.closeContextMenu()"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Defining C++ Header Interface",
    "codeDescription": "Header file defining the C++ interface with a simple string processing function in a namespace to avoid naming conflicts. Uses header guard to prevent multiple inclusions.",
    "codeLanguage": "cpp",
    "codeTokens": 92,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-18_snippet_6",
    "pageTitle": "Native Code Integration in Electron",
    "codeList": [
      {
        "language": "cpp",
        "code": "#pragma once\n#include <string>\n\nnamespace cpp_code {\n    // A simple function that takes a string input and returns a string\n    std::string hello_world(const std::string& input);\n} // namespace cpp_code"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Removing Command Line Switch in Electron (JavaScript)",
    "codeDescription": "This snippet demonstrates how to remove a specified switch from Chromium's command line using the CommandLine class in Electron.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-18_snippet_4",
    "pageTitle": "CommandLine Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app } = require('electron')\n\napp.commandLine.appendSwitch('remote-debugging-port', '8315')\nconsole.log(app.commandLine.hasSwitch('remote-debugging-port')) // true\n\napp.commandLine.removeSwitch('remote-debugging-port')\nconsole.log(app.commandLine.hasSwitch('remote-debugging-port')) // false"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Creating and Configuring a View in Electron (JavaScript)",
    "codeDescription": "This snippet demonstrates how to create a BaseWindow and a View, set the view's background color and bounds, and add it as a child to the window's content view.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/view.md#2025-04-18_snippet_0",
    "pageTitle": "Electron View Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BaseWindow, View } = require('electron')\nconst win = new BaseWindow()\nconst view = new View()\n\nview.setBackgroundColor('red')\nview.setBounds({ x: 0, y: 0, width: 100, height: 100 })\nwin.contentView.addChildView(view)"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Setting Window Visibility Across Workspaces on macOS and Linux",
    "codeDescription": "Method to set whether a window should be visible on all workspaces. Takes a boolean parameter and an optional options object for additional configuration.",
    "codeLanguage": "JavaScript",
    "codeTokens": 55,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_15",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "win.setVisibleOnAllWorkspaces(visible[, options])"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Appending Command Line Argument in Electron (JavaScript)",
    "codeDescription": "This snippet demonstrates how to append an argument to Chromium's command line using the CommandLine class in Electron.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-18_snippet_2",
    "pageTitle": "CommandLine Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app } = require('electron')\n\napp.commandLine.appendArgument('--enable-experimental-web-platform-features')"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Exposing APIs without Context Isolation in JavaScript",
    "codeDescription": "Example of how APIs were exposed from preload scripts before context isolation was enabled. This pattern directly modifies the global window object, which is no longer recommended for security reasons.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/context-isolation.md#2025-04-18_snippet_0",
    "pageTitle": "Context Isolation in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// preload with contextIsolation disabled\nwindow.myAPI = {\n  doAThing: () => {}\n}"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Disabling Sandbox via Node.js Integration in Electron",
    "codeDescription": "Shows how to disable sandboxing by enabling Node.js integration in the renderer process through the BrowserWindow constructor.",
    "codeLanguage": "javascript",
    "codeTokens": 80,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/sandbox.md#2025-04-18_snippet_1",
    "pageTitle": "Process Sandboxing in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.whenReady().then(() => {\n  const win = new BrowserWindow({\n    webPreferences: {\n      nodeIntegration: true\n    }\n  })\n  win.loadURL('https://google.com')\n})"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Using Chromium Logging Macros in C++",
    "codeDescription": "Examples of Chromium's logging macros that can aid debugging by printing information to console. These macros can output variable values and support different severity levels (INFO, WARN, ERROR).",
    "codeLanguage": "cpp",
    "codeTokens": 85,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/debugging.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Debugging Guide",
    "codeList": [
      {
        "language": "cpp",
        "code": "LOG(INFO) << \"bitmap.width(): \" << bitmap.width();\n\nLOG(INFO, bitmap.width() > 10) << \"bitmap.width() is greater than 10!\";"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Setting Mouse Event Ignore Status",
    "codeDescription": "Method to make a window ignore all mouse events. Takes a boolean parameter to enable/disable ignoring and an optional options object for additional configuration.",
    "codeLanguage": "JavaScript",
    "codeTokens": 54,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_17",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "win.setIgnoreMouseEvents(ignore[, options])"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Handling Authentication Error in ClientRequest",
    "codeDescription": "Demonstrates how to handle authentication errors by providing empty credentials and logging the response status and error.",
    "codeLanguage": "javascript",
    "codeTokens": 98,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/client-request.md#2025-04-18_snippet_2",
    "pageTitle": "ClientRequest Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "request.on('response', (response) => {\n  console.log(`STATUS: ${response.statusCode}`)\n  response.on('error', (error) => {\n    console.log(`ERROR: ${JSON.stringify(error)}`)\n  })\n})\nrequest.on('login', (authInfo, callback) => {\n  callback()\n})"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Application Cleanup Handler",
    "codeDescription": "Handles application closure with platform-specific behavior for MacOS.",
    "codeLanguage": "javascript",
    "codeTokens": 51,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-18_snippet_5",
    "pageTitle": "Deep Links in Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit()\n})"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Customize Traffic Light Position in MacOS",
    "codeDescription": "Demonstrates how to customize the position of traffic light controls in MacOS using trafficLightPosition option.",
    "codeLanguage": "javascript",
    "codeTokens": 79,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/custom-title-bar.md#2025-04-18_snippet_4",
    "pageTitle": "Custom Title Bar Implementation in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({\n  titleBarStyle: 'hidden',\n  trafficLightPosition: { x: 10, y: 10 }\n})"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Creating a TouchBarPopover in Electron",
    "codeDescription": "Constructor for creating a new TouchBarPopover instance. It accepts options for label, icon, items to display in the popover, and whether to show a close button.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/touch-bar-popover.md#2025-04-18_snippet_0",
    "pageTitle": "TouchBarPopover Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "new TouchBarPopover(options)"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Getting Window Button Position on macOS",
    "codeDescription": "Method to get the custom position of the traffic light buttons in a frameless window. Returns a Point object or null.",
    "codeLanguage": "JavaScript",
    "codeTokens": 47,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_27",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "win.getWindowButtonPosition()"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Defining FilePathWithHeaders Object Structure in Markdown",
    "codeDescription": "Documentation of the FilePathWithHeaders object structure which consists of a required path string pointing to the file to be sent and optional headers as a record of string key-value pairs.",
    "codeLanguage": "markdown",
    "codeTokens": 86,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/file-path-with-headers.md#2025-04-18_snippet_0",
    "pageTitle": "FilePathWithHeaders Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "* `path` string - The path to the file to send.\n* `headers` Record\\<string, string\\> (optional) - Additional headers to be sent."
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "WebRequestFilter Object Structure in Electron",
    "codeDescription": "Defines the structure of the WebRequestFilter object used to filter network requests in Electron applications. It includes URL patterns for matching, optional exclusion patterns, and optional request type filters.",
    "codeLanguage": "markdown",
    "codeTokens": 237,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/web-request-filter.md#2025-04-18_snippet_0",
    "pageTitle": "WebRequestFilter Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "# WebRequestFilter Object\n\n* `urls` string[] - Array of [URL patterns](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Match_patterns) used to include requests that match these patterns. Use the pattern `<all_urls>` to match all URLs.\n* `excludeUrls` string[] (optional) - Array of [URL patterns](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Match_patterns) used to exclude requests that match these patterns.\n* `types` string[] (optional) - Array of types that will be used to filter out the requests that do not match the types. When not specified, all types will be matched. Can be `mainFrame`, `subFrame`, `stylesheet`, `script`, `image`, `font`, `object`, `xhr`, `ping`, `cspReport`, `media` or `webSocket`."
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Writing RTF to Clipboard",
    "codeDescription": "Shows how to write Rich Text Format (RTF) content to the system clipboard. This snippet demonstrates writing formatted text in RTF format.",
    "codeLanguage": "javascript",
    "codeTokens": 104,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-18_snippet_6",
    "pageTitle": "Electron Clipboard API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { clipboard } = require('electron')\n\nconst rtf = '{\\\\rtf1\\\\ansi{\\\\fonttbl\\\\f0\\\\fswiss Helvetica;}\\\\f0\\\\pard\\nThis is some {\\\\b bold} text.\\\\par\\n}'\nclipboard.writeRTF(rtf)"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Clearing User Tasks from Windows JumpList in Electron",
    "codeDescription": "This code snippet shows how to clear the user tasks list for an Electron application's JumpList by passing an empty array to the app.setUserTasks method.",
    "codeLanguage": "JavaScript",
    "codeTokens": 63,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/windows-taskbar.md#2025-04-18_snippet_1",
    "pageTitle": "Windows Taskbar Customization in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app } = require('electron')\n\napp.setUserTasks([])"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "JavaScript Wrapper Implementation",
    "codeDescription": "JavaScript class that wraps the native addon, providing a cleaner API and platform-specific handling. Includes EventEmitter inheritance and input validation.",
    "codeLanguage": "javascript",
    "codeTokens": 209,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-18_snippet_9",
    "pageTitle": "Native Code Integration in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const EventEmitter = require('events')\n\nconst bindings = require('bindings')\nconst native = bindings('my_addon')\n\nclass MyNativeAddon extends EventEmitter {\n  constructor () {\n    super()\n    this.addon = new native.MyAddon()\n  }\n\n  helloWorld (input = '') {\n    if (typeof input !== 'string') {\n      throw new TypeError('Input must be a string')\n    }\n    return this.addon.helloWorld(input)\n  }\n}\n\nif (process.platform === 'win32' || process.platform === 'darwin' || process.platform === 'linux') {\n  module.exports = new MyNativeAddon()\n} else {\n  console.warn('Native addon not supported on this platform')\n\n  module.exports = {\n    helloWorld: (input) => `Hello from JS! You said: ${input}`\n  }\n}"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Configuring Read-Only File Access for Open Dialog",
    "codeDescription": "XML configuration to enable read-only access to user-selected files through dialog.showOpenDialog in Electron.",
    "codeLanguage": "xml",
    "codeTokens": 56,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-18_snippet_6",
    "pageTitle": "Mac App Store Submission Guide for Electron Apps",
    "codeList": [
      {
        "language": "xml",
        "code": "<key>com.apple.security.files.user-selected.read-only</key>\n<true/>"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Running Electron Debug Build in PowerShell/CMD",
    "codeDescription": "Command to start a debugging session by executing a debug build of Electron with an application as a parameter. This allows you to launch your application with a version of Electron that has debugging capabilities enabled.",
    "codeLanguage": "powershell",
    "codeTokens": 70,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/debugging-on-windows.md#2025-04-18_snippet_0",
    "pageTitle": "Debugging Electron on Windows",
    "codeList": [
      {
        "language": "powershell",
        "code": "$ ./out/Testing/electron.exe ~/my-electron-app/"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Setting Window Focusability on macOS and Windows",
    "codeDescription": "Method to change whether a window can be focused. Takes a boolean parameter to enable/disable focusability.",
    "codeLanguage": "JavaScript",
    "codeTokens": 45,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_19",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "win.setFocusable(focusable)"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Setting Background Color Examples - Electron JavaScript",
    "codeDescription": "Various examples of valid backgroundColor values for BrowserWindow.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_3",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "const win = new BrowserWindow()\nwin.setBackgroundColor('hsl(230, 100%, 50%)')\nwin.setBackgroundColor('rgb(255, 145, 145)')\nwin.setBackgroundColor('#ff00a3')\nwin.setBackgroundColor('blueviolet')"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Pulling Updates for Electron Repository",
    "codeDescription": "Updates the Electron repository with the latest changes and ensures all dependencies are in sync using gclient.",
    "codeLanguage": "sh",
    "codeTokens": 51,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-gn.md#2025-04-18_snippet_3",
    "pageTitle": "Building Electron from Source",
    "codeList": [
      {
        "language": "sh",
        "code": "$ cd src/electron\n$ git pull\n$ gclient sync -f"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Setting NODE_OPTIONS Environment Variable",
    "codeDescription": "Example showing how to set NODE_OPTIONS for memory and warning configurations.",
    "codeLanguage": "sh",
    "codeTokens": 46,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-18_snippet_2",
    "pageTitle": "Environment Variables in Electron Configuration",
    "codeList": [
      {
        "language": "sh",
        "code": "export NODE_OPTIONS=\"--no-warnings --max-old-space-size=2048\""
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Setting Auto-hide Cursor on macOS",
    "codeDescription": "Method to control whether to hide the cursor when typing. Takes a boolean parameter to enable/disable auto-hide.",
    "codeLanguage": "JavaScript",
    "codeTokens": 46,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_24",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "win.setAutoHideCursor(autoHide)"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Defining ProductDiscount Object Properties in Markdown",
    "codeDescription": "This snippet defines the properties of the ProductDiscount object, including their types and descriptions. It covers unique identifiers, discount types, pricing information, payment modes, and subscription-related details.",
    "codeLanguage": "markdown",
    "codeTokens": 210,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/product-discount.md#2025-04-18_snippet_0",
    "pageTitle": "ProductDiscount Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "# ProductDiscount Object\n\n* `identifier` string - A string used to uniquely identify a discount offer for a product.\n* `type` number - The type of discount offer.\n* `price` number - The discount price of the product in the local currency.\n* `priceLocale` string - The locale used to format the discount price of the product.\n* `paymentMode` string - The payment mode for this product discount. Can be `payAsYouGo`, `payUpFront`, or `freeTrial`.\n* `numberOfPeriods` number - An integer that indicates the number of periods the product discount is available.\n* `subscriptionPeriod` [ProductSubscriptionPeriod](product-subscription-period.md) (optional) - An object that defines the period for the product discount."
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "FilesystemPermissionRequest Object Properties Documentation",
    "codeDescription": "Defines the structure and properties of the FilesystemPermissionRequest object used for handling filesystem access permissions. It specifies the file path, whether it's a directory, and the type of access being requested (readable or writable).",
    "codeLanguage": "markdown",
    "codeTokens": 147,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/filesystem-permission-request.md#2025-04-18_snippet_0",
    "pageTitle": "FilesystemPermissionRequest Documentation - Electron Framework",
    "codeList": [
      {
        "language": "markdown",
        "code": "# FilesystemPermissionRequest Object extends `PermissionRequest`\n\n* `filePath` string (optional) - The path of the `fileSystem` request.\n* `isDirectory` boolean (optional) - Whether the `fileSystem` request is a directory.\n* `fileAccessType` string (optional) - The access type of the `fileSystem` request. Can be `writable` or `readable`."
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Listing files at the root of an ASAR archive with Node.js",
    "codeDescription": "Shows how to get a directory listing of the root level of an ASAR archive using Node's fs module readdirSync method.",
    "codeLanguage": "js",
    "codeTokens": 61,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-18_snippet_2",
    "pageTitle": "ASAR Archives in Electron",
    "codeList": [
      {
        "language": "js",
        "code": "const fs = require('node:fs')\nfs.readdirSync('/path/to/example.asar')"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Getting Effective Appearance in Electron (macOS)",
    "codeDescription": "Read-only property that returns the current macOS appearance setting ('dark', 'light', or 'unknown') applied to the application. Maps to NSApplication.effectiveAppearance.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/system-preferences.md#2025-04-18_snippet_6",
    "pageTitle": "System Preferences API Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "systemPreferences.effectiveAppearance"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Checking Architecture in JavaScript for Windows on ARM",
    "codeDescription": "This code snippet demonstrates how to check the process architecture in JavaScript, which may need modification for ARM64 support.",
    "codeLanguage": "javascript",
    "codeTokens": 71,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/windows-arm.md#2025-04-18_snippet_0",
    "pageTitle": "Windows on ARM Support for Electron Apps",
    "codeList": [
      {
        "language": "javascript",
        "code": "if (process.arch === 'x64') {\n  // Do 64-bit thing...\n} else {\n  // Do 32-bit thing...\n}"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Modifying CFBundleIdentifier in Electron's Info.plist for In-App Purchase Testing",
    "codeDescription": "This snippet shows how to change the CFBundleIdentifier in Electron's Info.plist file to match the bundle identifier of your iTunes Connect application. This step is necessary for testing in-app purchases in development.",
    "codeLanguage": "xml",
    "codeTokens": 81,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/in-app-purchases.md#2025-04-18_snippet_0",
    "pageTitle": "Implementing In-App Purchases in Electron for Mac App Store",
    "codeList": [
      {
        "language": "xml",
        "code": "<key>CFBundleIdentifier</key>\n<string>com.example.app</string>"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Example PrinterInfo Object Structure in JavaScript",
    "codeDescription": "Example demonstrating the structure of a PrinterInfo object containing platform-specific printer information including name, display name, description, and various printer options. Shows common printer configuration settings and states.",
    "codeLanguage": "javascript",
    "codeTokens": 462,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/printer-info.md#2025-04-18_snippet_0",
    "pageTitle": "PrinterInfo Object Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "{\n  name: 'Austin_4th_Floor_Printer___C02XK13BJHD4',\n  displayName: 'Austin 4th Floor Printer @ C02XK13BJHD4',\n  description: 'TOSHIBA ColorMFP',\n  options: {\n    copies: '1',\n    'device-uri': 'dnssd://Austin%204th%20Floor%20Printer%20%40%20C02XK13BJHD4._ipps._tcp.local./?uuid=71687f1e-1147-3274-6674-22de61b110bd',\n    finishings: '3',\n    'job-cancel-after': '10800',\n    'job-hold-until': 'no-hold',\n    'job-priority': '50',\n    'job-sheets': 'none,none',\n    'marker-change-time': '0',\n    'number-up': '1',\n    'printer-commands': 'ReportLevels,PrintSelfTestPage,com.toshiba.ColourProfiles.update,com.toshiba.EFiling.update,com.toshiba.EFiling.checkPassword',\n    'printer-info': 'Austin 4th Floor Printer @ C02XK13BJHD4',\n    'printer-is-accepting-jobs': 'true',\n    'printer-is-shared': 'false',\n    'printer-is-temporary': 'false',\n    'printer-location': '',\n    'printer-make-and-model': 'TOSHIBA ColorMFP',\n    'printer-state': '3',\n    'printer-state-change-time': '1573472937',\n    'printer-state-reasons': 'offline-report,com.toshiba.snmp.failed',\n    'printer-type': '10531038',\n    'printer-uri-supported': 'ipp://localhost/printers/Austin_4th_Floor_Printer___C02XK13BJHD4',\n    system_driverinfo: 'T'\n  }\n}"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Importing Required Electron Modules",
    "codeDescription": "Imports necessary Electron modules for controlling application lifecycle and creating browser windows.",
    "codeLanguage": "javascript",
    "codeTokens": 52,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-18_snippet_0",
    "pageTitle": "Deep Links in Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow, shell } = require('electron')\nconst path = require('node:path')"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Implementing File Drag and Drop in Electron Main Process",
    "codeDescription": "This extensive JavaScript snippet for the main process sets up the BrowserWindow, creates sample files for dragging, downloads an icon for the drag operation, and handles the ondragstart event to initiate the drag operation with the specified file and icon.",
    "codeLanguage": "javascript",
    "codeTokens": 386,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-file-drag-drop.md#2025-04-18_snippet_3",
    "pageTitle": "Native File Drag & Drop in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, BrowserWindow, ipcMain } = require('electron/main')\nconst path = require('node:path')\nconst fs = require('node:fs')\nconst https = require('node:https')\n\nfunction createWindow () {\n  const win = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n\n  win.loadFile('index.html')\n}\n\nconst iconName = path.join(__dirname, 'iconForDragAndDrop.png')\nconst icon = fs.createWriteStream(iconName)\n\n// Create a new file to copy - you can also copy existing files.\nfs.writeFileSync(path.join(__dirname, 'drag-and-drop-1.md'), '# First file to test drag and drop')\nfs.writeFileSync(path.join(__dirname, 'drag-and-drop-2.md'), '# Second file to test drag and drop')\n\nhttps.get('https://img.icons8.com/ios/452/drag-and-drop.png', (response) => {\n  response.pipe(icon)\n})\n\napp.whenReady().then(createWindow)\n\nipcMain.on('ondragstart', (event, filePath) => {\n  event.sender.startDrag({\n    file: path.join(__dirname, filePath),\n    icon: iconName\n  })\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp.on('activate', () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow()\n  }\n})"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Running the installed snap package",
    "codeDescription": "Command to run the installed snap package.",
    "codeLanguage": "sh",
    "codeTokens": 35,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-18_snippet_5",
    "pageTitle": "Snapcraft Guide for Packaging Electron Applications on Linux",
    "codeList": [
      {
        "language": "sh",
        "code": "electron-packager-hello-world"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Setting Google API Key for Geolocation",
    "codeDescription": "Example of setting the Google API key in the main process for geolocation support.",
    "codeLanguage": "javascript",
    "codeTokens": 45,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-18_snippet_6",
    "pageTitle": "Environment Variables in Electron Configuration",
    "codeList": [
      {
        "language": "javascript",
        "code": "process.env.GOOGLE_API_KEY = 'YOUR_KEY_HERE'"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Updating Existing Project to Latest Stable Electron (Shell)",
    "codeDescription": "Command to update an existing project to use the latest stable version of Electron as a dev dependency.",
    "codeLanguage": "sh",
    "codeTokens": 43,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/electron-versioning.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Versioning Documentation",
    "codeList": [
      {
        "language": "sh",
        "code": "npm install --save-dev electron@latest"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Defining SharedDictionaryUsageInfo Interface in TypeScript",
    "codeDescription": "Interface definition for SharedDictionaryUsageInfo object that contains frame origin, top frame site, and storage size information for shared dictionary usage in Electron.",
    "codeLanguage": "typescript",
    "codeTokens": 104,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/shared-dictionary-usage-info.md#2025-04-18_snippet_0",
    "pageTitle": "SharedDictionaryUsageInfo Object Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface SharedDictionaryUsageInfo {\n  frameOrigin: string;    // Origin of the requesting frame (scheme, host, port)\n  topFrameSite: string;   // Site of the top-level browsing context\n  totalSizeBytes: number; // Storage size in bytes\n}"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Defining MouseWheelInputEvent Object Properties in Markdown",
    "codeDescription": "This snippet defines the properties of the MouseWheelInputEvent object, which extends the MouseInputEvent object. It includes the event type and various optional properties related to mouse wheel movement and acceleration.",
    "codeLanguage": "markdown",
    "codeTokens": 169,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/mouse-wheel-input-event.md#2025-04-18_snippet_0",
    "pageTitle": "MouseWheelInputEvent Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "# MouseWheelInputEvent Object extends `MouseInputEvent`\n\n* `type` string - The type of the event, can be `mouseWheel`.\n* `deltaX` Integer (optional)\n* `deltaY` Integer (optional)\n* `wheelTicksX` Integer (optional)\n* `wheelTicksY` Integer (optional)\n* `accelerationRatioX` Integer (optional)\n* `accelerationRatioY` Integer (optional)\n* `hasPreciseScrollingDeltas` boolean (optional)\n* `canScroll` boolean (optional)"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Profiling Module Loading in Node.js",
    "codeDescription": "This command generates CPU and heap memory profiles for loading a module in Node.js. It's used to analyze the performance impact of requiring modules in Electron apps.",
    "codeLanguage": "Shell",
    "codeTokens": 63,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/performance.md#2025-04-18_snippet_0",
    "pageTitle": "Performance Optimization Guidelines for Electron Apps",
    "codeList": [
      {
        "language": "shell",
        "code": "node --cpu-prof --heap-prof -e \"require('request')\""
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Listing files in an ASAR archive with the asar CLI tool",
    "codeDescription": "This command demonstrates how to list the contents of an ASAR archive using the asar command line tool, showing the virtual directory structure inside the archive.",
    "codeLanguage": "sh",
    "codeTokens": 80,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-18_snippet_0",
    "pageTitle": "ASAR Archives in Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "$ asar list /path/to/example.asar\n/app.js\n/file.txt\n/dir/module.js\n/static/index.html\n/static/main.css\n/static/jquery.min.js"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Installing Electron Forge CLI",
    "codeDescription": "Commands to install Electron Forge's CLI as a dev dependency and import an existing project.",
    "codeLanguage": "shell",
    "codeTokens": 50,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-5-packaging.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Application Packaging Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "npm install --save-dev @electron-forge/cli\nnpx electron-forge import"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Adding Representation to NativeImage in Electron",
    "codeDescription": "Adds an image representation for a specific scale factor to the NativeImage. Accepts an options object with parameters for scale factor, dimensions, and image data. Can be used to programmatically add different scale factor representations to an image.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/native-image.md#2025-04-18_snippet_13",
    "pageTitle": "NativeImage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "image.addRepresentation(options)"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Getting NativeImage Scale Factors in Electron",
    "codeDescription": "Retrieves an array of all scale factors corresponding to representations for the NativeImage. Returns an array of numbers representing the scale factors.",
    "codeLanguage": "javascript",
    "codeTokens": 46,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/native-image.md#2025-04-18_snippet_12",
    "pageTitle": "NativeImage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "image.getScaleFactors()"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "DesktopCapturerSource Object Properties Format",
    "codeDescription": "Example of ID format patterns used in the DesktopCapturerSource object for window and screen identification. Shows the structure 'window:XX:YY' for windows and 'screen:ZZ:0' for screens, where XX is the window handle, YY indicates process ownership, and ZZ is a sequential screen number.",
    "codeLanguage": "markdown",
    "codeTokens": 91,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/desktop-capturer-source.md#2025-04-18_snippet_0",
    "pageTitle": "DesktopCapturerSource Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "window:XX:YY or screen:ZZ:0"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Setting Environment Variables for China CDN Mirror",
    "codeDescription": "This shell command sets the ELECTRON_MIRROR environment variable to use the China CDN mirror for downloading Electron.",
    "codeLanguage": "sh",
    "codeTokens": 55,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-18_snippet_5",
    "pageTitle": "Advanced Installation Instructions for Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "ELECTRON_MIRROR=\"https://npmmirror.com/mirrors/electron/\""
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Using the Selection Clipboard on Linux",
    "codeDescription": "Example showing how to use the Linux-specific 'selection' clipboard. This code demonstrates writing and reading text from the selection clipboard.",
    "codeLanguage": "javascript",
    "codeTokens": 69,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/clipboard.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Clipboard API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { clipboard } = require('electron')\n\nclipboard.writeText('Example string', 'selection')\nconsole.log(clipboard.readText('selection'))"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Getting Receipt URL",
    "codeDescription": "Method to retrieve the path to the receipt.",
    "codeLanguage": "javascript",
    "codeTokens": 35,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-18_snippet_4",
    "pageTitle": "In-App Purchase Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "inAppPurchase.getReceiptURL()"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Markdown Documentation",
    "codeDescription": "A markdown-formatted glossary document containing definitions and explanations of common Electron development terms, including processes, security features, and technical concepts.",
    "codeLanguage": "markdown",
    "codeTokens": 176,
    "codeId": "https://github.com/electron/electron/blob/main/docs/glossary.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Development Glossary",
    "codeList": [
      {
        "language": "markdown",
        "code": "# Glossary\n\nThis page defines some terminology that is commonly used in Electron development.\n\n### ASAR\n\nASAR stands for Atom Shell Archive Format. An [asar][] archive is a simple\n`tar`-like format that concatenates files into a single file. Electron can read\narbitrary files from it without unpacking the whole file.\n\n[...content truncated for brevity...]\n\n[addons]: https://nodejs.org/api/addons.html\n[asar]: https://github.com/electron/asar\n[autoupdater]: api/auto-updater.md\n[code signing]: tutorial/code-signing.md\n[context isolation]: tutorial/context-isolation.md"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Running Electron Ad-hoc Using npx",
    "codeDescription": "This command runs Electron ad-hoc in the current working directory using npx, without installing dependencies.",
    "codeLanguage": "sh",
    "codeTokens": 41,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-18_snippet_1",
    "pageTitle": "Advanced Installation Instructions for Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "npx electron ."
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Transaction Object Structure in Electron",
    "codeDescription": "Defines the structure of a transaction object that represents an App Store payment transaction. Contains information about transaction status, identifiers, errors, and payment details including product information and quantities.",
    "codeLanguage": "json",
    "codeTokens": 150,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/transaction.md#2025-04-18_snippet_0",
    "pageTitle": "Transaction Object Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"transactionIdentifier\": \"string\",\n  \"transactionDate\": \"string\",\n  \"originalTransactionIdentifier\": \"string\",\n  \"transactionState\": \"purchasing|purchased|failed|restored|deferred\",\n  \"errorCode\": \"Integer\",\n  \"errorMessage\": \"string\",\n  \"payment\": {\n    \"productIdentifier\": \"string\",\n    \"quantity\": \"Integer\",\n    \"applicationUsername\": \"string\",\n    \"paymentDiscount\": \"PaymentDiscount\"\n  }\n}"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Configuring ASAR Integrity in macOS Info.plist (XML)",
    "codeDescription": "XML configuration for macOS Info.plist file that defines the ASAR integrity information. It specifies the hash algorithm and the hash value for the app.asar file.",
    "codeLanguage": "xml",
    "codeTokens": 156,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/asar-integrity.md#2025-04-18_snippet_2",
    "pageTitle": "ASAR Integrity in Electron",
    "codeList": [
      {
        "language": "xml",
        "code": "<key>ElectronAsarIntegrity</key>\n<dict>\n  <key>Resources/app.asar</key>\n  <dict>\n    <key>algorithm</key>\n    <string>SHA256</string>\n    <key>hash</key>\n    <string>9d1f61ea03c4bb62b4416387a521101b81151da0cfbe18c9f8c8b818c5cebfac</string>\n  </dict>\n</dict>"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Sample Snapcraft project configuration",
    "codeDescription": "YAML configuration for a sample Snapcraft project, including app details, build instructions, and dependencies.",
    "codeLanguage": "yaml",
    "codeTokens": 308,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-18_snippet_3",
    "pageTitle": "Snapcraft Guide for Packaging Electron Applications on Linux",
    "codeList": [
      {
        "language": "yaml",
        "code": "name: electron-packager-hello-world\nversion: '0.1'\nsummary: Hello World Electron app\ndescription: |\n  Simple Hello World Electron app as an example\nbase: core22\nconfinement: strict\ngrade: stable\n\napps:\n  electron-packager-hello-world:\n    command: electron-quick-start/electron-quick-start --no-sandbox\n    extensions: [gnome]\n    plugs:\n    - browser-support\n    - network\n    - network-bind\n    environment:\n      # Correct the TMPDIR path for Chromium Framework/Electron to ensure\n      # libappindicator has readable resources.\n      TMPDIR: $XDG_RUNTIME_DIR\n\nparts:\n  electron-quick-start:\n    plugin: nil\n    source: https://github.com/electron/electron-quick-start.git\n    override-build: |\n        npm install electron @electron/packager\n        npx electron-packager . --overwrite --platform=linux --output=release-build --prune=true\n        cp -rv ./electron-quick-start-linux-* $SNAPCRAFT_PART_INSTALL/electron-quick-start\n    build-snaps:\n    - node/14/stable\n    build-packages:\n    - unzip\n    stage-packages:\n    - libnss3\n    - libnspr4"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Configuring GitHub Publisher in Forge Configuration",
    "codeDescription": "This snippet shows how to configure the GitHub Publisher in the Forge configuration file. It specifies the repository details and sets the release as a draft.",
    "codeLanguage": "javascript",
    "codeTokens": 112,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-6-publishing-updating.md#2025-04-18_snippet_1",
    "pageTitle": "Publishing and Updating Electron Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "module.exports = {\n  publishers: [\n    {\n      name: '@electron-forge/publisher-github',\n      config: {\n        repository: {\n          owner: 'github-user-name',\n          name: 'github-repo-name'\n        },\n        prerelease: false,\n        draft: true\n      }\n    }\n  ]\n}"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Getting Current Thermal State in Electron (macOS)",
    "codeDescription": "Retrieves the system's current thermal state on macOS. The state can be 'unknown', 'nominal', 'fair', 'serious', or 'critical'.",
    "codeLanguage": "markdown",
    "codeTokens": 53,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/power-monitor.md#2025-04-18_snippet_2",
    "pageTitle": "powerMonitor Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "powerMonitor.getCurrentThermalState()"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Getting NativeImage Aspect Ratio in Electron",
    "codeDescription": "Calculates the aspect ratio of the NativeImage. Optionally accepts a scale factor parameter. Returns a number representing the aspect ratio (width divided by height).",
    "codeLanguage": "javascript",
    "codeTokens": 52,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/native-image.md#2025-04-18_snippet_11",
    "pageTitle": "NativeImage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "image.getAspectRatio([scaleFactor])"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Menu Output with 'before' and 'after' Positioning in Shell",
    "codeDescription": "Illustrates the final menu structure resulting from the template using 'before' and 'after' positioning keywords.",
    "codeLanguage": "shellscript",
    "codeTokens": 51,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-18_snippet_7",
    "pageTitle": "Electron Menu API Guide",
    "codeList": [
      {
        "language": "shellscript",
        "code": "- ---\n- 3\n- 2\n- 1"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "FileFilter Object Structure Definition",
    "codeDescription": "Defines a FileFilter object with two properties: name (string) for display name of the filter and extensions (string array) for file extensions to filter.",
    "codeLanguage": "markdown",
    "codeTokens": 61,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/file-filter.md#2025-04-18_snippet_0",
    "pageTitle": "FileFilter Object Documentation for Electron",
    "codeList": [
      {
        "language": "markdown",
        "code": "* `name` string\n* `extensions` string[]"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Checking Node.js and npm Installation",
    "codeDescription": "Commands to verify the installation of Node.js and npm by checking their versions using command line interface. These commands help ensure the development environment is properly set up.",
    "codeLanguage": "shell",
    "codeTokens": 70,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-1-prerequisites.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Application Development Prerequisites",
    "codeList": [
      {
        "language": "shell",
        "code": "$ node -v\nv16.14.2\n$ npm -v\n8.7.0"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Checking and Getting Command Line Switch Value in Electron (JavaScript)",
    "codeDescription": "This example shows how to check if a command-line switch is present and get its value using the CommandLine class in Electron.",
    "codeLanguage": "javascript",
    "codeTokens": 112,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-18_snippet_3",
    "pageTitle": "CommandLine Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app } = require('electron')\n\napp.commandLine.appendSwitch('remote-debugging-port', '8315')\nconst hasPort = app.commandLine.hasSwitch('remote-debugging-port')\nconsole.log(hasPort) // true\n\nconst portValue = app.commandLine.getSwitchValue('remote-debugging-port')\nconsole.log(portValue) // '8315'"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Setting Environment Variables in POSIX Shell",
    "codeDescription": "Example of setting environment variables in a POSIX shell to enable logging in Electron.",
    "codeLanguage": "sh",
    "codeTokens": 43,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-18_snippet_0",
    "pageTitle": "Environment Variables in Electron Configuration",
    "codeList": [
      {
        "language": "sh",
        "code": "$ export ELECTRON_ENABLE_LOGGING=true\n$ electron"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Electron Forge Configuration",
    "codeDescription": "JSON configuration for Electron Forge to support protocol handlers in packaged applications.",
    "codeLanguage": "json",
    "codeTokens": 132,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/launch-app-from-url-in-another-app.md#2025-04-18_snippet_6",
    "pageTitle": "Deep Links in Electron Applications",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"config\": {\n    \"forge\": {\n      \"packagerConfig\": {\n        \"protocols\": [\n          {\n            \"name\": \"Electron Fiddle\",\n            \"schemes\": [\"electron-fiddle\"]\n          }\n        ]\n      },\n      \"makers\": [\n        {\n          \"name\": \"@electron-forge/maker-deb\",\n          \"config\": {\n            \"mimeType\": [\"x-scheme-handler/electron-fiddle\"]\n          }\n        }\n      ]\n    }\n  }\n}"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Composing URL for Electron Binary Download in JavaScript",
    "codeDescription": "This JavaScript snippet shows how the URL for downloading Electron binaries is composed using environment variables.",
    "codeLanguage": "js",
    "codeTokens": 52,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-18_snippet_4",
    "pageTitle": "Advanced Installation Instructions for Electron",
    "codeList": [
      {
        "language": "js",
        "code": "url = ELECTRON_MIRROR + ELECTRON_CUSTOM_DIR + '/' + ELECTRON_CUSTOM_FILENAME"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Package.json Configuration for Native Addon",
    "codeDescription": "Configuration file setup for the native addon project including build scripts and dependencies.",
    "codeLanguage": "json",
    "codeTokens": 175,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-18_snippet_3",
    "pageTitle": "Native Code Integration in Electron",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"name\": \"my-native-addon\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A native addon for Electron\",\n  \"main\": \"js/index.js\",\n  \"scripts\": {\n    \"clean\": \"node -e \\\"require('fs').rmSync('build', { recursive: true, force: true })\\\"\",\n    \"build\": \"node-gyp configure && node-gyp build\"\n  },\n  \"dependencies\": {\n    \"bindings\": \"^1.5.0\",\n    \"node-addon-api\": \"^8.3.0\"\n  },\n  \"devDependencies\": {\n    \"node-gyp\": \"^11.1.0\"\n  }\n}"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Configuring VSCode launch.json for Windows C++ Debugging of Electron",
    "codeDescription": "JSON configuration for VSCode's launch.json that enables native C++ debugging of the Electron codebase on Windows. It includes environment variables for proper logging and stack dumping, and configures the source file mapping.",
    "codeLanguage": "json",
    "codeTokens": 241,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/debugging-vscode.md#2025-04-18_snippet_3",
    "pageTitle": "Debugging Electron Applications in VSCode",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"(Windows) Launch\",\n      \"type\": \"cppvsdbg\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}\\\\out\\\\your-executable-location\\\\electron.exe\",\n      \"args\": [\"your-electron-project-path\"],\n      \"stopAtEntry\": false,\n      \"cwd\": \"${workspaceFolder}\",\n      \"environment\": [\n          {\"name\": \"ELECTRON_ENABLE_LOGGING\", \"value\": \"true\"},\n          {\"name\": \"ELECTRON_ENABLE_STACK_DUMPING\", \"value\": \"true\"},\n          {\"name\": \"ELECTRON_RUN_AS_NODE\", \"value\": \"\"},\n      ],\n      \"externalConsole\": false,\n      \"sourceFileMap\": {\n          \"o\\\\:\\\\\": \"${workspaceFolder}\",\n      },\n    },\n  ]\n}"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Rebuilding Native Modules for Custom Electron Build",
    "codeDescription": "This snippet shows how to rebuild native Node modules against a custom build of Electron that doesn't match a public release.",
    "codeLanguage": "sh",
    "codeTokens": 56,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-18_snippet_4",
    "pageTitle": "Native Node Modules in Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "npm rebuild --nodedir=/path/to/src/out/Default/gen/node_headers"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Custom Entitlements Configuration for @electron/osx-sign",
    "codeDescription": "JavaScript code demonstrating how to configure custom entitlements per file when signing an Electron app using @electron/osx-sign.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-18_snippet_3",
    "pageTitle": "Mac App Store Submission Guide for Electron Apps",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { signAsync } = require('@electron/osx-sign')\n\nfunction getEntitlementsForFile (filePath) {\n  if (filePath.startsWith('my-path-1')) {\n    return './my-path-1.plist'\n  } else {\n    return './alternate.plist'\n  }\n}\n\nsignAsync({\n  optionsForFile: (filePath) => ({\n    entitlements: getEntitlementsForFile(filePath)\n  })\n})"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Setting Background Color for Better Font Rendering in Electron",
    "codeDescription": "This code demonstrates how to improve font rendering on LCD screens by setting a non-transparent background color in the BrowserWindow constructor, which enables sub-pixel anti-aliasing.",
    "codeLanguage": "javascript",
    "codeTokens": 72,
    "codeId": "https://github.com/electron/electron/blob/main/docs/faq.md#2025-04-18_snippet_3",
    "pageTitle": "Electron FAQ",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\nconst win = new BrowserWindow({\n  backgroundColor: '#fff'\n})"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Requiring a module from an ASAR archive in Electron",
    "codeDescription": "Demonstrates how to use require() to load a JavaScript module that's packaged inside an ASAR archive, with TypeScript checking disabled.",
    "codeLanguage": "js",
    "codeTokens": 54,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-18_snippet_3",
    "pageTitle": "ASAR Archives in Electron",
    "codeList": [
      {
        "language": "js",
        "code": "require('./path/to/example.asar/dir/module.js')"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Electron launch script for snap packages",
    "codeDescription": "Shell script to launch the Electron application within a snap package, passing necessary information to the app's binary.",
    "codeLanguage": "sh",
    "codeTokens": 70,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-18_snippet_7",
    "pageTitle": "Snapcraft Guide for Packaging Electron Applications on Linux",
    "codeList": [
      {
        "language": "sh",
        "code": "#!/bin/sh\n\nexec \"$@\" --executed-from=\"$(pwd)\" --pid=$$ > /dev/null 2>&1 &"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Defining KeyboardEvent Object Properties in Markdown",
    "codeDescription": "This snippet defines the properties of the KeyboardEvent object, including keys used in accelerators and a flag for accelerator-triggered events. Each property is a boolean, indicating whether specific keys were used or if the event was triggered by an accelerator.",
    "codeLanguage": "markdown",
    "codeTokens": 195,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/keyboard-event.md#2025-04-18_snippet_0",
    "pageTitle": "KeyboardEvent Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "# KeyboardEvent Object\n\n* `ctrlKey` boolean (optional) - whether the Control key was used in an accelerator to trigger the Event\n* `metaKey` boolean (optional) - whether a meta key was used in an accelerator to trigger the Event\n* `shiftKey` boolean (optional) - whether a Shift key was used in an accelerator to trigger the Event\n* `altKey` boolean (optional) - whether an Alt key was used in an accelerator to trigger the Event\n* `triggeredByAccelerator` boolean (optional) - whether an accelerator was used to trigger the event as opposed to another user gesture like mouse click"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Installing electron-windows-store CLI",
    "codeDescription": "Command to install the electron-windows-store tool globally using npm",
    "codeLanguage": "sh",
    "codeTokens": 36,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/windows-store-guide.md#2025-04-18_snippet_0",
    "pageTitle": "Windows Store Guide for Electron Apps",
    "codeList": [
      {
        "language": "sh",
        "code": "npm install -g electron-windows-store"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Accessing Opener Frame in Electron WebFrame",
    "codeDescription": "Retrieves the frame that opened the current webFrame. Returns null if there's no opener or if the opener is not in the current renderer process.",
    "codeLanguage": "markdown",
    "codeTokens": 95,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-18_snippet_3",
    "pageTitle": "WebFrame API Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "### `webFrame.opener` _Readonly_\n\nA `WebFrame | null` representing the frame which opened `webFrame`, the property would\nbe `null` if there's no opener or opener is not in the current renderer process."
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Installing Electron for a Specific Platform",
    "codeDescription": "This command installs Electron for a specific platform (win32) using the --platform flag.",
    "codeLanguage": "sh",
    "codeTokens": 43,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-18_snippet_3",
    "pageTitle": "Advanced Installation Instructions for Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "npm install --platform=win32 electron"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Setting NODE_EXTRA_CA_CERTS",
    "codeDescription": "Example of setting additional certificate authorities for Node.js in Electron.",
    "codeLanguage": "sh",
    "codeTokens": 41,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-18_snippet_5",
    "pageTitle": "Environment Variables in Electron Configuration",
    "codeList": [
      {
        "language": "sh",
        "code": "export NODE_EXTRA_CA_CERTS=/path/to/cert.pem"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Checking Payment Capability",
    "codeDescription": "Method to verify if a user can make payments. Returns a boolean value.",
    "codeLanguage": "javascript",
    "codeTokens": 41,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-18_snippet_2",
    "pageTitle": "In-App Purchase Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "inAppPurchase.canMakePayments()"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Installing Xcode Command Line Tools on macOS",
    "codeDescription": "Command to install the required Xcode Command Line Tools on macOS for building native Node.js addons.",
    "codeLanguage": "sh",
    "codeTokens": 41,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-18_snippet_0",
    "pageTitle": "Native Code Integration in Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "xcode-select --install"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Using iframe for Web Embedding in HTML",
    "codeDescription": "An example of using an iframe tag to embed external web content. The sandbox attribute is recommended to limit capabilities of the embedded content for security reasons.",
    "codeLanguage": "html",
    "codeTokens": 50,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/web-embeds.md#2025-04-18_snippet_0",
    "pageTitle": "Web Embeds in Electron",
    "codeList": [
      {
        "language": "html",
        "code": "<iframe sandbox=\"\">"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Configuring Environment Variables for China Non-CDN Mirror",
    "codeDescription": "These shell commands set environment variables to use the China non-CDN mirror with a custom directory format for Electron downloads.",
    "codeLanguage": "sh",
    "codeTokens": 66,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-18_snippet_6",
    "pageTitle": "Advanced Installation Instructions for Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "ELECTRON_MIRROR=\"https://npmmirror.com/mirrors/electron/\"\nELECTRON_CUSTOM_DIR=\"{{ version }}\""
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Defining WebSource Object Structure in Electron",
    "codeDescription": "Defines the WebSource object structure with two properties: a required code string and an optional URL string",
    "codeLanguage": "markdown",
    "codeTokens": 52,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/web-source.md#2025-04-18_snippet_0",
    "pageTitle": "WebSource Object Documentation - Electron API",
    "codeList": [
      {
        "language": "markdown",
        "code": "* `code` string\n* `url` string (optional)"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Configuring Read-Write File Access for Save Dialog",
    "codeDescription": "XML configuration to enable read-write access to user-selected files through dialog.showSaveDialog in Electron.",
    "codeLanguage": "xml",
    "codeTokens": 56,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-18_snippet_7",
    "pageTitle": "Mac App Store Submission Guide for Electron Apps",
    "codeList": [
      {
        "language": "xml",
        "code": "<key>com.apple.security.files.user-selected.read-write</key>\n<true/>"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Running electron-windows-store Conversion",
    "codeDescription": "PowerShell command to convert an Electron app to Windows Store format, specifying input/output directories and package details",
    "codeLanguage": "powershell",
    "codeTokens": 84,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/windows-store-guide.md#2025-04-18_snippet_2",
    "pageTitle": "Windows Store Guide for Electron Apps",
    "codeList": [
      {
        "language": "powershell",
        "code": "electron-windows-store `\n    --input-directory C:\\myelectronapp `\n    --output-directory C:\\output\\myelectronapp `\n    --package-version 1.0.0.0 `\n    --package-name myelectronapp"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Configuring Chrome DevTools-like Trace Settings in Electron",
    "codeDescription": "Example configuration of TraceConfig that matches Chrome DevTools recording settings. Specifies recording mode, included categories for timeline, v8 execution, console events, and performance profiling, while excluding all other categories.",
    "codeLanguage": "javascript",
    "codeTokens": 165,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/trace-config.md#2025-04-18_snippet_0",
    "pageTitle": "TraceConfig Object Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "{\n  recording_mode: 'record-until-full',\n  included_categories: [\n    'devtools.timeline',\n    'disabled-by-default-devtools.timeline',\n    'disabled-by-default-devtools.timeline.frame',\n    'disabled-by-default-devtools.timeline.stack',\n    'v8.execute',\n    'blink.console',\n    'blink.user_timing',\n    'latencyInfo',\n    'disabled-by-default-v8.cpu_profiler',\n    'disabled-by-default-v8.cpu_profiler.hires'\n  ],\n  excluded_categories: ['*']\n}"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Integrity Object Structure in ASAR Header (JSON)",
    "codeDescription": "JSON structure that defines the integrity object within an ASAR archive header. It includes the algorithm used for hashing, the full archive hash, block size for partial validation, and an array of block hashes.",
    "codeLanguage": "json",
    "codeTokens": 90,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/asar-integrity.md#2025-04-18_snippet_0",
    "pageTitle": "ASAR Integrity in Electron",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"algorithm\": \"SHA256\",\n  \"hash\": \"...\",\n  \"blockSize\": 1024,\n  \"blocks\": [\"...\", \"...\"]\n}"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "NotificationResponse Object Type Definition",
    "codeDescription": "Defines the interface for notification response data in Electron applications. Contains properties for action identifier, delivery date, notification identifier, custom user information, and optional user text input.",
    "codeLanguage": "typescript",
    "codeTokens": 85,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/notification-response.md#2025-04-18_snippet_0",
    "pageTitle": "NotificationResponse Object Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface NotificationResponse {\n  actionIdentifier: string;\n  date: number;\n  identifier: string;\n  userInfo: Record<string, any>;\n  userText?: string;\n}"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Building and installing a snap package",
    "codeDescription": "Commands to build a snap package using snapcraft and install it using sudo snap install.",
    "codeLanguage": "sh",
    "codeTokens": 63,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-18_snippet_4",
    "pageTitle": "Snapcraft Guide for Packaging Electron Applications on Linux",
    "codeList": [
      {
        "language": "sh",
        "code": "$ snapcraft\n\n<output snipped>\nSnapped electron-packager-hello-world_0.1_amd64.snap"
      },
      {
        "language": "sh",
        "code": "sudo snap install electron-packager-hello-world_0.1_amd64.snap --dangerous"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "VS Code Debug Configuration for Electron",
    "codeDescription": "Launch configuration for debugging both main and renderer processes in VS Code. Sets up compound debugging tasks with Chrome DevTools for renderer and Node debugger for main process.",
    "codeLanguage": "json",
    "codeTokens": 256,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/tutorial-2-first-app.md#2025-04-18_snippet_7",
    "pageTitle": "Building Your First Electron App",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"version\": \"0.2.0\",\n  \"compounds\": [\n    {\n      \"name\": \"Main + renderer\",\n      \"configurations\": [\"Main\", \"Renderer\"],\n      \"stopAll\": true\n    }\n  ],\n  \"configurations\": [\n    {\n      \"name\": \"Renderer\",\n      \"port\": 9222,\n      \"request\": \"attach\",\n      \"type\": \"chrome\",\n      \"webRoot\": \"${workspaceFolder}\"\n    },\n    {\n      \"name\": \"Main\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"cwd\": \"${workspaceFolder}\",\n      \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron\",\n      \"windows\": {\n        \"runtimeExecutable\": \"${workspaceFolder}/node_modules/.bin/electron.cmd\"\n      },\n      \"args\": [\".\", \"--remote-debugging-port=9222\"],\n      \"outputCapture\": \"std\",\n      \"console\": \"integratedTerminal\"\n    }\n  ]\n}"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Running Specific Electron Tests",
    "codeDescription": "Command to run specific tests in Electron, useful for focusing on particular modules during development.",
    "codeLanguage": "sh",
    "codeTokens": 42,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-18_snippet_5",
    "pageTitle": "Pull Request Guidelines for Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "$ npm run test -match=menu"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Finishing Transaction by Date",
    "codeDescription": "Method to complete pending transactions for a specific date using ISO formatted date string.",
    "codeLanguage": "javascript",
    "codeTokens": 43,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/in-app-purchase.md#2025-04-18_snippet_6",
    "pageTitle": "In-App Purchase Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "inAppPurchase.finishTransactionByDate(date)"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "ThumbarButton Object Properties Definition in Markdown",
    "codeDescription": "Defines the core properties of a ThumbarButton object including icon, click handler, tooltip, and flags. Includes detailed explanation of available flag values that control button states and behaviors.",
    "codeLanguage": "markdown",
    "codeTokens": 293,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/thumbar-button.md#2025-04-18_snippet_0",
    "pageTitle": "ThumbarButton Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "# ThumbarButton Object\n\n* `icon` [NativeImage](../native-image.md) - The icon showing in thumbnail\n  toolbar.\n* `click` Function\n* `tooltip` string (optional) - The text of the button's tooltip.\n* `flags` string[] (optional) - Control specific states and behaviors of the\n  button. By default, it is `['enabled']`.\n\nThe `flags` is an array that can include following `string`s:\n\n* `enabled` - The button is active and available to the user.\n* `disabled` - The button is disabled. It is present, but has a visual state\n  indicating it will not respond to user action.\n* `dismissonclick` - When the button is clicked, the thumbnail window closes\n  immediately.\n* `nobackground` - Do not draw a button border, use only the image.\n* `hidden` - The button is not shown to the user.\n* `noninteractive` - The button is enabled but not interactive; no pressed\n  button state is drawn. This value is intended for instances where the button\n  is used in a notification."
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Installing Dependencies for Electron using npm",
    "codeDescription": "This snippet shows how to set environment variables and use npm to install dependencies directly for Electron.",
    "codeLanguage": "sh",
    "codeTokens": 155,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-18_snippet_2",
    "pageTitle": "Native Node Modules in Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "# Electron's version.\nexport npm_config_target=1.2.3\n# The architecture of your machine\nexport npm_config_arch=x64\nexport npm_config_target_arch=x64\n# Download headers for Electron.\nexport npm_config_disturl=https://electronjs.org/headers\n# Tell node-pre-gyp that we are building for Electron.\nexport npm_config_runtime=electron\n# Tell node-pre-gyp to build module from source code.\nexport npm_config_build_from_source=true\n# Install all dependencies, and store cache to ~/.electron-gyp.\nHOME=~/.electron-gyp npm install"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Displaying Electron Scripts Directory Structure (diff)",
    "codeDescription": "This code snippet shows the directory structure of the scripts folder in the Electron project. It outlines the main subdirectories and their purposes, including codesign, lib, and release scripts used for development, testing, and release processes.",
    "codeLanguage": "diff",
    "codeTokens": 153,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/source-code-directory-structure.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Source Code Directory Structure",
    "codeList": [
      {
        "language": "diff",
        "code": "script/ - The set of all scripts Electron runs for a variety of purposes.\n├── codesign/ - Fakes codesigning for Electron apps; used for testing.\n├── lib/ - Miscellaneous python utility scripts.\n└── release/ - Scripts run during Electron's release process.\n    ├── notes/ - Generates release notes for new Electron versions.\n    └── uploaders/ - Uploads various release-related files during release."
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Defining OpenExternalPermissionRequest Object Structure in Markdown",
    "codeDescription": "Defines the structure of the OpenExternalPermissionRequest object which extends the PermissionRequest object. It includes the externalURL property that contains the URL of the openExternal request.",
    "codeLanguage": "markdown",
    "codeTokens": 82,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/open-external-permission-request.md#2025-04-18_snippet_0",
    "pageTitle": "OpenExternalPermissionRequest Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "# OpenExternalPermissionRequest Object extends `PermissionRequest`\n\n* `externalURL` string (optional) - The url of the `openExternal` request."
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Enabling Accessibility in Electron Apps using Swift",
    "codeDescription": "Swift implementation for toggling accessibility features in Electron applications on macOS. The script finds a running Electron app by name, creates an accessibility reference, and sets the AXManualAccessibility attribute.",
    "codeLanguage": "swift",
    "codeTokens": 159,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/accessibility.md#2025-04-18_snippet_1",
    "pageTitle": "Accessibility Implementation Guide for Electron Applications",
    "codeList": [
      {
        "language": "swift",
        "code": "import Cocoa\nlet name = CommandLine.arguments.count >= 2 ? CommandLine.arguments[1] : \"Electron\"\nlet pid = NSWorkspace.shared.runningApplications.first(where: {$0.localizedName == name})!.processIdentifier\nlet axApp = AXUIElementCreateApplication(pid)\nlet result = AXUIElementSetAttributeValue(axApp, \"AXManualAccessibility\" as CFString, true as CFTypeRef)\nprint(\"Setting 'AXManualAccessibility' \\(error.rawValue == 0 ? \"succeeded\" : \"failed)\")"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Setting Auth Server Whitelist Using Command Line",
    "codeDescription": "Example of using the --auth-server-whitelist flag to specify a comma-separated list of servers for which integrated authentication is enabled. The flag accepts wildcards with * prefix.",
    "codeLanguage": "shell",
    "codeTokens": 69,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Command Line Switches Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "--auth-server-whitelist='*example.com, *foobar.com, *baz'"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Error Message for Incompatible Native Module in Electron",
    "codeDescription": "This snippet shows the error message that occurs when trying to use a native Node.js module compiled for a different Node.js version in Electron.",
    "codeLanguage": "sh",
    "codeTokens": 110,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/using-native-node-modules.md#2025-04-18_snippet_0",
    "pageTitle": "Native Node Modules in Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "Error: The module '/path/to/native/module.node'\nwas compiled against a different Node.js version using\nNODE_MODULE_VERSION $XYZ. This version of Node.js requires\nNODE_MODULE_VERSION $ABC. Please try re-compiling or re-installing\nthe module (for instance, using `npm rebuild` or `npm install`)."
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Running the Built Electron Executable on Different Platforms",
    "codeDescription": "Shows the paths to run the Electron executable after building on macOS, Windows, and Linux platforms from the output directory.",
    "codeLanguage": "sh",
    "codeTokens": 83,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-gn.md#2025-04-18_snippet_12",
    "pageTitle": "Building Electron from Source",
    "codeList": [
      {
        "language": "sh",
        "code": "$ ./out/Testing/Electron.app/Contents/MacOS/Electron\n# or, on Windows\n$ ./out/Testing/electron.exe\n# or, on Linux\n$ ./out/Testing/electron"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Running clang-tidy on specific files",
    "codeDescription": "Command to run clang-tidy on specific C/C++/Objective-C files instead of the entire codebase. File paths are provided after the options.",
    "codeLanguage": "shell",
    "codeTokens": 74,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/clang-tidy.md#2025-04-18_snippet_1",
    "pageTitle": "Using clang-tidy on C++ Code in Electron",
    "codeList": [
      {
        "language": "shell",
        "code": "npm run lint:clang-tidy --out-dir ../out/Testing shell/browser/api/electron_api_app.cc"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Setting up Application Menu in Electron",
    "codeDescription": "Demonstrates how to properly initialize the application menu after the app is ready, ensuring the recent documents menu items are properly enabled.",
    "codeLanguage": "javascript",
    "codeTokens": 89,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/recent-documents.md#2025-04-18_snippet_2",
    "pageTitle": "Recent Documents Management in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app, Menu } = require('electron')\n\nconst template = [\n  // Menu template here\n]\nconst menu = Menu.buildFromTemplate(template)\n\napp.whenReady().then(() => {\n  Menu.setApplicationMenu(menu)\n})"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Installing Electron with Custom Architecture",
    "codeDescription": "This command installs Electron with a specified architecture (ia32) using the --arch flag.",
    "codeLanguage": "sh",
    "codeTokens": 43,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-18_snippet_2",
    "pageTitle": "Advanced Installation Instructions for Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "npm install --arch=ia32 electron"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Checking Service Worker Destruction Status in Electron",
    "codeDescription": "Method to check if a service worker instance has been destroyed. Returns a boolean value indicating the destruction state.",
    "codeLanguage": "javascript",
    "codeTokens": 43,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/service-worker-main.md#2025-04-18_snippet_0",
    "pageTitle": "ServiceWorkerMain API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "serviceWorker.isDestroyed()"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Installing ARM Cross-Compilation Dependencies for Electron",
    "codeDescription": "Command to install the necessary libraries and tools for cross-compiling Electron for ARM architecture on a Linux system.",
    "codeLanguage": "sh",
    "codeTokens": 68,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-18_snippet_5",
    "pageTitle": "Building Electron on Linux",
    "codeList": [
      {
        "language": "sh",
        "code": "$ sudo apt-get install libc6-dev-armhf-cross linux-libc-dev-armhf-cross \\\n                       g++-arm-linux-gnueabihf"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Using V8 Optimization Tracing in Electron",
    "codeDescription": "Example of using --js-flags to enable V8 optimization and deoptimization tracing, which is useful for debugging JavaScript performance issues.",
    "codeLanguage": "shell",
    "codeTokens": 61,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-18_snippet_3",
    "pageTitle": "Electron Command Line Switches Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "$ electron --js-flags=\"--trace-opt --trace-deopt\" your-app"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Displaying Breaking Changes in Markdown",
    "codeDescription": "Shows markdown snippets from breaking-changes.md and browser-window.md documenting the deprecation of BrowserWindow.getTrafficLightPosition().",
    "codeLanguage": "markdown",
    "codeTokens": 182,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-18_snippet_0",
    "pageTitle": "API History Migration Guide for Electron",
    "codeList": [
      {
        "language": "markdown",
        "code": "<!-- docs/breaking-changes.md -->\n### Deprecated: `BrowserWindow.getTrafficLightPosition()`\n\n`BrowserWindow.getTrafficLightPosition()` has been deprecated, the\n`BrowserWindow.getWindowButtonPosition()` API should be used instead\nwhich returns `null` instead of `{ x: 0, y: 0 }` when there is no custom\nposition.\n\n<!-- docs/api/browser-window.md  -->\n#### `win.getTrafficLightPosition()` _macOS_ _Deprecated_\n\nReturns `Point` - The custom position for the traffic light buttons in\nframeless window, `{ x: 0, y: 0 }` will be returned when there is no custom\nposition."
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Listing Possible Values for GPUFeatureStatus Properties in Markdown",
    "codeDescription": "This snippet enumerates the possible values for the GPUFeatureStatus object properties. Each value represents a different state of hardware acceleration, ranging from disabled to fully enabled, with various intermediate states indicating performance or availability issues.",
    "codeLanguage": "markdown",
    "codeTokens": 200,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/gpu-feature-status.md#2025-04-18_snippet_1",
    "pageTitle": "GPUFeatureStatus Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "* `disabled_software` - Software only. Hardware acceleration disabled (yellow)\n* `disabled_off` - Disabled (red)\n* `disabled_off_ok` - Disabled (yellow)\n* `unavailable_software` - Software only, hardware acceleration unavailable (yellow)\n* `unavailable_off` - Unavailable (red)\n* `unavailable_off_ok` - Unavailable (yellow)\n* `enabled_readback` - Hardware accelerated but at reduced performance (yellow)\n* `enabled_force` - Hardware accelerated on all pages (green)\n* `enabled` - Hardware accelerated (green)\n* `enabled_on` - Enabled (green)\n* `enabled_force_on` - Force enabled (green)"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Structure of Renamed Electron App on macOS",
    "codeDescription": "Shows the directory structure of a rebranded Electron application on macOS. This includes renaming both the main app and helper app for proper rebranding.",
    "codeLanguage": "plain",
    "codeTokens": 100,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/application-distribution.md#2025-04-18_snippet_4",
    "pageTitle": "Application Packaging in Electron",
    "codeList": [
      {
        "language": "plain",
        "code": "MyApp.app/Contents\n├── Info.plist\n├── MacOS/\n│   └── MyApp\n└── Frameworks/\n    └── MyApp Helper.app\n        ├── Info.plist\n        └── MacOS/\n            └── MyApp Helper"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Disabling Serial blocklist in Electron using command line switch",
    "codeDescription": "This code demonstrates how to disable the default serial device blocklist in Electron by setting the 'disable-serial-blocklist' command line switch.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/devices.md#2025-04-18_snippet_1",
    "pageTitle": "Device Access in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.commandLine.appendSwitch('disable-serial-blocklist')"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "DNS Result Order Configuration",
    "codeDescription": "Command line argument that sets the default verbatim parameter behavior for DNS lookup functions in Node.js. Supports 'ipv4first' and 'verbatim' modes.",
    "codeLanguage": "markdown",
    "codeTokens": 55,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-18_snippet_7",
    "pageTitle": "Electron Command Line Switches Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "--dns-result-order=order"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Defining ProcessMemoryInfo Object Properties in Markdown",
    "codeDescription": "This snippet defines the properties of the ProcessMemoryInfo object, including residentSet, private, and shared memory. It specifies the data types and provides descriptions for each property, including platform-specific information.",
    "codeLanguage": "markdown",
    "codeTokens": 148,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/process-memory-info.md#2025-04-18_snippet_0",
    "pageTitle": "ProcessMemoryInfo Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "# ProcessMemoryInfo Object\n\n* `residentSet` Integer _Linux_ _Windows_ - The amount of memory\ncurrently pinned to actual physical RAM in Kilobytes.\n* `private` Integer - The amount of memory not shared by other processes, such as JS heap or HTML content in Kilobytes.\n* `shared` Integer - The amount of memory shared between processes, typically\n  memory consumed by the Electron code itself in Kilobytes."
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Windows RELEASES Response Format",
    "codeDescription": "Example of the expected response format from a Squirrel.Windows update server endpoint. The response contains a hash, URL to the .nupkg file, and the file size in bytes.",
    "codeLanguage": "plaintext",
    "codeTokens": 101,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/updates.md#2025-04-18_snippet_7",
    "pageTitle": "Electron Application Auto-Update Implementation Guide",
    "codeList": [
      {
        "language": "plaintext",
        "code": "B0892F3C7AC91D72A6271FF36905FEF8FE993520 https://your-static.storage/your-app-1.2.3-full.nupkg 103298365"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Stepping Through Code in LLDB",
    "codeDescription": "LLDB command to execute a single source-level step in the currently selected thread, showing the program's execution advancing to the next line.",
    "codeLanguage": "sh",
    "codeTokens": 241,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-18_snippet_6",
    "pageTitle": "Debugging Electron on macOS with LLDB",
    "codeList": [
      {
        "language": "sh",
        "code": "(lldb) step\nProcess 25244 stopped\n* thread #1: tid = 0x839a4c, 0x0000000100162dcc Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name=\"Electron\") + 44 at browser.cc:119, queue = 'com.apple.main-thread', stop reason = step in\n    frame #0: 0x0000000100162dcc Electron Framework`atom::Browser::SetName(this=0x0000000108b14f20, name=\"Electron\") + 44 at browser.cc:119\n   116\n   117 \tvoid Browser::SetName(const std::string& name) {\n   118 \t  name_override_ = name;\n-> 119 \t}\n   120 \t\n   121 \tint Browser::GetBadgeCount() {\n   122 \t  return badge_count_;"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Configuring Desktop Launcher Actions in a .desktop File for Linux",
    "codeDescription": "This example demonstrates how to define custom launcher shortcuts for a Linux application. The configuration includes Play-Pause, Next, and Previous actions for an audio player (Audacious), specifying the Name and Exec properties for each action that will appear in the Unity launcher menu.",
    "codeLanguage": "plaintext",
    "codeTokens": 151,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/linux-desktop-actions.md#2025-04-18_snippet_0",
    "pageTitle": "Desktop Launcher Actions for Linux Environments in Electron",
    "codeList": [
      {
        "language": "plaintext",
        "code": "Actions=PlayPause;Next;Previous\n\n[Desktop Action PlayPause]\nName=Play-Pause\nExec=audacious -t\nOnlyShowIn=Unity;\n\n[Desktop Action Next]\nName=Next\nExec=audacious -f\nOnlyShowIn=Unity;\n\n[Desktop Action Previous]\nName=Previous\nExec=audacious -r\nOnlyShowIn=Unity;"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Formatting API Module Documentation with Session Example",
    "codeDescription": "Example showing how to document an API module in Electron, using the 'session' module as an example. This demonstrates the correct format for module title, description, methods, static properties, and associated classes.",
    "codeLanguage": "markdown",
    "codeTokens": 74,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Documentation Style Guide",
    "codeList": [
      {
        "language": "markdown",
        "code": "# session\n\n> Manage browser sessions, cookies, cache, proxy settings, etc."
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Updating API History Block with Changes",
    "codeDescription": "Shows how to update the API History block with additional changes and descriptions.",
    "codeLanguage": "markdown",
    "codeTokens": 179,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-18_snippet_4",
    "pageTitle": "API History Migration Guide for Electron",
    "codeList": [
      {
        "language": "markdown",
        "code": "#### `win.getTrafficLightPosition()` _macOS_ _Deprecated_\n\n<!--\n```YAML history\nadded:\n  - pr-url: https://github.com/electron/electron/pull/22533\nchanges:\n  - pr-url: https://github.com/electron/electron/pull/26789\n    description: \"Made `trafficLightPosition` option work for `customButtonOnHover` window.\"\n    breaking-changes-header: behavior-changed-draggable-regions-on-macos\n```\n-->\n\nReturns `Point` - The custom position for the traffic light buttons in\nframeless window, `{ x: 0, y: 0 }` will be returned when there is no custom\nposition."
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Babel CommonJS Transformation Example",
    "codeDescription": "This example shows how Babel transforms ESM imports to CommonJS require calls, highlighting the potential timing differences between transpiled code and native ESM.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/esm.md#2025-04-18_snippet_1",
    "pageTitle": "ES Modules (ESM) in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "import foo from \"foo\";\nimport { bar } from \"bar\";\nfoo;\nbar;\n\n// with \"importInterop: node\", compiles to ...\n\n\"use strict\";\n\nvar _foo = require(\"foo\");\nvar _bar = require(\"bar\");\n\n_foo;\n_bar.bar;"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Node-gyp Build Configuration",
    "codeDescription": "The binding.gyp configuration file that specifies how to build the native addon across different platforms.",
    "codeLanguage": "json",
    "codeTokens": 251,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-18_snippet_4",
    "pageTitle": "Native Code Integration in Electron",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"targets\": [\n    {\n      \"target_name\": \"my_addon\",\n      \"sources\": [\n        \"src/my_addon.cc\",\n        \"src/cpp_code.cc\"\n      ],\n      \"include_dirs\": [\n        \"<!@(node -p \\\"require('node-addon-api').include\\\")\",\n        \"include\"\n      ],\n      \"dependencies\": [\n        \"<!(node -p \\\"require('node-addon-api').gyp\\\")\"\n      ],\n      \"defines\": [\n        \"NODE_ADDON_API_CPP_EXCEPTIONS\"\n      ],\n      \"cflags!\": [\"-fno-exceptions\"],\n      \"cflags_cc!\": [\"-fno-exceptions\"],\n      \"xcode_settings\": {\n        \"GCC_ENABLE_CPP_EXCEPTIONS\": \"YES\",\n        \"CLANG_CXX_LIBRARY\": \"libc++\",\n        \"MACOSX_DEPLOYMENT_TARGET\": \"10.14\"\n      },\n      \"msvs_settings\": {\n        \"VCCLCompilerTool\": {\n          \"ExceptionHandling\": 1\n        }\n      }\n    }\n  ]\n}"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Debug Notifications Sample Output",
    "codeDescription": "Example output when ELECTRON_DEBUG_NOTIFICATIONS is enabled showing notification lifecycle events.",
    "codeLanguage": "sh",
    "codeTokens": 169,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-18_snippet_7",
    "pageTitle": "Environment Variables in Electron Configuration",
    "codeList": [
      {
        "language": "sh",
        "code": "Notification created (com.github.Electron:notification:EAF7B87C-A113-43D7-8E76-F88EC9D73D44)\nNotification displayed (com.github.Electron:notification:EAF7B87C-A113-43D7-8E76-F88EC9D73D44)\nNotification activated (com.github.Electron:notification:EAF7B87C-A113-43D7-8E76-F88EC9D73D44)\nNotification replied to (com.github.Electron:notification:EAF7B87C-A113-43D7-8E76-F88EC9D73D44)"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Using WebView for Web Embedding in HTML",
    "codeDescription": "An example of using a WebView tag to embed web content in Electron. Note that WebViews are not recommended due to potential stability issues and architectural changes.",
    "codeLanguage": "html",
    "codeTokens": 51,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/web-embeds.md#2025-04-18_snippet_1",
    "pageTitle": "Web Embeds in Electron",
    "codeList": [
      {
        "language": "html",
        "code": "<webview>"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Setting Custom Electron Distribution Path",
    "codeDescription": "Example of setting ELECTRON_OVERRIDE_DIST_PATH to use a custom build of Electron.",
    "codeLanguage": "sh",
    "codeTokens": 49,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-18_snippet_8",
    "pageTitle": "Environment Variables in Electron Configuration",
    "codeList": [
      {
        "language": "sh",
        "code": "export ELECTRON_OVERRIDE_DIST_PATH=/Users/username/projects/electron/out/Testing"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Renaming Node.js Symbols in Browser for Library Compatibility",
    "codeDescription": "This snippet shows how to rename Node.js symbols in the renderer process before including libraries like jQuery to prevent conflicts while maintaining access to Node.js functionality.",
    "codeLanguage": "html",
    "codeTokens": 85,
    "codeId": "https://github.com/electron/electron/blob/main/docs/faq.md#2025-04-18_snippet_2",
    "pageTitle": "Electron FAQ",
    "codeList": [
      {
        "language": "html",
        "code": "<head>\n<script>\nwindow.nodeRequire = require;\ndelete window.require;\ndelete window.exports;\ndelete window.module;\n</script>\n<script type=\"text/javascript\" src=\"jquery.js\"></script>\n</head>"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Adding a New Patch in Electron",
    "codeDescription": "Demonstrates the process of adding a new patch to the Electron project using git commands and the custom git-export-patches script.",
    "codeLanguage": "bash",
    "codeTokens": 78,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/patches.md#2025-04-18_snippet_1",
    "pageTitle": "Managing Patches in Electron",
    "codeList": [
      {
        "language": "bash",
        "code": "$ cd src/third_party/electron_node\n$ vim some/code/file.cc\n$ git commit\n$ ../../electron/script/git-export-patches -o ../../electron/patches/node"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Defining UploadData Object Properties in Electron",
    "codeDescription": "Specifies the properties of the UploadData object including bytes buffer for content, optional file path, and optional blob UUID for data retrieval. The object is used for handling upload operations in Electron applications.",
    "codeLanguage": "markdown",
    "codeTokens": 121,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/upload-data.md#2025-04-18_snippet_0",
    "pageTitle": "UploadData Object Documentation for Electron",
    "codeList": [
      {
        "language": "markdown",
        "code": "* `bytes` Buffer - Content being sent.\n* `file` string (optional) - Path of file being uploaded.\n* `blobUUID` string (optional) - UUID of blob data. Use [ses.getBlobData](../session.md#sesgetblobdataidentifier) method\n  to retrieve the data."
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Unsupported NODE_OPTIONS Values",
    "codeDescription": "List of NODE_OPTIONS that are not supported due to conflicts with Chromium's BoringSSL.",
    "codeLanguage": "sh",
    "codeTokens": 61,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-18_snippet_3",
    "pageTitle": "Environment Variables in Electron Configuration",
    "codeList": [
      {
        "language": "sh",
        "code": "--use-bundled-ca\n--force-fips\n--enable-fips\n--openssl-config\n--use-openssl-ca"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Aborting git-am to Fix gclient sync",
    "codeDescription": "Commands to abort a stuck git-am process and force gclient sync to proceed when encountering sync issues in the src directory.",
    "codeLanguage": "sh",
    "codeTokens": 60,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-gn.md#2025-04-18_snippet_22",
    "pageTitle": "Building Electron from Source",
    "codeList": [
      {
        "language": "sh",
        "code": "$ cd ../\n$ git am --abort\n$ cd electron\n$ gclient sync -f"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "InputEvent Object Structure in Markdown",
    "codeDescription": "Defines the structure of an InputEvent object in Electron, showing its properties and their possible values. It includes the 'type' property that specifies the kind of input event and an optional 'modifiers' array that contains keyboard and mouse button modifiers.",
    "codeLanguage": "markdown",
    "codeTokens": 360,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/input-event.md#2025-04-18_snippet_0",
    "pageTitle": "InputEvent Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "* `type` string - Can be `undefined`, `mouseDown`, `mouseUp`, `mouseMove`,\n  `mouseEnter`, `mouseLeave`, `contextMenu`, `mouseWheel`, `rawKeyDown`,\n  `keyDown`, `keyUp`, `char`, `gestureScrollBegin`, `gestureScrollEnd`,\n  `gestureScrollUpdate`, `gestureFlingStart`, `gestureFlingCancel`,\n  `gesturePinchBegin`, `gesturePinchEnd`, `gesturePinchUpdate`,\n  `gestureTapDown`, `gestureShowPress`, `gestureTap`, `gestureTapCancel`,\n  `gestureShortPress`, `gestureLongPress`, `gestureLongTap`,\n  `gestureTwoFingerTap`, `gestureTapUnconfirmed`, `gestureDoubleTap`,\n  `touchStart`, `touchMove`, `touchEnd`, `touchCancel`, `touchScrollStarted`,\n  `pointerDown`, `pointerUp`, `pointerMove`, `pointerRawUpdate`,\n  `pointerCancel` or `pointerCausedUaAction`.\n* `modifiers` string[] (optional) - An array of modifiers of the event, can\n  be `shift`, `control`, `ctrl`, `alt`, `meta`, `command`, `cmd`, `iskeypad`,\n  `isautorepeat`, `leftbuttondown`, `middlebuttondown`, `rightbuttondown`,\n  `capslock`, `numlock`, `left`, `right`."
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Creating an ASAR archive with unpacked Node.js native modules",
    "codeDescription": "Demonstrates how to use the asar CLI tool to create an archive while keeping certain files (native Node.js modules) unpacked, which can improve performance and avoid anti-virus scanning issues.",
    "codeLanguage": "sh",
    "codeTokens": 68,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/asar-archives.md#2025-04-18_snippet_8",
    "pageTitle": "ASAR Archives in Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "$ asar pack app app.asar --unpack *.node"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Using Git Log to Find API Changes",
    "codeDescription": "Demonstrates how to use git log with file and function name to find changes to a specific API.",
    "codeLanguage": "bash",
    "codeTokens": 131,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-18_snippet_3",
    "pageTitle": "API History Migration Guide for Electron",
    "codeList": [
      {
        "language": "bash",
        "code": "$ git log --reverse -L :GetTrafficLightPosition:shell/browser/native_window_mac.mm\ncommit e01b1831d96d5d68f54af879b00c617358df5372\nAuthor: Cheng Zhao <zcbenz@gmail.com>\nDate:   Wed Dec 16 14:30:39 2020 +0900\n\n    feat: make trafficLightPosition work for customButtonOnHover (#26789)"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Creating .lldbinit Configuration for Electron Debugging",
    "codeDescription": "Configuration for ~/.lldbinit file that allows Chromium code to be properly source-mapped in LLDB. This script imports the necessary paths and debugging helpers.",
    "codeLanguage": "text",
    "codeTokens": 88,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-18_snippet_0",
    "pageTitle": "Debugging Electron on macOS with LLDB",
    "codeList": [
      {
        "language": "text",
        "code": "# e.g: ['~/electron/src/tools/lldb']\nscript sys.path[:0] = ['<...path/to/electron/src/tools/lldb>']\nscript import lldbinit"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Installing Native Addon Dependencies",
    "codeDescription": "Command to install required dependencies for building native addons including node-addon-api and bindings.",
    "codeLanguage": "sh",
    "codeTokens": 39,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-18_snippet_2",
    "pageTitle": "Native Code Integration in Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "npm install node-addon-api bindings"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Accessing Transparency Reduction Setting in Electron (macOS)",
    "codeDescription": "Deprecated property that indicates whether the app should avoid using semitransparent backgrounds. Maps to NSWorkspace.accessibilityDisplayShouldReduceTransparency.",
    "codeLanguage": "javascript",
    "codeTokens": 55,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/system-preferences.md#2025-04-18_snippet_5",
    "pageTitle": "System Preferences API Documentation - Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "systemPreferences.accessibilityDisplayShouldReduceTransparency"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Allowed NODE_OPTIONS in Packaged Apps",
    "codeDescription": "NODE_OPTIONS that are explicitly allowed in packaged Electron applications.",
    "codeLanguage": "sh",
    "codeTokens": 37,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/environment-variables.md#2025-04-18_snippet_4",
    "pageTitle": "Environment Variables in Electron Configuration",
    "codeList": [
      {
        "language": "sh",
        "code": "--max-http-header-size\n--http-parser"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Creating an Empty NativeImage Instance in Electron (JavaScript)",
    "codeDescription": "Shows how to create an empty NativeImage instance and log it to the console.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/native-image.md#2025-04-18_snippet_3",
    "pageTitle": "NativeImage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { nativeImage } = require('electron')\n\nconst image = nativeImage.createFromPath('/Users/somebody/images/icon.png')\nconsole.log(image)"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Electron App Directory Structure",
    "codeDescription": "Example directory structure of a packaged Electron application showing required files and folders",
    "codeLanguage": "plaintext",
    "codeTokens": 171,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/windows-store-guide.md#2025-04-18_snippet_1",
    "pageTitle": "Windows Store Guide for Electron Apps",
    "codeList": [
      {
        "language": "plaintext",
        "code": "├── Ghost.exe\n├── LICENSE\n├── content_resources_200_percent.pak\n├── content_shell.pak\n├── d3dcompiler_47.dll\n├── ffmpeg.dll\n├── icudtl.dat\n├── libEGL.dll\n├── libGLESv2.dll\n├── locales\n│   ├── am.pak\n│   ├── ar.pak\n│   ├── [...]\n├── node.dll\n├── resources\n│   └── app.asar\n├── v8_context_snapshot.bin\n├── squirrel.exe\n└── ui_resources_200_percent.pak"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Resolving Patch Conflicts in Electron",
    "codeDescription": "Explains how to resolve conflicts when applying patches in Electron, using the 3-way merge algorithm and manual conflict resolution.",
    "codeLanguage": "bash",
    "codeTokens": 97,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/patches.md#2025-04-18_snippet_4",
    "pageTitle": "Managing Patches in Electron",
    "codeList": [
      {
        "language": "bash",
        "code": "$ cd src/third_party/electron_node\n# If the patch application failed midway through, you can reset it with:\n$ git am --abort\n# And then retry with 3-way merge:\n$ ../../electron/script/git-import-patches -3 ../../electron/patches/node"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Defining MediaAccessPermissionRequest Object Properties in Electron",
    "codeDescription": "Specifies the structure of a MediaAccessPermissionRequest object that extends PermissionRequest. It includes properties for security origin and requested media types (video/audio).",
    "codeLanguage": "typescript",
    "codeTokens": 76,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/media-access-permission-request.md#2025-04-18_snippet_0",
    "pageTitle": "MediaAccessPermissionRequest Object Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface MediaAccessPermissionRequest extends PermissionRequest {\n  securityOrigin?: string;\n  mediaTypes?: ('video' | 'audio')[];\n}"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Defining UserDefaultTypes Object in Markdown",
    "codeDescription": "This snippet defines the UserDefaultTypes object, mapping various data types to their JavaScript/TypeScript equivalents. It includes primitive types, as well as complex types like arrays and dictionaries.",
    "codeLanguage": "markdown",
    "codeTokens": 129,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/user-default-types.md#2025-04-18_snippet_0",
    "pageTitle": "UserDefaultTypes Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "# UserDefaultTypes Object\n\n* `string` string\n* `boolean` boolean\n* `integer` number\n* `float` number\n* `double` number\n* `url` string\n* `array` Array\\<unknown>\n* `dictionary` Record\\<string, unknown>\n\nThis type is a helper alias, no object will ever exist of this type."
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Electron Build Tools Module Error",
    "codeDescription": "Error message shown when the electron build tools 'e' module cannot be found in the user's path after installation.",
    "codeLanguage": "sh",
    "codeTokens": 56,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-gn.md#2025-04-18_snippet_23",
    "pageTitle": "Building Electron from Source",
    "codeList": [
      {
        "language": "sh",
        "code": "Error: Cannot find module '/Users/<user>/.electron_build_tools/src/e'"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Appending Command Line Switch in Electron (JavaScript)",
    "codeDescription": "This example shows how to append a command-line switch with a value to Chromium's command line using the CommandLine class in Electron.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/command-line.md#2025-04-18_snippet_1",
    "pageTitle": "CommandLine Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app } = require('electron')\n\napp.commandLine.appendSwitch('remote-debugging-port', '8315')"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Checking Navigation Capability in Electron",
    "codeDescription": "Methods to check if the browser can navigate backward or forward in the history.",
    "codeLanguage": "javascript",
    "codeTokens": 45,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/navigation-history.md#2025-04-18_snippet_0",
    "pageTitle": "Navigation History Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "navigationHistory.canGoBack()\n\nnavigationHistory.canGoForward()"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Directory Structure for Electron App on macOS",
    "codeDescription": "Shows the required file structure when manually packaging an Electron app on macOS. The app folder must be placed in the Resources directory of the Electron.app bundle.",
    "codeLanguage": "plain",
    "codeTokens": 72,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/application-distribution.md#2025-04-18_snippet_0",
    "pageTitle": "Application Packaging in Electron",
    "codeList": [
      {
        "language": "plain",
        "code": "electron/Electron.app/Contents/Resources/app/\n├── package.json\n├── main.js\n└── index.html"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Documenting ipcRenderer API History in Markdown",
    "codeDescription": "YAML history block for ipcRenderer API documenting breaking changes related to contextBridge restrictions",
    "codeLanguage": "markdown",
    "codeTokens": 123,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-18_snippet_9",
    "pageTitle": "Electron Documentation Style Guide",
    "codeList": [
      {
        "language": "markdown",
        "code": "# ipcRenderer\n\n<!--\n```YAML history\nchanges:\n  - pr-url: https://github.com/electron/electron/pull/40330\n    description: \"`ipcRenderer` can no longer be sent over the `contextBridge`\"\n    breaking-changes-header: behavior-changed-ipcrenderer-can-no-longer-be-sent-over-the-contextbridge\n```\n-->\n\nProcess: [Renderer](../glossary.md#renderer-process)"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Running Electron Tests with xvfb-maybe",
    "codeDescription": "Example command showing how to use xvfb-maybe to automatically configure Xvfb for running Electron tests. The tool will only enable Xvfb on Linux systems in headless environments, while doing nothing on Windows or macOS.",
    "codeLanguage": "sh",
    "codeTokens": 120,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/testing-on-headless-ci.md#2025-04-18_snippet_0",
    "pageTitle": "Configuring Headless Testing for Electron Applications",
    "codeList": [
      {
        "language": "sh",
        "code": "## On Windows or macOS, this invokes electron-mocha\n## On Linux, if we are in a headless environment, this will be equivalent\n## to xvfb-run electron-mocha ./test/*.js\nxvfb-maybe electron-mocha ./test/*.js"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Creating and Initializing Native Addon Project",
    "codeDescription": "Shell commands to create a new directory for the native addon project and initialize it with npm.",
    "codeLanguage": "sh",
    "codeTokens": 49,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-18_snippet_1",
    "pageTitle": "Native Code Integration in Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "mkdir my-native-addon\ncd my-native-addon\nnpm init -y"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "API History Documentation with YAML in HTML Comments",
    "codeDescription": "Example showing how to document API history using YAML in HTML comments, including added, changed, and deprecated information with links to the pull requests where changes were made.",
    "codeLanguage": "markdown",
    "codeTokens": 206,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-18_snippet_7",
    "pageTitle": "Electron Documentation Style Guide",
    "codeList": [
      {
        "language": "markdown",
        "code": "#### `win.setTrafficLightPosition(position)` _macOS_\n\n<!--\n```YAML history\nadded:\n  - pr-url: https://github.com/electron/electron/pull/22533\nchanges:\n  - pr-url: https://github.com/electron/electron/pull/26789\n    description: \"Made `trafficLightPosition` option work for `customButtonOnHover` window.\"\ndeprecated:\n  - pr-url: https://github.com/electron/electron/pull/37094\n    breaking-changes-header: deprecated-browserwindowsettrafficlightpositionposition\n```\n-->\n\n* `position` [Point](structures/point.md)\n\nSet a custom position for the traffic light buttons. Can only be used with `titleBarStyle` set to `hidden`."
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Cloning Electron Repository with Dependencies",
    "codeDescription": "Uses gclient to clone the Electron repository and fetch all its dependencies including Chromium and Node.js. This process may take a significant amount of time.",
    "codeLanguage": "sh",
    "codeTokens": 99,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-gn.md#2025-04-18_snippet_1",
    "pageTitle": "Building Electron from Source",
    "codeList": [
      {
        "language": "sh",
        "code": "$ mkdir electron && cd electron\n$ gclient config --name \"src/electron\" --unmanaged https://github.com/electron/electron\n$ gclient sync --with_branch_heads --with_tags\n# This will take a while, go get a coffee."
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Advanced Menu Output in Shell",
    "codeDescription": "Displays the resulting menu structure from the advanced template, showing the effect of positioning keywords and separators.",
    "codeLanguage": "shellscript",
    "codeTokens": 55,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/menu.md#2025-04-18_snippet_5",
    "pageTitle": "Electron Menu API Guide",
    "codeList": [
      {
        "language": "shellscript",
        "code": "- 3\n- 4\n- ---\n- 1\n- ---\n- 2"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Defining ProductSubscriptionPeriod Object Structure in Electron",
    "codeDescription": "Describes the properties of a ProductSubscriptionPeriod object that defines subscription duration. Contains numberOfUnits as a numeric value and unit as a string that specifies the time increment (day, week, month, year).",
    "codeLanguage": "typescript",
    "codeTokens": 109,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/product-subscription-period.md#2025-04-18_snippet_0",
    "pageTitle": "ProductSubscriptionPeriod Object Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ProductSubscriptionPeriod {\n  numberOfUnits: number;  // The number of units per subscription period\n  unit: 'day' | 'week' | 'month' | 'year';  // The increment of time for subscription period\n}"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Cloning and Setting Up Electron Repository",
    "codeDescription": "Commands to fork the Electron repository, clone it locally, and set up the upstream remote for syncing with the main project.",
    "codeLanguage": "sh",
    "codeTokens": 77,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-18_snippet_0",
    "pageTitle": "Pull Request Guidelines for Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "$ git clone git@github.com:username/electron.git\n$ cd electron\n$ git remote add upstream https://github.com/electron/electron.git\n$ git fetch upstream"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Defining UploadRawData Object Properties in Markdown",
    "codeDescription": "This snippet outlines the properties of the UploadRawData object. It specifies that the object has a 'type' property set to 'rawData' and a 'bytes' property containing a Buffer of data to be uploaded.",
    "codeLanguage": "markdown",
    "codeTokens": 91,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/upload-raw-data.md#2025-04-18_snippet_0",
    "pageTitle": "UploadRawData Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "# UploadRawData Object\n\n* `type` 'rawData' - `rawData`.\n* `bytes` Buffer - Data to be uploaded."
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Defining ResolvedHost Object Structure in Electron",
    "codeDescription": "Specifies the structure of the ResolvedHost object which contains an array of ResolvedEndpoint objects representing resolved DNS entries for a hostname.",
    "codeLanguage": "markdown",
    "codeTokens": 71,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/resolved-host.md#2025-04-18_snippet_0",
    "pageTitle": "ResolvedHost Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "# ResolvedHost Object\n\n* `endpoints` [ResolvedEndpoint[]](resolved-endpoint.md) - resolved DNS entries for the hostname"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Displaying Electron Project Directory Structure (diff)",
    "codeDescription": "This code snippet shows the directory structure of the Electron project using a diff-style format. It outlines the main directories and their purposes, including build files, source code, documentation, and testing components.",
    "codeLanguage": "diff",
    "codeTokens": 981,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/source-code-directory-structure.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Source Code Directory Structure",
    "codeList": [
      {
        "language": "diff",
        "code": "Electron\n├── build/ - Build configuration files needed to build with GN.\n├── buildflags/ - Determines the set of features that can be conditionally built.\n├── chromium_src/ - Source code copied from Chromium that isn't part of the content layer.\n├── default_app/ - A default app run when Electron is started without\n|                  providing a consumer app.\n├── docs/ - Electron's documentation.\n|   ├── api/ - Documentation for Electron's externally-facing modules and APIs.\n|   ├── development/ - Documentation to aid in developing for and with Electron.\n|   ├── fiddles/ - A set of code snippets one can run in Electron Fiddle.\n|   ├── images/ - Images used in documentation.\n|   └── tutorial/ - Tutorial documents for various aspects of Electron.\n├── lib/ - JavaScript/TypeScript source code.\n|   ├── browser/ - Main process initialization code.\n|   |   ├── api/ - API implementation for main process modules.\n|   |   └── remote/ - Code related to the remote module as it is\n|   |                 used in the main process.\n|   ├── common/ - Relating to logic needed by both main and renderer processes.\n|   |   └── api/ - API implementation for modules that can be used in\n|   |              both the main and renderer processes\n|   ├── isolated_renderer/ - Handles creation of isolated renderer processes when\n|   |                        contextIsolation is enabled.\n|   ├── renderer/ - Renderer process initialization code.\n|   |   ├── api/ - API implementation for renderer process modules.\n|   |   ├── extension/ - Code related to use of Chrome Extensions\n|   |   |                in Electron's renderer process.\n|   |   ├── remote/ - Logic that handles use of the remote module in\n|   |   |             the main process.\n|   |   └── web-view/ - Logic that handles the use of webviews in the\n|   |                   renderer process.\n|   ├── sandboxed_renderer/ - Logic that handles creation of sandboxed renderer\n|   |   |                     processes.\n|   |   └── api/ - API implementation for sandboxed renderer processes.\n|   └── worker/ - Logic that handles proper functionality of Node.js\n|                 environments in Web Workers.\n├── patches/ - Patches applied on top of Electron's core dependencies\n|   |          in order to handle differences between our use cases and\n|   |          default functionality.\n|   ├── boringssl/ - Patches applied to Google's fork of OpenSSL, BoringSSL.\n|   ├── chromium/ - Patches applied to Chromium.\n|   ├── node/ - Patches applied on top of Node.js.\n|   └── v8/ - Patches applied on top of Google's V8 engine.\n├── shell/ - C++ source code.\n|   ├── app/ - System entry code.\n|   ├── browser/ - The frontend including the main window, UI, and all of the\n|   |   |          main process things. This talks to the renderer to manage web\n|   |   |          pages.\n|   |   ├── ui/ - Implementation of UI stuff for different platforms.\n|   |   |   ├── cocoa/ - Cocoa specific source code.\n|   |   |   ├── win/ - Windows GUI specific source code.\n|   |   |   └── x/ - X11 specific source code.\n|   |   ├── api/ - The implementation of the main process APIs.\n|   |   ├── net/ - Network related code.\n|   |   ├── mac/ - Mac specific Objective-C source code.\n|   |   └── resources/ - Icons, platform-dependent files, etc.\n|   ├── renderer/ - Code that runs in renderer process.\n|   |   └── api/ - The implementation of renderer process APIs.\n|   └── common/ - Code that used by both the main and renderer processes,\n|       |         including some utility functions and code to integrate node's\n|       |         message loop into Chromium's message loop.\n|       └── api/ - The implementation of common APIs, and foundations of\n|                  Electron's built-in modules.\n├── spec/ - Components of Electron's test suite run in the main process.\n└── BUILD.gn - Building rules of Electron."
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Retrieving Feed URL in Electron autoUpdater",
    "codeDescription": "Returns the current update feed URL as a string.",
    "codeLanguage": "javascript",
    "codeTokens": 33,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/auto-updater.md#2025-04-18_snippet_1",
    "pageTitle": "Electron autoUpdater Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "autoUpdater.getFeedURL()"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Setting Proxy Bypass List in Electron",
    "codeDescription": "Example showing how to use the proxy-bypass-list command line switch to specify hosts that should bypass the proxy server. This needs to be used together with the proxy-server flag.",
    "codeLanguage": "javascript",
    "codeTokens": 95,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/command-line-switches.md#2025-04-18_snippet_4",
    "pageTitle": "Electron Command Line Switches Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app } = require('electron')\napp.commandLine.appendSwitch('proxy-bypass-list', '<local>;*.google.com;*foo.com;1.2.3.4:5678')"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Enabling Accessibility in Electron Apps using Objective-C",
    "codeDescription": "Objective-C code that programmatically toggles accessibility features in Electron applications on macOS by setting the AXManualAccessibility attribute. The function takes a boolean parameter to enable/disable accessibility and the target application reference.",
    "codeLanguage": "objc",
    "codeTokens": 162,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/accessibility.md#2025-04-18_snippet_0",
    "pageTitle": "Accessibility Implementation Guide for Electron Applications",
    "codeList": [
      {
        "language": "objc",
        "code": "CFStringRef kAXManualAccessibility = CFSTR(\"AXManualAccessibility\");\n\n+ (void)enableAccessibility:(BOOL)enable inElectronApplication:(NSRunningApplication *)app\n{\n    AXUIElementRef appRef = AXUIElementCreateApplication(app.processIdentifier);\n    if (appRef == nil)\n        return;\n\n    CFBooleanRef value = enable ? kCFBooleanTrue : kCFBooleanFalse;\n    AXUIElementSetAttributeValue(appRef, kAXManualAccessibility, value);\n    CFRelease(appRef);\n}"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Creating Symbolic Link for libtinfo.so.5 Dependency",
    "codeDescription": "Command to create a symbolic link to resolve the 'Error While Loading Shared Libraries: libtinfo.so.5' issue when building Electron with prebuilt clang, by linking to the system's libncurses library.",
    "codeLanguage": "sh",
    "codeTokens": 82,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-18_snippet_8",
    "pageTitle": "Building Electron on Linux",
    "codeList": [
      {
        "language": "sh",
        "code": "$ sudo ln -s /usr/lib/libncurses.so.5 /usr/lib/libtinfo.so.5"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Directory Structure for asar Archive on Windows",
    "codeDescription": "Shows the file structure when using an asar archive instead of an app folder on Windows. The app.asar file replaces the app folder in the resources directory.",
    "codeLanguage": "plain",
    "codeTokens": 57,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/application-distribution.md#2025-04-18_snippet_3",
    "pageTitle": "Application Packaging in Electron",
    "codeList": [
      {
        "language": "plain",
        "code": "electron/resources/\n└── app.asar"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Creating a TouchBarSegmentedControl in Electron's Main Process",
    "codeDescription": "Constructor for creating a new TouchBarSegmentedControl with various configuration options including segment style, selection mode, segments array, selected index, and change event handler.",
    "codeLanguage": "javascript",
    "codeTokens": 59,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/touch-bar-segmented-control.md#2025-04-18_snippet_0",
    "pageTitle": "TouchBarSegmentedControl Class Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "new TouchBarSegmentedControl(options)"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Configuring Outgoing Network Access in Electron",
    "codeDescription": "XML configuration to enable outgoing network connections in an Electron application. This entitlement allows the app to establish connections to remote servers.",
    "codeLanguage": "xml",
    "codeTokens": 58,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-18_snippet_4",
    "pageTitle": "Mac App Store Submission Guide for Electron Apps",
    "codeList": [
      {
        "language": "xml",
        "code": "<key>com.apple.security.network.client</key>\n<true/>"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Using Git Blame to Find API Changes",
    "codeDescription": "Demonstrates how to use git blame and git log commands to find the Pull Request associated with API changes.",
    "codeLanguage": "bash",
    "codeTokens": 285,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-18_snippet_1",
    "pageTitle": "API History Migration Guide for Electron",
    "codeList": [
      {
        "language": "bash",
        "code": "$ grep -n \"BrowserWindow.getTrafficLightPosition\" docs/breaking-changes.md \n523:### Deprecated: `BrowserWindow.getTrafficLightPosition()`\n525:`BrowserWindow.getTrafficLightPosition()` has been deprecated, the\n\n$ git blame -L523,524 -- docs/breaking-changes.md\n1e206deec3e (Keeley Hammond 2023-04-06 21:23:29 -0700 523) ### Deprecated: `BrowserWindow.getTrafficLightPosition()`\n1e206deec3e (Keeley Hammond 2023-04-06 21:23:29 -0700 524)\n\n$ git log -1 1e206deec3e\ncommit 1e206deec3ef142460c780307752a84782f9baed (tag: v26.0.0-nightly.20230407)\nAuthor: Keeley Hammond <vertedinde@electronjs.org>\nDate:   Thu Apr 6 21:23:29 2023 -0700\n\n    docs: update E24/E25 breaking changes (#37878) <-- This is the associated Pull Request"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Test Script Implementation",
    "codeDescription": "Simple test script to verify the addon functionality by loading and executing the hello world function.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-18_snippet_10",
    "pageTitle": "Native Code Integration in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const myAddon = require('./js')\n\nconst result = myAddon.helloWorld('This is a test')\n\nconsole.log(result)"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Pushing Changes to Fork in Electron Development",
    "codeDescription": "Command to push the local branch with changes to the forked repository on GitHub.",
    "codeLanguage": "sh",
    "codeTokens": 40,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-18_snippet_6",
    "pageTitle": "Pull Request Guidelines for Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "$ git push origin my-branch"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Defining Size Object Structure in Markdown",
    "codeDescription": "This snippet outlines the structure of a Size object, which is likely used in the Electron framework to represent dimensions. It specifies two properties: width and height, both of which are numbers.",
    "codeLanguage": "markdown",
    "codeTokens": 67,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/size.md#2025-04-18_snippet_0",
    "pageTitle": "Size Object Structure",
    "codeList": [
      {
        "language": "markdown",
        "code": "# Size Object\n\n* `width` number\n* `height` number"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Stripping Debugging Information for Linux Packaging",
    "codeDescription": "Removes debugging and symbol information from the compiled binaries on Linux to reduce file size before packaging.",
    "codeLanguage": "sh",
    "codeTokens": 47,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-gn.md#2025-04-18_snippet_13",
    "pageTitle": "Building Electron from Source",
    "codeList": [
      {
        "language": "sh",
        "code": "$ electron/script/strip-binaries.py -d out/Release"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Exporting Node V8 Patches Using Git Commands",
    "codeDescription": "Command sequence to extract V8-related patches from Node.js source. Process involves identifying the last V8 update commit and creating a formatted patch file that can be applied to the V8 repository. The generated patch excludes gypfiles directory and strips deps/v8 from paths.",
    "codeLanguage": "cmd",
    "codeTokens": 295,
    "codeId": "https://github.com/electron/electron/blob/main/patches/v8/README.md#2025-04-18_snippet_0",
    "pageTitle": "Node V8 Patch Export Guide",
    "codeList": [
      {
        "language": "cmd",
        "code": "$ cd third_party/electron_node\n$ CURRENT_NODE_VERSION=vX.Y.Z  # e.g. v10.11.0\n\n# Find the last commit with the message \"deps: update V8 to <some version>\"\n# This commit corresponds to node resetting V8 to its pristine upstream\n# state at the stated version.\n$ LAST_V8_UPDATE=\"$(git log --grep='^deps: update V8' --format='%H' -1 deps/v8)\"\n\n# This creates a patch file containing all changes in deps/v8 from\n# $LAST_V8_UPDATE up to the current node version, formatted in a way that\n# it will apply cleanly to the V8 repository (i.e. with `deps/v8`\n# stripped off the path and excluding the v8/gypfiles directory, which\n# isn't present in V8.\n$ git format-patch \\\n    --relative=deps/v8 \\\n    $LAST_V8_UPDATE..$CURRENT_NODE_VERSION \\\n    deps/v8 \\\n    ':(exclude)deps/v8/gypfiles' \\\n    --stdout"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Checking Window Snap Status on Windows",
    "codeDescription": "Method to determine if a window is arranged using Windows Snap feature. Returns a boolean indicating if the window is snapped.",
    "codeLanguage": "JavaScript",
    "codeTokens": 46,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_14",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "win.isSnapped()"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Documenting Non-Class Modules with autoUpdater Example",
    "codeDescription": "Example showing the correct documentation structure for modules that are not classes, using the 'autoUpdater' module as an example. Shows the organization of events and methods under the appropriate headers.",
    "codeLanguage": "markdown",
    "codeTokens": 81,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Documentation Style Guide",
    "codeList": [
      {
        "language": "markdown",
        "code": "# autoUpdater\n\n## Events\n\n### Event: 'error'\n\n## Methods\n\n### `autoUpdater.setFeedURL(url[, requestHeaders])`"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Node Binding Integration for API",
    "codeDescription": "C++ code to link the API with Node's binding system in Electron.",
    "codeLanguage": "cpp",
    "codeTokens": 49,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-18_snippet_4",
    "pageTitle": "Creating Electron Browser API Modules Guide",
    "codeList": [
      {
        "language": "cpp",
        "code": "NODE_LINKED_BINDING_CONTEXT_AWARE(electron_browser_{api_name},Initialize)"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Invalid Node.js Imports in Renderer Process",
    "codeDescription": "This HTML snippet demonstrates that Node.js built-in modules cannot be imported directly in the renderer process with ESM, as Chromium's ESM loader is used in this context.",
    "codeLanguage": "html",
    "codeTokens": 81,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/esm.md#2025-04-18_snippet_2",
    "pageTitle": "ES Modules (ESM) in Electron",
    "codeList": [
      {
        "language": "html",
        "code": "<script type=\"module\">\n    import { exists } from 'node:fs' // ❌ will not work!\n</script>"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Collecting JavaScript Call Stack in Electron Frame",
    "codeDescription": "This example demonstrates how to collect the JavaScript call stack from an unresponsive renderer process using the experimental collectJavaScriptCallStack method.",
    "codeLanguage": "javascript",
    "codeTokens": 144,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-frame-main.md#2025-04-18_snippet_2",
    "pageTitle": "WebFrameMain Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { app } = require('electron')\n\napp.commandLine.appendSwitch('enable-features', 'DocumentPolicyIncludeJSCallStacksInCrashReports')\n\napp.on('web-contents-created', (_, webContents) => {\n  webContents.on('unresponsive', async () => {\n    // Interrupt execution and collect call stack from unresponsive renderer\n    const callStack = await webContents.mainFrame.collectJavaScriptCallStack()\n    console.log('Renderer unresponsive\\n', callStack)\n  })\n})"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Installing Electron as a Development Dependency with npm",
    "codeDescription": "This command installs Electron as a development dependency in your app using npm.",
    "codeLanguage": "sh",
    "codeTokens": 37,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-18_snippet_0",
    "pageTitle": "Advanced Installation Instructions for Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "npm install electron --save-dev"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Configuring ARM Target Architecture for Electron Build",
    "codeDescription": "GN command to generate build files for cross-compiling Electron for ARM architecture by setting the target_cpu parameter.",
    "codeLanguage": "sh",
    "codeTokens": 53,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-18_snippet_7",
    "pageTitle": "Building Electron on Linux",
    "codeList": [
      {
        "language": "sh",
        "code": "$ gn gen out/Testing --args='import(...) target_cpu=\"arm\"'"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Configuring ASAR Integrity for Windows (JSON)",
    "codeDescription": "JSON structure for Windows resource entry that defines ASAR integrity information. It specifies the file path, algorithm, and hash value for integrity verification.",
    "codeLanguage": "json",
    "codeTokens": 115,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/asar-integrity.md#2025-04-18_snippet_3",
    "pageTitle": "ASAR Integrity in Electron",
    "codeList": [
      {
        "language": "json",
        "code": "[\n  {\n    \"file\": \"resources\\\\app.asar\",\n    \"alg\": \"sha256\",\n    \"value\": \"9d1f61ea03c4bb62b4416387a521101b81151da0cfbe18c9f8c8b818c5cebfac\"\n  }\n]"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Starting LLDB with Electron Application",
    "codeDescription": "Shell command to launch LLDB with a testing build of Electron as the target application for debugging.",
    "codeLanguage": "sh",
    "codeTokens": 81,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/debugging-on-macos.md#2025-04-18_snippet_1",
    "pageTitle": "Debugging Electron on macOS with LLDB",
    "codeList": [
      {
        "language": "sh",
        "code": "$ lldb ./out/Testing/Electron.app\n(lldb) target create \"./out/Testing/Electron.app\"\nCurrent executable set to './out/Testing/Electron.app' (x86_64)."
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Documenting publish-to-github Script in Markdown",
    "codeDescription": "Describes the publish-to-github script which finalizes the GitHub release by uploading SHASUMs, updating the assets CDN, and publishing the release.",
    "codeLanguage": "markdown",
    "codeTokens": 108,
    "codeId": "https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-18_snippet_5",
    "pageTitle": "Electron Release Scripts Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "### `publish-to-github`\n\nThis script finalizes the GitHub release, in the process it:\n\n* Uploads the header SHASUMs to the CDN\n* Updates the `index.json` file on the assets CDN with the new version via metadumper\n* Publishes the actual GitHub release"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Installing ARM64 Cross-Compilation Dependencies for Electron",
    "codeDescription": "Command to install the necessary libraries and tools for cross-compiling Electron for ARM64 architecture on a Linux system.",
    "codeLanguage": "sh",
    "codeTokens": 66,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-18_snippet_6",
    "pageTitle": "Building Electron on Linux",
    "codeList": [
      {
        "language": "sh",
        "code": "$ sudo apt-get install libc6-dev-arm64-cross linux-libc-dev-arm64-cross \\\n                       g++-aarch64-linux-gnu"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Cloning and Opening Electron Quick Start for C++ Debugging",
    "codeDescription": "Shell commands to clone the electron-quick-start repository and open it in VSCode for native C++ debugging of the Electron codebase.",
    "codeLanguage": "sh",
    "codeTokens": 68,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/debugging-vscode.md#2025-04-18_snippet_2",
    "pageTitle": "Debugging Electron Applications in VSCode",
    "codeList": [
      {
        "language": "sh",
        "code": "$ git clone git@github.com:electron/electron-quick-start.git\n$ code electron-quick-start"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Accessing Unique Routing ID in Electron WebFrame",
    "codeDescription": "Retrieves the unique frame id for the current webFrame in the renderer process. Different WebFrame instances referring to the same underlying frame will have the same routingId.",
    "codeLanguage": "markdown",
    "codeTokens": 94,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/web-frame.md#2025-04-18_snippet_7",
    "pageTitle": "WebFrame API Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "### `webFrame.routingId` _Readonly_\n\nAn `Integer` representing the unique frame id in the current renderer process.\nDistinct WebFrame instances that refer to the same underlying frame will have\nthe same `routingId`."
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Committing Changes in Electron Development",
    "codeDescription": "Commands to stage changed files and create a commit in the Electron development process.",
    "codeLanguage": "sh",
    "codeTokens": 43,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/pull-requests.md#2025-04-18_snippet_2",
    "pageTitle": "Pull Request Guidelines for Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "$ git add my/changed/files\n$ git commit"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Setting Sheet Offset for macOS BrowserWindow",
    "codeDescription": "Demonstrates how to change the attachment point for sheets on macOS BrowserWindows. This is useful for displaying sheets beneath HTML-rendered toolbars.",
    "codeLanguage": "JavaScript",
    "codeTokens": 83,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/browser-window.md#2025-04-18_snippet_10",
    "pageTitle": "BrowserWindow Documentation - Electron Framework",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\nconst win = new BrowserWindow()\n\nconst toolbarRect = document.getElementById('toolbar').getBoundingClientRect()\nwin.setSheetOffset(toolbarRect.height)"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Accessing TouchBarSlider Properties",
    "codeDescription": "Example showing how to access and modify TouchBarSlider instance properties that control the slider's appearance and behavior.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/touch-bar-slider.md#2025-04-18_snippet_1",
    "pageTitle": "TouchBarSlider Class Documentation for Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Accessing and modifying slider properties\ntouchBarSlider.label = 'Volume';\ntouchBarSlider.value = 75;\ntouchBarSlider.minValue = 0;\ntouchBarSlider.maxValue = 100;"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Documenting Methods and Arguments in Electron API References",
    "codeDescription": "Template for documenting methods in Electron API references, showing the correct format for method signatures, required and optional parameters, and parameter descriptions with proper formatting.",
    "codeLanguage": "markdown",
    "codeTokens": 80,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/style-guide.md#2025-04-18_snippet_4",
    "pageTitle": "Electron Documentation Style Guide",
    "codeList": [
      {
        "language": "markdown",
        "code": "### `objectName.methodName(required[, optional]))`\n\n* `required` string - A parameter description.\n* `optional` Integer (optional) - Another parameter description.\n\n..."
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Dynamic Imports in Preload Scripts Without Context Isolation",
    "codeDescription": "This example shows that dynamic ESM imports of Node.js modules won't work in preload scripts without context isolation, as Chromium's import() function takes precedence.",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/esm.md#2025-04-18_snippet_3",
    "pageTitle": "ES Modules (ESM) in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "// ❌ these won't work without context isolation\nconst fs = await import('node:fs')\nawait import('./foo')"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Installing Electron with Verbose Output",
    "codeDescription": "This command installs Electron using npm with verbose output, useful for showing download progress on slower networks.",
    "codeLanguage": "sh",
    "codeTokens": 41,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/installation.md#2025-04-18_snippet_10",
    "pageTitle": "Advanced Installation Instructions for Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "npm install --verbose electron"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Using System Clang for Electron Build",
    "codeDescription": "GN command to generate build files for Electron using the system-installed clang compiler instead of the default downloaded binaries, by specifying the clang_base_path argument.",
    "codeLanguage": "sh",
    "codeTokens": 74,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-18_snippet_9",
    "pageTitle": "Building Electron on Linux",
    "codeList": [
      {
        "language": "sh",
        "code": "$ gn gen out/Testing --args='import(\"//electron/build/args/testing.gn\") clang_base_path = \"/usr/local/bin\"'"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Installing Dependencies on RHEL/CentOS for Electron Build",
    "codeDescription": "Command to install required development libraries and tools for building Electron on Red Hat Enterprise Linux or CentOS using the yum package manager.",
    "codeLanguage": "sh",
    "codeTokens": 103,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-18_snippet_2",
    "pageTitle": "Building Electron on Linux",
    "codeList": [
      {
        "language": "sh",
        "code": "$ sudo yum install clang dbus-devel gtk3-devel libnotify-devel \\\n                   libgnome-keyring-devel xorg-x11-server-utils libcap-devel \\\n                   cups-devel libXtst-devel alsa-lib-devel libXrandr-devel \\\n                   nss-devel python-dbusmock openjdk-8-jre"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Implementing Electron API Header File",
    "codeDescription": "Header file template for a new Electron API module, showing the required class structure with ObjectTemplateBuilder and Wrappable integration.",
    "codeLanguage": "cpp",
    "codeTokens": 190,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-18_snippet_1",
    "pageTitle": "Creating Electron Browser API Modules Guide",
    "codeList": [
      {
        "language": "cpp",
        "code": "#ifndef ELECTRON_SHELL_BROWSER_API_ELECTRON_API_{API_NAME}_H_\n#define ELECTRON_SHELL_BROWSER_API_ELECTRON_API_{API_NAME}_H_\n\n#include \"gin/handle.h\"\n#include \"gin/wrappable.h\"\n\nnamespace electron {\n\nnamespace api {\n\nclass ApiName : public gin::Wrappable<ApiName>  {\n public:\n  static gin::Handle<ApiName> Create(v8::Isolate* isolate);\n\n  // gin::Wrappable\n  static gin::WrapperInfo kWrapperInfo;\n  gin::ObjectTemplateBuilder GetObjectTemplateBuilder(\n      v8::Isolate* isolate) override;\n  const char* GetTypeName() override;\n} // namespace api\n} // namespace electron"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Documenting cleanup-release Script in Markdown",
    "codeDescription": "Describes the cleanup-release script which reverts a failed or unreleasable version by deleting the draft release and git tag if they exist.",
    "codeLanguage": "markdown",
    "codeTokens": 120,
    "codeId": "https://github.com/electron/electron/blob/main/script/release/bin/README.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Release Scripts Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "### `cleanup-release`\n\nThis script completely reverts a failed or otherwise unreleasable version. It does this by:\n\n* Deleting the draft release if it exists\n* Deleting the git tag if it exists\n\n> [!NOTE]\n> This is the only script / case where an existing tag will be deleted. Tags are only considered immutable after the release is published."
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "TypeScript Interface Definition for Process",
    "codeDescription": "TypeScript definition adding API type to the Process interface for Node integration.",
    "codeLanguage": "typescript",
    "codeTokens": 54,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-18_snippet_3",
    "pageTitle": "Creating Electron Browser API Modules Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface Process {\n    _linkedBinding(name: 'electron_browser_{api_name}'): Electron.ApiName;\n}"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Adding API History Block in Markdown",
    "codeDescription": "Shows how to create an API History block in markdown format, including deprecation and addition information.",
    "codeLanguage": "markdown",
    "codeTokens": 138,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-18_snippet_2",
    "pageTitle": "API History Migration Guide for Electron",
    "codeList": [
      {
        "language": "markdown",
        "code": "#### `win.getTrafficLightPosition()` _macOS_ _Deprecated_\n\n<!--\n```YAML history\ndeprecated:\n  - pr-url: https://github.com/electron/electron/pull/37878\n    breaking-changes-header: deprecated-browserwindowgettrafficlightposition\n```\n-->\n\nReturns `Point` - The custom position for the traffic light buttons in\nframeless window, `{ x: 0, y: 0 }` will be returned when there is no custom\nposition."
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Retrieving Native Handle for Image in Electron (macOS)",
    "codeDescription": "Gets a Buffer containing a C pointer to the underlying native handle of the image on macOS. Returns a pointer to an NSImage instance. The returned pointer is weak, so the associated nativeImage instance must be kept in memory.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/native-image.md#2025-04-18_snippet_4",
    "pageTitle": "NativeImage Module Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "image.getNativeHandle()"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Directory Structure for asar Archive on macOS",
    "codeDescription": "Shows the file structure when using an asar archive instead of an app folder on macOS. The app.asar file replaces the app folder in the Resources directory.",
    "codeLanguage": "plain",
    "codeTokens": 62,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/application-distribution.md#2025-04-18_snippet_2",
    "pageTitle": "Application Packaging in Electron",
    "codeList": [
      {
        "language": "plain",
        "code": "electron/Electron.app/Contents/Resources/\n└── app.asar"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Defining GPUFeatureStatus Object Properties in Markdown",
    "codeDescription": "This snippet lists the properties of the GPUFeatureStatus object, each representing a different GPU feature. The properties are of type string and include various graphical capabilities such as 2D canvas, Flash, video encoding/decoding, and WebGL.",
    "codeLanguage": "markdown",
    "codeTokens": 225,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/gpu-feature-status.md#2025-04-18_snippet_0",
    "pageTitle": "GPUFeatureStatus Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "* `2d_canvas` string - Canvas.\n* `flash_3d` string - Flash.\n* `flash_stage3d` string - Flash Stage3D.\n* `flash_stage3d_baseline` string - Flash Stage3D Baseline profile.\n* `gpu_compositing` string - Compositing.\n* `multiple_raster_threads` string - Multiple Raster Threads.\n* `native_gpu_memory_buffers` string - Native GpuMemoryBuffers.\n* `rasterization` string - Rasterization.\n* `video_decode` string - Video Decode.\n* `video_encode` string - Video Encode.\n* `vpx_decode` string - VPx Video Decode.\n* `webgl` string - WebGL.\n* `webgl2` string - WebGL2."
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Checking if Tray Icon is Destroyed in Electron",
    "codeDescription": "This method returns a boolean indicating whether the tray icon has been destroyed. It can be used to verify the icon's status before performing operations on it.",
    "codeLanguage": "javascript",
    "codeTokens": 50,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/tray.md#2025-04-18_snippet_6",
    "pageTitle": "Electron Tray API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "tray.isDestroyed()"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Creating Project Directory Structure",
    "codeDescription": "Commands to create the necessary directory structure for the native addon project.",
    "codeLanguage": "sh",
    "codeTokens": 38,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-18_snippet_5",
    "pageTitle": "Native Code Integration in Electron",
    "codeList": [
      {
        "language": "sh",
        "code": "mkdir src\nmkdir include\nmkdir js"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Building Commands",
    "codeDescription": "Shell commands for building and testing the native addon.",
    "codeLanguage": "shell",
    "codeTokens": 34,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-18_snippet_11",
    "pageTitle": "Native Code Integration in Electron",
    "codeList": [
      {
        "language": "shell",
        "code": "npm run build\nnode test.js"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Printing Stack Traces in C++ with Chromium",
    "codeDescription": "Code snippet showing how to use Chromium's helper to print stack traces to console without interrupting program execution. This aids in observing call chains and identifying potential issue areas.",
    "codeLanguage": "cpp",
    "codeTokens": 68,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/debugging.md#2025-04-18_snippet_1",
    "pageTitle": "Electron Debugging Guide",
    "codeList": [
      {
        "language": "cpp",
        "code": "#include \"base/debug/stack_trace.h\"\n...\nbase::debug::StackTrace().Print();"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "TypeScript Module List Integration",
    "codeDescription": "TypeScript code to add the API module to Electron's browser module list.",
    "codeLanguage": "typescript",
    "codeTokens": 65,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-18_snippet_6",
    "pageTitle": "Creating Electron Browser API Modules Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "export const browserModuleList: ElectronInternal.ModuleEntry[] = [\n  { name: 'apiName', loader: () => require('./api-name') },\n];"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Building Electron in Testing Configuration",
    "codeDescription": "Compiles Electron in testing configuration using the ninja build system, targeting the 'electron' build target.",
    "codeLanguage": "sh",
    "codeTokens": 44,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-gn.md#2025-04-18_snippet_10",
    "pageTitle": "Building Electron from Source",
    "codeList": [
      {
        "language": "sh",
        "code": "$ ninja -C out/Testing electron"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Configuring GN Build Files for Electron API Module",
    "codeDescription": "Demonstrates how to add API source files to Electron's build configuration in filenames.gni, including platform-specific implementations.",
    "codeLanguage": "cpp",
    "codeTokens": 142,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/creating-api.md#2025-04-18_snippet_0",
    "pageTitle": "Creating Electron Browser API Modules Guide",
    "codeList": [
      {
        "language": "cpp",
        "code": "lib_sources = [\n    \"path/to/api/api_name.cc\",\n    \"path/to/api/api_name.h\",\n]\n\nlib_sources_mac = [\n    \"path/to/api/api_name_mac.h\",\n    \"path/to/api/api_name_mac.mm\",\n]\n\nlib_sources_win = [\n    \"path/to/api/api_name_win.cc\",\n    \"path/to/api/api_name_win.h\",\n]\n\nlib_sources_linux = [\n    \"path/to/api/api_name_linux.cc\",\n    \"path/to/api/api_name_linux.h\",\n]"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Visual Studio 2017 Developer Command Prompt Environment Output",
    "codeDescription": "This batch output shows the environment initialization message for the Visual Studio 2017 Developer Command Prompt configured for ARM64 cross-compilation.",
    "codeLanguage": "batch",
    "codeTokens": 92,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/windows-arm.md#2025-04-18_snippet_2",
    "pageTitle": "Windows on ARM Support for Electron Apps",
    "codeList": [
      {
        "language": "batch",
        "code": "**********************************************************************\n** Visual Studio 2017 Developer Command Prompt v15.9.15\n** Copyright (c) 2017 Microsoft Corporation\n**********************************************************************\n[vcvarsall.bat] Environment initialized for: 'x64_arm64'"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Snapcraft configuration for existing Debian package",
    "codeDescription": "YAML configuration for creating a snap from an existing .deb file, including app details and dependencies.",
    "codeLanguage": "yaml",
    "codeTokens": 294,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/snapcraft.md#2025-04-18_snippet_6",
    "pageTitle": "Snapcraft Guide for Packaging Electron Applications on Linux",
    "codeList": [
      {
        "language": "yaml",
        "code": "name: myApp\nversion: '2.0.0'\nsummary: A little description for the app.\ndescription: |\n You know what? This app is amazing! It does all the things\n for you. Some say it keeps you young, maybe even happy.\n\ngrade: stable\nconfinement: classic\n\nparts:\n  slack:\n    plugin: dump\n    source: my-deb.deb\n    source-type: deb\n    after:\n      - desktop-gtk3\n    stage-packages:\n      - libasound2\n      - libnotify4\n      - libnspr4\n      - libnss3\n      - libpcre3\n      - libpulse0\n      - libxss1\n      - libxtst6\n  electron-launch:\n    plugin: dump\n    source: files/\n    prepare: |\n      chmod +x bin/electron-launch\n\napps:\n  myApp:\n    command: bin/electron-launch $SNAP/usr/lib/myApp/myApp\n    desktop: usr/share/applications/myApp.desktop\n    # Correct the TMPDIR path for Chromium Framework/Electron to ensure\n    # libappindicator has readable resources.\n    environment:\n      TMPDIR: $XDG_RUNTIME_DIR"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Using Git Blame to Find API Addition",
    "codeDescription": "Demonstrates how to use git blame and checkout to find when an API was originally added.",
    "codeLanguage": "bash",
    "codeTokens": 452,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/api-history-migration-guide.md#2025-04-18_snippet_5",
    "pageTitle": "API History Migration Guide for Electron",
    "codeList": [
      {
        "language": "bash",
        "code": "$ git checkout 1e206deec3e^\nHEAD is now at e8c87859c4 fix: showAboutPanel also on linux (#37828)\n\n$ grep -n \"getTrafficLightPosition\" docs/api/browser-window.md\n1867:#### `win.getTrafficLightPosition()` _macOS_ _Deprecated_\n\n$ git blame -L1867,1868 -- docs/api/browser-window.md\n0de1012280e (Cheng Zhao    2023-02-17 19:06:32 +0900 1867) #### `win.getTrafficLightPosition()` _macOS_ _Deprecated_\n3e2cec83d92 (Samuel Attard 2020-03-05 14:22:12 -0800 1868) \n\n$ git checkout 0de1012280e^\nHEAD is now at 0a5e634736 test: rename & split internal module tests (#37318)\n\n$ grep -n \"getTrafficLightPosition\" docs/api/browser-window.md \n1851:#### `win.getTrafficLightPosition()` _macOS_\n\n$ git blame -L1851,1852 -- docs/api/browser-window.md\n3e2cec83d92 (Samuel Attard 2020-03-05 14:22:12 -0800 1851) #### `win.getTrafficLightPosition()` _macOS_\n3e2cec83d92 (Samuel Attard 2020-03-05 14:22:12 -0800 1852)\n\n$ git checkout 3e2cec83d92^\nHEAD is now at 1811751c6c docs: clean up dark mode related docs (#22489)\n\n$ grep -n \"getTrafficLightPosition\" docs/api/browser-window.md\n(Nothing)\n\n$ git checkout 3e2cec83d92\nHEAD is now at 3e2cec83d9 feat: programmatically modify traffic light positioning (#22533)"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Using system-ui keyword with -electron-corner-smoothing CSS rule",
    "codeDescription": "This CSS snippet shows how to use the system-ui keyword with the corner smoothing rule to match the smoothness to the operating system's design language. On macOS it will use 60% smoothing, while on Windows and Linux it will use 0%.",
    "codeLanguage": "css",
    "codeTokens": 125,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/corner-smoothing-css.md#2025-04-18_snippet_1",
    "pageTitle": "CSS Rule: -electron-corner-smoothing in Electron",
    "codeList": [
      {
        "language": "css",
        "code": ".box {\n  width: 128px;\n  height: 128px;\n  background-color: cornflowerblue;\n  border-radius: 24px;\n  -electron-corner-smoothing: system-ui;  /* Match the system UI design. */\n}"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Electron Integration Example",
    "codeDescription": "Example of how to use the native addon within an Electron application's main process.",
    "codeLanguage": "javascript",
    "codeTokens": 54,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/native-code-and-electron.md#2025-04-18_snippet_13",
    "pageTitle": "Native Code Integration in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const myAddon = require('my-native-addon')\nconsole.log(myAddon.helloWorld('Electron'))"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Updating Git Remote for Electron Repository",
    "codeDescription": "Reconfigures the git remote for the electron repository to enable pushing/pulling from the official repository after initial checkout.",
    "codeLanguage": "sh",
    "codeTokens": 85,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-gn.md#2025-04-18_snippet_2",
    "pageTitle": "Building Electron from Source",
    "codeList": [
      {
        "language": "sh",
        "code": "$ cd src/electron\n$ git remote remove origin\n$ git remote add origin https://github.com/electron/electron\n$ git checkout main\n$ git branch --set-upstream-to=origin/main\n$ cd -"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Accessing NavigationHistory in Electron",
    "codeDescription": "Shows how to access the NavigationHistory instance from a WebContents object. The NavigationHistory is accessed via the navigationHistory property of the WebContents instance.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/navigation-history.md#2025-04-18_snippet_0",
    "pageTitle": "Navigation History API in Electron",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { BrowserWindow } = require('electron')\n\nconst mainWindow = new BrowserWindow()\nconst { navigationHistory } = mainWindow.webContents"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Importing Shared Texture Handle in Windows D3D11 for Electron",
    "codeDescription": "This code snippet shows how to import a shared texture handle in Windows using Direct3D 11. It opens the shared resource, extracts the texture description, and creates a staging texture for efficient copying.",
    "codeLanguage": "c++",
    "codeTokens": 323,
    "codeId": "https://github.com/electron/electron/blob/main/shell/browser/osr/README.md#2025-04-18_snippet_3",
    "pageTitle": "Offscreen Rendering in Electron",
    "codeList": [
      {
        "language": "c++",
        "code": "// Windows\nHANDLE handle = *reinterpret_cast<HANDLE*>(handleBufferData);\nMicrosoft::WRL::ComPtr<ID3D11Texture2D> shared_texture = nullptr;\nHRESULT hr = device1->OpenSharedResource1(handle, IID_PPV_ARGS(&shared_texture)); \n\n// Extract the texture description\nD3D11_TEXTURE2D_DESC desc;\nshared_texture->GetDesc(&desc);\n\n// Cache the staging texture if it does not exist or size has changed\nif (!cached_staging_texture || cached_width != desc.Width ||\n    cached_height != desc.Height) {\n  if (cached_staging_texture) {\n    cached_staging_texture->Release();\n  }\n\n  desc.CPUAccessFlags = D3D11_CPU_ACCESS_READ;\n  desc.Usage = D3D11_USAGE_STAGING;\n  desc.BindFlags = 0;\n  desc.MiscFlags = 0;\n\n  std::cout << \"Create staging Texture2D width=\" << desc.Width\n            << \" height=\" << desc.Height << std::endl;\n  hr = device->CreateTexture2D(&desc, nullptr, &cached_staging_texture);\n\n  cached_width = desc.Width;\n  cached_height = desc.Height;\n}\n\n// Copy to a intermediate texture\ncontext->CopyResource(cached_staging_texture.Get(), shared_texture.Get());"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Installing Dependencies on Ubuntu <20.04 for Electron Build",
    "codeDescription": "Command to install required development libraries and tools for building Electron on Ubuntu versions prior to 20.04. Includes the libgnome-keyring-dev package which is not used in newer versions.",
    "codeLanguage": "sh",
    "codeTokens": 138,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-linux.md#2025-04-18_snippet_1",
    "pageTitle": "Building Electron on Linux",
    "codeList": [
      {
        "language": "sh",
        "code": "$ sudo apt-get install build-essential clang libdbus-1-dev libgtk-3-dev \\\n                       libnotify-dev libgnome-keyring-dev \\\n                       libasound2-dev libcap-dev libcups2-dev libxtst-dev \\\n                       libxss1 libnss3-dev gcc-multilib g++-multilib curl \\\n                       gperf bison python-dbusmock openjdk-8-jre"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Running Code Linting Command in Electron",
    "codeDescription": "Command to run the linting tools that check for style issues using cpplint and eslint in the Electron project.",
    "codeLanguage": "bash",
    "codeTokens": 42,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/coding-style.md#2025-04-18_snippet_0",
    "pageTitle": "Electron Coding Style Guide",
    "codeList": [
      {
        "language": "bash",
        "code": "npm run lint"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Building Electron with Reclient and Autoninja",
    "codeDescription": "Command for building Electron using Reclient with autoninja, demonstrating the usage of increased concurrency (-j flag) for remote execution. Maximum concurrent jobs should not exceed 200 to prevent system abuse.",
    "codeLanguage": "bash",
    "codeTokens": 72,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/reclient.md#2025-04-18_snippet_0",
    "pageTitle": "Reclient Integration Guide for Electron Build System",
    "codeList": [
      {
        "language": "bash",
        "code": "autoninja -C out/Testing electron -j 200"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Configuring App Sandbox Entitlements in XML for Mac App Store",
    "codeDescription": "XML configuration for basic App Sandbox entitlements required for Mac App Store submission. Includes app sandbox activation and application group settings.",
    "codeLanguage": "xml",
    "codeTokens": 161,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#2025-04-18_snippet_0",
    "pageTitle": "Mac App Store Submission Guide for Electron Apps",
    "codeList": [
      {
        "language": "xml",
        "code": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>com.apple.security.app-sandbox</key>\n    <true/>\n    <key>com.apple.security.application-groups</key>\n    <array>\n      <string>TEAM_ID.your.bundle.id</string>\n    </array>\n  </dict>\n</plist>"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Example Electron Version Lifecycle (Plaintext)",
    "codeDescription": "Demonstrates the typical version progression for a major or minor Electron release, including beta versions and patch releases.",
    "codeLanguage": "plaintext",
    "codeTokens": 82,
    "codeId": "https://github.com/electron/electron/blob/main/docs/tutorial/electron-versioning.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Versioning Documentation",
    "codeList": [
      {
        "language": "plaintext",
        "code": "2.0.0-beta.1\n2.0.0-beta.2\n2.0.0-beta.3\n2.0.0\n2.0.1\n2.0.2"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Certificate Verification Error Example",
    "codeDescription": "This snippet demonstrates the error message encountered when certificates fail to verify during the build process, which can be resolved by installing the 'certifi' package.",
    "codeLanguage": "sh",
    "codeTokens": 291,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-macos.md#2025-04-18_snippet_2",
    "pageTitle": "Electron Build Instructions for macOS",
    "codeList": [
      {
        "language": "sh",
        "code": "________ running 'python3 src/tools/clang/scripts/update.py' in '/Users/<user>/electron'\nDownloading https://commondatastorage.googleapis.com/chromium-browser-clang/Mac_arm64/clang-llvmorg-15-init-15652-g89a99ec9-1.tgz\n<urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)>\nRetrying in 5 s ...\nDownloading https://commondatastorage.googleapis.com/chromium-browser-clang/Mac_arm64/clang-llvmorg-15-init-15652-g89a99ec9-1.tgz\n<urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)>\nRetrying in 10 s ...\nDownloading https://commondatastorage.googleapis.com/chromium-browser-clang/Mac_arm64/clang-llvmorg-15-init-15652-g89a99ec9-1.tgz\n<urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)>\nRetrying in 20 s ..."
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Defining CertificatePrincipal Object Properties in Markdown",
    "codeDescription": "This snippet outlines the properties of the CertificatePrincipal object, including common name, organizations, organization units, locality, state, and country. Each property is listed with its type and a brief description.",
    "codeLanguage": "markdown",
    "codeTokens": 122,
    "codeId": "https://github.com/electron/electron/blob/main/docs/api/structures/certificate-principal.md#2025-04-18_snippet_0",
    "pageTitle": "CertificatePrincipal Object Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "# CertificatePrincipal Object\n\n* `commonName` string - Common Name.\n* `organizations` string[] - Organization names.\n* `organizationUnits` string[] - Organization Unit names.\n* `locality` string - Locality.\n* `state` string - State or province.\n* `country` string - Country or region."
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Generating Release Build Configuration on Windows",
    "codeDescription": "Uses GN to generate the build configuration for a release build of Electron on Windows using either Command Prompt or PowerShell.",
    "codeLanguage": "bat",
    "codeTokens": 90,
    "codeId": "https://github.com/electron/electron/blob/main/docs/development/build-instructions-gn.md#2025-04-18_snippet_9",
    "pageTitle": "Building Electron from Source",
    "codeList": [
      {
        "language": "bat",
        "code": "# cmd\n$ gn gen out/Release --args=\"import(\\\"//electron/build/args/release.gn\\\")\"\n\n# PowerShell\n$ gn gen out/Release --args=\"import(\\`\"//electron/build/args/release.gn\\`\")\""
      }
    ],
    "relevance": 0.77
  }
]