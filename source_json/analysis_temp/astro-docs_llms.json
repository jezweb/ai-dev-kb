[
  {
    "codeTitle": "Generating Server-Side Routes from Astro Content Collections",
    "codeDescription": "Shows how to create dynamic routes for server-side rendering using getEntry() to fetch content on-demand.",
    "codeLanguage": "astro",
    "codeTokens": 166,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_20",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { getEntry, render } from \"astro:content\";\n// 1. Get the slug from the incoming server request\nconst { id } = Astro.params;\nif (id === undefined) {\n\treturn Astro.redirect(\"/404\");\n}\n// 2. Query for the entry directly using the request slug\nconst post = await getEntry(\"blog\", id);\n// 3. Redirect if the entry does not exist\nif (post === undefined) {\n\treturn Astro.redirect(\"/404\");\n}\n// 4. Render the entry to HTML in the template\nconst { Content } = await render(post);\n---\n<h1>{post.data.title}</h1>\n<Content />"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Component Composition Example",
    "codeDescription": "Shows how to compose components by using one component inside another. This example uses a Button component inside a ButtonGroup component, demonstrating component reusability.",
    "codeLanguage": "astro",
    "codeTokens": 84,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_3",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Button from './Button.astro';\n---\n<div>\n  <Button title=\"Button 1\" />\n  <Button title=\"Button 2\" />\n  <Button title=\"Button 3\" />\n</div>"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Component Props Definition and Usage",
    "codeDescription": "Shows how to define and access props in an Astro component using the Astro.props global object. Props allow passing data to components making them reusable with different inputs.",
    "codeLanguage": "astro",
    "codeTokens": 93,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_4",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/components/GreetingHeadline.astro\n// Usage: <GreetingHeadline greeting=\"Howdy\" name=\"Partner\" />\nconst { greeting, name } = Astro.props;\n---\n<h2>{greeting}, {name}!</h2>"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Configuring Astro for Deno",
    "codeDescription": "Configuration changes required in astro.config.mjs to enable Deno adapter and server output",
    "codeLanguage": "javascript",
    "codeTokens": 75,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/deploy/deno.mdx#2025-04-08_snippet_1",
    "pageTitle": "Deploying Astro Sites with Deno",
    "codeList": [
      {
        "language": "javascript",
        "code": "// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport deno from '@deno/astro-adapter';\n\nexport default defineConfig({\n  output: 'server',\n  adapter: deno(),\n});"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Component Composition Example",
    "codeDescription": "Shows how to compose components by using one component inside another. This example uses a Button component inside a ButtonGroup component, demonstrating component reusability.",
    "codeLanguage": "astro",
    "codeTokens": 84,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_3",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Button from './Button.astro';\n---\n<div>\n  <Button title=\"Button 1\" />\n  <Button title=\"Button 2\" />\n  <Button title=\"Button 3\" />\n</div>"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Component Props Definition and Usage",
    "codeDescription": "Shows how to define and access props in an Astro component using the Astro.props global object. Props allow passing data to components making them reusable with different inputs.",
    "codeLanguage": "astro",
    "codeTokens": 93,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_4",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/components/GreetingHeadline.astro\n// Usage: <GreetingHeadline greeting=\"Howdy\" name=\"Partner\" />\nconst { greeting, name } = Astro.props;\n---\n<h2>{greeting}, {name}!</h2>"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Implementing Form Submission Handler in React",
    "codeDescription": "An enhanced React form component with a submit handler function that prevents default form submission, creates a FormData object from the form, sends it to the API endpoint using fetch, and displays the response message from the server.",
    "codeLanguage": "tsx",
    "codeTokens": 312,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/build-forms-api.mdx#2025-04-08_snippet_8",
    "pageTitle": "Building Forms with API Routes in Astro",
    "codeList": [
      {
        "language": "tsx",
        "code": "import { useState } from \"react\";\nimport type { FormEvent } from \"react\";\n\nexport default function Form() {\n  const [responseMessage, setResponseMessage] = useState(\"\");\n\n  async function submit(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    const response = await fetch(\"/api/feedback\", {\n      method: \"POST\",\n      body: formData,\n    });\n    const data = await response.json();\n    if (data.message) {\n      setResponseMessage(data.message);\n    }\n  }\n\n  return (\n    <form onSubmit={submit}>\n      <label htmlFor=\"name\">\n        Name\n        <input type=\"text\" id=\"name\" name=\"name\" autoComplete=\"name\" required />\n      </label>\n      <label htmlFor=\"email\">\n        Email\n        <input type=\"email\" id=\"email\" name=\"email\" autoComplete=\"email\" required />\n      </label>\n      <label htmlFor=\"message\">\n        Message\n        <textarea id=\"message\" name=\"message\" autoComplete=\"off\" required />\n      </label>\n      <button>Send</button>\n      {responseMessage && <p>{responseMessage}</p>}\n    </form>\n  );\n}"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Filtering Collection Entries in Astro",
    "codeDescription": "Demonstrates how to use getCollection() to filter content entries based on properties like 'draft' status or nested directories.",
    "codeLanguage": "javascript",
    "codeTokens": 70,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_17",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { getCollection } from 'astro:content';\nconst publishedBlogEntries = await getCollection('blog', ({ data }) => {\n  return data.draft !== true;\n});"
      },
      {
        "language": "javascript",
        "code": "import { getCollection } from 'astro:content';\nconst blogEntries = await getCollection('blog', ({ data }) => {\n  return import.meta.env.PROD ? data.draft !== true : true;\n});"
      },
      {
        "language": "javascript",
        "code": "import { getCollection } from 'astro:content';\nconst englishDocsEntries = await getCollection('docs', ({ id }) => {\n  return id.startsWith('en/');\n});"
      }
    ],
    "relevance": 0.993
  },
  {
    "codeTitle": "Basic Middleware Implementation in JavaScript",
    "codeDescription": "Demonstrates how to create a basic middleware function in Astro using JavaScript. The function intercepts requests, modifies the locals object, and returns the result of calling next().",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/middleware.mdx#2025-04-08_snippet_0",
    "pageTitle": "Implementing Middleware in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "export function onRequest (context, next) {\n    // intercept data from a request\n    // optionally, modify the properties in `locals`\n    context.locals.title = \"New title\";\n\n    // return a Response or the result of calling `next()`\n    return next();\n};"
      }
    ],
    "relevance": 0.992
  },
  {
    "codeTitle": "Fetching Data in Astro Component",
    "codeDescription": "Demonstrates fetching user data from an API endpoint and passing it to child components. Shows how to use top-level await with fetch and handle JSON responses in Astro components.",
    "codeLanguage": "astro",
    "codeTokens": 169,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/data-fetching.mdx#2025-04-08_snippet_0",
    "pageTitle": "Data Fetching in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/components/User.astro\nimport Contact from \"../components/Contact.jsx\";\nimport Location from \"../components/Location.astro\";\n\nconst response = await fetch(\"https://randomuser.me/api/\");\nconst data = await response.json();\nconst randomUser = data.results[0];\n---\n<!-- Data fetched at build can be rendered in HTML -->\n<h1>User</h1>\n<h2>{randomUser.name.first} {randomUser.name.last}</h2>\n\n<!-- Data fetched at build can be passed to components as props -->\n<Contact client:load email={randomUser.email} />\n<Location city={randomUser.location.city} />"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Installing Deno Adapter with Package Managers",
    "codeDescription": "Commands for installing the Deno adapter using different package managers (npm, pnpm, yarn)",
    "codeLanguage": "shell",
    "codeTokens": 41,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/deploy/deno.mdx#2025-04-08_snippet_0",
    "pageTitle": "Deploying Astro Sites with Deno",
    "codeList": [
      {
        "language": "shell",
        "code": "npm install @deno/astro-adapter"
      },
      {
        "language": "shell",
        "code": "pnpm install @deno/astro-adapter"
      },
      {
        "language": "shell",
        "code": "yarn add @deno/astro-adapter"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Fetching Data in Astro Component",
    "codeDescription": "Demonstrates fetching user data from an API endpoint and passing it to child components. Shows how to use top-level await with fetch and handle JSON responses in Astro components.",
    "codeLanguage": "astro",
    "codeTokens": 169,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/data-fetching.mdx#2025-04-08_snippet_0",
    "pageTitle": "Data Fetching in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/components/User.astro\nimport Contact from \"../components/Contact.jsx\";\nimport Location from \"../components/Location.astro\";\n\nconst response = await fetch(\"https://randomuser.me/api/\");\nconst data = await response.json();\nconst randomUser = data.results[0];\n---\n<!-- Data fetched at build can be rendered in HTML -->\n<h1>User</h1>\n<h2>{randomUser.name.first} {randomUser.name.last}</h2>\n\n<!-- Data fetched at build can be passed to components as props -->\n<Contact client:load email={randomUser.email} />\n<Location city={randomUser.location.city} />"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Implementing Feedback Form Component in Vue",
    "codeDescription": "A Vue component implementing a feedback form that submits data to a server endpoint. It includes form elements for name, email, and message, with a submit handler that prevents default form submission, collects form data, and displays a response message from the server.",
    "codeLanguage": "vue",
    "codeTokens": 275,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/build-forms-api.mdx#2025-04-08_snippet_11",
    "pageTitle": "Building Forms with API Routes in Astro",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\nimport { ref } from \"vue\";\n\nconst responseMessage = ref<string>();\n\nasync function submit(e: Event) {\n  e.preventDefault();\n  const formData = new FormData(e.currentTarget as HTMLFormElement);\n  const response = await fetch(\"/api/feedback\", {\n    method: \"POST\",\n    body: formData,\n  });\n  const data = await response.json();\n  responseMessage.value = data.message;\n}\n</script>\n\n<template>\n  <form @submit=\"submit\">\n    <label>\n      Name\n      <input type=\"text\" id=\"name\" name=\"name\" required />\n    </label>\n    <label>\n      Email\n      <input type=\"email\" id=\"email\" name=\"email\" required />\n    </label>\n    <label>\n      Message\n      <textarea id=\"message\" name=\"message\" required />\n    </label>\n    <button>Send</button>\n    <p v-if=\"responseMessage\">{{ responseMessage }}</p>\n  </form>\n</template>"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "GraphQL Query in Astro Component",
    "codeDescription": "Demonstrates making a GraphQL query to fetch Star Wars film data using fetch API with POST method. Shows how to handle query variables and response parsing.",
    "codeLanguage": "astro",
    "codeTokens": 203,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/data-fetching.mdx#2025-04-08_snippet_2",
    "pageTitle": "Data Fetching in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst response = await fetch(\n  \"https://swapi-graphql.netlify.app/.netlify/functions/index\",\n  {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `\n        query getFilm ($id:ID!) {\n          film(id: $id) {\n            title\n            releaseDate\n          }\n        }\n      `,\n      variables: {\n        id: \"ZmlsbXM6MQ==\",\n      },\n    }),\n  }\n);\n\n\nconst json = await response.json();\nconst { film } = json.data;\n---\n<h1>Fetching information about Star Wars: A New Hope</h1>\n<h2>Title: {film.title}</h2>\n<p>Year: {film.releaseDate}</p>"
      }
    ],
    "relevance": 0.987
  },
  {
    "codeTitle": "Accessing Props from getStaticPaths in Astro Routes",
    "codeDescription": "Demonstrates how to access props data passed from getStaticPaths when generating static routes in Astro. Shows usage in both .astro files and API endpoints.",
    "codeLanguage": "astro",
    "codeTokens": 136,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_1",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport function getStaticPaths() {\n  return [\n    { params: { id: '1' }, props: { author: 'Blu' } },\n    { params: { id: '2' }, props: { author: 'Erika' } },\n    { params: { id: '3' }, props: { author: 'Matthew' } }\n  ];\n}\n\nconst { id } = Astro.params;\nconst { author } = Astro.props;\n---"
      },
      {
        "language": "typescript",
        "code": "import type { APIContext } from 'astro';\n\nexport function getStaticPaths() {\n  return [\n    { params: { id: '1' }, props: { author: 'Blu' } },\n    { params: { id: '2' }, props: { author: 'Erika' } },\n    { params: { id: '3' }, props: { author: 'Matthew' } }\n  ];\n}\n\nexport function GET({ props }: APIContext) {\n  return new Response(\n    JSON.stringify({ author: props.author }),\n  );\n}"
      }
    ],
    "relevance": 0.987
  },
  {
    "codeTitle": "Rendering Markdown Content in Astro Templates",
    "codeDescription": "Shows how to render Markdown or MDX content in an Astro template using the render() function, which provides a Content component and heading metadata.",
    "codeLanguage": "astro",
    "codeTokens": 122,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_14",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { getEntry, render } from 'astro:content';\n\nconst entry = await getEntry('blog', 'post-1');\nif (!entry) {\n  // Handle Error, for example:\n  throw new Error('Could not find blog post 1');\n}\nconst { Content, headings } = await render(entry);\n---\n<p>Published on: {entry.data.published.toDateString()}</p>\n<Content />"
      }
    ],
    "relevance": 0.987
  },
  {
    "codeTitle": "Adding Tag Index to Navigation in Astro",
    "codeDescription": "Updates the site navigation component to include a link to the newly created tag index page, making it accessible from other pages in the website.",
    "codeLanguage": "astro",
    "codeTokens": 75,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/5-astro-api/3.mdx#2025-04-08_snippet_9",
    "pageTitle": "Building a Tag Index Page in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "<a href=\"/\">Home</a>\n<a href=\"/about/\">About</a>\n<a href=\"/blog/\">Blog</a>\n<a href=\"/tags/\">Tags</a>"
      }
    ],
    "relevance": 0.987
  },
  {
    "codeTitle": "Defining Astro File Interface in TypeScript",
    "codeDescription": "This snippet defines the TypeScript interface for Astro files, including properties for file path, URL, and the default AstroComponentFactory.",
    "codeLanguage": "typescript",
    "codeTokens": 84,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_28",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export interface AstroInstance {\n  /* The file path of this file */\n  file: string;\n  /* The URL for this file (if it is in the pages directory) */\n\turl: string | undefined;\n\tdefault: AstroComponentFactory;\n}"
      }
    ],
    "relevance": 0.987
  },
  {
    "codeTitle": "Using Custom Shiki Theme in Astro Configuration",
    "codeDescription": "This snippet shows how to import and use a custom Shiki theme file in the Astro configuration for syntax highlighting.",
    "codeLanguage": "javascript",
    "codeTokens": 85,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/pt-br/guides/markdown-content.mdx#2025-04-08_snippet_5",
    "pageTitle": "Markdown Configuration and Syntax Highlighting in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from 'astro/config';\nimport temaCustomizado from './meu-tema-shiki.json';\n\nexport default defineConfig({\n  markdown: {\n    shikiConfig: { theme: temaCustomizado },\n  },\n});"
      }
    ],
    "relevance": 0.987
  },
  {
    "codeTitle": "Accessing Environment Variables in Astro Components",
    "codeDescription": "This code snippet shows how to access environment variables in Astro components using import.meta.env, demonstrating both server-only and public variables in different contexts.",
    "codeLanguage": "javascript",
    "codeTokens": 91,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/environment-variables.mdx#2025-04-08_snippet_10",
    "pageTitle": "Using Environment Variables in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "// When import.meta.env.SSR === true\nconst data = await db(import.meta.env.DB_PASSWORD);\n\n// When import.meta.env.SSR === false\nconst data = fetch(`${import.meta.env.PUBLIC_POKEAPI}/pokemon/squirtle`);"
      }
    ],
    "relevance": 0.987
  },
  {
    "codeTitle": "Rendering Content Collection Entries with render() Function",
    "codeDescription": "Shows how to use the render() function to compile a collection entry for rendering in an Astro component. This provides access to the Content component, headings, and modified frontmatter.",
    "codeLanguage": "astro",
    "codeTokens": 119,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-content.mdx#2025-04-08_snippet_6",
    "pageTitle": "Content Collections API Reference for Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { getEntry, render } from 'astro:content';\nconst entry = await getEntry('blog', 'entry-1');\n\nif (!entry) {\n   // Handle Error, for example:\n  throw new Error('Could not find blog post 1');\n}\nconst { Content, headings, remarkPluginFrontmatter } = await render(entry);\n---"
      }
    ],
    "relevance": 0.987
  },
  {
    "codeTitle": "Complete SSR Blog Post Page with Error Handling",
    "codeDescription": "This is a complete implementation of a server-side rendered blog post page in Astro. It fetches the post by slug, handles errors, processes the data, and renders the post with optional chaining for safety.",
    "codeLanguage": "astro",
    "codeTokens": 278,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/contentful.mdx#2025-04-08_snippet_13",
    "pageTitle": "Integrating Contentful CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Layout from \"../../layouts/Layout.astro\";\nimport { contentfulClient } from \"../../lib/contentful\";\nimport { documentToHtmlString } from \"@contentful/rich-text-html-renderer\";\nimport type { BlogPost } from \"../../lib/contentful\";\n\nlet post;\nconst { slug } = Astro.params;\ntry {\n  const data = await contentfulClient.getEntries<BlogPost>({\n    content_type: \"blogPost\",\n    \"fields.slug\": slug,\n  });\n  const { title, date, content } = data.items[0].fields;\n  post = {\n    title,\n    date: new Date(date).toLocaleDateString(),\n    content: documentToHtmlString(content),\n  };\n} catch (error) {\n  return Astro.redirect(\"/404\");\n}\n---\n<html lang=\"en\">\n  <head>\n    <title>{post?.title}</title>\n  </head>\n  <body>\n    <h1>{post?.title}</h1>\n    <time>{post?.date}</time>\n    <article set:html={post?.content} />\n  </body>\n</html>"
      }
    ],
    "relevance": 0.987
  },
  {
    "codeTitle": "GraphQL Query in Astro Component",
    "codeDescription": "Demonstrates making a GraphQL query to fetch Star Wars film data using fetch API with POST method. Shows how to handle query variables and response parsing.",
    "codeLanguage": "astro",
    "codeTokens": 203,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/data-fetching.mdx#2025-04-08_snippet_2",
    "pageTitle": "Data Fetching in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst response = await fetch(\n  \"https://swapi-graphql.netlify.app/.netlify/functions/index\",\n  {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      query: `\n        query getFilm ($id:ID!) {\n          film(id: $id) {\n            title\n            releaseDate\n          }\n        }\n      `,\n      variables: {\n        id: \"ZmlsbXM6MQ==\",\n      },\n    }),\n  }\n);\n\n\nconst json = await response.json();\nconst { film } = json.data;\n---\n<h1>Fetching information about Star Wars: A New Hope</h1>\n<h2>Title: {film.title}</h2>\n<p>Year: {film.releaseDate}</p>"
      }
    ],
    "relevance": 0.987
  },
  {
    "codeTitle": "Zod Schema Types Cheatsheet for Astro Content Collections",
    "codeDescription": "Example demonstrating various Zod data types that can be used when defining content collection schemas in Astro, including primitives, transforms, and validation.",
    "codeLanguage": "typescript",
    "codeTokens": 246,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_8",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// Example: A cheatsheet of many common Zod datatypes\nimport { z, defineCollection } from 'astro:content';\n\ndefineCollection({\n  schema: z.object({\n    isDraft: z.boolean(),\n    title: z.string(),\n    sortOrder: z.number(),\n    image: z.object({\n      src: z.string(),\n      alt: z.string(),\n    }),\n    author: z.string().default('Anonymous'),\n    language: z.enum(['en', 'es']),\n    tags: z.array(z.string()),\n    footnote: z.string().optional(),\n\n    // In YAML, dates written without quotes around them are interpreted as Date objects\n    publishDate: z.date(), // e.g. 2024-09-17\n\n    // Transform a date string (e.g. \"2022-07-08\") to a Date object\n    updatedDate: z.string().transform((str) => new Date(str)),\n\n    authorContact: z.string().email(),\n    canonicalURL: z.string().url(),\n  })\n})"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Importing Multiple Files with import.meta.glob() in Astro",
    "codeDescription": "Example of using Vite's import.meta.glob() to import all Markdown files from a directory with eager loading. The snippet demonstrates importing blog posts and rendering articles from their frontmatter.",
    "codeLanguage": "astro",
    "codeTokens": 171,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/imports.mdx#2025-04-08_snippet_9",
    "pageTitle": "Imports Reference in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// imports all files that end with `.md` in `./src/pages/post/`\nconst matches = import.meta.glob('../pages/post/*.md', { eager: true }); \nconst posts = Object.values(matches);\n---\n<!-- Renders an <article> for the first 5 blog posts -->\n<div>\n{posts.slice(0, 4).map((post) => (\n  <article>\n    <h2>{post.frontmatter.title}</h2>\n    <p>{post.frontmatter.description}</p>\n    <a href={post.url}>Read more</a>\n  </article>\n))}\n</div>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Configuring TypeScript for Content Collections in Astro",
    "codeDescription": "Required TypeScript configuration in tsconfig.json to enable Zod validation, Intellisense, and type checking for content collections. Includes required compiler options for Astro content collections.",
    "codeLanguage": "json",
    "codeTokens": 117,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  // Included with \"astro/tsconfigs/strict\" or \"astro/tsconfigs/strictest\"\n  \"extends\": \"astro/tsconfigs/base\",\n  \"compilerOptions\": {\n    \"strictNullChecks\": true, // add if using `base` template\n    \"allowJs\": true // required, and included with all Astro templates\n  }\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Using Image Component in Astro Files",
    "codeDescription": "Examples of using the Image component from astro:assets to display local, public folder, and remote images with optimization. Also shows how to use standard HTML img tags as an alternative.",
    "codeLanguage": "astro",
    "codeTokens": 199,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/images.mdx#2025-04-08_snippet_0",
    "pageTitle": "Using Images in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { Image } from 'astro:assets';\nimport localBirdImage from '../../images/subfolder/localBirdImage.png';\n---\n<Image src={localBirdImage} alt=\"A bird sitting on a nest of eggs.\" />\n<Image src=\"/images/bird-in-public-folder.jpg\" alt=\"A bird.\" width=\"50\" height=\"50\" />\n<Image src=\"https://example.com/remote-bird.jpg\" alt=\"A bird.\" width=\"50\" height=\"50\" />\n\n<img src={localBirdImage.src} alt=\"A bird sitting on a nest of eggs.\">\n<img src=\"/images/bird-in-public-folder.jpg\" alt=\"A bird.\">\n<img src=\"https://example.com/remote-bird.jpg\" alt=\"A bird.\">"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Mapping Astro Components to ApostropheCMS Page Types",
    "codeDescription": "This JavaScript file maps Astro components to their corresponding ApostropheCMS page types, including the home page, blog index page, and blog show page.",
    "codeLanguage": "javascript",
    "codeTokens": 125,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/cms/apostrophecms.mdx#2025-04-08_snippet_15",
    "pageTitle": "Integrating ApostropheCMS with Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import HomePage from './HomePage.astro';\nimport BlogIndexPage from './BlogIndexPage.astro';\nimport BlogShowPage from './BlogShowPage.astro';\n\nconst templateComponents = {\n  '@apostrophecms/home-page': HomePage,\n  '@apostrophecms/blog-page:index': BlogIndexPage,\n  '@apostrophecms/blog-page:show': BlogShowPage\n};\n\nexport default templateComponents;"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Defining Content Collections with Schemas in TypeScript",
    "codeDescription": "Example showing how to define content collections with schema validation using Zod in an Astro project, including both blog posts and JSON data sources.",
    "codeLanguage": "typescript",
    "codeTokens": 190,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_7",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineCollection, z } from 'astro:content';\nimport { glob, file } from 'astro/loaders'; // Not available with legacy API\n\nconst blog = defineCollection({\n  loader: glob({ pattern: \"**/*.md\", base: \"./src/data/blog\" }),\n  schema: z.object({\n    title: z.string(),\n    description: z.string(),\n    pubDate: z.coerce.date(),\n    updatedDate: z.coerce.date().optional(),\n  })\n});\nconst dogs = defineCollection({\n  loader: file(\"src/data/dogs.json\"),\n  schema: z.object({\n    id: z.string(),\n    breed: z.string(),\n    temperament: z.array(z.string()),\n  }),\n});\n\nexport const collections = { blog, dogs };"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Processing Nested JSON Documents in Astro Content Collections",
    "codeDescription": "Demonstrates how to extract multiple collections from a single nested JSON document by using custom parser functions with the file() loader.",
    "codeLanguage": "typescript",
    "codeTokens": 96,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_4",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const dogs = defineCollection({\n  loader: file(\"src/data/pets.json\", { parser: (text) => JSON.parse(text).dogs })\n});\nconst cats = defineCollection({\n  loader: file(\"src/data/pets.json\", { parser: (text) => JSON.parse(text).cats })\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Configuring TypeScript IntelliSense for Environment Variables in Astro",
    "codeDescription": "This snippet shows how to create an env.d.ts file to provide TypeScript IntelliSense for custom environment variables. It defines interfaces for ImportMetaEnv and ImportMeta to properly type environment variables.",
    "codeLanguage": "typescript",
    "codeTokens": 89,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/environment-variables.mdx#2025-04-08_snippet_0",
    "pageTitle": "Using Environment Variables in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ImportMetaEnv {\n  readonly DB_PASSWORD: string;\n  readonly PUBLIC_POKEAPI: string;\n  // more env variables...\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Mounting Better Auth handler in Astro",
    "codeDescription": "Setting up the Better Auth handler in an Astro API route.",
    "codeLanguage": "typescript",
    "codeTokens": 68,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/authentication.mdx#2025-04-08_snippet_8",
    "pageTitle": "Authentication in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { auth } from \"../../../lib/auth\"; // import your Better Auth instance\nimport type { APIRoute } from \"astro\";\n \nexport const ALL: APIRoute = async (ctx) => {\n\treturn auth.handler(ctx.request);\n};"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Importing Astro Components in Markdown",
    "codeDescription": "Example of importing Astro components (Checklist and Box) at the beginning of an Astro markdown file. These components are used throughout the tutorial pages to enhance the learning experience.",
    "codeLanguage": "jsx",
    "codeTokens": 66,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/0-introduction/1.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Blog Tutorial Introduction",
    "codeList": [
      {
        "language": "jsx",
        "code": "import Checklist from '~/components/Checklist.astro';\nimport Box from '~/components/tutorial/Box.astro';"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Retrieving Single Entries with getEntry in Astro Components",
    "codeDescription": "Shows how to use getEntry() to retrieve individual content entries by collection name and ID. Demonstrates fetching content and referenced entries from multiple collections.",
    "codeLanguage": "astro",
    "codeTokens": 134,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-content.mdx#2025-04-08_snippet_4",
    "pageTitle": "Content Collections API Reference for Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { getEntry } from 'astro:content';\n\n// Get `src/content/blog/enterprise.md`\nconst enterprisePost = await getEntry('blog', 'enterprise');\n\n// Get `src/content/captains/picard.json`\nconst picardProfile = await getEntry('captains', 'picard');\n\n// Get the profile referenced by `data.captain`\nconst enterpriseCaptainProfile = await getEntry(enterprisePost.data.captain);\n---"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Processing Nested JSON Documents in Astro Content Collections",
    "codeDescription": "Demonstrates how to extract multiple collections from a single nested JSON document by using custom parser functions with the file() loader.",
    "codeLanguage": "typescript",
    "codeTokens": 96,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_4",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const dogs = defineCollection({\n  loader: file(\"src/data/pets.json\", { parser: (text) => JSON.parse(text).dogs })\n});\nconst cats = defineCollection({\n  loader: file(\"src/data/pets.json\", { parser: (text) => JSON.parse(text).cats })\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Executing Actions with Astro.callAction()",
    "codeDescription": "Example showing how to call an action from an Astro component script using Astro.callAction(). The code demonstrates searching for products using a query parameter from the URL and handling the response data. The action returns data and error objects similar to client-side action calls.",
    "codeLanguage": "astro",
    "codeTokens": 121,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#2025-04-08_snippet_25",
    "pageTitle": "Astro Actions: Type-safe Server Functions",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { actions } from 'astro:actions';\n\nconst searchQuery = Astro.url.searchParams.get('search');\nif (searchQuery) {\n  const { data, error } = await Astro.callAction(actions.findProduct, { query: searchQuery });\n  // handle result\n}\n---"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Configuring View Transitions in Astro HTML Template",
    "codeDescription": "Demonstrates how to set up view transitions in an Astro HTML template, including disabling default animations for the entire page and enabling a slide animation for the main content.",
    "codeLanguage": "astro",
    "codeTokens": 132,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/view-transitions.mdx#2025-04-08_snippet_0",
    "pageTitle": "Implementing View Transitions in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport CommonHead from '../components/CommonHead.astro';\n---\n\n<html transition:animate=\"none\">\n  <head>\n    <CommonHead />\n  </head>\n  <body>\n    <header>\n      ...\n    </header>\n    <!-- Anula la configuración predeterminada de tu página en un solo elemento -->\n    <main transition:animate=\"slide\">\n      ...\n    </main>\n  </body>\n</html>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Implementing Pagination with Astro's paginate() Function",
    "codeDescription": "Shows how to use the `paginate()` helper function with `getStaticPaths()` to create paginated collections, fetching data and automatically generating the necessary pages with appropriate props.",
    "codeLanguage": "astro",
    "codeTokens": 141,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/routing-reference.mdx#2025-04-08_snippet_6",
    "pageTitle": "Astro Routing Reference Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport async function getStaticPaths({ paginate }) {\n  // Load your data with fetch(), getCollection(), etc.\n  const response = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=150`);\n  const result = await response.json();\n  const allPokemon = result.results;\n\n  // Return a paginated collection of paths for all items\n  return paginate(allPokemon, { pageSize: 10 });\n}\n\nconst { page } = Astro.props;\n---"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Processing Nested JSON Documents in Astro Content Collections",
    "codeDescription": "Demonstrates how to extract multiple collections from a single nested JSON document by using custom parser functions with the file() loader.",
    "codeLanguage": "typescript",
    "codeTokens": 96,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_4",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const dogs = defineCollection({\n  loader: file(\"src/data/pets.json\", { parser: (text) => JSON.parse(text).dogs })\n});\nconst cats = defineCollection({\n  loader: file(\"src/data/pets.json\", { parser: (text) => JSON.parse(text).cats })\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Component Template with Dynamic Content and Directives",
    "codeDescription": "Demonstrates Astro's component template syntax including JavaScript expressions, component imports, and Astro directives. Shows how to render dynamic content using data from the component script.",
    "codeLanguage": "astro",
    "codeTokens": 280,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_2",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// Your component script here!\nimport Banner from '../components/Banner.astro';\nimport Avatar from '../components/Avatar.astro';\nimport ReactPokemonComponent from '../components/ReactPokemonComponent.jsx';\nconst myFavoritePokemon = [/* ... */];\nconst { title } = Astro.props;\n---\n<!-- HTML comments supported! -->\n{/* JS comment syntax is also valid! */}\n\n<Banner />\n<h1>Hello, world!</h1>\n\n<!-- Use props and other variables from the component script: -->\n<p>{title}</p>\n\n<!-- Delay component rendering and provide fallback loading content: -->\n<Avatar server:defer>\n  <svg slot=\"fallback\" class=\"generic-avatar\" transition:name=\"avatar\">...</svg>\n</Avatar>\n\n<!-- Include other UI framework components with a `client:` directive to hydrate: -->\n<ReactPokemonComponent client:visible />\n\n<!-- Mix HTML with JavaScript expressions, similar to JSX: -->\n<ul>\n  {myFavoritePokemon.map((data) => <li>{data.name}</li>)}\n</ul>\n\n<!-- Use a template directive to build class names from multiple strings or even objects! -->\n<p class:list={[\"add\", \"dynamic\", { classNames: true }]} />"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Using a Component with Slot Content",
    "codeDescription": "Shows how to pass child elements to a component that uses slots. The child elements will be rendered where the <slot /> element is placed in the parent component.",
    "codeLanguage": "astro",
    "codeTokens": 96,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_9",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/pages/fred.astro\nimport Wrapper from '../components/Wrapper.astro';\n---\n<Wrapper title=\"Fred's Page\">\n  <h2>All about Fred</h2>\n  <p>Here is some stuff about Fred.</p>\n</Wrapper>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Using Named Slots in Astro Components",
    "codeDescription": "Shows how to inject HTML content into specific named slots using the 'slot' attribute on child elements. Content without a slot attribute is automatically placed in the default (unnamed) slot.",
    "codeLanguage": "astro",
    "codeTokens": 135,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_11",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/pages/fred.astro\nimport Wrapper from '../components/Wrapper.astro';\n---\n<Wrapper title=\"Fred's Page\">\n  <img src=\"https://my.photo/fred.jpg\" slot=\"after-header\" />\n  <h2>All about Fred</h2>\n  <p>Here is some stuff about Fred.</p>\n  <p slot=\"after-footer\">Copyright 2022</p>\n</Wrapper>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Creating a Basic Feedback Form Component in Solid",
    "codeDescription": "A SolidJS component that renders a feedback form with fields for name, email, and message. Each input has the required attribute and appropriate name attributes to match the API endpoint's expected data structure.",
    "codeLanguage": "tsx",
    "codeTokens": 160,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/build-forms-api.mdx#2025-04-08_snippet_4",
    "pageTitle": "Building Forms with API Routes in Astro",
    "codeList": [
      {
        "language": "tsx",
        "code": "export default function Form() {\n  return (\n    <form>\n      <label>\n        Name\n        <input type=\"text\" id=\"name\" name=\"name\" required />\n      </label>\n      <label>\n        Email\n        <input type=\"email\" id=\"email\" name=\"email\" required />\n      </label>\n      <label>\n        Message\n        <textarea id=\"message\" name=\"message\" required />\n      </label>\n      <button>Send</button>\n    </form>\n  );\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Creating Intermediate Layout with Slot Transferring",
    "codeDescription": "Shows how to create an intermediate layout component that passes slots from its children to a parent layout, enabling more complex layout composition.",
    "codeLanguage": "astro",
    "codeTokens": 77,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_16",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "// src/layouts/HomeLayout.astro\n---\nimport BaseLayout from './BaseLayout.astro';\n---\n<BaseLayout>\n  <slot name=\"head\" slot=\"head\" />\n  <slot />\n</BaseLayout>"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Extending Window Interface in TypeScript",
    "codeDescription": "Example of extending the Window interface to type window-specific properties and methods in Astro.",
    "codeLanguage": "typescript",
    "codeTokens": 35,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/typescript.mdx#2025-04-08_snippet_9",
    "pageTitle": "TypeScript Support in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface Window {\n\tmyFunction(): boolean;\n}"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Configuring Basic TSConfig for Astro",
    "codeDescription": "A basic tsconfig.json configuration that inherits from Astro's base template, including recommended settings for file inclusion and exclusion.",
    "codeLanguage": "json",
    "codeTokens": 66,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/typescript.mdx#2025-04-08_snippet_0",
    "pageTitle": "TypeScript Support in Astro",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"extends\": \"astro/tsconfigs/base\",\n  \"include\": [\".astro/types.d.ts\", \"**/*\"],\n  \"exclude\": [\"dist\"]\n}"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Creating a .env File for Environment Variables in Astro",
    "codeDescription": "This example shows the format for a .env file in an Astro project. It demonstrates the difference between server-only environment variables and public variables that are prefixed with PUBLIC_.",
    "codeLanguage": "ini",
    "codeTokens": 82,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/environment-variables.mdx#2025-04-08_snippet_2",
    "pageTitle": "Using Environment Variables in Astro",
    "codeList": [
      {
        "language": "ini",
        "code": "# This will only be available when run on the server!\nDB_PASSWORD=\"foobar\"\n\n# This will be available everywhere!\nPUBLIC_POKEAPI=\"https://pokeapi.co/api/v2\""
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Setting Up Astro Article Page Component",
    "codeDescription": "Astro component implementation for fetching and displaying article data from Drupal.",
    "codeLanguage": "astro",
    "codeTokens": 222,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/drupal.mdx#2025-04-08_snippet_7",
    "pageTitle": "Integrating Drupal with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport {Jsona} from \"jsona\";\nimport {DrupalJsonApiParams} from \"drupal-jsonapi-params\";\nimport type {TJsonApiBody} from \"jsona/lib/JsonaTypes\";\n\nimport type { DrupalNode } from \"../../types\";\nimport {getArticles} from \"../../api/drupal\";\n\n// Get all published articles.\nconst articles = await getArticles();\n---\n<html lang=\"en\">\n  <head>\n    <title>My news site</title>\n  </head>\n  <body>\n    <h1>My news site</h1>\n    <ul>\n      {articles.map((article: DrupalNode) => (\n        <li>\n          <a href={article.path.alias.replace(\"internal:en/\", \"\")}>\n            <h2>{article.title}</h2>\n            <p>Published on {article.created}</p>\n          </a>\n        </li>\n      ))}\n    </ul>\n  </body>\n</html>"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Querying Content Collections in Astro",
    "codeDescription": "Demonstrates how to fetch entire collections or individual entries using the getCollection() and getEntry() functions.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_12",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { getCollection, getEntry } from 'astro:content';\n\n// Get all entries from a collection.\n// Requires the name of the collection as an argument.\nconst allBlogPosts = await getCollection('blog');\n\n// Get a single entry from a collection.\n// Requires the name of the collection and `id`\nconst poodleData = await getEntry('dogs', 'poodle');\n\n"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Using Client Directives in Astro",
    "codeDescription": "Demonstrates the usage of various client directives for UI Framework components, including client:load, client:idle, client:visible, client:media, and client:only.",
    "codeLanguage": "astro",
    "codeTokens": 54,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/directives-reference.mdx#2025-04-08_snippet_2",
    "pageTitle": "Template Directives Reference in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "<BuyButton client:load />"
      },
      {
        "language": "astro",
        "code": "<ShowHideButton client:idle />"
      },
      {
        "language": "astro",
        "code": "<ShowHideButton client:idle={{timeout: 500}} />"
      },
      {
        "language": "astro",
        "code": "<HeavyImageCarousel client:visible />"
      },
      {
        "language": "astro",
        "code": "<HeavyImageCarousel client:visible={{rootMargin: \"200px\"}} />"
      },
      {
        "language": "astro",
        "code": "<SidebarToggle client:media=\"(max-width: 50em)\" />"
      },
      {
        "language": "astro",
        "code": "<SomeReactComponent client:only=\"react\" />\n<SomePreactComponent client:only=\"preact\" />\n<SomeSvelteComponent client:only=\"svelte\" />\n<SomeVueComponent client:only=\"vue\" />\n<SomeSolidComponent client:only=\"solid-js\" />"
      },
      {
        "language": "astro",
        "code": "<ClientComponent client:only=\"vue\">\n  <div slot=\"fallback\">Loading</div>\n</ClientComponent>"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Using Slots for Component Content Projection",
    "codeDescription": "Demonstrates how to use Astro's slot element to create content placeholders where child elements will be rendered. Slots enable component composition patterns and layout reuse.",
    "codeLanguage": "astro",
    "codeTokens": 122,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_8",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/components/Wrapper.astro\nimport Header from './Header.astro';\nimport Logo from './Logo.astro';\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props;\n---\n<div id=\"content-wrapper\">\n  <Header />\n  <Logo />\n  <h1>{title}</h1>\n  <slot />  <!-- children will go here -->\n  <Footer />\n</div>"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Updating Tag Pages to Use getCollection in Astro",
    "codeDescription": "This snippet shows how to update the dynamic tag page generation to use `getCollection()` for fetching blog posts and accessing their data.",
    "codeLanguage": "astro",
    "codeTokens": 247,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/pt-br/tutorial/6-islands/4.mdx#2025-04-08_snippet_1",
    "pageTitle": "Migrating to Astro Content Collections",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { getCollection } from \"astro:content\";\nimport BaseLayout from \"../../layouts/BaseLayout.astro\";\nimport BlogPost from \"../../components/BlogPost.astro\";\n\nexport async function getStaticPaths() {\n  const allPosts = await getCollection(\"blog\");\n  const uniqueTags = [...new Set(allPosts.map((post) => post.data.tags).flat())];\n\n  return uniqueTags.map((tag) => {\n    const filteredPosts = allPosts.filter((post) =>\n      post.data.tags.includes(tag)\n    );\n    return {\n      params: { tag },\n      props: { posts: filteredPosts },\n    };\n  });\n}\n\nconst { tag } = Astro.params;\nconst { posts } = Astro.props;\n---\n\n<BaseLayout pageTitle={tag}>\n  <p>Postagens etiquetadas com {tag}</p>\n  <ul>\n    { posts.map((post) => <BlogPost url={`/posts/${post.id}/`} title={post.data.title} />) }\n  </ul>\n</BaseLayout>"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Configuring auth-astro in Astro config",
    "codeDescription": "Adding the auth-astro integration to the Astro configuration file.",
    "codeLanguage": "typescript",
    "codeTokens": 55,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/authentication.mdx#2025-04-08_snippet_2",
    "pageTitle": "Authentication in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineConfig } from 'astro/config';\nimport auth from 'auth-astro';\n\nexport default defineConfig({\n  // ...\n  integrations: [auth()],\n});"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Setting Response Status and Status Text in Astro Components",
    "codeDescription": "Example showing how to set HTTP response status code and status text conditionally in an Astro component using Astro.response.",
    "codeLanguage": "astro",
    "codeTokens": 57,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_11",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nif (condition) {\n  Astro.response.status = 404;\n  Astro.response.statusText = 'Not found';\n}\n---"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Setting Response Status and Status Text in Astro Components",
    "codeDescription": "Example showing how to set HTTP response status code and status text conditionally in an Astro component using Astro.response.",
    "codeLanguage": "astro",
    "codeTokens": 57,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_11",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nif (condition) {\n  Astro.response.status = 404;\n  Astro.response.statusText = 'Not found';\n}\n---"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Setting Response Status and Status Text in Astro Components",
    "codeDescription": "Example showing how to set HTTP response status code and status text conditionally in an Astro component using Astro.response.",
    "codeLanguage": "astro",
    "codeTokens": 57,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_11",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nif (condition) {\n  Astro.response.status = 404;\n  Astro.response.statusText = 'Not found';\n}\n---"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Managing Cookies in Server-rendered Astro Pages",
    "codeDescription": "Example of using Astro.cookies to read and update cookie values in a server-rendered page. This code creates a simple page view counter stored in a cookie.",
    "codeLanguage": "astro",
    "codeTokens": 141,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/on-demand-rendering.mdx#2025-04-08_snippet_7",
    "pageTitle": "On-demand rendering in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport const prerender = false; // Not needed in 'server' mode\n\nlet counter = 0\n\nif (Astro.cookies.has('counter')) {\n  const cookie = Astro.cookies.get('counter')\n  const value = cookie?.number()\n  if (value !== undefined && !isNaN(value)) counter = value + 1\n}\n\nAstro.cookies.set('counter', String(counter))\n---\n<html>\n  <h1>Counter = {counter}</h1>\n</html>"
      }
    ],
    "relevance": 0.981
  },
  {
    "codeTitle": "Importing and Rendering Astro Components with import.meta.glob()",
    "codeDescription": "Demonstrates importing multiple Astro component files and rendering them using their default property. This technique is useful for creating component libraries or displaying collections of components.",
    "codeLanguage": "astro",
    "codeTokens": 110,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/imports.mdx#2025-04-08_snippet_10",
    "pageTitle": "Imports Reference in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// imports all files that end with `.astro` in `./src/components/`\nconst components = Object.values(import.meta.glob('../components/*.astro', { eager: true }));\n---\n<!-- Display all of our components -->\n{components.map((component) => (\n  <div>\n    <component.default size={24} />\n  </div>\n))}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Defining a Reusable Head Component in Astro",
    "codeDescription": "This Astro component creates a reusable Head structure that includes common metadata, SEO tags, and analytics scripts. It can be customized with props like the page title.",
    "codeLanguage": "astro",
    "codeTokens": 257,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/configuring-astro.mdx#2025-04-08_snippet_3",
    "pageTitle": "Configuring and Customizing Astro Projects",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Favicon from \"../assets/Favicon.astro\";\nimport SomeOtherTags from \"./SomeOtherTags.astro\";\n\nconst { title = \"My Astro Website\", ...props } = Astro.props;\n---\n<link rel=\"sitemap\" href=\"/sitemap-index.xml\">\n<title>{title}</title>\n<meta name=\"description\" content=\"Welcome to my new Astro site!\">\n\n<!-- Web analytics -->\n<script data-goatcounter=\"https://my-account.goatcounter.com/count\" async src=\"//gc.zgo.at/count.js\"></script>\n\n<!-- Open Graph tags -->\n<meta property=\"og:title\" content=\"My New Astro Website\" />\n<meta property=\"og:type\" content=\"website\" />\n<meta property=\"og:url\" content=\"http://www.example.com/\" />\n<meta property=\"og:description\" content=\"Welcome to my new Astro site!\" />\n<meta property=\"og:image\" content=\"https://www.example.com/_astro/seo-banner.BZD7kegZ.webp\">\n<meta property=\"og:image:alt\" content=\"\">\n\n<SomeOtherTags />\n\n<Favicon />"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Configuring Shiki Syntax Highlighting in Astro",
    "codeDescription": "Configuration example for setting up Shiki syntax highlighting in Astro, including theme selection, language support, and custom transformers.",
    "codeLanguage": "javascript",
    "codeTokens": 122,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/configuration-reference.mdx#2025-04-08_snippet_28",
    "pageTitle": "Astro Configuration Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  markdown: {\n    shikiConfig: {\n      theme: 'dracula',\n      themes: {\n        light: 'github-light',\n        dark: 'github-dark',\n      },\n      defaultColor: false,\n      langs: [],\n      langAlias: {\n        cjs: \"javascript\"\n      },\n      wrap: true,\n      transformers: [],\n    },\n  },\n});"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Implementing Conditional Rewrites in Astro Middleware",
    "codeDescription": "Demonstrates how to use context.rewrite() in Astro middleware to conditionally rewrite routes based on response status.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/routing.mdx#2025-04-08_snippet_12",
    "pageTitle": "Astro Routing Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export const onRequest = async (context, next) => {\n  const response = await next();\n  if (response.status === 404) {\n    return context.rewrite(\"/\");\n  }\n  return response;\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Importing and Using Framework Components in Astro",
    "codeDescription": "This snippet demonstrates how to import and use a React component in an Astro file. The component is rendered statically by default.",
    "codeLanguage": "astro",
    "codeTokens": 86,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/framework-components.mdx#2025-04-08_snippet_0",
    "pageTitle": "Using Front-end Frameworks in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport MyReactComponent from '../components/MyReactComponent.jsx';\n---\n<html>\n  <body>\n    <h1>Use React components directly in Astro!</h1>\n    <MyReactComponent />\n  </body>\n</html>"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Server Island Component with Dynamic Content Fetching",
    "codeDescription": "An example of a server island component that fetches user-specific content using cookies. This demonstrates how server islands can access server-side data that wouldn't be available in static rendering.",
    "codeLanguage": "astro",
    "codeTokens": 88,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/server-islands.mdx#2025-04-08_snippet_1",
    "pageTitle": "Server Islands in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { getUserAvatar } from '../sessions';\nconst userSession = Astro.cookies.get('session');\nconst avatarURL = await getUserAvatar(userSession);\n---\n<img alt=\"User avatar\" src={avatarURL} />"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Accessing Component Props in Astro Components",
    "codeDescription": "Shows how to access props passed to an Astro component using the Astro.props object. This example demonstrates creating a Heading component that accepts title and date props.",
    "codeLanguage": "astro",
    "codeTokens": 83,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/components/Heading.astro\nconst { title, date } = Astro.props;\n---\n<div>\n  <h1>{title}</h1>\n  <p>{date}</p>\n</div>"
      },
      {
        "language": "astro",
        "code": "---\n// src/pages/index.astro\nimport Heading from '../components/Heading.astro';\n---\n<Heading title=\"My First Post\" date=\"09 Aug 2022\" />"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Implementing Redirection in Astro Components",
    "codeDescription": "Example showing how to redirect users conditionally from an Astro page component using Astro.redirect() based on authentication status.",
    "codeLanguage": "astro",
    "codeTokens": 88,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_13",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { isLoggedIn } from '../utils';\n\nconst cookie = Astro.request.headers.get('cookie');\n\n// If the user is not logged in, redirect them to the login page\nif (!isLoggedIn(cookie)) {\n  return Astro.redirect('/login');\n}\n---\n\n<p>User information</p>"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Defining Content Collections in TypeScript",
    "codeDescription": "This snippet demonstrates how to define content collections in Astro using TypeScript. It shows importing utilities, defining collection schemas, and exporting the collections object.",
    "codeLanguage": "typescript",
    "codeTokens": 150,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/content-collections.mdx#2025-04-08_snippet_0",
    "pageTitle": "Configuring Content Collections in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "// src/content/config.ts\n// 1. Importa las utilidades de `astro:content`\nimport { defineCollection } from 'astro:content';\n// 2. Define tu colección(es)\nconst blogCollection = defineCollection({ /* ... */ });\n// 3. Exporta un único objeto `collections` para registrar tu(s) colección(es)\n//    Esta clave debe coincidir con el nombre de tu directorio de colección en \"src/content\"\nexport const collections = {\n  'blog': blogCollection,\n};"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Using Middleware Data in Astro Pages",
    "codeDescription": "Demonstrates how to use complex data stored in middleware within an Astro page file.",
    "codeLanguage": "astro",
    "codeTokens": 104,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/middleware.mdx#2025-04-08_snippet_3",
    "pageTitle": "Implementing Middleware in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst title = Astro.locals.welcomeTitle();\nconst orders = Array.from(Astro.locals.orders.entries());\nconst data = Astro.locals;\n---\n<h1>{title}</h1>\n<p>This {data.property} is from middleware.</p>\n<ul>\n    {orders.map(order => {\n        return <li>{/* do something with each order */}</li>;\n    })}\n</ul>"
      }
    ],
    "relevance": 0.979
  },
  {
    "codeTitle": "Using Middleware Data in Astro Pages",
    "codeDescription": "Demonstrates how to use complex data stored in middleware within an Astro page file.",
    "codeLanguage": "astro",
    "codeTokens": 104,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/middleware.mdx#2025-04-08_snippet_3",
    "pageTitle": "Implementing Middleware in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst title = Astro.locals.welcomeTitle();\nconst orders = Array.from(Astro.locals.orders.entries());\nconst data = Astro.locals;\n---\n<h1>{title}</h1>\n<p>This {data.property} is from middleware.</p>\n<ul>\n    {orders.map(order => {\n        return <li>{/* do something with each order */}</li>;\n    })}\n</ul>"
      }
    ],
    "relevance": 0.979
  },
  {
    "codeTitle": "Implementing Pagination in Astro",
    "codeDescription": "Shows how to use the paginate() function to generate paginated routes for large collections of data in Astro.",
    "codeLanguage": "astro",
    "codeTokens": 216,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/routing.mdx#2025-04-08_snippet_13",
    "pageTitle": "Astro Routing Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/pages/astronauts/[page].astro\nexport function getStaticPaths({ paginate }) {\n  const astronautPages = [\n    { astronaut: \"Neil Armstrong\" },\n    { astronaut: \"Buzz Aldrin\" },\n    { astronaut: \"Sally Ride\" },\n    { astronaut: \"John Glenn\" },\n  ];\n  \n  // Generate pages from our array of astronauts, with 2 to a page\n  return paginate(astronautPages, { pageSize: 2 });\n}\n// All paginated data is passed on the \"page\" prop\nconst { page } = Astro.props;\n---\n<!-- Display the current page number. `Astro.params.page` can also be used! -->\n<h1>Page {page.currentPage}</h1>\n<ul>\n  <!-- List the array of astronaut info -->\n  {page.data.map(({ astronaut }) => <li>{astronaut}</li>)}\n</ul>"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Configuring TypeScript for Astro",
    "codeDescription": "Basic TypeScript configuration that extends Astro's base TypeScript configuration. This enables TypeScript support in the project and helps editors understand the project structure.",
    "codeLanguage": "json",
    "codeTokens": 53,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/install-and-setup.mdx#2025-04-08_snippet_23",
    "pageTitle": "Installing Astro: A Step-by-Step Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"extends\": \"astro/tsconfigs/base\"\n}"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Defining Type-Safe Environment Variables Schema in Astro",
    "codeDescription": "Example of using envField to define types and properties for environment variables, including context (client/server), access level (public/secret), default values, and validation constraints.",
    "codeLanguage": "javascript",
    "codeTokens": 144,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/configuration-reference.mdx#2025-04-08_snippet_36",
    "pageTitle": "Astro Configuration Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "// astro.config.mjs\nimport { defineConfig, envField } from \"astro/config\"\n\nexport default defineConfig({\n  env: {\n    schema: {\n      API_URL: envField.string({ context: \"client\", access: \"public\", optional: true }),\n      PORT: envField.number({ context: \"server\", access: \"public\", default: 4321 }),\n      API_SECRET: envField.string({ context: \"server\", access: \"secret\" }),\n    }\n  }\n})"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Rendering Imported MDX Content with Custom Components",
    "codeDescription": "Astro code demonstrating how to render imported MDX content with custom components.",
    "codeLanguage": "astro",
    "codeTokens": 89,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/mdx.mdx#2025-04-08_snippet_12",
    "pageTitle": "Integrating MDX with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { Content, components } from '../content.mdx';\nimport Heading from '../Heading.astro';\n---\n<!-- Creates a custom <h1> for the # syntax, _and_ applies any custom components defined in `content.mdx` -->\n<Content components={{...components, h1: Heading }} />"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Configuring Package Entry Points with Exports Field",
    "codeDescription": "Setting up export paths in package.json to enable different import patterns for the component. This allows users to import specific parts of the package as needed.",
    "codeLanguage": "json",
    "codeTokens": 79,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/publish-to-npm.mdx#2025-04-08_snippet_7",
    "pageTitle": "Publishing Astro Components to NPM",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./astro\": \"./MyAstroComponent.astro\",\n    \"./react\": \"./MyReactComponent.jsx\"\n  }\n}"
      }
    ],
    "relevance": 0.976
  },
  {
    "codeTitle": "Handling Multiple HTTP Methods in Astro Server Endpoints",
    "codeDescription": "This example shows how to handle multiple HTTP methods (GET, POST, DELETE, and a catch-all) in an Astro server endpoint.",
    "codeLanguage": "typescript",
    "codeTokens": 185,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/endpoints.mdx#2025-04-08_snippet_5",
    "pageTitle": "Creating Custom Endpoints in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "export const GET: APIRoute = ({ params, request }) => {\n  return new Response(\n    JSON.stringify({\n      message: \"This was a GET!\",\n    }),\n  );\n};\n\nexport const POST: APIRoute = ({ request }) => {\n  return new Response(\n    JSON.stringify({\n      message: \"This was a POST!\",\n    }),\n  );\n};\n\nexport const DELETE: APIRoute = ({ request }) => {\n  return new Response(\n    JSON.stringify({\n      message: \"This was a DELETE!\",\n    }),\n  );\n};\n\nexport const ALL: APIRoute = ({ request }) => {\n  return new Response(\n    JSON.stringify({\n      message: `This was a ${request.method}!`,\n    }),\n  );\n};"
      }
    ],
    "relevance": 0.976
  },
  {
    "codeTitle": "Adding Multiple Astro Integrations via CLI",
    "codeDescription": "Shows how to add multiple Astro integrations simultaneously using the 'astro add' command with different package managers.",
    "codeLanguage": "shell",
    "codeTokens": 42,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/index.mdx#2025-04-08_snippet_1",
    "pageTitle": "Adding Integrations to Astro Projects",
    "codeList": [
      {
        "language": "shell",
        "code": "npx astro add react sitemap partytown"
      },
      {
        "language": "shell",
        "code": "pnpm astro add react sitemap partytown"
      },
      {
        "language": "shell",
        "code": "yarn astro add react sitemap partytown"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Configuring Auth.js providers",
    "codeDescription": "Setting up Auth.js configuration with GitHub as an authentication provider.",
    "codeLanguage": "typescript",
    "codeTokens": 85,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/authentication.mdx#2025-04-08_snippet_3",
    "pageTitle": "Authentication in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import GitHub from '@auth/core/providers/github';\nimport { defineConfig } from 'auth-astro';\n\nexport default defineConfig({\n\tproviders: [\n\t\tGitHub({\n\t\t\tclientId: import.meta.env.GITHUB_CLIENT_ID,\n\t\t\tclientSecret: import.meta.env.GITHUB_CLIENT_SECRET,\n\t\t}),\n\t],\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Querying Content Collections in JavaScript",
    "codeDescription": "Demonstrates how to use getCollection() and getEntry() functions to retrieve content entries from collections.",
    "codeLanguage": "js",
    "codeTokens": 126,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/guides/content-collections.mdx#2025-04-08_snippet_0",
    "pageTitle": "Querying and Rendering Content Collections in Astro",
    "codeList": [
      {
        "language": "js",
        "code": "import { getCollection, getEntry } from 'astro:content';\n\n// Obtenir toutes les entrées d'une collection.\n// Nécessite le nom de la collection comme argument.\nconst allBlogPosts = await getCollection('blog');\n\n// Obtenir une seule entrée d'une collection.\n// Nécessite le nom de la collection et un `id`\nconst poodleData = await getEntry('dogs', 'poodle');"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Custom i18n Middleware in Astro",
    "codeDescription": "Example of a custom middleware implementation for i18n routing in Astro that selectively applies routing logic. This middleware uses helper functions from astro:i18n to control redirects.",
    "codeLanguage": "javascript",
    "codeTokens": 125,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/internationalization.mdx#2025-04-08_snippet_5",
    "pageTitle": "Internationalization (i18n) Routing in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineMiddleware } from \"astro:middleware\";\nimport { redirectToDefaultLocale } from \"astro:i18n\"; // function available with `manual` routing\nexport const onRequest = defineMiddleware(async (ctx, next) => {\n  if (ctx.url.startsWith(\"/about\")) {\n    return next();\n  } else {\n    return redirectToDefaultLocale(302);\n  }\n})"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Handling Form Submissions and Inserting Data into Astro DB",
    "codeDescription": "Astro component that processes a form submission, inserts the data into a Comment table, and renders the updated list of comments.",
    "codeLanguage": "astro",
    "codeTokens": 239,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/astro-db.mdx#2025-04-08_snippet_14",
    "pageTitle": "Astro DB Configuration and Setup Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/pages/index.astro\nimport { db, Comment } from 'astro:db';\n\nif (Astro.request.method === 'POST') {\n  // Parse form data\n  const formData = await Astro.request.formData();\n  const author = formData.get('author');\n  const body = formData.get('body');\n  if (typeof author === 'string' && typeof body === 'string') {\n    // Insert form data into the Comment table\n    await db.insert(Comment).values({ author, body });\n  }\n}\n\n// Render the new list of comments on each request\nconst comments = await db.select().from(Comment);\n---\n\n<form method=\"POST\" style=\"display: grid\">\n\t<label for=\"author\">Author</label>\n\t<input id=\"author\" name=\"author\" />\n\n\t<label for=\"body\">Body</label>\n\t<textarea id=\"body\" name=\"body\"></textarea>\n\n\t<button type=\"submit\">Submit</button>\n</form>\n\n<!-- Render `comments` -->"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Creating an Interactive Client Island in Astro",
    "codeDescription": "Demonstrates how to transform a static UI component into an interactive island using the client:load directive, which enables client-side JavaScript for that specific component.",
    "codeLanguage": "astro",
    "codeTokens": 68,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/concepts/islands.mdx#2025-04-08_snippet_1",
    "pageTitle": "Islands Architecture in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "<!-- This component is now interactive on the page! \n     The rest of your website remains static. -->\n<MyReactComponent client:load />"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Generating a Binary PNG Image Endpoint in Astro",
    "codeDescription": "This example shows how to create an endpoint that produces a binary PNG image by fetching an external image and returning it as a Response.",
    "codeLanguage": "typescript",
    "codeTokens": 82,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/endpoints.mdx#2025-04-08_snippet_1",
    "pageTitle": "Creating Custom Endpoints in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "export async function GET({ params, request }) {\n  const response = await fetch(\n    \"https://docs.astro.build/assets/full-logo-light.png\",\n  );\n  \n  return new Response(await response.arrayBuffer());\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Defining Environment Variable Schema in Astro Configuration",
    "codeDescription": "This snippet shows how to configure the env.schema option in the Astro config file to define environment variables.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/environment-variables.mdx#2025-04-08_snippet_12",
    "pageTitle": "Using Environment Variables in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from \"astro/config\";\n\nexport default defineConfig({\n  env: {\n    schema: {\n      // ...\n    }\n  }\n})"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Passing Props to Framework Components in Astro",
    "codeDescription": "This example demonstrates how to pass props from Astro components to framework components. It shows passing initial values to React and Svelte components.",
    "codeLanguage": "astro",
    "codeTokens": 93,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/framework-components.mdx#2025-04-08_snippet_3",
    "pageTitle": "Using Front-end Frameworks in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport TodoList from '../components/TodoList.jsx';\nimport Counter from '../components/Counter.svelte';\n---\n<div>\n  <TodoList initialTodos={[\"learn Astro\", \"review PRs\"]} />\n  <Counter startingCount={1} />\n</div>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Complete Tag Index Page Component in Astro",
    "codeDescription": "The final implementation of the tag index page, combining data fetching, tag extraction, rendering with appropriate styling, and link generation for each tag.",
    "codeLanguage": "astro",
    "codeTokens": 262,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/5-astro-api/3.mdx#2025-04-08_snippet_8",
    "pageTitle": "Building a Tag Index Page in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "--- \nimport BaseLayout from '../../layouts/BaseLayout.astro';\nconst allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));\nconst tags = [...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat())];\nconst pageTitle = \"Tag Index\";\n---\n<BaseLayout pageTitle={pageTitle}>\n  <div class=\"tags\">\n    {tags.map((tag) => (\n      <p class=\"tag\"><a href={`/tags/${tag}`}>{tag}</a></p>\n    ))}\n  </div>\n</BaseLayout>\n<style>\n  a {\n    color: #00539F;\n  }\n\n  .tags {\n    display: flex; \n    flex-wrap: wrap; \n  }\n\n  .tag {\n    margin: 0.25em;\n    border: dotted 1px #a1a1a1;\n    border-radius: .5em;\n    padding: .5em 1em;\n    font-size: 1.15em;\n    background-color: #F8FCFD;\n  }\n</style>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Adding Remark and Rehype Plugins in Astro Config",
    "codeDescription": "Configures remark-toc and rehype-accessible-emojis plugins in Astro's configuration file. The example demonstrates adding plugins with basic configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 128,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/markdown-content.mdx#2025-04-08_snippet_4",
    "pageTitle": "Markdown Documentation in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from 'astro/config';\nimport remarkToc from 'remark-toc';\nimport { rehypeAccessibleEmojis } from 'rehype-accessible-emojis';\n\nexport default defineConfig({\n  markdown: {\n    remarkPlugins: [ [remarkToc, { heading: 'toc', maxDepth: 3 } ] ],\n    rehypePlugins: [rehypeAccessibleEmojis],\n  },\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Initializing Cart Store with Nanostores in JavaScript",
    "codeDescription": "This snippet creates a cart store using Nanostores' atom and map functions. It defines the structure of cart items and initializes an empty cart.",
    "codeLanguage": "javascript",
    "codeTokens": 142,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/sharing-state-islands.mdx#2025-04-08_snippet_14",
    "pageTitle": "Sharing State Between Astro Islands with Nano Stores",
    "codeList": [
      {
        "language": "javascript",
        "code": "// src/cartStore.js\nimport { atom, map } from 'nanostores';\n\nexport const isCartOpen = atom(false);\n\n/**\n * @typedef {Object} CartItem\n * @property {string} id\n * @property {string} name\n * @property {string} imageSrc\n * @property {number} quantity\n */\n\n/** @type {import('nanostores').MapStore<Record<string, CartItem>>} */\nexport const cartItems = map({});\n"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Alert Button Event Handler Implementation",
    "codeDescription": "Creates a button component that shows an alert message when clicked, demonstrating event handling in Astro components.",
    "codeLanguage": "astro",
    "codeTokens": 109,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/client-side-scripts.mdx#2025-04-08_snippet_2",
    "pageTitle": "Script and Event Handling in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "<button class=\"alert\">Click me!</button>\n\n<script>\n  // Find all buttons with the `alert` class on the page.\n  const buttons = document.querySelectorAll('button.alert');\n\n  // Handle clicks on each button.\n  buttons.forEach((button) => {\n    button.addEventListener('click', () => {\n      alert('Button was clicked!');\n    });\n  });\n</script>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Creating a Main Layout Component in Astro",
    "codeDescription": "This Astro component defines a main layout structure that includes a Head component and placeholders for additional head elements and page content. It serves as a base template for other pages.",
    "codeLanguage": "astro",
    "codeTokens": 112,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/configuring-astro.mdx#2025-04-08_snippet_2",
    "pageTitle": "Configuring and Customizing Astro Projects",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Head from \"./Head.astro\";\n\nconst { ...props } = Astro.props;\n---\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <Head />\n    <!-- Additional head elements -->\n  </head>\n  <body>\n    <!-- Page content goes here -->\n  </body>\n</html>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Custom i18n Middleware in Astro",
    "codeDescription": "Shows how to create and sequence custom middleware with Astro's built-in i18n routing middleware. Demonstrates handling specific route exceptions and combining multiple middleware functions.",
    "codeLanguage": "javascript",
    "codeTokens": 209,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/internationalization.mdx#2025-04-08_snippet_6",
    "pageTitle": "Internationalization (i18n) Routing in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import {defineMiddleware, sequence} from \"astro:middleware\";\nimport { middleware } from \"astro:i18n\"; // Astro's own i18n routing config\n\nexport const userMiddleware = defineMiddleware(async (ctx, next) => {\n  // this response might come from Astro's i18n middleware, and it might return a 404\n  const response = await next();\n  // the /about page is an exception and we want to render it\n  if (ctx.url.startsWith(\"/about\")) {\n    return new Response(\"About page\", {\n      status: 200\n    });\n  } else {\n    return response;\n  }\n});\n\n\nexport const onRequest = sequence(\n  userMiddleware,\n  middleware({\n    redirectToDefaultLocale: false,\n    prefixDefaultLocale: true\n  })\n)"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Creating Custom Remark Plugin for Frontmatter Modification",
    "codeDescription": "Example of creating a custom remark plugin that adds a new property to frontmatter. Shows how to modify frontmatter programmatically.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/markdown-content.mdx#2025-04-08_snippet_6",
    "pageTitle": "Markdown Documentation in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "export function exampleRemarkPlugin() {\n  // All remark and rehype plugins return a separate function\n  return function (tree, file) {\n    file.data.astro.frontmatter.customProperty = 'Generated property';\n  }\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Cart Components with Astro Islands",
    "codeDescription": "Example Astro page implementing an ecommerce cart interface with multiple interactive components using client-side hydration.",
    "codeLanguage": "astro",
    "codeTokens": 176,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/sharing-state-islands.mdx#2025-04-08_snippet_2",
    "pageTitle": "Sharing State Between Astro Islands with Nano Stores",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/pages/index.astro\nimport CartFlyoutToggle from '../components/CartFlyoutToggle';\nimport CartFlyout from '../components/CartFlyout';\nimport AddToCartForm from '../components/AddToCartForm';\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>...</head>\n<body>\n  <header>\n    <nav>\n      <a href=\"/\">Astro storefront</a>\n      <CartFlyoutToggle client:load />\n    </nav>\n  </header>\n  <main>\n    <AddToCartForm client:load>\n    <!-- ... -->\n    </AddToCartForm>\n  </main>\n  <CartFlyout client:load />\n</body>\n</html>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Example Blog Post With References",
    "codeDescription": "Shows a sample Markdown frontmatter that includes references to another entry in a different collection (author) and multiple entries in the same collection (related posts).",
    "codeLanguage": "markdown",
    "codeTokens": 104,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_16",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "---\ntitle: \"Welcome to my blog\"\nauthor: ben-holmes # references `src/data/authors/ben-holmes.json` \nrelatedPosts:\n- about-me # references `src/data/blog/about-me.md`\n- my-year-in-review # references `src/data/blog/my-year-in-review.md`\n---"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Adding Integrations to Astro",
    "codeDescription": "Configuring Astro integrations to extend functionality with framework support like React and features like MDX. Integrations are added as an array.",
    "codeLanguage": "javascript",
    "codeTokens": 79,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/configuration-reference.mdx#2025-04-08_snippet_10",
    "pageTitle": "Astro Configuration Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "import react from '@astrojs/react';\nimport mdx from '@astrojs/mdx';\n{\n  // Example: Add React + MDX support to Astro\n  integrations: [react(), mdx()]\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Action Result Persistence Middleware in Astro",
    "codeDescription": "Implements POST/Redirect/GET pattern using middleware to persist form action results across sessions using Netlify Blob storage.",
    "codeLanguage": "typescript",
    "codeTokens": 370,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#2025-04-08_snippet_22",
    "pageTitle": "Astro Actions: Type-safe Server Functions",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineMiddleware } from 'astro:middleware';\nimport { getActionContext } from 'astro:actions';\nimport { randomUUID } from \"node:crypto\";\nimport { getStore } from \"@netlify/blobs\";\n\nexport const onRequest = defineMiddleware(async (context, next) => {\n  if (context.isPrerendered) return next();\n  \n  const { action, setActionResult, serializeActionResult } =\n    getActionContext(context);\n  const actionStore = getStore(\"action-session\");\n  \n  const sessionId = context.cookies.get(\"action-session-id\")?.value;\n  const session = sessionId\n    ? await actionStore.get(sessionId, {\n        type: \"json\",\n      })\n    : undefined;\n  \n  if (session) {\n    setActionResult(session.actionName, session.actionResult);\n    await actionStore.delete(sessionId);\n    context.cookies.delete(\"action-session-id\");\n    return next();\n  }\n  \n  if (action?.calledFrom === \"form\") {\n    const actionResult = await action.handler();\n  \n    const sessionId = randomUUID();\n    await actionStore.setJSON(sessionId, {\n      actionName: action.name,\n      actionResult: serializeActionResult(actionResult),\n    });\n  \n    context.cookies.set(\"action-session-id\", sessionId);\n  \n    if (actionResult.error) {\n      const referer = context.request.headers.get(\"Referer\");\n      if (!referer) {\n        throw new Error(\n          \"Internal: Referer unexpectedly missing from Action POST request.\",\n        );\n      }\n      return context.redirect(referer);\n    }\n    return context.redirect(context.originPathname);\n  }\n  \n  return next();\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Adding Remark and Rehype Plugins in Astro Config",
    "codeDescription": "Configures remark-toc and rehype-accessible-emojis plugins in Astro's configuration file. The example demonstrates adding plugins with basic configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 128,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/markdown-content.mdx#2025-04-08_snippet_4",
    "pageTitle": "Markdown Documentation in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from 'astro/config';\nimport remarkToc from 'remark-toc';\nimport { rehypeAccessibleEmojis } from 'rehype-accessible-emojis';\n\nexport default defineConfig({\n  markdown: {\n    remarkPlugins: [ [remarkToc, { heading: 'toc', maxDepth: 3 } ] ],\n    rehypePlugins: [rehypeAccessibleEmojis],\n  },\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Generating Static Routes from Astro Content Collections",
    "codeDescription": "Demonstrates how to use getStaticPaths() to create multiple pages from a single page component using content collection data.",
    "codeLanguage": "astro",
    "codeTokens": 152,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_19",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { getCollection, render } from 'astro:content';\n// 1. Generate a new path for every collection entry\nexport async function getStaticPaths() {\n  const posts = await getCollection('blog');\n  return posts.map(post => ({\n    params: { id: post.id },\n    props: { post },\n  }));\n}\n// 2. For your template, you can get the entry directly from the prop\nconst { post } = Astro.props;\nconst { Content } = await render(post);\n---\n<h1>{post.data.title}</h1>\n<Content />"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Defining Content Collections in Astro",
    "codeDescription": "Shows how to use defineCollection() to configure a content collection with a schema for frontmatter validation using Zod.",
    "codeLanguage": "typescript",
    "codeTokens": 111,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/reference/api-reference.mdx#2025-04-08_snippet_9",
    "pageTitle": "Astro API Reference",
    "codeList": [
      {
        "language": "typescript",
        "code": "// src/content/config.ts\nimport { z, defineCollection } from 'astro:content';\nconst blog = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    permalink: z.string().optional(),\n  }),\n});\n// Expone tu colección definida a Astro\n// con el export `collections`\nexport const collections = { blog };"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Creating Polymorphic Components in Astro",
    "codeDescription": "Shows implementation of a polymorphic component that can render as different HTML elements with full type safety.",
    "codeLanguage": "astro",
    "codeTokens": 81,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/typescript.mdx#2025-04-08_snippet_15",
    "pageTitle": "TypeScript Support in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport type { HTMLTag, Polymorphic } from \"astro/types\";\n\ntype Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }>;\n\nconst { as: Tag, ...props } = Astro.props;\n---\n<Tag {...props} />"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Alert Button Event Handler Implementation",
    "codeDescription": "Creates a button component that shows an alert message when clicked, demonstrating event handling in Astro components.",
    "codeLanguage": "astro",
    "codeTokens": 109,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/client-side-scripts.mdx#2025-04-08_snippet_2",
    "pageTitle": "Script and Event Handling in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "<button class=\"alert\">Click me!</button>\n\n<script>\n  // Find all buttons with the `alert` class on the page.\n  const buttons = document.querySelectorAll('button.alert');\n\n  // Handle clicks on each button.\n  buttons.forEach((button) => {\n    button.addEventListener('click', () => {\n      alert('Button was clicked!');\n    });\n  });\n</script>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Alert Button Event Handler Implementation",
    "codeDescription": "Creates a button component that shows an alert message when clicked, demonstrating event handling in Astro components.",
    "codeLanguage": "astro",
    "codeTokens": 109,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/client-side-scripts.mdx#2025-04-08_snippet_2",
    "pageTitle": "Script and Event Handling in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "<button class=\"alert\">Click me!</button>\n\n<script>\n  // Find all buttons with the `alert` class on the page.\n  const buttons = document.querySelectorAll('button.alert');\n\n  // Handle clicks on each button.\n  buttons.forEach((button) => {\n    button.addEventListener('click', () => {\n      alert('Button was clicked!');\n    });\n  });\n</script>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Custom i18n Middleware in Astro",
    "codeDescription": "Shows how to create and sequence custom middleware with Astro's built-in i18n routing middleware. Demonstrates handling specific route exceptions and combining multiple middleware functions.",
    "codeLanguage": "javascript",
    "codeTokens": 209,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/internationalization.mdx#2025-04-08_snippet_6",
    "pageTitle": "Internationalization (i18n) Routing in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import {defineMiddleware, sequence} from \"astro:middleware\";\nimport { middleware } from \"astro:i18n\"; // Astro's own i18n routing config\n\nexport const userMiddleware = defineMiddleware(async (ctx, next) => {\n  // this response might come from Astro's i18n middleware, and it might return a 404\n  const response = await next();\n  // the /about page is an exception and we want to render it\n  if (ctx.url.startsWith(\"/about\")) {\n    return new Response(\"About page\", {\n      status: 200\n    });\n  } else {\n    return response;\n  }\n});\n\n\nexport const onRequest = sequence(\n  userMiddleware,\n  middleware({\n    redirectToDefaultLocale: false,\n    prefixDefaultLocale: true\n  })\n)"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Custom i18n Middleware in Astro",
    "codeDescription": "Example of a custom middleware implementation for i18n routing in Astro that selectively applies routing logic. This middleware uses helper functions from astro:i18n to control redirects.",
    "codeLanguage": "javascript",
    "codeTokens": 125,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/internationalization.mdx#2025-04-08_snippet_5",
    "pageTitle": "Internationalization (i18n) Routing in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineMiddleware } from \"astro:middleware\";\nimport { redirectToDefaultLocale } from \"astro:i18n\"; // function available with `manual` routing\nexport const onRequest = defineMiddleware(async (ctx, next) => {\n  if (ctx.url.startsWith(\"/about\")) {\n    return next();\n  } else {\n    return redirectToDefaultLocale(302);\n  }\n})"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Complete On-Demand Blog Post Rendering with Kontent.ai and Astro",
    "codeDescription": "Full implementation of on-demand rendering for blog posts with Kontent.ai and Astro, including data fetching with error handling and HTML rendering of the blog post content.",
    "codeLanguage": "astro",
    "codeTokens": 297,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/kontent-ai.mdx#2025-04-08_snippet_14",
    "pageTitle": "Kontent.ai Integration with Astro Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\n\nconst { slug } = Astro.params\nlet blogPost: BlogPost;\ntry {\n    const data = await deliveryClient\n        .items<BlogPost>()\n        .equalsFilter(contentTypes.blog_post.elements.url_slug.codename, slug ?? '')\n        .type(contentTypes.blog_post.codename)\n        .limitParameter(1)\n        .toPromise()\n    blogPost = data.data.items[0]\n} catch (error) {\n    return Astro.redirect('/404')\n}\n---\n<html lang=\"en\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width\" />\n        <title>{blogPost.elements.title.value}</title>\n    </head>\n    <body>\n        <article>\n            <h1>{blogPost.elements.title.value}</h1>\n            <Fragment set:html={blogPost.elements.teaser.value} />\n            <Fragment set:html={blogPost.elements.content.value} />\n            <time>{new Date(blogPost.elements.date.value ?? '')}</time>\n    </body>\n</html>"
      }
    ],
    "relevance": 0.974
  },
  {
    "codeTitle": "Updating Metadata Store in Astro Loader",
    "codeDescription": "Demonstrates how to use the meta store to get and set metadata values within an Astro loader function. This is useful for storing and retrieving persistent data between builds.",
    "codeLanguage": "typescript",
    "codeTokens": 66,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/content-loader-reference.mdx#2025-04-08_snippet_5",
    "pageTitle": "Astro Content Loader API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const lastModified = meta.get(\"lastModified\");\n// ...\nmeta.set(\"lastModified\", new Date().toISOString());"
      }
    ],
    "relevance": 0.973
  },
  {
    "codeTitle": "Updating Metadata Store in Astro Loader",
    "codeDescription": "Demonstrates how to use the meta store to get and set metadata values within an Astro loader function. This is useful for storing and retrieving persistent data between builds.",
    "codeLanguage": "typescript",
    "codeTokens": 66,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/content-loader-reference.mdx#2025-04-08_snippet_5",
    "pageTitle": "Astro Content Loader API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const lastModified = meta.get(\"lastModified\");\n// ...\nmeta.set(\"lastModified\", new Date().toISOString());"
      }
    ],
    "relevance": 0.973
  },
  {
    "codeTitle": "Complete Static Blog Post Page with Dynamic Routing in Astro",
    "codeDescription": "This is a complete implementation of a static blog post page using Astro's dynamic routing. It fetches data at build time, processes it, and renders individual blog post pages with proper HTML content.",
    "codeLanguage": "astro",
    "codeTokens": 266,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/contentful.mdx#2025-04-08_snippet_9",
    "pageTitle": "Integrating Contentful CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { contentfulClient } from \"../../lib/contentful\";\nimport { documentToHtmlString } from \"@contentful/rich-text-html-renderer\";\nimport type { BlogPost } from \"../../lib/contentful\";\n\nexport async function getStaticPaths() {\n  const { items } = await contentfulClient.getEntries<BlogPost>({\n    content_type: \"blogPost\",\n  });\n  const pages = items.map((item) => ({\n    params: { slug: item.fields.slug },\n    props: {\n      title: item.fields.title,\n      content: documentToHtmlString(item.fields.content),\n      date: new Date(item.fields.date).toLocaleDateString(),\n    },\n  }));\n  return pages;\n}\n\nconst { content, title, date } = Astro.props;\n---\n<html lang=\"en\">\n  <head>\n    <title>{title}</title>\n  </head>\n  <body>\n    <h1>{title}</h1>\n    <time>{date}</time>\n    <article set:html={content} />\n  </body>\n</html>"
      }
    ],
    "relevance": 0.973
  },
  {
    "codeTitle": "Configuring NGINX for Astro Static Sites",
    "codeDescription": "This NGINX configuration file sets up a server to serve a static Astro site on port 8080, including gzip compression and error page handling.",
    "codeLanguage": "nginx",
    "codeTokens": 203,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/recipes/docker.mdx#2025-04-08_snippet_4",
    "pageTitle": "Building an Astro Site with Docker",
    "codeList": [
      {
        "language": "nginx",
        "code": "worker_processes  1;\n\nevents {\n  worker_connections  1024;\n}\n\nhttp {\n  server {\n    listen 8080;\n    server_name   _;\n\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    include /etc/nginx/mime.types;\n\n    gzip on;\n    gzip_min_length 1000;\n    gzip_proxied expired no-cache no-store private auth;\n    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;\n\n    error_page 404 /404.html;\n    location = /404.html {\n            root /usr/share/nginx/html;\n            internal;\n    }\n\n    location / {\n            try_files $uri $uri/index.html =404;\n    }\n  }\n}"
      }
    ],
    "relevance": 0.973
  },
  {
    "codeTitle": "Handling Refresh Context Data in Astro Loader",
    "codeDescription": "Shows how to handle additional context data provided by integrations when triggering a loader refresh. This can be used to process webhook payloads or other integration-specific data.",
    "codeLanguage": "typescript",
    "codeTokens": 125,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/content-loader-reference.mdx#2025-04-08_snippet_9",
    "pageTitle": "Astro Content Loader API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export function myLoader(options: { url: string }): Loader {\n  return {\n    name: \"my-loader\",\n    load: async ({ refreshContextData, store, logger }) => {\n      if(refreshContextData?.webhookBody) {\n        logger.info(\"Webhook triggered with body\");\n        processWebhook(store, refreshContextData.webhookBody);\n      }\n      // ...\n    },\n  };\n}"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Configuring Collection Loaders in Astro Content API",
    "codeDescription": "Demonstrates how to use built-in loaders (glob and file) to create collections from local content files. Shows different patterns for loading content from directories or individual files.",
    "codeLanguage": "typescript",
    "codeTokens": 299,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_2",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineCollection, z } from 'astro:content';\nimport { glob, file } from 'astro/loaders'; // Not available with legacy API\n\nconst blog = defineCollection({\n  loader: glob({ pattern: \"**/*.md\", base: \"./src/data/blog\" }),\n  schema: /* ... */\n});\nconst dogs = defineCollection({\n  loader: file(\"src/data/dogs.json\"),\n  schema: /* ... */\n});\n\nconst probes = defineCollection({\n  // `loader` can accept an array of multiple patterns as well as string patterns\n  // Load all markdown files in the space-probes directory, except for those that start with \"voyager-\"\n  loader: glob({ pattern: ['*.md', '!voyager-*'], base: 'src/data/space-probes' }),\n  schema: z.object({\n    name: z.string(),\n    type: z.enum(['Space Probe', 'Mars Rover', 'Comet Lander']),\n    launch_date: z.date(),\n    status: z.enum(['Active', 'Inactive', 'Decommissioned']),\n    destination: z.string(),\n    operator: z.string(),\n    notable_discoveries: z.array(z.string()),\n  }),\n});\n\nexport const collections = { blog, dogs, probes };"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Configuring Collection Loaders in Astro Content API",
    "codeDescription": "Demonstrates how to use built-in loaders (glob and file) to create collections from local content files. Shows different patterns for loading content from directories or individual files.",
    "codeLanguage": "typescript",
    "codeTokens": 299,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_2",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineCollection, z } from 'astro:content';\nimport { glob, file } from 'astro/loaders'; // Not available with legacy API\n\nconst blog = defineCollection({\n  loader: glob({ pattern: \"**/*.md\", base: \"./src/data/blog\" }),\n  schema: /* ... */\n});\nconst dogs = defineCollection({\n  loader: file(\"src/data/dogs.json\"),\n  schema: /* ... */\n});\n\nconst probes = defineCollection({\n  // `loader` can accept an array of multiple patterns as well as string patterns\n  // Load all markdown files in the space-probes directory, except for those that start with \"voyager-\"\n  loader: glob({ pattern: ['*.md', '!voyager-*'], base: 'src/data/space-probes' }),\n  schema: z.object({\n    name: z.string(),\n    type: z.enum(['Space Probe', 'Mars Rover', 'Comet Lander']),\n    launch_date: z.date(),\n    status: z.enum(['Active', 'Inactive', 'Decommissioned']),\n    destination: z.string(),\n    operator: z.string(),\n    notable_discoveries: z.array(z.string()),\n  }),\n});\n\nexport const collections = { blog, dogs, probes };"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Implementing Content Refresh in Astro Dev Server",
    "codeDescription": "This snippet demonstrates how to use the astro:server:setup hook to implement a content refresh mechanism in an Astro integration. It sets up a webhook endpoint to trigger content updates during development.",
    "codeLanguage": "typescript",
    "codeTokens": 280,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/integrations-reference.mdx#2025-04-08_snippet_9",
    "pageTitle": "Astro Integration API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "{\n  name: 'my-integration',\n  hooks: {\n    'astro:server:setup': async ({ server, refreshContent }) => {\n      // Register a dev server webhook endpoint\n      server.middlewares.use('/_refresh', async (req, res) => {\n        if(req.method !== 'POST') {\n          res.statusCode = 405\n          res.end('Method Not Allowed');\n          return\n        }\n        let body = '';\n        req.on('data', chunk => {\n          body += chunk.toString();\n        });\n        req.on('end', async () => {\n          try {\n            const webhookBody = JSON.parse(body);\n            await refreshContent({\n              context: { webhookBody },\n              loaders: ['my-loader']\n            });\n            res.writeHead(200, { 'Content-Type': 'application/json' });\n            res.end(JSON.stringify({ message: 'Content refreshed successfully' }));\n          } catch (error) {\n            res.writeHead(500, { 'Content-Type': 'application/json' });\n            res.end(JSON.stringify({ error: 'Failed to refresh content: ' + error.message }));\n          }\n        });\n      });\n    }\n  }\n}"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Astro Dev Command Flags Overview",
    "codeDescription": "Lists all available flags for the Astro dev command and their descriptions.",
    "codeLanguage": "bash",
    "codeTokens": 123,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/cli-reference.mdx#2025-04-08_snippet_10",
    "pageTitle": "Astro CLI Commands Documentation",
    "codeList": [
      {
        "language": "bash",
        "code": "astro dev [...flags]\n\nFlags\n                 --port  Specify which port to run on. Defaults to 4321.\n                 --host  Listen on all addresses, including LAN and public addresses.\n--host <custom-address>  Expose on a network IP address at <custom-address>\n                 --open  Automatically open the app in the browser on server start\n                --force  Clear the content layer cache, forcing a full rebuild.\n            --help (-h)  See all available flags."
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Loading Files with Astro.glob() in Astro Components",
    "codeDescription": "Demonstrates how to use Astro.glob() to import multiple Markdown files and render content from them. This example shows loading posts from a directory and displaying the first three with their title, description, and a link.",
    "codeLanguage": "astro",
    "codeTokens": 163,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/de/reference/api-reference.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Global API Reference Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// ./src/components/my-component.astro\nconst posts = await Astro.glob('../pages/post/*.md'); // gibt ein Array von Posts zurück, die sich unter ./src/pages/post/*.md befinden\nthemes---\n\n<div>\n{posts.slice(0, 3).map((post) => (\n  <article>\n    <h2>{post.frontmatter.title}</h2>\n    <p>{post.frontmatter.description}</p>\n    <a href={post.url}>Read more</a>\n  </article>\n))}\n</div>"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Displaying WordPress Posts List with Links in Astro",
    "codeDescription": "This snippet shows how to create an index page in Astro that lists dinosaur posts fetched from a WordPress API. It includes fetching the data, mapping through the posts, and creating links to individual post pages.",
    "codeLanguage": "astro",
    "codeTokens": 187,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/wordpress.mdx#2025-04-08_snippet_1",
    "pageTitle": "Integrating WordPress with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Layout from \"../layouts/Layout.astro\";\n\nlet res = await fetch(\"https://norian.studio/wp-json/wp/v2/dinos\");\nlet posts = await res.json();\n---\n<Layout title=\"Dinos!\">\n  <section>\n    <h1>List of Dinosaurs</h1>\n    {\n      posts.map((post) => (\n        <article>\n          <h2>\n            <a href={`/dinos/${post.slug}/`} set:html={post.title.rendered} />\n          </h2>\n          <Fragment set:html={post.content.rendered} />\n        </article>\n      ))\n    }\n  </section>\n</Layout>"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Displaying Content Collection Data in Astro Templates",
    "codeDescription": "Example showing how to access and display content collection data in an Astro component template, creating a list of blog post links.",
    "codeLanguage": "astro",
    "codeTokens": 100,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_13",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { getCollection } from 'astro:content';\nconst posts = await getCollection('blog');\n---\n<h1>My posts</h1>\n<ul>\n  {posts.map(post => (\n    <li><a href={`/blog/${post.id}`}>{post.data.title}</a></li>\n  ))}\n</ul>"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Creating a Dynamic API Endpoint in Astro",
    "codeDescription": "JavaScript endpoint example that generates a random number on each request. The 'prerender = false' setting ensures it's rendered on demand rather than at build time.",
    "codeLanguage": "js",
    "codeTokens": 94,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/on-demand-rendering.mdx#2025-04-08_snippet_4",
    "pageTitle": "On-demand rendering in Astro",
    "codeList": [
      {
        "language": "js",
        "code": "export const prerender = false;\n\nexport async function GET() {\n  let number = Math.random();\n  return new Response(\n    JSON.stringify({\n      number,\n      message: `Here's a random number: ${number}`,\n    }),\n  );\n}"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Querying Turso Database in Astro Component",
    "codeDescription": "Astro component example demonstrating how to execute a SQL query to fetch and display posts from a Turso database.",
    "codeLanguage": "astro",
    "codeTokens": 86,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/backend/turso.mdx#2025-04-08_snippet_3",
    "pageTitle": "Integrating Turso Database with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { turso } from '../turso'\n\nconst { rows } = await turso.execute('SELECT * FROM posts')\n---\n\n<ul>\n  {rows.map((post) => (\n    <li>{post.title}</li>\n  ))}\n</ul>"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Using orThrow for Direct Data Access",
    "codeDescription": "This snippet shows how to use the .orThrow() property on action calls to directly access the returned data without explicit error handling, which is useful for prototyping or when using frameworks that handle errors.",
    "codeLanguage": "typescript",
    "codeTokens": 76,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#2025-04-08_snippet_7",
    "pageTitle": "Astro Actions: Type-safe Server Functions",
    "codeList": [
      {
        "language": "typescript",
        "code": "const updatedLikes = await actions.likePost.orThrow({ postId: 'example' });\n//    ^ type: number"
      }
    ],
    "relevance": 0.971
  },
  {
    "codeTitle": "Starting Astro Development Server",
    "codeDescription": "Example of using the dev() function to programmatically start Astro's development server with custom root directory configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/programmatic-reference.mdx#2025-04-08_snippet_1",
    "pageTitle": "Programmatic Astro API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { dev } from \"astro\";\n\nconst devServer = await dev({\n  root: \"./my-project\",\n});\n\n// Stop the server if needed\nawait devServer.stop();"
      }
    ],
    "relevance": 0.971
  },
  {
    "codeTitle": "Implementing Form Submission Handler in Solid",
    "codeDescription": "An enhanced SolidJS form component that uses the createResource pattern to handle form submission. It prevents default form submission, creates a FormData object, and sends it to the API endpoint using a separate async function, then displays the response message.",
    "codeLanguage": "tsx",
    "codeTokens": 308,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/build-forms-api.mdx#2025-04-08_snippet_9",
    "pageTitle": "Building Forms with API Routes in Astro",
    "codeList": [
      {
        "language": "tsx",
        "code": "import { createSignal, createResource, Suspense } from \"solid-js\";\n\nasync function postFormData(formData: FormData) {\n  const response = await fetch(\"/api/feedback\", {\n    method: \"POST\",\n    body: formData,\n  });\n  const data = await response.json();\n  return data;\n}\n\nexport default function Form() {\n  const [formData, setFormData] = createSignal<FormData>();\n  const [response] = createResource(formData, postFormData);\n\n  function submit(e: SubmitEvent) {\n    e.preventDefault();\n    setFormData(new FormData(e.target as HTMLFormElement));\n  }\n\n  return (\n    <form onSubmit={submit}>\n      <label>\n        Name\n        <input type=\"text\" id=\"name\" name=\"name\" required />\n      </label>\n      <label>\n        Email\n        <input type=\"email\" id=\"email\" name=\"email\" required />\n      </label>\n      <label>\n        Message\n        <textarea id=\"message\" name=\"message\" required />\n      </label>\n      <button>Send</button>\n      <Suspense>{response() && <p>{response().message}</p>}</Suspense>\n    </form>\n  );\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Setting Up Content Collections Configuration File in Astro",
    "codeDescription": "Basic structure of the src/content.config.ts file used to define content collections. This shows importing utilities, defining collections, and exporting the collections object for registration.",
    "codeLanguage": "typescript",
    "codeTokens": 141,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_1",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// 1. Import utilities from `astro:content`\nimport { defineCollection, z } from 'astro:content';\n\n// 2. Import loader(s)\nimport { glob, file } from 'astro/loaders';\n\n// 3. Define your collection(s)\nconst blog = defineCollection({ /* ... */ });\nconst dogs = defineCollection({ /* ... */ });\n\n// 4. Export a single `collections` object to register your collection(s)\nexport const collections = { blog, dogs };"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Installing Cloudflare Adapter with NPM",
    "codeDescription": "Command to install the Cloudflare adapter using the Astro add command with NPM package manager.",
    "codeLanguage": "sh",
    "codeTokens": 36,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/cloudflare.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Cloudflare Adapter Integration Guide",
    "codeList": [
      {
        "language": "sh",
        "code": "npx astro add cloudflare"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Nesting Hydrated Framework Components in Astro",
    "codeDescription": "This snippet shows how to nest hydrated framework components within other components in an Astro file. It demonstrates using React and Svelte components together.",
    "codeLanguage": "astro",
    "codeTokens": 140,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/framework-components.mdx#2025-04-08_snippet_6",
    "pageTitle": "Using Front-end Frameworks in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport MyReactSidebar from '../components/MyReactSidebar.jsx';\nimport MyReactButton from '../components/MyReactButton.jsx';\nimport MySvelteButton from '../components/MySvelteButton.svelte';\n---\n<MyReactSidebar>\n  <p>Here is a sidebar with some text and a button.</p>\n  <div slot=\"actions\">\n    <MyReactButton client:idle />\n    <MySvelteButton client:idle />\n  </div>\n</MyReactSidebar>"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Querying Collections with getCollection in Astro Components",
    "codeDescription": "Demonstrates how to query content collections in Astro components using the getCollection function. Shows both retrieving all entries and filtering entries based on frontmatter data.",
    "codeLanguage": "astro",
    "codeTokens": 117,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-content.mdx#2025-04-08_snippet_3",
    "pageTitle": "Content Collections API Reference for Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { getCollection } from 'astro:content';\n\n// Get all `src/content/blog/` entries\nconst allBlogPosts = await getCollection('blog');\n\n// Only return posts with `draft: true` in the frontmatter\nconst draftBlogPosts = await getCollection('blog', ({ data }) => {\n  return data.draft === true;\n});\n---"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating a nested BlogPostLayout with BaseLayout in Astro",
    "codeDescription": "This code demonstrates how to create a BlogPostLayout component that imports and uses a BaseLayout component. It passes the frontmatter.url prop to the BaseLayout while adding blog-specific elements like title and author information before the slot content.",
    "codeLanguage": "astro",
    "codeTokens": 131,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/layouts.mdx#2025-04-08_snippet_4",
    "pageTitle": "Astro Layouts Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/layouts/BlogPostLayout.astro\nimport BaseLayout from './BaseLayout.astro';\nconst { frontmatter } = Astro.props;\n---\n<BaseLayout url={frontmatter.url}>\n  <h1>{frontmatter.title}</h1>\n  <h2>Post author: {frontmatter.author}</h2>\n  <slot />\n</BaseLayout>"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating Dynamic Tag Pages with getStaticPaths() in Astro",
    "codeDescription": "This snippet demonstrates how to create a dynamic tag page template that generates multiple routes based on tags using Astro's getStaticPaths() function. It returns an array of route objects with tag parameters.",
    "codeLanguage": "astro",
    "codeTokens": 183,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/5-astro-api/2.mdx#2025-04-08_snippet_0",
    "pageTitle": "Generating Tag Pages in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\n\nexport async function getStaticPaths() {\n  return [\n    { params: { tag: \"astro\" } },\n    { params: { tag: \"successes\" } },\n    { params: { tag: \"community\" } },\n    { params: { tag: \"blogging\" } },\n    { params: { tag: \"setbacks\" } },\n    { params: { tag: \"learning in public\" } },\n  ];\n}\n\nconst { tag } = Astro.params;\n---\n<BaseLayout pageTitle={tag}>\n  <p>Posts tagged with {tag}</p>\n</BaseLayout>"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating a Layout for Markdown Blog Posts",
    "codeDescription": "This snippet shows a layout component designed specifically for Markdown blog posts. It accesses frontmatter data from the Markdown file and provides structure around the Markdown content rendered in the slot.",
    "codeLanguage": "astro",
    "codeTokens": 215,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/pl/basics/layouts.mdx#2025-04-08_snippet_4",
    "pageTitle": "Astro Layout Components",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// 1. Prop frontmatter umożliwia dostęp do frontmatteru strony Markdown i innych danych.\nconst { frontmatter } = Astro.props;\n---\n<html>\n  <head>\n    <!-- Tutaj dodaj inne elementy <head>, jak style czy tagi meta. -->\n    <title>{frontmatter.title}</title>\n  </head>\n  <body>\n    <!-- Tutaj wstaw inne elementy UI, jak nagłówki czy stopki. -->\n    <h1>{frontmatter.title} przez {frontmatter.author}</h1>\n    <!-- 2. Wyrenderowany HTML będzie przekazany do domyślnego slotu. -->\n    <slot />\n    <p>Napisane dnia: {frontmatter.date}</p>\n  </body>\n</html>"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Using Action Results in Astro Components",
    "codeDescription": "Example showing how to retrieve and use the result of an Action submission in an Astro component to display error messages if needed.",
    "codeLanguage": "astro",
    "codeTokens": 95,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_24",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { actions } from 'astro:actions';\n\nconst result = Astro.getActionResult(actions.logout);\n---\n\n<form action={actions.logout}>\n  <button type=\"submit\">Log out</button>\n</form>\n{result?.error && <p>Failed to log out. Please try again.</p>}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Accessing Referenced Data in Astro Content Collections",
    "codeDescription": "Shows how to use getEntry() and getEntries() to retrieve referenced data from content collections.",
    "codeLanguage": "astro",
    "codeTokens": 205,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_18",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { getEntry, getEntries } from 'astro:content';\n\nconst blogPost = await getEntry('blog', 'welcome');\n\n// Resolve a singular reference (e.g. `{collection: \"authors\", id: \"ben-holmes\"}`)\nconst author = await getEntry(blogPost.data.author);\n// Resolve an array of references\n// (e.g. `[{collection: \"blog\", id: \"about-me\"}, {collection: \"blog\", id: \"my-year-in-review\"}]`)\nconst relatedPosts = await getEntries(blogPost.data.relatedPosts);\n---\n\n<h1>{blogPost.data.title}</h1>\n<p>Author: {author.data.name}</p>\n\n<!-- ... -->\n\n<h2>You might also like:</h2>\n{relatedPosts.map(post => (\n  <a href={post.id}>{post.data.title}</a>\n))}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating Basic Astro Layout Component",
    "codeDescription": "Demonstrates how to create a basic site layout component with navigation, header and footer. Shows usage of slots for content injection and props for dynamic content.",
    "codeLanguage": "astro",
    "codeTokens": 229,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/layouts.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Layouts Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/layouts/MySiteLayout.astro\nimport BaseHead from '../components/BaseHead.astro';\nimport Footer from '../components/Footer.astro';\nconst { title } = Astro.props;\n---\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <BaseHead title={title}/>\n  </head>\n  <body>\n    <nav>\n      <a href=\"#\">Home</a>\n      <a href=\"#\">Posts</a>\n      <a href=\"#\">Contact</a>\n    </nav>\n    <h1>{title}</h1>\n    <article>\n      <slot /> <!-- your content is injected here -->\n    </article>\n    <Footer />\n  </body>\n  <style>\n    h1 {\n      font-size: 2rem;\n    }\n  </style>\n</html>"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Generating Static Routes from Content Collections in Astro",
    "codeDescription": "Demonstrates how to use getStaticPaths() to generate static routes for each entry in a content collection.",
    "codeLanguage": "astro",
    "codeTokens": 165,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/guides/content-collections.mdx#2025-04-08_snippet_4",
    "pageTitle": "Querying and Rendering Content Collections in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { getCollection, render } from 'astro:content';\n// 1. Génére un nouveau chemin pour chaque entrée de collection\nexport async function getStaticPaths() {\n  const posts = await getCollection('blog');\n  return posts.map(post => ({\n    params: { id: post.id },\n    props: { post },\n  }));\n}\n// 2. Pour votre modèle, vous pouvez obtenir l'entrée directement à partir de la propriété\nconst { post } = Astro.props;\nconst { Content } = await render(post);\n---\n<h1>{post.data.title}</h1>\n<Content />"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Importing Content Collection API Components from astro:content",
    "codeDescription": "Shows the import statement for accessing all available utilities from the astro:content module, including collection definition, query functions, and the Zod validation library.",
    "codeLanguage": "js",
    "codeTokens": 77,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-content.mdx#2025-04-08_snippet_0",
    "pageTitle": "Content Collections API Reference for Astro",
    "codeList": [
      {
        "language": "js",
        "code": "import { \n  z,\n  defineCollection,\n  getCollection,\n  getEntry,\n  getEntries,\n  reference,\n  render\n } from 'astro:content';"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Adding Custom Vite Plugins to Astro",
    "codeDescription": "Example demonstrating how to add custom Vite plugins directly to an Astro project configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 54,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/configuration-reference.mdx#2025-04-08_snippet_21",
    "pageTitle": "Astro Configuration Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "{\n  vite: {\n    // Example: Add custom vite plugins directly to your Astro project\n    plugins: [myPlugin()],\n  }\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Type-Safe Database Operations in Astro DB Integrations",
    "codeDescription": "This example demonstrates how to perform type-safe database operations within an Astro DB integration using the asDrizzleTable() utility. It shows inserting rows into a 'Pets' table with full type checking.",
    "codeLanguage": "typescript",
    "codeTokens": 153,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/astro-db.mdx#2025-04-08_snippet_26",
    "pageTitle": "Astro DB Configuration and Setup Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "// my-integration/seed.ts\nimport { asDrizzleTable } from '@astrojs/db/utils';\nimport { db } from 'astro:db';\nimport { Pets } from './config';\n\nexport default async function() {\n  const typeSafePets = asDrizzleTable('Pets', Pets);\n\n  await db.insert(typeSafePets).values([\n    { name: 'Palomita', species: 'cat' },\n    { name: 'Pan', species: 'dog' },\n  ]);\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating a Markdown Post Layout Component in Astro",
    "codeDescription": "Basic layout component that receives frontmatter data as props and renders blog post content using slots.",
    "codeLanguage": "astro",
    "codeTokens": 76,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/4-layouts/2.mdx#2025-04-08_snippet_0",
    "pageTitle": "Creating and Using Markdown Post Layouts in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst { frontmatter } = Astro.props;\n---\n<meta charset=\"utf-8\" />\n<h1>{frontmatter.title}</h1>\n<p>Written by {frontmatter.author}</p>\n<slot />"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Building Astro DB Integrations in TypeScript",
    "codeDescription": "This snippet demonstrates how to create an Astro integration that extends Astro DB with additional tables and seed data. It uses the defineDbIntegration() helper and the astro:db:setup hook.",
    "codeLanguage": "typescript",
    "codeTokens": 158,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/astro-db.mdx#2025-04-08_snippet_24",
    "pageTitle": "Astro DB Configuration and Setup Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "// my-integration/index.ts\nimport { defineDbIntegration } from '@astrojs/db/utils';\n\nexport default function MyIntegration() {\n  return defineDbIntegration({\n    name: 'my-astro-db-powered-integration',\n    hooks: {\n      'astro:db:setup': ({ extendDb }) => {\n        extendDb({\n          configEntrypoint: '@astronaut/my-package/config',\n          seedEntrypoint: '@astronaut/my-package/seed',\n        });\n      },\n      // Other integration hooks...\n    },\n  });\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Implementing External Image Service in Astro",
    "codeDescription": "A code example showing how to create an external image service that points to a remote URL. The service validates image options, constructs the CDN URL, and sets HTML attributes for the final image tag.",
    "codeLanguage": "javascript",
    "codeTokens": 273,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/image-service-reference.mdx#2025-04-08_snippet_0",
    "pageTitle": "Building Image Services with Astro's API",
    "codeList": [
      {
        "language": "javascript",
        "code": "import type { ExternalImageService, ImageTransform, AstroConfig } from \"astro\";\n\nconst service: ExternalImageService = {\n  validateOptions(options: ImageTransform, imageConfig: AstroConfig['image']) {\n    const serviceConfig = imageConfig.service.config;\n\n    // Enforce the user set max width.\n    if (options.width > serviceConfig.maxWidth) {\n      console.warn(`Image width ${options.width} exceeds max width ${serviceConfig.maxWidth}. Falling back to max width.`);\n      options.width = serviceConfig.maxWidth;\n    }\n\n    return options;\n  },\n  getURL(options, imageConfig) {\n    return `https://mysupercdn.com/${options.src}?q=${options.quality}&w=${options.width}&h=${options.height}`;\n  },\n  getHTMLAttributes(options, imageConfig) {\n    const { src, format, quality, ...attributes } = options;\n\t\treturn {\n\t\t\t...attributes,\n\t\t\tloading: options.loading ?? 'lazy',\n\t\t\tdecoding: options.decoding ?? 'async',\n\t\t};\n\t}\n};\n\n\nexport default service;"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Installing Fontsource Package with npm",
    "codeDescription": "Command to install a specific font package (Twinkle Star) from Fontsource using npm package manager.",
    "codeLanguage": "shell",
    "codeTokens": 41,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/fonts.mdx#2025-04-08_snippet_2",
    "pageTitle": "Using Custom Fonts in Astro Websites",
    "codeList": [
      {
        "language": "shell",
        "code": "npm install @fontsource/twinkle-star"
      }
    ],
    "relevance": 0.969
  },
  {
    "codeTitle": "Implementing a loading spinner for Astro view transitions",
    "codeDescription": "Demonstrates using the astro:before-preparation event to show a loading spinner before content is loaded and hide it after loading completes, using a custom loader callback for asynchronous execution.",
    "codeLanguage": "astro",
    "codeTokens": 117,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/view-transitions.mdx#2025-04-08_snippet_14",
    "pageTitle": "Implementing View Transitions in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "<script is:inline>\n  document.addEventListener(\"astro:before-preparation\", (event) => {\n    const originalLoader = event.loader;\n    event.loader = async function () {\n      const { startSpinner } = await import(\"./spinner.js\");\n      const stop = startSpinner();\n      await originalLoader();\n      stop();\n    };\n  });\n</script>"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Accessing Middleware Data in Astro Components",
    "codeDescription": "Shows how to access data modified by middleware in an Astro component file using Astro.locals.",
    "codeLanguage": "astro",
    "codeTokens": 57,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/middleware.mdx#2025-04-08_snippet_1",
    "pageTitle": "Implementing Middleware in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst data = Astro.locals;\n---\n<h1>{data.title}</h1>\n<p>This {data.property} is from middleware.</p>"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Setting Response Headers in Astro Components",
    "codeDescription": "Example demonstrating how to set HTTP response headers like cookies in an Astro component using Astro.response.headers.",
    "codeLanguage": "astro",
    "codeTokens": 48,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_12",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nAstro.response.headers.set('Set-Cookie', 'a=b; Path=/;');\n---"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Getting Astro Environment Info",
    "codeDescription": "Command to display information about the current Astro environment, including version numbers and system details.",
    "codeLanguage": "shell",
    "codeTokens": 29,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/cli-reference.mdx#2025-04-08_snippet_15",
    "pageTitle": "Astro CLI Commands Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "astro info"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Installing Required Packages with pnpm for Reading Time Calculation",
    "codeDescription": "Command to install the reading-time and mdast-util-to-string packages using pnpm. These packages are required to calculate reading time and extract text from markdown files.",
    "codeLanguage": "shell",
    "codeTokens": 58,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/reading-time.mdx#2025-04-08_snippet_1",
    "pageTitle": "Adding Reading Time to Astro Markdown or MDX Files",
    "codeList": [
      {
        "language": "shell",
        "code": "pnpm add reading-time mdast-util-to-string"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Setting Response Headers in Astro Components",
    "codeDescription": "Example demonstrating how to set HTTP response headers like cookies in an Astro component using Astro.response.headers.",
    "codeLanguage": "astro",
    "codeTokens": 48,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_12",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nAstro.response.headers.set('Set-Cookie', 'a=b; Path=/;');\n---"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Configuring Astro Project in JavaScript",
    "codeDescription": "This code snippet represents the Astro configuration file, typically named astro.config.mjs. It's used to specify project settings, integrations, and build options.",
    "codeLanguage": "javascript",
    "codeTokens": 46,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/project-structure.mdx#2025-04-08_snippet_1",
    "pageTitle": "Astro Project Structure Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "- astro.config.mjs"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Configuring Alpine.js with Custom Entrypoint in Astro",
    "codeDescription": "Advanced configuration for Alpine.js integration with a custom entrypoint file that allows for plugins and customizations.",
    "codeLanguage": "js",
    "codeTokens": 80,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/alpinejs.mdx#2025-04-08_snippet_10",
    "pageTitle": "Alpine.js Integration with Astro",
    "codeList": [
      {
        "language": "js",
        "code": "import { defineConfig } from 'astro/config';\nimport alpine from '@astrojs/alpinejs';\n\nexport default defineConfig({\n  // ...\n  integrations: [alpine({ entrypoint: '/src/entrypoint' })],\n});"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Blocking Data Fetches in Astro Page",
    "codeDescription": "This snippet shows an Astro page with blocking data fetches in the frontmatter. All fetch calls must resolve before any HTML is sent to the browser.",
    "codeLanguage": "astro",
    "codeTokens": 178,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/streaming-improve-page-performance.mdx#2025-04-08_snippet_0",
    "pageTitle": "Using Streaming to Improve Page Performance in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst personResponse = await fetch('https://randomuser.me/api/');\nconst personData = await personResponse.json();\nconst randomPerson = personData.results[0];\nconst factResponse = await fetch('https://catfact.ninja/fact');\nconst factData = await factResponse.json();\n---\n<html>\n  <head>\n    <title>A name and a fact</title>\n  </head>\n  <body>\n    <h2>A name</h2>\n    <p>{randomPerson.name.first}</p>\n    <h2>A fact</h2>\n    <p>{factData.fact}</p>\n  </body>\n</html>"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Creating a Custom Element with Data Attributes in Astro",
    "codeDescription": "This snippet demonstrates how to pass a message from Astro's server-side component script to a custom element using data attributes. The custom element reads the data attribute value in its connectedCallback method and uses it to display an alert when a button is clicked.",
    "codeLanguage": "astro",
    "codeTokens": 190,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/client-side-scripts.mdx#2025-04-08_snippet_4",
    "pageTitle": "Script and Event Handling in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst { message = 'Welcome, world!' } = Astro.props;\n---\n\n<!-- Store the message prop as a data attribute. -->\n<astro-greet data-message={message}>\n  <button>Say hi!</button>\n</astro-greet>\n\n<script>\n  class AstroGreet extends HTMLElement {\n    connectedCallback() {\n      // Read the message from the data attribute.\n      const message = this.dataset.message;\n      const button = this.querySelector('button');\n      button.addEventListener('click', () => {\n        alert(message);\n      });\n\t\t}\n  }\n\n  customElements.define('astro-greet', AstroGreet);\n</script>"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Setting Response Headers in Astro Components",
    "codeDescription": "Example demonstrating how to set HTTP response headers like cookies in an Astro component using Astro.response.headers.",
    "codeLanguage": "astro",
    "codeTokens": 48,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_12",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nAstro.response.headers.set('Set-Cookie', 'a=b; Path=/;');\n---"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Creating a Custom Element with Data Attributes in Astro",
    "codeDescription": "This snippet demonstrates how to pass a message from Astro's server-side component script to a custom element using data attributes. The custom element reads the data attribute value in its connectedCallback method and uses it to display an alert when a button is clicked.",
    "codeLanguage": "astro",
    "codeTokens": 190,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/client-side-scripts.mdx#2025-04-08_snippet_4",
    "pageTitle": "Script and Event Handling in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst { message = 'Welcome, world!' } = Astro.props;\n---\n\n<!-- Store the message prop as a data attribute. -->\n<astro-greet data-message={message}>\n  <button>Say hi!</button>\n</astro-greet>\n\n<script>\n  class AstroGreet extends HTMLElement {\n    connectedCallback() {\n      // Read the message from the data attribute.\n      const message = this.dataset.message;\n      const button = this.querySelector('button');\n      button.addEventListener('click', () => {\n        alert(message);\n      });\n\t\t}\n  }\n\n  customElements.define('astro-greet', AstroGreet);\n</script>"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Installing Required Packages with pnpm for Reading Time Calculation",
    "codeDescription": "Command to install the reading-time and mdast-util-to-string packages using pnpm. These packages are required to calculate reading time and extract text from markdown files.",
    "codeLanguage": "shell",
    "codeTokens": 58,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/reading-time.mdx#2025-04-08_snippet_1",
    "pageTitle": "Adding Reading Time to Astro Markdown or MDX Files",
    "codeList": [
      {
        "language": "shell",
        "code": "pnpm add reading-time mdast-util-to-string"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Accessing Middleware Data in Astro Components",
    "codeDescription": "Shows how to access data modified by middleware in an Astro component file using Astro.locals.",
    "codeLanguage": "astro",
    "codeTokens": 57,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/middleware.mdx#2025-04-08_snippet_1",
    "pageTitle": "Implementing Middleware in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst data = Astro.locals;\n---\n<h1>{data.title}</h1>\n<p>This {data.property} is from middleware.</p>"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Creating a Custom Element with Data Attributes in Astro",
    "codeDescription": "This snippet demonstrates how to pass a message from Astro's server-side component script to a custom element using data attributes. The custom element reads the data attribute value in its connectedCallback method and uses it to display an alert when a button is clicked.",
    "codeLanguage": "astro",
    "codeTokens": 190,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/client-side-scripts.mdx#2025-04-08_snippet_4",
    "pageTitle": "Script and Event Handling in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst { message = 'Welcome, world!' } = Astro.props;\n---\n\n<!-- Store the message prop as a data attribute. -->\n<astro-greet data-message={message}>\n  <button>Say hi!</button>\n</astro-greet>\n\n<script>\n  class AstroGreet extends HTMLElement {\n    connectedCallback() {\n      // Read the message from the data attribute.\n      const message = this.dataset.message;\n      const button = this.querySelector('button');\n      button.addEventListener('click', () => {\n        alert(message);\n      });\n\t\t}\n  }\n\n  customElements.define('astro-greet', AstroGreet);\n</script>"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Pages Local Preview",
    "codeDescription": "Commands to build and preview Astro site locally using Wrangler Pages",
    "codeLanguage": "bash",
    "codeTokens": 38,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/deploy/cloudflare.mdx#2025-04-08_snippet_6",
    "pageTitle": "Cloudflare Deployment Guide for Astro Sites",
    "codeList": [
      {
        "language": "bash",
        "code": "npx astro build && npx wrangler pages dev ./dist"
      }
    ],
    "relevance": 0.967
  },
  {
    "codeTitle": "Accessing Cloudflare Runtime in Astro Components",
    "codeDescription": "Example showing how to access Cloudflare environment variables and bindings from within an Astro component using Astro.locals.runtime.",
    "codeLanguage": "astro",
    "codeTokens": 44,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/cloudflare.mdx#2025-04-08_snippet_10",
    "pageTitle": "Astro Cloudflare Adapter Integration Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst { env } = Astro.locals.runtime;\n---"
      }
    ],
    "relevance": 0.967
  },
  {
    "codeTitle": "Using Transition Directives in Astro Components",
    "codeDescription": "These snippets demonstrate the usage of transition directives in Astro components for naming transitions and persisting elements across page navigations.",
    "codeLanguage": "astro",
    "codeTokens": 43,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/view-transitions.mdx#2025-04-08_snippet_2",
    "pageTitle": "Implementing View Transitions in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "<aside transition:name=\"hero\">"
      },
      {
        "language": "astro",
        "code": "<video controls muted autoplay transition:persist>\n  <source\n    src=\"https://ia804502.us.archive.org/33/items/GoldenGa1939_3/GoldenGa1939_3_512kb.mp4\"\n    type=\"video/mp4\"\n  />\n</video>"
      },
      {
        "language": "astro",
        "code": "<Counter client:load transition:persist initialCount={5} />"
      }
    ],
    "relevance": 0.967
  },
  {
    "codeTitle": "Managing Astro User Preferences",
    "codeDescription": "Commands for managing user preferences in Astro projects, including listing, enabling, disabling, and resetting preferences.",
    "codeLanguage": "shell",
    "codeTokens": 33,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/cli-reference.mdx#2025-04-08_snippet_16",
    "pageTitle": "Astro CLI Commands Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "astro preferences list"
      },
      {
        "language": "shell",
        "code": "astro preferences disable devToolbar"
      },
      {
        "language": "shell",
        "code": "astro preferences disable --global devToolbar"
      },
      {
        "language": "shell",
        "code": "astro preferences enable devToolbar"
      },
      {
        "language": "shell",
        "code": "astro preferences reset devToolbar"
      }
    ],
    "relevance": 0.966
  },
  {
    "codeTitle": "Implementing Auth.js login/logout buttons",
    "codeDescription": "Adding login and logout functionality using Auth.js in an Astro component.",
    "codeLanguage": "astro",
    "codeTokens": 114,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/authentication.mdx#2025-04-08_snippet_5",
    "pageTitle": "Authentication in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Layout from 'src/layouts/Base.astro';\n---\n<Layout>\n  <button id=\"login\">Login</button>\n  <button id=\"logout\">Logout</button>\n\n  <script>\n    const { signIn, signOut } = await import(\"auth-astro/client\")\n    document.querySelector(\"#login\").onclick = () => signIn(\"github\")\n    document.querySelector(\"#logout\").onclick = () => signOut()\n  </script>\n</Layout>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Fetching and Rendering Statamic Data using GraphQL in Astro",
    "codeDescription": "This snippet shows how to fetch data from Statamic's GraphQL API and render it in an Astro component. It defines a GraphQL query to retrieve posts from a collection and displays their titles and content.",
    "codeLanguage": "astro",
    "codeTokens": 281,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/statamic.mdx#2025-04-08_snippet_1",
    "pageTitle": "Integrating Statamic CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst graphqlQuery = {\n  query: `\n    query Entries($page: Int, $locale: String) {\n      entries(\n        collection: \"posts\"\n        sort: \"date asc\"\n        limit: 20\n        page: $page\n        filter: { locale: $locale }\n      ) {\n        current_page\n        has_more_pages\n        data {\n          title\n          ... on Entry_Posts_Post {\n              content\n            }\n        }\n      }\n    }\n  `,\n  variables: {\n    page: page,\n    locale: locale,\n  },\n};\n\nconst res = await fetch(\"https://[YOUR-SITE]/graphql\", {\n  method: \"POST\",\n  headers: { \"Content-Type\": \"application/json\" },\n  body: JSON.stringify(graphqlQuery),\n})\n\nconst { data } = await res.json();\nconst entries = data?.entries;\n---\n<h1>Astro + Statamic 🚀</h1>\n{\n  entries.data.map((post) => (\n      <h2 set:html={post.title} />\n      <p set:html={post.content} />\n  ))\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Vite Plugin in Astro Integration",
    "codeDescription": "This example demonstrates how to add a Vite plugin to the user's project configuration using the updateConfig function in the astro:config:setup hook.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/integrations-reference.mdx#2025-04-08_snippet_1",
    "pageTitle": "Astro Integration API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import bananaCSS from '@vitejs/official-banana-css-plugin';\n\nexport default {\n  name: 'banana-css-integration',\n  hooks: {\n    'astro:config:setup': ({ updateConfig }) => {\n      updateConfig({\n        vite: {\n          plugins: [bananaCSS()],\n        }\n      })\n    }\n  }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Defining an Action with Input Validation in TypeScript",
    "codeDescription": "Demonstrates how to define an action with Zod schema validation for the input parameters. This example creates a getGreeting action that accepts a name string and returns a greeting message.",
    "codeLanguage": "typescript",
    "codeTokens": 121,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-actions.mdx#2025-04-08_snippet_1",
    "pageTitle": "Astro Actions API Reference",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineAction } from 'astro:actions';\nimport { z } from 'astro:schema';\n\nexport const server = {\n  getGreeting: defineAction({\n    input: z.object({\n      name: z.string(),\n    }),\n    handler: async (input, context) => {\n      return `Hello, ${input.name}!`\n    }\n  })\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Initializing Astro Configuration in JavaScript",
    "codeDescription": "Basic setup for an Astro configuration file using the defineConfig function. This allows you to specify various options for your Astro project.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/reference/configuration-reference.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Configuration Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "// astro.config.mjs\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n  // tus opciones de configuración aquí...\n})"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Handling Action Errors in Preact Component",
    "codeDescription": "This snippet shows how to handle an ActionError in a Preact component. It implements a LikeButton that checks for UNAUTHORIZED errors and conditionally displays a login link when needed.",
    "codeLanguage": "tsx",
    "codeTokens": 197,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#2025-04-08_snippet_9",
    "pageTitle": "Astro Actions: Type-safe Server Functions",
    "codeList": [
      {
        "language": "tsx",
        "code": "import { actions } from 'astro:actions';\nimport { useState } from 'preact/hooks';\n\nexport function LikeButton({ postId }: { postId: string }) {\n  const [showLogin, setShowLogin] = useState(false);\n  return (\n    <>\n      {\n        showLogin && <a href=\"/signin\">Log in to like a post.</a>\n      }\n      <button onClick={async () => {\n        const { data, error } = await actions.likePost({ postId });\n        if (error?.code === 'UNAUTHORIZED') setShowLogin(true);\n        // Early return for unexpected errors\n        else if (error) return;\n        // update likes\n      }}>\n        Like\n      </button>\n    </>\n  )\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Rewriting Requests in Astro Middleware using next()",
    "codeDescription": "This snippet shows how to use the next() function in Astro middleware to rewrite the current Request without triggering a new rendering phase. It updates the Request to render a different route based on user authentication status.",
    "codeLanguage": "javascript",
    "codeTokens": 164,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/middleware.mdx#2025-04-08_snippet_10",
    "pageTitle": "Implementing Middleware in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { isLoggedIn } from \"~/auth.js\"\nexport function onRequest (context, next) {\n  if (!isLoggedIn(context)) {\n    // If the user is not logged in, update the Request to render the `/login` route and\n    // add header to indicate where the user should be sent after a successful login.\n    // Return a new `context` to any following middlewares.\n    return next(new Request(\"/login\", {\n      headers: {\n        \"x-redirect-to\": context.url.pathname\n      }\n    }));\n  }\n\n  return next();\n};"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Loading Static Stylesheets in Astro",
    "codeDescription": "This snippet demonstrates how to load static stylesheets using link tags in an Astro component. It shows both local and external stylesheet loading.",
    "codeLanguage": "astro",
    "codeTokens": 104,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/styling.mdx#2025-04-08_snippet_6",
    "pageTitle": "Styling Components in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "<head>\n  <!-- Local: /public/styles/global.css -->\n  <link rel=\"stylesheet\" href=\"/styles/global.css\" />\n  <!-- External -->\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/prismjs@1.24.1/themes/prism-tomorrow.css\" />\n</head>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Local Image Service in Astro",
    "codeDescription": "A comprehensive example of creating a local image service with methods for URL generation, parsing, image transformation, and HTML attribute handling. This service can be used with Astro's built-in endpoint or a custom endpoint.",
    "codeLanguage": "javascript",
    "codeTokens": 575,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/image-service-reference.mdx#2025-04-08_snippet_1",
    "pageTitle": "Building Image Services with Astro's API",
    "codeList": [
      {
        "language": "javascript",
        "code": "import type { LocalImageService, AstroConfig } from \"astro\";\n\nconst service: LocalImageService = {\n  getURL(options: ImageTransform, imageConfig: AstroConfig['image']) {\n    const searchParams = new URLSearchParams();\n\t\tsearchParams.append('href', typeof options.src === \"string\" ? options.src : options.src.src);\n\t\toptions.width && searchParams.append('w', options.width.toString());\n\t\toptions.height && searchParams.append('h', options.height.toString());\n\t\toptions.quality && searchParams.append('q', options.quality.toString());\n\t\toptions.format && searchParams.append('f', options.format);\n    return `/my_custom_endpoint_that_transforms_images?${searchParams}`;\n    // Or use the built-in endpoint, which will call your parseURL and transform functions:\n    // return `/_image?${searchParams}`;\n  },\n  parseURL(url: URL, imageConfig) {\n    return {\n      src: params.get('href')!,\n      width: params.has('w') ? parseInt(params.get('w')!) : undefined,\n      height: params.has('h') ? parseInt(params.get('h')!) : undefined,\n\t\t\tformat: params.get('f'),\n      quality: params.get('q'),\n    };\n  },\n  transform(buffer: Uint8Array, options: { src: string, [key: string]: any }, imageConfig): { data: Uint8Array, format: OutputFormat } {\n    const { buffer } = mySuperLibraryThatEncodesImages(options);\n    return {\n      data: buffer,\n      format: options.format,\n    };\n  },\n  getHTMLAttributes(options, imageConfig) {\n\t\tlet targetWidth = options.width;\n\t\tlet targetHeight = options.height;\n\t\tif (typeof options.src === \"object\") {\n\t\t\tconst aspectRatio = options.src.width / options.src.height;\n\n\t\t\tif (targetHeight && !targetWidth) {\n\t\t\t\ttargetWidth = Math.round(targetHeight * aspectRatio);\n\t\t\t} else if (targetWidth && !targetHeight) {\n\t\t\t\ttargetHeight = Math.round(targetWidth / aspectRatio);\n\t\t\t}\n\t\t}\n\n\t\tconst { src, width, height, format, quality, ...attributes } = options;\n\n\t\treturn {\n\t\t\t...attributes,\n\t\t\twidth: targetWidth,\n\t\t\theight: targetHeight,\n\t\t\tloading: attributes.loading ?? 'lazy',\n\t\t\tdecoding: attributes.decoding ?? 'async',\n\t\t};\n\t},\n  propertiesToHash: ['src', 'width', 'height', 'format', 'quality'], \n};\nexport default service;"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Fetching and Rendering Storyblok Content in Astro",
    "codeDescription": "Creates an Astro page that fetches content from Storyblok using the API and renders it using the StoryblokComponent. It handles both draft and published versions based on the environment.",
    "codeLanguage": "astro",
    "codeTokens": 155,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/storyblok.mdx#2025-04-08_snippet_5",
    "pageTitle": "Integrating Storyblok CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { useStoryblokApi } from '@storyblok/astro'\nimport StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'\n\nconst storyblokApi = useStoryblokApi()\n\nconst { data } = await storyblokApi.get(\"cdn/stories/test-post\", {\n  version: import.meta.env.DEV ? \"draft\" : \"published\",\n});\n\nconst content = data.story.content;\n---\n<StoryblokComponent blok={content} />"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Fetching and Rendering Statamic Data using GraphQL in Astro",
    "codeDescription": "This snippet shows how to fetch data from Statamic's GraphQL API and render it in an Astro component. It defines a GraphQL query to retrieve posts from a collection and displays their titles and content.",
    "codeLanguage": "astro",
    "codeTokens": 281,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/statamic.mdx#2025-04-08_snippet_1",
    "pageTitle": "Integrating Statamic CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst graphqlQuery = {\n  query: `\n    query Entries($page: Int, $locale: String) {\n      entries(\n        collection: \"posts\"\n        sort: \"date asc\"\n        limit: 20\n        page: $page\n        filter: { locale: $locale }\n      ) {\n        current_page\n        has_more_pages\n        data {\n          title\n          ... on Entry_Posts_Post {\n              content\n            }\n        }\n      }\n    }\n  `,\n  variables: {\n    page: page,\n    locale: locale,\n  },\n};\n\nconst res = await fetch(\"https://[YOUR-SITE]/graphql\", {\n  method: \"POST\",\n  headers: { \"Content-Type\": \"application/json\" },\n  body: JSON.stringify(graphqlQuery),\n})\n\nconst { data } = await res.json();\nconst entries = data?.entries;\n---\n<h1>Astro + Statamic 🚀</h1>\n{\n  entries.data.map((post) => (\n      <h2 set:html={post.title} />\n      <p set:html={post.content} />\n  ))\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Defining Collection References in Astro Content Schema",
    "codeDescription": "Shows how to use the reference() function to create relationships between collections. This example creates references from blog posts to authors and related posts, enabling structured content relationships.",
    "codeLanguage": "ts",
    "codeTokens": 193,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-content.mdx#2025-04-08_snippet_2",
    "pageTitle": "Content Collections API Reference for Astro",
    "codeList": [
      {
        "language": "ts",
        "code": "import { defineCollection, reference, z } from 'astro:content';\nimport { glob, file } from 'astro/loaders';\n\nconst blog = defineCollection({\n  loader: glob({ pattern: '**/*.md', base: './src/data/blog' }),\n  schema: z.object({\n    // Reference a single author from the `authors` collection by `id`\n    author: reference('authors'),\n    // Reference an array of related posts from the `blog` collection by `slug`\n    relatedPosts: z.array(reference('blog')),\n  })\n});\n\nconst authors = defineCollection({\n  loader: file(\"src/data/authors.json\"),\n  schema: z.object({ /* ... */ })\n});\n\nexport const collections = { blog, authors };"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Creating a Custom 500 Error Page",
    "codeDescription": "This snippet demonstrates how to create a custom 500 error page in Astro. The error prop is automatically passed to the page and can be used to display error information.",
    "codeLanguage": "astro",
    "codeTokens": 80,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-pages.mdx#2025-04-08_snippet_4",
    "pageTitle": "Astro Pages and File-Based Routing",
    "codeList": [
      {
        "language": "astro",
        "code": "---\ninterface Props {\n  error: unknown;\n}\n\nconst { error } = Astro.props;\n---\n<div>{error instanceof Error ? error.message : \"Unknown error\"}</div>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Enabling Incremental Static Regeneration (ISR) in astro.config.mjs",
    "codeDescription": "Configures the Vercel adapter to use Incremental Static Regeneration, which caches on-demand rendered pages after the first request to improve performance.",
    "codeLanguage": "javascript",
    "codeTokens": 91,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/vercel.mdx#2025-04-08_snippet_13",
    "pageTitle": "Vercel Adapter for Astro Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  output: 'server',\n  adapter: vercel({\n    isr: true,\n  }),\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Defining Typed Middleware in TypeScript",
    "codeDescription": "Uses the defineMiddleware utility function to create a type-safe middleware function in TypeScript.",
    "codeLanguage": "typescript",
    "codeTokens": 64,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/middleware.mdx#2025-04-08_snippet_5",
    "pageTitle": "Using Middleware in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineMiddleware } from \"astro:middleware\";\n\n// `context` y `next` son automáticamente tipados\nexport const onRequest = defineMiddleware((context, next) => {\n\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring Import Aliases in Astro",
    "codeDescription": "Demonstrates how to set up and use import aliases in Astro projects using tsconfig.json.",
    "codeLanguage": "json",
    "codeTokens": 71,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/imports.mdx#2025-04-08_snippet_7",
    "pageTitle": "Imports Reference in Astro",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@components/*\": [\"src/components/*\"],\n      \"@assets/*\": [\"src/assets/*\"]\n    }\n  }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Fetching and Rendering Caisy CMS Content in Astro",
    "codeDescription": "This code snippet demonstrates how to fetch blog content from Caisy CMS using GraphQL and render it in an Astro dynamic route. It uses graphql-request for API communication and Caisy's rich text renderer to display content.",
    "codeLanguage": "astro",
    "codeTokens": 277,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/caisy.mdx#2025-04-08_snippet_0",
    "pageTitle": "Caisy CMS Integration with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport RichTextRenderer from '@caisy/rich-text-astro-renderer';\nimport { gql, GraphQLClient } from 'graphql-request';\n\nconst params = Astro.params;\n\nconst client = new GraphQLClient(\n\t`https://cloud.caisy.io/api/v3/e/${import.meta.env.CAISY_PROJECT_ID}/graphql`,\n\t{\n\t\theaders: {\n\t\t\t'x-caisy-apikey': import.meta.env.CAISY_API_KEY\n\t\t}\n\t}\n);\nconst gqlResponse = await client.request(\n\tgql`\n\t\tquery allBlogArticle($slug: String) {\n\t\t\tallBlogArticle(where: { slug: { eq: $slug } }) {\n\t\t\t\tedges {\n\t\t\t\t\tnode {\n\t\t\t\t\t\ttext {\n\t\t\t\t\t\t\tjson\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tslug\n\t\t\t\t\t\tid\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`,\n\t{ slug: params.slug }\n);\n\nconst post = gqlResponse?.allBlogArticle?.edges?.[0]?.node;\n---\n<h1>{post.title}</h1>\n<RichTextRenderer node={post.text.json} />"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Building Dynamic Article Pages with Astro and Strapi",
    "codeDescription": "Creates a dynamic route in Astro to generate individual pages for each Strapi article using getStaticPaths for static site generation. This implementation shows how to fetch and display detailed article content from Strapi.",
    "codeLanguage": "astro",
    "codeTokens": 277,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/strapi.mdx#2025-04-08_snippet_5",
    "pageTitle": "Strapi & Astro Integration Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport fetchApi from '../../lib/strapi';\nimport type Article from '../../interfaces/article';\n\nexport async function getStaticPaths() {\n  const articles = await fetchApi<Article[]>({\n    endpoint: 'articles',\n    wrappedByKey: 'data',\n  });\n\n  return articles.map((article) => ({\n    params: { slug: article.attributes.slug },\n    props: article,\n  }));\n}\ntype Props = Article;\n\nconst article = Astro.props;\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>{article.attributes.title}</title>\n  </head>\n\n  <body>\n    <main>\n      <img src={import.meta.env.STRAPI_URL + article.attributes.image.data.attributes.url} />\n\n      <h1>{article.attributes.title}</h1>\n\n      <!-- Render plain text -->\n      <p>{article.attributes.content}</p>\n      <!-- Render markdown -->\n      <MyMarkdownComponent>\n        {article.attributes.content}\n      </MyMarkdownComponent>\n      <!-- Render html -->\n      <Fragment set:html={article.attributes.content} />\n    </main>\n  </body>\n</html>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring Astro Project Settings",
    "codeDescription": "This example demonstrates how to configure the site URL, base path, and trailing slash behavior in an Astro project. These settings are important for generating correct URLs and sitemaps.",
    "codeLanguage": "javascript",
    "codeTokens": 87,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/configuring-astro.mdx#2025-04-08_snippet_1",
    "pageTitle": "Configuring and Customizing Astro Projects",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from \"astro/config\";\n\nexport default defineConfig({\n  site: \"https://www.example.com\",\n  base: \"/docs\",\n  trailingSlash: \"always\",\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Creating an Inline Custom Loader for Remote Data in Astro",
    "codeDescription": "Example of defining an inline async loader function to fetch data from a remote API. Shows how to fetch country data and transform it into a format compatible with Astro content collections.",
    "codeLanguage": "typescript",
    "codeTokens": 140,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_5",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const countries = defineCollection({\n  loader: async () => {\n    const response = await fetch(\"https://restcountries.com/v3.1/all\");\n    const data = await response.json();\n    // Must return an array of entries with an id property, or an object with IDs as keys and entries as values\n    return data.map((country) => ({\n      id: country.cca3,\n      ...country,\n    }));\n  },\n  schema: /* ... */\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Fetching and Rendering Storyblok Content in Astro",
    "codeDescription": "Creates an Astro page that fetches content from Storyblok using the API and renders it using the StoryblokComponent. It handles both draft and published versions based on the environment.",
    "codeLanguage": "astro",
    "codeTokens": 155,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/storyblok.mdx#2025-04-08_snippet_5",
    "pageTitle": "Integrating Storyblok CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { useStoryblokApi } from '@storyblok/astro'\nimport StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'\n\nconst storyblokApi = useStoryblokApi()\n\nconst { data } = await storyblokApi.get(\"cdn/stories/test-post\", {\n  version: import.meta.env.DEV ? \"draft\" : \"published\",\n});\n\nconst content = data.story.content;\n---\n<StoryblokComponent blok={content} />"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Querying Related Data with Joins in Astro",
    "codeDescription": "This example shows how to use an innerJoin() function to query related data from multiple tables, specifically joining Comment authors with their related Author information based on the authorId column.",
    "codeLanguage": "astro",
    "codeTokens": 145,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/astro-db.mdx#2025-04-08_snippet_19",
    "pageTitle": "Astro DB Configuration and Setup Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { db, eq, Comment, Author } from 'astro:db';\n\nconst comments = await db.select()\n  .from(Comment)\n  .innerJoin(Author, eq(Comment.authorId, Author.id));\n---\n\n<h2>Comments</h2>\n\n{\n  comments.map(({ Author, Comment }) => (\n    <article>\n      <p>Author: {Author.name}</p>\n      <p>{Comment.body}</p>\n    </article>\n  ))\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring file() Loader for Content Collections in TypeScript",
    "codeDescription": "Shows how to use the file() loader to create entries from a single JSON or CSV file. It includes an example of using a custom parser for CSV files.",
    "codeLanguage": "typescript",
    "codeTokens": 155,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/content-loader-reference.mdx#2025-04-08_snippet_1",
    "pageTitle": "Astro Content Loader API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineCollection } from 'astro:content';\nimport { file } from 'astro/loaders';\n\nconst authors = defineCollection({\n  /* Retrieve all entries from a JSON file. */\n  loader: file(\"src/data/authors.json\"),\n  schema: /* ... */\n});\nconst products = defineCollection({\n  /* Retrieve all entries from a CSV file using a custom parser. */\n  loader: file(\"src/data/products.csv\", {\n    parser: (fileContent) => { /* your parser logic */ },\n  }),\n  schema: /* ... */\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Scroll Position Reset on Navigation",
    "codeDescription": "Shows how to override default scroll restoration behavior using the astro:after-swap event.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/view-transitions.mdx#2025-04-08_snippet_19",
    "pageTitle": "Implementing View Transitions in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "document.addEventListener(\"astro:after-swap\", () =>\n  window.scrollTo({ left: 0, top: 0, behavior: \"instant\" }),\n);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Adding Props to Dynamic Routes in Astro",
    "codeDescription": "This snippet shows how to pass blog post data as props to dynamically generated tag pages. It uses import.meta.glob() to fetch all markdown posts and adds them to the props of each route in getStaticPaths().",
    "codeLanguage": "astro",
    "codeTokens": 229,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/5-astro-api/2.mdx#2025-04-08_snippet_1",
    "pageTitle": "Generating Tag Pages in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport BaseLayout from '../../layouts/BaseLayout.astro';\n\nexport async function getStaticPaths() {\n  const allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));\n\n  return [\n    {params: {tag: \"astro\"}, props: {posts: allPosts}},\n    {params: {tag: \"successes\"}, props: {posts: allPosts}},\n    {params: {tag: \"community\"}, props: {posts: allPosts}},\n    {params: {tag: \"blogging\"}, props: {posts: allPosts}},\n    {params: {tag: \"setbacks\"}, props: {posts: allPosts}},\n    {params: {tag: \"learning in public\"}, props: {posts: allPosts}}\n  ];\n}\n\nconst { tag } = Astro.params;\nconst { posts } = Astro.props;\n---"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Fetching and Rendering Caisy CMS Content in Astro",
    "codeDescription": "This code snippet demonstrates how to fetch blog content from Caisy CMS using GraphQL and render it in an Astro dynamic route. It uses graphql-request for API communication and Caisy's rich text renderer to display content.",
    "codeLanguage": "astro",
    "codeTokens": 277,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/caisy.mdx#2025-04-08_snippet_0",
    "pageTitle": "Caisy CMS Integration with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport RichTextRenderer from '@caisy/rich-text-astro-renderer';\nimport { gql, GraphQLClient } from 'graphql-request';\n\nconst params = Astro.params;\n\nconst client = new GraphQLClient(\n\t`https://cloud.caisy.io/api/v3/e/${import.meta.env.CAISY_PROJECT_ID}/graphql`,\n\t{\n\t\theaders: {\n\t\t\t'x-caisy-apikey': import.meta.env.CAISY_API_KEY\n\t\t}\n\t}\n);\nconst gqlResponse = await client.request(\n\tgql`\n\t\tquery allBlogArticle($slug: String) {\n\t\t\tallBlogArticle(where: { slug: { eq: $slug } }) {\n\t\t\t\tedges {\n\t\t\t\t\tnode {\n\t\t\t\t\t\ttext {\n\t\t\t\t\t\t\tjson\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tslug\n\t\t\t\t\t\tid\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`,\n\t{ slug: params.slug }\n);\n\nconst post = gqlResponse?.allBlogArticle?.edges?.[0]?.node;\n---\n<h1>{post.title}</h1>\n<RichTextRenderer node={post.text.json} />"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Building a Custom Heart Counter Web Component in Astro",
    "codeDescription": "An Astro component that creates a reusable interactive counter using Web Components and custom elements. It tracks how many times a heart button is clicked and updates the count.",
    "codeLanguage": "astro",
    "codeTokens": 227,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/client-side-scripts.mdx#2025-04-08_snippet_7",
    "pageTitle": "Adding Interactivity with Scripts in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "<!-- Envuelve los elementos del componente en nuestro elemento personalizado \"astro-heart\". -->\n<astro-heart>\n  <button aria-label=\"Heart\">💜</button> × <span>0</span>\n</astro-heart>\n\n<script>\n  // Define el comportamiento para nuestro nuevo tipo de elemento HTML.\n  class AstroHeart extends HTMLElement {\n    constructor() {\n\t\t\tsuper();\n      let count = 0;\n\n      const heartButton = this.querySelector('button');\n      const countSpan = this.querySelector('span');\n\n      // Cada vez que el button es clickeado, actualiza el contador.\n\t\t\theartButton.addEventListener('click', () => {\n        count++;\n        countSpan.textContent = count.toString();\n      });\n\t\t}\n  }\n\n  // Dile al navegador que use nuestra clase AstroHeart para elementos <astro-heart>.\n  customElements.define('astro-heart', AstroHeart);\n</script>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Initializing Firebase Client in Astro",
    "codeDescription": "Sets up the Firebase client-side SDK with application credentials, enabling client-side Firebase functionality in the Astro application.",
    "codeLanguage": "ts",
    "codeTokens": 111,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/backend/google-firebase.mdx#2025-04-08_snippet_2",
    "pageTitle": "Integrating Firebase with Astro",
    "codeList": [
      {
        "language": "ts",
        "code": "import { initializeApp } from \"firebase/app\";\n\nconst firebaseConfig = {\n  apiKey: \"my-public-api-key\",\n  authDomain: \"my-auth-domain\",\n  projectId: \"my-project-id\",\n  storageBucket: \"my-storage-bucket\",\n  messagingSenderId: \"my-sender-id\",\n  appId: \"my-app-id\",\n};\n\nexport const app = initializeApp(firebaseConfig);"
      }
    ],
    "relevance": 0.964
  },
  {
    "codeTitle": "Configuring Multiple JSX Frameworks in Astro",
    "codeDescription": "JavaScript configuration to use multiple JSX frameworks (React, Preact, Solid) in an Astro project.",
    "codeLanguage": "javascript",
    "codeTokens": 176,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/react.mdx#2025-04-08_snippet_11",
    "pageTitle": "@astrojs/react Integration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from 'astro/config';\nimport preact from '@astrojs/preact';\nimport react from '@astrojs/react';\nimport svelte from '@astrojs/svelte';\nimport vue from '@astrojs/vue';\nimport solid from '@astrojs/solid-js';\n\nexport default defineConfig({\n  // Enable many frameworks to support all different kinds of components.\n  // No `include` is needed if you are only using a single JSX framework!\n  integrations: [\n    preact({\n      include: ['**/preact/*'],\n    }),\n    react({\n      include: ['**/react/*'],\n    }),\n    solid({\n      include: ['**/solid/*'],\n    }),\n  ],\n});"
      }
    ],
    "relevance": 0.964
  },
  {
    "codeTitle": "Configuring Astro for GitLab Pages Deployment",
    "codeDescription": "This snippet shows how to configure the Astro project's site and base options in astro.config.mjs for GitLab Pages deployment. It sets the site URL and base path, and specifies output and public directories.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/deploy/gitlab.mdx#2025-04-08_snippet_0",
    "pageTitle": "Deploying Astro Sites to GitLab Pages",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  site: 'https://<username>.gitlab.io',\n  base: '/<my-repo>',\n  outDir: 'public',\n  publicDir: 'static',\n});"
      }
    ],
    "relevance": 0.963
  },
  {
    "codeTitle": "Handling Form Input Validation Errors",
    "codeDescription": "This example demonstrates how to check for input validation errors from an action using the isInputError() utility. It extracts field-specific error messages that can be displayed to the user.",
    "codeLanguage": "js",
    "codeTokens": 123,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#2025-04-08_snippet_15",
    "pageTitle": "Astro Actions: Type-safe Server Functions",
    "codeList": [
      {
        "language": "js",
        "code": "import { actions, isInputError } from 'astro:actions';\n\nconst form = document.querySelector('form');\nconst formData = new FormData(form);\nconst { error } = await actions.newsletter(formData);\nif (isInputError(error)) {\n  // Handle input errors.\n  if (error.fields.email) {\n    const message = error.fields.email.join(', ');\n  }\n}"
      }
    ],
    "relevance": 0.963
  },
  {
    "codeTitle": "Complete Form with Server-side Validation",
    "codeDescription": "Final implementation including server-side validation, error handling, and user feedback.",
    "codeLanguage": "astro",
    "codeTokens": 439,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/build-forms.mdx#2025-04-08_snippet_5",
    "pageTitle": "Building and Handling HTML Forms in Astro Pages",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { isRegistered, registerUser } from \"../../data/users\"\nimport { isValidEmail } from \"../../utils/isValidEmail\";\n\nconst errors = { username: \"\", email: \"\", password: \"\" };\nif (Astro.request.method === \"POST\") {\n  try {\n    const data = await Astro.request.formData();\n    const name = data.get(\"username\");\n    const email = data.get(\"email\");\n    const password = data.get(\"password\");\n    if (typeof name !== \"string\" || name.length < 1) {\n      errors.username += \"Please enter a username. \";\n    }\n    if (typeof email !== \"string\" || !isValidEmail(email)) {\n      errors.email += \"Email is not valid. \";\n    } else if (await isRegistered(email)) {\n      errors.email += \"Email is already registered. \";\n    }\n    if (typeof password !== \"string\" || password.length < 6) {\n      errors.password += \"Password must be at least 6 characters. \";\n    }\n    const hasErrors = Object.values(errors).some(msg => msg)\n    if (!hasErrors) {\n      await registerUser({name, email, password});\n      return Astro.redirect(\"/login\");\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      console.error(error.message);\n    }\n  }\n}\n---\n<h1>Register</h1>\n<form method=\"POST\">\n  <label>\n    Username:\n    <input type=\"text\" name=\"username\" />\n  </label>\n  {errors.username && <p>{errors.username}</p>}\n  <label>\n    Email:\n    <input type=\"email\" name=\"email\" required />\n  </label>\n  {errors.email && <p>{errors.email}</p>}\n  <label>\n    Password:\n    <input type=\"password\" name=\"password\" required minlength=\"6\" />\n  </label>\n  {errors.password && <p>{errors.password}</p>}\n  <button>Register</button>\n</form>"
      }
    ],
    "relevance": 0.963
  },
  {
    "codeTitle": "Importing and Using MDX Content in Astro",
    "codeDescription": "Astro code showing how to import and use content from MDX files in an Astro component.",
    "codeLanguage": "astro",
    "codeTokens": 70,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/mdx.mdx#2025-04-08_snippet_9",
    "pageTitle": "Integrating MDX with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst matches = import.meta.glob('./posts/*.mdx', { eager: true });\nconst posts = Object.values(matches);\n---\n\n{posts.map(post => <p>{post.title}</p>)}"
      }
    ],
    "relevance": 0.963
  },
  {
    "codeTitle": "Creating Protected Dashboard Page in Astro",
    "codeDescription": "Implementation of a protected dashboard page that verifies user authentication status and displays user information with sign-out functionality.",
    "codeLanguage": "astro",
    "codeTokens": 199,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/backend/google-firebase.mdx#2025-04-08_snippet_9",
    "pageTitle": "Integrating Firebase with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { app } from \"../firebase/server\";\nimport { getAuth } from \"firebase-admin/auth\";\nimport Layout from \"../layouts/Layout.astro\";\n\nconst auth = getAuth(app);\n\n/* Check current session */\nif (!Astro.cookies.has(\"__session\")) {\n  return Astro.redirect(\"/signin\");\n}\nconst sessionCookie = Astro.cookies.get(\"__session\").value;\nconst decodedCookie = await auth.verifySessionCookie(sessionCookie);\nconst user = await auth.getUser(decodedCookie.uid);\n\nif (!user) {\n  return Astro.redirect(\"/signin\");\n}\n---\n\n<Layout title=\"dashboard\">\n  <h1>Welcome {user.displayName}</h1>\n  <p>We are happy to see you here</p>\n  <form action=\"/api/auth/signout\">\n    <button type=\"submit\">Sign out</button>\n  </form>\n</Layout>"
      }
    ],
    "relevance": 0.963
  },
  {
    "codeTitle": "Complete Form with Server-side Validation",
    "codeDescription": "Final implementation including server-side validation, error handling, and user feedback.",
    "codeLanguage": "astro",
    "codeTokens": 439,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/build-forms.mdx#2025-04-08_snippet_5",
    "pageTitle": "Building and Handling HTML Forms in Astro Pages",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { isRegistered, registerUser } from \"../../data/users\"\nimport { isValidEmail } from \"../../utils/isValidEmail\";\n\nconst errors = { username: \"\", email: \"\", password: \"\" };\nif (Astro.request.method === \"POST\") {\n  try {\n    const data = await Astro.request.formData();\n    const name = data.get(\"username\");\n    const email = data.get(\"email\");\n    const password = data.get(\"password\");\n    if (typeof name !== \"string\" || name.length < 1) {\n      errors.username += \"Please enter a username. \";\n    }\n    if (typeof email !== \"string\" || !isValidEmail(email)) {\n      errors.email += \"Email is not valid. \";\n    } else if (await isRegistered(email)) {\n      errors.email += \"Email is already registered. \";\n    }\n    if (typeof password !== \"string\" || password.length < 6) {\n      errors.password += \"Password must be at least 6 characters. \";\n    }\n    const hasErrors = Object.values(errors).some(msg => msg)\n    if (!hasErrors) {\n      await registerUser({name, email, password});\n      return Astro.redirect(\"/login\");\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      console.error(error.message);\n    }\n  }\n}\n---\n<h1>Register</h1>\n<form method=\"POST\">\n  <label>\n    Username:\n    <input type=\"text\" name=\"username\" />\n  </label>\n  {errors.username && <p>{errors.username}</p>}\n  <label>\n    Email:\n    <input type=\"email\" name=\"email\" required />\n  </label>\n  {errors.email && <p>{errors.email}</p>}\n  <label>\n    Password:\n    <input type=\"password\" name=\"password\" required minlength=\"6\" />\n  </label>\n  {errors.password && <p>{errors.password}</p>}\n  <button>Register</button>\n</form>"
      }
    ],
    "relevance": 0.963
  },
  {
    "codeTitle": "Defining Content Collections with TypeScript Schema",
    "codeDescription": "Demonstrates how to define a content collection using the defineCollection utility, configure a loader for markdown files, and specify a validation schema using Zod. This creates a type-safe collection of blog posts.",
    "codeLanguage": "ts",
    "codeTokens": 147,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-content.mdx#2025-04-08_snippet_1",
    "pageTitle": "Content Collections API Reference for Astro",
    "codeList": [
      {
        "language": "ts",
        "code": "import { z, defineCollection } from 'astro:content';\nimport { glob } from 'astro/loaders';\n\nconst blog = defineCollection({\n  loader: glob({ pattern: '**/*.md', base: './src/data/blog' }),\n  schema: z.object({\n    title: z.string(),\n    permalink: z.string().optional(),\n  }),\n});\n\n// Expose your defined collection to Astro\n// with the `collections` export\nexport const collections = { blog };"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Using Exported Variables in MDX",
    "codeDescription": "MDX code demonstrating how to export and use variables within an MDX file.",
    "codeLanguage": "mdx",
    "codeTokens": 43,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/mdx.mdx#2025-04-08_snippet_8",
    "pageTitle": "Integrating MDX with Astro",
    "codeList": [
      {
        "language": "mdx",
        "code": "export const title = 'My first MDX post'\n\n# {title}"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Handling Decoded Params in Static Paths",
    "codeDescription": "Shows how to manually decode params values in getStaticPaths() since automatic decoding is removed in Astro 5.0.",
    "codeLanguage": "astro",
    "codeTokens": 95,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/upgrade-to/v5.mdx#2025-04-08_snippet_26",
    "pageTitle": "Upgrading to Astro v5",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport function getStaticPaths() {\n  return [\n    { params: { id: \"%5Bpage%5D\" } },\n    { params: { id: decodeURI(\"%5Bpage%5D\") } },\n  ]\n}\n\nconst { id } = Astro.params;\n---"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Rendering a React App in Astro",
    "codeDescription": "This snippet demonstrates how to import and render a React app component in an Astro file. It uses the client:load directive to ensure the app loads immediately from the server.",
    "codeLanguage": "astro",
    "codeTokens": 87,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/migrate-to-astro/from-create-react-app.mdx#2025-04-08_snippet_0",
    "pageTitle": "Migrating from Create React App (CRA) to Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// Import your root App component\nimport App from '../cra-project/App.jsx';\n---\n<!-- Use a client directive to load your app -->\n<App client:load />"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Implementing Dynamic Image Import with import.meta.glob in Astro",
    "codeDescription": "Sets up dynamic image importing by using Vite's import.meta.glob function to create an object containing all image paths from the assets folder. Includes TypeScript type definitions for proper type checking.",
    "codeLanguage": "astro",
    "codeTokens": 143,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/dynamically-importing-images.mdx#2025-04-08_snippet_2",
    "pageTitle": "Dynamically Importing Images in Astro with Vite's import.meta.glob",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport type { ImageMetadata } from 'astro';\nimport { Image } from 'astro:assets';\n\ninterface Props {\n   imagePath: string;\n   altText: string;\n   name: string;\n   age: number;\n}\n\nconst { imagePath, altText, name, age } = Astro.props;\nconst images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}')\n---"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Demonstrating Client Directives in Astro",
    "codeDescription": "Shows an example of using different components with and without client directives to illustrate the concept of hydrated islands in Astro.",
    "codeLanguage": "astro",
    "codeTokens": 128,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/6-islands/1.mdx#2025-04-08_snippet_3",
    "pageTitle": "Building and Using Preact Components in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport BaseLayout from '../layouts/BaseLayout.astro';\nimport AstroBanner from '../components/AstroBanner.astro';\nimport PreactBanner from '../components/PreactBanner';\nimport SvelteCounter from '../components/SvelteCounter.svelte';\n---\n<BaseLayout>\n  <AstroBanner />\n  <PreactBanner />\n  <PreactBanner client:load />\n  <SvelteCounter />\n  <SvelteCounter client:visible />\n</BaseLayout>"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Creating a Server Endpoint with Dynamic Routing in Astro",
    "codeDescription": "This snippet demonstrates how to create a server endpoint with dynamic routing in Astro. It handles GET requests, accesses route parameters, and returns appropriate responses based on the request.",
    "codeLanguage": "javascript",
    "codeTokens": 140,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/endpoints.mdx#2025-04-08_snippet_4",
    "pageTitle": "Creating Custom Endpoints in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { getProduct } from \"../db\";\n\nexport async function GET({ params }) {\n  const id = params.id;\n  const product = await getProduct(id);\n\n  if (!product) {\n    return new Response(null, {\n      status: 404,\n      statusText: \"Not found\",\n    });\n  }\n\n  return new Response(JSON.stringify(product), {\n    status: 200,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n}"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Creating Basic Astro Form Page",
    "codeDescription": "Initial setup of an Astro page with a basic form structure.",
    "codeLanguage": "astro",
    "codeTokens": 36,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/build-forms.mdx#2025-04-08_snippet_0",
    "pageTitle": "Building and Handling HTML Forms in Astro Pages",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n---\n<h1>Register</h1>"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Seeding Data to Remote Database in TypeScript",
    "codeDescription": "This example shows how to create a seed file to insert data into a remote database. It demonstrates inserting multiple Comment records using the db.insert() method.",
    "codeLanguage": "typescript",
    "codeTokens": 108,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/astro-db.mdx#2025-04-08_snippet_23",
    "pageTitle": "Astro DB Configuration and Setup Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "// db/seed.ts\nimport { Comment } from 'astro:db';\n\nexport default async function () {\n  await db.insert(Comment).values([\n    { authorId: 1, body: 'Hope you like Astro DB!' },\n    { authorId: 2, body: 'Enjoy!' },\n  ])\n}"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Creating Protected Dashboard Page in Astro with Supabase",
    "codeDescription": "An Astro component that implements a protected dashboard page. It verifies user authentication by checking for valid Supabase tokens and handles session management, redirecting unauthenticated users to the sign-in page.",
    "codeLanguage": "astro",
    "codeTokens": 313,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/backend/supabase.mdx#2025-04-08_snippet_8",
    "pageTitle": "Integrating Supabase with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Layout from \"../layouts/Layout.astro\";\nimport { supabase } from \"../lib/supabase\";\n\nconst accessToken = Astro.cookies.get(\"sb-access-token\");\nconst refreshToken = Astro.cookies.get(\"sb-refresh-token\");\n\nif (!accessToken || !refreshToken) {\n  return Astro.redirect(\"/signin\");\n}\n\nlet session;\ntry {\n  session = await supabase.auth.setSession({\n    refresh_token: refreshToken.value,\n    access_token: accessToken.value,\n  });\n  if (session.error) {\n    Astro.cookies.delete(\"sb-access-token\", {\n      path: \"/\",\n    });\n    Astro.cookies.delete(\"sb-refresh-token\", {\n      path: \"/\",\n    });\n    return Astro.redirect(\"/signin\");\n  }\n} catch (error) {\n  Astro.cookies.delete(\"sb-access-token\", {\n    path: \"/\",\n  });\n  Astro.cookies.delete(\"sb-refresh-token\", {\n    path: \"/\",\n  });\n  return Astro.redirect(\"/signin\");\n}\n\nconst email = session.data.user?.email;\n---\n<Layout title=\"dashboard\">\n  <h1>Welcome {email}</h1>\n  <p>We are happy to see you here</p>\n  <form action=\"/api/auth/signout\">\n    <button type=\"submit\">Sign out</button>\n  </form>\n</Layout>"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Importing and Exporting Organized Actions",
    "codeDescription": "This snippet shows how to import organized action modules and export them as part of the server object, allowing for structured and organized action namespaces.",
    "codeLanguage": "typescript",
    "codeTokens": 68,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#2025-04-08_snippet_5",
    "pageTitle": "Astro Actions: Type-safe Server Functions",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { user } from './user';\n\nexport const server = {\n  myAction: defineAction({ /* ... */ }),\n  user,\n}"
      }
    ],
    "relevance": 0.961
  },
  {
    "codeTitle": "Creating a Page Component for Storyblok in Astro",
    "codeDescription": "This component recursively renders all Bloks inside the body property of a page Blok and adds storyblokEditable attributes to enable editing in Storyblok's visual editor.",
    "codeLanguage": "astro",
    "codeTokens": 138,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/storyblok.mdx#2025-04-08_snippet_6",
    "pageTitle": "Integrating Storyblok CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { storyblokEditable } from '@storyblok/astro'\nimport StoryblokComponent from \"@storyblok/astro/StoryblokComponent.astro\";\nconst { blok } = Astro.props\n---\n\n<main {...storyblokEditable(blok)}>\n  {\n    blok.body?.map((blok) => {\n      return <StoryblokComponent blok={blok} />\n    })\n  }\n</main>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing an Inline Loader for Fetching Country Data in TypeScript",
    "codeDescription": "Demonstrates an inline loader function that fetches country data from an API and transforms it into the required format for a content collection.",
    "codeLanguage": "typescript",
    "codeTokens": 135,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/content-loader-reference.mdx#2025-04-08_snippet_2",
    "pageTitle": "Astro Content Loader API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const countries = defineCollection({\n  loader: async () => {\n    const response = await fetch(\"https://restcountries.com/v3.1/all\");\n    const data = await response.json();\n    // Must return an array of entries with an id property\n    // or an object with IDs as keys and entries as values\n    return data.map((country) => ({\n      id: country.cca3,\n      ...country,\n    }));\n  },\n  schema: /* ... */\n});"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Configuring Base Path in Astro",
    "codeDescription": "Setting the base path for an Astro project. This serves as the root path for pages and assets in both development and production.",
    "codeLanguage": "javascript",
    "codeTokens": 42,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/configuration-reference.mdx#2025-04-08_snippet_2",
    "pageTitle": "Astro Configuration Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "{\n  base: '/docs'\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Updating Integration Route Handling",
    "codeDescription": "Example demonstrating the migration from using routes in astro:build:done to the new astro:routes:resolved hook.",
    "codeLanguage": "javascript",
    "codeTokens": 151,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/upgrade-to/v5.mdx#2025-04-08_snippet_7",
    "pageTitle": "Upgrading to Astro v5",
    "codeList": [
      {
        "language": "javascript",
        "code": "const integration = () => {\n    let routes\n    return {\n        name: 'my-integration',\n        hooks: {\n            'astro:routes:resolved': (params) => {\n                routes = params.routes\n            },\n            'astro:build:done': ({\n                routes\n                assets\n            }) => {\n                for (const route of routes) {\n                    const distURL = assets.get(route.pattern)\n                    if (distURL) {\n                        Object.assign(route, { distURL })\n                    }\n                }\n                console.log(routes)\n            }\n        }\n    }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Using Standard HTML img Tag with Public Images",
    "codeDescription": "Demonstrates how to reference images from the public folder in a standard HTML img tag using a path relative to the public directory.",
    "codeLanguage": "astro",
    "codeTokens": 51,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/images.mdx#2025-04-08_snippet_5",
    "pageTitle": "Using Images in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "<img src=\"/images/public-cat.jpg\" alt=\"A sleeping cat.\" >"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Complete Blog Post Template with Kontent.ai Data Rendering",
    "codeDescription": "Full implementation of a blog post page template that includes both data fetching and HTML rendering of content from Kontent.ai.",
    "codeLanguage": "astro",
    "codeTokens": 289,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/guides/cms/kontent-ai.mdx#2025-04-08_snippet_2",
    "pageTitle": "Astro with Kontent.ai Integration Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\n\nconst { slug } = Astro.params\nlet blogPost: BlogPost;\ntry {\n    const data = await deliveryClient\n        .items<BlogPost>()\n        .equalsFilter(contentTypes.blog_post.elements.url_slug.codename, slug ?? '')\n        .type(contentTypes.blog_post.codename)\n        .limitParameter(1)\n        .toPromise()\n    blogPost = data.data.items[0]\n} catch (error) {\n    return Astro.redirect('/404')\n}\n---\n<html lang=\"fr\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width\" />\n        <title>{blogPost.elements.title.value}</title>\n    </head>\n    <body>\n        <article>\n            <h1>{blogPost.elements.title.value}</h1>\n            <Fragment set:html={blogPost.elements.teaser.value} />\n            <Fragment set:html={blogPost.elements.content.value} />\n            <time>{new Date(blogPost.elements.date.value ?? '')}</time>\n    </body>\n</html>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Comparing React Component with Astro Component for GitHub Star Count",
    "codeDescription": "A side-by-side comparison of a React component (StarCount.jsx) and an equivalent Astro component (StarCount.astro) that fetches and displays GitHub star count. The example highlights the differences in syntax, data fetching, and styling approaches between the two frameworks.",
    "codeLanguage": "jsx",
    "codeTokens": 273,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/migrate-to-astro/from-create-react-app.mdx#2025-04-08_snippet_3",
    "pageTitle": "Migrating from Create React App (CRA) to Astro",
    "codeList": [
      {
        "language": "jsx",
        "code": "import React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport Footer from './Footer';\n\nconst Component = () => {\n    const [stars, setStars] = useState(0);\n    const [message, setMessage] = useState('');\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const res = await fetch('https://api.github.com/repos/withastro/astro');\n            const json = await res.json();\n\n            setStars(json.stargazers_count || 0);\n            setMessage(json.message);\n        };\n\n        fetchData();\n    }, []);\n\n    return (\n        <>\n            <Header />\n            <p style={{\n                backgroundColor: `#f4f4f4`,\n                padding: `1em 1.5em`,\n                textAlign: `center`,\n                marginBottom: `1em`\n            }}>Astro has {stars} 🧑‍🚀</p>\n            <Footer />\n        </>\n    )\n};\n\nexport default Component;"
      },
      {
        "language": "astro",
        "code": "---\nimport Header from './Header.astro';\nimport Footer from './Footer.astro';\nimport './layout.css';\nconst res = await fetch('https://api.github.com/repos/withastro/astro')\nconst json = await res.json();\nconst message = json.message;\nconst stars = json.stargazers_count || 0;\n---\n<Header />\n<p class=\"banner\">Astro has {stars} 🧑‍🚀</p>\n<Footer />\n<style>\n  .banner {\n    background-color: #f4f4f4; \n    padding: 1em 1.5em;\n    text-align: center;\n    margin-bottom: 1em;\n  }\n<style>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Replacing Gatsby GraphQL Queries with Astro Data Fetching",
    "codeDescription": "This example demonstrates how to replace Gatsby's GraphQL queries with Astro's data fetching methods using getCollection and import.meta.glob.",
    "codeLanguage": "astro",
    "codeTokens": 183,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/migrate-to-astro/from-gatsby.mdx#2025-04-08_snippet_10",
    "pageTitle": "Migrating from Gatsby to Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { graphql } from \"gatsby\"\nimport { getCollection } from 'astro:content';\n\n// Get all `src/content/blog/` entries\nconst allBlogPosts = await getCollection('blog');\n\n// Get all `src/pages/posts/` entries\nconst allPosts = Object.values(import.meta.glob('../pages/post/*.md', { eager: true }));\n---\n\nexport const pageQuery = graphql`\n  {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Sample Markdown Page Structure",
    "codeDescription": "Example of a basic Markdown page with frontmatter and common Markdown syntax elements.",
    "codeLanguage": "markdown",
    "codeTokens": 99,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/markdown-content.mdx#2025-04-08_snippet_8",
    "pageTitle": "Markdown Documentation in Astro",
    "codeList": [
      {
        "language": "markdown",
        "code": "---\ntitle: Hello, World\n---\n\n# Hi there!\n\nThis Markdown file creates a page at `your-domain.com/page-1/`\n\nIt probably isn't styled much, but Markdown does support:\n- **bold** and _italics._\n- lists\n- [links](https://astro.build)\n- <p>HTML elements</p>\n- and more!"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing an Inline Loader for Fetching Country Data in TypeScript",
    "codeDescription": "Demonstrates an inline loader function that fetches country data from an API and transforms it into the required format for a content collection.",
    "codeLanguage": "typescript",
    "codeTokens": 135,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/content-loader-reference.mdx#2025-04-08_snippet_2",
    "pageTitle": "Astro Content Loader API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const countries = defineCollection({\n  loader: async () => {\n    const response = await fetch(\"https://restcountries.com/v3.1/all\");\n    const data = await response.json();\n    // Must return an array of entries with an id property\n    // or an object with IDs as keys and entries as values\n    return data.map((country) => ({\n      id: country.cca3,\n      ...country,\n    }));\n  },\n  schema: /* ... */\n});"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Server-Side Redirect After Action Success",
    "codeDescription": "This Astro component gets the result of a form action using Astro.getActionResult() and redirects to a product-specific page when the action succeeds. This demonstrates server-side handling of action results.",
    "codeLanguage": "astro",
    "codeTokens": 110,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#2025-04-08_snippet_18",
    "pageTitle": "Astro Actions: Type-safe Server Functions",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { actions } from 'astro:actions';\n\nconst result = Astro.getActionResult(actions.createProduct);\nif (result && !result.error) {\n  return Astro.redirect(`/products/${result.data.id}`);\n}\n---\n\n<form method=\"POST\" action={actions.createProduct}>\n  <!--...-->\n</form>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Fetching and Rendering Contentful Blog Posts in Astro",
    "codeDescription": "Demonstrates how to fetch blog posts from Contentful and render them in an Astro component, including handling rich text content.",
    "codeLanguage": "astro",
    "codeTokens": 195,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/contentful.mdx#2025-04-08_snippet_3",
    "pageTitle": "Integrating Contentful CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { contentfulClient } from \"../lib/contentful\";\nimport { documentToHtmlString } from \"@contentful/rich-text-html-renderer\";\nimport type { EntryFieldTypes } from \"contentful\";\n\ninterface BlogPost {\n  contentTypeId: \"blogPost\",\n  fields: {\n    title: EntryFieldTypes.Text\n    content: EntryFieldTypes.RichText,\n  }\n}\n\nconst entries = await contentfulClient.getEntries<BlogPost>({\n  content_type: \"blogPost\",\n});\n---\n<body>\n  {entries.items.map((item) => (\n    <section>\n      <h2>{item.fields.title}</h2>\n      <article set:html={documentToHtmlString(item.fields.content)}></article>\n    </section>\n  ))}\n</body>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Creating Feedback Form Component in Vue",
    "codeDescription": "This snippet shows how to create a feedback form component in Vue. It includes form submission handling using fetch API, form data processing, and conditional rendering of response messages.",
    "codeLanguage": "vue",
    "codeTokens": 261,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/zh-cn/recipes/build-forms-api.mdx#2025-04-08_snippet_0",
    "pageTitle": "Implementing Feedback Form in Astro with UI Framework Components",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\nimport { ref } from \"vue\";\n\nconst responseMessage = ref<string>();\n\nasync function submit(e: Event) {\n  e.preventDefault();\n  const formData = new FormData(e.currentTarget as HTMLFormElement);\n  const response = await fetch(\"/api/feedback\", {\n    method: \"POST\",\n    body: formData,\n  });\n  const data = await response.json();\n  responseMessage.value = data.message;\n}\n</script>\n\n<template>\n  <form @submit=\"submit\">\n    <label>\n      Name\n      <input type=\"text\" id=\"name\" name=\"name\" required />\n    </label>\n    <label>\n      Email\n      <input type=\"email\" id=\"email\" name=\"email\" required />\n    </label>\n    <label>\n      Message\n      <textarea id=\"message\" name=\"message\" required />\n    </label>\n    <button>Send</button>\n    <p v-if=\"responseMessage\">{{ responseMessage }}</p>\n  </form>\n</template>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Astro Component Template Features",
    "codeDescription": "Shows various template features including component imports, JavaScript expressions, and directives.",
    "codeLanguage": "astro",
    "codeTokens": 172,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/pt-br/basics/astro-components.mdx#2025-04-08_snippet_2",
    "pageTitle": "Implementing Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Banner from '../components/Banner.astro';\nimport ComponentePokemonReact from '../components/ComponentePokemonReact.jsx';\nconst meuPokemonFavorito = [/* ... */];\nconst { titulo } = Astro.props;\n---\n<!-- comentários HTML são suportados! -->\n{/* sintaxe de comentário do JS também é válida! */}\n\n<Banner />\n<h1>Olá, mundo!</h1>\n\n<p>{titulo}</p>\n\n<ComponentePokemonReact client:visible />\n\n<ul>\n  {meuPokemonFavorito.map((dados) => <li>{dados.nome}</li>)}\n</ul>\n\n<p class:list={[\"adicione\", \"dinâmicos\", {classNames: true}]} />"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Action Result UI Updates in Astro",
    "codeDescription": "Shows how to use action return values to display success notifications using Astro.getActionResult().",
    "codeLanguage": "astro",
    "codeTokens": 82,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#2025-04-08_snippet_21",
    "pageTitle": "Astro Actions: Type-safe Server Functions",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { actions } from 'astro:actions';\n\nconst result = Astro.getActionResult(actions.addToCart);\n---\n\n{result && !result.error && (\n  <p class=\"success\">Added {result.data.productName} to cart</p>\n)}\n\n<!--...-->"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Default Values for Component Props",
    "codeDescription": "Shows how to provide default values for component props when they are not passed by the parent component. This enables components to work even when optional props are omitted.",
    "codeLanguage": "astro",
    "codeTokens": 84,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_7",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/components/GreetingHeadline.astro\nconst { greeting = \"Hello\", name = \"Astronaut\" } = Astro.props;\n---\n<h2>{greeting}, {name}!</h2>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing Basic Astro Adapter Integration",
    "codeDescription": "Shows how to create a basic Astro adapter integration that implements the setAdapter API in the astro:config:done hook.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/adapter-reference.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Adapter API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default function createIntegration() {\n  return {\n    name: '@matthewp/my-adapter',\n    hooks: {\n      'astro:config:done': ({ setAdapter }) => {\n        setAdapter({\n          name: '@matthewp/my-adapter',\n          serverEntrypoint: '@matthewp/my-adapter/server.js',\n          supportedAstroFeatures: {\n              staticOutput: 'stable'\n          }\n        });\n      },\n    },\n  };\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Writing a Cypress Test for Astro Page Content",
    "codeDescription": "Shows how to write a Cypress test to verify the title and heading of an Astro page. This test visits the page and checks if the title and h1 elements contain the expected text.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/testing.mdx#2025-04-08_snippet_7",
    "pageTitle": "Testing in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "it('titles are correct', () => {\n  const page = cy.visit('http://localhost:4321');\n\n  page.get('title').should('have.text', 'Astro is awesome!')\n  page.get('h1').should('have.text', 'Hello world from Astro');\n});"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Creating a responsive hamburger menu with Astro lifecycle events",
    "codeDescription": "Example of wrapping a mobile hamburger menu script in an astro:page-load event listener to ensure it runs after each client-side navigation, maintaining menu functionality across page transitions.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/view-transitions.mdx#2025-04-08_snippet_11",
    "pageTitle": "Implementing View Transitions in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "document.addEventListener(\"astro:page-load\", () => {\n  document.querySelector(\".hamburger\").addEventListener(\"click\", () => {\n    document.querySelector(\".nav-links\").classList.toggle(\"expanded\");\n  });\n});"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Fetching and Rendering Contentful Blog Posts in Astro",
    "codeDescription": "Demonstrates how to fetch blog posts from Contentful and render them in an Astro component, including handling rich text content.",
    "codeLanguage": "astro",
    "codeTokens": 195,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/contentful.mdx#2025-04-08_snippet_3",
    "pageTitle": "Integrating Contentful CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { contentfulClient } from \"../lib/contentful\";\nimport { documentToHtmlString } from \"@contentful/rich-text-html-renderer\";\nimport type { EntryFieldTypes } from \"contentful\";\n\ninterface BlogPost {\n  contentTypeId: \"blogPost\",\n  fields: {\n    title: EntryFieldTypes.Text\n    content: EntryFieldTypes.RichText,\n  }\n}\n\nconst entries = await contentfulClient.getEntries<BlogPost>({\n  content_type: \"blogPost\",\n});\n---\n<body>\n  {entries.items.map((item) => (\n    <section>\n      <h2>{item.fields.title}</h2>\n      <article set:html={documentToHtmlString(item.fields.content)}></article>\n    </section>\n  ))}\n</body>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Creating [...slug].astro Component for ApostropheCMS Integration in Astro",
    "codeDescription": "This snippet shows how to create a [...slug].astro component that fetches data from ApostropheCMS and renders the appropriate layout and template. It handles redirects, 404 errors, and includes SEO metadata.",
    "codeLanguage": "astro",
    "codeTokens": 280,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/cms/apostrophecms.mdx#2025-04-08_snippet_8",
    "pageTitle": "Integrating ApostropheCMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport aposPageFetch from '@apostrophecms/apostrophe-astro/lib/aposPageFetch.js';\nimport AposLayout from '@apostrophecms/apostrophe-astro/components/layouts/AposLayout.astro';\nimport AposTemplate from '@apostrophecms/apostrophe-astro/components/AposTemplate.astro';\n\nconst aposData = await aposPageFetch(Astro.request);\nconst bodyClass = `myclass`;\n\nif (aposData.redirect) {\n  return Astro.redirect(aposData.url, aposData.status);\n}\nif (aposData.notFound) {\n  Astro.response.status = 404;\n}\n---\n<AposLayout title={aposData.page?.title} {aposData} {bodyClass}>\n    <Fragment slot=\"standardHead\">\n      <meta name=\"description\" content={aposData.page?.seoDescription} />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      <meta charset=\"UTF-8\" />\n    </Fragment>\n    <AposTemplate {aposData} slot=\"main\"/>\n</AposLayout>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Static Site Generation for Blog Posts with Storyblok in Astro",
    "codeDescription": "This component uses dynamic routes and getStaticPaths to generate static pages for blog posts fetched from Storyblok at build time. It maps through all stories of content type 'blogPost'.",
    "codeLanguage": "astro",
    "codeTokens": 294,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/storyblok.mdx#2025-04-08_snippet_11",
    "pageTitle": "Integrating Storyblok CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { useStoryblokApi } from '@storyblok/astro'\nimport StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'\n\nexport async function getStaticPaths() {\n  const sbApi = useStoryblokApi();\n\n  const { data } = await sbApi.get(\"cdn/stories\", {\n    content_type: \"blogPost\",\n    version: import.meta.env.DEV ? \"draft\" : \"published\",\n  });\n\n  const stories = Object.values(data.stories);\n\n  return stories.map((story) => {\n    return {\n      params: { slug: story.slug },\n    };\n  });\n}\n\nconst sbApi = useStoryblokApi();\nconst { slug } = Astro.params;\nconst { data } = await sbApi.get(`cdn/stories/blog/${slug}`, {\n  version: import.meta.env.DEV ? \"draft\" : \"published\",\n});\n\nconst story = data.story;\n---\n\n<html lang=\"en\">\n  <head>\n    <title>Storyblok & Astro</title>\n  </head>\n  <body>\n    <StoryblokComponent blok={story.content} />\n  </body>\n</html>"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Link Tag Style Precedence in Astro",
    "codeDescription": "This example illustrates how styles loaded via link tags have lower precedence than imported stylesheets and scoped styles in Astro components.",
    "codeLanguage": "astro",
    "codeTokens": 170,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/styling.mdx#2025-04-08_snippet_13",
    "pageTitle": "Styling Components in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport \"../components/make-it-purple.css\"\n---\n\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width\" />\n\t\t<meta name=\"generator\" content={Astro.generator} />\n\t\t<title>Astro</title>\n\t\t<link rel=\"stylesheet\" href=\"/styles/make-it-blue.css\" />\n\t</head>\n\t<body>\n\t\t<div>\n\t\t\t<h1>This will be purple</h1>\n\t\t</div>\n\t</body>\n</html>"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Complex Data Storage in Middleware",
    "codeDescription": "Illustrates how to store complex data types like functions and maps in the locals object within middleware.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/middleware.mdx#2025-04-08_snippet_2",
    "pageTitle": "Implementing Middleware in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "export function onRequest (context, next) {\n    // intercept data from a request\n    // optionally, modify the properties in `locals`\n    context.locals.user.name = \"John Wick\";\n    context.locals.welcomeTitle = () => {\n        return \"Welcome back \" + locals.user.name;\n    };\n\n    // return a Response or the result of calling `next()`\n    return next();\n};"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "GetImageResult Type Definition in TypeScript",
    "codeDescription": "This TypeScript code defines the structure of the object returned by the getImage() function. It includes attributes for HTML rendering, validated and original options, the generated image path, and srcset information.",
    "codeLanguage": "typescript",
    "codeTokens": 173,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-assets.mdx#2025-04-08_snippet_6",
    "pageTitle": "Astro Assets API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "type GetImageResult = {\n  /* Additional HTML attributes needed to render the image (width, height, style, etc..) */\n  attributes: Record<string, any>;\n  /* Validated parameters passed */\n  options: ImageTransform;\n  /* Original parameters passed */\n  rawOptions: ImageTransform;\n  /* Path to the generated image */\n  src: string;\n  srcSet: {\n    /* Generated values for srcset, every entry has a url and a size descriptor */\n    values: SrcSetValue[];\n    /* A value ready to use in`srcset` attribute */\n    attribute: string;\n  };\n}"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Defining Content Collection Schema in Astro",
    "codeDescription": "TypeScript configuration file that defines the schema for a blog post collection using Zod for validation, including frontmatter properties like title, date, description, author, image, and tags.",
    "codeLanguage": "typescript",
    "codeTokens": 170,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/6-islands/4.mdx#2025-04-08_snippet_1",
    "pageTitle": "Configuring Content Collections in Astro Blog Tutorial",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { glob } from \"astro/loaders\";\nimport { z, defineCollection } from \"astro:content\";\nconst blog = defineCollection({\n    loader: glob({ pattern: '**/[^_]*.md', base: \"./src/blog\" }),\n    schema: z.object({\n      title: z.string(),\n      pubDate: z.date(),\n      description: z.string(),\n      author: z.string(),\n      image: z.object({\n        url: z.string(),\n        alt: z.string()\n      }),\n      tags: z.array(z.string())\n    })\n});\nexport const collections = { blog };"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Installing Alpine.js Integration with yarn",
    "codeDescription": "Command to install the Alpine.js integration using yarn and Astro's automated setup tool.",
    "codeLanguage": "sh",
    "codeTokens": 33,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/alpinejs.mdx#2025-04-08_snippet_2",
    "pageTitle": "Alpine.js Integration with Astro",
    "codeList": [
      {
        "language": "sh",
        "code": "yarn astro add alpinejs"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Complex Data Storage in Middleware",
    "codeDescription": "Illustrates how to store complex data types like functions and maps in the locals object within middleware.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/middleware.mdx#2025-04-08_snippet_2",
    "pageTitle": "Implementing Middleware in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "export function onRequest (context, next) {\n    // intercept data from a request\n    // optionally, modify the properties in `locals`\n    context.locals.user.name = \"John Wick\";\n    context.locals.welcomeTitle = () => {\n        return \"Welcome back \" + locals.user.name;\n    };\n\n    // return a Response or the result of calling `next()`\n    return next();\n};"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Assigning Custom Components to HTML Elements in MDX",
    "codeDescription": "MDX code showing how to map Markdown syntax to custom components.",
    "codeLanguage": "mdx",
    "codeTokens": 56,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/mdx.mdx#2025-04-08_snippet_13",
    "pageTitle": "Integrating MDX with Astro",
    "codeList": [
      {
        "language": "mdx",
        "code": "import Blockquote from '../components/Blockquote.astro';\nexport const components = {blockquote: Blockquote}\n\n> This quote will be a custom Blockquote"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Implementing Reusable Schemas with SchemaContext in Astro Content Collections",
    "codeDescription": "This snippet demonstrates how to use the SchemaContext type to create a reusable image schema and apply it in a blog collection definition. It utilizes the image() schema helper for handling local images in Content Collections.",
    "codeLanguage": "typescript",
    "codeTokens": 147,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-content.mdx#2025-04-08_snippet_9",
    "pageTitle": "Content Collections API Reference for Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineCollection, z, type SchemaContext } from \"astro:content\";\n\nexport const imageSchema = ({ image }: SchemaContext) =>\n    z.object({\n        image: image(),\n        description: z.string().optional(),\n    });\n\nconst blog = defineCollection({\n  loader: /* ... */,\n  schema: ({ image }) => z.object({\n    title: z.string(),\n    permalink: z.string().optional(),\n    image: imageSchema({ image })\n  }),\n});"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Implementing getStaticPaths for Static Blog Post Generation",
    "codeDescription": "This code shows how to use getStaticPaths with Contentful data to generate static blog post pages. It imports the rich text renderer to convert Contentful's rich text to HTML.",
    "codeLanguage": "astro",
    "codeTokens": 190,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/contentful.mdx#2025-04-08_snippet_8",
    "pageTitle": "Integrating Contentful CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { contentfulClient } from \"../../lib/contentful\";\nimport { documentToHtmlString } from \"@contentful/rich-text-html-renderer\";\nimport type { BlogPost } from \"../../lib/contentful\";\n\nexport async function getStaticPaths() {\n  const entries = await contentfulClient.getEntries<BlogPost>({\n    content_type: \"blogPost\",\n  });\n\n  const pages = entries.items.map((item) => ({\n    params: { slug: item.fields.slug },\n    props: {\n      title: item.fields.title,\n      content: documentToHtmlString(item.fields.content),\n      date: new Date(item.fields.date).toLocaleDateString(),\n    },\n  }));\n  return pages;\n}\n---"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Setting Output Directory in Astro",
    "codeDescription": "Configuring the directory where Astro will write the final build output. Defaults to './dist' and can be customized.",
    "codeLanguage": "javascript",
    "codeTokens": 44,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/configuration-reference.mdx#2025-04-08_snippet_15",
    "pageTitle": "Astro Configuration Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "{\n  outDir: './my-custom-build-directory'\n}"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Batching Multiple Database Transactions in Astro DB",
    "codeDescription": "Demonstrates how to batch multiple database queries into a single network request using db.batch(). This example seeds 100 sample comments in the remote database with a single request.",
    "codeLanguage": "ts",
    "codeTokens": 151,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/astro-db.mdx#2025-04-08_snippet_3",
    "pageTitle": "Astro DB Querying and Studio Integration Guide",
    "codeList": [
      {
        "language": "ts",
        "code": "// db/seed.ts\nimport { db, Author, Comment } from 'astro:db';\n\nexport default async function () {\n  let queries;\n  // Sembrar 100 comentarios de muestra en tu base de datos remota\n  // con una única solicitud de red.\n  for (let i = 0; i < 100; i++) {\n    queries.push(db.insert(Comment).values({ body: `Comentario test ${i}` }));\n  }\n  await db.batch(queries);\n}"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Parameter Decoding in Dynamic Routes",
    "codeDescription": "Shows how to handle URL-encoded parameters in dynamic routes using decodeURI.",
    "codeLanguage": "astro",
    "codeTokens": 65,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/routing.mdx#2025-04-08_snippet_3",
    "pageTitle": "Astro Routing Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "--- \nexport function getStaticPaths() {\n  return [\n    { params: { slug: decodeURI(\"%5Bpage%5D\") }}, // decodes to \"[page]\"\n  ]\n}\n---"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Transferring Slots Between Nested Layout Components",
    "codeDescription": "Demonstrates how to transfer slots between nested layout components, allowing content from child components to be passed through to parent components while maintaining structure.",
    "codeLanguage": "astro",
    "codeTokens": 130,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_15",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n---\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width\" />\n\t\t<meta name=\"generator\" content={Astro.generator} />\n    <slot name=\"head\" />\n\t</head>\n\t<body>\n\t\t<slot />\n\t</body>\n</html>"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Adding View Transitions to a Page in Astro",
    "codeDescription": "This snippet demonstrates how to add view transitions to an individual page by importing and adding the ClientRouter component to the page's head.",
    "codeLanguage": "astro",
    "codeTokens": 103,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/view-transitions.mdx#2025-04-08_snippet_0",
    "pageTitle": "Implementing View Transitions in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { ClientRouter } from \"astro:transitions\";\n---\n<html lang=\"en\">\n  <head>\n    <title>My Homepage</title>\n    <ClientRouter />\n  </head>\n  <body>\n    <h1>Welcome to my website!</h1>\n  </body>\n</html>"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "On-Demand Rendering for Blog Posts with Kontent.ai and Astro",
    "codeDescription": "Implementation of on-demand rendering for blog posts using Kontent.ai and Astro. This code fetches a specific blog post based on the URL slug parameter and includes error handling with redirection.",
    "codeLanguage": "astro",
    "codeTokens": 179,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/kontent-ai.mdx#2025-04-08_snippet_12",
    "pageTitle": "Kontent.ai Integration with Astro Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\n\nconst { slug } = Astro.params\nlet blogPost: BlogPost;\ntry {\n    const data = await deliveryClient\n        .items<BlogPost>()\n        .equalsFilter(contentTypes.blog_post.elements.url_slug.codename, slug ?? '')\n        .type(contentTypes.blog_post.codename)\n        .limitParameter(1)\n        .toPromise()\n    blogPost = data.data.items[0]\n} catch (error) {\n    return Astro.redirect('/404')\n}\n---"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Preserving Dark Mode Preference During Navigation",
    "codeDescription": "Demonstrates how to use the astro:before-swap event to ensure dark mode preferences are preserved during client-side navigation in Astro.",
    "codeLanguage": "astro",
    "codeTokens": 131,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/guides/view-transitions.mdx#2025-04-08_snippet_4",
    "pageTitle": "Handling Client-Side Router Lifecycle Events in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "<script is:inline>\n  function setDarkMode(document) {\n    let theme = localStorage.darkMode ? \"dark\" : \"light\";\n    document.documentElement.dataset.theme = theme;\n  }\n\n  setDarkMode(document);\n\n  document.addEventListener(\"astro:before-swap\", (event) => {\n    // Transmettre le document entrant pour définir le thème sur celui-ci\n    setDarkMode(event.newDocument);\n  });\n</script>"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Configuring MDX and Markdown in Astro",
    "codeDescription": "This snippet demonstrates how to configure MDX and Markdown settings in an Astro project, including syntax highlighting, remark plugins, and GitHub-Flavored Markdown options.",
    "codeLanguage": "typescript",
    "codeTokens": 182,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/zh-cn/guides/markdown-content.mdx#2025-04-08_snippet_0",
    "pageTitle": "MDX Configuration and Markdown in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineConfig } from 'astro/config';\nimport mdx from '@astrojs/mdx';\n\nexport default defineConfig({\n  markdown: {\n    syntaxHighlight: 'prism',\n    remarkPlugins: [remarkPlugin1],\n    gfm: true,\n  },\n  integrations: [\n    mdx({\n      // `syntaxHighlight` 继承自 Markdown\n      // Markdown `remarkPlugins` 被忽略\n      // 仅应用 `remarkPlugin2`\n      remarkPlugins: [remarkPlugin2],\n      // `gfm` 覆盖为 `false`\n      gfm: false,\n    })\n  ]\n});"
      }
    ],
    "relevance": 0.957
  },
  {
    "codeTitle": "Creating Page Partials in Astro",
    "codeDescription": "Shows how to create a page partial by exporting the `partial` constant with value `true`, which prevents Astro from rendering a full HTML page with doctype and head content.",
    "codeLanguage": "astro",
    "codeTokens": 68,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/routing-reference.mdx#2025-04-08_snippet_2",
    "pageTitle": "Astro Routing Reference Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport const partial = true\n---\n<!-- Generated HTML available at a URL -->\n<!-- Available to a rendering library -->"
      }
    ],
    "relevance": 0.957
  },
  {
    "codeTitle": "Setting Storyblok Credentials in Astro",
    "codeDescription": "Creates a .env file in the project root to store the Storyblok Preview token. This token is used to fetch drafts and published versions of content from Storyblok.",
    "codeLanguage": "ini",
    "codeTokens": 58,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/storyblok.mdx#2025-04-08_snippet_0",
    "pageTitle": "Integrating Storyblok CMS with Astro",
    "codeList": [
      {
        "language": "ini",
        "code": "STORYBLOK_TOKEN=YOUR_PREVIEW_TOKEN"
      }
    ],
    "relevance": 0.956
  },
  {
    "codeTitle": "Fetching and Displaying Hygraph Content in Astro Components",
    "codeDescription": "Demonstrates how to fetch blog post data from Hygraph using GraphQL queries, define TypeScript interfaces for the content structure, and render the fetched data in an Astro component.",
    "codeLanguage": "astro",
    "codeTokens": 271,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/hygraph.mdx#2025-04-08_snippet_2",
    "pageTitle": "Integrating Hygraph CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\ninterface Post {\n\ttitle: string;\n}\n\nconst query = {\n\tmethod: \"POST\",\n\theaders: { \"Content-Type\": \"application/json\" },\n\tbody: JSON.stringify({\n\t\tquery: `\n      {\n        blogPosts {\n          title\n        }\n      }`,\n\t}),\n};\n\nconst response = await fetch(import.meta.env.HYGRAPH_ENDPOINT, query);\nconst json = await response.json();\nconst posts: Post[] = json.data.blogPosts;\n---\n\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width\" />\n\t\t<meta name=\"generator\" content={Astro.generator} />\n\t\t<title>Astro</title>\n\t</head>\n\t<body>\n\t\t<h1>Astro</h1>\n\t\t{\n\t\t\tposts.map((post) => (\n\t\t\t\t<div>\n\t\t\t\t\t<h2>{post.title}</h2>\n\t\t\t\t</div>\n\t\t\t))\n\t\t}\n\t</body>\n</html>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Fetching Data in Framework Component",
    "codeDescription": "Shows how to fetch movie data in a Preact/TypeScript component using the fetch API. Demonstrates handling JSON responses and rendering data in a functional component.",
    "codeLanguage": "tsx",
    "codeTokens": 146,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/data-fetching.mdx#2025-04-08_snippet_1",
    "pageTitle": "Data Fetching in Astro",
    "codeList": [
      {
        "language": "tsx",
        "code": "import type { FunctionalComponent } from 'preact';\n\nconst data = await fetch('https://example.com/movies.json').then((response) => response.json());\n\n// Components that are build-time rendered also log to the CLI.\n// When rendered with a `client:*` directive, they also log to the browser console.\nconsole.log(data);\n\nconst Movies: FunctionalComponent = () => {\n  // Output the result to the page\n  return <div>{JSON.stringify(data)}</div>;\n};\n\nexport default Movies;"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using Astro.glob for Content Fetching",
    "codeDescription": "Example showing how to use Astro.glob() to fetch Markdown files as a replacement for the deprecated Astro.fetchContent()",
    "codeLanguage": "astro",
    "codeTokens": 55,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/upgrade-to/v2.mdx#2025-04-08_snippet_12",
    "pageTitle": "Astro v2 Migration Guide Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/pages/index.astro\nconst allPosts = await Astro.glob('./posts/*.md');\n---"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Modifying package.json dev script for Tina CMS with yarn",
    "codeDescription": "Update to the package.json dev script to run Tina CMS alongside Astro development server with yarn.",
    "codeLanguage": "json",
    "codeTokens": 67,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/tina-cms.mdx#2025-04-08_snippet_5",
    "pageTitle": "Integrating Tina CMS with Astro",
    "codeList": [
      {
        "language": "json",
        "code": "// package.json\n{\n    \"scripts\": {\n        \"dev\": \"astro dev\",\n        \"dev\": \"tinacms dev -c \\\"astro dev\\\"\"\n    }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Loading Local Files with Astro.glob() in Astro",
    "codeDescription": "Demonstrates how to use Astro.glob() to load local Markdown files in an Astro component. It shows how to access frontmatter data and render article previews.",
    "codeLanguage": "astro",
    "codeTokens": 145,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/reference/api-reference.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro API Reference",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/components/my-component.astro\nconst posts = await Astro.glob('../pages/post/*.md'); // devuelve un array de artículos encontrados en ./src/pages/post/*.md\n---\n\n<div>\n{posts.slice(0, 3).map((post) => (\n  <article>\n    <h2>{post.frontmatter.title}</h2>\n    <p>{post.frontmatter.description}</p>\n    <a href={post.url}>Read more</a>\n  </article>\n))}\n</div>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Refactoring ResponseWithEncoding to Use ArrayBuffer in TypeScript",
    "codeDescription": "This code example shows how to refactor usage of the removed ResponseWithEncoding utility to use an ArrayBuffer instead when working with file data.",
    "codeLanguage": "typescript",
    "codeTokens": 81,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/upgrade-to/v4.mdx#2025-04-08_snippet_5",
    "pageTitle": "Astro v4 Migration Guide Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export async function GET() {\n  const file = await fs.readFile('./bob.png');\n-   return new ResponseWithEncoding(file.toString('binary'), undefined, 'binary');\n+   return new Response(file.buffer);\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Importing Astro Components in Markdown",
    "codeDescription": "This snippet demonstrates how to import Astro components into a Markdown file. It imports Checklist, Box, and Steps components for use in the tutorial content.",
    "codeLanguage": "astro",
    "codeTokens": 73,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/1-setup/index.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Tutorial Setup Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "import Checklist from '~/components/Checklist.astro';\nimport Box from '~/components/tutorial/Box.astro';\nimport { Steps } from '@astrojs/starlight/components';"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Calling an API Endpoint from an Astro Component",
    "codeDescription": "This snippet demonstrates how to import and call an API endpoint directly from an Astro component's server script. It uses the global Astro object to provide request context and renders the response data in the component's HTML.",
    "codeLanguage": "astro",
    "codeTokens": 95,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/recipes/call-endpoints.mdx#2025-04-08_snippet_1",
    "pageTitle": "Calling Endpoints from the Server in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { GET } from './api/hello.ts'\n\nlet response = await GET(Astro)\nconst data = await response.json()\n---\n\n<h1>{data.greeting} world!</h1>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Redacting Sensitive Information with Middleware",
    "codeDescription": "Shows how to use middleware to replace sensitive information with redacted text before rendering the page.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/middleware.mdx#2025-04-08_snippet_4",
    "pageTitle": "Implementing Middleware in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "export const onRequest = async (context, next) => {\n    const response = await next();\n    const html = await response.text();\n    const redactedHtml = html.replaceAll(\"PRIVATE INFO\", \"REDACTED\");\n    \n    return new Response(redactedHtml, {\n        status: 200,\n        headers: response.headers\n    });\n};"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Rendering Dynamic Modular Content from DatoCMS in Astro",
    "codeDescription": "Fetches and renders dynamic modular content blocks from DatoCMS using GraphQL. Implements a switch statement to render different components based on the content model type, supporting both text and image blocks.",
    "codeLanguage": "astro",
    "codeTokens": 287,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/datocms.mdx#2025-04-08_snippet_4",
    "pageTitle": "DatoCMS Integration with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Image from '../components/Image.astro';\nimport Text from '../components/Text.astro';\n\nconst response = await fetch('https://graphql.datocms.com/', {\n\tmethod: 'POST',\n\theaders: {\n\t\t'Content-Type': 'application/json',\n\t\tAccept: 'application/json',\n\t\tAuthorization: `Bearer ${import.meta.env.DATOCMS_API_KEY}`,\n\t},\n\tbody: JSON.stringify({\n\t\tquery: `query Homepage {\n          home {\n            title\n            content {\n              ... on ImageRecord {\n                _modelApiKey\n               image{\n                url\n               }\n              }\n              ... on TextRecord {\n                _modelApiKey\n                text(markdown: true)\n              }\n            }\n          }\n        }\n      `,\n\t}),\n});\n\nconst json = await response.json();\nconst data = json.data.home;\n---\n\n<h1>{data.title}</h1>\n{\n  data.content.map((item: any) => {\n    switch (item._modelApiKey) {\n      case 'image':\n        return <Image item={item} />;\n      case 'text':\n        return <Text item={item} />;\n      default:\n        return null;\n    }\n  })\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Basic Structure of an Astro Component",
    "codeDescription": "Demonstrates the basic structure of an Astro component with the component script section (between code fences) and the component template section.",
    "codeLanguage": "astro",
    "codeTokens": 53,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// Component Script (JavaScript)\n---\n<!-- Component Template (HTML + JS Expressions) -->"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Basic Navigation with HTML Links in Astro",
    "codeDescription": "Demonstrates basic page navigation using standard HTML anchor tags in Astro components.",
    "codeLanguage": "astro",
    "codeTokens": 73,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/routing.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Routing Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "<p>Read more <a href=\"/about/\">about</a> Astro!</p>\n\n<!-- With `base: \"/docs\"` configured -->\n<p>Learn more in our <a href=\"/docs/reference/\">reference</a> section!</p>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating Article Page Template in Astro",
    "codeDescription": "Implements the complete article page template with dynamic routing, data mapping, and HTML structure for displaying individual blog posts.",
    "codeLanguage": "astro",
    "codeTokens": 285,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/drupal.mdx#2025-04-08_snippet_10",
    "pageTitle": "Integrating Drupal with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport {Jsona} from \"jsona\";\nimport {DrupalJsonApiParams} from \"drupal-jsonapi-params\";\nimport type {TJsonApiBody} from \"jsona/lib/JsonaTypes\";\n\nimport type { DrupalNode } from \"../../types\";\nimport {getArticles} from \"../../api/drupal\";\n\n// Get all published articles.\nexport async function getStaticPaths() {\n    const articles = await getArticles();\n    return articles.map((article: DrupalNode) => {\n        return {\n            params: {\n                path: article.path.alias.split('/')[2]\n            },\n            props: {\n                title: article.title,\n                body: article.body,\n                date: new Date(article.created).toLocaleDateString('en-EN', {\n                    day: \"numeric\",\n                    month: \"long\",\n                    year: \"numeric\"\n                })\n            }\n        }\n    });\n}\n\nconst {title, date, body} = Astro.props;\n---\n<html lang=\"en\">\n  <head>\n    <title>{title}</title>\n  </head>\n  <body>\n    <h1>{title}</h1>\n    <time>{date}</time>\n    <article set:html={body.value} />\n  </body>\n</html>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Passing Data from Server to Client using data Attributes in Astro",
    "codeDescription": "An Astro component that demonstrates how to pass variables from Astro's server-side frontmatter to client-side JavaScript using data attributes. The custom element reads the stored message value from the dataset property.",
    "codeLanguage": "astro",
    "codeTokens": 184,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/ja/guides/client-side-scripts.mdx#2025-04-08_snippet_8",
    "pageTitle": "Using Scripts and Event Handling in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst { message = 'Welcome, world!' } = Astro.props;\n---\n\n<!-- message propをdata属性に保存する -->\n<astro-greet data-message={message}>\n  <button>Say hi!</button>\n</astro-greet>\n\n<script>\n  class AstroGreet extends HTMLElement {\n    constructor() {\n\t\t\tsuper();\n\n      // data属性からmessageを読み込む\n      const message = this.dataset.message;\n      const button = this.querySelector('button');\n      button.addEventListener('click', () => {\n        alert(message);\n      });\n\t\t}\n  }\n\n  customElements.define('astro-greet', AstroGreet);\n</script>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Setting Up getStaticPaths for Blog Posts in Astro with Kontent.ai",
    "codeDescription": "Initial setup for implementing static site generation for blog posts using Kontent.ai and Astro's getStaticPaths function. This code fetches all blog posts to prepare for path generation.",
    "codeLanguage": "astro",
    "codeTokens": 122,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/kontent-ai.mdx#2025-04-08_snippet_9",
    "pageTitle": "Kontent.ai Integration with Astro Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\n\nexport async function getStaticPaths() {\n    const blogPosts = await deliveryClient\n        .items<BlogPost>()\n        .type(contentTypes.blog_post.codename)\n        .toPromise()\n---"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Basic Structure of an Astro Component",
    "codeDescription": "Demonstrates the basic structure of an Astro component with the component script section (between code fences) and the component template section.",
    "codeLanguage": "astro",
    "codeTokens": 53,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// Component Script (JavaScript)\n---\n<!-- Component Template (HTML + JS Expressions) -->"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Configuring Basic i18n Routing in Astro",
    "codeDescription": "Basic configuration for internationalization in Astro, specifying supported languages and a default locale. This setup is required to enable i18n routing features in an Astro project.",
    "codeLanguage": "javascript",
    "codeTokens": 92,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/internationalization.mdx#2025-04-08_snippet_0",
    "pageTitle": "Internationalization (i18n) Routing in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from \"astro/config\"\nexport default defineConfig({\n  i18n: {\n    locales: [\"es\", \"en\", \"pt-br\"],\n    defaultLocale: \"en\",\n  }\n})"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Defining getStaticPaths with Valid Params in Astro",
    "codeDescription": "This example demonstrates the correct way to define the getStaticPaths function with a params object for dynamic routes in Astro. The function returns an array of objects, each containing a params property with an object of route parameters.",
    "codeLanguage": "astro",
    "codeTokens": 102,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/errors/invalid-get-static-path-param.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Error Documentation - Invalid Value in getStaticPaths Path Parameters",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport async function getStaticPaths() {\n\treturn [\n\t\t{ params: { slug: \"blog\" } },\n\t\t{ params: { slug: \"about\" } }\n\t];\n}\n---"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Image Usage in MDX Files",
    "codeDescription": "Examples of using images in MDX files with various import and syntax options",
    "codeLanguage": "mdx",
    "codeTokens": 231,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/images.mdx#2025-04-08_snippet_11",
    "pageTitle": "Using Images in Astro",
    "codeList": [
      {
        "language": "mdx",
        "code": "---\ntitle: My Page title\n---\nimport { Image } from 'astro:assets';\nimport rocket from '../assets/rocket.png';\n\n# My MDX Page\n\n// Local image stored in the the same folder\n![Houston in the wild](houston.png)\n\n// Local image stored in src/assets/\n<Image src={rocket} alt=\"A rocketship in space.\" />\n<img src={rocket.src} alt=\"A rocketship in space.\" />\n![A rocketship in space](../assets/rocket.png)\n\n// Image stored in public/images/\n<Image src=\"/images/stars.png\" alt=\"A starry night sky.\" />\n<img src=\"/images/stars.png\" alt=\"A starry night sky.\" />\n![A starry night sky.](/images/stars.png)\n\n// Remote image on another server\n<Image src=\"https://example.com/images/remote-image.png\" />\n<img src=\"https://example.com/images/remote-image.png\" />\n![Astro](https://example.com/images/remote-image.png)"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Installing Decap CMS via Package Managers",
    "codeDescription": "Commands for installing the Decap CMS package using different package managers (npm, pnpm, yarn).",
    "codeLanguage": "shell",
    "codeTokens": 40,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/decap-cms.mdx#2025-04-08_snippet_0",
    "pageTitle": "Integrating Decap CMS with Astro",
    "codeList": [
      {
        "language": "shell",
        "code": "npm install decap-cms-app"
      },
      {
        "language": "shell",
        "code": "pnpm add decap-cms-app"
      },
      {
        "language": "shell",
        "code": "yarn add decap-cms-app"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Basic Structure of an Astro Component",
    "codeDescription": "Demonstrates the basic structure of an Astro component with the component script section (between code fences) and the component template section.",
    "codeLanguage": "astro",
    "codeTokens": 53,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// Component Script (JavaScript)\n---\n<!-- Component Template (HTML + JS Expressions) -->"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Vite Plugin Integration Example",
    "codeDescription": "Example showing how to add a Vite plugin to the build configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/integrations-reference.mdx#2025-04-08_snippet_16",
    "pageTitle": "Astro Integration API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import awesomeCssPlugin from 'awesome-css-vite-plugin';\n\nexport default {\n  name: 'my-integration',\n  hooks: {\n    'astro:build:setup': ({ updateConfig }) => {\n      updateConfig({\n        plugins: [awesomeCssPlugin()],\n      })\n    }\n  }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating a New Markdown Blog Post in Astro",
    "codeDescription": "Example of a new Markdown blog post file with frontmatter properties including layout, title, author, description, image, publication date, and tags.",
    "codeLanguage": "markdown",
    "codeTokens": 166,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/5-astro-api/1.mdx#2025-04-08_snippet_2",
    "pageTitle": "Create a Blog Post Archive in Astro",
    "codeList": [
      {
        "language": "markdown",
        "code": "---\nlayout: ../../layouts/MarkdownPostLayout.astro\ntitle: My Fourth Blog Post\nauthor: Astro Learner\ndescription: \"This post will show up on its own!\"\nimage: \n    url: \"https://docs.astro.build/default-og-image.png\"\n    alt: \"The word astro against an illustration of planets and stars.\"\npubDate: 2022-08-08\ntags: [\"astro\", \"successes\"]\n---\nThis post should show up with my other blog posts, because `import.meta.glob()` is returning a list of all my posts in order to create my list."
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating a Dockerfile for Astro SSR Mode with Node.js",
    "codeDescription": "A Dockerfile configuration for building an Astro site using server-side rendering (SSR) with Node.js. This setup requires the Node adapter and exposes the server on port 4321.",
    "codeLanguage": "docker",
    "codeTokens": 104,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/docker.mdx#2025-04-08_snippet_0",
    "pageTitle": "Building Astro Sites with Docker",
    "codeList": [
      {
        "language": "docker",
        "code": "FROM node:lts AS runtime\nWORKDIR /app\n\nCOPY . .\n\nRUN npm install\nRUN npm run build\n\nENV HOST=0.0.0.0\nENV PORT=4321\nEXPOSE 4321\nCMD node ./dist/server/entry.mjs"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Basic Navigation with HTML Links in Astro",
    "codeDescription": "Demonstrates basic page navigation using standard HTML anchor tags in Astro components.",
    "codeLanguage": "astro",
    "codeTokens": 73,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/routing.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Routing Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "<p>Read more <a href=\"/about/\">about</a> Astro!</p>\n\n<!-- With `base: \"/docs\"` configured -->\n<p>Learn more in our <a href=\"/docs/reference/\">reference</a> section!</p>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Organizing Actions in Separate Files",
    "codeDescription": "This snippet demonstrates how to organize related actions in separate files. It shows creating user-related actions in a separate module and importing them into the main actions file.",
    "codeLanguage": "typescript",
    "codeTokens": 85,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#2025-04-08_snippet_4",
    "pageTitle": "Astro Actions: Type-safe Server Functions",
    "codeList": [
      {
        "language": "typescript",
        "code": "// src/actions/user.ts\nimport { defineAction } from 'astro:actions';\n\nexport const user = {\n  getUser: defineAction(/* ... */),\n  createUser: defineAction(/* ... */),\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Basic Structure of an Astro Component",
    "codeDescription": "Demonstrates the basic structure of an Astro component with the component script section (between code fences) and the component template section.",
    "codeLanguage": "astro",
    "codeTokens": 53,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// Component Script (JavaScript)\n---\n<!-- Component Template (HTML + JS Expressions) -->"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating Header Component in Astro",
    "codeDescription": "Creates a new Header component that wraps the Navigation component inside header and nav elements for semantic HTML structure.",
    "codeLanguage": "astro",
    "codeTokens": 60,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/3-components/3.mdx#2025-04-08_snippet_0",
    "pageTitle": "Building a Responsive Header Component in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Navigation from './Navigation.astro';\n---\n<header>\n  <nav>\n    <Navigation />\n  </nav>\n</header>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating User Sign-in Page with Firebase Authentication in Astro",
    "codeDescription": "This Astro component creates a sign-in page that verifies the user's session, includes a form for email/password sign-in, and uses Firebase client-side authentication to obtain an ID token for server-side verification.",
    "codeLanguage": "astro",
    "codeTokens": 528,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/backend/google-firebase.mdx#2025-04-08_snippet_4",
    "pageTitle": "Server Authentication Endpoints and Pages for Firebase in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { app } from \"../firebase/server\";\nimport { getAuth } from \"firebase-admin/auth\";\nimport Layout from \"../layouts/Layout.astro\";\n\n/* Verificar si el usuario está autenticado */\nconst auth = getAuth(app);\nif (Astro.cookies.has(\"__session\")) {\n  const sessionCookie = Astro.cookies.get(\"__session\").value;\n  const decodedCookie = await auth.verifySessionCookie(sessionCookie);\n  if (decodedCookie) {\n    return Astro.redirect(\"/dashboard\");\n  }\n}\n---\n\n<Layout title=\"Iniciar sesión\">\n  <h1>Iniciar sesión</h1>\n  <p>¿Eres nuevo aquí? <a href=\"/register\">Crear una cuenta</a></p>\n  <form action=\"/api/auth/signin\" method=\"post\">\n    <label for=\"email\" for=\"email\">Correo electrónico</label>\n    <input type=\"email\" name=\"email\" id=\"email\" />\n    <label for=\"password\">Contraseña</label>\n    <input type=\"password\" name=\"password\" id=\"password\" />\n    <button type=\"submit\">Iniciar sesión</button>\n  </form>\n</Layout>\n<script>\n  import {\n    getAuth,\n    inMemoryPersistence,\n    signInWithEmailAndPassword,\n  } from \"firebase/auth\";\n  import { app } from \"../firebase/client\";\n\n  const auth = getAuth(app);\n  // Esto evitará que el navegador almacene los datos de sesión\n  auth.setPersistence(inMemoryPersistence);\n\n  const form = document.querySelector(\"form\") as HTMLFormElement;\n  form.addEventListener(\"submit\", async (e) => {\n    e.preventDefault();\n    const formData = new FormData(form);\n    const email = formData.get(\"email\")?.toString();\n    const password = formData.get(\"password\")?.toString();\n\n    if (!email || !password) {\n      return;\n    }\n    const userCredential = await signInWithEmailAndPassword(\n      auth,\n      email,\n      password\n    );\n    const idToken = await userCredential.user.getIdToken();\n    const response = await fetch(\"/api/auth/signin\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${idToken}`,\n      },\n    });\n\n    if (response.redirected) {\n      window.location.assign(response.url);\n    }\n  });\n</script>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "创建带有 Confetti 效果的交互按钮组件 (Astro)",
    "codeDescription": "这个 Astro 组件展示了如何创建一个点击时触发 confetti 动画的按钮。它使用客户端 JavaScript 来导入 canvas-confetti npm 模块并为所有带有特定数据属性的按钮添加事件监听器。",
    "codeLanguage": "astro",
    "codeTokens": 182,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/zh-cn/guides/client-side-scripts.mdx#2025-04-08_snippet_0",
    "pageTitle": "处理脚本和事件",
    "codeList": [
      {
        "language": "astro",
        "code": "<button data-confetti-button>Celebrate!</button>\n\n<script>\n  // 导入 npm 模块\n  import confetti from 'canvas-confetti';\n\n  // 找到页面上的组件 DOM。\n  const buttons = document.querySelectorAll('[data-confetti-button]');\n\n  // 当 button 被点击时，添加事件监听器来触发 confetti。\n  buttons.forEach((button) => {\n    button.addEventListener('click', () => confetti());\n  });\n</script>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Importing TypeScript in Astro",
    "codeDescription": "Shows how to import TypeScript modules and types in Astro projects.",
    "codeLanguage": "typescript",
    "codeTokens": 39,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/imports.mdx#2025-04-08_snippet_1",
    "pageTitle": "Imports Reference in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { getUser } from './user';\nimport type { UserType } from './user';"
      }
    ],
    "relevance": 0.954
  },
  {
    "codeTitle": "Typing Astro.locals in TypeScript",
    "codeDescription": "Demonstrates how to type the Astro.locals object for autocompletion and type safety in TypeScript.",
    "codeLanguage": "typescript",
    "codeTokens": 69,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/middleware.mdx#2025-04-08_snippet_7",
    "pageTitle": "Implementing Middleware in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "declare namespace App {\n    interface Locals {\n        user: {\n            name: string\n        },\n        welcomeTitle: () => string,\n        orders: Map<string, object>\n    }\n}"
      }
    ],
    "relevance": 0.954
  },
  {
    "codeTitle": "Importing TypeScript in Astro",
    "codeDescription": "Shows how to import TypeScript modules and types in Astro projects.",
    "codeLanguage": "typescript",
    "codeTokens": 39,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/imports.mdx#2025-04-08_snippet_1",
    "pageTitle": "Imports Reference in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { getUser } from './user';\nimport type { UserType } from './user';"
      }
    ],
    "relevance": 0.954
  },
  {
    "codeTitle": "Importing TypeScript in Astro",
    "codeDescription": "Shows how to import TypeScript modules and types in Astro projects.",
    "codeLanguage": "typescript",
    "codeTokens": 39,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/imports.mdx#2025-04-08_snippet_1",
    "pageTitle": "Imports Reference in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { getUser } from './user';\nimport type { UserType } from './user';"
      }
    ],
    "relevance": 0.954
  },
  {
    "codeTitle": "Implementing Dynamic Routing for JSON Endpoints in Astro",
    "codeDescription": "This snippet demonstrates how to use dynamic routing for JSON endpoints in Astro. It exports a GET function and a getStaticPaths function to generate multiple endpoints.",
    "codeLanguage": "typescript",
    "codeTokens": 172,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/endpoints.mdx#2025-04-08_snippet_2",
    "pageTitle": "Creating Custom Endpoints in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import type { APIRoute } from \"astro\";\n\nconst usernames = [\"Sarah\", \"Chris\", \"Yan\", \"Elian\"];\n\nexport const GET: APIRoute = ({ params, request }) => {\n  const id = params.id;\n  \n  return new Response(\n    JSON.stringify({\n      name: usernames[id],\n    }),\n  );\n};\n\nexport function getStaticPaths() {\n  return [\n    { params: { id: \"0\" } },\n    { params: { id: \"1\" } },\n    { params: { id: \"2\" } },\n    { params: { id: \"3\" } },\n  ];\n}"
      }
    ],
    "relevance": 0.953
  },
  {
    "codeTitle": "Implementing CartFlyoutToggle in Preact with Nanostores",
    "codeDescription": "A Preact component that reads and writes to the cart state atom using Nanostores. The component uses the useStore hook to access the current value and updates it with the set method when clicked.",
    "codeLanguage": "jsx",
    "codeTokens": 158,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/sharing-state-islands.mdx#2025-04-08_snippet_4",
    "pageTitle": "Sharing State Between Astro Islands with Nano Stores",
    "codeList": [
      {
        "language": "jsx",
        "code": "// src/components/CartFlyoutToggle.jsx\nimport { useStore } from '@nanostores/preact';\nimport { isCartOpen } from '../cartStore';\n\nexport default function CartButton() {\n  // read the store value with the `useStore` hook\n  const $isCartOpen = useStore(isCartOpen);\n  // write to the imported store using `.set`\n  return (\n    <button onClick={() => isCartOpen.set(!$isCartOpen)}>Cart</button>\n  )\n}"
      }
    ],
    "relevance": 0.953
  },
  {
    "codeTitle": "Passing Props with getStaticPaths in Astro",
    "codeDescription": "Demonstrates how to fetch data and pass it to generated pages using the `props` object in `getStaticPaths()`, then access that data in the component via `Astro.props`.",
    "codeLanguage": "astro",
    "codeTokens": 134,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/routing-reference.mdx#2025-04-08_snippet_5",
    "pageTitle": "Astro Routing Reference Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport async function getStaticPaths() {\n  const response = await fetch('...');\n  const data = await response.json();\n\n  return data.map((post) => {\n    return {\n      params: { id: post.id },\n      props: { post },\n    };\n  });\n}\n\nconst { id } = Astro.params;\nconst { post } = Astro.props;\n---\n<h1>{id}: {post.name}</h1>"
      }
    ],
    "relevance": 0.953
  },
  {
    "codeTitle": "Processing POST Requests with JSON Data in Astro",
    "codeDescription": "This snippet demonstrates how to handle POST requests with JSON data in Astro API routes. It checks the Content-Type header, parses the JSON body, and returns a response based on the input.",
    "codeLanguage": "TypeScript",
    "codeTokens": 145,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/guides/endpoints.mdx#2025-04-08_snippet_6",
    "pageTitle": "Creating Custom Endpoints in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "export const POST: APIRoute = async ({ request }) => {\n  if (request.headers.get(\"Content-Type\") === \"application/json\") {\n    const body = await request.json();\n    const name = body.name;\n    \n    return new Response(\n      JSON.stringify({\n        message: \"Votre nom était : \" + name,\n      }),\n      {\n        status: 200,\n      },\n    );\n  }\n  \n  return new Response(null, { status: 400 });\n};"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Configuring S3 Bucket Policy for Public Access",
    "codeDescription": "JSON policy configuration to enable public read access to objects in an S3 bucket. This policy allows anyone to access the static website files without authentication.",
    "codeLanguage": "json",
    "codeTokens": 116,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/deploy/aws.mdx#2025-04-08_snippet_4",
    "pageTitle": "Deploying Astro Sites to AWS",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"PublicReadGetObject\",\n      \"Effect\": \"Allow\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:GetObject\",\n      \"Resource\": \"arn:aws:s3:::<BUCKET_NAME>/*\"\n    }\n  ]\n}"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Configuring Route Parameters in Astro getStaticPaths",
    "codeDescription": "Example demonstrating the correct way to specify route parameters using getStaticPaths in an Astro blog route. Shows how to define the params property to create dynamic routes like 'site.com/blog/1'.",
    "codeLanguage": "astro",
    "codeTokens": 81,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/errors/get-static-paths-expected-params.mdx#2025-04-08_snippet_0",
    "pageTitle": "Error Documentation - Missing params in getStaticPaths",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport async function getStaticPaths() {\n\treturn [\n\t\t{ params: { id: '1' } }\n\t];\n}\n---"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Updating Image Src with Base Path Prefix in Astro Components",
    "codeDescription": "This snippet demonstrates how to correctly reference an image from the public folder when using a base configuration, ensuring the base value is prefixed to the path.",
    "codeLanguage": "astro",
    "codeTokens": 61,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/upgrade-to/v4.mdx#2025-04-08_snippet_8",
    "pageTitle": "Astro v4 Migration Guide Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "// To access public/images/my-image.png:\n\n<img src=\"/docs/images/my-image.png\" alt=\"\">"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Implementing Firebase Sign-Out Endpoint in Astro",
    "codeDescription": "Creates an API endpoint to handle user sign-out requests, removing the session cookie and redirecting to the sign-in page.",
    "codeLanguage": "ts",
    "codeTokens": 81,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/backend/google-firebase.mdx#2025-04-08_snippet_5",
    "pageTitle": "Integrating Firebase with Astro",
    "codeList": [
      {
        "language": "ts",
        "code": "import type { APIRoute } from \"astro\";\n\nexport const GET: APIRoute = async ({ redirect, cookies }) => {\n  cookies.delete(\"__session\", {\n    path: \"/\",\n  });\n  return redirect(\"/signin\");\n};"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Fetching and rendering Drupal articles in Astro component",
    "codeDescription": "This Astro component demonstrates how to fetch article data from Drupal using the JSON:API, process it with JSONA and drupal-jsonapi-params libraries, and render it in the component.",
    "codeLanguage": "astro",
    "codeTokens": 337,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/drupal.mdx#2025-04-08_snippet_2",
    "pageTitle": "Integrating Drupal with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport {Jsona} from \"jsona\";\nimport {DrupalJsonApiParams} from \"drupal-jsonapi-params\";\nimport type {TJsonApiBody} from \"jsona/lib/JsonaTypes\";\n\n// Get the Drupal base URL\nexport const baseUrl: string = import.meta.env.DRUPAL_BASE_URL;\n\n// Generate the JSON:API Query. Get all title and body from published articles.\nconst params: DrupalJsonApiParams = new DrupalJsonApiParams();\nparams.addFields(\"node--article\", [\n        \"title\",\n        \"body\",\n    ])\n    .addFilter(\"status\", \"1\");\n// Generates the query string.\nconst path: string = params.getQueryString();\nconst url: string = baseUrl + '/jsonapi/node/article?' + path;\n\n// Get the articles\nconst request: Response = await fetch(url);\nconst json: string | TJsonApiBody = await request.json();\n// Initiate Jsona.\nconst dataFormatter: Jsona = new Jsona();\n// Deserialise the response.\nconst articles = dataFormatter.deserialize(json);\n---\n<body>\n {articles?.length ? articles.map((article: any) => (\n    <section>\n      <h2>{article.title}</h2>\n      <article set:html={article.body.value}></article>\n    </section>\n )): <div><h1>No Content found</h1></div> }\n</body>"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "JSX Framework Type Configuration",
    "codeDescription": "Example of using pragma comments to handle multiple JSX frameworks in the same project.",
    "codeLanguage": "jsx",
    "codeTokens": 50,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/typescript.mdx#2025-04-08_snippet_18",
    "pageTitle": "TypeScript Support in Astro",
    "codeList": [
      {
        "language": "jsx",
        "code": "// For Preact\n/** @jsxImportSource preact */\n\n// For Solid\n/** @jsxImportSource solid-js */"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Using define:vars Directive to Pass Server Variables to Client in Astro",
    "codeDescription": "Demonstrates how to use the define:vars directive to pass server-side variables from component frontmatter into client-side style and script tags. This enables dynamic styling and scripting based on component props or other server-defined values.",
    "codeLanguage": "astro",
    "codeTokens": 142,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/directives-reference.mdx#2025-04-08_snippet_6",
    "pageTitle": "Template Directives Reference in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst foregroundColor = \"rgb(221 243 228)\";\nconst backgroundColor = \"rgb(24 121 78)\";\nconst message = \"Astro is awesome!\";\n---\n<style define:vars={{ textColor: foregroundColor, backgroundColor }}>\n  h1 {\n    background-color: var(--backgroundColor);\n    color: var(--textColor);\n  }\n</style>\n\n<script define:vars={{ message }}>\n  alert(message);\n</script>"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Fetching and Displaying a ButterCMS Collection in Astro",
    "codeDescription": "Retrieves a collection of shop items from ButterCMS and renders them in an Astro component. The example defines a TypeScript interface to match the collection's fields and uses set:html to render WYSIWYG content.",
    "codeLanguage": "astro",
    "codeTokens": 156,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/buttercms.mdx#2025-04-08_snippet_5",
    "pageTitle": "Integrating ButterCMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { butterClient } from \"../lib/buttercms\";\nconst response = await butterClient.content.retrieve([\"shopitem\"]);\n\ninterface ShopItem {\n\tname: string,\n\tprice: number,\n\tdescription: string,\n}\n\nconst items = response.data.data.shopitem as ShopItem[];\n---\n<body>\n\t{items.map(item => <div>\n\t\t<h2>{item.name} - ${item.price}</h2>\n\t\t<p set:html={item.description}></p>\n\t</div>)}\n</body>"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Implementing Firebase Sign-Out Endpoint in Astro",
    "codeDescription": "Creates an API endpoint to handle user sign-out requests, removing the session cookie and redirecting to the sign-in page.",
    "codeLanguage": "ts",
    "codeTokens": 81,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/backend/google-firebase.mdx#2025-04-08_snippet_5",
    "pageTitle": "Integrating Firebase with Astro",
    "codeList": [
      {
        "language": "ts",
        "code": "import type { APIRoute } from \"astro\";\n\nexport const GET: APIRoute = async ({ redirect, cookies }) => {\n  cookies.delete(\"__session\", {\n    path: \"/\",\n  });\n  return redirect(\"/signin\");\n};"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Extending Global Window and GlobalThis Objects",
    "codeDescription": "Example of declaring global variables and functions in env.d.ts to extend the globalThis and window objects.",
    "codeLanguage": "typescript",
    "codeTokens": 44,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/typescript.mdx#2025-04-08_snippet_8",
    "pageTitle": "TypeScript Support in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "declare var myString: string;\ndeclare function myFunction(): boolean;"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Implementing Firebase Sign-Out Endpoint in Astro",
    "codeDescription": "Creates an API endpoint to handle user sign-out requests, removing the session cookie and redirecting to the sign-in page.",
    "codeLanguage": "ts",
    "codeTokens": 81,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/backend/google-firebase.mdx#2025-04-08_snippet_5",
    "pageTitle": "Integrating Firebase with Astro",
    "codeList": [
      {
        "language": "ts",
        "code": "import type { APIRoute } from \"astro\";\n\nexport const GET: APIRoute = async ({ redirect, cookies }) => {\n  cookies.delete(\"__session\", {\n    path: \"/\",\n  });\n  return redirect(\"/signin\");\n};"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Configuring package.json for Astro Add Command",
    "codeDescription": "Shows how to configure the package.json file to allow installation via the 'astro add' command. The 'astro-integration' keyword must be added to the keywords field.",
    "codeLanguage": "json",
    "codeTokens": 62,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/ko/reference/integrations-reference.mdx#2025-04-08_snippet_5",
    "pageTitle": "Astro Integration Hooks Reference",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"name\": \"example\",\n  \"keywords\": [\"astro-integration\"],\n}"
      }
    ],
    "relevance": 0.951
  },
  {
    "codeTitle": "Creating Custom Image Endpoint with Astro API",
    "codeDescription": "Example of implementing a custom endpoint for image transformation. This code demonstrates how to use the getConfiguredImageService and imageConfig utilities to process images on demand.",
    "codeLanguage": "typescript",
    "codeTokens": 185,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/image-service-reference.mdx#2025-04-08_snippet_2",
    "pageTitle": "Building Image Services with Astro's API",
    "codeList": [
      {
        "language": "typescript",
        "code": "import type { APIRoute } from \"astro\";\nimport { getConfiguredImageService, imageConfig } from 'astro:assets';\n\nexport const GET: APIRoute = async ({ request }) => {\n  const imageService = await getConfiguredImageService();\n\n  const imageTransform = imageService.parseURL(new URL(request.url), imageConfig);\n  // ... fetch the image from imageTransform.src and store it in inputBuffer\n  const { data, format } = await imageService.transform(inputBuffer, imageTransform, imageConfig);\n  return new Response(data, {\n\t\t\tstatus: 200,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': mime.getType(format) || ''\n      }\n    }\n  );\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Dynamic Route Parameters in Astro",
    "codeDescription": "Shows implementation of dynamic routing with parameters and getStaticPaths() function for static site generation.",
    "codeLanguage": "astro",
    "codeTokens": 97,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/routing.mdx#2025-04-08_snippet_1",
    "pageTitle": "Astro Routing Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport function getStaticPaths() {\n  return [\n    { params: { dog: \"clifford\" }},\n    { params: { dog: \"rover\" }},\n    { params: { dog: \"spot\" }},\n  ];\n}\n\nconst { dog } = Astro.params;\n---\n<div>Good dog, {dog}!</div>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Emitting ESM Image Metadata and Contents in TypeScript",
    "codeDescription": "Shows how to use the emitESMImage function to process an image file and emit its metadata and optionally its contents, with different behavior in build and development modes.",
    "codeLanguage": "typescript",
    "codeTokens": 232,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/image-service-reference.mdx#2025-04-08_snippet_16",
    "pageTitle": "Building Image Services with Astro's API",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { emitESMImage } from 'astro/assets/utils';\n\nconst imageId = '/images/photo.jpg';\nconst unusedWatchMode = false; // Deprecated, unused \nconst unusedExperimentalSvgEnabled = false; // Set to `true` only if you are using SVG and want the file data to be embedded\n\ntry {\n  const result = await emitESMImage(imageId, unusedWatchMode, unusedExperimentalSvgEnabled);\n  if (result) {\n    console.log('Image metadata with contents:', result);\n    // Example output:\n    // {\n    //   width: 800,\n    //   height: 600,\n    //   format: 'jpg',\n    //   contents: Uint8Array([...])\n    // }\n  } else {\n    console.log('No metadata was emitted for this image.');\n  }\n} catch (error) {\n  console.error('Failed to emit ESM image:', error);\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Configuring Authorized Image Domains in Astro",
    "codeDescription": "Configuration example for allowing specific domains for image optimization",
    "codeLanguage": "typescript",
    "codeTokens": 44,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/images.mdx#2025-04-08_snippet_8",
    "pageTitle": "Using Images in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "// astro.config.mjs\nexport default defineConfig({\n  image: {\n    domains: [\"astro.build\"],\n  }\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Gerando Rotas Estáticas a partir de Coleções em Astro",
    "codeDescription": "Este snippet demonstra como usar getStaticPaths() para gerar múltiplas páginas estáticas a partir de uma coleção de conteúdo, mapeando cada entrada para um novo caminho de URL.",
    "codeLanguage": "astro",
    "codeTokens": 202,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/pt-br/guides/content-collections.mdx#2025-04-08_snippet_2",
    "pageTitle": "Gerenciando Coleções de Conteúdo em Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/pages/postagens/[...slug].astro\nimport { getCollection } from 'astro:content';\n// 1. Gere um novo caminho para cada entrada da coleção\nexport async function getStaticPaths() {\n  const entradasBlog = await getCollection('blog');\n  return entradasBlog.map(entrada => ({\n    params: { slug: entrada.slug }, props: { entrada },\n  }));\n}\n// 2. Quando for hora de renderizar, você pode pegar e entrada diretamente da prop\nconst { entrada } = Astro.props;\nconst { Content } = await entrada.render();\n---\n<h1>{entrada.data.titulo}</h1>\n<Content />"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Including Decap CMS via CDN",
    "codeDescription": "HTML script tag for including Decap CMS directly from a CDN.",
    "codeLanguage": "html",
    "codeTokens": 79,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/decap-cms.mdx#2025-04-08_snippet_1",
    "pageTitle": "Integrating Decap CMS with Astro",
    "codeList": [
      {
        "language": "html",
        "code": "<body>\n  <!-- Include the script that builds the page and powers Decap CMS -->\n  <script src=\"https://unpkg.com/decap-cms@^3.1.2/dist/decap-cms.js\"></script>\n</body>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Custom Bump Animation Layout Definition",
    "codeDescription": "Implementation of a custom bump animation in the root layout file using global styles and keyframes.",
    "codeLanguage": "astro",
    "codeTokens": 169,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/view-transitions.mdx#2025-04-08_snippet_6",
    "pageTitle": "Implementing View Transitions in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { ClientRouter } from \"astro:transitions\";\n---\n<html lang=\"en\">\n  <head>\n    <ClientRouter />\n  </head>\n  <body>\n    <slot />\n  </body>\n</html>\n\n<style is:global>\n  @keyframes bump {\n    0% {\n      opacity: 0;\n      transform: scale(1) translateX(200px);\n    }\n    50% {\n      opacity: 0.5;\n      transform: scale(1.1);\n    }\n    100% {\n      opacity: 1;\n      transform: scale(1) translateX(0);\n    }\n  }\n</style>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Setting Site URL in Astro Configuration",
    "codeDescription": "Configuring the site URL for an Astro project. This is used to generate sitemaps and canonical URLs in the final build.",
    "codeLanguage": "javascript",
    "codeTokens": 48,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/configuration-reference.mdx#2025-04-08_snippet_1",
    "pageTitle": "Astro Configuration Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "{\n  site: 'https://www.my-site.dev'\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Importing Markdown Files with Astro.glob()",
    "codeDescription": "Example showing how to use Astro.glob() to import all Markdown files from a directory and render articles based on their frontmatter content. The function returns an array of exported content from each matching file.",
    "codeLanguage": "astro",
    "codeTokens": 170,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/imports.mdx#2025-04-08_snippet_0",
    "pageTitle": "Importing Files in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// importa todos los archivos que terminan en `.md` en `./src/pages/post/`\nconst posts = await Astro.glob('../pages/post/*.md'); \n---\n<!-- Renderiza un <article> para los primeros 5 posts del blog -->\n<div>\n{posts.slice(0, 4).map((post) => (\n  <article>\n    <h2>{post.frontmatter.title}</h2>\n    <p>{post.frontmatter.description}</p>\n    <a href={post.url}>Leer más</a>\n  </article>\n))}\n</div>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Chaining Middleware with Rewriting in Astro",
    "codeDescription": "This snippet demonstrates chaining multiple middleware functions using sequence() in Astro. It shows how rewriting with next() affects the context passed to subsequent middleware functions without re-executing the entire chain.",
    "codeLanguage": "javascript",
    "codeTokens": 173,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/middleware.mdx#2025-04-08_snippet_11",
    "pageTitle": "Implementing Middleware in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Current URL is https://example.com/blog\n\n// First middleware function\nasync function first(_, next) {\n  console.log(context.url.pathname) // this will log \"/blog\"\n  // Rewrite to a new route, the homepage \n  // Return updated `context` which is passed to next function\n  return next(\"/\")\n}\n\n// Current URL is still https://example.com/blog\n\n// Second middleware function\nasync function second(context, next) {\n  // Receives updated `context`\n  console.log(context.url.pathname) // this will log  \"/\"    \n  return next()\n}\n\nexport const onRequest = sequence(first, second);"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Fetching Data in Framework Component",
    "codeDescription": "Preactフレームワークコンポーネントでfetch()を使用してJSONデータを取得し、コンポーネントで使用する例です。",
    "codeLanguage": "tsx",
    "codeTokens": 208,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/ja/guides/data-fetching.mdx#2025-04-08_snippet_1",
    "pageTitle": "データフェッチ in Astro",
    "codeList": [
      {
        "language": "tsx",
        "code": "import type { FunctionalComponent } from 'preact';\n\nconst data = await fetch('https://example.com/movies.json').then((response) =>\n  response.json()\n);\n\n// ビルド時にレンダリングされるコンポーネントはCLIにもログを出力します。\n// client:* ディレクティブでレンダリングされた場合、ブラウザコンソールにもログが出力されます。\nconsole.log(data);\n\nconst Movies: FunctionalComponent = () => {\n  // 結果をページに出力する\n  return <div>{JSON.stringify(data)}</div>;\n};\n\nexport default Movies;"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Creating Project Directory in Bash",
    "codeDescription": "Commands to create a new directory for your Astro project and navigate into it.",
    "codeLanguage": "bash",
    "codeTokens": 41,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/install-and-setup.mdx#2025-04-08_snippet_12",
    "pageTitle": "Installing Astro: A Step-by-Step Guide",
    "codeList": [
      {
        "language": "bash",
        "code": "mkdir my-astro-project\ncd my-astro-project"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Rendering CartFlyout Component in React/Preact",
    "codeDescription": "This component renders the cart flyout, displaying all items in the cart. It uses Nanostores' useStore hook to access the cart state and items.",
    "codeLanguage": "jsx",
    "codeTokens": 232,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/sharing-state-islands.mdx#2025-04-08_snippet_21",
    "pageTitle": "Sharing State Between Astro Islands with Nano Stores",
    "codeList": [
      {
        "language": "jsx",
        "code": "// src/components/CartFlyout.jsx\nimport { useStore } from '@nanostores/preact';\nimport { isCartOpen, cartItems } from '../cartStore';\n\nexport default function CartFlyout() {\n  const $isCartOpen = useStore(isCartOpen);\n  const $cartItems = useStore(cartItems);\n\n  return $isCartOpen ? (\n    <aside>\n      {Object.values($cartItems).length ? (\n        <ul>\n          {Object.values($cartItems).map(cartItem => (\n            <li>\n              <img src={cartItem.imageSrc} alt={cartItem.name} />\n              <h3>{cartItem.name}</h3>\n              <p>Quantity: {cartItem.quantity}</p>\n            </li>\n          ))}\n        </ul>\n      ) : <p>Your cart is empty!</p>}\n    </aside>\n  ) : null;\n}\n"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Rest Parameter Example in Astro",
    "codeDescription": "Shows how to use undefined in rest parameters to represent empty paths. Demonstrates different routing patterns including numbered routes and the base route.",
    "codeLanguage": "astro",
    "codeTokens": 105,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/errors/get-static-paths-invalid-route-param.mdx#2025-04-08_snippet_1",
    "pageTitle": "Invalid getStaticPaths Route Parameter Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport async function getStaticPaths() {\n\treturn [\n\t\t{ params: { id: 1 } } // /route/1\n\t\t{ params: { id: 2 } } // /route/2\n\t\t{ params: { id: undefined } } // /route/\n\t];\n}\n---"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Pushing Schema Changes to Remote Database using CLI",
    "codeDescription": "This set of commands shows how to push local schema changes to a remote database using the Astro CLI. It includes options for both safe updates and force resets that may destroy existing data.",
    "codeLanguage": "sh",
    "codeTokens": 55,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/astro-db.mdx#2025-04-08_snippet_21",
    "pageTitle": "Astro DB Configuration and Setup Guide",
    "codeList": [
      {
        "language": "sh",
        "code": "npm run astro db push --remote"
      },
      {
        "language": "sh",
        "code": "npm run astro db push --remote --force-reset"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Defining Content Collection References in Astro",
    "codeDescription": "Demonstrates how to set up references between content collections, allowing entries to link to items in other collections with proper type checking and validation.",
    "codeLanguage": "typescript",
    "codeTokens": 219,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_9",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineCollection, reference, z } from 'astro:content';\nimport { glob } from 'astro/loaders';\n\nconst blog = defineCollection({\n  loader: glob({ pattern: '**/[^_]*.md', base: \"./src/data/blog\" }),\n  schema: z.object({\n    title: z.string(),\n    // Reference a single author from the `authors` collection by `id`\n    author: reference('authors'),\n    // Reference an array of related posts from the `blog` collection by `slug`\n    relatedPosts: z.array(reference('blog')),\n  })\n});\n\nconst authors = defineCollection({\n  loader: glob({ pattern: '**/[^_]*.json', base: \"./src/data/authors\" }),\n  schema: z.object({\n    name: z.string(),\n    portfolio: z.string().url(),\n  })\n});\n\nexport const collections = { blog, authors };"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Composant Astro réutilisable avec props",
    "codeDescription": "Montre comment créer un composant Astro réutilisable qui accepte des props et les utilise dans son template.",
    "codeLanguage": "astro",
    "codeTokens": 72,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/basics/astro-components.mdx#2025-04-08_snippet_3",
    "pageTitle": "Composants Astro : Éléments de base flexibles pour les projets Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst { greeting, name } = Astro.props;\n---\n<h2>{greeting}, {name} !</h2>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Using HTML Attribute Types in Astro Components",
    "codeDescription": "Example of using Astro's built-in HTML attribute types to create strongly-typed component props that mirror HTML elements.",
    "codeLanguage": "astro",
    "codeTokens": 110,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/typescript.mdx#2025-04-08_snippet_11",
    "pageTitle": "TypeScript Support in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport type { HTMLAttributes } from \"astro/types\";\n\n// use a `type`\ntype Props = HTMLAttributes<\"a\">;\n\n// or extend with an `interface`\ninterface Props extends HTMLAttributes<\"a\"> {\n  myProp?: boolean;\n}\n\nconst { href, ...attrs } = Astro.props;\n---\n<a href={href} {...attrs}>\n  <slot />\n</a>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Working with URL Objects in Astro",
    "codeDescription": "Shows how to use Astro.url to access and display URL properties, including pathname and origin. The example demonstrates displaying the current URL information on a page.",
    "codeLanguage": "astro",
    "codeTokens": 90,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_4",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "<h1>The current URL is: {Astro.url}</h1>\n<h1>The current URL pathname is: {Astro.url.pathname}</h1>\n<h1>The current URL origin is: {Astro.url.origin}</h1>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Table Column Configuration Example",
    "codeDescription": "Example of defining table columns with various types and configurations",
    "codeLanguage": "ts",
    "codeTokens": 86,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/db.mdx#2025-04-08_snippet_4",
    "pageTitle": "Astro DB Integration Documentation",
    "codeList": [
      {
        "language": "ts",
        "code": "import { defineTable, column, NOW } from 'astro:db';\n\nconst Comment = defineTable({\n\tcolumns: {\n\t\tid: column.number({ primaryKey: true }),\n\t\tauthor: column.text(),\n\t\tcontent: column.text({ optional: true }),\n\t\tpublished: column.date({ default: NOW }),\n\t},\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Defining Content Collection References in Astro",
    "codeDescription": "Demonstrates how to set up references between content collections, allowing entries to link to items in other collections with proper type checking and validation.",
    "codeLanguage": "typescript",
    "codeTokens": 219,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_9",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineCollection, reference, z } from 'astro:content';\nimport { glob } from 'astro/loaders';\n\nconst blog = defineCollection({\n  loader: glob({ pattern: '**/[^_]*.md', base: \"./src/data/blog\" }),\n  schema: z.object({\n    title: z.string(),\n    // Reference a single author from the `authors` collection by `id`\n    author: reference('authors'),\n    // Reference an array of related posts from the `blog` collection by `slug`\n    relatedPosts: z.array(reference('blog')),\n  })\n});\n\nconst authors = defineCollection({\n  loader: glob({ pattern: '**/[^_]*.json', base: \"./src/data/authors\" }),\n  schema: z.object({\n    name: z.string(),\n    portfolio: z.string().url(),\n  })\n});\n\nexport const collections = { blog, authors };"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Component Props Definition",
    "codeDescription": "Demonstrates how to define and use component props with TypeScript interface.",
    "codeLanguage": "astro",
    "codeTokens": 73,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/pt-br/basics/astro-components.mdx#2025-04-08_snippet_4",
    "pageTitle": "Implementing Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport interface Props {\n  nome: string;\n  saudacao?: string;\n}\n\nconst { saudacao = \"Olá\", nome } = Astro.props;\n---\n<h2>{saudacao}, {nome}!</h2>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Dynamic Route Parameters in Astro",
    "codeDescription": "Shows implementation of dynamic routing with parameters and getStaticPaths() function for static site generation.",
    "codeLanguage": "astro",
    "codeTokens": 97,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/routing.mdx#2025-04-08_snippet_1",
    "pageTitle": "Astro Routing Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport function getStaticPaths() {\n  return [\n    { params: { dog: \"clifford\" }},\n    { params: { dog: \"rover\" }},\n    { params: { dog: \"spot\" }},\n  ];\n}\n\nconst { dog } = Astro.params;\n---\n<div>Good dog, {dog}!</div>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Custom Swap Function Implementation",
    "codeDescription": "Demonstrates creating a custom swap function using Astro's built-in swap utilities.",
    "codeLanguage": "astro",
    "codeTokens": 135,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/view-transitions.mdx#2025-04-08_snippet_18",
    "pageTitle": "Implementing View Transitions in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "<script>\n  import { swapFunctions } from \"astro:transitions/client\";\n  \n  // substitutes `window.document` with `doc`\n  function mySwap(doc: Document) {\n    swapFunctions.deselectScripts(doc);\n    swapFunctions.swapRootAttributes(doc);\n    swapFunctions.swapHeadElements(doc);\n    const restoreFocusFunction = swapFunctions.saveFocus();\n    swapFunctions.swapBodyElement(doc.body, document.body);\n    restoreFocusFunction();\n  }\n  \n  event.swap = () => mySwap(event.newDocument);\n<script>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Importing CSS in Astro Components",
    "codeDescription": "This example demonstrates how imported CSS interacts with scoped styles in Astro components. Scoped styles take precedence over imported styles of equal specificity.",
    "codeLanguage": "astro",
    "codeTokens": 45,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/styling.mdx#2025-04-08_snippet_9",
    "pageTitle": "Styling Components in Astro",
    "codeList": [
      {
        "language": "css",
        "code": "h1 {\n  color: purple;\n}"
      },
      {
        "language": "astro",
        "code": "---\nimport \"./make-it-purple.css\"\n---\n<style>\n  h1 { color: red }\n</style>\n<div>\n  <h1>\n    This header will be red!\n  </h1>\n</div>"
      }
    ],
    "relevance": 0.949
  },
  {
    "codeTitle": "Client-Side Navigation After Action in React Component",
    "codeDescription": "This example demonstrates how to use Astro's navigate() function to redirect to a new page after an action succeeds. It shows a LogoutButton that navigates to the homepage after successful logout.",
    "codeLanguage": "tsx",
    "codeTokens": 119,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#2025-04-08_snippet_10",
    "pageTitle": "Astro Actions: Type-safe Server Functions",
    "codeList": [
      {
        "language": "tsx",
        "code": "import { actions } from 'astro:actions';\nimport { navigate } from 'astro:transitions/client';\n\nexport function LogoutButton() {\n  return (\n    <button onClick={async () => {\n      const { error } = await actions.logout();\n      if (!error) navigate('/');\n    }}>\n      Logout\n    </button>\n  );\n}"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Filtering Database Queries with Conditions",
    "codeDescription": "Astro component that queries for comments containing a specific phrase using the like operator for filtering results.",
    "codeLanguage": "astro",
    "codeTokens": 72,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/astro-db.mdx#2025-04-08_snippet_17",
    "pageTitle": "Astro DB Configuration and Setup Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { db, Comment, like } from 'astro:db';\n\nconst comments = await db.select().from(Comment).where(\n    like(Comment.body, '%Astro DB%')\n);\n---"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Installing Alpine.js Integration with npm",
    "codeDescription": "Command to install the Alpine.js integration using npm and Astro's automated setup tool.",
    "codeLanguage": "sh",
    "codeTokens": 34,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/alpinejs.mdx#2025-04-08_snippet_0",
    "pageTitle": "Alpine.js Integration with Astro",
    "codeList": [
      {
        "language": "sh",
        "code": "npx astro add alpinejs"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Injecting Variables in Astro Components",
    "codeDescription": "Demonstrates how to use local JavaScript variables within the HTML template of an Astro component using JSX-like expressions.",
    "codeLanguage": "astro",
    "codeTokens": 75,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/pt-br/reference/astro-syntax.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Component Syntax Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst nome = \"Astro\";\n---\n<div>\n  <h1>Olá {nome}!</h1>  <!-- Produz <h1>Olá Astro!</h1> -->\n</div>"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Client-Side Navigation After Action in React Component",
    "codeDescription": "This example demonstrates how to use Astro's navigate() function to redirect to a new page after an action succeeds. It shows a LogoutButton that navigates to the homepage after successful logout.",
    "codeLanguage": "tsx",
    "codeTokens": 119,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#2025-04-08_snippet_10",
    "pageTitle": "Astro Actions: Type-safe Server Functions",
    "codeList": [
      {
        "language": "tsx",
        "code": "import { actions } from 'astro:actions';\nimport { navigate } from 'astro:transitions/client';\n\nexport function LogoutButton() {\n  return (\n    <button onClick={async () => {\n      const { error } = await actions.logout();\n      if (!error) navigate('/');\n    }}>\n      Logout\n    </button>\n  );\n}"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Defining Named Slots in Astro Components",
    "codeDescription": "Demonstrates how to create an Astro component with named slots using the 'name' attribute. This allows for targeted placement of HTML content in specific locations within the component template.",
    "codeLanguage": "astro",
    "codeTokens": 193,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_10",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/components/Wrapper.astro\nimport Header from './Header.astro';\nimport Logo from './Logo.astro';\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props;\n---\n<div id=\"content-wrapper\">\n  <Header />\n  <!--  children with the `slot=\"after-header\"` attribute will go here -->\n  <slot name=\"after-header\" />\n  <Logo />\n  <h1>{title}</h1>\n  <!--  children without a `slot`, or with `slot=\"default\"` attribute will go here -->\n  <slot />\n  <Footer />\n  <!--  children with the `slot=\"after-footer\"` attribute will go here -->\n  <slot name=\"after-footer\" />\n</div>"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Accessing Dynamic Route Parameters in Astro",
    "codeDescription": "Shows how to access dynamic route parameters using Astro.params in a static build. It demonstrates the relationship between getStaticPaths() and Astro.params.",
    "codeLanguage": "astro",
    "codeTokens": 104,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/reference/api-reference.mdx#2025-04-08_snippet_3",
    "pageTitle": "Astro API Reference",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport function getStaticPaths() {\n  return [\n    { params: { id: '1' } },\n    { params: { id: '2' } },\n    { params: { id: '3' } }\n  ];\n}\n\nconst { id } = Astro.params;\n---\n<h1>{id}</h1>"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Loading Environment Variables in Astro Config File",
    "codeDescription": "This snippet demonstrates how to manually load environment variables from .env files in an Astro configuration file using Vite's loadEnv helper function.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/environment-variables.mdx#2025-04-08_snippet_6",
    "pageTitle": "Using Environment Variables in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { loadEnv } from \"vite\";\n\nconst { SECRET_PASSWORD } = loadEnv(process.env.NODE_ENV, process.cwd(), \"\");"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Querying Posts from Xata in Astro Component",
    "codeDescription": "Using the XataClient to fetch paginated posts from a Xata database. This example imports the client, initializes it with environment variables, and queries the first 50 posts from the Posts table.",
    "codeLanguage": "astro",
    "codeTokens": 153,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/backend/xata.mdx#2025-04-08_snippet_3",
    "pageTitle": "Integrating Xata Serverless Database with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { XataClient } from '../../xata';\n \nconst xata = new XataClient({\n  apiKey: import.meta.env.XATA_API_KEY,\n  branch: import.meta.env.XATA_BRANCH\n});\n\nconst { records } = await xata.db.Posts.getPaginated({\n  pagination: {\n    size: 50\n  }\n})\n---\n\n<ul>\n  {records.map((post) => (\n    <li>{post.title}</li>\n  ))}\n</ul>"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Creating a Catch-all Route for Apostrophe Content in Astro",
    "codeDescription": "This code creates an Astro catch-all route component that fetches and displays content from ApostropheCMS. It handles redirects and 404 responses while providing a layout for Apostrophe content.",
    "codeLanguage": "javascript",
    "codeTokens": 275,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/apostrophecms.mdx#2025-04-08_snippet_8",
    "pageTitle": "Integrating ApostropheCMS with Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "---\nimport aposPageFetch from '@apostrophecms/apostrophe-astro/lib/aposPageFetch.js';\nimport AposLayout from '@apostrophecms/apostrophe-astro/components/layouts/AposLayout.astro';\nimport AposTemplate from '@apostrophecms/apostrophe-astro/components/AposTemplate.astro';\n\nconst aposData = await aposPageFetch(Astro.request);\nconst bodyClass = `myclass`;\n\nif (aposData.redirect) {\n  return Astro.redirect(aposData.url, aposData.status);\n}\nif (aposData.notFound) {\n  Astro.response.status = 404;\n}\n---\n<AposLayout title={aposData.page?.title} {aposData} {bodyClass}>\n    <Fragment slot=\"standardHead\">\n      <meta name=\"description\" content={aposData.page?.seoDescription} />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n      <meta charset=\"UTF-8\" />\n    </Fragment>\n    <AposTemplate {aposData} slot=\"main\"/>\n</AposLayout>"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Migrating Next.js Data Fetching to Astro",
    "codeDescription": "Shows how to convert a Next.js component that fetches and displays Pokémon data to an Astro component, replacing getStaticProps() with direct fetch() in the frontmatter.",
    "codeLanguage": "jsx",
    "codeTokens": 373,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/migrate-to-astro/from-nextjs.mdx#2025-04-08_snippet_11",
    "pageTitle": "Migrating from Next.js to Astro",
    "codeList": [
      {
        "language": "jsx",
        "code": "import Link from 'next/link'\nimport styles from '../styles/poke-list.module.css';\n\nexport default function Home({ pokemons }) {\n    return (\n        <>\n            <ul className={`plain-list ${styles.pokeList}`}>\n                {pokemons.map((pokemon) => (\n                    <li className={styles.pokemonListItem} key={pokemon.name}>\n                        <Link className={styles.pokemonContainer} as={`/pokemon/${pokemon.name}`} href=\"/pokemon/[name]\">\n                            <p className={styles.pokemonId}>No. {pokemon.id}</p>\n                            <img className={styles.pokemonImage} src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.id}.png`} alt={`Foto de ${pokemon.name}`}></img>\n                            <h2 className={styles.pokemonName}>{pokemon.name}</h2>\n                        </Link>\n                    </li>\n                ))}\n            </ul>\n        </>\n    )\n}\n\nexport const getStaticProps = async () => {\n    const res = await fetch(\"https://pokeapi.co/api/v2/pokemon?limit=151\")\n    const resJson = await res.json();\n    const pokemons = resJson.results.map(pokemon => {\n        const name = pokemon.name;\n        // https://pokeapi.co/api/v2/pokemon/1/\n        const url = pokemon.url;\n        const id = url.split(\"/\")[url.split(\"/\").length - 2];\n        return {\n            name,\n            url,\n            id\n        }\n    });\n    return {\n        props: {\n            pokemons,\n        },\n    }\n}"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Passing Children to Framework Components in Astro",
    "codeDescription": "This snippet shows how to pass children to framework components from an Astro component. It uses a React sidebar component as an example.",
    "codeLanguage": "astro",
    "codeTokens": 79,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/framework-components.mdx#2025-04-08_snippet_4",
    "pageTitle": "Using Front-end Frameworks in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport MyReactSidebar from '../components/MyReactSidebar.jsx';\n---\n<MyReactSidebar>\n  <p>Here is a sidebar with some text and a button.</p>\n</MyReactSidebar>"
      }
    ],
    "relevance": 0.947
  },
  {
    "codeTitle": "Running Astro with Different Environment Modes using npm",
    "codeDescription": "This shell command example shows how to run Astro development server or build with different environment modes using npm, which allows loading different .env files.",
    "codeLanguage": "shell",
    "codeTokens": 109,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/environment-variables.mdx#2025-04-08_snippet_3",
    "pageTitle": "Using Environment Variables in Astro",
    "codeList": [
      {
        "language": "shell",
        "code": "# Run the dev server connected to a \"staging\" API\nnpm run astro dev -- --mode staging\n\n# Build a site that connects to a \"production\" API with additional debug information\nnpm run astro build -- --devOutput\n\n# Build a site that connects to a \"testing\" API\nnpm run astro build -- --mode testing"
      }
    ],
    "relevance": 0.946
  },
  {
    "codeTitle": "Running Astro with Different Environment Modes using npm",
    "codeDescription": "This shell command example shows how to run Astro development server or build with different environment modes using npm, which allows loading different .env files.",
    "codeLanguage": "shell",
    "codeTokens": 109,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/environment-variables.mdx#2025-04-08_snippet_3",
    "pageTitle": "Using Environment Variables in Astro",
    "codeList": [
      {
        "language": "shell",
        "code": "# Run the dev server connected to a \"staging\" API\nnpm run astro dev -- --mode staging\n\n# Build a site that connects to a \"production\" API with additional debug information\nnpm run astro build -- --devOutput\n\n# Build a site that connects to a \"testing\" API\nnpm run astro build -- --mode testing"
      }
    ],
    "relevance": 0.946
  },
  {
    "codeTitle": "Chaining Multiple Middleware Functions",
    "codeDescription": "Shows how to chain multiple middleware functions in a specific order using the sequence() function from Astro.",
    "codeLanguage": "javascript",
    "codeTokens": 152,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/middleware.mdx#2025-04-08_snippet_8",
    "pageTitle": "Implementing Middleware in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { sequence } from \"astro:middleware\";\n\nasync function validation(_, next) {\n    console.log(\"validation request\");\n    const response = await next();\n    console.log(\"validation response\");\n    return response;\n}\n\nasync function auth(_, next) {\n    console.log(\"auth request\");\n    const response = await next();\n    console.log(\"auth response\");\n    return response;\n}\n\nasync function greeting(_, next) {\n    console.log(\"greeting request\");\n    const response = await next();\n    console.log(\"greeting response\");\n    return response;\n}\n\nexport const onRequest = sequence(validation, auth, greeting);"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Setting Action Results in Middleware using Astro Actions",
    "codeDescription": "Example demonstrating how to use setActionResult() in Astro middleware to persist action results. The code intercepts form-based actions, processes them, and stores the result for retrieval via Astro.getActionResult().",
    "codeLanguage": "typescript",
    "codeTokens": 147,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-actions.mdx#2025-04-08_snippet_5",
    "pageTitle": "Astro Actions API Reference",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineMiddleware } from 'astro:middleware';\nimport { getActionContext } from 'astro:actions';\nexport const onRequest = defineMiddleware(async (context, next) => {\n  const { action, setActionResult, serializeActionResult } = getActionContext(context);\n  if (action?.calledFrom === 'form') {\n    const result = await action.handler();\n    // ... handle the action result\n    setActionResult(action.name, serializeActionResult(result));\n  }\n  return next();\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using Picture Component in Astro",
    "codeDescription": "Shows how to use the Picture component for responsive images with multiple formats.",
    "codeLanguage": "astro",
    "codeTokens": 91,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-assets.mdx#2025-04-08_snippet_3",
    "pageTitle": "Astro Assets API Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { Picture } from 'astro:assets';\nimport myImage from \"../assets/my_image.png\"; // Image is 1600x900\n---\n\n<!-- `alt` is mandatory on the Picture component -->\n<Picture src={myImage} formats={['avif', 'webp']} alt=\"A description of my image.\" />"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Creating Astro Project from Template with yarn",
    "codeDescription": "Commands to create a new Astro project based on either an official template or a GitHub repository using yarn. Templates provide pre-configured starting points for your project.",
    "codeLanguage": "shell",
    "codeTokens": 96,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/install-and-setup.mdx#2025-04-08_snippet_11",
    "pageTitle": "Installing Astro: A Step-by-Step Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "# create a new project with an official example\nyarn create astro --template <example-name>\n  \n# create a new project based on a GitHub repository's main branch\nyarn create astro --template <github-username>/<github-repo>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Understanding the New Image Metadata Interface in TypeScript",
    "codeDescription": "Definition of the ImageMetadata interface in Astro v3.0 that replaces the previous string path with an object containing image information including source path, dimensions, and format.",
    "codeLanguage": "typescript",
    "codeTokens": 70,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/upgrade-to/v3.mdx#2025-04-08_snippet_24",
    "pageTitle": "Upgrading to Astro v3",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ImageMetadata {\n  src: string;\n  width: number;\n  height: number;\n  format: string;\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Generating Dynamic HTML in Astro Components",
    "codeDescription": "Illustrates how to use local variables in JSX-like functions to produce dynamically generated HTML elements.",
    "codeLanguage": "astro",
    "codeTokens": 74,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/pt-br/reference/astro-syntax.mdx#2025-04-08_snippet_2",
    "pageTitle": "Astro Component Syntax Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst itens = [\"Cachorro\", \"Gato\", \"Ornitorrinco\"];\n---\n<ul>\n  {itens.map((item) => (\n    <li>{item}</li>\n  ))}\n</ul>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Component Usage",
    "codeDescription": "Usage of the DontEditWarning component in the documentation.",
    "codeLanguage": "markdown",
    "codeTokens": 27,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/error-reference.mdx#2025-04-08_snippet_2",
    "pageTitle": "Astro Error Reference Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "<DontEditWarning />"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Processing Blog Post Data in SSR Mode",
    "codeDescription": "This snippet shows how to create a post object with the necessary data from Contentful in SSR mode. It processes the rich text content and formats the date for display.",
    "codeLanguage": "astro",
    "codeTokens": 202,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/contentful.mdx#2025-04-08_snippet_12",
    "pageTitle": "Integrating Contentful CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Layout from \"../../layouts/Layout.astro\";\nimport { contentfulClient } from \"../../lib/contentful\";\nimport { documentToHtmlString } from \"@contentful/rich-text-html-renderer\";\nimport type { BlogPost } from \"../../lib/contentful\";\n\nlet post;\nconst { slug } = Astro.params;\ntry {\n  const data = await contentfulClient.getEntries<BlogPost>({\n    content_type: \"blogPost\",\n    \"fields.slug\": slug,\n  });\n  const { title, date, content } = data.items[0].fields;\n  post = {\n    title,\n    date: new Date(date).toLocaleDateString(),\n    content: documentToHtmlString(content),\n  };\n} catch (error) {\n  return Astro.redirect(\"/404\");\n}\n---"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Configuring Security Settings in Astro",
    "codeDescription": "Example showing how to configure security settings in Astro, specifically disabling origin checking for server-side rendering.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/configuration-reference.mdx#2025-04-08_snippet_18",
    "pageTitle": "Astro Configuration Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "// astro.config.mjs\nexport default defineConfig({\n  output: \"server\",\n  security: {\n    checkOrigin: false\n  }\n})"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Creating User Registration Page in Astro",
    "codeDescription": "This Astro component creates a registration page with a form that sends a POST request to the /api/auth/register endpoint. It includes fields for name, email, and password.",
    "codeLanguage": "astro",
    "codeTokens": 221,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/backend/google-firebase.mdx#2025-04-08_snippet_3",
    "pageTitle": "Server Authentication Endpoints and Pages for Firebase in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Layout from \"../layouts/Layout.astro\";\n---\n\n<Layout title=\"Registro\">\n  <h1>Registro</h1>\n  <p>¿Ya tienes una cuenta? <a href=\"/signin\">Iniciar sesión</a></p>\n  <form action=\"/api/auth/register\" method=\"post\">\n    <label for=\"name\">Nombre</label>\n    <input type=\"text\" name=\"name\" id=\"name\" />\n    <label for=\"email\" for=\"email\">Correo electrónico</label>\n    <input type=\"email\" name=\"email\" id=\"email\" />\n    <label for=\"password\">Contraseña</label>\n    <input type=\"password\" name=\"password\" id=\"password\" />\n    <button type=\"submit\">Iniciar sesión</button>\n  </form>\n</Layout>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Accessing URL Parameters in Dynamic Routes",
    "codeDescription": "Shows how to access URL parameters in dynamic routes using Astro.params or context.params. The example demonstrates static path generation for routes with an ID parameter.",
    "codeLanguage": "astro",
    "codeTokens": 106,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_2",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport function getStaticPaths() {\n  return [\n    { params: { id: '1' } },\n    { params: { id: '2' } },\n    { params: { id: '3' } }\n  ];\n}\nconst { id } = Astro.params;\n---\n<h1>{id}</h1>"
      },
      {
        "language": "typescript",
        "code": "import type { APIContext } from 'astro';\n\nexport function getStaticPaths() {\n  return [\n    { params: { id: '1' } },\n    { params: { id: '2' } },\n    { params: { id: '3' } }\n  ];\n}\n\nexport function GET({ params }: APIContext) {\n  return new Response(\n    JSON.stringify({ id: params.id }),\n  );\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Recursive Component Rendering in Astro",
    "codeDescription": "Shows how to use Astro.self for recursive rendering of Astro components. This is useful for iterating over large data stores or nested data structures.",
    "codeLanguage": "astro",
    "codeTokens": 154,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/zh-cn/reference/astro-syntax.mdx#2025-04-08_snippet_8",
    "pageTitle": "Template Expression Reference in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// NestedList.astro\nconst { items } = Astro.props;\n---\n<ul class=\"nested-list\">\n  {items.map((item) => (\n    <li>\n      <!-- 如果存在嵌套数据结构，我们将渲染 `<Astro.self>` -->\n      <!-- 并且可以通过递归调用传递 props -->\n      {Array.isArray(item) ? (\n        <Astro.self items={item} />\n      ) : (\n        item\n      )}\n    </li>\n  ))}\n</ul>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Creating Registration Page with Form in Astro",
    "codeDescription": "An Astro component that renders a registration form for new users. The form sends a POST request to the /api/auth/register endpoint with email and password fields.",
    "codeLanguage": "astro",
    "codeTokens": 178,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/backend/supabase.mdx#2025-04-08_snippet_6",
    "pageTitle": "Integrating Supabase with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Layout from \"../layouts/Layout.astro\";\n---\n\n<Layout title=\"Register\">\n  <h1>Register</h1>\n  <p>Already have an account? <a href=\"/signin\">Sign in</a></p>\n  <form action=\"/api/auth/register\" method=\"post\">\n    <label for=\"email\">Email</label>\n    <input type=\"email\" name=\"email\" id=\"email\" />\n    <label for=\"password\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"password\" />\n    <button type=\"submit\">Register</button>\n  </form>\n</Layout>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Adding Tailwind CSS to Astro Project",
    "codeDescription": "This snippet shows how to add Tailwind CSS support to an Astro project using the CLI command. It also demonstrates how to import and use Tailwind classes.",
    "codeLanguage": "astro",
    "codeTokens": 48,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/styling.mdx#2025-04-08_snippet_14",
    "pageTitle": "Styling Components in Astro",
    "codeList": [
      {
        "language": "shell",
        "code": "npx astro add tailwind"
      },
      {
        "language": "css",
        "code": "@import \"tailwindcss\";"
      },
      {
        "language": "astro",
        "code": "---\nimport \"../styles/global.css\";\n---"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing CartFlyoutToggle in Vue with Nanostores",
    "codeDescription": "A Vue component using Nanostores to manage cart state. It uses the useStore composable from the Vue-specific Nanostores adapter to create a reactive reference to the store value.",
    "codeLanguage": "vue",
    "codeTokens": 156,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/sharing-state-islands.mdx#2025-04-08_snippet_8",
    "pageTitle": "Sharing State Between Astro Islands with Nano Stores",
    "codeList": [
      {
        "language": "vue",
        "code": "<!--src/components/CartFlyoutToggle.vue-->\n<template>\n  <!--write to the imported store using `.set`-->\n  <button @click=\"isCartOpen.set(!$isCartOpen)\">Cart</button>\n</template>\n\n<script setup>\n  import { isCartOpen } from '../cartStore';\n  import { useStore } from '@nanostores/vue';\n\n  // read the store value with the `useStore` hook\n  const $isCartOpen = useStore(isCartOpen);\n</script>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Rendering Astro Component with Props",
    "codeDescription": "Demonstrates how to render an Astro component with props using the renderToString method of the Astro Container API.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/container-reference.mdx#2025-04-08_snippet_9",
    "pageTitle": "Astro Container API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import Card from \"../src/components/Card.astro\";\n\nconst result = await container.renderToString(Card, { \n  props: { name: \"Hello, world!\" }\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Validating Data with parseData in Astro Content Loader - TypeScript",
    "codeDescription": "Demonstrates how to use the parseData function to validate and process data before storing it in a content collection. The example shows loading feed items and validating each one.",
    "codeLanguage": "typescript",
    "codeTokens": 190,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/reference/content-loader-reference.mdx#2025-04-08_snippet_1",
    "pageTitle": "Content Loaders API Reference for Astro - French Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import type { Loader } from \"astro/loaders\";\nimport { loadFeed } from \"./feed.js\";\n\nexport function feedLoader({ url }): Loader {\n  const feedUrl = new URL(url);\n  return {\n    name: \"feed-loader\",\n    load: async ({ store, logger, parseData, meta, generateDigest }) => {\n      logger.info(\"Chargement des articles\");\n      const feed = loadFeed(feedUrl);\n      store.clear();\n\n      for (const item of feed.items) {\n        const data = await parseData({\n          id: item.guid,\n          data: item,\n        });\n        store.set({\n          id,\n          data,\n        });\n      }\n    },\n  };\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing User Sign-out Endpoint in Astro",
    "codeDescription": "Creates a server endpoint for user sign-out in an Astro project. Handles GET requests and removes session cookies.",
    "codeLanguage": "typescript",
    "codeTokens": 111,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/backend/supabase.mdx#2025-04-08_snippet_5",
    "pageTitle": "Integrating Supabase with Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "// With `output: 'static'` configured:\n// export const prerender = false;\nimport type { APIRoute } from \"astro\";\n\nexport const GET: APIRoute = async ({ cookies, redirect }) => {\n  cookies.delete(\"sb-access-token\", { path: \"/\" });\n  cookies.delete(\"sb-refresh-token\", { path: \"/\" });\n  return redirect(\"/signin\");\n};"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using Explicit Type Imports in Astro",
    "codeDescription": "Example showing how to correctly import types in Astro using the 'import type' syntax to avoid bundling issues.",
    "codeLanguage": "typescript",
    "codeTokens": 51,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/typescript.mdx#2025-04-08_snippet_4",
    "pageTitle": "TypeScript Support in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { SomeType } from \"./script\";\nimport type { SomeType } from \"./script\";"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using Variables in Markdoc Files",
    "codeDescription": "Example of using passed variables within a Markdoc file to conditionally render content.",
    "codeLanguage": "markdown",
    "codeTokens": 58,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/markdoc.mdx#2025-04-08_snippet_10",
    "pageTitle": "Markdoc Integration Guide for Astro",
    "codeList": [
      {
        "language": "markdown",
        "code": "{% if $abTestGroup === 'image-optimization-lover' %}\n\nLet me tell you about image optimization...\n\n{% /if %}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Defining Public and Secret Environment Variables in Astro",
    "codeDescription": "This example shows the difference between secret environment variables (only available server-side) and public variables in Astro projects using .env file format.",
    "codeLanguage": "ini",
    "codeTokens": 48,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/environment-variables.mdx#2025-04-08_snippet_11",
    "pageTitle": "Using Environment Variables in Astro",
    "codeList": [
      {
        "language": "ini",
        "code": "SECRET_PASSWORD=password123\nPUBLIC_ANYBODY=there"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Creating Action with Data Return for Redirect",
    "codeDescription": "This action creates a product record and returns the generated product ID, which can be used to redirect to the new product's page after successful creation.",
    "codeLanguage": "ts",
    "codeTokens": 123,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#2025-04-08_snippet_17",
    "pageTitle": "Astro Actions: Type-safe Server Functions",
    "codeList": [
      {
        "language": "ts",
        "code": "import { defineAction } from 'astro:actions';\nimport { z } from 'astro:schema';\n\nexport const server = {\n  createProduct: defineAction({\n    accept: 'form',\n    input: z.object({ /* ... */ }),\n    handler: async (input) => {\n      const product = await persistToDatabase(input);\n      return { id: product.id };\n    },\n  })\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Defining Database Tables in Astro DB Integration",
    "codeDescription": "This code defines a 'Pets' table within an Astro DB integration, showcasing how to set up table schemas with columns for integration-specific database operations.",
    "codeLanguage": "typescript",
    "codeTokens": 101,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/astro-db.mdx#2025-04-08_snippet_25",
    "pageTitle": "Astro DB Configuration and Setup Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "// my-integration/config.ts\nimport { defineDb, defineTable, column } from 'astro:db';\n\nexport const Pets = defineTable({\n  columns: {\n    name: column.text(),\n    species: column.text(),\n  },\n});\n\nexport default defineDb({ tables: { Pets } });"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using Astro's Debug Component for Inspecting Values",
    "codeDescription": "Shows how to use Astro's built-in Debug component to display values directly in the HTML template. This component helps with client-side debugging without requiring JavaScript or console switching.",
    "codeLanguage": "astro",
    "codeTokens": 95,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/troubleshooting.mdx#2025-04-08_snippet_1",
    "pageTitle": "Astro Troubleshooting Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { Debug } from 'astro:components';\nconst sum = (a, b) => a + b;\n---\n\n<!-- Example: Outputs {answer: 6} to the browser -->\n<Debug answer={sum(2, 4)} />"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Defining TypeScript Interfaces for Astro Layout Component Props",
    "codeDescription": "This snippet demonstrates how to add TypeScript type safety to an Astro layout component by defining a Props interface. The interface specifies required properties including title, description, publishDate, and viewCount, which are then destructured from Astro.props.",
    "codeLanguage": "astro",
    "codeTokens": 196,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/basics/layouts.mdx#2025-04-08_snippet_0",
    "pageTitle": "TypeScript with Astro Layouts",
    "codeList": [
      {
        "language": "astro",
        "code": "---\ninterface Props { \n\ttitle: string;\n  description: string;\n  publishDate: string;\n  viewCount: number;\n}\nconst { title, description, publishDate, viewCount } = Astro.props;\n---\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"description\" content={description}>\n    <title>{title}</title>\n  </head>\n    <header>\n      <p>Published on {publishDate}</p>\n      <p>Viewed by {viewCount} folks</p>\n    </header>\n    <main>\n      <slot />\n    </main>\n  </body>\n</html>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Adding Middleware in Astro Integration",
    "codeDescription": "Demonstrates how to add middleware to run on each request using integration hooks.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/zh-cn/reference/integrations-reference.mdx#2025-04-08_snippet_1",
    "pageTitle": "Astro Integration Hooks and Configuration Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "/**\n * @type {() => import('astro').AstroIntegration}\n */\nexport default () => ({\n  name: \"my-middleware-package\",\n  hooks: {\n    \"astro:config:setup\": ({ addMiddleware }) => {\n      addMiddleware({\n        entrypoint: '@my-package/middleware',\n        order: 'pre'\n      });\n    },\n  },\n});"
      },
      {
        "language": "javascript",
        "code": "import { defineMiddleware } from 'astro:middleware';\n\nexport const onRequest = defineMiddleware(async (context, next) => {\n  if(context.url.pathname === '/some-test-path') {\n    return Response.json({\n      ok: true\n    });\n  }\n\n  return next();\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing Fallback Content for Slots",
    "codeDescription": "Shows how to provide fallback content for slots that will be displayed when no matching children are passed to the slot, creating more robust component interfaces.",
    "codeLanguage": "astro",
    "codeTokens": 138,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#2025-04-08_snippet_14",
    "pageTitle": "Astro Components Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/components/Wrapper.astro\nimport Header from './Header.astro';\nimport Logo from './Logo.astro';\nimport Footer from './Footer.astro';\n\nconst { title } = Astro.props;\n---\n<div id=\"content-wrapper\">\n  <Header />\n  <Logo />\n  <h1>{title}</h1>\n  <slot>\n    <p>This is my fallback content, if there is no child passed into slot</p>\n  </slot>\n  <Footer />\n</div>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Accessing Locals in API Context",
    "codeDescription": "Demonstrates how to access values from the locals object in an Astro API endpoint.",
    "codeLanguage": "typescript",
    "codeTokens": 65,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/pt-br/reference/api-reference.mdx#2025-04-08_snippet_10",
    "pageTitle": "Astro Request and Response Object Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import type { APIContext } from 'astro';\n\nexport function GET({ locals }: APIContext) {\n  return new Response(locals.title); // \"Título Padrão\"\n}"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Testing Astro Components with Vitest and Container API",
    "codeDescription": "Shows how to use Astro's experimental Container API with Vitest to test Astro components. This example tests a Card component by rendering it and checking the output string.",
    "codeLanguage": "javascript",
    "codeTokens": 141,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/testing.mdx#2025-04-08_snippet_2",
    "pageTitle": "Testing in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { experimental_AstroContainer as AstroContainer } from 'astro/container';\nimport { expect, test } from 'vitest';\nimport Card from '../src/components/Card.astro';\n\ntest('Card with slots', async () => {\n\tconst container = await AstroContainer.create();\n\tconst result = await container.renderToString(Card, {\n\t\tslots: {\n\t\t\tdefault: 'Card content',\n\t\t},\n\t});\n\n\texpect(result).toContain('This is a card');\n\texpect(result).toContain('Card content');\n});"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Configuring Redirects in Astro",
    "codeDescription": "Shows how to set up redirects in Astro configuration. This allows you to specify mappings for redirecting routes, supporting both static and dynamic routes.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/reference/configuration-reference.mdx#2025-04-08_snippet_4",
    "pageTitle": "Astro Configuration Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "{\n  redirects: {\n    '/old': '/new',\n    '/blog/[...slug]': '/articles/[...slug]',\n  }\n}"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Fetching Umbraco Content in Astro Page Component",
    "codeDescription": "Astro component that fetches articles from the Umbraco Content Delivery API and displays them in a list. It retrieves article properties like name, date, and HTML content.",
    "codeLanguage": "astro",
    "codeTokens": 143,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/umbraco.mdx#2025-04-08_snippet_1",
    "pageTitle": "Umbraco & Astro Integration Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst res = await fetch('http://localhost/umbraco/delivery/api/v2/content?filter=contentType:article');\nconst articles = await res.json();\n---\n<h1>Astro + Umbraco 🚀</h1>\n{\n  articles.items.map((article) => (\n      <h1>{article.name}</h1>\n      <p>{article.properties.articleDate}</p>\n      <div set:html={article.properties.content?.markup}></div>\n  ))\n}"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Configuring Component Package.json for NPM Publication",
    "codeDescription": "Example package.json configuration for an Astro component package. It includes essential metadata, export paths, and file listings necessary for proper publication to NPM.",
    "codeLanguage": "json",
    "codeTokens": 170,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/publish-to-npm.mdx#2025-04-08_snippet_3",
    "pageTitle": "Publishing Astro Components to NPM",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"name\": \"my-component\",\n  \"description\": \"Component description\",\n  \"version\": \"1.0.0\",\n  \"homepage\": \"https://github.com/owner/project#readme\",\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./astro\": \"./MyAstroComponent.astro\",\n    \"./react\": \"./MyReactComponent.jsx\"\n  },\n  \"files\": [\"index.js\", \"MyAstroComponent.astro\", \"MyReactComponent.jsx\"],\n  \"keywords\": [\"astro\", \"withastro\", \"astro-component\", \"...\", \"...\"]\n}"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Installing Kontent.ai SDK Dependencies",
    "codeDescription": "Shell commands for installing the Kontent.ai TypeScript SDK using different package managers",
    "codeLanguage": "shell",
    "codeTokens": 37,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/kontent-ai.mdx#2025-04-08_snippet_2",
    "pageTitle": "Kontent.ai Integration with Astro Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "npm install @kontent-ai/delivery-sdk"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Implementing Dynamic Blog Post Route with Kontent.ai in Astro",
    "codeDescription": "Creates a dynamic route handler for blog posts that fetches content from Kontent.ai based on the URL slug. Includes error handling and redirect to 404 page if content is not found.",
    "codeLanguage": "astro",
    "codeTokens": 180,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/guides/cms/kontent-ai.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro with Kontent.ai Integration Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\n\nconst { slug } = Astro.params\nlet blogPost: BlogPost;\ntry {\n    const data = await deliveryClient\n        .items<BlogPost>()\n        .equalsFilter(contentTypes.blog_post.elements.url_slug.codename, slug ?? '')\n        .type(contentTypes.blog_post.codename)\n        .limitParameter(1)\n        .toPromise()\n    blogPost = data.data.items[0]\n} catch (error) {\n    return Astro.redirect('/404')\n}\n---"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Importing Custom Shiki Theme",
    "codeDescription": "Configuration for using a custom Shiki theme from a local file in Astro. This allows for fully customized syntax highlighting themes beyond the built-in options.",
    "codeLanguage": "js",
    "codeTokens": 88,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/syntax-highlighting.mdx#2025-04-08_snippet_4",
    "pageTitle": "Syntax Highlighting in Astro",
    "codeList": [
      {
        "language": "js",
        "code": "import { defineConfig } from 'astro/config';\nimport customTheme from './my-shiki-theme.json';\n\nexport default defineConfig({\n  markdown: {\n    shikiConfig: { \n      theme: customTheme,\n    },\n  },\n});"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Importing Astro Assets Components",
    "codeDescription": "Shows how to import the core image components and utilities from the astro:assets module.",
    "codeLanguage": "js",
    "codeTokens": 51,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-assets.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Assets API Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "import { \n  Image,\n  Picture,\n  getImage,\n  inferRemoteSize,\n } from 'astro:assets';"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Basic Astro Configuration Setup",
    "codeDescription": "The basic structure for an Astro configuration file using the defineConfig helper function. This is the foundation for adding configuration options in Astro.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/configuration-reference.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Configuration Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "// astro.config.mjs\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n  // your configuration options here...\n})"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Deploying Astro to Fly.io using flyctl",
    "codeDescription": "Command to launch an Astro project on Fly.io. This command automatically detects Astro, configures the appropriate settings, builds the image, and deploys it to the Fly.io platform.",
    "codeLanguage": "bash",
    "codeTokens": 51,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/deploy/flyio.mdx#2025-04-08_snippet_0",
    "pageTitle": "Deploying Astro Sites to Fly.io",
    "codeList": [
      {
        "language": "bash",
        "code": "fly launch"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Implementing Viewport-Based Link Prefetching",
    "codeDescription": "Demonstrates how to set up viewport-based prefetching on individual links using the data-astro-prefetch attribute.",
    "codeLanguage": "html",
    "codeTokens": 51,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/prefetch.mdx#2025-04-08_snippet_10",
    "pageTitle": "Configuring Prefetching in Astro",
    "codeList": [
      {
        "language": "html",
        "code": "<a href=\"/about\" data-astro-prefetch=\"viewport\">"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Fully Featured Markdown Post Layout in Astro",
    "codeDescription": "Comprehensive layout component that includes title, publication date, description, author information, and featured image rendering.",
    "codeLanguage": "astro",
    "codeTokens": 127,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/4-layouts/2.mdx#2025-04-08_snippet_3",
    "pageTitle": "Creating and Using Markdown Post Layouts in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst { frontmatter } = Astro.props;\n---\n<meta charset=\"utf-8\" />\n<h1>{frontmatter.title}</h1>\n<p>{frontmatter.pubDate.toString().slice(0,10)}</p>\n<p><em>{frontmatter.description}</em></p>\n<p>Written by: {frontmatter.author}</p>\n<img src={frontmatter.image.url} width=\"300\" alt={frontmatter.image.alt} />\n<slot />"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Setting up Auth.js environment variables",
    "codeDescription": "Adding required environment variables for Auth.js configuration.",
    "codeLanguage": "shell",
    "codeTokens": 31,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/authentication.mdx#2025-04-08_snippet_4",
    "pageTitle": "Authentication in Astro",
    "codeList": [
      {
        "language": "shell",
        "code": "AUTH_TRUST_HOST=true\nAUTH_SECRET=<my-auth-secret>"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Accessing Request URL in Static Endpoints",
    "codeDescription": "This example shows how to access the request URL in static endpoints using the request.url property. It returns the pathname of the current endpoint.",
    "codeLanguage": "TypeScript",
    "codeTokens": 87,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/guides/endpoints.mdx#2025-04-08_snippet_3",
    "pageTitle": "Creating Custom Endpoints in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import type { APIRoute } from \"astro\";\n\nexport const GET: APIRoute = ({ params, request }) => {\n  return new Response(\n    JSON.stringify({\n      path: new URL(request.url).pathname,\n    }),\n  );\n};"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Basic Astro Configuration Setup",
    "codeDescription": "The basic structure for an Astro configuration file using the defineConfig helper function. This is the foundation for adding configuration options in Astro.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/configuration-reference.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Configuration Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "// astro.config.mjs\nimport { defineConfig } from 'astro/config'\n\nexport default defineConfig({\n  // your configuration options here...\n})"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Importing Database Dump to Turso",
    "codeDescription": "Command to import the exported database dump into the new Turso database",
    "codeLanguage": "sh",
    "codeTokens": 40,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/astro-db.mdx#2025-04-08_snippet_31",
    "pageTitle": "Astro DB Configuration and Setup Guide",
    "codeList": [
      {
        "language": "sh",
        "code": "turso db shell [database-name] < ./path/to/dump.sql"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Using a Custom Element Component with Different Props in Astro",
    "codeDescription": "This example shows how to use the AstroGreet custom element component with different message props. It demonstrates using the default message and passing custom messages to create multiple instances of the component with different behaviors.",
    "codeLanguage": "astro",
    "codeTokens": 125,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/client-side-scripts.mdx#2025-04-08_snippet_5",
    "pageTitle": "Script and Event Handling in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport AstroGreet from '../components/AstroGreet.astro';\n---\n\n<!-- Use the default message: \"Welcome, world!\" -->\n<AstroGreet />\n\n<!-- Use custom messages passed as a props. -->\n<AstroGreet message=\"Lovely day to build components!\" />\n<AstroGreet message=\"Glad you made it! 👋\" />"
      }
    ],
    "relevance": 0.941
  },
  {
    "codeTitle": "Using a Custom Element Component with Different Props in Astro",
    "codeDescription": "This example shows how to use the AstroGreet custom element component with different message props. It demonstrates using the default message and passing custom messages to create multiple instances of the component with different behaviors.",
    "codeLanguage": "astro",
    "codeTokens": 125,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/client-side-scripts.mdx#2025-04-08_snippet_5",
    "pageTitle": "Script and Event Handling in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport AstroGreet from '../components/AstroGreet.astro';\n---\n\n<!-- Use the default message: \"Welcome, world!\" -->\n<AstroGreet />\n\n<!-- Use custom messages passed as a props. -->\n<AstroGreet message=\"Lovely day to build components!\" />\n<AstroGreet message=\"Glad you made it! 👋\" />"
      }
    ],
    "relevance": 0.941
  },
  {
    "codeTitle": "Basic Image Component Usage with Styling",
    "codeDescription": "Demonstrates importing and using the Image component with a CSS class applied to the resulting img element. Shows both the component usage and the resulting HTML output.",
    "codeLanguage": "astro",
    "codeTokens": 87,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/images.mdx#2025-04-08_snippet_1",
    "pageTitle": "Using Images in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { Image } from 'astro:assets';\nimport myImage from '../assets/my_image.png';\n---\n\n<!-- `alt` is mandatory on the Image component -->\n<Image src={myImage} alt=\"\" class=\"my-class\" />"
      },
      {
        "language": "html",
        "code": "<!-- Prerendered output -->\n<img\n  src=\"/_astro/my_image.hash.webp\"\n  width=\"1600\"\n  height=\"900\"\n  decoding=\"async\"\n  loading=\"lazy\"\n  class=\"my-class\"\n  alt=\"\"\n/>\n"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Fetching Blog Posts from Contentful in Astro",
    "codeDescription": "This snippet imports the Contentful client and BlogPost type, then fetches all entries with the 'blogPost' content type. It demonstrates how to properly type the response using TypeScript generics.",
    "codeLanguage": "astro",
    "codeTokens": 99,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/contentful.mdx#2025-04-08_snippet_5",
    "pageTitle": "Integrating Contentful CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { contentfulClient } from \"../lib/contentful\";\nimport type { BlogPost } from \"../lib/contentful\";\n\nconst entries = await contentfulClient.getEntries<BlogPost>({\n  content_type: \"blogPost\",\n});\n---"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "TypeScript Interface for Markdown Files in Astro",
    "codeDescription": "TypeScript interface definition for Markdown files loaded with import.meta.glob(). It specifies the structure and available properties for Markdown instances, including frontmatter, file paths, and content rendering methods.",
    "codeLanguage": "typescript",
    "codeTokens": 222,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/imports.mdx#2025-04-08_snippet_12",
    "pageTitle": "Imports Reference in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "export interface MarkdownInstance<T extends Record<string, any>> {\n  /* Any data specified in this file's YAML/TOML frontmatter */\n\tfrontmatter: T;\n  /* The absolute file path of this file */\n\tfile: string;\n  /* The rendered path of this file */\n\turl: string | undefined;\n  /* Astro Component that renders the contents of this file */\n\tContent: AstroComponentFactory;\n  /** (Markdown only) Raw Markdown file content, excluding layout HTML and YAML/TOML frontmatter */\n\trawContent(): string;\n  /** (Markdown only) Markdown file compiled to HTML, excluding layout HTML */\n\tcompiledContent(): string;\n  /* Function that returns an array of the h1...h6 elements in this file */\n\tgetHeadings(): Promise<{ depth: number; slug: string; text: string }[]>;\n\tdefault: AstroComponentFactory;\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Configuring Build Format in Astro",
    "codeDescription": "Example showing how to configure the build output format to generate file-based HTML instead of directory-based structure.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/configuration-reference.mdx#2025-04-08_snippet_22",
    "pageTitle": "Astro Configuration Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "{\n  build: {\n    // Example: Generate `page.html` instead of `page/index.html` during build.\n    format: 'file'\n  }\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Configuring inlineStylesheets in Astro v3.0",
    "codeDescription": "Sets the inlineStylesheets option to 'never' to maintain previous default behavior for stylesheets in Astro projects.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/upgrade-to/v3.mdx#2025-04-08_snippet_14",
    "pageTitle": "Upgrading to Astro v3",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from \"astro/config\";\n\nexport default defineConfig({\n\t build: {\n    inlineStylesheets: \"never\"\n  }\n})"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Fetching Blog Posts from Contentful in Astro",
    "codeDescription": "This snippet imports the Contentful client and BlogPost type, then fetches all entries with the 'blogPost' content type. It demonstrates how to properly type the response using TypeScript generics.",
    "codeLanguage": "astro",
    "codeTokens": 99,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/contentful.mdx#2025-04-08_snippet_5",
    "pageTitle": "Integrating Contentful CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { contentfulClient } from \"../lib/contentful\";\nimport type { BlogPost } from \"../lib/contentful\";\n\nconst entries = await contentfulClient.getEntries<BlogPost>({\n  content_type: \"blogPost\",\n});\n---"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Displaying Individual Friend Details in Astro",
    "codeDescription": "This Astro component fetches and displays details of a single friend from Firestore based on the provided ID parameter.",
    "codeLanguage": "astro",
    "codeTokens": 216,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/backend/google-firebase.mdx#2025-04-08_snippet_14",
    "pageTitle": "Integrating Firebase with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Layout from \"../../layouts/Layout.astro\";\nimport { app } from \"../../firebase/server\";\nimport { getFirestore } from \"firebase-admin/firestore\";\n\ninterface Friend {\n  name: string;\n  age: number;\n  isBestFriend: boolean;\n}\n\nconst { id } = Astro.params;\n\nif (!id) {\n  return Astro.redirect(\"/404\");\n}\n\nconst db = getFirestore(app);\nconst friendsRef = db.collection(\"friends\");\nconst friendSnapshot = await friendsRef.doc(id).get();\n\nif (!friendSnapshot.exists) {\n  return Astro.redirect(\"/404\");\n}\n\nconst friend = friendSnapshot.data() as Friend;\n---\n\n<Layout title={friend.name}>\n  <h1>{friend.name}</h1>\n  <p>Age: {friend.age}</p>\n  <p>Is best friend: {friend.isBestFriend ? \"Yes\" : \"No\"}</p>\n</Layout>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Checking Slot Content Existence in Astro Components",
    "codeDescription": "Shows how to use Astro.slots.has() to check if content exists for a specific slot name. This is useful for conditionally rendering wrapper elements around slot content.",
    "codeLanguage": "astro",
    "codeTokens": 88,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/zh-cn/reference/astro-syntax.mdx#2025-04-08_snippet_6",
    "pageTitle": "Template Expression Reference in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n---\n<slot />\n\n{Astro.slots.has('more') && (\n  <aside>\n    <h2>More</h2>\n    <slot name=\"more\" />\n  </aside>\n)}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Creating a Fetch Function for Drupal JSON:API",
    "codeDescription": "Implements a fetchUrl function that makes API requests to Drupal and deserializes JSON:API responses using the Jsona library. This utility function handles the HTTP request and transforms the response into usable data objects.",
    "codeLanguage": "typescript",
    "codeTokens": 148,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/ko/guides/cms/drupal.mdx#2025-04-08_snippet_2",
    "pageTitle": "Building a Drupal Article List in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "/**\n * Fetch url from Drupal.\n *\n * @param url\n *\n * @return Promise<TJsonaModel | TJsonaModel[]> as Promise<any>\n */\nexport const fetchUrl = async (url: string): Promise<any> => {\n    const request: Response = await fetch(url);\n    const json: string | TJsonApiBody = await request.json();\n    const dataFormatter: Jsona = new Jsona();\n    return dataFormatter.deserialize(json);\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Creating an Astro Action for Database Insertion",
    "codeDescription": "TypeScript module defining an Astro action that inserts data into a Comment table with validation using Zod schema.",
    "codeLanguage": "typescript",
    "codeTokens": 183,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/astro-db.mdx#2025-04-08_snippet_15",
    "pageTitle": "Astro DB Configuration and Setup Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "// src/actions/index.ts\nimport { db, Comment } from 'astro:db';\nimport { defineAction } from 'astro:actions';\nimport { z } from 'astro:schema';\n\nexport const server = {\n  addComment: defineAction({\n    // Actions include type safety with Zod, removing the need\n    // to check if typeof {value} === 'string' in your pages\n    input: z.object({\n      author: z.string(),\n      body: z.string(),\n    }),\n    handler: async (input) => {\n      const updatedComments = await db\n        .insert(Comment)\n        .values(input)\n        .returning(); // Return the updated comments\n      return updatedComments;\n    },\n  }),\n};"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Enabling Edge Middleware for Astro on Vercel",
    "codeDescription": "Configures the edgeMiddleware property to create a Vercel Edge Function from Astro middleware. This allows middleware execution for all requests including static assets, prerendered pages, and on-demand rendered pages.",
    "codeLanguage": "javascript",
    "codeTokens": 103,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/vercel.mdx#2025-04-08_snippet_20",
    "pageTitle": "Vercel Adapter for Astro Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from 'astro/config';\nimport vercel from '@astrojs/vercel';\n\nexport default defineConfig({\n  // ...\n  output: 'server',\n  adapter: vercel({\n    edgeMiddleware: true,\n  }),\n});"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Configuring Dev Toolbar Integration in TypeScript",
    "codeDescription": "Example of creating an Astro integration that adds a custom app to the dev toolbar using the astro:config:setup hook.",
    "codeLanguage": "typescript",
    "codeTokens": 130,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/dev-toolbar-app-reference.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Dev Toolbar App API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "/**\n * @type {() => import('astro').AstroIntegration}\n */\nexport default () => ({\n  name: \"my-integration\",\n  hooks: {\n    \"astro:config:setup\": ({ addDevToolbarApp }) => {\n      addDevToolbarApp({\n        id: \"my-app\",\n        name: \"My App\",\n        icon: \"<svg>...</svg>\",\n        entrypoint: \"./my-app.js\",\n      });\n    },\n  },\n});"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Accessing Environment Variables and Secrets in Astro Components",
    "codeDescription": "Demonstrates how to access environment variables and secrets from Astro.locals.runtime in an Astro component.",
    "codeLanguage": "astro",
    "codeTokens": 56,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/guides/integrations-guide/cloudflare.mdx#2025-04-08_snippet_5",
    "pageTitle": "Cloudflare Integration with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst { env } = Astro.locals.runtime;\nconst myVariable = env.MY_VARIABLE;\nconst secret = env.DB_PASSWORD;\n---"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Creating New URLs from Astro.url",
    "codeDescription": "Shows how to use Astro.url to construct new URLs for purposes like canonical links and SEO meta tags. Uses the URL constructor with the current page's URL as a base.",
    "codeLanguage": "astro",
    "codeTokens": 127,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_5",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// Example: Construct a canonical URL using your production domain\nconst canonicalURL = new URL(Astro.url.pathname, Astro.site);\n// Example: Construct a URL for SEO meta tags using your current domain\nconst socialImageURL = new URL('/images/preview.png', Astro.url);\n---\n<link rel=\"canonical\" href={canonicalURL} />\n<meta property=\"og:image\" content={socialImageURL} />"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Rendering Individual Post Content",
    "codeDescription": "Astro component code for displaying a single post's content from Keystatic.",
    "codeLanguage": "typescript",
    "codeTokens": 86,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/keystatic.mdx#2025-04-08_snippet_8",
    "pageTitle": "Integrating Keystatic CMS with Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "---\nimport { getEntry } from 'astro:content'\n\nconst post = await getEntry('posts', 'my-first-post')\nconst { Content } = await post.render()\n---\n\n<main>\n  <h1>{post.data.title}</h1>\n  <Content />\n</main>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Returning Response Objects from Astro Pages",
    "codeDescription": "This example demonstrates how to correctly return Response objects from Astro pages. It shows two approaches: creating a new Response object manually with status codes, and using Astro.redirect for navigation redirects.",
    "codeLanguage": "astro",
    "codeTokens": 91,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/errors/only-response-can-be-returned.mdx#2025-04-08_snippet_0",
    "pageTitle": "Documentation for Invalid Returns in Astro Pages",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nreturn new Response(null, {\n status: 404,\n statusText: 'Not found'\n});\n\n// Alternatively, for redirects, Astro.redirect also returns an instance of Response\nreturn Astro.redirect('/login');\n---"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Configuring i18n Routing in Astro",
    "codeDescription": "Configuration example for setting up internationalization routing in Astro, including locale settings and fallback strategies.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/configuration-reference.mdx#2025-04-08_snippet_30",
    "pageTitle": "Astro Configuration Reference",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default defineConfig({\n\ti18n: {\n\t\tdefaultLocale: \"en\",\n\t\tlocales: [\"en\", \"fr\", \"pt-br\", \"es\"],\n\t\tfallback: {\n\t\t\tpt: \"es\",\n\t\t  fr: \"en\"\n\t\t}\n\t}\n})"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Applying Attributes to SVG Components in Astro",
    "codeDescription": "Demonstration of passing SVG attributes like width, height, and fill to an SVG component. These attributes override any existing values in the original SVG file.",
    "codeLanguage": "astro",
    "codeTokens": 66,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/experimental-flags/svg.mdx#2025-04-08_snippet_2",
    "pageTitle": "Experimental SVG Components in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Logo from '../assets/logo.svg';\n---\n\n<Logo width={64} height={64} fill=\"currentColor\" />"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Basic Image Component Usage with Styling",
    "codeDescription": "Demonstrates importing and using the Image component with a CSS class applied to the resulting img element. Shows both the component usage and the resulting HTML output.",
    "codeLanguage": "astro",
    "codeTokens": 87,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/images.mdx#2025-04-08_snippet_1",
    "pageTitle": "Using Images in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { Image } from 'astro:assets';\nimport myImage from '../assets/my_image.png';\n---\n\n<!-- `alt` is mandatory on the Image component -->\n<Image src={myImage} alt=\"\" class=\"my-class\" />"
      },
      {
        "language": "html",
        "code": "<!-- Prerendered output -->\n<img\n  src=\"/_astro/my_image.hash.webp\"\n  width=\"1600\"\n  height=\"900\"\n  decoding=\"async\"\n  loading=\"lazy\"\n  class=\"my-class\"\n  alt=\"\"\n/>\n"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Parsing and Storing Data in Astro Loader",
    "codeDescription": "Shows how to use the parseData function to validate and parse data before storing it in the data store within an Astro loader. This ensures that the data conforms to the collection schema before being saved.",
    "codeLanguage": "typescript",
    "codeTokens": 188,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/content-loader-reference.mdx#2025-04-08_snippet_6",
    "pageTitle": "Astro Content Loader API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import type { Loader } from \"astro/loaders\";\nimport { loadFeed } from \"./feed.js\";\n\nexport function feedLoader({ url }): Loader {\n  const feedUrl = new URL(url);\n  return {\n    name: \"feed-loader\",\n    load: async ({ store, logger, parseData, meta, generateDigest }) => {\n      logger.info(\"Loading posts\");\n      const feed = loadFeed(feedUrl);\n      store.clear();\n\n      for (const item of feed.items) {\n        const data = await parseData({\n          id: item.guid,\n          data: item,\n        });\n        store.set({\n          id,\n          data,\n        });\n      }\n    },\n  };\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Typing Component Props in Astro",
    "codeDescription": "Example of defining and using typed props in an Astro component using TypeScript interfaces.",
    "codeLanguage": "astro",
    "codeTokens": 67,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/typescript.mdx#2025-04-08_snippet_10",
    "pageTitle": "TypeScript Support in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\ninterface Props {\n  name: string;\n  greeting?: string;\n}\n\nconst { greeting = \"Hello\", name } = Astro.props;\n---\n<h2>{greeting}, {name}!</h2>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Replacing HTML with Navigation Component",
    "codeDescription": "Demonstrates how to replace the existing HTML navigation links with the newly created Navigation component, showing both the code to remove and the component to add.",
    "codeLanguage": "astro",
    "codeTokens": 71,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/3-components/1.mdx#2025-04-08_snippet_2",
    "pageTitle": "Creating Reusable Navigation Components in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "<a href=\"/\">Home</a>\n<a href=\"/about/\">About</a>\n<a href=\"/blog/\">Blog</a>\n<Navigation />"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Working with Dynamic Routes using Astro.params",
    "codeDescription": "Demonstrates how to access route parameters from dynamic routes using Astro.params. The example shows defining static paths with getStaticPaths() and accessing the route parameter value in the component.",
    "codeLanguage": "astro",
    "codeTokens": 113,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/de/reference/api-reference.mdx#2025-04-08_snippet_2",
    "pageTitle": "Astro Global API Reference Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport function getStaticPaths() {\n  return [\n    { params: { id: '1' } },\n    { params: { id: '2' } },\n    { params: { id: '3' } }\n  ];\n}\n\nconst { id } = Astro.params;\n---\n<h1>{id}</h1>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Creating New URLs from Astro.url",
    "codeDescription": "Shows how to use Astro.url to construct new URLs for purposes like canonical links and SEO meta tags. Uses the URL constructor with the current page's URL as a base.",
    "codeLanguage": "astro",
    "codeTokens": 127,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_5",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// Example: Construct a canonical URL using your production domain\nconst canonicalURL = new URL(Astro.url.pathname, Astro.site);\n// Example: Construct a URL for SEO meta tags using your current domain\nconst socialImageURL = new URL('/images/preview.png', Astro.url);\n---\n<link rel=\"canonical\" href={canonicalURL} />\n<meta property=\"og:image\" content={socialImageURL} />"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Defining an Action with Form Validation Schema",
    "codeDescription": "This snippet defines a newsletter action with validation rules for form data. It validates that email is a valid email address and that terms is a boolean value.",
    "codeLanguage": "ts",
    "codeTokens": 121,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#2025-04-08_snippet_13",
    "pageTitle": "Astro Actions: Type-safe Server Functions",
    "codeList": [
      {
        "language": "ts",
        "code": "import { defineAction } from 'astro:actions';\nimport { z } from 'astro:schema';\n\nexport const server = {\n  newsletter: defineAction({\n    accept: 'form',\n    input: z.object({\n      email: z.string().email(),\n      terms: z.boolean(),\n    }),\n    handler: async ({ email, terms }) => { /* ... */ },\n  })\n}"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Creating Astro Component for Storyblok Blok",
    "codeDescription": "Defines an Astro component (BlogPost.astro) that corresponds to a Storyblok Blok. It uses Storyblok utility functions to render content and enable editing.",
    "codeLanguage": "astro",
    "codeTokens": 132,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/storyblok.mdx#2025-04-08_snippet_3",
    "pageTitle": "Integrating Storyblok CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { storyblokEditable, renderRichText } from '@storyblok/astro'\n\nconst { blok } = Astro.props\nconst content = renderRichText(blok.content)\n---\n\n<article {...storyblokEditable(blok)}>\n  <h1>{blok.title}</h1>\n  <p>{blok.description}</p>\n  <Fragment set:html={content} />\n</article>"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Enhanced Sign-in Endpoint with OAuth Support",
    "codeDescription": "API route that handles both traditional email/password authentication and OAuth provider authentication. For OAuth, it redirects users to the provider's authentication page. For email/password, it authenticates directly and sets session cookies.",
    "codeLanguage": "typescript",
    "codeTokens": 386,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/backend/supabase.mdx#2025-04-08_snippet_12",
    "pageTitle": "Integrating Supabase with Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import type { APIRoute } from \"astro\";\nimport { supabase } from \"../../../lib/supabase\";\nimport type { Provider } from \"@supabase/supabase-js\";\n\nexport const POST: APIRoute = async ({ request, cookies, redirect }) => {\n  const formData = await request.formData();\n  const email = formData.get(\"email\")?.toString();\n  const password = formData.get(\"password\")?.toString();\n  const provider = formData.get(\"provider\")?.toString();\n\n  const validProviders = [\"google\", \"github\", \"discord\"];\n\n  if (provider && validProviders.includes(provider)) {\n    const { data, error } = await supabase.auth.signInWithOAuth({\n      provider: provider as Provider,\n      options: {\n        redirectTo: \"http://localhost:4321/api/auth/callback\"\n      },\n    });\n\n    if (error) {\n      return new Response(error.message, { status: 500 });\n    }\n\n    return redirect(data.url);\n  }\n\n  if (!email || !password) {\n    return new Response(\"Email and password are required\", { status: 400 });\n  }\n\n  const { data, error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  });\n\n  if (error) {\n    return new Response(error.message, { status: 500 });\n  }\n\n  const { access_token, refresh_token } = data.session;\n  cookies.set(\"sb-access-token\", access_token, {\n    path: \"/\",\n  });\n  cookies.set(\"sb-refresh-token\", refresh_token, {\n    path: \"/\",\n  });\n  return redirect(\"/dashboard\");\n};"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Creating an Astro Integration for Dev Toolbar App",
    "codeDescription": "TypeScript code for creating an Astro integration that adds a custom dev toolbar app to an Astro project using the astro:config:setup hook.",
    "codeLanguage": "typescript",
    "codeTokens": 154,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/making-toolbar-apps.mdx#2025-04-08_snippet_3",
    "pageTitle": "Creating Dev Toolbar Apps in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { fileURLToPath } from 'node:url';\nimport type { AstroIntegration } from 'astro';\n\nexport default {\n  name: 'my-astro-integration',\n  hooks: {\n    'astro:config:setup': ({ addDevToolbarApp }) => {  \n      addDevToolbarApp({\n        id: \"my-toolbar-app\",\n        name: \"My Toolbar App\",\n        icon: \"🚀\",\n        entrypoint: fileURLToPath(new URL('./app.ts', import.meta.url))\n      });\n    },\n  },\n} satisfies AstroIntegration;"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Generating Dynamic Post Pages with Ghost and Astro",
    "codeDescription": "Creates dynamic routes for individual blog posts using Ghost CMS data and Astro's getStaticPaths function.",
    "codeLanguage": "astro",
    "codeTokens": 224,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/ghost.mdx#2025-04-08_snippet_3",
    "pageTitle": "Integrating Ghost CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { ghostClient } from '../../lib/ghost';\n\nexport async function getStaticPaths() {\n    const posts = await ghostClient.posts\n        .browse({\n            limit: 'all',\n        })\n        .catch((err) => {\n            console.error(err);\n        });\n\n    return posts.map((post) => {\n        return {\n            params: {\n                slug: post.slug,\n            },\n            props: {\n                post: post,\n            },\n        };\n    });\n}\n\nconst { post } = Astro.props;\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>{post.title}</title>\n    </head>\n    <body>\n        <img src={post.feature_image} alt={post.title} />\n\n        <h1>{post.title}</h1>\n        <p>{post.reading_time} min read</p>\n\n        <Fragment set:html={post.html} />\n    </body>\n</html>"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Preserving Dark Mode Preferences with astro:before-swap",
    "codeDescription": "Uses the astro:before-swap event to ensure that dark mode preferences stored in localStorage are transferred to the new page during navigation. This applies the theme setting to the incoming document before it replaces the current one.",
    "codeLanguage": "astro",
    "codeTokens": 139,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/view-transitions.mdx#2025-04-08_snippet_8",
    "pageTitle": "Implementing View Transitions in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "<script is:inline>\n  function setDarkMode(document) {\n    let theme = localStorage.darkMode ? 'dark' : 'light';\n    document.documentElement.dataset.theme = theme;\n  }\n  setDarkMode(document);\n  document.addEventListener('astro:before-swap', ev => {\n    // Pasa el documento entrante para establecer el tema en él\n    setDarkMode(ev.newDocument);\n  });\n</script>"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Using Nano Store in Astro Button Component",
    "codeDescription": "Astro component for a button that updates the shared state when clicked.",
    "codeLanguage": "astro",
    "codeTokens": 101,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/sharing-state.mdx#2025-04-08_snippet_2",
    "pageTitle": "Sharing State Between Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "<button id=\"openDialog\">Open</button>\n\n<script>\n  import { isOpen } from '../store.js';\n  \n  // Set the store to true when the button is clicked\n  function openDialog() {\n    isOpen.set(true);\n  }\n\n  // Add an event listener to the button\n  document.getElementById('openDialog').addEventListener('click', openDialog);\n</script>"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Generating Dynamic Post Pages with Ghost and Astro",
    "codeDescription": "Creates dynamic routes for individual blog posts using Ghost CMS data and Astro's getStaticPaths function.",
    "codeLanguage": "astro",
    "codeTokens": 224,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/ghost.mdx#2025-04-08_snippet_3",
    "pageTitle": "Integrating Ghost CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { ghostClient } from '../../lib/ghost';\n\nexport async function getStaticPaths() {\n    const posts = await ghostClient.posts\n        .browse({\n            limit: 'all',\n        })\n        .catch((err) => {\n            console.error(err);\n        });\n\n    return posts.map((post) => {\n        return {\n            params: {\n                slug: post.slug,\n            },\n            props: {\n                post: post,\n            },\n        };\n    });\n}\n\nconst { post } = Astro.props;\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>{post.title}</title>\n    </head>\n    <body>\n        <img src={post.feature_image} alt={post.title} />\n\n        <h1>{post.title}</h1>\n        <p>{post.reading_time} min read</p>\n\n        <Fragment set:html={post.html} />\n    </body>\n</html>"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Accessing Cloudflare Runtime in API Endpoints",
    "codeDescription": "Shows how to access the Cloudflare runtime from API endpoints using context.locals.",
    "codeLanguage": "javascript",
    "codeTokens": 51,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/guides/integrations-guide/cloudflare.mdx#2025-04-08_snippet_1",
    "pageTitle": "Cloudflare Integration with Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "export function GET(context) {\n  const runtime = context.locals.runtime;\n\n  return new Response('Un corps de réponse');\n}"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Including Promises Directly in Astro Template",
    "codeDescription": "This example demonstrates how to include promises directly in the Astro template, allowing parallel resolution and only blocking markup that comes after it.",
    "codeLanguage": "astro",
    "codeTokens": 182,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/streaming-improve-page-performance.mdx#2025-04-08_snippet_4",
    "pageTitle": "Using Streaming to Improve Page Performance in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst personPromise = fetch('https://randomuser.me/api/')\n  .then(response => response.json())\n  .then(personData => personData.results[0].name.first);\nconst factPromise = fetch('https://catfact.ninja/fact')\n  .then(response => response.json())\n  .then(factData => factData.fact);\n---\n<html>\n  <head>\n    <title>A name and a fact</title>\n  </head>\n  <body>\n    <h2>A name</h2>\n    <p>{personPromise}</p>\n    <h2>A fact</h2>\n    <p>{factPromise}</p>\n  </body>\n</html>"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Configuring AWS Amplify Build Settings with NPM",
    "codeDescription": "YAML configuration for AWS Amplify to build an Astro site using NPM package manager. Specifies build commands, artifact output directory, and caching strategies for faster builds.",
    "codeLanguage": "yaml",
    "codeTokens": 108,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/deploy/aws.mdx#2025-04-08_snippet_1",
    "pageTitle": "Deploying Astro Sites to AWS",
    "codeList": [
      {
        "language": "yaml",
        "code": "version: 1\nfrontend:\n  phases:\n    preBuild:\n      commands:\n        - npm ci\n    build:\n      commands:\n        - npm run build\n  artifacts:\n    baseDirectory: /dist\n    files:\n      - '**/*'\n  cache:\n    paths:\n      - node_modules/**/*"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "CSS Variables with define:vars",
    "codeDescription": "Demonstrates using CSS variables passed from component frontmatter",
    "codeLanguage": "astro",
    "codeTokens": 89,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/styling.mdx#2025-04-08_snippet_5",
    "pageTitle": "Styling Components in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst foregroundColor = \"rgb(221 243 228)\";\nconst backgroundColor = \"rgb(24 121 78)\";\n---\n<style define:vars={{ foregroundColor, backgroundColor }}>\n  h1 {\n    background-color: var(--backgroundColor);\n    color: var(--foregroundColor);\n  }\n</style>\n<h1>Hello</h1>"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Conditional Rendering in Astro Components",
    "codeDescription": "Demonstrates conditional rendering in Astro components using logical operators and ternary expressions. Shows how to conditionally display HTML based on a boolean variable.",
    "codeLanguage": "astro",
    "codeTokens": 78,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/zh-cn/reference/astro-syntax.mdx#2025-04-08_snippet_3",
    "pageTitle": "Template Expression Reference in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst visible = true;\n---\n{visible && <p>Show me!</p>}\n\n{visible ? <p>Show me!</p> : <p>Else show me!</p>}"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Creating a Remark Plugin for Reading Time Calculation",
    "codeDescription": "Implementation of a remark plugin that calculates reading time for markdown content. It extracts text using mdast-util-to-string and calculates reading time with the reading-time package, adding the result to the frontmatter.",
    "codeLanguage": "javascript",
    "codeTokens": 156,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/reading-time.mdx#2025-04-08_snippet_3",
    "pageTitle": "Adding Reading Time to Astro Markdown or MDX Files",
    "codeList": [
      {
        "language": "javascript",
        "code": "import getReadingTime from 'reading-time';\nimport { toString } from 'mdast-util-to-string';\n\nexport function remarkReadingTime() {\n  return function (tree, { data }) {\n    const textOnPage = toString(tree);\n    const readingTime = getReadingTime(textOnPage);\n    // readingTime.text will give us minutes read as a friendly string,\n    // i.e. \"3 min read\"\n    data.astro.frontmatter.minutesRead = readingTime.text;\n  };\n}"
      }
    ],
    "relevance": 0.937
  },
  {
    "codeTitle": "Rendering Markdown in Astro Components",
    "codeDescription": "Shows how to import and display Markdown content within an Astro component, including frontmatter access and post archive creation.",
    "codeLanguage": "astro",
    "codeTokens": 126,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/markdown-content.mdx#2025-04-08_snippet_1",
    "pageTitle": "Markdown Documentation in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport * as greatPost from './posts/great-post.md';\nconst posts = Object.values(import.meta.glob('./posts/*.md', { eager: true }));\n---\n\n<p>{greatPost.frontmatter.title}</p>\n<p>Written by: {greatPost.frontmatter.author}</p>\n\n<p>Post Archive:</p>\n<ul>\n  {posts.map(post => <li><a href={post.url}>{post.frontmatter.title}</a></li>)}\n</ul>"
      }
    ],
    "relevance": 0.937
  },
  {
    "codeTitle": "Setting transition animation directives in Astro components",
    "codeDescription": "Shows how to set explicit transition:animate directives on elements to provide a comparable experience across browsers with different levels of View Transitions API support.",
    "codeLanguage": "astro",
    "codeTokens": 68,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/view-transitions.mdx#2025-04-08_snippet_9",
    "pageTitle": "Implementing View Transitions in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Layout from \"../layouts/LayoutUsingClientRouter.astro\";\n---\n<title transition:animate=\"fade\">About my site</title>"
      }
    ],
    "relevance": 0.937
  },
  {
    "codeTitle": "Importing Content Collection Types in TypeScript",
    "codeDescription": "Shows how to import type definitions for working with content collections in TypeScript, enabling type-safe access to collection entries and properties.",
    "codeLanguage": "ts",
    "codeTokens": 68,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-content.mdx#2025-04-08_snippet_7",
    "pageTitle": "Content Collections API Reference for Astro",
    "codeList": [
      {
        "language": "ts",
        "code": "import type {\n  CollectionEntry,\n  CollectionKey,\n  ContentCollectionKey,\n  DataCollectionKey,\n  SchemaContext,\n } from 'astro:content';"
      }
    ],
    "relevance": 0.937
  },
  {
    "codeTitle": "Generating Dynamic Pages from WordPress API in Astro",
    "codeDescription": "This code demonstrates how to create dynamic pages in Astro based on data fetched from a WordPress API. It includes fetching individual post data, implementing getStaticPaths for static generation, and rendering the post content.",
    "codeLanguage": "astro",
    "codeTokens": 241,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/wordpress.mdx#2025-04-08_snippet_2",
    "pageTitle": "Integrating WordPress with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Layout from '../../layouts/Layout.astro';\n\nconst { slug } = Astro.params;\n\nlet res = await fetch(`https://norian.studio/wp-json/wp/v2/dinos?slug=${slug}`);\nlet [post] = await res.json();\n\n// The getStaticPaths() is required for static Astro sites.\n// If using SSR, you will not need this function.\nexport async function getStaticPaths() {\n  let data = await fetch(\"https://norian.studio/wp-json/wp/v2/dinos\");\n  let posts = await data.json();\n\n  return posts.map((post) => ({\n    params: { slug: post.slug },\n    props: { post: post },\n  }));\n}\n---\n<Layout title={post.title.rendered}>\n  <article>\n    <h1 set:html={post.title.rendered} />\n    <Fragment set:html={post.content.rendered} />\n  </article>\n</Layout>"
      }
    ],
    "relevance": 0.937
  },
  {
    "codeTitle": "Basic Form Action Error Handling in Astro",
    "codeDescription": "Shows how to handle form action errors using Astro.getActionResult() to display a general failure message for a newsletter signup form.",
    "codeLanguage": "astro",
    "codeTokens": 133,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#2025-04-08_snippet_19",
    "pageTitle": "Astro Actions: Type-safe Server Functions",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { actions } from 'astro:actions';\n\nconst result = Astro.getActionResult(actions.newsletter);\n---\n\n{result?.error && (\n  <p class=\"error\">Unable to sign up. Please try again later.</p>\n)}\n<form method=\"POST\" action={actions.newsletter}>\n  <label>\n    E-mail\n    <input required type=\"email\" name=\"email\" />\n  </label>\n  <button>Sign up</button>\n</form>"
      }
    ],
    "relevance": 0.936
  },
  {
    "codeTitle": "Using Typed Session Data in Astro Components",
    "codeDescription": "Demonstrates using typed session data in an Astro component, showing how TypeScript provides type-checking and prevents type errors when working with session data.",
    "codeLanguage": "ts",
    "codeTokens": 128,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/experimental-flags/sessions.mdx#2025-04-08_snippet_10",
    "pageTitle": "Experimental Sessions in Astro",
    "codeList": [
      {
        "language": "ts",
        "code": "---\nconst cart = await Astro.session.get('cart');\n// const cart: string[] | undefined\n\nconst something = await Astro.session.get('something');\n// const something: any\n\nAstro.session.set('user', { id: 1, name: 'Houston' });\n// Error: Argument of type '{ id: number; name: string }' is not assignable to parameter of type '{ id: string; name: string; }'.\n---"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using is:inline Directive for Styles and Scripts in Astro",
    "codeDescription": "Shows how to use the is:inline directive to prevent Astro from processing, optimizing, or bundling style and script tags. This leaves the content as-is in the final HTML output without any transformation.",
    "codeLanguage": "astro",
    "codeTokens": 130,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/directives-reference.mdx#2025-04-08_snippet_5",
    "pageTitle": "Template Directives Reference in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "<style is:inline>\n  /* inline: relative & npm package imports are not supported. */\n  @import '/assets/some-public-styles.css';\n  span { color: green; }\n</style>\n\n<script is:inline>\n  /* inline: relative & npm package imports are not supported. */\n  console.log('I am inlined right here in the final output HTML.');\n</script>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using getActionPath for Direct Fetch Operations in Astro",
    "codeDescription": "Example showing how to use getActionPath() to generate a URL path for direct fetch operations with custom headers. This allows for more fine-grained control when executing actions compared to calling them directly.",
    "codeLanguage": "typescript",
    "codeTokens": 127,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-actions.mdx#2025-04-08_snippet_7",
    "pageTitle": "Astro Actions API Reference",
    "codeList": [
      {
        "language": "typescript",
        "code": "<script>\nimport { actions, getActionPath } from 'astro:actions'\n\nawait fetch(getActionPath(actions.like), {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: 'Bearer YOUR_TOKEN'\n  },\n  body: JSON.stringify({ id: 'YOUR_ID' }),\n  keepalive: true\n})\n</script>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Manually installing auth-astro dependencies",
    "codeDescription": "Commands for manually installing auth-astro and its dependencies using npm, pnpm, or yarn.",
    "codeLanguage": "shell",
    "codeTokens": 43,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/authentication.mdx#2025-04-08_snippet_1",
    "pageTitle": "Authentication in Astro",
    "codeList": [
      {
        "language": "shell",
        "code": "npm install auth-astro @auth/core@^0.18.6"
      },
      {
        "language": "shell",
        "code": "pnpm add auth-astro @auth/core@^0.18.6"
      },
      {
        "language": "shell",
        "code": "yarn add auth-astro @auth/core@^0.18.6"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Creating Reusable Image Component in Astro",
    "codeDescription": "Example of creating a wrapper component for Image with default styling and prop handling",
    "codeLanguage": "astro",
    "codeTokens": 86,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/images.mdx#2025-04-08_snippet_7",
    "pageTitle": "Using Images in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { Image } from 'astro:assets';\n\nconst { src, ...attrs } = Astro.props;\n---\n<Image src={src} {...attrs} />\n\n<style>\n  img {\n    margin-block: 2.5rem;\n    border-radius: 0.75rem;\n  }\n</style>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Configuring Hygraph Endpoint with Environment Variables in Astro",
    "codeDescription": "Sets up the Hygraph API endpoint as an environment variable in a .env file, which can be accessed in Astro components.",
    "codeLanguage": "ini",
    "codeTokens": 47,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/hygraph.mdx#2025-04-08_snippet_0",
    "pageTitle": "Integrating Hygraph CMS with Astro",
    "codeList": [
      {
        "language": "ini",
        "code": "HYGRAPH_ENDPOINT=YOUR_HIGH_PERFORMANCE_API"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Converting Gatsby Layout to Astro",
    "codeDescription": "Final Astro layout component with conditional header rendering, proper HTML structure, and styling imports. Shows how to handle props and routing in Astro.",
    "codeLanguage": "astro",
    "codeTokens": 278,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/migrate-to-astro/from-gatsby.mdx#2025-04-08_snippet_10",
    "pageTitle": "Migrating from Gatsby to Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport '../styles/style.css';\nconst { title, pathname } = Astro.props\n---\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Astro</title>\n  </head>\n  <body>\n    <div class=\"global-wrapper\">\n      <header class=\"global-header\">\n        { pathname === \"/\" \n        ? \n          <h1 class=\"main-heading\">\n          <a href=\"/\">{title}</a>\n          </h1>\n        : \n          <h1 class=\"main-heading\">\n          <a class=\"header-link-home\" href=\"/\">Inicio</a>\n          </h1>\n        }  \n      </header>\n      <main>\n        <slot />\n      </main>\n      <footer>\n        &#169; {new Date().getFullYear()}, Construido con\n        {` `}\n        <a href=\"https://www.astro.build\">Astro</a>\n      </footer>\n    </div>\n  </body>\n</html>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Form Data Validation in Astro Action",
    "codeDescription": "This example shows how to define an Astro action that validates form data for a newsletter signup, including email validation and terms acceptance.",
    "codeLanguage": "ts",
    "codeTokens": 115,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/pl/guides/actions.mdx#2025-04-08_snippet_7",
    "pageTitle": "Implementing Server Actions in Astro",
    "codeList": [
      {
        "language": "ts",
        "code": "import { defineAction } from 'astro:actions';\nimport { z } from 'astro:schema';\n\nexport const server = {\n  newsletter: defineAction({\n    accept: 'form',\n    input: z.object({\n      email: z.string().email(),\n      terms: z.boolean(),\n    }),\n    handler: async ({ email, terms }) => { /* ... */ },\n  })\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Image Usage in Markdown Files",
    "codeDescription": "Examples of using images in Markdown with different storage locations",
    "codeLanguage": "markdown",
    "codeTokens": 128,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/images.mdx#2025-04-08_snippet_10",
    "pageTitle": "Using Images in Astro",
    "codeList": [
      {
        "language": "markdown",
        "code": "<!-- src/pages/post-1.md -->\n\n# My Markdown Page\n\n<!-- Local image stored in src/assets/ -->\n<!-- Use a relative file path or import alias -->\n![A starry night sky.](../assets/stars.png)\n\n<!-- Image stored in public/images/ -->\n<!-- Use the file path relative to public/ -->\n![A starry night sky.](/images/stars.png)\n\n<!-- Remote image on another server -->\n<!-- Use the full URL of the image -->\n![Astro](https://example.com/images/remote-image.png)"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Configuring Edgio for Server Side Rendering in Astro",
    "codeDescription": "JavaScript configuration for enabling Server Side Rendering in Edgio. This specifies the server file path in the edgio.config.js file.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/deploy/edgio.mdx#2025-04-08_snippet_2",
    "pageTitle": "Deploying Astro Sites to Edgio",
    "codeList": [
      {
        "language": "javascript",
        "code": "// edgio.config.js\nimport { join } from 'path'\n\nmodule.exports = {\n  astro: {\n    // The path of the standalone server that runs Astro SSR.\n    // The dependencies for this file are automatically bundled.\n    appPath: join(process.cwd(), 'dist', 'server', 'entry.mjs'),\n  },\n};"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Loading Custom Data Files with Astro.glob() in TypeScript",
    "codeDescription": "This snippet demonstrates how to use Astro.glob() with a TypeScript generic to load custom data files. It defines an interface for the custom data file and uses it to type the glob result.",
    "codeLanguage": "typescript",
    "codeTokens": 79,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_29",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "---\ninterface CustomDataFile {\n  default: Record<string, any>;\n}\nconst data = await Astro.glob<CustomDataFile>('../data/**/*.js');\n---"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Advanced Cloudflare Platform Proxy Configuration",
    "codeDescription": "Configuration example showing platformProxy options including enabling the Cloudflare runtime during development, using a JSON config file, and specifying custom data persistence paths.",
    "codeLanguage": "javascript",
    "codeTokens": 126,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/cloudflare.mdx#2025-04-08_snippet_8",
    "pageTitle": "Astro Cloudflare Adapter Integration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import cloudflare from '@astrojs/cloudflare';\nimport { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n\tadapter: cloudflare({\n\t\tplatformProxy: {\n\t\t\tenabled: true,\n\t\t\tconfigPath: 'wrangler.json',\n\t\t\texperimentalJsonConfig: true,\n\t\t\tpersist: {\n\t\t\t\tpath: './.cache/wrangler/v3'\n\t\t\t},\n\t\t},\n\t}),\n});"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Rendering Contentful Blog Post in Astro Template",
    "codeDescription": "Displays the processed blog post data in the Astro component's template section. It uses optional chaining to safely access post properties and set:html to render the content as HTML.",
    "codeLanguage": "astro",
    "codeTokens": 116,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/guides/cms/contentful.mdx#2025-04-08_snippet_7",
    "pageTitle": "Integrating Contentful CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "<html lang=\"fr\">\n  <head>\n    <title>{post?.title}</title>\n  </head>\n  <body>\n    <h1>{post?.title}</h1>\n    <time>{post?.date}</time>\n    <article set:html={post?.content} />\n  </body>\n</html>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Debugging with console.log() in Astro Components",
    "codeDescription": "This example demonstrates where console.log() output appears when used in different parts of an Astro component. Server-side logs (in the frontmatter) appear in the terminal, while client-side logs (in script tags) appear in the browser console.",
    "codeLanguage": "astro",
    "codeTokens": 105,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/troubleshooting.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Troubleshooting Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconsole.log('Hi! I'm the server. This is logged in the terminal where Astro is running.');\n---\n\n<script>\nconsole.log('Hi! I'm the client. This is logged in browser dev console.');\n</script>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Configuring Project Workspaces in package.json",
    "codeDescription": "Root package.json configuration that sets up workspaces for component development. This enables developing components alongside a test environment in the same repository.",
    "codeLanguage": "json",
    "codeTokens": 60,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/publish-to-npm.mdx#2025-04-08_snippet_1",
    "pageTitle": "Publishing Astro Components to NPM",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"name\": \"my-project\",\n  \"workspaces\": [\"demo\", \"packages/*\"]\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Column Types in Astro DB",
    "codeDescription": "Demonstration of different column types available in Astro DB including text, number, boolean, date, and JSON.",
    "codeLanguage": "typescript",
    "codeTokens": 90,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/astro-db.mdx#2025-04-08_snippet_3",
    "pageTitle": "Astro DB Configuration and Setup Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineTable, column } from 'astro:db';\n\nconst Comment = defineTable({\n  columns: {\n    author: column.text(),\n    likes: column.number(),\n    flagged: column.boolean(),\n    published: column.date(),\n    metadata: column.json(),\n  }\n});"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Creating a Multi-stage Dockerfile for Astro SSR",
    "codeDescription": "This advanced Dockerfile uses multi-stage builds to optimize the build process by caching npm dependencies. It reduces build time when only source code changes.",
    "codeLanguage": "docker",
    "codeTokens": 164,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/recipes/docker.mdx#2025-04-08_snippet_5",
    "pageTitle": "Building an Astro Site with Docker",
    "codeList": [
      {
        "language": "docker",
        "code": "FROM node:lts AS base\nWORKDIR /app\n\nCOPY package.json package-lock.json ./\n\nFROM base AS prod-deps\nRUN npm install --omit=dev\n\nFROM base AS build-deps\nRUN npm install\n\nFROM build-deps AS build\nCOPY . .\nRUN npm run build\n\nFROM base AS runtime\nCOPY --from=prod-deps /app/node_modules ./node_modules\nCOPY --from=build /app/dist ./dist\n\nENV HOST=0.0.0.0\nENV PORT=4321\nEXPOSE 4321\nCMD node ./dist/server/entry.mjs"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementing Sign-in Page with Firebase Authentication",
    "codeDescription": "Sign-in page implementation with both email/password and OAuth authentication, including session management and client-side Firebase authentication logic.",
    "codeLanguage": "astro",
    "codeTokens": 604,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/backend/google-firebase.mdx#2025-04-08_snippet_8",
    "pageTitle": "Integrating Firebase with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { app } from \"../firebase/server\";\nimport { getAuth } from \"firebase-admin/auth\";\nimport Layout from \"../layouts/Layout.astro\";\n\n/* Check if the user is authenticated */\nconst auth = getAuth(app);\nif (Astro.cookies.has(\"__session\")) {\n  const sessionCookie = Astro.cookies.get(\"__session\").value;\n  const decodedCookie = await auth.verifySessionCookie(sessionCookie);\n  if (decodedCookie) {\n    return Astro.redirect(\"/dashboard\");\n  }\n}\n---\n\n<Layout title=\"Sign in\">\n  <h1>Sign in</h1>\n  <p>New here? <a href=\"/register\">Create an account</a></p>\n  <form action=\"/api/auth/signin\" method=\"post\">\n    <label for=\"email\" for=\"email\">Email</label>\n    <input type=\"email\" name=\"email\" id=\"email\" />\n    <label for=\"password\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"password\" />\n    <button type=\"submit\">Login</button>\n  </form>\n  <button id=\"google\">Sign in with Google</button>\n</Layout>\n<script>\n  import {\n    getAuth,\n    inMemoryPersistence,\n    signInWithEmailAndPassword,\n    GoogleAuthProvider,\n    signInWithPopup,\n  } from \"firebase/auth\";\n  import { app } from \"../firebase/client\";\n\n  const auth = getAuth(app);\n  auth.setPersistence(inMemoryPersistence);\n\n  const form = document.querySelector(\"form\") as HTMLFormElement;\n  form.addEventListener(\"submit\", async (e) => {\n    e.preventDefault();\n    const formData = new FormData(form);\n    const email = formData.get(\"email\")?.toString();\n    const password = formData.get(\"password\")?.toString();\n\n    if (!email || !password) {\n      return;\n    }\n    const userCredential = await signInWithEmailAndPassword(\n      auth,\n      email,\n      password\n    );\n    const idToken = await userCredential.user.getIdToken();\n    const response = await fetch(\"/api/auth/signin\", {\n      headers: {\n        Authorization: `Bearer ${idToken}`,\n      },\n    });\n\n    if (response.redirected) {\n      window.location.assign(response.url);\n    }\n  });\n\n  const googleSignin = document.querySelector(\"#google\") as HTMLButtonElement;\n  googleSignin.addEventListener(\"click\", async () => {\n    const provider = new GoogleAuthProvider();\n    const userCredential = await signInWithPopup(auth, provider);\n    const idToken = await userCredential.user.getIdToken();\n    const res = await fetch(\"/api/auth/signin\", {\n      headers: {\n        Authorization: `Bearer ${idToken}`,\n      },\n    });\n\n    if (res.redirected) {\n      window.location.assign(res.url);\n    }\n  });\n</script>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementing Basic Middleware in Astro",
    "codeDescription": "Creates a middleware function that intercepts requests, modifies locals, and passes control to the next handler.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/middleware.mdx#2025-04-08_snippet_0",
    "pageTitle": "Using Middleware in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "export function onRequest (context, next) {\n    // interceptar los datos de una solicitud.\n    // opcionalmente, modifica las propiedades en `locals`.\n    context.locals.title = \"Nuevo título\";\n\n    // devuelve una respuesta o el resultado de llamar a `next()`.\n    return next();\n};"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using Environment Variables in Astro Components",
    "codeDescription": "This snippet illustrates how to import and use environment variables from the appropriate client or server modules in an Astro component.",
    "codeLanguage": "astro",
    "codeTokens": 132,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/environment-variables.mdx#2025-04-08_snippet_14",
    "pageTitle": "Using Environment Variables in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { API_URL } from \"astro:env/client\";\nimport { API_SECRET_TOKEN } from \"astro:env/server\";\n\nconst data = await fetch(`${API_URL}/users`, {\n\tmethod: \"GET\",\n\theaders: {\n\t\t\"Content-Type\": \"application/json\",\n\t\t\"Authorization\": `Bearer ${API_SECRET_TOKEN}`\n\t},\n})\n---\n\n<script>\n  import { API_URL } from \"astro:env/client\";\n  \n  fetch(`${API_URL}/ping`)\n</script>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementing Dynamic Blog Routes with Static Site Generation in Astro",
    "codeDescription": "An Astro page that uses dynamic routes and getStaticPaths to generate static pages for each blog post from Storyblok. It fetches all stories with blogPost content type and creates a route for each one.",
    "codeLanguage": "astro",
    "codeTokens": 297,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/cms/storyblok.mdx#2025-04-08_snippet_6",
    "pageTitle": "Integrating Storyblok with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { useStoryblokApi } from '@storyblok/astro'\nimport StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'\n\nexport async function getStaticPaths() {\n  const sbApi = useStoryblokApi();\n\n  const { data } = await sbApi.get(\"cdn/stories\", {\n    content_type: \"blogPost\",\n    version: import.meta.env.DEV ? \"draft\" : \"published\",\n  });\n\n  const stories = Object.values(data.stories);\n\n  return stories.map((story) => {\n    return {\n      params: { slug: story.slug },\n    };\n  });\n}\n\nconst sbApi = useStoryblokApi();\nconst { slug } = Astro.params;\nconst { data } = await sbApi.get(`cdn/stories/${slug}`, {\n  version: import.meta.env.DEV ? \"draft\" : \"published\",\n});\n\nconst story = data.story;\n---\n\n<html lang=\"en\">\n  <head>\n    <title>Storyblok & Astro</title>\n  </head>\n  <body>\n    <StoryblokComponent blok={story.content} />\n  </body>\n</html>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementando navegación de paginación en Astro",
    "codeDescription": "Ejemplo de cómo implementar enlaces de navegación 'Anterior' y 'Siguiente' en páginas paginadas utilizando las propiedades de la prop 'page' en Astro.",
    "codeLanguage": "astro",
    "codeTokens": 187,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/routing.mdx#2025-04-08_snippet_4",
    "pageTitle": "Configuración de redirecciones y enrutamiento en Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/pages/astronauts/[page].astro\n// Paginar la misma lista de objetos { astronaut } como en el ejemplo anterior\nexport async function getStaticPaths({ paginate }) { /* ... */ }\nconst { page } = Astro.props;\n---\n<h1>Página {page.currentPage}</h1>\n<ul>\n  {page.data.map(({ astronaut }) => <li>{astronaut}</li>)}\n</ul>\n{page.url.prev ? <a href={page.url.prev}>Anterior</a> : null}\n{page.url.next ? <a href={page.url.next}>Siguiente</a> : null}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Creating a Customized Paddle Checkout Button in Astro",
    "codeDescription": "Creates a fully customized Paddle checkout button with various data attributes that control the checkout experience, including display mode, theme, locale, success URL, and product information.",
    "codeLanguage": "html",
    "codeTokens": 143,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/ecommerce.mdx#2025-04-08_snippet_4",
    "pageTitle": "E-commerce with Astro",
    "codeList": [
      {
        "language": "html",
        "code": "<a \n  href=\"#\"\n  class=\"paddle_button\"\n  data-display-mode=\"overlay\"\n  data-theme=\"light\"\n  data-locale=\"en\"\n  data-success-url=\"https://example.com/thankyou\"\n  data-items='[\n    {\n      \"priceId\": \"pri_01gs59hve0hrz6nyybj56z04eq\", \n      \"quantity\": 1\n    }\n  ]'\n>\n  Buy now\n</a>"
      }
    ],
    "relevance": 0.934
  },
  {
    "codeTitle": "Configuring Astro for Netlify SSR",
    "codeDescription": "Configuration setup in astro.config.mjs to enable server-side rendering with Netlify adapter",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/deploy/netlify.mdx#2025-04-08_snippet_2",
    "pageTitle": "Deploying Astro Sites to Netlify",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from 'astro/config';\nimport netlify from '@astrojs/netlify';\n\nexport default defineConfig({\n  output: 'server',\n  adapter: netlify(),\n});"
      }
    ],
    "relevance": 0.934
  },
  {
    "codeTitle": "Creating OAuth Callback Endpoint in Astro",
    "codeDescription": "An API route that handles the OAuth callback process. It exchanges the authorization code for access and refresh tokens, then stores them in cookies for session management.",
    "codeLanguage": "typescript",
    "codeTokens": 219,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/backend/supabase.mdx#2025-04-08_snippet_10",
    "pageTitle": "Integrating Supabase with Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import type { APIRoute } from \"astro\";\nimport { supabase } from \"../../../lib/supabase\";\n\nexport const GET: APIRoute = async ({ url, cookies, redirect }) => {\n  const authCode = url.searchParams.get(\"code\");\n\n  if (!authCode) {\n    return new Response(\"No code provided\", { status: 400 });\n  }\n\n  const { data, error } = await supabase.auth.exchangeCodeForSession(authCode);\n\n  if (error) {\n    return new Response(error.message, { status: 500 });\n  }\n\n  const { access_token, refresh_token } = data.session;\n\n  cookies.set(\"sb-access-token\", access_token, {\n    path: \"/\",\n  });\n  cookies.set(\"sb-refresh-token\", refresh_token, {\n    path: \"/\",\n  });\n\n  return redirect(\"/dashboard\");\n};"
      }
    ],
    "relevance": 0.934
  },
  {
    "codeTitle": "Advanced Page Rewriting with Request Object in Astro Components",
    "codeDescription": "Example demonstrating how to rewrite a page's content using a custom Request object with headers, allowing data to be passed to the rewritten content.",
    "codeLanguage": "astro",
    "codeTokens": 74,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_19",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nreturn Astro.rewrite(new Request(new URL(\"../\", Astro.url), {\n  headers: {\n    \"x-custom-header\": JSON.stringify(Astro.locals.someValue)\n  }\n}))\n---"
      }
    ],
    "relevance": 0.933
  },
  {
    "codeTitle": "Using isRemoteImage() Utility",
    "codeDescription": "Shows how to use the isRemoteImage() utility to determine if a source is a remote image URL rather than local image metadata.",
    "codeLanguage": "typescript",
    "codeTokens": 181,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/image-service-reference.mdx#2025-04-08_snippet_13",
    "pageTitle": "Building Image Services with Astro's API",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { isRemoteImage } from 'astro/assets/utils';\n\n// Example usage of isRemoteImage\nconst remoteImageUrl = 'https://example.com/images/photo.jpg';\nconst localImageMetadata = {\n  src: '/images/photo.jpg',\n  width: 800,\n  height: 600,\n  format: 'jpg',\n};\n\n// Check if the input is a remote image URL\nconst isRemote1 = isRemoteImage(remoteImageUrl);\nconsole.log(`Is remoteImageUrl a remote image? ${isRemote1}`); // Output: true\n\nconst isRemote2 = isRemoteImage(localImageMetadata);\nconsole.log(`Is localImageMetadata a remote image? ${isRemote2}`); // Output: false"
      }
    ],
    "relevance": 0.933
  },
  {
    "codeTitle": "Advanced Page Rewriting with Request Object in Astro Components",
    "codeDescription": "Example demonstrating how to rewrite a page's content using a custom Request object with headers, allowing data to be passed to the rewritten content.",
    "codeLanguage": "astro",
    "codeTokens": 74,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#2025-04-08_snippet_19",
    "pageTitle": "Astro Render Context Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nreturn Astro.rewrite(new Request(new URL(\"../\", Astro.url), {\n  headers: {\n    \"x-custom-header\": JSON.stringify(Astro.locals.someValue)\n  }\n}))\n---"
      }
    ],
    "relevance": 0.933
  },
  {
    "codeTitle": "Creating Path Parameters for Static Blog Posts in Astro with Kontent.ai",
    "codeDescription": "This snippet extends the getStaticPaths function to map each blog post to a URL path and pass the blog post data as props. It generates dynamic routes based on the URL slug field from Kontent.ai.",
    "codeLanguage": "astro",
    "codeTokens": 162,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/kontent-ai.mdx#2025-04-08_snippet_10",
    "pageTitle": "Kontent.ai Integration with Astro Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { deliveryClient } from '../../lib/kontent';\nimport type { BlogPost } from '../../models';\nimport { contentTypes } from '../../models/project/contentTypes';\n\nexport async function getStaticPaths() {\n    const blogPosts = await deliveryClient\n        .items<BlogPost>()\n        .type(contentTypes.blog_post.codename)\n        .toPromise()\n\n    return blogPosts.data.items.map(blogPost => ({\n        params: { slug: blogPost.elements.url_slug.value },\n        props: { blogPost }\n    }))\n}\n---"
      }
    ],
    "relevance": 0.933
  },
  {
    "codeTitle": "Creating Dynamic Blog Post Route in Astro with Strapi Integration",
    "codeDescription": "This code snippet demonstrates how to create a dynamic route for blog posts in Astro, fetching data from Strapi CMS. It includes error handling and redirects to a 404 page if the article is not found.",
    "codeLanguage": "astro",
    "codeTokens": 285,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/strapi.mdx#2025-04-08_snippet_7",
    "pageTitle": "Strapi & Astro Integration Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport fetchApi from '../../../lib/strapi';\nimport type Article from '../../../interfaces/article';\n\nconst { slug } = Astro.params;\n\nlet article: Article;\n\ntry {\n  article = await fetchApi<Article>({\n    endpoint: 'articles',\n    wrappedByKey: 'data',\n    wrappedByList: true,\n    query: {\n      'filters[slug][$eq]': slug || '',\n    },\n  });\n} catch (error) {\n  return Astro.redirect('/404');\n}\n---\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>{article.attributes.title}</title>\n  </head>\n\n  <body>\n    <main>\n      <img src={import.meta.env.STRAPI_URL + article.attributes.image.data.attributes.url} />\n\n      <h1>{article.attributes.title}</h1>\n\n      <!-- Render plain text -->\n      <p>{article.attributes.content}</p>\n      <!-- Render markdown -->\n      <MyMarkdownComponent>\n        {article.attributes.content}\n      </MyMarkdownComponent>\n      <!-- Render html -->\n      <Fragment set:html={article.attributes.content} />\n    </main>\n  </body>\n</html>"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Deploying to Netlify",
    "codeDescription": "Command to deploy the Astro site to Netlify using the Netlify CLI.",
    "codeLanguage": "sh",
    "codeTokens": 31,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/integrations-guide/netlify.mdx#2025-04-08_snippet_7",
    "pageTitle": "Configuring Netlify Adapter for Astro",
    "codeList": [
      {
        "language": "sh",
        "code": "netlify deploy"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Rendering Nested Astro Components",
    "codeDescription": "Shows how to render nested Astro components using the renderToString method of the Astro Container API.",
    "codeLanguage": "javascript",
    "codeTokens": 103,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/container-reference.mdx#2025-04-08_snippet_8",
    "pageTitle": "Astro Container API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import Card from \"../src/components/Card.astro\";\nimport CardHeader from \"../src/components/CardHeader.astro\";\nimport CardFooter from \"../src/components/CardFooter.astro\";\n\nconst result = await container.renderToString(Card, { \n  slots: { \n    header: await container.renderToString(CardHeader), \n    footer:  await container.renderToString(CardFooter)\n  }\n});"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Astro Page with Kontent.ai Data Fetching",
    "codeDescription": "Example Astro page component that fetches and displays blog posts from Kontent.ai",
    "codeLanguage": "astro",
    "codeTokens": 152,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/kontent-ai.mdx#2025-04-08_snippet_4",
    "pageTitle": "Kontent.ai Integration with Astro Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { deliveryClient } from \"../lib/kontent\";\n\nconst blogPosts = await deliveryClient\n    .items()\n    .type(\"blogPost\")\n    .toPromise()\n---\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width\" />\n\t\t<title>Astro</title>\n\t</head>\n\t<body>\n        <ul>\n        {blogPosts.data.items.map(blogPost => (\n            <li>{blogPost.elements.title.value}</li>\n        ))}\n        </ul>\n    </body>\n</html>"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Converting React Children Props to Astro Slots",
    "codeDescription": "Example demonstrating how to replace React's children props with Astro's slot system. Instead of receiving children as props and rendering them, Astro components use <slot /> tags to render child content.",
    "codeLanguage": "astro",
    "codeTokens": 96,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/migrate-to-astro/from-create-react-app.mdx#2025-04-08_snippet_5",
    "pageTitle": "Migrating from Create React App (CRA) to Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n---\nexport default function MyComponent(props) { \n    return (\n      <div>\n        {props.children}\n      </div>\n    );  \n}\n\n<div>\n  <slot />\n</div>"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Using Node.js Builtins with node: Prefix in Astro",
    "codeDescription": "Example of importing and using Node.js builtin modules in Astro with the node: prefix. This demonstrates reading a file using the fs/promises module while maintaining cross-runtime compatibility.",
    "codeLanguage": "astro",
    "codeTokens": 114,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/imports.mdx#2025-04-08_snippet_17",
    "pageTitle": "Imports Reference in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// Example: import the \"fs/promises\" builtin from Node.js\nimport fs from 'node:fs/promises';\n\nconst url = new URL('../../package.json', import.meta.url);\nconst json = await fs.readFile(url, 'utf-8');\nconst data = JSON.parse(json);\n---\n\n<span>Version: {data.version}</span>"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Setting Custom IDs in JSON Content",
    "codeDescription": "Example showing how to override the automatically generated ID with a custom slug in a JSON file.",
    "codeLanguage": "json",
    "codeTokens": 61,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#2025-04-08_snippet_11",
    "pageTitle": "Astro Content Collections Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"title\": \"My Category\",\n  \"slug\": \"my-custom-id/supports/slashes\",\n  \"description\": \"Your category description here.\"\n}"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Installing auth-astro with package managers",
    "codeDescription": "Commands for installing the auth-astro package using npm, pnpm, or yarn.",
    "codeLanguage": "shell",
    "codeTokens": 33,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/authentication.mdx#2025-04-08_snippet_0",
    "pageTitle": "Authentication in Astro",
    "codeList": [
      {
        "language": "shell",
        "code": "npx astro add auth-astro"
      },
      {
        "language": "shell",
        "code": "pnpm astro add auth-astro"
      },
      {
        "language": "shell",
        "code": "yarn astro add auth-astro"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Configuring PayloadCMS Posts Collection in TypeScript",
    "codeDescription": "Defines a PayloadCMS collection configuration for posts with required fields for title, content, and slug. This setup creates the basic structure for blog posts in the CMS.",
    "codeLanguage": "typescript",
    "codeTokens": 168,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/cms/payload.mdx#2025-04-08_snippet_0",
    "pageTitle": "PayloadCMS Integration with Astro Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { CollectionConfig } from \"payload/types\";\n\nconst Posts: CollectionConfig = {\n  slug: \"posts\",\n  admin: {\n    useAsTitle: \"title\",\n  },\n  access: {\n    read: () => true,\n  },\n\n  fields: [\n    {\n      name: \"title\",\n      type: \"text\",\n      required: true,\n    },\n    {\n      name: \"content\",\n      type: \"text\",\n      required: true,\n    },\n    {\n      name: \"slug\",\n      type: \"text\",\n      required: true,\n    },\n  ],\n};\n\nexport default Posts;"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Implementing Confetti Button in Astro",
    "codeDescription": "Creates an interactive button component that triggers a confetti animation when clicked. Demonstrates importing npm modules and adding event listeners.",
    "codeLanguage": "astro",
    "codeTokens": 129,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/client-side-scripts.mdx#2025-04-08_snippet_0",
    "pageTitle": "Script and Event Handling in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "<button data-confetti-button>Celebrate!</button>\n\n<script>\n  // Import npm modules.\n  import confetti from 'canvas-confetti';\n\n  // Find our component DOM on the page.\n  const buttons = document.querySelectorAll('[data-confetti-button]');\n\n  // Add event listeners to fire confetti when a button is clicked.\n  buttons.forEach((button) => {\n    button.addEventListener('click', () => confetti());\n  });\n</script>"
      }
    ],
    "relevance": 0.931
  },
  {
    "codeTitle": "Implementing Confetti Button in Astro",
    "codeDescription": "Creates an interactive button component that triggers a confetti animation when clicked. Demonstrates importing npm modules and adding event listeners.",
    "codeLanguage": "astro",
    "codeTokens": 129,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/client-side-scripts.mdx#2025-04-08_snippet_0",
    "pageTitle": "Script and Event Handling in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "<button data-confetti-button>Celebrate!</button>\n\n<script>\n  // Import npm modules.\n  import confetti from 'canvas-confetti';\n\n  // Find our component DOM on the page.\n  const buttons = document.querySelectorAll('[data-confetti-button]');\n\n  // Add event listeners to fire confetti when a button is clicked.\n  buttons.forEach((button) => {\n    button.addEventListener('click', () => confetti());\n  });\n</script>"
      }
    ],
    "relevance": 0.931
  },
  {
    "codeTitle": "Adding Required Astro Integrations",
    "codeDescription": "Commands to add React and Markdoc integrations to an Astro project.",
    "codeLanguage": "shell",
    "codeTokens": 35,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/keystatic.mdx#2025-04-08_snippet_1",
    "pageTitle": "Integrating Keystatic CMS with Astro",
    "codeList": [
      {
        "language": "shell",
        "code": "npx astro add react markdoc"
      },
      {
        "language": "shell",
        "code": "pnpm astro add react markdoc"
      },
      {
        "language": "shell",
        "code": "yarn astro add react markdoc"
      }
    ],
    "relevance": 0.931
  },
  {
    "codeTitle": "Implementing Site-Wide View Transitions in Astro",
    "codeDescription": "This code shows how to enable site-wide view transitions by adding the ClientRouter component to a common head component used across the site.",
    "codeLanguage": "astro",
    "codeTokens": 116,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/view-transitions.mdx#2025-04-08_snippet_1",
    "pageTitle": "Implementing View Transitions in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { ClientRouter } from \"astro:transitions\";\n---\n<link rel=\"icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n<meta name=\"generator\" content={Astro.generator} />\n\n<!-- Primary Meta Tags -->\n<title>{title}</title>\n<meta name=\"title\" content={title} />\n<meta name=\"description\" content={description} />\n\n<ClientRouter />"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Optimized Image Component Basic Example",
    "codeDescription": "Shows importing and using the Image component for a local image with automatic width and height handling to prevent Cumulative Layout Shift. Includes example of both prerendered and on-demand rendered outputs.",
    "codeLanguage": "astro",
    "codeTokens": 113,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/images.mdx#2025-04-08_snippet_2",
    "pageTitle": "Using Images in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// import the Image component and the image\nimport { Image } from 'astro:assets';\nimport myImage from '../assets/my_image.png'; // Image is 1600x900\n---\n\n<!-- `alt` is mandatory on the Image component -->\n<Image src={myImage} alt=\"A description of my image.\" />"
      },
      {
        "language": "html",
        "code": "<!-- Prerendered output -->\n<!-- Image is optimized, proper attributes are enforced -->\n<img\n  src=\"/_astro/my_image.hash.webp\"\n  width=\"1600\"\n  height=\"900\"\n  decoding=\"async\"\n  loading=\"lazy\"\n  alt=\"A description of my image.\"\n/>\n\n<!-- Output rendered on demand-->\n<!-- src will use an endpoint generated on demand-->\n<img\n  src=\"/_image?href=%2F_astro%2Fmy_image.hash.webp&amp;w=1600&amp;h=900&amp;f=webp\"\n  <!-- ... -->\n/>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Enabling Prefetch for All Links in Astro",
    "codeDescription": "Demonstrates how to enable prefetching for all links by default using the prefetch.prefetchAll option in the Astro configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/prefetch.mdx#2025-04-08_snippet_3",
    "pageTitle": "Configuring Prefetching in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  prefetch: {\n    prefetchAll: true\n  }\n});"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Running Astro build with yarn",
    "codeDescription": "Command to run the Astro build process using yarn, which will generate the bundle and statistics.",
    "codeLanguage": "shell",
    "codeTokens": 33,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/analyze-bundle-size.mdx#2025-04-08_snippet_6",
    "pageTitle": "Analyzing Bundle Size in Astro Projects",
    "codeList": [
      {
        "language": "shell",
        "code": "yarn build"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Fetching and Displaying Ghost Posts in Astro",
    "codeDescription": "Retrieves all posts from Ghost CMS and displays them as a list on the index page.",
    "codeLanguage": "astro",
    "codeTokens": 154,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/ghost.mdx#2025-04-08_snippet_2",
    "pageTitle": "Integrating Ghost CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { ghostClient } from '../lib/ghost';\nconst posts = await ghostClient.posts\n    .browse({\n        limit: 'all',\n    })\n    .catch((err) => {\n        console.error(err);\n    });\n---\n\n<html lang=\"en\">\n    <head>\n        <title>Astro + Ghost 👻</title>\n    </head>\n    <body>\n\n        {\n            posts.map((post) => (\n                <a href={`/post/${post.slug}`}>\n                    <h1> {post.title} </h1>\n                </a>\n            ))\n        }\n    </body>\n</html>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "On-Demand Rendering for Blog Posts with Storyblok in Astro",
    "codeDescription": "This component fetches blog post data from Storyblok at request time for on-demand rendering. It includes error handling to redirect to a 404 page if the content doesn't exist.",
    "codeLanguage": "astro",
    "codeTokens": 221,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/storyblok.mdx#2025-04-08_snippet_12",
    "pageTitle": "Integrating Storyblok CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { useStoryblokApi } from '@storyblok/astro'\nimport StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'\nconst storyblokApi = useStoryblokApi()\nconst slug = Astro.params.slug;\nlet content;\ntry {\n  const { data } = await storyblokApi.get(`cdn/stories/blog/${slug}`, {\n    version: import.meta.env.DEV ? \"draft\" : \"published\",\n  });\n  content = data.story.content\n} catch (error) {\n  return Astro.redirect('/404')\n}\n---\n<html lang=\"en\">\n  <head>\n    <title>Storyblok & Astro</title>\n  </head>\n  <body>\n    <StoryblokComponent blok={content} />\n  </body>\n</html>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Creating Blog Show Template in Astro",
    "codeDescription": "Astro component template for displaying an individual blog post. It uses the AposArea component to render the rich content area from ApostropheCMS, along with the post's title, author, and publication date.",
    "codeLanguage": "javascript",
    "codeTokens": 178,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/apostrophecms.mdx#2025-04-08_snippet_15",
    "pageTitle": "Integrating ApostropheCMS with Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "---\nimport AposArea from '@apostrophecms/apostrophe-astro/components/AposArea.astro';\nimport dayjs from 'dayjs';\n\nconst { page, piece } = Astro.props.aposData;\nconst { main } = piece;\n---\n\n<section class=\"bp-content\">\n  <h1>{ piece.title }</h1>\n  <h3>Created by: { piece.authorName }\n  <h4>\n    Released On { dayjs(piece.publicationDate).format('MMMM D, YYYY') }\n  </h4>\n  <AposArea area={content} />\n</section>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Multi-Parameter Dynamic Routes in Astro",
    "codeDescription": "Demonstrates using multiple dynamic parameters in route paths with getStaticPaths().",
    "codeLanguage": "astro",
    "codeTokens": 82,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/routing.mdx#2025-04-08_snippet_2",
    "pageTitle": "Astro Routing Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport function getStaticPaths() {\n  return [\n    { params: { lang: \"en\", version: \"v1\" }},\n    { params: { lang: \"fr\", version: \"v2\" }},\n  ];\n}\n\nconst { lang, version } = Astro.params;\n---"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Basic Dev Toolbar App Structure with TypeScript",
    "codeDescription": "Basic structure for a dev toolbar app using the defineToolbarApp function from Astro's toolbar module.",
    "codeLanguage": "typescript",
    "codeTokens": 64,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/making-toolbar-apps.mdx#2025-04-08_snippet_5",
    "pageTitle": "Creating Dev Toolbar Apps in Astro",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineToolbarApp } from \"astro/toolbar\";\n\nexport default defineToolbarApp({\n    init(canvas, app, server) {\n      // ...\n    },\n});"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Using React Components in Astro",
    "codeDescription": "This example shows how to import and use a React component directly in an Astro file. It demonstrates the ability to mix Astro and React components in the same file.",
    "codeLanguage": "astro",
    "codeTokens": 100,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/migrate-to-astro/from-create-react-app.mdx#2025-04-08_snippet_1",
    "pageTitle": "Migrating from Create React App (CRA) to Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport MyReactComponent from '../components/MyReactComponent.jsx';\n---\n<html>\n  <body>\n    <h1>Use React components directly in Astro!</h1>\n    <MyReactComponent />\n  </body>\n</html>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Implementing addCartItem Function in TypeScript",
    "codeDescription": "This function adds an item to the cart or increments its quantity if it already exists, using TypeScript for type safety and Nanostores' setKey method to update the cart items.",
    "codeLanguage": "typescript",
    "codeTokens": 171,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/sharing-state-islands.mdx#2025-04-08_snippet_17",
    "pageTitle": "Sharing State Between Astro Islands with Nano Stores",
    "codeList": [
      {
        "language": "typescript",
        "code": "// src/cartStore.ts\n...\ntype ItemDisplayInfo = Pick<CartItem, 'id' | 'name' | 'imageSrc'>;\nexport function addCartItem({ id, name, imageSrc }: ItemDisplayInfo) {\n  const existingEntry = cartItems.get()[id];\n  if (existingEntry) {\n    cartItems.setKey(id, {\n      ...existingEntry,\n      quantity: existingEntry.quantity + 1,\n    });\n  } else {\n    cartItems.setKey(\n      id,\n      { id, name, imageSrc, quantity: 1 }\n    );\n  }\n}\n"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Using Dynamic Attributes in Astro Components",
    "codeDescription": "Shows how to use local variables to set attribute values for HTML elements and components in Astro. Demonstrates both direct variable insertion and template literal usage.",
    "codeLanguage": "astro",
    "codeTokens": 80,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/zh-cn/reference/astro-syntax.mdx#2025-04-08_snippet_1",
    "pageTitle": "Template Expression Reference in Astro Components",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst name = \"Astro\";\n---\n<h1 class={name}>支持属性表达式</h1>\n\n<MyComponent templateLiteralNameAttribute={`MyNameIs${name}`} />"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Setting Prepr API Endpoint in Environment Variable",
    "codeDescription": "Adds the Prepr API endpoint URL to the project's .env file for secure access.",
    "codeLanguage": "ini",
    "codeTokens": 40,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/preprcms.mdx#2025-04-08_snippet_0",
    "pageTitle": "Integrating Prepr CMS with Astro",
    "codeList": [
      {
        "language": "ini",
        "code": "PREPR_ENDPOINT=YOUR_PREPR_API_URL"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Optimized Image Component Basic Example",
    "codeDescription": "Shows importing and using the Image component for a local image with automatic width and height handling to prevent Cumulative Layout Shift. Includes example of both prerendered and on-demand rendered outputs.",
    "codeLanguage": "astro",
    "codeTokens": 113,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/images.mdx#2025-04-08_snippet_2",
    "pageTitle": "Using Images in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// import the Image component and the image\nimport { Image } from 'astro:assets';\nimport myImage from '../assets/my_image.png'; // Image is 1600x900\n---\n\n<!-- `alt` is mandatory on the Image component -->\n<Image src={myImage} alt=\"A description of my image.\" />"
      },
      {
        "language": "html",
        "code": "<!-- Prerendered output -->\n<!-- Image is optimized, proper attributes are enforced -->\n<img\n  src=\"/_astro/my_image.hash.webp\"\n  width=\"1600\"\n  height=\"900\"\n  decoding=\"async\"\n  loading=\"lazy\"\n  alt=\"A description of my image.\"\n/>\n\n<!-- Output rendered on demand-->\n<!-- src will use an endpoint generated on demand-->\n<img\n  src=\"/_image?href=%2F_astro%2Fmy_image.hash.webp&amp;w=1600&amp;h=900&amp;f=webp\"\n  <!-- ... -->\n/>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "CSS Import Order in Astro Components",
    "codeDescription": "This example demonstrates how the order of CSS imports affects style application when specificity is equal. The last imported style takes precedence.",
    "codeLanguage": "astro",
    "codeTokens": 46,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/styling.mdx#2025-04-08_snippet_11",
    "pageTitle": "Styling Components in Astro",
    "codeList": [
      {
        "language": "css",
        "code": "div > h1 {\n  color: purple;\n}"
      },
      {
        "language": "css",
        "code": "div > h1 {\n  color: green;\n}"
      },
      {
        "language": "astro",
        "code": "---\nimport \"./make-it-green.css\"\nimport \"./make-it-purple.css\"\n---\n<style>\n  h1 { color: red }\n</style>\n<div>\n  <h1>\n    This header will be purple!\n  </h1>\n</div>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Mixing Multiple Framework Components in Astro",
    "codeDescription": "This snippet shows how to import and render components from multiple frameworks in the same Astro component. This is only possible in Astro components.",
    "codeLanguage": "astro",
    "codeTokens": 107,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/framework-components.mdx#2025-04-08_snippet_2",
    "pageTitle": "Using Front-end Frameworks in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport MyReactComponent from '../components/MyReactComponent.jsx';\nimport MySvelteComponent from '../components/MySvelteComponent.svelte';\nimport MyVueComponent from '../components/MyVueComponent.vue';\n---\n<div>\n  <MySvelteComponent />\n  <MyReactComponent />\n  <MyVueComponent />\n</div>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Configuring Selective Prefetching in Astro",
    "codeDescription": "Demonstrates how to configure prefetching to only apply to links with the data-astro-prefetch attribute.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/prefetch.mdx#2025-04-08_snippet_8",
    "pageTitle": "Configuring Prefetching in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineConfig } from 'astro/config';\n\nexport default defineConfig({\n  // Keep prefetch, but only prefetch for links with `data-astro-prefetch`\n  prefetch: {\n    prefetchAll: false\n  }\n});"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Mixing Multiple Framework Components in Astro",
    "codeDescription": "This snippet shows how to import and render components from multiple frameworks in the same Astro component. This is only possible in Astro components.",
    "codeLanguage": "astro",
    "codeTokens": 107,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/framework-components.mdx#2025-04-08_snippet_2",
    "pageTitle": "Using Front-end Frameworks in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport MyReactComponent from '../components/MyReactComponent.jsx';\nimport MySvelteComponent from '../components/MySvelteComponent.svelte';\nimport MyVueComponent from '../components/MyVueComponent.vue';\n---\n<div>\n  <MySvelteComponent />\n  <MyReactComponent />\n  <MyVueComponent />\n</div>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Running Astro with Different Environment Modes using yarn",
    "codeDescription": "This shell command example shows how to run Astro development server or build with different environment modes using yarn, which allows loading different .env files.",
    "codeLanguage": "shell",
    "codeTokens": 106,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/environment-variables.mdx#2025-04-08_snippet_5",
    "pageTitle": "Using Environment Variables in Astro",
    "codeList": [
      {
        "language": "shell",
        "code": "# Run the dev server connected to a \"staging\" API\nyarn astro dev --mode staging\n\n# Build a site that connects to a \"production\" API with additional debug information\nyarn astro build --devOutput\n\n# Build a site that connects to a \"testing\" API\nyarn astro build --mode testing"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Displaying Blog Posts List in Astro Component",
    "codeDescription": "Astro component that fetches blog post data from Cosmic and renders a list of posts using a Card component. It demonstrates how to use the getAllPosts function and map over the results.",
    "codeLanguage": "astro",
    "codeTokens": 156,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/cosmic.mdx#2025-04-08_snippet_3",
    "pageTitle": "Integrating Cosmic CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Card from '../components/Card.astro'\nimport { getAllPosts } from '../lib/cosmic'\n\nconst data = await getAllPosts()\n---\n\n<section>\n  <ul class=\"grid gap-8 md:grid-cols-2\">\n    {\n      data.map((post) => (\n        <Card\n          title={post.title}\n          href={post.slug}\n          body={post.metadata.excerpt}\n          tags={post.metadata.tags.map((tag) => tag)}\n        />\n      ))\n    }\n  </ul>\n</section>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Multi-Parameter Dynamic Routes in Astro",
    "codeDescription": "Demonstrates using multiple dynamic parameters in route paths with getStaticPaths().",
    "codeLanguage": "astro",
    "codeTokens": 82,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/routing.mdx#2025-04-08_snippet_2",
    "pageTitle": "Astro Routing Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nexport function getStaticPaths() {\n  return [\n    { params: { lang: \"en\", version: \"v1\" }},\n    { params: { lang: \"fr\", version: \"v2\" }},\n  ];\n}\n\nconst { lang, version } = Astro.params;\n---"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Converting Tag Pages to Use Content Collections",
    "codeDescription": "Updates the dynamic tag page generation to use Content Collections. Fetches blog posts with getCollection(), accesses tag data from post.data instead of frontmatter, and constructs proper URLs for tag-filtered blog posts.",
    "codeLanguage": "astro",
    "codeTokens": 260,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/6-islands/4.mdx#2025-04-08_snippet_6",
    "pageTitle": "Configuring Content Collections in Astro Blog Tutorial",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { getCollection } from \"astro:content\";\nimport BaseLayout from \"../../layouts/BaseLayout.astro\";\nimport BlogPost from \"../../components/BlogPost.astro\";\n\nexport async function getStaticPaths() {\n  const allPosts = await getCollection(\"blog\");\n  const uniqueTags = [...new Set(allPosts.map((post) => post.data.tags).flat())];\n\n  return uniqueTags.map((tag) => {\n    const filteredPosts = allPosts.filter((post) =>\n      post.data.tags.includes(tag)\n    );\n    return {\n      params: { tag },\n      props: { posts: filteredPosts },\n    };\n  });\n}\n\nconst { tag } = Astro.params;\nconst { posts } = Astro.props;\n---\n\n<BaseLayout pageTitle={tag}>\n  <p>Posts tagged with {tag}</p>\n  <ul>\n    { posts.map((post) => <BlogPost url={`/posts/${post.id}/`} title={post.data.title} />) }\n  </ul>\n</BaseLayout>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Accessing Named Slots in Svelte Components",
    "codeDescription": "Example showing how named slots are accessed in Svelte components using the slot element with a name attribute. Slot names in kebab-case are preserved.",
    "codeLanguage": "jsx",
    "codeTokens": 90,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/fr/guides/framework-components.mdx#2025-04-08_snippet_7",
    "pageTitle": "Framework Front-End Integration in Astro",
    "codeList": [
      {
        "language": "jsx",
        "code": "// src/components/MySidebar.svelte\n<aside>\n  <header><slot name=\"title\" /></header>\n  <main><slot /></main>\n  <footer><slot name=\"social-links\" /></footer>\n</aside>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Implementing Multilingual Navigation Component in Astro",
    "codeDescription": "An Astro component that creates a navigation menu with links properly translated for different languages, using the translation utilities.",
    "codeLanguage": "astro",
    "codeTokens": 193,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/zh-cn/recipes/i18n.mdx#2025-04-08_snippet_2",
    "pageTitle": "Multilingual Routing and Default Language Configuration Guide for Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/components/Nav.astro\nimport { getLangFromUrl, useTranslations, useTranslatedPath } from '../i18n/utils';\n\nconst lang = getLangFromUrl(Astro.url);\nconst t = useTranslations(lang);\nconst translatePath = useTranslatedPath(lang);\n---\n<ul>\n    <li>\n        <a href={translatePath('/home/')}>\n          {t('nav.home')}\n        </a>\n    </li>\n    <li>\n        <a href={translatePath('/about/')}>\n          {t('nav.about')}\n        </a>\n    </li>\n    <li>\n        <a href=\"https://twitter.com/astrodotbuild\">\n          {t('nav.twitter')}\n        </a>\n    </li>\n</ul>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Implementing CartFlyout in Vue",
    "codeDescription": "Creates a component in Vue that conditionally renders a cart flyout based on the isCartOpen state. Uses the useStore hook to react to state changes in the nanostores atom.",
    "codeLanguage": "vue",
    "codeTokens": 127,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/de/recipes/sharing-state-islands.mdx#2025-04-08_snippet_10",
    "pageTitle": "Using Nanostores for State Management in UI Frameworks",
    "codeList": [
      {
        "language": "vue",
        "code": "<!--src/components/CartFlyout.vue-->\n<template>\n  <aside v-if=\"$isCartOpen\">...</aside>\n</template>\n\n<script setup>\n  import { isCartOpen } from '../cartStore';\n  import { useStore } from '@nanostores/vue';\n\n  const $isCartOpen = useStore(isCartOpen);\n</script>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Converting Gatsby JSX Component to Astro Component",
    "codeDescription": "Example of converting a Gatsby React component (.jsx) to an Astro component (.astro). Shows differences in syntax, data fetching, and component structure.",
    "codeLanguage": "jsx",
    "codeTokens": 193,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/migrate-to-astro/from-gatsby.mdx#2025-04-08_snippet_1",
    "pageTitle": "Migrating from Gatsby to Astro",
    "codeList": [
      {
        "language": "jsx",
        "code": "import * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Header from \"./header\"\nimport Footer from \"./footer\"\nimport \"./layout.css\"\n\nconst Component = ({ message, children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div style={{ margin: `0`, maxWidth: `960`}}>{message}</div>\n      <main>{children}</main>\n      <Footer siteTitle={data.site.siteMetadata} />\n    </>\n  )\n}\n\nexport default Component"
      },
      {
        "language": "astro",
        "code": "---\nimport Header from \"./Header.astro\"\nimport Footer from \"./Footer.astro\"\nimport \"../styles/stylesheet.css\"\nimport { site } from \"../data/siteMetaData.js\"\nconst { message } = Astro.props\n---\n<Header siteTitle={site.title} />\n  <div style=\"margin: 0; max-width: 960;\">{message}</div>\n  <main>\n    <slot />\n  </main>\n<Footer siteTitle={site.title} />"
      }
    ],
    "relevance": 0.929
  },
  {
    "codeTitle": "Creating a Home Page with Storyblok Content in Astro",
    "codeDescription": "This page fetches the 'home' content from Storyblok and renders it using the StoryblokComponent to display the page content from the CMS.",
    "codeLanguage": "astro",
    "codeTokens": 196,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/storyblok.mdx#2025-04-08_snippet_10",
    "pageTitle": "Integrating Storyblok CMS with Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { useStoryblokApi } from '@storyblok/astro'\nimport StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'\nimport BaseLayout from '../layouts/BaseLayout.astro'\n\nconst storyblokApi = useStoryblokApi();\nconst { data } = await storyblokApi.get('cdn/stories/home', {\n  version: import.meta.env.DEV ? \"draft\" : \"published\",\n});\nconst content = data.story.content;\n---\n<html lang=\"en\">\n  <head>\n    <title>Storyblok & Astro</title>\n  </head>\n  <body>\n    <StoryblokComponent blok={content} />\n  </body>\n</html>"
      }
    ],
    "relevance": 0.929
  },
  {
    "codeTitle": "Client-Side Form Submission with Action",
    "codeDescription": "This code adds a script to handle form submissions with JavaScript. It prevents the default form submission, collects form data, calls the newsletter action, and navigates to a confirmation page on success.",
    "codeLanguage": "astro",
    "codeTokens": 210,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#2025-04-08_snippet_14",
    "pageTitle": "Astro Actions: Type-safe Server Functions",
    "codeList": [
      {
        "language": "astro",
        "code": "<form>\n  <label for=\"email\">E-mail</label>\n  <input id=\"email\" required type=\"email\" name=\"email\" />\n  <label>\n    <input required type=\"checkbox\" name=\"terms\">\n    I agree to the terms of service\n  </label>\n  <button>Sign up</button>\n</form>\n\n<script>\n  import { actions } from 'astro:actions';\n  import { navigate } from 'astro:transitions/client';\n\n  const form = document.querySelector('form');\n  form?.addEventListener('submit', async (event) => {\n    event.preventDefault();\n    const formData = new FormData(form);\n    const { error } = await actions.newsletter(formData);\n    if (!error) navigate('/confirmation');\n  })\n</script>"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Adding Fallback Content to Server Islands",
    "codeDescription": "How to provide placeholder content for a server island while it's loading. The fallback content is rendered immediately with the page and replaced once the server island content is available.",
    "codeLanguage": "astro",
    "codeTokens": 85,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/server-islands.mdx#2025-04-08_snippet_2",
    "pageTitle": "Server Islands in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport Avatar from '../components/Avatar.astro';\nimport GenericAvatar from '../components/GenericAvatar.astro';\n---\n<Avatar server:defer>\n  <GenericAvatar slot=\"fallback\" />\n</Avatar>"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Script Processing in Astro Components",
    "codeDescription": "Demonstrates the different behaviors of <script> tags in Astro components. Regular scripts are rendered as-is, while scripts with the 'hoist' attribute are processed and bundled by Astro.",
    "codeLanguage": "astro",
    "codeTokens": 111,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/upgrade-to/v1.mdx#2025-04-08_snippet_14",
    "pageTitle": "Legacy Astro v0.x Upgrade Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "<script>\n  // Will be rendered into the HTML exactly as written!\n  // ESM imports will not be resolved relative to the file.\n</script>\n<script type=\"module\" hoist>\n  // Processed! Bundled! ESM imports work, even to npm packages.\n</script>"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Creating a Custom Link Component in Astro",
    "codeDescription": "This example demonstrates how to create a custom Link component in Astro that can be used similarly to Gatsby's Link component.",
    "codeLanguage": "astro",
    "codeTokens": 57,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/migrate-to-astro/from-gatsby.mdx#2025-04-08_snippet_4",
    "pageTitle": "Migrating from Gatsby to Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nconst { to } = Astro.props\n---\n<a href={to}><slot /></a>"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Implementing Blog Index Page with Builder.io API",
    "codeDescription": "Creates an index page that fetches and displays blog posts from Builder.io using their Content API",
    "codeLanguage": "astro",
    "codeTokens": 229,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/builderio.mdx#2025-04-08_snippet_3",
    "pageTitle": "Building a Blog with Builder.io and Astro Integration Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n\nconst builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;\nconst builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;\n\nconst { results: posts } = await fetch(\n  `https://cdn.builder.io/api/v3/content/${builderModel}?${new URLSearchParams({\n    apiKey: builderAPIpublicKey,\n    fields: [\"data.slug\", \"data.title\"].join(\",\"),\n    cachebust: \"true\",\n  }).toString()}`\n)\n  .then((res) => res.json())\n  .catch();\n---\n\n<html lang=\"en\">\n  <head>\n    <title>Blog Index</title>\n  </head>\n  <body>\n    <ul>\n      {\n        posts.flatMap(({ data: { slug, title } }) => (\n          <li>\n            <a href={`/posts/${slug}`}>{title}</a>\n          </li>\n        ))\n      }\n    </ul>\n  </body>\n</html>"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Implementing a Navigation Component with Translated Paths in Astro",
    "codeDescription": "A navigation component that uses the translation utilities to create links that properly consider the current language. It demonstrates how to generate language-aware navigation links.",
    "codeLanguage": "astro",
    "codeTokens": 197,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/i18n.mdx#2025-04-08_snippet_10",
    "pageTitle": "Internationalization Implementation Guide for Astro Sites",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/components/Nav.astro\nimport { getLangFromUrl, useTranslations, useTranslatedPath } from '../i18n/utils';\n\nconst lang = getLangFromUrl(Astro.url);\nconst t = useTranslations(lang);\nconst translatePath = useTranslatedPath(lang);\n---\n<ul>\n    <li>\n        <a href={translatePath('/home/')}>\n          {t('nav.home')}\n        </a>\n    </li>\n    <li>\n        <a href={translatePath('/about/')}>\n          {t('nav.about')}\n        </a>\n    </li>\n    <li>\n        <a href=\"https://twitter.com/astrodotbuild\">\n          {t('nav.twitter')}\n        </a>\n    </li>\n</ul>"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Implementing a Shopping Cart Flyout with LitElement and Nanostores",
    "codeDescription": "Creates a CartFlyoutLit web component that displays a cart flyout using Nanostores for state management. The component subscribes to isCartOpen and cartItems stores using StoreController and conditionally renders the cart contents based on the stores' values.",
    "codeLanguage": "JavaScript",
    "codeTokens": 305,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/ja/recipes/sharing-state-islands.mdx#2025-04-08_snippet_8",
    "pageTitle": "Sharing State Between Islands in Astro",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { isCartOpen, cartItems } from '../cartStore';\nimport { StoreController } from '@nanostores/lit';\n\nexport class CartFlyoutLit extends LitElement {\n  private cartOpen = new StoreController(this, isCartOpen);\n  private getCartItems = new StoreController(this, cartItems);\n\n  renderCartItem(cartItem) {\n    return html`\n      <li>\n        <img src=\"${cartItem.imageSrc}\" alt=\"${cartItem.name}\" />\n        <h3>${cartItem.name}</h3>\n        <p>Quantity: ${cartItem.quantity}</p>\n      </li>\n    `;\n  }\n\n  render() {\n    return this.cartOpen.value\n      ? html`\n          <aside>\n            ${\n              Object.values(this.getCartItems.value).length\n                ? html`\n                  <ul>\n                    ${Object.values(this.getCartItems.value).map((cartItem) =>\n                      this.renderCartItem(cartItem)\n                    )}\n                  </ul>\n                `\n                : html`<p>Your cart is empty!</p>`\n            }\n          </aside>\n        `\n      : null;\n  }\n}\n\ncustomElements.define('cart-flyout', CartFlyoutLit);"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Nesting Framework Components in Astro",
    "codeDescription": "Demonstrates how to nest hydrated framework components (React and Svelte) within another framework component in an Astro file.",
    "codeLanguage": "astro",
    "codeTokens": 166,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/pt-br/guides/framework-components.mdx#2025-04-08_snippet_8",
    "pageTitle": "Using Framework Components in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport MinhaBarraLateralReact from '../components/MinhaBarraLateralReact.jsx';\nimport MeuBotaoReact from '../components/MeuBotaoReact.jsx';\nimport MeuBotaoSvelte from '../components/MeuBotaoSvelte.svelte';\n---\n\n<MinhaBarraLateralReact>\n  <p>Aqui está uma barra lateral com algum texto e um botão.</p>\n  <div slot=\"acoes\">\n    <MeuBotaoReact client:idle />\n    <MeuBotaoSvelte client:idle />\n  </div>\n</MinhaBarraLateralReact>"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Picture Component Output HTML",
    "codeDescription": "Demonstrates the generated HTML output for a Picture component with multiple image format sources.",
    "codeLanguage": "html",
    "codeTokens": 124,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-assets.mdx#2025-04-08_snippet_4",
    "pageTitle": "Astro Assets API Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- Output -->\n<picture>\n  <source srcset=\"/_astro/my_image.hash.avif\" type=\"image/avif\" />\n  <source srcset=\"/_astro/my_image.hash.webp\" type=\"image/webp\" />\n  <img\n    src=\"/_astro/my_image.hash.png\"\n    width=\"1600\"\n    height=\"900\"\n    decoding=\"async\"\n    loading=\"lazy\"\n    alt=\"A description of my image.\"\n  />\n</picture>"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Implementing Blog Index Page with Builder.io API",
    "codeDescription": "Creates an index page that fetches and displays blog posts from Builder.io using their Content API",
    "codeLanguage": "astro",
    "codeTokens": 229,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/builderio.mdx#2025-04-08_snippet_3",
    "pageTitle": "Building a Blog with Builder.io and Astro Integration Guide",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n\nconst builderAPIpublicKey = import.meta.env.BUILDER_API_PUBLIC_KEY;\nconst builderModel = import.meta.env.BUILDER_BLOGPOST_MODEL;\n\nconst { results: posts } = await fetch(\n  `https://cdn.builder.io/api/v3/content/${builderModel}?${new URLSearchParams({\n    apiKey: builderAPIpublicKey,\n    fields: [\"data.slug\", \"data.title\"].join(\",\"),\n    cachebust: \"true\",\n  }).toString()}`\n)\n  .then((res) => res.json())\n  .catch();\n---\n\n<html lang=\"en\">\n  <head>\n    <title>Blog Index</title>\n  </head>\n  <body>\n    <ul>\n      {\n        posts.flatMap(({ data: { slug, title } }) => (\n          <li>\n            <a href={`/posts/${slug}`}>{title}</a>\n          </li>\n        ))\n      }\n    </ul>\n  </body>\n</html>"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Creating Basic RSS Feed Configuration",
    "codeDescription": "A basic setup for creating an RSS feed using the @astrojs/rss package. It includes setting the title, description, site URL, and items array.",
    "codeLanguage": "javascript",
    "codeTokens": 196,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/rss.mdx#2025-04-08_snippet_1",
    "pageTitle": "Generating RSS Feeds in Astro",
    "codeList": [
      {
        "language": "javascript",
        "code": "import rss from '@astrojs/rss';\n\nexport function GET(context) {\n  return rss({\n    // `<title>` field in output xml\n    title: 'Buzz's Blog',\n    // `<description>` field in output xml\n    description: 'A humble Astronaut's guide to the stars',\n    // Pull in your project \"site\" from the endpoint context\n    // https://docs.astro.build/en/reference/api-reference/#site\n    site: context.site,\n    // Array of `<item>`s in output xml\n    // See \"Generating items\" section for examples using content collections and glob imports\n    items: [],\n    // (optional) inject custom xml\n    customData: `<language>en-us</language>`,\n  });\n}"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Implementing Pagination in Astro",
    "codeDescription": "Demonstrates how to use the paginate() function to generate paginated routes for an array of astronaut data. It shows how to access and display pagination information using the page object.",
    "codeLanguage": "astro",
    "codeTokens": 240,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/zh-cn/guides/routing.mdx#2025-04-08_snippet_0",
    "pageTitle": "Astro Routing and Pagination Documentation",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// src/pages/astronauts/[page].astro\nexport function getStaticPaths({ paginate }) {\n  const astronautPages = [\n    { astronaut: \"Neil Armstrong\" },\n    { astronaut: \"Buzz Aldrin\" },\n    { astronaut: \"Sally Ride\" },\n    { astronaut: \"John Glenn\" },\n  ];\n  \n  // 根据宇航员数组生成页面，每页2项\n  return paginate(astronautPages, { pageSize: 2 });\n}\n// 所有分页数据都在 \"page\" 参数中传递\nconst { page } = Astro.props;\n---\n<!-- 显示当前页面。也可以使用 `Astro.params.page`！-->\n<h1>Page {page.currentPage}</h1>\n<ul>\n  <!-- 列出宇航员信息数组 -->\n  {page.data.map(({ astronaut }) => <li>{astronaut}</li>)}\n</ul>"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Rendering Astro Components Imported with Astro.glob()",
    "codeDescription": "Demonstrates how to import and render multiple Astro components using Astro.glob(). Imported components are of type AstroInstance and can be rendered using their default property.",
    "codeLanguage": "astro",
    "codeTokens": 109,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/es/guides/imports.mdx#2025-04-08_snippet_1",
    "pageTitle": "Importing Files in Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\n// importa todos los archivos que terminan en `.astro` en `./src/components/`\nconst components = await Astro.glob('../components/*.astro');\n---\n<!-- Muestra todos tus componentes -->\n{components.map((component) => (\n  <div>\n    <component.default size={24} />\n  </div>\n))}"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Retrieving Multiple Referenced Entries with getEntries",
    "codeDescription": "Demonstrates how to use the getEntries function to fetch multiple referenced entries at once, enabling access to full data from referenced content items.",
    "codeLanguage": "astro",
    "codeTokens": 94,
    "codeId": "https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-content.mdx#2025-04-08_snippet_5",
    "pageTitle": "Content Collections API Reference for Astro",
    "codeList": [
      {
        "language": "astro",
        "code": "---\nimport { getEntries, getEntry } from 'astro:content';\n\nconst enterprisePost = await getEntry('blog', 'enterprise');\n\n// Get related posts referenced by `data.relatedPosts`\nconst enterpriseRelatedPosts = await getEntries(enterprisePost.data.relatedPosts);\n---"
      }
    ],
    "relevance": 0.928
  }
]