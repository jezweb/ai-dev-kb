[
  {
    "codeTitle": "Protecting Routes with Auth Middleware in Laravel",
    "codeDescription": "This snippet shows how to use Laravel's auth middleware to protect routes so that only authenticated users can access them, which is a fundamental aspect of securing a web application.",
    "codeLanguage": "php",
    "codeTokens": 74,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/flights', function () {\n    // Only authenticated users may access this route...\n})->middleware('auth');"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Direct User Authentication Methods in Laravel",
    "codeDescription": "Various methods for directly authenticating users including login with user instance, login by ID, and single request authentication.",
    "codeLanguage": "php",
    "codeTokens": 103,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_10",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Auth;\n\nAuth::login($user);\nAuth::login($user, $remember = true);\nAuth::guard('admin')->login($user);\nAuth::loginUsingId(1);\nAuth::loginUsingId(1, remember: true);\n\nif (Auth::once($credentials)) {\n    // ...\n}"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Creating Custom Blade Directives in Laravel",
    "codeDescription": "Shows how to extend Blade by creating custom directives using the directive method in a service provider.",
    "codeLanguage": "php",
    "codeTokens": 145,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_62",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Blade;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        // ...\n    }\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Blade::directive('datetime', function (string $expression) {\n            return \"<?php echo ($expression)->format('m/d/Y H:i'); ?>\";\n        });\n    }\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Monitoring Database Connections with Laravel CLI",
    "codeDescription": "The db:monitor command monitors database connections and triggers events when connection counts exceed specified thresholds. It can monitor multiple databases simultaneously.",
    "codeLanguage": "shell",
    "codeTokens": 56,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_22",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan db:monitor --databases=mysql,pgsql --max=100"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Retrieving Models in Laravel Eloquent",
    "codeDescription": "Demonstrates basic model retrieval operations including retrieving all records and building queries with constraints.",
    "codeLanguage": "php",
    "codeTokens": 89,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_15",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Flight;\n\nforeach (Flight::all() as $flight) {\n    echo $flight->name;\n}\n\n$flights = Flight::where('active', 1)\n    ->orderBy('name')\n    ->take(10)\n    ->get();"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Checking Authentication Status with Auth Facade in Laravel",
    "codeDescription": "This code demonstrates how to determine if the current user is authenticated using the check method on Laravel's Auth facade, which returns a boolean value.",
    "codeLanguage": "php",
    "codeTokens": 65,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Auth;\n\nif (Auth::check()) {\n    // The user is logged in...\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Using Database Transactions in Laravel",
    "codeDescription": "Shows how to use the transaction method of the DB facade to run a set of operations within a database transaction.",
    "codeLanguage": "php",
    "codeTokens": 73,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_16",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\DB;\n\nDB::transaction(function () {\n    DB::update('update users set votes = 1');\n\n    DB::delete('delete from posts');\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Retrieving All Input Data in Laravel",
    "codeDescription": "Methods to retrieve all input data from a Laravel HTTP request as either an array or collection.",
    "codeLanguage": "php",
    "codeTokens": 43,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_4",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$input = $request->all();"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Hashing Passwords in Laravel Controller",
    "codeDescription": "Example of hashing a password in a Laravel controller using the Hash facade's make method.",
    "codeLanguage": "php",
    "codeTokens": 135,
    "codeId": "https://github.com/laravel/docs/blob/12.x/hashing.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Hashing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\n\nclass PasswordController extends Controller\n{\n    /**\n     * Update the password for the user.\n     */\n    public function update(Request $request): RedirectResponse\n    {\n        // Validate the new password length...\n\n        $request->user()->fill([\n            'password' => Hash::make($request->newPassword)\n        ])->save();\n\n        return redirect('/profile');\n    }\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Using updateOrCreate for Conditional Record Creation",
    "codeDescription": "Example of using updateOrCreate to either update an existing record or create a new one based on conditions.",
    "codeLanguage": "php",
    "codeTokens": 81,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_29",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$flight = Flight::updateOrCreate(\n    ['departure' => 'Oakland', 'destination' => 'San Diego'],\n    ['price' => 99, 'discounted' => 1]\n);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Basic Authentication Controller Implementation in Laravel",
    "codeDescription": "Implementation of a LoginController that handles authentication attempts using Laravel's Auth facade. Validates credentials, manages session regeneration, and handles redirect responses.",
    "codeLanguage": "php",
    "codeTokens": 189,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_7",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass LoginController extends Controller\n{\n    /**\n     * Handle an authentication attempt.\n     */\n    public function authenticate(Request $request): RedirectResponse\n    {\n        $credentials = $request->validate([\n            'email' => ['required', 'email'],\n            'password' => ['required'],\n        ]);\n\n        if (Auth::attempt($credentials)) {\n            $request->session()->regenerate();\n\n            return redirect()->intended('dashboard');\n        }\n\n        return back()->withErrors([\n            'email' => 'The provided credentials do not match our records.',\n        ])->onlyInput('email');\n    }\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Squashing Migrations with Schema Dump",
    "codeDescription": "Commands to condense multiple migrations into a single SQL schema file, reducing migration file bloat. The second example also removes existing migrations after creating the schema file.",
    "codeLanguage": "shell",
    "codeTokens": 75,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan schema:dump\n\n# Dump the current database schema and prune all existing migrations...\nphp artisan schema:dump --prune"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Basic Migration Structure in Laravel",
    "codeDescription": "Example of a migration class that creates a flights table with ID, name, airline, and timestamp columns. Includes both up() method to create the table and down() method to reverse the operation.",
    "codeLanguage": "php",
    "codeTokens": 181,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('flights', function (Blueprint $table) {\n            $table->id();\n            $table->string('name');\n            $table->string('airline');\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::drop('flights');\n    }\n};"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Configuring Basic Laravel Routing in Bootstrap File",
    "codeDescription": "Default Laravel routing configuration in the bootstrap/app.php file that sets up web routes, console commands, and health check endpoint.",
    "codeLanguage": "php",
    "codeTokens": 95,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_8",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nuse Illuminate\\Foundation\\Application;\n\nreturn Application::configure(basePath: dirname(__DIR__))\n    ->withRouting(\n        web: __DIR__.'/../routes/web.php',\n        commands: __DIR__.'/../routes/console.php',\n        health: '/up',\n    )->create();"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Specifying Authentication Guard for Route Protection in Laravel",
    "codeDescription": "This code shows how to specify which authentication guard should be used when protecting a route with the auth middleware, allowing for multiple authentication systems within one application.",
    "codeLanguage": "php",
    "codeTokens": 73,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/flights', function () {\n    // Only authenticated users may access this route...\n})->middleware('auth:admin');"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Additional Authentication Conditions in Laravel",
    "codeDescription": "Examples of adding extra query conditions to authentication attempts using the Auth::attempt method, including checking for active status and complex query conditions.",
    "codeLanguage": "php",
    "codeTokens": 75,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_8",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "if (Auth::attempt(['email' => $email, 'password' => $password, 'active' => 1])) {\n    // Authentication was successful...\n}"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Database\\Eloquent\\Builder;\n\nif (Auth::attempt([\n    'email' => $email,\n    'password' => $password,\n    fn (Builder $query) => $query->has('activeSubscription'),\n])) {\n    // Authentication was successful...\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Creating Route Groups with Shared Middleware",
    "codeDescription": "Shows how to assign middleware to all routes within a group, where middleware are executed in the order they are listed.",
    "codeLanguage": "php",
    "codeTokens": 91,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_26",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::middleware(['first', 'second'])->group(function () {\n    Route::get('/', function () {\n        // Uses first & second middleware...\n    });\n\n    Route::get('/user/profile', function () {\n        // Uses first & second middleware...\n    });\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Laravel CSRF Form Protection",
    "codeDescription": "Shows how to include CSRF token field in HTML forms for routes defined in web routes file.",
    "codeLanguage": "blade",
    "codeTokens": 52,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<form method=\"POST\" action=\"/profile\">\n    @csrf\n    ...\n</form>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Accessing Laravel Configuration Values using Config Facade",
    "codeDescription": "Demonstrates different methods to access configuration values using the Config facade and config helper function. Shows how to retrieve values with dot notation and specify default values.",
    "codeLanguage": "php",
    "codeTokens": 93,
    "codeId": "https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-18_snippet_15",
    "pageTitle": "Laravel Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Config;\n\n$value = Config::get('app.timezone');\n\n$value = config('app.timezone');\n\n// Retrieve a default value if the configuration value does not exist...\n$value = config('app.timezone', 'Asia/Seoul');"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Creating a New Laravel Application",
    "codeDescription": "This command creates a new Laravel application using the Laravel installer, which will prompt for testing framework, database, and starter kit preferences.",
    "codeLanguage": "shell",
    "codeTokens": 46,
    "codeId": "https://github.com/laravel/docs/blob/12.x/installation.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Installation Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "laravel new example-app"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Basic Eloquent Model Structure in Laravel",
    "codeDescription": "Example of a basic Eloquent model class structure extending the base Model class.",
    "codeLanguage": "php",
    "codeTokens": 57,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_2",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    // ...\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Creating Database Tables in Laravel",
    "codeDescription": "Shows how to create a new database table using the Schema facade in Laravel, including defining columns and table properties.",
    "codeLanguage": "php",
    "codeTokens": 93,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_14",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nSchema::create('users', function (Blueprint $table) {\n    $table->id();\n    $table->string('name');\n    $table->string('email');\n    $table->timestamps();\n});"
      },
      {
        "language": "php",
        "code": "Schema::connection('sqlite')->create('users', function (Blueprint $table) {\n    $table->id();\n});"
      },
      {
        "language": "php",
        "code": "Schema::create('users', function (Blueprint $table) {\n    $table->engine('InnoDB');\n\n    // ...\n});"
      },
      {
        "language": "php",
        "code": "Schema::create('users', function (Blueprint $table) {\n    $table->charset('utf8mb4');\n    $table->collation('utf8mb4_unicode_ci');\n\n    // ...\n});"
      },
      {
        "language": "php",
        "code": "Schema::create('calculations', function (Blueprint $table) {\n    $table->temporary();\n\n    // ...\n});"
      },
      {
        "language": "php",
        "code": "Schema::create('calculations', function (Blueprint $table) {\n    $table->comment('Business calculations');\n\n    // ...\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Chunking Large Eloquent Result Sets",
    "codeDescription": "Demonstrates how to process large sets of Eloquent models using the chunk method to reduce memory usage.",
    "codeLanguage": "php",
    "codeTokens": 81,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_19",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Flight;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\nFlight::chunk(200, function (Collection $flights) {\n    foreach ($flights as $flight) {\n        // ...\n    }\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Implementing Dependency Injection in Laravel Controller",
    "codeDescription": "Shows how to use dependency injection in a Laravel controller by injecting an AppleMusic service through the constructor and using it to find podcasts.",
    "codeLanguage": "php",
    "codeTokens": 153,
    "codeId": "https://github.com/laravel/docs/blob/12.x/container.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Service Container Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Services\\AppleMusic;\nuse Illuminate\\View\\View;\n\nclass PodcastController extends Controller\n{\n    /**\n     * Create a new controller instance.\n     */\n    public function __construct(\n        protected AppleMusic $apple,\n    ) {}\n\n    /**\n     * Show information about the given podcast.\n     */\n    public function show(string $id): View\n    {\n        return view('podcasts.show', [\n            'podcast' => $this->apple->findPodcast($id)\n        ]);\n    }\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Accessing HTTP Request in Laravel Controller",
    "codeDescription": "Demonstrates how to inject and use the Illuminate\\Http\\Request object in a Laravel controller method to access request data.",
    "codeLanguage": "php",
    "codeTokens": 114,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_0",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass UserController extends Controller\n{\n    /**\n     * Store a new user.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        $name = $request->input('name');\n\n        // Store the user...\n\n        return redirect('/users');\n    }\n}"
      }
    ],
    "relevance": 0.983
  },
  {
    "codeTitle": "Defining Optional Route Parameters in Laravel",
    "codeDescription": "Examples of defining optional route parameters by adding a question mark after the parameter name and providing default values.",
    "codeLanguage": "php",
    "codeTokens": 84,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_14",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/user/{name?}', function (?string $name = null) {\n    return $name;\n});\n\nRoute::get('/user/{name?}', function (?string $name = 'John') {\n    return $name;\n});"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Creating Models with Mass Assignment in Laravel Eloquent",
    "codeDescription": "Creates a new Flight model using the create method to perform mass assignment. This method requires proper configuration of the model's fillable or guarded properties.",
    "codeLanguage": "php",
    "codeTokens": 72,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_32",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Flight;\n\n$flight = Flight::create([\n    'name' => 'London to Paris',\n]);"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Zero Configuration Resolution Example",
    "codeDescription": "Demonstrates Laravel's automatic dependency resolution without configuration using a simple Service class injection in a route.",
    "codeLanguage": "php",
    "codeTokens": 65,
    "codeId": "https://github.com/laravel/docs/blob/12.x/container.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Service Container Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nclass Service\n{\n    // ...\n}\n\nRoute::get('/', function (Service $service) {\n    dd($service::class);\n});"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Accessing Route Parameters in Laravel Controller",
    "codeDescription": "Demonstrates how to access both the Request object and route parameters in a Laravel controller method.",
    "codeLanguage": "php",
    "codeTokens": 103,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_3",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass UserController extends Controller\n{\n    /**\n     * Update the specified user.\n     */\n    public function update(Request $request, string $id): RedirectResponse\n    {\n        // Update the user...\n\n        return redirect('/users');\n    }\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Verifying Password Hash in Laravel",
    "codeDescription": "Example of verifying if a plain-text password matches a hashed password using the Hash facade.",
    "codeLanguage": "php",
    "codeTokens": 54,
    "codeId": "https://github.com/laravel/docs/blob/12.x/hashing.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Hashing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "if (Hash::check('plain-text', $hashedPassword)) {\n    // The passwords match...\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Updating Existing Model Records",
    "codeDescription": "Examples of updating existing models using find and save methods, and mass updates using where clauses.",
    "codeLanguage": "php",
    "codeTokens": 67,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_28",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Flight;\n\n$flight = Flight::find(1);\n\n$flight->name = 'Paris to London';\n\n$flight->save();"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Basic Service Provider Implementation in Laravel",
    "codeDescription": "This code snippet shows a basic implementation of a service provider class that registers a singleton binding for a Riak connection in the service container.",
    "codeLanguage": "PHP",
    "codeTokens": 132,
    "codeId": "https://github.com/laravel/docs/blob/12.x/providers.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Service Providers Documentation",
    "codeList": [
      {
        "language": "PHP",
        "code": "<?php\n\nnamespace App\\Providers;\n\nuse App\\Services\\Riak\\Connection;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass RiakServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        $this->app->singleton(Connection::class, function (Application $app) {\n            return new Connection(config('riak'));\n        });\n    }\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Forcing Migrations in Production",
    "codeDescription": "Command to run migrations in production environment without confirmation prompts. The --force flag bypasses safeguards against destructive operations.",
    "codeLanguage": "shell",
    "codeTokens": 44,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_10",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan migrate --force"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Logging with Context in Laravel",
    "codeDescription": "Example of writing log entries with context information that includes authentication ID",
    "codeLanguage": "php",
    "codeTokens": 45,
    "codeId": "https://github.com/laravel/docs/blob/12.x/context.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Context System Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Log::info('User authenticated.', ['auth_id' => Auth::id()]);"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Using Gate::authorize with Additional Context Parameters",
    "codeDescription": "Example of how to invoke a policy method with additional context parameters using the Gate facade in a controller method.",
    "codeLanguage": "php",
    "codeTokens": 106,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_29",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * Update the given blog post.\n *\n * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n */\npublic function update(Request $request, Post $post): RedirectResponse\n{\n    Gate::authorize('update', [$post, $request->category]);\n\n    // The current user can update the blog post...\n\n    return redirect('/posts');\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Defining Basic Rate Limiters in Laravel",
    "codeDescription": "This code shows how to define a rate limiter in the AppServiceProvider's boot method using the RateLimiter facade. It limits API requests to 60 per minute per user ID or IP address.",
    "codeLanguage": "php",
    "codeTokens": 136,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_37",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Cache\\RateLimiting\\Limit;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\RateLimiter;\n\n/**\n * Bootstrap any application services.\n */\nprotected function boot(): void\n{\n    RateLimiter::for('api', function (Request $request) {\n        return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());\n    });\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Retrieving All Query String Values in Laravel",
    "codeDescription": "Calling the query() method without arguments to retrieve all query string values as an associative array.",
    "codeLanguage": "php",
    "codeTokens": 43,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_13",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$query = $request->query();"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Basic Laravel Facade Usage for Cache and Route",
    "codeDescription": "Demonstrates how to use Laravel facades by importing them from the Illuminate\\Support\\Facades namespace and using them with static method syntax to access Route and Cache functionality.",
    "codeLanguage": "php",
    "codeTokens": 76,
    "codeId": "https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Facades",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Cache;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/cache', function () {\n    return Cache::get('key');\n});"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Generating URLs to Named Routes",
    "codeDescription": "Examples of generating URLs and redirects using named routes with the route() and redirect() helper functions.",
    "codeLanguage": "php",
    "codeTokens": 62,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_22",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "// Generating URLs...\n$url = route('profile');\n\n// Generating Redirects...\nreturn redirect()->route('profile');\n\nreturn to_route('profile');"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Generating a New Migration with Artisan",
    "codeDescription": "Creates a new database migration file using Laravel's Artisan command-line tool. This command generates a timestamped migration file in the database/migrations directory.",
    "codeLanguage": "shell",
    "codeTokens": 56,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan make:migration create_flights_table"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Executing General SQL Statement in Laravel",
    "codeDescription": "Shows how to use the statement method of the DB facade to execute a general SQL statement that doesn't return a value.",
    "codeLanguage": "php",
    "codeTokens": 48,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_10",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "DB::statement('drop table users');"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Using Shorthand Foreign Key Syntax in Laravel Migrations",
    "codeDescription": "Shows Laravel's terser syntax for creating foreign key constraints using the foreignId and constrained methods, which leverage conventions to provide a better developer experience.",
    "codeLanguage": "php",
    "codeTokens": 73,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_54",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "Schema::table('posts', function (Blueprint $table) {\n    $table->foreignId('user_id')->constrained();\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Pre-processing Middleware in Laravel",
    "codeDescription": "Example of middleware that performs actions before the request is handled by the application. This pattern is useful for request validation, authentication, or modifying the request.",
    "codeLanguage": "php",
    "codeTokens": 103,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass BeforeMiddleware\n{\n    public function handle(Request $request, Closure $next): Response\n    {\n        // Perform action\n\n        return $next($request);\n    }\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Inline Authorization in Laravel",
    "codeDescription": "Demonstrates using inline authorization checks with Gate::allowIf and Gate::denyIf methods for quick authorization without dedicated gates.",
    "codeLanguage": "php",
    "codeTokens": 85,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_13",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Gate;\n\nGate::allowIf(fn (User $user) => $user->isAdministrator());\n\nGate::denyIf(fn (User $user) => $user->banned());"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Automatic Dependency Injection in Laravel Controllers",
    "codeDescription": "Example of automatic dependency injection in a controller constructor and method.",
    "codeLanguage": "php",
    "codeTokens": 119,
    "codeId": "https://github.com/laravel/docs/blob/12.x/container.md#2025-04-18_snippet_15",
    "pageTitle": "Laravel Service Container Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Services\\AppleMusic;\n\nclass PodcastController extends Controller\n{\n    /**\n     * Create a new controller instance.\n     */\n    public function __construct(\n        protected AppleMusic $apple,\n    ) {}\n\n    /**\n     * Show information about the given podcast.\n     */\n    public function show(string $id): Podcast\n    {\n        return $this->apple->findPodcast($id);\n    }\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Handling Deadlocks in Laravel Database Transactions",
    "codeDescription": "Demonstrates how to specify the number of retry attempts for a transaction in case of deadlocks.",
    "codeLanguage": "php",
    "codeTokens": 73,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_17",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\DB;\n\nDB::transaction(function () {\n    DB::update('update users set votes = 1');\n\n    DB::delete('delete from posts');\n}, 5);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Executing Update Statement in Laravel Database",
    "codeDescription": "Shows how to use the update method of the DB facade to execute an update statement and get the number of affected rows.",
    "codeLanguage": "php",
    "codeTokens": 73,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_8",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\DB;\n\n$affected = DB::update(\n    'update users set votes = 100 where name = ?',\n    ['Anita']\n);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Retrieving Nested Array Values with Arr::get() in PHP",
    "codeDescription": "The Arr::get method retrieves a value from a deeply nested array using \"dot\" notation. It accepts an array, a key in dot notation, and an optional default value.",
    "codeLanguage": "php",
    "codeTokens": 94,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_11",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Arr;\n\n$array = ['products' => ['desk' => ['price' => 100]]];\n\n$price = Arr::get($array, 'products.desk.price');\n\n// 100"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Arr;\n\n$discount = Arr::get($array, 'products.desk.discount', 0);\n\n// 0"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Storing Uploaded Files with Custom Names in Laravel",
    "codeDescription": "Store uploaded files with custom filenames using the storeAs method. This allows specifying the exact path, filename, and storage disk to use.",
    "codeLanguage": "php",
    "codeTokens": 81,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_53",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$path = $request->photo->storeAs('images', 'filename.jpg');\n\n$path = $request->photo->storeAs('images', 'filename.jpg', 's3');"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Basic Rate Limiting Usage in Laravel",
    "codeDescription": "This code demonstrates the basic usage of rate limiting in Laravel using the RateLimiter facade. It shows how to limit a callback function to a certain number of attempts within a time window.",
    "codeLanguage": "php",
    "codeTokens": 118,
    "codeId": "https://github.com/laravel/docs/blob/12.x/rate-limiting.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Rate Limiting Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\RateLimiter;\n\n$executed = RateLimiter::attempt(\n    'send-message:'.$user->id,\n    $perMinute = 5,\n    function() {\n        // Send message...\n    }\n);\n\nif (! $executed) {\n  return 'Too many messages sent!';\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Laravel View Route Definitions",
    "codeDescription": "Shows how to define routes that directly return views with optional data passing.",
    "codeLanguage": "php",
    "codeTokens": 54,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_7",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::view('/welcome', 'welcome');\n\nRoute::view('/welcome', 'welcome', ['name' => 'Taylor']);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Configuring MySQL Read/Write Connections in Laravel",
    "codeDescription": "Demonstrates how to set up separate read and write database connections for MySQL in Laravel's database configuration file.",
    "codeLanguage": "php",
    "codeTokens": 260,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_1",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "'mysql' => [\n    'read' => [\n        'host' => [\n            '192.168.1.1',\n            '196.168.1.2',\n        ],\n    ],\n    'write' => [\n        'host' => [\n            '196.168.1.3',\n        ],\n    ],\n    'sticky' => true,\n\n    'database' => env('DB_DATABASE', 'laravel'),\n    'username' => env('DB_USERNAME', 'root'),\n    'password' => env('DB_PASSWORD', ''),\n    'unix_socket' => env('DB_SOCKET', ''),\n    'charset' => env('DB_CHARSET', 'utf8mb4'),\n    'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),\n    'prefix' => '',\n    'prefix_indexes' => true,\n    'strict' => true,\n    'engine' => null,\n    'options' => extension_loaded('pdo_mysql') ? array_filter([\n        PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),\n    ]) : [],\n],"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Retrieving Aggregate Values from Eloquent Models",
    "codeDescription": "Examples of using aggregate methods like count and max with Eloquent models to retrieve scalar values.",
    "codeLanguage": "php",
    "codeTokens": 66,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_25",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$count = Flight::where('active', 1)->count();\n\n$max = Flight::where('active', 1)->max('price');"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Running Database Migrations",
    "codeDescription": "This command runs the database migrations to set up the database tables for a Laravel application when using a database other than SQLite.",
    "codeLanguage": "shell",
    "codeTokens": 42,
    "codeId": "https://github.com/laravel/docs/blob/12.x/installation.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Installation Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan migrate"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Dropping All Tables and Migrating in Laravel",
    "codeDescription": "Demonstrates the migrate:fresh command which drops all tables and re-runs migrations, optionally with seeding and specifying a database connection.",
    "codeLanguage": "shell",
    "codeTokens": 56,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_13",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan migrate:fresh\n\nphp artisan migrate:fresh --seed"
      },
      {
        "language": "shell",
        "code": "php artisan migrate:fresh --database=admin"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Encrypting User Tokens in Laravel Controller",
    "codeDescription": "Demonstrates how to encrypt sensitive data like API tokens before storing them in the database. This example shows a controller method that encrypts a DigitalOcean API token using Laravel's Crypt facade before saving it to the user model.",
    "codeLanguage": "php",
    "codeTokens": 158,
    "codeId": "https://github.com/laravel/docs/blob/12.x/encryption.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Encryption",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Crypt;\n\nclass DigitalOceanTokenController extends Controller\n{\n    /**\n     * Store a DigitalOcean API token for the user.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        $request->user()->fill([\n            'token' => Crypt::encryptString($request->token),\n        ])->save();\n\n        return redirect('/secrets');\n    }\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Extending a Blade Layout in Laravel",
    "codeDescription": "Demonstrates how to extend a parent Blade layout and inject content into sections using @extends, @section, and @yield directives.",
    "codeLanguage": "blade",
    "codeTokens": 103,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_53",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<!-- resources/views/child.blade.php -->\n\n@extends('layouts.app')\n\n@section('title', 'Page Title')\n\n@section('sidebar')\n    @@parent\n\n    <p>This is appended to the master sidebar.</p>\n@endsection\n\n@section('content')\n    <p>This is my body content.</p>\n@endsection"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Basic Blade Variable Display",
    "codeDescription": "Example of displaying data in a Blade template using the standard double curly brace syntax",
    "codeLanguage": "blade",
    "codeTokens": 38,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "Hello, {{ $name }}."
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Implicit Route Model Binding in Laravel",
    "codeDescription": "Shows how Laravel automatically resolves Eloquent models based on route parameters and type hints.",
    "codeLanguage": "php",
    "codeTokens": 59,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_31",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\nRoute::get('/users/{user}', function (User $user) {\n    return $user->email;\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Setting Laravel Configuration Values at Runtime",
    "codeDescription": "Shows how to set configuration values dynamically during runtime using both the Config facade and config helper function.",
    "codeLanguage": "php",
    "codeTokens": 57,
    "codeId": "https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-18_snippet_16",
    "pageTitle": "Laravel Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "Config::set('app.timezone', 'America/Chicago');\n\nconfig(['app.timezone' => 'America/Chicago']);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Basic Laravel Route Definition",
    "codeDescription": "Demonstrates how to define a basic Laravel route that accepts a URI and returns a simple response using a closure.",
    "codeLanguage": "php",
    "codeTokens": 60,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/greeting', function () {\n    return 'Hello World';\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "User Logout Implementation in Laravel",
    "codeDescription": "Controller method implementation for logging out users, including session invalidation and CSRF token regeneration.",
    "codeLanguage": "php",
    "codeTokens": 99,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_15",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Http\\Request;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Support\\Facades\\Auth;\n\n/**\n * Log the user out of the application.\n */\npublic function logout(Request $request): RedirectResponse\n{\n    Auth::logout();\n\n    $request->session()->invalidate();\n\n    $request->session()->regenerateToken();\n\n    return redirect('/');\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Using Dependency Injection with Route Parameters",
    "codeDescription": "Demonstrates how to combine dependency injection with route parameters by listing dependencies before route parameters.",
    "codeLanguage": "php",
    "codeTokens": 64,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_13",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Http\\Request;\n\nRoute::get('/user/{id}', function (Request $request, string $id) {\n    return 'User '.$id;\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Singleton and Scoped Binding Examples",
    "codeDescription": "Demonstrates how to register singleton and scoped bindings in the Laravel service container using singleton(), singletonIf(), scoped(), and scopedIf() methods.",
    "codeLanguage": "php",
    "codeTokens": 203,
    "codeId": "https://github.com/laravel/docs/blob/12.x/container.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Service Container Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Services\\Transistor;\nuse App\\Services\\PodcastParser;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n$this->app->singleton(Transistor::class, function (Application $app) {\n    return new Transistor($app->make(PodcastParser::class));\n});\n\n$this->app->singletonIf(Transistor::class, function (Application $app) {\n    return new Transistor($app->make(PodcastParser::class));\n});\n\n$this->app->scoped(Transistor::class, function (Application $app) {\n    return new Transistor($app->make(PodcastParser::class));\n});\n\n$this->app->scopedIf(Transistor::class, function (Application $app) {\n    return new Transistor($app->make(PodcastParser::class));\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Database Assertion Examples in Laravel Tests",
    "codeDescription": "Shows various database assertion methods available in Laravel tests for verifying database state, including count verification, record existence, and soft delete status.",
    "codeLanguage": "php",
    "codeTokens": 54,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-18_snippet_8",
    "pageTitle": "Laravel Database Testing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$this->assertDatabaseCount('users', 5);"
      },
      {
        "language": "php",
        "code": "$this->assertDatabaseEmpty('users');"
      },
      {
        "language": "php",
        "code": "$this->assertDatabaseHas('users', [\n    'email' => 'sally@example.com',\n]);"
      },
      {
        "language": "php",
        "code": "$this->assertDatabaseMissing('users', [\n    'email' => 'sally@example.com',\n]);"
      },
      {
        "language": "php",
        "code": "$this->assertSoftDeleted($user);"
      },
      {
        "language": "php",
        "code": "$this->assertNotSoftDeleted($user);"
      },
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\n$user = User::factory()->create();\n\n$this->assertModelExists($user);"
      },
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\n$user = User::factory()->create();\n\n$user->delete();\n\n$this->assertModelMissing($user);"
      },
      {
        "language": "php",
        "code": "$this->expectsDatabaseQueryCount(5);\n\n// Test..."
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Service Container Basic Binding",
    "codeDescription": "Examples of registering bindings in the service container using bind() and bindIf() methods with dependency resolution.",
    "codeLanguage": "php",
    "codeTokens": 126,
    "codeId": "https://github.com/laravel/docs/blob/12.x/container.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Service Container Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Services\\Transistor;\nuse App\\Services\\PodcastParser;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n$this->app->bind(Transistor::class, function (Application $app) {\n    return new Transistor($app->make(PodcastParser::class));\n});\n\n$this->app->bindIf(Transistor::class, function (Application $app) {\n    return new Transistor($app->make(PodcastParser::class));\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Caching Laravel Configuration",
    "codeDescription": "This Artisan command caches all of Laravel's configuration files into a single, cached file. It reduces filesystem operations when loading configuration values, improving performance.",
    "codeLanguage": "shell",
    "codeTokens": 50,
    "codeId": "https://github.com/laravel/docs/blob/12.x/deployment.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Deployment Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan config:cache"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Capturing Multiple Route Parameters in Laravel",
    "codeDescription": "Shows how to define multiple route parameters to capture different segments of the URI in the same route.",
    "codeLanguage": "php",
    "codeTokens": 62,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_12",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/posts/{post}/comments/{comment}', function (string $postId, string $commentId) {\n    // ...\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Examining Model Attribute Changes",
    "codeDescription": "Examples of using isDirty, isClean, and wasChanged methods to track model attribute changes.",
    "codeLanguage": "php",
    "codeTokens": 189,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_31",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\n$user = User::create([\n    'first_name' => 'Taylor',\n    'last_name' => 'Otwell',\n    'title' => 'Developer',\n]);\n\n$user->title = 'Painter';\n\n$user->isDirty(); // true\n$user->isDirty('title'); // true\n$user->isDirty('first_name'); // false\n$user->isDirty(['first_name', 'title']); // true\n\n$user->isClean(); // false\n$user->isClean('title'); // false\n$user->isClean('first_name'); // true\n$user->isClean(['first_name', 'title']); // false\n\n$user->save();\n\n$user->isDirty(); // false\n$user->isClean(); // true"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Customizing Eloquent Model Table Name in Laravel",
    "codeDescription": "Example of specifying a custom table name for an Eloquent model by defining the $table property.",
    "codeLanguage": "php",
    "codeTokens": 89,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_3",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'my_flights';\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Basic Query Builder Pagination in Laravel Controller",
    "codeDescription": "Example of implementing basic pagination in a Laravel controller using the query builder's paginate method to display 15 items per page",
    "codeLanguage": "php",
    "codeTokens": 111,
    "codeId": "https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Database Pagination Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\View\\View;\n\nclass UserController extends Controller\n{\n    /**\n     * Show all application users.\n     */\n    public function index(): View\n    {\n        return view('user.index', [\n            'users' => DB::table('users')->paginate(15)\n        ]);\n    }}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating Different Rate Limits for Authenticated and Guest Users in Laravel",
    "codeDescription": "This snippet shows how to apply different rate limits based on authentication status. Authenticated users get 100 requests per minute per user ID, while guests get 10 requests per minute per IP.",
    "codeLanguage": "php",
    "codeTokens": 108,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_42",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "RateLimiter::for('uploads', function (Request $request) {\n    return $request->user()\n        ? Limit::perMinute(100)->by($request->user()->id)\n        : Limit::perMinute(10)->by($request->ip());\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Performing Upsert Operations with Laravel Eloquent",
    "codeDescription": "Uses the upsert method to insert or update multiple records in a single operation. The method identifies existing records by unique columns and updates specified fields.",
    "codeLanguage": "php",
    "codeTokens": 115,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_39",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "Flight::upsert([\n    ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n    ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n], uniqueBy: ['departure', 'destination'], update: ['price']);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Updating Database Tables in Laravel",
    "codeDescription": "Demonstrates how to update existing database tables using the Schema facade in Laravel, including adding new columns.",
    "codeLanguage": "php",
    "codeTokens": 71,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_15",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nSchema::table('users', function (Blueprint $table) {\n    $table->integer('votes');\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Implementing Global Scopes in Laravel",
    "codeDescription": "Examples of creating and applying global scopes to Eloquent models.",
    "codeLanguage": "php",
    "codeTokens": 123,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_58",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models\\Scopes;\n\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Scope;\n\nclass AncientScope implements Scope\n{\n    /**\n     * Apply the scope to a given Eloquent query builder.\n     */\n    public function apply(Builder $builder, Model $model): void\n    {\n        $builder->where('created_at', '<', now()->subYears(2000));\n    }\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Retrieving and Deleting Cache Items in Laravel",
    "codeDescription": "Demonstrates how to use the Cache::pull method to retrieve an item from the cache and then delete it. It also shows how to provide a default value if the item doesn't exist.",
    "codeLanguage": "php",
    "codeTokens": 73,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_10",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$value = Cache::pull('key');\n\n$value = Cache::pull('key', 'default');"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Using Named Bindings in Laravel Database Queries",
    "codeDescription": "Shows how to use named bindings instead of ? placeholders when executing a database query in Laravel.",
    "codeLanguage": "php",
    "codeTokens": 58,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_6",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$results = DB::select('select * from users where id = :id', ['id' => 1]);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Iterating Over Database Query Results in Laravel",
    "codeDescription": "Shows how to iterate over the results of a database query executed using Laravel's DB facade.",
    "codeLanguage": "php",
    "codeTokens": 68,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_3",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\DB;\n\n$users = DB::select('select * from users');\n\nforeach ($users as $user) {\n    echo $user->name;\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating Foreign Key Constraints in Laravel Migrations",
    "codeDescription": "Demonstrates the verbose syntax for creating foreign key constraints in Laravel migrations, forcing referential integrity at the database level. This example creates a user_id column that references the id column on the users table.",
    "codeLanguage": "php",
    "codeTokens": 110,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_53",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nSchema::table('posts', function (Blueprint $table) {\n    $table->unsignedBigInteger('user_id');\n\n    $table->foreign('user_id')->references('id')->on('users');\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Using Loop Directives in Blade Templates",
    "codeDescription": "Demonstrates various loop directives including @for, @foreach, @forelse, and @while, along with @continue and @break directives for flow control.",
    "codeLanguage": "blade",
    "codeTokens": 152,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_11",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "@for ($i = 0; $i < 10; $i++)\n    The current value is {{ $i }}\n@endfor\n\n@foreach ($users as $user)\n    <p>This is user {{ $user->id }}</p>\n@endforeach\n\n@forelse ($users as $user)\n    <li>{{ $user->name }}</li>\n@empty\n    <p>No users</p>\n@endforelse\n\n@while (true)\n    <p>I'm looping forever.</p>\n@endwhile"
      },
      {
        "language": "blade",
        "code": "@foreach ($users as $user)\n    @if ($user->type == 1)\n        @continue\n    @endif\n\n    <li>{{ $user->name }}</li>\n\n    @if ($user->number == 5)\n        @break\n    @endif\n@endforeach"
      },
      {
        "language": "blade",
        "code": "@foreach ($users as $user)\n    @continue($user->type == 1)\n\n    <li>{{ $user->name }}</li>\n\n    @break($user->number == 5)\n@endforeach"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Testing Laravel Prompts Search Function (Pest)",
    "codeDescription": "Demonstrates how to test the Laravel Prompts search functionality in console commands using Pest syntax. This example mocks search input, results, and selection of an option.",
    "codeLanguage": "php",
    "codeTokens": 119,
    "codeId": "https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-18_snippet_7",
    "pageTitle": "Laravel Console Command Testing Guide",
    "codeList": [
      {
        "language": "php",
        "code": "test('console command', function () {\n    $this->artisan('example')\n        ->expectsSearch('What is your name?', search: 'Tay', answers: [\n            'Taylor Otwell',\n            'Taylor Swift',\n            'Darian Taylor'\n        ], answer: 'Taylor Otwell')\n        ->assertExitCode(0);\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Dispatching Jobs to Default and Custom Queues in Laravel",
    "codeDescription": "Demonstrates how to dispatch jobs to the default queue and a custom 'emails' queue using Laravel's queue system.",
    "codeLanguage": "PHP",
    "codeTokens": 92,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "PHP",
        "code": "use App\\Jobs\\ProcessPodcast;\n\n// This job is sent to the default connection's default queue...\nProcessPodcast::dispatch();\n\n// This job is sent to the default connection's \"emails\" queue...\nProcessPodcast::dispatch()->onQueue('emails');"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Basic Route Authentication in Laravel",
    "codeDescription": "Demonstrates how to protect a route using Laravel's built-in auth.basic middleware for HTTP Basic Authentication.",
    "codeLanguage": "php",
    "codeTokens": 61,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_11",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/profile', function () {\n    // Only authenticated users may access this route...\n})->middleware('auth.basic');"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Chunking By ID with Updates",
    "codeDescription": "Shows how to chunk results by ID when updating records to maintain consistency during iteration.",
    "codeLanguage": "php",
    "codeTokens": 81,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_20",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "Flight::where('departed', true)\n    ->chunkById(200, function (Collection $flights) {\n        $flights->each->update(['departed' => false]);\n    }, column: 'id');"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Using Authorization Middleware in Laravel Routes",
    "codeDescription": "This snippet demonstrates how to use the 'can' middleware to authorize actions before the request reaches the controller, including examples with and without model instances.",
    "codeLanguage": "php",
    "codeTokens": 174,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_25",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Post;\n\nRoute::put('/post/{post}', function (Post $post) {\n    // The current user may update the post...\n})->middleware('can:update,post');\n\nRoute::put('/post/{post}', function (Post $post) {\n    // The current user may update the post...\n})->can('update', 'post');\n\nRoute::post('/post', function () {\n    // The current user may create posts...\n})->middleware('can:create,App\\Models\\Post');\n\nRoute::post('/post', function () {\n    // The current user may create posts...\n})->can('create', Post::class);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Defining a Basic Gate in Laravel",
    "codeDescription": "Example of defining a gate in the AppServiceProvider's boot method to authorize post updates by comparing the user ID with the post's user_id.",
    "codeLanguage": "php",
    "codeTokens": 110,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Post;\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Gate;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Gate::define('update-post', function (User $user, Post $post) {\n        return $user->id === $post->user_id;\n    });\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Generating Eloquent Model with Artisan Command in Laravel",
    "codeDescription": "Examples of using the Artisan make:model command to generate Eloquent models with various options like migrations, factories, seeders, controllers, and policies.",
    "codeLanguage": "shell",
    "codeTokens": 180,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_0",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan make:model Flight\n\nphp artisan make:model Flight --migration\n\nphp artisan make:model Flight --factory\nphp artisan make:model Flight -f\n\nphp artisan make:model Flight --seed\nphp artisan make:model Flight -s\n\nphp artisan make:model Flight --controller\nphp artisan make:model Flight -c\n\nphp artisan make:model Flight --controller --resource --requests\nphp artisan make:model Flight -crR\n\nphp artisan make:model Flight --policy\n\nphp artisan make:model Flight -mfsc\n\nphp artisan make:model Flight --all\nphp artisan make:model Flight -a\n\nphp artisan make:model Member --pivot\nphp artisan make:model Member -p"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Retrieving Authenticated User with Auth Facade in PHP",
    "codeDescription": "This code snippet demonstrates how to retrieve the currently authenticated user or their ID using Laravel's Auth facade in a controller or other application code.",
    "codeLanguage": "php",
    "codeTokens": 76,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Auth;\n\n// Retrieve the currently authenticated user...\n$user = Auth::user();\n\n// Retrieve the currently authenticated user's ID...\n$id = Auth::id();"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Basic Object Mocking in Laravel Tests",
    "codeDescription": "Demonstrates how to mock objects using Laravel's service container and Mockery integration. Shows both Pest and PHPUnit syntax for mocking a Service class.",
    "codeLanguage": "php",
    "codeTokens": 113,
    "codeId": "https://github.com/laravel/docs/blob/12.x/mocking.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Testing Documentation - Mocking Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Service;\nuse Mockery;\nuse Mockery\\MockInterface;\n\ntest('something can be mocked', function () {\n    $this->instance(\n        Service::class,\n        Mockery::mock(Service::class, function (MockInterface $mock) {\n            $mock->expects('process');\n        })\n    );\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Using make Method in Laravel Container",
    "codeDescription": "Demonstrates how to resolve class instances from the Laravel container using the make and makeWith methods. Shows both basic resolution and passing constructor arguments.",
    "codeLanguage": "php",
    "codeTokens": 67,
    "codeId": "https://github.com/laravel/docs/blob/12.x/container.md#2025-04-18_snippet_11",
    "pageTitle": "Laravel Service Container Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Services\\Transistor;\n\n$transistor = $this->app->make(Transistor::class);"
      },
      {
        "language": "php",
        "code": "use App\\Services\\Transistor;\n\n$transistor = $this->app->makeWith(Transistor::class, ['id' => 1]);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Combining Eloquent Scopes with OR Operators Using Closures",
    "codeDescription": "Demonstrates how to combine multiple Eloquent model scopes using the OR query operator with closures to achieve correct logical grouping.",
    "codeLanguage": "php",
    "codeTokens": 67,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_61",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$users = User::popular()->orWhere(function (Builder $query) {\n    $query->active();\n})->get();"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating Models Using Mass Assignment",
    "codeDescription": "Example of using the create method for mass assignment to create and save a new model instance.",
    "codeLanguage": "php",
    "codeTokens": 61,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_27",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Flight;\n\n$flight = Flight::create([\n    'name' => 'London to Paris',\n]);"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Defining Controller Route Groups in Laravel",
    "codeDescription": "Shows how to group routes that share a common controller using the controller() method, allowing simplified route definitions that only need to specify the controller method name.",
    "codeLanguage": "php",
    "codeTokens": 87,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_27",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Http\\Controllers\\OrderController;\n\nRoute::controller(OrderController::class)->group(function () {\n    Route::get('/orders/{id}', 'show');\n    Route::post('/orders', 'store');\n});"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Facade Mocking in Laravel Tests",
    "codeDescription": "Shows how to mock Laravel facades in tests using the expects() method. Includes examples for both Pest and PHPUnit testing frameworks.",
    "codeLanguage": "php",
    "codeTokens": 89,
    "codeId": "https://github.com/laravel/docs/blob/12.x/mocking.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Testing Documentation - Mocking Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Cache;\n\ntest('get index', function () {\n    Cache::expects('get')\n        ->with('key')\n        ->andReturn('value');\n\n    $response = $this->get('/users');\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Basic Database Seeder Implementation - Laravel PHP",
    "codeDescription": "Example of a DatabaseSeeder class that implements basic user data seeding using Laravel's DB facade. Demonstrates inserting a single user record with random name and email.",
    "codeLanguage": "php",
    "codeTokens": 160,
    "codeId": "https://github.com/laravel/docs/blob/12.x/seeding.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Database Seeding Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace Database\\Seeders;\n\nuse Illuminate\\Database\\Seeder;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Str;\n\nclass DatabaseSeeder extends Seeder\n{\n    /**\n     * Run the database seeders.\n     */\n    public function run(): void\n    {\n        DB::table('users')->insert([\n            'name' => Str::random(10),\n            'email' => Str::random(10).'@example.com',\n            'password' => Hash::make('password'),\n        ]);\n    }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Defining Fallback Routes in Laravel",
    "codeDescription": "This snippet shows how to define a fallback route using Route::fallback that will be executed when no other route matches the incoming request. This is useful for creating custom 404 pages.",
    "codeLanguage": "php",
    "codeTokens": 61,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_36",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::fallback(function () {\n    // ...\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Rendering Data with Laravel Blade Templating",
    "codeDescription": "Demonstrates Laravel's Blade templating syntax for displaying and iterating over data. Blade provides a more concise and readable syntax compared to traditional PHP templates.",
    "codeLanguage": "blade",
    "codeTokens": 77,
    "codeId": "https://github.com/laravel/docs/blob/12.x/frontend.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Frontend Development Options",
    "codeList": [
      {
        "language": "blade",
        "code": "<div>\n    @foreach ($users as $user)\n        Hello, {{ $user->name }} <br />\n    @endforeach\n</div>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Policy Filters in Laravel",
    "codeDescription": "This snippet shows how to define a 'before' method in a policy to perform pre-authorization checks, commonly used for authorizing application administrators to perform any action.",
    "codeLanguage": "php",
    "codeTokens": 97,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_20",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\n/**\n * Perform pre-authorization checks.\n */\npublic function before(User $user, string $ability): bool|null\n{\n    if ($user->isAdministrator()) {\n        return true;\n    }\n\n    return null;\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Retrieving and Storing Cache Items in Laravel",
    "codeDescription": "Demonstrates how to retrieve items from the cache or store them if they don't exist using the Cache::remember method. It also shows how to store items indefinitely with rememberForever.",
    "codeLanguage": "php",
    "codeTokens": 100,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_8",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$value = Cache::remember('users', $seconds, function () {\n    return DB::table('users')->get();\n});\n\n$value = Cache::rememberForever('users', function () {\n    return DB::table('users')->get();\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Defining Dynamic Scopes with Parameters in Laravel Eloquent",
    "codeDescription": "Demonstrates how to create dynamic scopes that accept parameters. Parameters are defined after the $query parameter in the scope method signature.",
    "codeLanguage": "php",
    "codeTokens": 131,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_63",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Attributes\\Scope;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Scope a query to only include users of a given type.\n     */\n    #[Scope]\n    protected function ofType(Builder $query, string $type): void\n    {\n        $query->where('type', $type);\n    }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Rendering Collection Views with @each Directive",
    "codeDescription": "Demonstrates using Blade's @each directive to render views for collections. Shows both basic usage and handling empty collections with a fallback view.",
    "codeLanguage": "blade",
    "codeTokens": 55,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_16",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "@each('view.name', $jobs, 'job')"
      },
      {
        "language": "blade",
        "code": "@each('view.name', $jobs, 'job', 'view.empty')"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Writing Log Messages at Various Levels in PHP with Laravel",
    "codeDescription": "Demonstrates how to write log messages at different severity levels using Laravel's Log facade.",
    "codeLanguage": "php",
    "codeTokens": 87,
    "codeId": "https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Logging Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Log;\n\nLog::emergency($message);\nLog::alert($message);\nLog::critical($message);\nLog::error($message);\nLog::warning($message);\nLog::notice($message);\nLog::info($message);\nLog::debug($message);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Retrieving Input Subset as Collection in Laravel",
    "codeDescription": "Example of retrieving a subset of request input data as a collection, allowing chaining of collection methods like each().",
    "codeLanguage": "php",
    "codeTokens": 57,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_6",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$request->collect('users')->each(function (string $user) {\n    // ...\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Optimizing Laravel Application for Deployment",
    "codeDescription": "This Artisan command optimizes the Laravel application for deployment by caching configuration, events, routes, and views. It's typically used as part of the deployment process to improve performance.",
    "codeLanguage": "shell",
    "codeTokens": 54,
    "codeId": "https://github.com/laravel/docs/blob/12.x/deployment.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Deployment Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan optimize"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Binding Instance Example",
    "codeDescription": "Shows how to bind an existing object instance into the Laravel service container using the instance() method.",
    "codeLanguage": "php",
    "codeTokens": 74,
    "codeId": "https://github.com/laravel/docs/blob/12.x/container.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Service Container Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Services\\Transistor;\nuse App\\Services\\PodcastParser;\n\n$service = new Transistor(new PodcastParser);\n\n$this->app->instance(Transistor::class, $service);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Laravel Resource Collection Example",
    "codeDescription": "Shows how to create a custom resource collection class with additional metadata and links in the response.",
    "codeLanguage": "php",
    "codeTokens": 137,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_9",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\ResourceCollection;\n\nclass UserCollection extends ResourceCollection\n{\n    /**\n     * Transform the resource collection into an array.\n     *\n     * @return array<string, mixed>\n     */\n    public function toArray(Request $request): array\n    {\n        return [\n            'data' => $this->collection,\n            'links' => [\n                'self' => 'link-value',\n            ],\n        ];\n    }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Using the Global Cache Helper in Laravel",
    "codeDescription": "Demonstrates how to use the global cache function as an alternative to the Cache facade for retrieving and storing data in the cache.",
    "codeLanguage": "php",
    "codeTokens": 96,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_16",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$value = cache('key');\n\ncache(['key' => 'value'], $seconds);\n\ncache(['key' => 'value'], now()->addMinutes(10));\n\ncache()->remember('users', $seconds, function () {\n    return DB::table('users')->get();\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Retrieving Input Subset Using only() in Laravel",
    "codeDescription": "Using the only() method to retrieve a subset of input data, either using an array or dynamic arguments.",
    "codeLanguage": "php",
    "codeTokens": 63,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_23",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$input = $request->only(['username', 'password']);\n\n$input = $request->only('username', 'password');"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Registering Failed Job Event Listener in Laravel",
    "codeDescription": "Implementation of a failed job event listener in the AppServiceProvider that gets triggered whenever a job fails. This can be used for notifications, logging, or other monitoring.",
    "codeLanguage": "php",
    "codeTokens": 167,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_88",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\Queue;\nuse Illuminate\\Support\\ServiceProvider;\nuse Illuminate\\Queue\\Events\\JobFailed;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        // ...\n    }\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Queue::failing(function (JobFailed $event) {\n            // $event->connectionName\n            // $event->job\n            // $event->exception\n        });\n    }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Specifying After Commit Behavior for Individual Jobs",
    "codeDescription": "Example of dispatching a job with the afterCommit method to indicate it should run after all open database transactions have been committed, regardless of the global configuration.",
    "codeLanguage": "php",
    "codeTokens": 67,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_27",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Jobs\\ProcessPodcast;\n\nProcessPodcast::dispatch($podcast)->afterCommit();"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Retrieving Authorization Policies with policy() Helper in PHP",
    "codeDescription": "Retrieves a policy instance for a given class. This helper provides convenient access to Laravel's authorization policies for permission checks.",
    "codeLanguage": "php",
    "codeTokens": 49,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_65",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$policy = policy(App\\Models\\User::class);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Controller Method Implicit Binding in Laravel",
    "codeDescription": "Demonstrates implicit model binding in controller methods with type hints.",
    "codeLanguage": "php",
    "codeTokens": 87,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_32",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Http\\Controllers\\UserController;\nuse App\\Models\\User;\n\n// Route definition...\nRoute::get('/users/{user}', [UserController::class, 'show']);\n\n// Controller method definition...\npublic function show(User $user)\n{\n    return view('user.profile', ['user' => $user]);\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Inspecting Database Structure in Laravel",
    "codeDescription": "Demonstrates how to use the Schema facade to inspect database tables, views, columns, indexes, and foreign keys.",
    "codeLanguage": "php",
    "codeTokens": 93,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_19",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Schema;\n\n$tables = Schema::getTables();\n$views = Schema::getViews();\n$columns = Schema::getColumns('users');\n$indexes = Schema::getIndexes('users');\n$foreignKeys = Schema::getForeignKeys('users');"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Token Validation Middleware in Laravel",
    "codeDescription": "Sample middleware implementation that checks for a valid token in the request. If the token doesn't match, it redirects to /home; otherwise, it passes the request further into the application.",
    "codeLanguage": "php",
    "codeTokens": 165,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass EnsureTokenIsValid\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n     */\n    public function handle(Request $request, Closure $next): Response\n    {\n        if ($request->input('token') !== 'my-secret-token') {\n            return redirect('/home');\n        }\n\n        return $next($request);\n    }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Retrieving or Creating Models with firstOrCreate and firstOrNew",
    "codeDescription": "Examples of using firstOrCreate to find or create database records and firstOrNew to find or instantiate model instances without saving.",
    "codeLanguage": "php",
    "codeTokens": 229,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_24",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Flight;\n\n// Retrieve flight by name or create it if it doesn't exist...\n$flight = Flight::firstOrCreate([\n    'name' => 'London to Paris'\n]);\n\n// Retrieve flight by name or create it with the name, delayed, and arrival_time attributes...\n$flight = Flight::firstOrCreate(\n    ['name' => 'London to Paris'],\n    ['delayed' => 1, 'arrival_time' => '11:30']\n);\n\n// Retrieve flight by name or instantiate a new Flight instance...\n$flight = Flight::firstOrNew([\n    'name' => 'London to Paris'\n]);\n\n// Retrieve flight by name or instantiate with the name, delayed, and arrival_time attributes...\n$flight = Flight::firstOrNew(\n    ['name' => 'Tokyo to Sydney'],\n    ['delayed' => 1, 'arrival_time' => '11:30']\n);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Conditional Cache Storage in Laravel",
    "codeDescription": "Demonstrates how to use the Cache::add method to store an item in the cache only if it doesn't already exist. This is an atomic operation that returns true if the item was added.",
    "codeLanguage": "php",
    "codeTokens": 66,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_12",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Cache::add('key', 'value', $seconds);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Basic Laravel Queue Job Class Structure",
    "codeDescription": "Example of a basic Laravel queue job class structure for processing a podcast, demonstrating constructor dependency injection and the handle method.",
    "codeLanguage": "php",
    "codeTokens": 149,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Jobs;\n\nuse App\\Models\\Podcast;\nuse App\\Services\\AudioProcessor;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Queue\\Queueable;\n\nclass ProcessPodcast implements ShouldQueue\n{\n    use Queueable;\n\n    /**\n     * Create a new job instance.\n     */\n    public function __construct(\n        public Podcast $podcast,\n    ) {}\n\n    /**\n     * Execute the job.\n     */\n    public function handle(AudioProcessor $processor): void\n    {\n        // Process uploaded podcast...\n    }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Performing Mass Updates on Models",
    "codeDescription": "Example of updating multiple records that match specific conditions using where clauses.",
    "codeLanguage": "php",
    "codeTokens": 62,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_30",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "Flight::where('active', 1)\n    ->where('destination', 'San Diego')\n    ->update(['delayed' => 1]);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Caching Laravel Event Mappings",
    "codeDescription": "This Artisan command caches the application's auto-discovered event to listener mappings. It's recommended to run this during the deployment process to optimize event handling.",
    "codeLanguage": "shell",
    "codeTokens": 51,
    "codeId": "https://github.com/laravel/docs/blob/12.x/deployment.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Deployment Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan event:cache"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Restoring Soft Deleted Models",
    "codeDescription": "Shows how to restore a soft deleted model by setting its deleted_at column to null using the restore method on a model instance.",
    "codeLanguage": "php",
    "codeTokens": 49,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_48",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$flight->restore();"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Defining Required Route Parameters in Laravel",
    "codeDescription": "Demonstrates how to capture URI segments with required route parameters that are encased in curly braces.",
    "codeLanguage": "php",
    "codeTokens": 57,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_11",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/user/{id}', function (string $id) {\n    return 'User '.$id;\n});"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Time Manipulation in Laravel Tests",
    "codeDescription": "Demonstrates various methods for manipulating time in Laravel tests, including traveling to future/past dates and freezing time.",
    "codeLanguage": "php",
    "codeTokens": 183,
    "codeId": "https://github.com/laravel/docs/blob/12.x/mocking.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Testing Documentation - Mocking Guide",
    "codeList": [
      {
        "language": "php",
        "code": "test('time can be manipulated', function () {\n    // Travel into the future...\n    $this->travel(5)->milliseconds();\n    $this->travel(5)->seconds();\n    $this->travel(5)->minutes();\n    $this->travel(5)->hours();\n    $this->travel(5)->days();\n    $this->travel(5)->weeks();\n    $this->travel(5)->years();\n\n    // Travel into the past...\n    $this->travel(-5)->hours();\n\n    // Travel to an explicit time...\n    $this->travelTo(now()->subHours(6));\n\n    // Return back to the present time...\n    $this->travelBack();\n});"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Basic User Resource Implementation",
    "codeDescription": "Example of a UserResource class that transforms a User model into a JSON structure. Shows basic attribute mapping in toArray method.",
    "codeLanguage": "php",
    "codeTokens": 169,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass UserResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array<string, mixed>\n     */\n    public function toArray(Request $request): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'created_at' => $this->created_at,\n            'updated_at' => $this->updated_at,\n        ];\n    }\n}"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Retrieving Single Models",
    "codeDescription": "Demonstrates various methods for retrieving single models including find, first, and firstWhere.",
    "codeLanguage": "php",
    "codeTokens": 109,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_23",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Flight;\n\n// Retrieve a model by its primary key...\n$flight = Flight::find(1);\n\n// Retrieve the first model matching the query constraints...\n$flight = Flight::where('active', 1)->first();\n\n// Alternative to retrieving the first model matching the query constraints...\n$flight = Flight::firstWhere('active', 1);"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Rendering Component Attributes",
    "codeDescription": "Shows how to render all additional attributes passed to a component using the $attributes variable in the component template.",
    "codeLanguage": "blade",
    "codeTokens": 51,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_31",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<div {{ $attributes }}>\n    <!-- Component content -->\n</div>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Using Request Object in Laravel Route Closure",
    "codeDescription": "Shows how to type-hint the Illuminate\\Http\\Request class in a route closure to access the current request.",
    "codeLanguage": "php",
    "codeTokens": 58,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_1",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Http\\Request;\n\nRoute::get('/', function (Request $request) {\n    // ...\n});"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Authorizing Multiple Actions with Gate Any/None Methods",
    "codeDescription": "Example of using Gate::any and Gate::none methods to check if a user has permission for at least one or none of multiple actions.",
    "codeLanguage": "php",
    "codeTokens": 102,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "if (Gate::any(['update-post', 'delete-post'], $post)) {\n    // The user can update or delete the post...\n}\n\nif (Gate::none(['update-post', 'delete-post'], $post)) {\n    // The user can't update or delete the post...\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Saving a Model Without Events in Laravel",
    "codeDescription": "Example of using the saveQuietly method to save a model without firing any events. This is useful when you need to update a model without triggering observers or event listeners.",
    "codeLanguage": "php",
    "codeTokens": 76,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_79",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$user = User::findOrFail(1);\n\n$user->name = 'Victoria Faith';\n\n$user->saveQuietly();"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Configuring SQLite Database Connection in Laravel",
    "codeDescription": "Sets up the environment variables for a SQLite database connection in Laravel, including the database path and foreign key constraint settings.",
    "codeLanguage": "ini",
    "codeTokens": 58,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_0",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "ini",
        "code": "DB_CONNECTION=sqlite\nDB_DATABASE=/absolute/path/to/database.sqlite\n\nDB_FOREIGN_KEYS=false"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Handling Validation Errors in Laravel Blade Templates",
    "codeDescription": "Demonstrates the use of @error directive to check for validation errors and display error messages in Blade templates.",
    "codeLanguage": "blade",
    "codeTokens": 103,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_57",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<!-- /resources/views/post/create.blade.php -->\n\n<label for=\"title\">Post Title</label>\n\n<input\n    id=\"title\"\n    type=\"text\"\n    class=\"@error('title') is-invalid @enderror\"\n/>\n\n@error('title')\n    <div class=\"alert alert-danger\">{{ $message }}</div>\n@enderror"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Resetting Database After Tests with RefreshDatabase in PHPUnit",
    "codeDescription": "Shows how to implement the RefreshDatabase trait in PHPUnit tests to reset the database between tests, ensuring test isolation.",
    "codeLanguage": "php",
    "codeTokens": 110,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Database Testing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace Tests\\Feature;\n\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    use RefreshDatabase;\n\n    /**\n     * A basic functional test example.\n     */\n    public function test_basic_example(): void\n    {\n        $response = $this->get('/');\n\n        // ...\n    }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Defining Global Route Parameter Constraints",
    "codeDescription": "Shows how to define global pattern constraints for route parameters in the AppServiceProvider boot method.",
    "codeLanguage": "php",
    "codeTokens": 67,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_17",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Route;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Route::pattern('id', '[0-9]+');\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Type-hinted Constructor Injection",
    "codeDescription": "Shows how to use constructor injection with an interface type-hint in Laravel.",
    "codeLanguage": "php",
    "codeTokens": 63,
    "codeId": "https://github.com/laravel/docs/blob/12.x/container.md#2025-04-18_snippet_7",
    "pageTitle": "Laravel Service Container Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Contracts\\EventPusher;\n\n/**\n * Create a new class instance.\n */\npublic function __construct(\n    protected EventPusher $pusher,\n) {}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing UUID Keys in Laravel Eloquent Model",
    "codeDescription": "Demonstrates how to use UUID keys instead of auto-incrementing integers in an Eloquent model using the HasUuids trait.",
    "codeLanguage": "php",
    "codeTokens": 128,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_5",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Database\\Eloquent\\Concerns\\HasUuids;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Article extends Model\n{\n    use HasUuids;\n\n    // ...\n}\n\n$article = Article::create(['title' => 'Traveling to Europe']);\n\n$article->id; // \"8f8e8478-9035-4d23-b9a7-62f4d2612ce5\""
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Accessing Authenticated User via Request Object in Laravel Controller",
    "codeDescription": "This snippet shows how to access the authenticated user through dependency injection of the Request object in a controller method, which is a common pattern in Laravel applications.",
    "codeLanguage": "php",
    "codeTokens": 121,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass FlightController extends Controller\n{\n    /**\n     * Update the flight information for an existing flight.\n     */\n    public function update(Request $request): RedirectResponse\n    {\n        $user = $request->user();\n\n        // ...\n\n        return redirect('/flights');\n    }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Registering Global Middleware in Laravel",
    "codeDescription": "Example of registering middleware globally in Laravel's bootstrap/app.php file. Global middleware runs on every HTTP request to the application.",
    "codeLanguage": "php",
    "codeTokens": 71,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Http\\Middleware\\EnsureTokenIsValid;\n\n->withMiddleware(function (Middleware $middleware) {\n     $middleware->append(EnsureTokenIsValid::class);\n})"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Laravel API Route with Sanctum Authentication",
    "codeDescription": "Demonstrates how to define an API route with Sanctum authentication middleware for protected API endpoints.",
    "codeLanguage": "php",
    "codeTokens": 63,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/user', function (Request $request) {\n    return $request->user();\n})->middleware('auth:sanctum');"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Finding Models in Eloquent Collection by Primary Key",
    "codeDescription": "Illustrates how to use the find method to retrieve models from an Eloquent collection by their primary keys.",
    "codeLanguage": "php",
    "codeTokens": 54,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#2025-04-18_snippet_4",
    "pageTitle": "Eloquent Collections in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$users = User::all();\n\n$user = $users->find(1);"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Registering an Observer in the Service Provider in Laravel",
    "codeDescription": "Example of manually registering a model observer in the boot method of a service provider. This approach allows for programmatic registration of observers in the application bootstrap process.",
    "codeLanguage": "php",
    "codeTokens": 87,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_76",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\nuse App\\Observers\\UserObserver;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    User::observe(UserObserver::class);\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Service Provider with Boot Method in Laravel",
    "codeDescription": "This snippet shows a service provider implementing the boot method to register a view composer, which is called after all other service providers have been registered.",
    "codeLanguage": "PHP",
    "codeTokens": 109,
    "codeId": "https://github.com/laravel/docs/blob/12.x/providers.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Service Providers Documentation",
    "codeList": [
      {
        "language": "PHP",
        "code": "<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass ComposerServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        View::composer('view', function () {\n            // ...\n        });\n    }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Overriding resolveRouteBinding Method on Eloquent Models in Laravel",
    "codeDescription": "This snippet shows how to override the resolveRouteBinding method in an Eloquent model to customize how route binding finds model instances. It allows models to define their own binding resolution logic.",
    "codeLanguage": "php",
    "codeTokens": 122,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_34",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * Retrieve the model for a bound value.\n *\n * @param  mixed  $value\n * @param  string|null  $field\n * @return \\Illuminate\\Database\\Eloquent\\Model|null\n */\npublic function resolveRouteBinding($value, $field = null)\n{\n    return $this->where('name', $value)->firstOrFail();\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Inserting New Model Records via Controller",
    "codeDescription": "Example of creating and saving a new Flight model instance through a controller action.",
    "codeLanguage": "php",
    "codeTokens": 133,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_26",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Flight;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass FlightController extends Controller\n{\n    /**\n     * Store a new flight in the database.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        // Validate the request...\n\n        $flight = new Flight;\n\n        $flight->name = $request->name;\n\n        $flight->save();\n\n        return redirect('/flights');\n    }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Customizing Route Binding using Route::bind in Laravel",
    "codeDescription": "This snippet demonstrates how to define custom model binding resolution logic using the Route::bind method in the AppServiceProvider's boot method. It allows you to customize how URI segment values are resolved to model instances.",
    "codeLanguage": "php",
    "codeTokens": 112,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_33",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Route;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Route::bind('user', function (string $value) {\n        return User::where('name', $value)->firstOrFail();\n    });\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Using Environment Directives in Blade Templates",
    "codeDescription": "Demonstrates how to use @production and @env directives to conditionally render content based on the application environment.",
    "codeLanguage": "blade",
    "codeTokens": 98,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_7",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "@production\n    // Production specific content...\n@endproduction\n\n@env('staging')\n    // The application is running in \"staging\"...\n@endenv\n\n@env(['staging', 'production'])\n    // The application is running in \"staging\" or \"production\"...\n@endenv"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Retrieving Query String with Default Value in Laravel",
    "codeDescription": "Retrieving query string values with a default fallback when the requested parameter isn't present.",
    "codeLanguage": "php",
    "codeTokens": 48,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_12",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$name = $request->query('name', 'Helen');"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Generating Laravel Route Cache",
    "codeDescription": "Command to generate a route cache in Laravel, which improves route registration performance in production. This should be run during deployment after any route changes.",
    "codeLanguage": "shell",
    "codeTokens": 48,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_51",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan route:cache"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Handling Nullable Objects with optional() Helper in PHP",
    "codeDescription": "Prevents null reference errors by allowing property access or method calls on potentially null objects. If the object is null, properties and methods return null instead of causing an error.",
    "codeLanguage": "php",
    "codeTokens": 71,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_63",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "return optional($user->address)->street;\n\n{!! old('name', optional($user)->name) !!}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Conditionally Including Attributes in Laravel API Resource",
    "codeDescription": "Demonstrates using the when() method to conditionally include a 'secret' attribute in the resource response if the user is an admin.",
    "codeLanguage": "php",
    "codeTokens": 135,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_13",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "public function toArray(Request $request): array\n{\n    return [\n        'id' => $this->id,\n        'name' => $this->name,\n        'email' => $this->email,\n        'secret' => $this->when($request->user()->isAdmin(), 'secret-value'),\n        'created_at' => $this->created_at,\n        'updated_at' => $this->updated_at,\n    ];\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Creating Middleware with Artisan Command in Laravel",
    "codeDescription": "Command to generate a new middleware class file using Laravel's Artisan CLI tool. This creates a middleware file in the app/Http/Middleware directory.",
    "codeLanguage": "shell",
    "codeTokens": 53,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan make:middleware EnsureTokenIsValid"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Conditionally Merging Input in Laravel",
    "codeDescription": "Using mergeIfMissing() to add input data only if the keys don't already exist in the request.",
    "codeLanguage": "php",
    "codeTokens": 51,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_39",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$request->mergeIfMissing(['votes' => 0]);"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Creating Models with Laravel Factories",
    "codeDescription": "Demonstrates how to use the create method to instantiate and persist model instances to the database using Eloquent's factory feature.",
    "codeLanguage": "php",
    "codeTokens": 85,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_13",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\n// Create a single App\\Models\\User instance...\n$user = User::factory()->create();\n\n// Create three App\\Models\\User instances...\n$users = User::factory()->count(3)->create();"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Overriding Model Attributes",
    "codeDescription": "Example of overriding default factory attributes when creating a model. The specified attributes replace the factory defaults while other attributes use their defined values.",
    "codeLanguage": "php",
    "codeTokens": 65,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_11",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$user = User::factory()->make([\n    'name' => 'Abigail Otwell',\n]);"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Route Group with Session Authentication",
    "codeDescription": "Configuration for route group using authentication and session middleware.",
    "codeLanguage": "php",
    "codeTokens": 53,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_16",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::middleware(['auth', 'auth.session'])->group(function () {\n    Route::get('/', function () {\n        // ...\n    });\n});"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Creating Middleware Groups in Laravel",
    "codeDescription": "Example of grouping multiple middleware under a single key for easier assignment to routes. This allows organizing related middleware together for better management and usage.",
    "codeLanguage": "php",
    "codeTokens": 114,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_10",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Http\\Middleware\\First;\nuse App\\Http\\Middleware\\Second;\n\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->appendToGroup('group-name', [\n        First::class,\n        Second::class,\n    ]);\n\n    $middleware->prependToGroup('group-name', [\n        First::class,\n        Second::class,\n    ]);\n})"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Benchmarking Code Execution in PHP",
    "codeDescription": "The Benchmark class allows measuring the execution time of code blocks. It can be used to test performance of different parts of an application and compare multiple scenarios.",
    "codeLanguage": "php",
    "codeTokens": 167,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_96",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nuse App\\Models\\User;\nuse Illuminate\\Support\\Benchmark;\n\nBenchmark::dd(fn () => User::find(1)); // 0.1 ms\n\nBenchmark::dd([\n    'Scenario 1' => fn () => User::count(), // 0.5 ms\n    'Scenario 2' => fn () => User::all()->count(), // 20.0 ms\n]);\n\nBenchmark::dd(fn () => User::count(), iterations: 10); // 0.5 ms\n\n[$count, $duration] = Benchmark::value(fn () => User::count());"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Conditionally Including Relationship Counts in Laravel API Resource",
    "codeDescription": "Demonstrates using the whenCounted() method to include a relationship count only if it has been loaded on the model.",
    "codeLanguage": "php",
    "codeTokens": 127,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_17",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "public function toArray(Request $request): array\n{\n    return [\n        'id' => $this->id,\n        'name' => $this->name,\n        'email' => $this->email,\n        'posts_count' => $this->whenCounted('posts'),\n        'created_at' => $this->created_at,\n        'updated_at' => $this->updated_at,\n    ];\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Model Factory Usage in Seeder - Laravel PHP",
    "codeDescription": "Example showing how to use model factories in a seeder to generate multiple user records with related posts.",
    "codeLanguage": "php",
    "codeTokens": 81,
    "codeId": "https://github.com/laravel/docs/blob/12.x/seeding.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Database Seeding Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\n/**\n * Run the database seeders.\n */\npublic function run(): void\n{\n    User::factory()\n        ->count(50)\n        ->hasPosts(1)\n        ->create();\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Defining Custom If Statement in Laravel Blade",
    "codeDescription": "This snippet demonstrates how to define a custom conditional directive for Blade templates using Blade::if(). The example creates a 'disk' directive that checks if the application's default filesystem disk matches a specified value.",
    "codeLanguage": "php",
    "codeTokens": 108,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_65",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Blade;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Blade::if('disk', function (string $value) {\n        return config('filesystems.default') === $value;\n    });\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Basic Interface Binding in Laravel Container",
    "codeDescription": "Demonstrates how to bind an interface to a concrete implementation in Laravel's service container.",
    "codeLanguage": "php",
    "codeTokens": 67,
    "codeId": "https://github.com/laravel/docs/blob/12.x/container.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Service Container Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Contracts\\EventPusher;\nuse App\\Services\\RedisEventPusher;\n\n$this->app->bind(EventPusher::class, RedisEventPusher::class);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating Conditional Rate Limits Based on User in Laravel",
    "codeDescription": "This snippet demonstrates creating dynamic rate limits based on user properties. VIP customers get unlimited access while regular users are limited to 100 requests per minute.",
    "codeLanguage": "php",
    "codeTokens": 85,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_40",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "RateLimiter::for('uploads', function (Request $request) {\n    return $request->user()->vipCustomer()\n        ? Limit::none()\n        : Limit::perMinute(100);\n});"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Making a Simple One-Time Charge with Laravel Cashier",
    "codeDescription": "Demonstrates how to make a one-time charge against a customer using the charge method on a billable model instance. The charge method requires a payment amount and payment method identifier.",
    "codeLanguage": "php",
    "codeTokens": 101,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_108",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Http\\Request;\n\nRoute::post('/purchase', function (Request $request) {\n    $stripeCharge = $request->user()->charge(\n        100, $request->paymentMethodId\n    );\n\n    // ...\n});"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing Queued Event Listener in Laravel",
    "codeDescription": "Demonstrates how to create a queued event listener by implementing the ShouldQueue interface for handling background processing.",
    "codeLanguage": "php",
    "codeTokens": 72,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Listeners;\n\nuse App\\Events\\OrderShipped;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\n\nclass SendShipmentNotification implements ShouldQueue\n{\n    // ...\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Passing Parameters to Named Routes",
    "codeDescription": "Demonstrates how to pass parameters to named routes when generating URLs, which automatically insert the parameters in their correct positions.",
    "codeLanguage": "php",
    "codeTokens": 77,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_23",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/user/{id}/profile', function (string $id) {\n    // ...\n})->name('profile');\n\n$url = route('profile', ['id' => 1]);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using create Method for Mass Assignment",
    "codeDescription": "Demonstrates using the create method after properly configuring the model's mass assignment protection. The create method returns the newly created model instance.",
    "codeLanguage": "php",
    "codeTokens": 60,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_34",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$flight = Flight::create(['name' => 'London to Paris']);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Authorizing Actions in a Controller Using Gates",
    "codeDescription": "Example of using the Gate facade in a controller to authorize a post update action, aborting with a 403 status if unauthorized.",
    "codeLanguage": "php",
    "codeTokens": 143,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Post;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Gate;\n\nclass PostController extends Controller\n{\n    /**\n     * Update the given post.\n     */\n    public function update(Request $request, Post $post): RedirectResponse\n    {\n        if (! Gate::allows('update-post', $post)) {\n            abort(403);\n        }\n\n        // Update the post...\n\n        return redirect('/posts');\n    }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing Custom MongoDB User Provider in Laravel",
    "codeDescription": "Example of creating a custom user provider for MongoDB integration in Laravel's authentication system.",
    "codeLanguage": "php",
    "codeTokens": 145,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_22",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Providers;\n\nuse App\\Extensions\\MongoUserProvider;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    // ...\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Auth::provider('mongo', function (Application $app, array $config) {\n            // Return an instance of Illuminate\\Contracts\\Auth\\UserProvider...\n\n            return new MongoUserProvider($app->make('mongo.connection'));\n        });\n    }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using Cache Memoization in Laravel",
    "codeDescription": "Shows how to use Laravel's memo cache driver to temporarily store resolved cache values in memory during a single request or job execution, improving performance by preventing repeated cache hits.",
    "codeLanguage": "php",
    "codeTokens": 122,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_15",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Cache;\n\n$value = Cache::memo()->get('key');\n\n$value = Cache::memo('redis')->get('key');\n\nCache::memo()->put('name', 'Taylor');\nCache::memo()->get('name');\nCache::memo()->get('name');\n\nCache::memo()->put('name', 'Tim');\nCache::memo()->get('name');"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Raw PHP in Blade Templates",
    "codeDescription": "Examples of embedding raw PHP code in Blade templates using @php directive and class imports with @use.",
    "codeLanguage": "blade",
    "codeTokens": 48,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_18",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "@php\n    $counter = 1;\n@endphp"
      },
      {
        "language": "blade",
        "code": "@use('App\\Models\\Flight')"
      },
      {
        "language": "php",
        "code": "@use('App\\Models\\Flight', 'FlightModel')"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Defining Local Scopes in Laravel Eloquent Models",
    "codeDescription": "Demonstrates how to create local scopes in Eloquent models to define reusable query constraints. Local scopes are defined using the Scope attribute and should return the same query builder instance or void.",
    "codeLanguage": "php",
    "codeTokens": 182,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_59",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Attributes\\Scope;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Scope a query to only include popular users.\n     */\n    #[Scope]\n    protected function popular(Builder $query): void\n    {\n        $query->where('votes', '>', 100);\n    }\n\n    /**\n     * Scope a query to only include active users.\n     */\n    #[Scope]\n    protected function active(Builder $query): void\n    {\n        $query->where('active', 1);\n    }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Configuring Redirect for Authenticated Users in Laravel",
    "codeDescription": "This snippet demonstrates how to customize where authenticated users are redirected when they access routes protected by the guest middleware, using the redirectUsersTo method in bootstrap/app.php.",
    "codeLanguage": "php",
    "codeTokens": 97,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Http\\Request;\n\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->redirectUsersTo('/panel');\n\n    // Using a closure...\n    $middleware->redirectUsersTo(fn (Request $request) => route('panel'));\n})"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Basic Cache Usage Example",
    "codeDescription": "Example of using Laravel's Cache facade within a controller to retrieve cached values.",
    "codeLanguage": "php",
    "codeTokens": 96,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Cache;\n\nclass UserController extends Controller\n{\n    /**\n     * Show a list of all users of the application.\n     */\n    public function index(): array\n    {\n        $value = Cache::get('key');\n\n        return [\n            // ...\n        ];\n    }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Event Listener Implementation with Type-Hinted Handler",
    "codeDescription": "Example of an event listener class with a handle method that receives a specific event type. Shows how to implement event handling logic in a listener class.",
    "codeLanguage": "php",
    "codeTokens": 90,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Events\\PodcastProcessed;\n\nclass SendPodcastNotification\n{\n    /**\n     * Handle the given event.\n     */\n    public function handle(PodcastProcessed $event): void\n    {\n        // ...\n    }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Storing Items in Laravel Cache",
    "codeDescription": "Shows various ways to store items in the cache using the Cache::put method, including setting expiration times and storing items indefinitely.",
    "codeLanguage": "php",
    "codeTokens": 80,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_11",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Cache::put('key', 'value', $seconds = 10);\n\nCache::put('key', 'value');\n\nCache::put('key', 'value', now()->addMinutes(10));"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using Multiple Database Connections in Laravel",
    "codeDescription": "Shows how to use the connection method of the DB facade to access different database connections defined in the configuration.",
    "codeLanguage": "php",
    "codeTokens": 57,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_12",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\DB;\n\n$users = DB::connection('sqlite')->select(/* ... */);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Defining Basic Event Listener in Laravel",
    "codeDescription": "Example of a basic event listener class that handles OrderShipped events. Shows the basic structure with constructor and handle method.",
    "codeLanguage": "php",
    "codeTokens": 117,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Listeners;\n\nuse App\\Events\\OrderShipped;\n\nclass SendShipmentNotification\n{\n    /**\n     * Create the event listener.\n     */\n    public function __construct() {}\n\n    /**\n     * Handle the event.\n     */\n    public function handle(OrderShipped $event): void\n    {\n        // Access the order using $event->order...\n    }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using fill Method to Populate Model Attributes",
    "codeDescription": "Uses the fill method to populate an existing model instance with a new set of attributes. This is an alternative to directly setting each attribute individually.",
    "codeLanguage": "php",
    "codeTokens": 61,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_35",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$flight->fill(['name' => 'Amsterdam to Frankfurt']);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Advanced Subquery Selection",
    "codeDescription": "Shows how to use subqueries in Eloquent to select related data in a single query.",
    "codeLanguage": "php",
    "codeTokens": 96,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_22",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Destination;\nuse App\\Models\\Flight;\n\nreturn Destination::addSelect(['last_flight' => Flight::select('name')\n    ->whereColumn('destination_id', 'destinations.id')\n    ->orderByDesc('arrived_at')\n    ->limit(1)\n])->get();"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Conditionally Including Relationships in Laravel API Resource",
    "codeDescription": "Shows how to use the whenLoaded() method to conditionally include a relationship only if it has been loaded on the model.",
    "codeLanguage": "php",
    "codeTokens": 130,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_16",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "public function toArray(Request $request): array\n{\n    return [\n        'id' => $this->id,\n        'name' => $this->name,\n        'email' => $this->email,\n        'posts' => PostResource::collection($this->whenLoaded('posts')),\n        'created_at' => $this->created_at,\n        'updated_at' => $this->updated_at,\n    ];\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Conditionally Merging Classes in Blade Components",
    "codeDescription": "Shows how to conditionally apply CSS classes based on component state using the $attributes->class() method with boolean conditions.",
    "codeLanguage": "blade",
    "codeTokens": 70,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_33",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<div {{ $attributes->class(['p-4', 'bg-red' => $hasError]) }}>\n    {{ $message }}\n</div>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Cache Retrieval Examples",
    "codeDescription": "Various methods of retrieving items from the cache, including default values and closure-based defaults.",
    "codeLanguage": "php",
    "codeTokens": 75,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$value = Cache::get('key');\n\n$value = Cache::get('key', 'default');\n\n$value = Cache::get('key', function () {\n    return DB::table(/* ... */)->get();\n});"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Authorizing Actions Without Models in Laravel Controller",
    "codeDescription": "This snippet shows how to authorize actions that don't require model instances, such as 'create', by passing a class name to the 'can' method.",
    "codeLanguage": "php",
    "codeTokens": 138,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_22",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Post;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass PostController extends Controller\n{\n    /**\n     * Create a post.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        if ($request->user()->cannot('create', Post::class)) {\n            abort(403);\n        }\n\n        // Create the post...\n\n        return redirect('/posts');\n    }\n}"
      }
    ],
    "relevance": 0.954
  },
  {
    "codeTitle": "Slot Usage with Named Content",
    "codeDescription": "Shows how to use named slots when implementing a component",
    "codeLanguage": "xml",
    "codeTokens": 62,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_40",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "xml",
        "code": "<x-alert>\n    <x-slot:title>\n        Server Error\n    </x-slot>\n\n    <strong>Whoops!</strong> Something went wrong!\n</x-alert>"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Handling Database Connection Events in Laravel",
    "codeDescription": "Event listener implementation in the AppServiceProvider that handles DatabaseBusy events by sending notifications when database connections exceed the specified threshold.",
    "codeLanguage": "php",
    "codeTokens": 135,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_23",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Notifications\\DatabaseApproachingMaxConnections;\nuse Illuminate\\Database\\Events\\DatabaseBusy;\nuse Illuminate\\Support\\Facades\\Event;\nuse Illuminate\\Support\\Facades\\Notification;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Event::listen(function (DatabaseBusy $event) {\n        Notification::route('mail', 'dev@example.com')\n            ->notify(new DatabaseApproachingMaxConnections(\n                $event->connectionName,\n                $event->connections\n            ));\n    });\n}"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Dispatching Batch Jobs",
    "codeDescription": "Demonstrates how to dispatch a batch of jobs with progress tracking and completion callbacks using the Bus facade.",
    "codeLanguage": "php",
    "codeTokens": 226,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_47",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Jobs\\ImportCsv;\nuse Illuminate\\Bus\\Batch;\nuse Illuminate\\Support\\Facades\\Bus;\nuse Throwable;\n\n$batch = Bus::batch([\n    new ImportCsv(1, 100),\n    new ImportCsv(101, 200),\n    new ImportCsv(201, 300),\n    new ImportCsv(301, 400),\n    new ImportCsv(401, 500),\n])->before(function (Batch $batch) {\n    // The batch has been created but no jobs have been added...\n})->progress(function (Batch $batch) {\n    // A single job has completed successfully...\n})->then(function (Batch $batch) {\n    // All jobs completed successfully...\n})->catch(function (Batch $batch, Throwable $e) {\n    // First batch job failure detected...\n})->finally(function (Batch $batch) {\n    // The batch has finished executing...\n})->dispatch();\n\nreturn $batch->id;"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Automatic Retries with retry() Helper in PHP",
    "codeDescription": "Attempts to execute a callback until the given maximum attempt threshold is met or the callback succeeds. Provides automatic retry with configurable delay between attempts.",
    "codeLanguage": "php",
    "codeTokens": 69,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_76",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "return retry(5, function () {\n    // Attempt 5 times while resting 100ms between attempts...\n}, 100);"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Creating HTTP Responses with response() Helper in PHP",
    "codeDescription": "Creates a response instance or obtains an instance of the response factory. Allows for creating various HTTP responses including JSON responses with custom headers and status codes.",
    "codeLanguage": "php",
    "codeTokens": 74,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_75",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "return response('Hello World', 200, $headers);\n\nreturn response()->json(['foo' => 'bar'], 200, $headers);"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Overriding Default Attributes in Laravel Factories",
    "codeDescription": "Shows how to override the factory's default model attributes by passing an array to the create method.",
    "codeLanguage": "php",
    "codeTokens": 56,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_14",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$user = User::factory()->create([\n    'name' => 'Abigail',\n]);"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Custom Exception Response Handler",
    "codeDescription": "Demonstrates how to customize the entire HTTP response for exceptions using the respond method, with special handling for 419 status codes.",
    "codeLanguage": "php",
    "codeTokens": 113,
    "codeId": "https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-18_snippet_14",
    "pageTitle": "Laravel Error Handling Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Symfony\\Component\\HttpFoundation\\Response;\n\n->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->respond(function (Response $response) {\n        if ($response->getStatusCode() === 419) {\n            return back()->with([\n                'message' => 'The page expired, please try again.',\n            ]);\n        }\n\n        return $response;\n    });\n})"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Generating a Job Class in Laravel",
    "codeDescription": "Artisan command to generate a new job class in the app/Jobs directory of a Laravel application.",
    "codeLanguage": "Shell",
    "codeTokens": 43,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "Shell",
        "code": "php artisan make:job ProcessPodcast"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Manual Event Registration in Service Provider",
    "codeDescription": "Example of manually registering event listeners using the Event facade within a service provider's boot method.",
    "codeLanguage": "php",
    "codeTokens": 100,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Domain\\Orders\\Events\\PodcastProcessed;\nuse App\\Domain\\Orders\\Listeners\\SendPodcastNotification;\nuse Illuminate\\Support\\Facades\\Event;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Event::listen(\n        PodcastProcessed::class,\n        SendPodcastNotification::class,\n    );\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing Soft Deletes in Laravel Models",
    "codeDescription": "Demonstrates how to enable soft deletes in a model by using the SoftDeletes trait. This allows models to be marked as deleted without removing them from the database.",
    "codeLanguage": "php",
    "codeTokens": 84,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_45",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\n\nclass Flight extends Model\n{\n    use SoftDeletes;\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Dispatching Jobs to Specific Queues in Controller",
    "codeDescription": "Example of dispatching a job to a specific queue from within a controller using the onQueue method, allowing for job categorization and prioritization.",
    "codeLanguage": "php",
    "codeTokens": 152,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_34",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Jobs\\ProcessPodcast;\nuse App\\Models\\Podcast;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass PodcastController extends Controller\n{\n    /**\n     * Store a new podcast.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        $podcast = Podcast::create(/* ... */);\n\n        // Create podcast...\n\n        ProcessPodcast::dispatch($podcast)->onQueue('processing');\n\n        return redirect('/podcasts');\n    }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Retrieving Values from Nested Arrays with Arr::pluck() in PHP",
    "codeDescription": "The Arr::pluck method retrieves all of the values for a given key from an array. It can work with nested arrays using dot notation and allows specifying a custom result key.",
    "codeLanguage": "php",
    "codeTokens": 121,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_24",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Arr;\n\n$array = [\n    ['developer' => ['id' => 1, 'name' => 'Taylor']],\n    ['developer' => ['id' => 2, 'name' => 'Abigail']],\n];\n\n$names = Arr::pluck($array, 'developer.name');\n\n// ['Taylor', 'Abigail']"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Arr;\n\n$names = Arr::pluck($array, 'developer.name', 'developer.id');\n\n// [1 => 'Taylor', 2 => 'Abigail']"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing Stale-While-Revalidate Pattern in Laravel Caching",
    "codeDescription": "Shows how to use the Cache::flexible method to implement the stale-while-revalidate pattern, allowing partially stale data to be served while the cache is being recalculated in the background.",
    "codeLanguage": "php",
    "codeTokens": 83,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_9",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$value = Cache::flexible('users', [5, 10], function () {\n    return DB::table('users')->get();\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Method Chaining with tap() Helper in PHP",
    "codeDescription": "Accepts a value and a closure, passes the value to the closure, and then returns the value regardless of the closure's return value. Useful for performing operations on an object while maintaining a fluent interface.",
    "codeLanguage": "php",
    "codeTokens": 89,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_83",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$user = tap(User::first(), function (User $user) {\n    $user->name = 'taylor';\n\n    $user->save();\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Displaying Pagination Results in Laravel Blade",
    "codeDescription": "Illustrates how to display paginated results and render page links in a Blade template. This example iterates over users and displays the pagination links.",
    "codeLanguage": "blade",
    "codeTokens": 81,
    "codeId": "https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-18_snippet_11",
    "pageTitle": "Laravel Database Pagination Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<div class=\"container\">\n    @foreach ($users as $user)\n        {{ $user->name }}\n    @endforeach\n</div>\n\n{{ $users->links() }}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Renaming and Dropping Tables in Laravel",
    "codeDescription": "Shows how to rename existing tables and drop tables using the Schema facade in Laravel.",
    "codeLanguage": "php",
    "codeTokens": 48,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_16",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Schema;\n\nSchema::rename($from, $to);"
      },
      {
        "language": "php",
        "code": "Schema::drop('users');\n\nSchema::dropIfExists('users');"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Retrieving Input with Default Value in Laravel",
    "codeDescription": "Using the input() method with a default fallback value when the requested input isn't present.",
    "codeLanguage": "php",
    "codeTokens": 49,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_8",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$name = $request->input('name', 'Sally');"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Converting Pagination Results to JSON in Laravel",
    "codeDescription": "Shows how to convert pagination results to JSON by returning a paginator instance from a route or controller action.",
    "codeLanguage": "php",
    "codeTokens": 57,
    "codeId": "https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-18_snippet_13",
    "pageTitle": "Laravel Database Pagination Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\nRoute::get('/users', function () {\n    return User::paginate();\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing a Livewire Component Template in Blade",
    "codeDescription": "A Blade template for a Livewire counter component. It shows how to use Livewire's wire:click directive to bind a button click to the increment method and display the current count.",
    "codeLanguage": "blade",
    "codeTokens": 83,
    "codeId": "https://github.com/laravel/docs/blob/12.x/frontend.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Frontend Development Options",
    "codeList": [
      {
        "language": "blade",
        "code": "<div>\n    <button wire:click=\"increment\">+</button>\n    <h1>{{ $count }}</h1>\n</div>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Custom Logger Factory Class Implementation",
    "codeDescription": "Implementation of a custom logger factory class that creates a Monolog instance for a custom channel.",
    "codeLanguage": "php",
    "codeTokens": 91,
    "codeId": "https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-18_snippet_18",
    "pageTitle": "Laravel Logging Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Logging;\n\nuse Monolog\\Logger;\n\nclass CreateCustomLogger\n{\n    /**\n     * Create a custom Monolog instance.\n     */\n    public function __invoke(array $config): Logger\n    {\n        return new Logger(/* ... */);\n    }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Using Laravel Resource in Route",
    "codeDescription": "Shows how to return a resource directly from a Laravel route definition using the findOrFail method and resource transformation.",
    "codeLanguage": "php",
    "codeTokens": 72,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_7",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\nRoute::get('/user/{id}', function (string $id) {\n    return User::findOrFail($id)->toUserResource();\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Creating Middleware with Parameters in Laravel",
    "codeDescription": "Illustrates how to create middleware that accepts additional parameters, using the example of an 'EnsureUserHasRole' middleware that checks if a user has a specific role.",
    "codeLanguage": "php",
    "codeTokens": 162,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_16",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass EnsureUserHasRole\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n     */\n    public function handle(Request $request, Closure $next, string $role): Response\n    {\n        if (! $request->user()->hasRole($role)) {\n            // Redirect...\n        }\n\n        return $next($request);\n    }\n\n}"
      },
      {
        "language": "php",
        "code": "use App\\Http\\Middleware\\EnsureUserHasRole;\n\nRoute::put('/post/{id}', function (string $id) {\n    // ...\n})->middleware(EnsureUserHasRole::class.':editor');"
      },
      {
        "language": "php",
        "code": "Route::put('/post/{id}', function (string $id) {\n    // ...\n})->middleware(EnsureUserHasRole::class.':editor,publisher');"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Storing Uploaded Files in Laravel",
    "codeDescription": "Move uploaded files to permanent storage using the store method. Files can be stored on local disk or cloud storage services configured in the filesystem.",
    "codeLanguage": "php",
    "codeTokens": 71,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_52",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$path = $request->photo->store('images');\n\n$path = $request->photo->store('images', 's3');"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Method Invocation with Dependency Injection",
    "codeDescription": "Demonstrates how to invoke methods with automatic dependency injection using the container's call method.",
    "codeLanguage": "php",
    "codeTokens": 60,
    "codeId": "https://github.com/laravel/docs/blob/12.x/container.md#2025-04-18_snippet_16",
    "pageTitle": "Laravel Service Container Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\PodcastStats;\nuse Illuminate\\Support\\Facades\\App;\n\n$stats = App::call([new PodcastStats, 'generate']);"
      },
      {
        "language": "php",
        "code": "use App\\Services\\AppleMusic;\nuse Illuminate\\Support\\Facades\\App;\n\n$result = App::call(function (AppleMusic $apple) {\n    // ...\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Defining an Interactive Console Command in Laravel",
    "codeDescription": "Example of creating a console command that asks for user input. This command asks for the user's name, presents a choice of programming languages, and outputs a response based on the inputs.",
    "codeLanguage": "php",
    "codeTokens": 129,
    "codeId": "https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Console Command Testing Guide",
    "codeList": [
      {
        "language": "php",
        "code": "Artisan::command('question', function () {\n    $name = $this->ask('What is your name?');\n\n    $language = $this->choice('Which language do you prefer?', [\n        'PHP',\n        'Ruby',\n        'Python',\n    ]);\n\n    $this->line('Your name is '.$name.' and you prefer '.$language.'.');\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing Terminable Middleware in Laravel",
    "codeDescription": "Demonstrates how to create terminable middleware that performs actions after the HTTP response has been sent to the browser, useful for tasks that don't need to delay the response.",
    "codeLanguage": "php",
    "codeTokens": 177,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_17",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace Illuminate\\Session\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass TerminatingMiddleware\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n     */\n    public function handle(Request $request, Closure $next): Response\n    {\n        return $next($request);\n    }\n\n    /**\n     * Handle tasks after the response has been sent to the browser.\n     */\n    public function terminate(Request $request, Response $response): void\n    {\n        // ...\n    }\n}"
      },
      {
        "language": "php",
        "code": "use App\\Http\\Middleware\\TerminatingMiddleware;\n\n/**\n * Register any application services.\n */\npublic function register(): void\n{\n    $this->app->singleton(TerminatingMiddleware::class);\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Merging Conditional Attributes in Laravel API Resource",
    "codeDescription": "Demonstrates using the mergeWhen() method to include multiple attributes based on a single condition.",
    "codeLanguage": "php",
    "codeTokens": 140,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_15",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "public function toArray(Request $request): array\n{\n    return [\n        'id' => $this->id,\n        'name' => $this->name,\n        'email' => $this->email,\n        $this->mergeWhen($request->user()->isAdmin(), [\n            'first-secret' => 'value',\n            'second-secret' => 'value',\n        ]),\n        'created_at' => $this->created_at,\n        'updated_at' => $this->updated_at,\n    ];\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Conditional Eloquent Pagination",
    "codeDescription": "Pagination of filtered Eloquent query results using where clause",
    "codeLanguage": "php",
    "codeTokens": 44,
    "codeId": "https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Database Pagination Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$users = User::where('votes', '>', 100)->paginate(15);"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing ThrottlesExceptions Middleware in Laravel Queue Jobs",
    "codeDescription": "Example showing how to implement exception throttling in Laravel queue jobs using ThrottlesExceptions middleware. The job will be throttled after 10 exceptions and delayed for 5 minutes, with a 30-minute timeout.",
    "codeLanguage": "php",
    "codeTokens": 148,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_16",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use DateTime;\nuse Illuminate\\Queue\\Middleware\\ThrottlesExceptions;\n\n/**\n * Get the middleware the job should pass through.\n *\n * @return array<int, object>\n */\npublic function middleware(): array\n{\n    return [new ThrottlesExceptions(10, 5 * 60)];\n}\n\n/**\n * Determine the time at which the job should timeout.\n */\npublic function retryUntil(): DateTime\n{\n    return now()->addMinutes(30);\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Resetting Database After Tests with RefreshDatabase in Pest",
    "codeDescription": "Demonstrates how to use the RefreshDatabase trait in Pest tests to reset the database state after each test, preventing data from previous tests interfering with subsequent tests.",
    "codeLanguage": "php",
    "codeTokens": 88,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Database Testing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nuses(RefreshDatabase::class);\n\ntest('basic example', function () {\n    $response = $this->get('/');\n\n    // ...\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Defining Job Failure Handling in Laravel Queue Jobs",
    "codeDescription": "Implementation of a Laravel queue job with a failed method that gets invoked when a job fails. The failed method receives the exception that caused the failure and can be used to send notifications or handle cleanup tasks.",
    "codeLanguage": "php",
    "codeTokens": 205,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_74",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Jobs;\n\nuse App\\Models\\Podcast;\nuse App\\Services\\AudioProcessor;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Queue\\Queueable;\nuse Throwable;\n\nclass ProcessPodcast implements ShouldQueue\n{\n    use Queueable;\n\n    /**\n     * Create a new job instance.\n     */\n    public function __construct(\n        public Podcast $podcast,\n    ) {}\n\n    /**\n     * Execute the job.\n     */\n    public function handle(AudioProcessor $processor): void\n    {\n        // Process uploaded podcast...\n    }\n\n    /**\n     * Handle a job failure.\n     */\n    public function failed(?Throwable $exception): void\n    {\n        // Send user notification of failure, etc...\n    }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Delayed Job Dispatching in Laravel",
    "codeDescription": "Shows how to dispatch a job with a delay of 10 minutes using the delay method.",
    "codeLanguage": "php",
    "codeTokens": 144,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_24",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Jobs\\ProcessPodcast;\nuse App\\Models\\Podcast;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass PodcastController extends Controller\n{\n    /**\n     * Store a new podcast.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        $podcast = Podcast::create(/* ... */);\n\n        // ...\n\n        ProcessPodcast::dispatch($podcast)\n            ->delay(now()->addMinutes(10));\n\n        return redirect('/podcasts');\n    }\n}"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Basic Job Dispatching in Laravel Controller",
    "codeDescription": "Example of dispatching a job from a Laravel controller after creating a podcast record.",
    "codeLanguage": "php",
    "codeTokens": 132,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_23",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Jobs\\ProcessPodcast;\nuse App\\Models\\Podcast;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass PodcastController extends Controller\n{\n    /**\n     * Store a new podcast.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        $podcast = Podcast::create(/* ... */);\n\n        // ...\n\n        ProcessPodcast::dispatch($podcast);\n\n        return redirect('/podcasts');\n    }\n}"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Customizing UUID Generation in Laravel Model",
    "codeDescription": "Shows how to override default UUID generation and specify which columns should receive UUIDs in an Eloquent model.",
    "codeLanguage": "php",
    "codeTokens": 118,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_6",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use Ramsey\\Uuid\\Uuid;\n\n/**\n * Generate a new UUID for the model.\n */\npublic function newUniqueId(): string\n{\n    return (string) Uuid::uuid4();\n}\n\n/**\n * Get the columns that should receive a unique identifier.\n *\n * @return array<int, string>\n */\npublic function uniqueIds(): array\n{\n    return ['id', 'discount_code'];\n}"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Adding Global Log Context to Exceptions",
    "codeDescription": "Example of adding global contextual data to all exception log messages using the context method in the bootstrap/app.php file.",
    "codeLanguage": "php",
    "codeTokens": 68,
    "codeId": "https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Error Handling Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->context(fn () => [\n        'foo' => 'bar',\n    ]);\n})"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Manually Checking and Incrementing Rate Limit Attempts in Laravel",
    "codeDescription": "This code demonstrates how to manually check if too many attempts have been made and how to increment the attempt count using the RateLimiter facade in Laravel.",
    "codeLanguage": "php",
    "codeTokens": 106,
    "codeId": "https://github.com/laravel/docs/blob/12.x/rate-limiting.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Rate Limiting Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\RateLimiter;\n\nif (RateLimiter::tooManyAttempts('send-message:'.$user->id, $perMinute = 5)) {\n    return 'Too many attempts!';\n}\n\nRateLimiter::increment('send-message:'.$user->id);\n\n// Send message..."
      }
    ],
    "relevance": 0.947
  },
  {
    "codeTitle": "Managing Session Data with session() Helper in PHP",
    "codeDescription": "Retrieves or sets session values. Provides convenient access to Laravel's session functionality for storing and retrieving user-specific data.",
    "codeLanguage": "php",
    "codeTokens": 45,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_80",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$value = session('key');"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Defining Layout Component",
    "codeDescription": "Shows how to define a layout component for use across multiple pages in a Laravel application.",
    "codeLanguage": "blade",
    "codeTokens": 96,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_50",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<!-- resources/views/components/layout.blade.php -->\n\n<html>\n    <head>\n        <title>{{ $title ?? 'Todo Manager' }}</title>\n    </head>\n    <body>\n        <h1>Todos</h1>\n        <hr/>\n        {{ $slot }}\n    </body>\n</html>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing Gate After Hook in Laravel",
    "codeDescription": "Shows how to implement an after hook that executes after all authorization checks. The after hook can modify authorization results for specific cases.",
    "codeLanguage": "php",
    "codeTokens": 84,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_12",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\nGate::after(function (User $user, string $ability, bool|null $result, mixed $arguments) {\n    if ($user->isAdministrator()) {\n        return true;\n    }\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Retrieving Input as a Collection in Laravel",
    "codeDescription": "Methods to retrieve all input data as a Laravel collection, which provides powerful methods for working with arrays of data.",
    "codeLanguage": "php",
    "codeTokens": 47,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_5",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$input = $request->collect();"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Accessing Request Data with request() Helper in PHP",
    "codeDescription": "Returns the current request instance or obtains an input field's value from the current request. Provides convenient access to HTTP request data.",
    "codeLanguage": "php",
    "codeTokens": 55,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_70",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$request = request();\n\n$value = request('key', $default);"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Authenticatable Contract Interface in Laravel",
    "codeDescription": "Definition of the Authenticatable contract interface that must be implemented by user models in Laravel's authentication system.",
    "codeLanguage": "php",
    "codeTokens": 103,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_24",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace Illuminate\\Contracts\\Auth;\n\ninterface Authenticatable\n{\n    public function getAuthIdentifierName();\n    public function getAuthIdentifier();\n    public function getAuthPasswordName();\n    public function getAuthPassword();\n    public function getRememberToken();\n    public function setRememberToken($value);\n    public function getRememberTokenName();\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Creating Basic Laravel API Resource",
    "codeDescription": "Demonstrates how to create a basic Laravel API resource class that transforms a User model into an array response. Includes standard model attributes like id, name, email and timestamps.",
    "codeLanguage": "php",
    "codeTokens": 179,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass UserResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array<string, mixed>\n     */\n    public function toArray(Request $request): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n            'created_at' => $this->created_at,\n            'updated_at' => $this->updated_at,\n        ];\n    }\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing Custom Cache Driver in Laravel",
    "codeDescription": "Provides a skeleton for implementing a custom cache driver (MongoDB in this example) by implementing the Illuminate\\Contracts\\Cache\\Store interface. Each method needs to be implemented using the specific storage technology.",
    "codeLanguage": "php",
    "codeTokens": 180,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_21",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Extensions;\n\nuse Illuminate\\Contracts\\Cache\\Store;\n\nclass MongoStore implements Store\n{\n    public function get($key) {}\n    public function many(array $keys) {}\n    public function put($key, $value, $seconds) {}\n    public function putMany(array $values, $seconds) {}\n    public function increment($key, $value = 1) {}\n    public function decrement($key, $value = 1) {}\n    public function forever($key, $value) {}\n    public function forget($key) {}\n    public function flush() {}\n    public function getPrefix() {}\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Running Database Seeders - Laravel Artisan Commands",
    "codeDescription": "Various Artisan commands for running database seeders, including options for specific seeders and combining with migrations.",
    "codeLanguage": "shell",
    "codeTokens": 82,
    "codeId": "https://github.com/laravel/docs/blob/12.x/seeding.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Database Seeding Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan db:seed\n\nphp artisan db:seed --class=UserSeeder\n\nphp artisan migrate:fresh --seed\n\nphp artisan migrate:fresh --seed --seeder=UserSeeder\n\nphp artisan db:seed --force"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Retrieving Uploaded Files in Laravel",
    "codeDescription": "Access files uploaded in a request using the file method or dynamic properties on the Request instance. Returns an UploadedFile instance with methods for file manipulation.",
    "codeLanguage": "php",
    "codeTokens": 63,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_48",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$file = $request->file('photo');\n\n$file = $request->photo;"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Customizing Searchable Data for Laravel Scout",
    "codeDescription": "This snippet shows how to customize the data that gets sent to the search index by overriding the toSearchableArray method. This allows for selective indexing of model attributes or custom formatting of search data.",
    "codeLanguage": "php",
    "codeTokens": 150,
    "codeId": "https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-18_snippet_13",
    "pageTitle": "Laravel Scout Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Laravel\\Scout\\Searchable;\n\nclass Post extends Model\n{\n    use Searchable;\n\n    /**\n     * Get the indexable data array for the model.\n     *\n     * @return array<string, mixed>\n     */\n    public function toSearchableArray(): array\n    {\n        $array = $this->toArray();\n\n        // Customize the data array...\n\n        return $array;\n    }\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Defining Multiple Rate Limits in Laravel",
    "codeDescription": "This code demonstrates how to apply multiple rate limits to a single rate limiter. It combines a global limit of 500 requests per minute with a per-email limit of 3 requests per minute.",
    "codeLanguage": "php",
    "codeTokens": 99,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_43",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "RateLimiter::for('login', function (Request $request) {\n    return [\n        Limit::perMinute(500),\n        Limit::perMinute(3)->by($request->input('email')),\n    ];\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Restarting Laravel Queue Workers",
    "codeDescription": "Command to gracefully restart all queue workers during deployment, ensuring no jobs are lost in the process.",
    "codeLanguage": "shell",
    "codeTokens": 39,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_66",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan queue:restart"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Queue Worker with Retry Attempts",
    "codeDescription": "Examples of running queue workers with specified retry attempts and backoff delays.",
    "codeLanguage": "shell",
    "codeTokens": 55,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_72",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan queue:work redis --tries=3\nphp artisan queue:work redis --tries=3 --backoff=3"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Deferring Concurrent Tasks with Laravel",
    "codeDescription": "Example of using the defer method to execute closures concurrently after the HTTP response has been sent to the user, which is useful for background processing.",
    "codeLanguage": "php",
    "codeTokens": 82,
    "codeId": "https://github.com/laravel/docs/blob/12.x/concurrency.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Concurrency Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Services\\Metrics;\nuse Illuminate\\Support\\Facades\\Concurrency;\n\nConcurrency::defer([\n    fn () => Metrics::report('users'),\n    fn () => Metrics::report('orders'),\n]);"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Toggling Foreign Key Constraints in Laravel Migrations",
    "codeDescription": "Shows how to enable, disable, or temporarily disable foreign key constraints during migrations. The withoutForeignKeyConstraints method provides a closure-based approach for temporarily disabling constraints.",
    "codeLanguage": "php",
    "codeTokens": 77,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_60",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "Schema::enableForeignKeyConstraints();\n\nSchema::disableForeignKeyConstraints();\n\nSchema::withoutForeignKeyConstraints(function () {\n    // Constraints disabled within this closure...\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Running Migrations with Artisan",
    "codeDescription": "Command to execute all pending migrations in a Laravel application. This applies all database schema changes that haven't been run yet.",
    "codeLanguage": "shell",
    "codeTokens": 44,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan migrate"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Service Injection in Laravel Blade Templates",
    "codeDescription": "Demonstrates how to use the @inject directive to retrieve a service from the Laravel service container in a Blade template.",
    "codeLanguage": "blade",
    "codeTokens": 69,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_59",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "@inject('metrics', 'App\\Services\\MetricsService')\n\n<div>\n    Monthly Revenue: {{ $metrics->monthlyRevenue() }}.\n</div>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Basic Route with Blade View PHP",
    "codeDescription": "Example of returning a Blade view from a route with data passed to the view",
    "codeLanguage": "php",
    "codeTokens": 54,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/', function () {\n    return view('greeting', ['name' => 'Finn']);\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Managing Laravel's Default Global Middleware Stack",
    "codeDescription": "Example of manually managing Laravel's global middleware stack by replacing it with a custom stack. This allows you to customize the default middleware included in every request.",
    "codeLanguage": "php",
    "codeTokens": 167,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "->withMiddleware(function (Middleware $middleware) {\n    $middleware->use([\n        \\Illuminate\\Foundation\\Http\\Middleware\\InvokeDeferredCallbacks::class,\n        // \\Illuminate\\Http\\Middleware\\TrustHosts::class,\n        \\Illuminate\\Http\\Middleware\\TrustProxies::class,\n        \\Illuminate\\Http\\Middleware\\HandleCors::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance::class,\n        \\Illuminate\\Http\\Middleware\\ValidatePostSize::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\TrimStrings::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull::class,\n    ]);\n})"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Running Concurrent Tasks with Laravel Concurrency",
    "codeDescription": "Example of using the Concurrency facade's run method to execute database queries concurrently and retrieve their results as an array.",
    "codeLanguage": "php",
    "codeTokens": 91,
    "codeId": "https://github.com/laravel/docs/blob/12.x/concurrency.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Concurrency Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Concurrency;\nuse Illuminate\\Support\\Facades\\DB;\n\n[$userCount, $orderCount] = Concurrency::run([\n    fn () => DB::table('users')->count(),\n    fn () => DB::table('orders')->count(),\n]);"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Basic Job Chaining with the Bus Facade",
    "codeDescription": "Example of chaining multiple jobs to run sequentially. Each job in the chain will only execute after the previous job completes successfully, using Laravel's Bus facade.",
    "codeLanguage": "php",
    "codeTokens": 106,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_29",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Jobs\\OptimizePodcast;\nuse App\\Jobs\\ProcessPodcast;\nuse App\\Jobs\\ReleasePodcast;\nuse Illuminate\\Support\\Facades\\Bus;\n\nBus::chain([\n    new ProcessPodcast,\n    new OptimizePodcast,\n    new ReleasePodcast,\n])->dispatch();"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Laravel Unique Job Implementation",
    "codeDescription": "Example of implementing unique jobs with custom uniqueness constraints and timeout settings.",
    "codeLanguage": "php",
    "codeTokens": 166,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_8",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nuse App\\Models\\Product;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Contracts\\Queue\\ShouldBeUnique;\n\nclass UpdateSearchIndex implements ShouldQueue, ShouldBeUnique\n{\n    /**\n     * The product instance.\n     *\n     * @var \\App\\Product\n     */\n    public $product;\n\n    /**\n     * The number of seconds after which the job's unique lock will be released.\n     *\n     * @var int\n     */\n    public $uniqueFor = 3600;\n\n    /**\n     * Get the unique ID for the job.\n     */\n    public function uniqueId(): string\n    {\n        return $this->product->id;\n    }\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Configuring Timestamps in Laravel Model",
    "codeDescription": "Shows how to disable automatic timestamp management and customize timestamp format in Eloquent models.",
    "codeLanguage": "php",
    "codeTokens": 85,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_8",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * Indicates if the model should be timestamped.\n     *\n     * @var bool\n     */\n    public $timestamps = false;\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing Post-Transaction Event Dispatch in Laravel",
    "codeDescription": "Example of implementing ShouldDispatchAfterCommit interface to dispatch events after database transaction completion.",
    "codeLanguage": "php",
    "codeTokens": 135,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_15",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Events;\n\nuse App\\Models\\Order;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Contracts\\Events\\ShouldDispatchAfterCommit;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass OrderShipped implements ShouldDispatchAfterCommit\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    /**\n     * Create a new event instance.\n     */\n    public function __construct(\n        public Order $order,\n    ) {}\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Listening for Query Events in Laravel Service Provider",
    "codeDescription": "Shows how to register a listener for database query events in a Laravel service provider's boot method.",
    "codeLanguage": "php",
    "codeTokens": 88,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_14",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "public function boot(): void\n{\n    DB::listen(function (QueryExecuted $query) {\n        // $query->sql;\n        // $query->bindings;\n        // $query->time;\n        // $query->toRawSql();\n    });\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Modifying Existing Columns with Change Method in Laravel Migrations",
    "codeDescription": "This example shows how to modify an existing column's properties, specifically increasing the size of a string column from 25 to 50 characters.",
    "codeLanguage": "php",
    "codeTokens": 72,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_41",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "Schema::table('users', function (Blueprint $table) {\n    $table->string('name', 50)->change();\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing Post-processing Middleware in Laravel",
    "codeDescription": "Example of middleware that performs actions after the request is handled by the application. This pattern is useful for modifying responses, adding headers, or logging response data.",
    "codeLanguage": "php",
    "codeTokens": 111,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass AfterMiddleware\n{\n    public function handle(Request $request, Closure $next): Response\n    {\n        $response = $next($request);\n\n        // Perform action\n\n        return $response;\n    }\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Specifying Foreign Key Actions in Laravel Migrations",
    "codeDescription": "Shows how to specify the desired action for ON DELETE and ON UPDATE properties of a foreign key constraint, controlling how modifications to referenced records should be handled.",
    "codeLanguage": "php",
    "codeTokens": 74,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_56",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "$table->foreignId('user_id')\n    ->constrained()\n    ->onUpdate('cascade')\n    ->onDelete('cascade');"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using Component Methods in Blade Templates",
    "codeDescription": "Shows how to call component methods from within the component's template, particularly for conditional attribute rendering.",
    "codeLanguage": "blade",
    "codeTokens": 63,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_26",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<option {{ $isSelected($value) ? 'selected' : '' }} value=\"{{ $value }}\">\n    {{ $label }}\n</option>"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Filtering Eloquent Collections with Reject Method",
    "codeDescription": "Demonstrates how to filter an Eloquent collection using the reject method to remove cancelled flights from the results.",
    "codeLanguage": "php",
    "codeTokens": 79,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_17",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$flights = Flight::where('destination', 'Paris')->get();\n\n$flights = $flights->reject(function (Flight $flight) {\n    return $flight->cancelled;\n});"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Custom Exception Class Implementation",
    "codeDescription": "Shows how to create a custom exception class with report and render methods for handling specific application exceptions.",
    "codeLanguage": "php",
    "codeTokens": 123,
    "codeId": "https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-18_snippet_15",
    "pageTitle": "Laravel Error Handling Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Exceptions;\n\nuse Exception;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\n\nclass InvalidOrderException extends Exception\n{\n    /**\n     * Report the exception.\n     */\n    public function report(): void\n    {\n        // ...\n    }\n\n    /**\n     * Render the exception as an HTTP response.\n     */\n    public function render(Request $request): Response\n    {\n        return response(/* ... */);\n    }\n}"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Comparing Laravel Facade and Helper Function Syntax",
    "codeDescription": "Shows the equivalence between using a facade and a helper function in Laravel, demonstrating how both approaches accomplish the same task of rendering a view.",
    "codeLanguage": "php",
    "codeTokens": 57,
    "codeId": "https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Facades",
    "codeList": [
      {
        "language": "php",
        "code": "return Illuminate\\Support\\Facades\\View::make('profile');\n\nreturn view('profile');"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Appending Query String Values to Pagination Links in Laravel",
    "codeDescription": "Shows how to append additional query string parameters to pagination links using the appends method. This example adds 'sort=votes' to each pagination link.",
    "codeLanguage": "php",
    "codeTokens": 87,
    "codeId": "https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-18_snippet_8",
    "pageTitle": "Laravel Database Pagination Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\nRoute::get('/users', function () {\n    $users = User::paginate(15);\n\n    $users->appends(['sort' => 'votes']);\n\n    // ...\n});"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Including Subviews in Blade Templates",
    "codeDescription": "Demonstrates various methods of including subviews in Blade templates using @include, @includeIf, @includeWhen, @includeUnless, and @includeFirst directives.",
    "codeLanguage": "blade",
    "codeTokens": 75,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_15",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<div>\n    @include('shared.errors')\n\n    <form>\n        <!-- Form Contents -->\n    </form>\n</div>"
      },
      {
        "language": "blade",
        "code": "@include('view.name', ['status' => 'complete'])"
      },
      {
        "language": "blade",
        "code": "@includeIf('view.name', ['status' => 'complete'])"
      },
      {
        "language": "blade",
        "code": "@includeWhen($boolean, 'view.name', ['status' => 'complete'])\n\n@includeUnless($boolean, 'view.name', ['status' => 'complete'])"
      },
      {
        "language": "blade",
        "code": "@includeFirst(['custom.admin', 'admin'], ['status' => 'complete'])"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Handling Password Reset Form Submission in Laravel",
    "codeDescription": "This snippet defines a route to handle the password reset form submission. It validates the request, updates the user's password, and handles the response based on the reset status.",
    "codeLanguage": "php",
    "codeTokens": 278,
    "codeId": "https://github.com/laravel/docs/blob/12.x/passwords.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Password Reset Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\nuse Illuminate\\Auth\\Events\\PasswordReset;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Password;\nuse Illuminate\\Support\\Str;\n\nRoute::post('/reset-password', function (Request $request) {\n    $request->validate([\n        'token' => 'required',\n        'email' => 'required|email',\n        'password' => 'required|min:8|confirmed',\n    ]);\n\n    $status = Password::reset(\n        $request->only('email', 'password', 'password_confirmation', 'token'),\n        function (User $user, string $password) {\n            $user->forceFill([\n                'password' => Hash::make($password)\n            ])->setRememberToken(Str::random(60));\n\n            $user->save();\n\n            event(new PasswordReset($user));\n        }\n    );\n\n    return $status === Password::PasswordReset\n        ? redirect()->route('login')->with('status', __($status))\n        : back()->withErrors(['email' => [__($status)]]);\n})->middleware('guest')->name('password.update');"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Customizing Eloquent Model Primary Key in Laravel",
    "codeDescription": "Examples of customizing the primary key column name, disabling auto-incrementing, and specifying the key type for an Eloquent model.",
    "codeLanguage": "php",
    "codeTokens": 177,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_4",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The primary key associated with the table.\n     *\n     * @var string\n     */\n    protected $primaryKey = 'flight_id';\n}\n\nclass Flight extends Model\n{\n    /**\n     * Indicates if the model's ID is auto-incrementing.\n     *\n     * @var bool\n     */\n    public $incrementing = false;\n}\n\nclass Flight extends Model\n{\n    /**\n     * The data type of the primary key ID.\n     *\n     * @var string\n     */\n    protected $keyType = 'string';\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Using Local Scopes in Laravel Eloquent Queries",
    "codeDescription": "Shows how to utilize previously defined local scopes when querying Eloquent models. Multiple scopes can be chained together to build complex queries.",
    "codeLanguage": "php",
    "codeTokens": 65,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_60",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\n$users = User::popular()->active()->orderBy('created_at')->get();"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Adding Request ID Context to Logs in PHP with Laravel Middleware",
    "codeDescription": "Example of using middleware to add a request ID to the log context for all subsequent log entries.",
    "codeLanguage": "php",
    "codeTokens": 188,
    "codeId": "https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-18_snippet_9",
    "pageTitle": "Laravel Logging Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Support\\Str;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass AssignRequestId\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n     */\n    public function handle(Request $request, Closure $next): Response\n    {\n        $requestId = (string) Str::uuid();\n\n        Log::withContext([\n            'request-id' => $requestId\n        ]);\n\n        $response = $next($request);\n\n        $response->headers->set('Request-Id', $requestId);\n\n        return $response;\n    }\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Adding CSRF Token Field to HTML Form in Laravel Blade",
    "codeDescription": "Demonstrates how to include a hidden CSRF token field in an HTML form using the @csrf Blade directive for CSRF protection.",
    "codeLanguage": "blade",
    "codeTokens": 59,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_55",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<form method=\"POST\" action=\"/profile\">\n    @csrf\n\n    ...\n</form>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Authorizing Actions in Laravel Controller Using User Model",
    "codeDescription": "This snippet demonstrates how to use the 'can' and 'cannot' methods of the User model to authorize actions within a controller method.",
    "codeLanguage": "php",
    "codeTokens": 138,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_21",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Post;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass PostController extends Controller\n{\n    /**\n     * Update the given post.\n     */\n    public function update(Request $request, Post $post): RedirectResponse\n    {\n        if ($request->user()->cannot('update', $post)) {\n            abort(403);\n        }\n\n        // Update the post...\n\n        return redirect('/posts');\n    }\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Creating Belongs To Relationships in Laravel Factories",
    "codeDescription": "Shows how to define 'belongs to' relationships using the for method in Laravel factories.",
    "codeLanguage": "php",
    "codeTokens": 83,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_20",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Post;\nuse App\\Models\\User;\n\n$posts = Post::factory()\n    ->count(3)\n    ->for(User::factory()->state([\n        'name' => 'Jessica Archer',\n    ]))\n    ->create();"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Checking for File Uploads in Laravel",
    "codeDescription": "Verify if a file was included in the current request using the hasFile method. This is useful for conditional processing of optional file uploads.",
    "codeLanguage": "php",
    "codeTokens": 58,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_49",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "if ($request->hasFile('photo')) {\n    // ...\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Adding Jobs to Laravel Batches Dynamically in PHP",
    "codeDescription": "Shows how to add additional jobs to a batch from within a batched job, useful for processing large numbers of jobs that may take too long to dispatch during a web request.",
    "codeLanguage": "php",
    "codeTokens": 100,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_52",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$batch = Bus::batch([\n    new LoadImportBatch,\n    new LoadImportBatch,\n    new LoadImportBatch,\n])->then(function (Batch $batch) {\n    // All jobs completed successfully...\n})->name('Import Contacts')->dispatch();"
      },
      {
        "language": "php",
        "code": "use App\\Jobs\\ImportContacts;\nuse Illuminate\\Support\\Collection;\n\n/**\n * Execute the job.\n */\npublic function handle(): void\n{\n    if ($this->batch()->cancelled()) {\n        return;\n    }\n\n    $this->batch()->add(Collection::times(1000, function () {\n        return new ImportContacts;\n    }));\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Adding Query String Parameters to Named Routes",
    "codeDescription": "Shows how additional parameters beyond route parameters are automatically added as query string parameters.",
    "codeLanguage": "php",
    "codeTokens": 85,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_24",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/user/{id}/profile', function (string $id) {\n    // ...\n})->name('profile');\n\n$url = route('profile', ['id' => 1, 'photos' => 'yes']);\n\n// /user/1/profile?photos=yes"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Customizing Foreign Key Constraints in Laravel Migrations",
    "codeDescription": "Demonstrates how to customize foreign key constraints by specifying the referenced table name and custom index name. This is useful when table names don't match Laravel's conventions.",
    "codeLanguage": "php",
    "codeTokens": 92,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_55",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "Schema::table('posts', function (Blueprint $table) {\n    $table->foreignId('user_id')->constrained(\n        table: 'users', indexName: 'posts_user_id'\n    );\n});"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Asynchronous Process Execution",
    "codeDescription": "Demonstrates how to run processes asynchronously and monitor their execution status.",
    "codeLanguage": "php",
    "codeTokens": 62,
    "codeId": "https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Process Management Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$process = Process::timeout(120)->start('bash import.sh');\n\nwhile ($process->running()) {\n    // ...\n}\n\n$result = $process->wait();"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Simple Route Parameter Injection",
    "codeDescription": "Shows how to type-hint and automatically inject the Request object into a route closure.",
    "codeLanguage": "php",
    "codeTokens": 53,
    "codeId": "https://github.com/laravel/docs/blob/12.x/container.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Service Container Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Http\\Request;\n\nRoute::get('/', function (Request $request) {\n    // ...\n});"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Testing Event Dispatching in Laravel with PHPUnit",
    "codeDescription": "Shows how to test event dispatching using Laravel's Event facade with PHPUnit testing framework.",
    "codeLanguage": "php",
    "codeTokens": 195,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_20",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace Tests\\Feature;\n\nuse App\\Events\\OrderFailedToShip;\nuse App\\Events\\OrderShipped;\nuse Illuminate\\Support\\Facades\\Event;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    /**\n     * Test order shipping.\n     */\n    public function test_orders_can_be_shipped(): void\n    {\n        Event::fake();\n\n        // Perform order shipping...\n\n        // Assert that an event was dispatched...\n        Event::assertDispatched(OrderShipped::class);\n\n        // Assert an event was dispatched twice...\n        Event::assertDispatched(OrderShipped::class, 2);\n\n        // Assert an event was not dispatched...\n        Event::assertNotDispatched(OrderFailedToShip::class);\n\n        // Assert that no events were dispatched...\n        Event::assertNothingDispatched();\n    }\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Renaming Database Columns in Laravel Migrations",
    "codeDescription": "This snippet demonstrates how to rename an existing column in a database table using the renameColumn method.",
    "codeLanguage": "php",
    "codeTokens": 62,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_44",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "Schema::table('users', function (Blueprint $table) {\n    $table->renameColumn('from', 'to');\n});"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Manually Managing Transactions in Laravel",
    "codeDescription": "Shows how to manually begin, rollback, and commit database transactions using the DB facade methods.",
    "codeLanguage": "php",
    "codeTokens": 60,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_18",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\DB;\n\nDB::beginTransaction();\n\n// ... operations\n\nDB::rollBack();\n\n// or\n\nDB::commit();"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Named Route URL Generation",
    "codeDescription": "Demonstrates route() helper function for generating URLs for named routes with parameters.",
    "codeLanguage": "php",
    "codeTokens": 69,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_50",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$url = route('route.name');\n\n$url = route('route.name', ['id' => 1]);\n\n$url = route('route.name', ['id' => 1], false);"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Caching Laravel Views",
    "codeDescription": "This Artisan command precompiles all Blade views, eliminating the need for on-demand compilation. It improves the performance of each request that returns a view.",
    "codeLanguage": "shell",
    "codeTokens": 51,
    "codeId": "https://github.com/laravel/docs/blob/12.x/deployment.md#2025-04-18_snippet_7",
    "pageTitle": "Laravel Deployment Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan view:cache"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Creating Named Routes in Laravel",
    "codeDescription": "Demonstrates how to assign names to routes for convenient URL generation and redirects.",
    "codeLanguage": "php",
    "codeTokens": 49,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_20",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/user/profile', function () {\n    // ...\n})->name('profile');"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Applying Column Modifiers to Foreign Keys in Laravel Migrations",
    "codeDescription": "Demonstrates the correct order for applying column modifiers to foreign keys. Column modifiers must be called before the constrained method when setting up foreign key constraints.",
    "codeLanguage": "php",
    "codeTokens": 64,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_57",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "$table->foreignId('user_id')\n    ->nullable()\n    ->constrained();"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Retrieving Nested Array Values with data_get() in PHP",
    "codeDescription": "The data_get() function retrieves values from nested arrays or objects using 'dot' notation. It supports default values, wildcards, and special placeholders for accessing first or last items in arrays.",
    "codeLanguage": "php",
    "codeTokens": 90,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_32",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$data = ['products' => ['desk' => ['price' => 100]]];\n\n$price = data_get($data, 'products.desk.price');\n\n// 100"
      },
      {
        "language": "php",
        "code": "$discount = data_get($data, 'products.desk.discount', 0);\n\n// 0"
      },
      {
        "language": "php",
        "code": "$data = [\n    'product-one' => ['name' => 'Desk 1', 'price' => 100],\n    'product-two' => ['name' => 'Desk 2', 'price' => 150],\n];\n\ndata_get($data, '*.name');\n\n// ['Desk 1', 'Desk 2'];"
      },
      {
        "language": "php",
        "code": "$flight = [\n    'segments' => [\n        ['from' => 'LHR', 'departure' => '9:00', 'to' => 'IST', 'arrival' => '15:00'],\n        ['from' => 'IST', 'departure' => '16:00', 'to' => 'PKX', 'arrival' => '20:00'],\n    ],\n];\n\ndata_get($flight, 'segments.{first}.arrival');\n\n// 15:00"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Using Old Input in Blade Templates",
    "codeDescription": "Populate form fields with old input data using the global old helper in Blade templates. This is useful for repopulating forms after validation errors.",
    "codeLanguage": "blade",
    "codeTokens": 62,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_44",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "blade",
        "code": "<input type=\"text\" name=\"username\" value=\"{{ old('username') }}\">"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Restoring Multiple Soft Deleted Models",
    "codeDescription": "Uses the withTrashed scope and restore method to restore multiple soft deleted models that match specific criteria. This performs a mass restore operation.",
    "codeLanguage": "php",
    "codeTokens": 67,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_49",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "Flight::withTrashed()\n    ->where('airline_id', 1)\n    ->restore();"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Previewing Migration SQL Statements",
    "codeDescription": "Command to see the SQL statements that will be executed by migrations without actually running them. Useful for verifying changes before applying them to the database.",
    "codeLanguage": "shell",
    "codeTokens": 51,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_8",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan migrate --pretend"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Writing Policy Methods in Laravel",
    "codeDescription": "Example of implementing an authorization policy method for updating posts, showing model-based authorization logic.",
    "codeLanguage": "php",
    "codeTokens": 105,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_17",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\Post;\nuse App\\Models\\User;\n\nclass PostPolicy\n{\n    /**\n     * Determine if the given post can be updated by the user.\n     */\n    public function update(User $user, Post $post): bool\n    {\n        return $user->id === $post->user_id;\n    }\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Checking Remaining Attempts and Incrementing in Laravel Rate Limiting",
    "codeDescription": "This snippet shows how to check the remaining attempts for a rate-limited action and increment the attempt count if attempts are still available using the RateLimiter facade in Laravel.",
    "codeLanguage": "php",
    "codeTokens": 103,
    "codeId": "https://github.com/laravel/docs/blob/12.x/rate-limiting.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Rate Limiting Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\RateLimiter;\n\nif (RateLimiter::remaining('send-message:'.$user->id, $perMinute = 5)) {\n    RateLimiter::increment('send-message:'.$user->id);\n\n    // Send message...\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Performing Operations Without Updating Timestamps",
    "codeDescription": "Demonstrates how to perform model operations without modifying the updated_at timestamp.",
    "codeLanguage": "php",
    "codeTokens": 48,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_11",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "Model::withoutTimestamps(fn () => $post->increment('reads'));"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "MySQL Database Configuration in .env File",
    "codeDescription": "This sample configuration shows how to set up MySQL database connection parameters in the Laravel .env file, including host, port, database name, username, and password.",
    "codeLanguage": "ini",
    "codeTokens": 81,
    "codeId": "https://github.com/laravel/docs/blob/12.x/installation.md#2025-04-18_snippet_7",
    "pageTitle": "Laravel Installation Guide",
    "codeList": [
      {
        "language": "ini",
        "code": "DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=laravel\nDB_USERNAME=root\nDB_PASSWORD="
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Creating a Global Rate Limiter in Laravel",
    "codeDescription": "This snippet demonstrates how to create a global rate limiter that applies a limit of 1000 requests per minute for all routes assigned to it. It uses the RateLimiter facade with a simple configuration.",
    "codeLanguage": "php",
    "codeTokens": 124,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_38",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Cache\\RateLimiting\\Limit;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\RateLimiter;\n\n/**\n * Bootstrap any application services.\n */\nprotected function boot(): void\n{\n    RateLimiter::for('global', function (Request $request) {\n        return Limit::perMinute(1000);\n    });\n}"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Blade Function Output",
    "codeDescription": "Example of outputting a PHP function result in a Blade template",
    "codeLanguage": "blade",
    "codeTokens": 38,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "The current UNIX timestamp is {{ time() }}."
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Checking for Model Presence in Eloquent Collection",
    "codeDescription": "Shows how to use the contains method to check if a specific model or primary key exists in an Eloquent collection.",
    "codeLanguage": "php",
    "codeTokens": 57,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#2025-04-18_snippet_3",
    "pageTitle": "Eloquent Collections in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$users->contains(1);\n\n$users->contains(User::find(1));"
      }
    ],
    "relevance": 0.937
  },
  {
    "codeTitle": "Registering an Observer with ObservedBy Attribute in Laravel",
    "codeDescription": "Example of using the ObservedBy attribute to register a model observer directly on the model class. This attaches the UserObserver to the User model to listen for lifecycle events.",
    "codeLanguage": "php",
    "codeTokens": 91,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_75",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Observers\\UserObserver;\nuse Illuminate\\Database\\Eloquent\\Attributes\\ObservedBy;\n\n#[ObservedBy([UserObserver::class])]\nclass User extends Authenticatable\n{\n    //\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Conditional Execution with when() in PHP",
    "codeDescription": "The when() function returns a value if a condition is true, otherwise returns null. It can be used for conditional attribute rendering in views or other conditional logic.",
    "codeLanguage": "php",
    "codeTokens": 70,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_95",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$value = when(true, 'Hello World');\n\n$value = when(true, fn () => 'Hello World');"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Adding Simple Where Clause to Scout Search Queries",
    "codeDescription": "Shows how to add a basic where clause to Scout search queries to filter results by a specific field value.",
    "codeLanguage": "php",
    "codeTokens": 61,
    "codeId": "https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-18_snippet_32",
    "pageTitle": "Laravel Scout Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Order;\n\n$orders = Order::search('Star Trek')->where('user_id', 1)->get();"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Dispatching High Priority Queue Jobs in Laravel",
    "codeDescription": "Example of dispatching a job to a high priority queue in Laravel. Shows how to override the default low priority queue configuration.",
    "codeLanguage": "php",
    "codeTokens": 50,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_64",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "dispatch((new Job)->onQueue('high'));"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Accessing Array Input Using Dot Notation in Laravel",
    "codeDescription": "Using dot notation to access values within nested array inputs in Laravel requests.",
    "codeLanguage": "php",
    "codeTokens": 57,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_9",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$name = $request->input('products.0.name');\n\n$names = $request->input('products.*.name');"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementing Laravel Contracts in Event Listeners with Dependency Injection",
    "codeDescription": "This example demonstrates how to use Laravel contracts by type-hinting the Redis Factory interface in an event listener constructor. When the listener is resolved by the service container, it will automatically inject the appropriate implementation based on the type-hint.",
    "codeLanguage": "php",
    "codeTokens": 155,
    "codeId": "https://github.com/laravel/docs/blob/12.x/contracts.md#2025-04-18_snippet_0",
    "pageTitle": "Understanding Laravel Contracts",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Listeners;\n\nuse App\\Events\\OrderWasPlaced;\nuse App\\Models\\User;\nuse Illuminate\\Contracts\\Redis\\Factory;\n\nclass CacheOrderInformation\n{\n    /**\n     * Create a new event handler instance.\n     */\n    public function __construct(\n        protected Factory $redis,\n    ) {}\n\n    /**\n     * Handle the event.\n     */\n    public function handle(OrderWasPlaced $event): void\n    {\n        // ...\n    }\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Running SELECT Query in Laravel Controller",
    "codeDescription": "Executes a SELECT query using Laravel's DB facade in a controller method, demonstrating parameter binding and view return.",
    "codeLanguage": "php",
    "codeTokens": 124,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_2",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\View\\View;\n\nclass UserController extends Controller\n{\n    /**\n     * Show a list of all of the application's users.\n     */\n    public function index(): View\n    {\n        $users = DB::select('select * from users where active = ?', [1]);\n\n        return view('user.index', ['users' => $users]);\n    }\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Defining Middleware Aliases in Laravel",
    "codeDescription": "Demonstrates how to assign aliases to middleware in the bootstrap/app.php file, allowing for easier use of middleware with long class names.",
    "codeLanguage": "php",
    "codeTokens": 85,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_14",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Http\\Middleware\\EnsureUserIsSubscribed;\n\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->alias([\n        'subscribed' => EnsureUserIsSubscribed::class\n    ]);\n})"
      },
      {
        "language": "php",
        "code": "Route::get('/profile', function () {\n    // ...\n})->middleware('subscribed');"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Managing Subscription Quantities in Laravel Cashier",
    "codeDescription": "Methods for incrementing, decrementing, and updating subscription quantities in Laravel Cashier. These operations can be performed with or without prorating charges based on the remaining billing cycle.",
    "codeLanguage": "php",
    "codeTokens": 130,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_69",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\n$user = User::find(1);\n\n$user->subscription('default')->incrementQuantity();\n\n// Add five to the subscription's current quantity...\n$user->subscription('default')->incrementQuantity(5);\n\n$user->subscription('default')->decrementQuantity();\n\n// Subtract five from the subscription's current quantity...\n$user->subscription('default')->decrementQuantity(5);"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Authorizing Actions Without Models Using Gate Facade in Laravel",
    "codeDescription": "This snippet shows how to authorize actions that don't require model instances using the Gate facade's 'authorize' method by passing a class name.",
    "codeLanguage": "php",
    "codeTokens": 127,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_24",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Post;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Gate;\n\n/**\n * Create a new blog post.\n *\n * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n */\npublic function create(Request $request): RedirectResponse\n{\n    Gate::authorize('create', Post::class);\n\n    // The current user can create blog posts...\n\n    return redirect('/posts');\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Customizing Pagination URLs in Laravel",
    "codeDescription": "Demonstrates how to customize the URI used by the paginator when generating links using the withPath method. This example sets the path to '/admin/users' for a paginated list of users.",
    "codeLanguage": "php",
    "codeTokens": 92,
    "codeId": "https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-18_snippet_7",
    "pageTitle": "Laravel Database Pagination Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\nRoute::get('/users', function () {\n    $users = User::paginate(15);\n\n    $users->withPath('/admin/users');\n\n    // ...\n});"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Number Formatting with Laravel's Number Class",
    "codeDescription": "Laravel's Number class provides various methods for formatting numbers, including abbreviation, currency formatting, file size conversion, and human-readable representation.",
    "codeLanguage": "php",
    "codeTokens": 103,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_36",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Number;\n\n$number = Number::abbreviate(1000);\n\n// 1K\n\n$number = Number::abbreviate(489939);\n\n// 490K\n\n$number = Number::abbreviate(1230000, precision: 2);\n\n// 1.23M"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Number;\n\n$number = Number::clamp(105, min: 10, max: 100);\n\n// 100\n\n$number = Number::clamp(5, min: 10, max: 100);\n\n// 10\n\n$number = Number::clamp(10, min: 10, max: 100);\n\n// 10\n\n$number = Number::clamp(20, min: 10, max: 100);\n\n// 20"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Number;\n\n$currency = Number::currency(1000);\n\n// $1,000.00\n\n$currency = Number::currency(1000, in: 'EUR');\n\n// €1,000.00\n\n$currency = Number::currency(1000, in: 'EUR', locale: 'de');\n\n// 1.000,00 €"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Number;\n\n$currency = Number::defaultCurrency();\n\n// USD"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Number;\n\n$locale = Number::defaultLocale();\n\n// en"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Number;\n\n$size = Number::fileSize(1024);\n\n// 1 KB\n\n$size = Number::fileSize(1024 * 1024);\n\n// 1 MB\n\n$size = Number::fileSize(1024, precision: 2);\n\n// 1.00 KB"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Number;\n\n$number = Number::forHumans(1000);\n\n// 1 thousand\n\n$number = Number::forHumans(489939);\n\n// 490 thousand\n\n$number = Number::forHumans(1230000, precision: 2);\n\n// 1.23 million"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Number;\n\n$number = Number::format(100000);\n\n// 100,000\n\n$number = Number::format(100000, precision: 2);\n\n// 100,000.00\n\n$number = Number::format(100000.123, maxPrecision: 2);\n\n// 100,000.12\n\n$number = Number::format(100000, locale: 'de');\n\n// 100.000"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Number;\n\n$number = Number::ordinal(1);\n\n// 1st\n\n$number = Number::ordinal(2);\n\n// 2nd\n\n$number = Number::ordinal(21);\n\n// 21st"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Number;\n\n$result = Number::pairs(25, 10);\n\n// [[1, 10], [11, 20], [21, 25]]\n\n$result = Number::pairs(25, 10, offset: 0);\n\n// [[0, 10], [10, 20], [20, 25]]"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Number;\n\n$percentage = Number::percentage(10);\n\n// 10%\n\n$percentage = Number::percentage(10, precision: 2);\n\n// 10.00%\n\n$percentage = Number::percentage(10.123, maxPrecision: 2);\n\n// 10.12%\n\n$percentage = Number::percentage(10, precision: 2, locale: 'de');\n\n// 10,00%"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Number;\n\n$number = Number::spell(102);\n\n// one hundred and two\n\n$number = Number::spell(88, locale: 'fr');\n\n// quatre-vingt-huit"
      },
      {
        "language": "php",
        "code": "$number = Number::spell(10, after: 10);\n\n// 10\n\n$number = Number::spell(11, after: 10);\n\n// eleven"
      },
      {
        "language": "php",
        "code": "$number = Number::spell(5, until: 10);\n\n// five\n\n$number = Number::spell(10, until: 10);\n\n// 10"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Number;\n\n$number = Number::trim(12.0);\n\n// 12\n\n$number = Number::trim(12.30);\n\n// 12.3"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Number;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Number::useLocale('de');\n}"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Number;\n\n$number = Number::withLocale('de', function () {\n    return Number::format(1500);\n});"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Generating Database Seeder - Laravel Artisan Command",
    "codeDescription": "Command to generate a new seeder class using Laravel's Artisan CLI tool. The generated seeder will be placed in the database/seeders directory.",
    "codeLanguage": "shell",
    "codeTokens": 56,
    "codeId": "https://github.com/laravel/docs/blob/12.x/seeding.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Database Seeding Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan make:seeder UserSeeder"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Decrypting Values with Exception Handling in Laravel",
    "codeDescription": "Shows how to decrypt encrypted values using Laravel's Crypt facade with proper exception handling. This snippet demonstrates safely decrypting a value while catching any DecryptException that might occur if the encrypted data is invalid or tampered with.",
    "codeLanguage": "php",
    "codeTokens": 101,
    "codeId": "https://github.com/laravel/docs/blob/12.x/encryption.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Encryption",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Contracts\\Encryption\\DecryptException;\nuse Illuminate\\Support\\Facades\\Crypt;\n\ntry {\n    $decrypted = Crypt::decryptString($encryptedValue);\n} catch (DecryptException $e) {\n    // ...\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Including CSRF Token in HTML Forms with Blade",
    "codeDescription": "Demonstrates how to include the CSRF token in HTML forms using Blade's @csrf directive, which generates a hidden input field with the token value.",
    "codeLanguage": "blade",
    "codeTokens": 86,
    "codeId": "https://github.com/laravel/docs/blob/12.x/csrf.md#2025-04-18_snippet_2",
    "pageTitle": "CSRF Protection in Laravel",
    "codeList": [
      {
        "language": "blade",
        "code": "<form method=\"POST\" action=\"/profile\">\n    @csrf\n\n    <!-- Equivalent to... -->\n    <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\" />\n</form>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Viewing Failed Laravel Queue Jobs",
    "codeDescription": "Command to list all failed jobs stored in the failed_jobs database table, showing job ID, connection, queue, failure time, and other job details.",
    "codeLanguage": "shell",
    "codeTokens": 50,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_75",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan queue:failed"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Dropping Single Columns in Laravel Migrations",
    "codeDescription": "This example shows how to drop a single column from a database table using the dropColumn method.",
    "codeLanguage": "php",
    "codeTokens": 59,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_45",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "Schema::table('users', function (Blueprint $table) {\n    $table->dropColumn('votes');\n});"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Retrieving Enum Input Values in Laravel",
    "codeDescription": "Converting input values to PHP enum instances using the enum() method to ensure type safety.",
    "codeLanguage": "php",
    "codeTokens": 55,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_20",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Enums\\Status;\n\n$status = $request->enum('status', Status::class);"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Mapping Eloquent Model Events to Event Classes",
    "codeDescription": "Shows how to map various points in an Eloquent model's lifecycle to custom event classes using the $dispatchesEvents property.",
    "codeLanguage": "php",
    "codeTokens": 146,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_70",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse App\\Events\\UserDeleted;\nuse App\\Events\\UserSaved;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\n\nclass User extends Authenticatable\n{\n    use Notifiable;\n\n    /**\n     * The event map for the model.\n     *\n     * @var array<string, string>\n     */\n    protected $dispatchesEvents = [\n        'saved' => UserSaved::class,\n        'deleted' => UserDeleted::class,\n    ];\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Generating Resource Collections with Artisan",
    "codeDescription": "Commands to generate resource collection classes using Laravel's Artisan CLI tool. Can use --collection flag or Collection suffix.",
    "codeLanguage": "shell",
    "codeTokens": 57,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan make:resource User --collection\n\nphp artisan make:resource UserCollection"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Customizing Default Middleware Groups in Laravel",
    "codeDescription": "Demonstrates how to append, prepend, replace, or remove middleware from Laravel's default 'web' and 'api' middleware groups using the 'withMiddleware' method in the bootstrap/app.php file.",
    "codeLanguage": "php",
    "codeTokens": 124,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_12",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Http\\Middleware\\EnsureTokenIsValid;\nuse App\\Http\\Middleware\\EnsureUserIsSubscribed;\n\n->withMiddleware(function (Middleware $middleware) {\n    $middleware->web(append: [\n        EnsureUserIsSubscribed::class,\n    ]);\n\n    $middleware->api(prepend: [\n        EnsureTokenIsValid::class,\n    ]);\n})"
      },
      {
        "language": "php",
        "code": "use App\\Http\\Middleware\\StartCustomSession;\nuse Illuminate\\Session\\Middleware\\StartSession;\n\n$middleware->web(replace: [\n    StartSession::class => StartCustomSession::class,\n]);"
      },
      {
        "language": "php",
        "code": "$middleware->web(remove: [\n    StartSession::class,\n]);"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Segmenting Rate Limits by IP Address in Laravel",
    "codeDescription": "This code shows how to segment rate limits by IP address, allowing different limits per IP. This example limits requests to 100 per minute per IP address using the by method.",
    "codeLanguage": "php",
    "codeTokens": 97,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_41",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "RateLimiter::for('uploads', function (Request $request) {\n    return $request->user()->vipCustomer()\n        ? Limit::none()\n        : Limit::perMinute(100)->by($request->ip());\n});"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Remember Me Authentication in Laravel",
    "codeDescription": "Implementation of 'remember me' functionality in Laravel authentication, including checking if a user was authenticated via remember token.",
    "codeLanguage": "php",
    "codeTokens": 75,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_9",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Auth;\n\nif (Auth::attempt(['email' => $email, 'password' => $password], $remember)) {\n    // The user is being remembered...\n}"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Auth;\n\nif (Auth::viaRemember()) {\n    // ...\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Defining Visible Attributes",
    "codeDescription": "Shows how to specify which attributes should be visible in serialization",
    "codeLanguage": "php",
    "codeTokens": 84,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-18_snippet_7",
    "pageTitle": "Laravel Eloquent Serialization Guide",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * The attributes that should be visible in arrays.\n     *\n     * @var array\n     */\n    protected $visible = ['first_name', 'last_name'];\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Configuring Trusted Proxies in Laravel",
    "codeDescription": "Specify trusted load balancers or proxies for applications running behind them. This ensures proper generation of HTTPS links and correct handling of forwarded headers.",
    "codeLanguage": "php",
    "codeTokens": 89,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_54",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "->withMiddleware(function (Middleware $middleware) {\n    $middleware->trustProxies(at: [\n        '192.168.1.1',\n        '10.0.0.0/8',\n    ]);\n})"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Managing Concurrent Process Pools in Laravel",
    "codeDescription": "Demonstrates how to create and manage a pool of concurrent processes with output handling and result collection.",
    "codeLanguage": "php",
    "codeTokens": 156,
    "codeId": "https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-18_snippet_9",
    "pageTitle": "Laravel Process Management Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Process\\Pool;\nuse Illuminate\\Support\\Facades\\Process;\n\n$pool = Process::pool(function (Pool $pool) {\n    $pool->path(__DIR__)->command('bash import-1.sh');\n    $pool->path(__DIR__)->command('bash import-2.sh');\n    $pool->path(__DIR__)->command('bash import-3.sh');\n})->start(function (string $type, string $output, int $key) {\n    // ...\n});\n\nwhile ($pool->running()->isNotEmpty()) {\n    // ...\n}\n\n$results = $pool->wait();"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using Laravel Pipeline for Sequential Processing",
    "codeDescription": "Demonstrates Laravel's Pipeline facade for piping input through a series of callable processors using closures.",
    "codeLanguage": "php",
    "codeTokens": 124,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_101",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Closure;\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Pipeline;\n\n$user = Pipeline::send($user)\n    ->through([\n        function (User $user, Closure $next) {\n            // ...\n\n            return $next($user);\n        },\n        function (User $user, Closure $next) {\n            // ...\n\n            return $next($user);\n        },\n    ])\n    ->then(fn (User $user) => $user);"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Accessing Current Route Information in Laravel",
    "codeDescription": "This code demonstrates how to access information about the current route handling an incoming request using the Route facade's current, currentRouteName, and currentRouteAction methods.",
    "codeLanguage": "php",
    "codeTokens": 85,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_49",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Route;\n\n$route = Route::current(); // Illuminate\\Routing\\Route\n$name = Route::currentRouteName(); // string\n$action = Route::currentRouteAction(); // string"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Configuring Automatic Database Seeding for Tests",
    "codeDescription": "Shows how to configure automatic database seeding before each test by setting properties on the base test class, enabling consistent test data setup.",
    "codeLanguage": "php",
    "codeTokens": 99,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Database Testing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace Tests;\n\nuse Illuminate\\Foundation\\Testing\\TestCase as BaseTestCase;\n\nabstract class TestCase extends BaseTestCase\n{\n    /**\n     * Indicates whether the default seeder should run before each test.\n     *\n     * @var bool\n     */\n    protected $seed = true;\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Eloquent Model Route Parameter",
    "codeDescription": "Example of passing an Eloquent model directly to route redirect.",
    "codeLanguage": "php",
    "codeTokens": 39,
    "codeId": "https://github.com/laravel/docs/blob/12.x/redirects.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel HTTP Redirects Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "return redirect()->route('profile', [$user]);"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Executing Concurrent Tasks with Laravel Octane and Swoole (PHP)",
    "codeDescription": "Shows how to use Octane's concurrently method to execute operations concurrently using Swoole's task workers.",
    "codeLanguage": "php",
    "codeTokens": 90,
    "codeId": "https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-18_snippet_14",
    "pageTitle": "Laravel Octane Server Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\nuse App\\Models\\Server;\nuse Laravel\\Octane\\Facades\\Octane;\n\n[$users, $servers] = Octane::concurrently([\n    fn () => User::all(),\n    fn () => Server::all(),\n]);"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "HTML Form Method Spoofing in Laravel using Hidden Fields",
    "codeDescription": "This code demonstrates how to use method spoofing to make HTML forms support PUT, PATCH, and DELETE requests by adding a hidden _method field to the form. This is needed because HTML forms only natively support GET and POST.",
    "codeLanguage": "blade",
    "codeTokens": 106,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_47",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<form action=\"/example\" method=\"POST\">\n    <input type=\"hidden\" name=\"_method\" value=\"PUT\">\n    <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\">\n</form>"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Implementing Deferred Service Provider in Laravel",
    "codeDescription": "This example demonstrates how to create a deferred service provider by implementing the DeferrableProvider interface and defining a provides method.",
    "codeLanguage": "PHP",
    "codeTokens": 190,
    "codeId": "https://github.com/laravel/docs/blob/12.x/providers.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Service Providers Documentation",
    "codeList": [
      {
        "language": "PHP",
        "code": "<?php\n\nnamespace App\\Providers;\n\nuse App\\Services\\Riak\\Connection;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Contracts\\Support\\DeferrableProvider;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass RiakServiceProvider extends ServiceProvider implements DeferrableProvider\n{\n    /**\n     * Register any application services.\n     */\n    public function register(): void\n    {\n        $this->app->singleton(Connection::class, function (Application $app) {\n            return new Connection($app['config']['riak']);\n        });\n    }\n\n    /**\n     * Get the services provided by the provider.\n     *\n     * @return array<int, string>\n     */\n    public function provides(): array\n    {\n        return [Connection::class];\n    }\n}"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Creating a Livewire Component in PHP",
    "codeDescription": "A PHP class implementation of a Livewire component that maintains state and handles user interactions. This example shows a Counter component with an increment method that updates the count state.",
    "codeLanguage": "php",
    "codeTokens": 112,
    "codeId": "https://github.com/laravel/docs/blob/12.x/frontend.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Frontend Development Options",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Livewire;\n\nuse Livewire\\Component;\n\nclass Counter extends Component\n{\n    public $count = 0;\n\n    public function increment()\n    {\n        $this->count++;\n    }\n\n    public function render()\n    {\n        return view('livewire.counter');\n    }\n}"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Direct Route Return Serialization",
    "codeDescription": "Shows how Laravel automatically serializes Eloquent objects returned from routes",
    "codeLanguage": "php",
    "codeTokens": 45,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Eloquent Serialization Guide",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/users', function () {\n    return User::all();\n});"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Generating Events and Listeners using Artisan Commands",
    "codeDescription": "Commands to create event and listener classes using Laravel's Artisan CLI tool. Demonstrates both explicit and interactive approaches to generating these classes.",
    "codeLanguage": "shell",
    "codeTokens": 64,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan make:event PodcastProcessed\n\nphp artisan make:listener SendPodcastNotification --event=PodcastProcessed"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Preventing Stray Processes in Laravel Tests",
    "codeDescription": "Shows how to prevent unfaked processes from being executed during testing using preventStrayProcesses.",
    "codeLanguage": "php",
    "codeTokens": 91,
    "codeId": "https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-18_snippet_17",
    "pageTitle": "Laravel Process Management Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Process;\n\nProcess::preventStrayProcesses();\n\nProcess::fake([\n    'ls *' => 'Test output...',\n]);\n\n// Fake response is returned...\nProcess::run('ls -la');\n\n// An exception is thrown...\nProcess::run('bash import.sh');"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Applying States When Creating Models",
    "codeDescription": "Example of applying state transformations when creating models. This creates multiple user models with the suspended state applied.",
    "codeLanguage": "php",
    "codeTokens": 54,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_10",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$users = User::factory()->count(5)->suspended()->make();"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Basic Model Searching with Laravel Scout",
    "codeDescription": "Shows how to search Eloquent models using Scout's search method. This example retrieves Order models matching the 'Star Trek' search query.",
    "codeLanguage": "php",
    "codeTokens": 59,
    "codeId": "https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-18_snippet_28",
    "pageTitle": "Laravel Scout Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Order;\n\n$orders = Order::search('Star Trek')->get();"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Accessing Input via Dynamic Properties in Laravel",
    "codeDescription": "Using dynamic properties on the Request object to directly access input values as object properties.",
    "codeLanguage": "php",
    "codeTokens": 41,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_22",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$name = $request->name;"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Deleting Models Using Query Builder",
    "codeDescription": "Demonstrates how to delete models that match specific criteria using Eloquent query builder. This performs a mass delete operation without loading individual models.",
    "codeLanguage": "php",
    "codeTokens": 60,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_43",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$deleted = Flight::where('active', 0)->delete();"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Checking if Input is Filled in Laravel",
    "codeDescription": "Using filled() to check if an input is both present and not an empty string.",
    "codeLanguage": "php",
    "codeTokens": 47,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_30",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "if ($request->filled('name')) {\n    // ...\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Creating Custom Rate Limiting Job Middleware",
    "codeDescription": "Implementation of a custom job middleware class that handles rate limiting logic separately from the job class.",
    "codeLanguage": "php",
    "codeTokens": 175,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_11",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Jobs\\Middleware;\n\nuse Closure;\nuse Illuminate\\Support\\Facades\\Redis;\n\nclass RateLimited\n{\n    /**\n     * Process the queued job.\n     *\n     * @param  \\Closure(object): void  $next\n     */\n    public function handle(object $job, Closure $next): void\n    {\n        Redis::throttle('key')\n            ->block(0)->allow(1)->every(5)\n            ->then(function () use ($job, $next) {\n                // Lock obtained...\n\n                $next($job);\n            }, function () use ($job) {\n                // Could not obtain lock...\n\n                $job->release(5);\n            });\n    }\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Rendering Blade Components",
    "codeDescription": "Shows different ways to render Blade components in templates using x- prefix syntax.",
    "codeLanguage": "blade",
    "codeTokens": 39,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_21",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<x-alert/>\n\n<x-user-profile/>"
      },
      {
        "language": "blade",
        "code": "<x-inputs.button/>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Implementing Custom JWT Authentication Guard in Laravel",
    "codeDescription": "Example of extending Laravel's authentication system with a custom JWT guard implementation using the Auth facade's extend method in a service provider.",
    "codeLanguage": "php",
    "codeTokens": 158,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_19",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Providers;\n\nuse App\\Services\\Auth\\JwtGuard;\nuse Illuminate\\Contracts\\Foundation\\Application;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    // ...\n\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Auth::extend('jwt', function (Application $app, string $name, array $config) {\n            // Return an instance of Illuminate\\Contracts\\Auth\\Guard...\n\n            return new JwtGuard(Auth::createUserProvider($config['provider']));\n        });\n    }\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Creating Uri Instances in Laravel",
    "codeDescription": "Demonstrates various methods to create Laravel Uri instances from strings, routes, controller actions, and the current request. These methods provide flexible ways to initialize the URI object for further manipulation.",
    "codeLanguage": "php",
    "codeTokens": 220,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_106",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Http\\Controllers\\UserController;\nuse App\\Http\\Controllers\\InvokableController;\nuse Illuminate\\Support\\Uri;\n\n// Generate a URI instance from the given string...\n$uri = Uri::of('https://example.com/path');\n\n// Generate URI instances to paths, named routes, or controller actions...\n$uri = Uri::to('/dashboard');\n$uri = Uri::route('users.show', ['user' => 1]);\n$uri = Uri::signedRoute('users.show', ['user' => 1]);\n$uri = Uri::temporarySignedRoute('user.index', now()->addMinutes(5));\n$uri = Uri::action([UserController::class, 'index']);\n$uri = Uri::action(InvokableController::class);\n\n// Generate a URI instance from the current request URL...\n$uri = $request->uri();"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Deleting Model Instances in Laravel Eloquent",
    "codeDescription": "Demonstrates how to delete a model instance by retrieving it and calling the delete method. This approach triggers Eloquent events for the deleted model.",
    "codeLanguage": "php",
    "codeTokens": 67,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_40",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Flight;\n\n$flight = Flight::find(1);\n\n$flight->delete();"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Defining Mass Assignable Attributes with $fillable Property",
    "codeDescription": "Sets up a Flight model class with the $fillable property to specify which attributes are mass assignable. This is required to protect against mass assignment vulnerabilities.",
    "codeLanguage": "php",
    "codeTokens": 100,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_33",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array<int, string>\n     */\n    protected $fillable = ['name'];\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Converting Eloquent Model to Array with Relationships",
    "codeDescription": "Demonstrates how to convert an Eloquent model and its relationships to an array using the toArray() method",
    "codeLanguage": "php",
    "codeTokens": 58,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Eloquent Serialization Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\n$user = User::with('roles')->first();\n\nreturn $user->toArray();"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Configuring Multiple Folio Paths in PHP",
    "codeDescription": "Shows how to configure multiple Folio paths with different URIs and middleware in the service provider.",
    "codeLanguage": "php",
    "codeTokens": 97,
    "codeId": "https://github.com/laravel/docs/blob/12.x/folio.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Folio Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Laravel\\Folio\\Folio;\n\nFolio::path(resource_path('views/pages/guest'))->uri('/');\n\nFolio::path(resource_path('views/pages/admin'))\n    ->uri('/admin')\n    ->middleware([\n        '*' => [\n            'auth',\n            'verified',\n\n            // ...\n        ],\n    ]);"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Using Column Modifiers in Laravel Migrations",
    "codeDescription": "This example demonstrates how to make a column nullable when adding it to a database table using Laravel's schema builder.",
    "codeLanguage": "php",
    "codeTokens": 75,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_38",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nSchema::table('users', function (Blueprint $table) {\n    $table->string('email')->nullable();\n});"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Using Higher Order orWhere Method with Eloquent Scopes",
    "codeDescription": "Shows how to use Laravel's higher order orWhere method to fluently chain scopes together without using closures, providing a more concise syntax.",
    "codeLanguage": "php",
    "codeTokens": 59,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_62",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$users = User::popular()->orWhere->active()->get();"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Testing Real-Time Facades with PHPUnit in Laravel",
    "codeDescription": "This snippet demonstrates how to test the Podcast model's publish method using PHPUnit. It shows the setup for mocking the Publisher facade and asserting its method call in a traditional test class.",
    "codeLanguage": "php",
    "codeTokens": 157,
    "codeId": "https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-18_snippet_12",
    "pageTitle": "Laravel Facades",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace Tests\\Feature;\n\nuse App\\Models\\Podcast;\nuse Facades\\App\\Contracts\\Publisher;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Tests\\TestCase;\n\nclass PodcastTest extends TestCase\n{\n    use RefreshDatabase;\n\n    /**\n     * A test example.\n     */\n    public function test_podcast_can_be_published(): void\n    {\n        $podcast = Podcast::factory()->create();\n\n        Publisher::shouldReceive('publish')->once()->with($podcast);\n\n        $podcast->publish();\n    }\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Attaching Rate Limiters to Routes in Laravel",
    "codeDescription": "This code demonstrates how to apply rate limiters to routes or route groups using the throttle middleware. It applies the 'uploads' rate limiter to multiple POST endpoints.",
    "codeLanguage": "php",
    "codeTokens": 92,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_45",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::middleware(['throttle:uploads'])->group(function () {\n    Route::post('/audio', function () {\n        // ...\n    });\n\n    Route::post('/video', function () {\n        // ...\n    });\n});"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Scoped Event Faking in Laravel using Pest",
    "codeDescription": "Demonstrates how to use fakeFor to create a temporary scope for event faking in Pest tests. Events are only faked within the closure while maintaining normal event dispatch outside of it.",
    "codeLanguage": "php",
    "codeTokens": 141,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_24",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nuse App\\Events\\OrderCreated;\nuse App\\Models\\Order;\nuse Illuminate\\Support\\Facades\\Event;\n\ntest('orders can be processed', function () {\n    $order = Event::fakeFor(function () {\n        $order = Order::factory()->create();\n\n        Event::assertDispatched(OrderCreated::class);\n\n        return $order;\n    });\n\n    // Events are dispatched as normal and observers will run ...\n    $order->update([...]);\n});"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Configuring Database Connection in Laravel Model",
    "codeDescription": "Shows how to specify a custom database connection for an Eloquent model.",
    "codeLanguage": "php",
    "codeTokens": 86,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_12",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The database connection that should be used by the model.\n     *\n     * @var string\n     */\n    protected $connection = 'mysql';\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Including Relationships in Laravel Resource",
    "codeDescription": "Demonstrates how to include related resources (blog posts) in the API response by using the PostResource collection method.",
    "codeLanguage": "php",
    "codeTokens": 156,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_8",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Http\\Resources\\PostResource;\nuse Illuminate\\Http\\Request;\n\n/**\n * Transform the resource into an array.\n *\n * @return array<string, mixed>\n */\npublic function toArray(Request $request): array\n{\n    return [\n        'id' => $this->id,\n        'name' => $this->name,\n        'email' => $this->email,\n        'posts' => PostResource::collection($this->posts),\n        'created_at' => $this->created_at,\n        'updated_at' => $this->updated_at,\n    ];\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Defining Basic Factory Relationships in Laravel",
    "codeDescription": "Demonstrates how to define basic relationships within a Laravel model factory definition. Shows setting up a belongsTo relationship with User model using factory instances for foreign keys.",
    "codeLanguage": "php",
    "codeTokens": 114,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_25",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\n/**\n * Define the model's default state.\n *\n * @return array<string, mixed>\n */\npublic function definition(): array\n{\n    return [\n        'user_id' => User::factory(),\n        'title' => fake()->title(),\n        'content' => fake()->paragraph(),\n    ];\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Parameterized Named Route Redirect",
    "codeDescription": "Demonstrates redirecting to a named route with parameters.",
    "codeLanguage": "php",
    "codeTokens": 42,
    "codeId": "https://github.com/laravel/docs/blob/12.x/redirects.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel HTTP Redirects Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "return redirect()->route('profile', ['id' => 1]);"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Adding Exception-Specific Context to Logs",
    "codeDescription": "Example of defining a context method on an exception class to provide exception-specific contextual information for log entries.",
    "codeLanguage": "php",
    "codeTokens": 105,
    "codeId": "https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Error Handling Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Exceptions;\n\nuse Exception;\n\nclass InvalidOrderException extends Exception\n{\n    // ...\n\n    /**\n     * Get the exception's context information.\n     *\n     * @return array<string, mixed>\n     */\n    public function context(): array\n    {\n        return ['order_id' => $this->orderId];\n    }\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Registering Closure-Based Eloquent Model Event Listeners",
    "codeDescription": "Demonstrates how to register closures that execute when various model events are dispatched, typically defined in the model's booted method.",
    "codeLanguage": "php",
    "codeTokens": 109,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_71",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * The \"booted\" method of the model.\n     */\n    protected static function booted(): void\n    {\n        static::created(function (User $user) {\n            // ...\n        });\n    }\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Using Stacks in Laravel Blade Templates",
    "codeDescription": "Shows how to use @push and @stack directives to manage and render named stacks of content in Blade templates.",
    "codeLanguage": "blade",
    "codeTokens": 55,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_58",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "@push('scripts')\n    <script src=\"/example.js\"></script>\n@endpush"
      },
      {
        "language": "blade",
        "code": "<head>\n    <!-- Head Contents -->\n\n    @stack('scripts')\n</head>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Appending Custom Attributes",
    "codeDescription": "Shows how to automatically append computed attributes to model serialization",
    "codeLanguage": "php",
    "codeTokens": 83,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-18_snippet_9",
    "pageTitle": "Laravel Eloquent Serialization Guide",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * The accessors to append to the model's array form.\n     *\n     * @var array\n     */\n    protected $appends = ['is_admin'];\n}"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Conditional Logic Based on Missing Input in Laravel",
    "codeDescription": "Using whenMissing() with closures to handle cases when an input is missing or present.",
    "codeLanguage": "php",
    "codeTokens": 70,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_37",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$request->whenMissing('name', function () {\n    // The \"name\" value is missing...\n}, function () {\n    // The \"name\" value is present...\n});"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Contextual Binding with Multiple Controllers",
    "codeDescription": "Demonstrates how to bind different implementations of the same interface based on the consuming class.",
    "codeLanguage": "php",
    "codeTokens": 146,
    "codeId": "https://github.com/laravel/docs/blob/12.x/container.md#2025-04-18_snippet_8",
    "pageTitle": "Laravel Service Container Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Http\\Controllers\\PhotoController;\nuse App\\Http\\Controllers\\UploadController;\nuse App\\Http\\Controllers\\VideoController;\nuse Illuminate\\Contracts\\Filesystem\\Filesystem;\nuse Illuminate\\Support\\Facades\\Storage;\n\n$this->app->when(PhotoController::class)\n    ->needs(Filesystem::class)\n    ->give(function () {\n        return Storage::disk('local');\n    });\n\n$this->app->when([VideoController::class, UploadController::class])\n    ->needs(Filesystem::class)\n    ->give(function () {\n        return Storage::disk('s3');\n    });"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Configuring Max Exceptions for Queue Jobs",
    "codeDescription": "Implementation of a queued job class that specifies maximum retry attempts and exception limits. Includes Redis throttling logic and exception handling.",
    "codeLanguage": "php",
    "codeTokens": 204,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_42",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Jobs;\n\nuse Illuminate\\Support\\Facades\\Redis;\n\nclass ProcessPodcast implements ShouldQueue\n{\n    /**\n     * The number of times the job may be attempted.\n     *\n     * @var int\n     */\n    public $tries = 25;\n\n    /**\n     * The maximum number of unhandled exceptions to allow before failing.\n     *\n     * @var int\n     */\n    public $maxExceptions = 3;\n\n    /**\n     * Execute the job.\n     */\n    public function handle(): void\n    {\n        Redis::throttle('key')->allow(10)->every(60)->then(function () {\n            // Lock obtained, process the podcast...\n        }, function () {\n            // Unable to obtain lock...\n            return $this->release(10);\n        });\n    }\n}"
      }
    ],
    "relevance": 0.926
  },
  {
    "codeTitle": "Rolling Back Migrations with Artisan Commands in Laravel",
    "codeDescription": "Demonstrates various Artisan commands for rolling back migrations in Laravel, including rolling back the last batch, a specific number of steps, or a specific batch.",
    "codeLanguage": "shell",
    "codeTokens": 53,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_11",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan migrate:rollback"
      },
      {
        "language": "shell",
        "code": "php artisan migrate:rollback --step=5"
      },
      {
        "language": "shell",
        "code": "php artisan migrate:rollback --batch=3"
      },
      {
        "language": "shell",
        "code": "php artisan migrate:rollback --pretend"
      },
      {
        "language": "shell",
        "code": "php artisan migrate:reset"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Iterating Over an Eloquent Collection in PHP",
    "codeDescription": "This snippet demonstrates how to loop over an Eloquent collection of User models as if it were a simple PHP array, printing each user's name.",
    "codeLanguage": "php",
    "codeTokens": 81,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#2025-04-18_snippet_0",
    "pageTitle": "Eloquent Collections in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\n$users = User::where('active', 1)->get();\n\nforeach ($users as $user) {\n    echo $user->name;\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Flashing Input to Session in Laravel",
    "codeDescription": "Flash the current request's input data to the session to make it available during the user's next request. This is useful for preserving form data after validation errors.",
    "codeLanguage": "php",
    "codeTokens": 54,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_40",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$request->flash();"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Setting Default Attribute Values in Laravel Model",
    "codeDescription": "Demonstrates how to define default values for model attributes in their raw, storable format.",
    "codeLanguage": "php",
    "codeTokens": 103,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_13",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Flight extends Model\n{\n    /**\n     * The model's default values for attributes.\n     *\n     * @var array\n     */\n    protected $attributes = [\n        'options' => '[]',\n        'delayed' => false,\n    ];\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Defining Layout Using Template Inheritance",
    "codeDescription": "Illustrates how to define a layout using Blade's template inheritance with @section and @yield directives.",
    "codeLanguage": "blade",
    "codeTokens": 114,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_52",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<!-- resources/views/layouts/app.blade.php -->\n\n<html>\n    <head>\n        <title>App Name - @yield('title')</title>\n    </head>\n    <body>\n        @section('sidebar')\n            This is the master sidebar.\n        @show\n\n        <div class=\"container\">\n            @yield('content')\n        </div>\n    </body>\n</html>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Deleting Models by Primary Key",
    "codeDescription": "Shows how to delete models using the destroy method with various formats of primary keys. This method loads and deletes each model individually, ensuring events are dispatched.",
    "codeLanguage": "php",
    "codeTokens": 93,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_41",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "Flight::destroy(1);\n\nFlight::destroy(1, 2, 3);\n\nFlight::destroy([1, 2, 3]);\n\nFlight::destroy(collect([1, 2, 3]));"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Checking Array Key Existence with Arr::has() in PHP",
    "codeDescription": "The Arr::has method checks whether a given item or items exists in an array using \"dot\" notation. It returns a boolean value indicating existence.",
    "codeLanguage": "php",
    "codeTokens": 107,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_12",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Arr;\n\n$array = ['product' => ['name' => 'Desk', 'price' => 100]];\n\n$contains = Arr::has($array, 'product.name');\n\n// true\n\n$contains = Arr::has($array, ['product.price', 'product.discount']);\n\n// false"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Displaying Laravel Facade Reference Table in Markdown",
    "codeDescription": "A markdown table listing Laravel facades, their corresponding classes, and service container binding keys. This table provides a comprehensive overview of Laravel's facade system, helping developers quickly access API documentation and understand the relationship between facades and their underlying implementations.",
    "codeLanguage": "markdown",
    "codeTokens": 2007,
    "codeId": "https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-18_snippet_13",
    "pageTitle": "Laravel Facades",
    "codeList": [
      {
        "language": "markdown",
        "code": "| Facade | Class | Service Container Binding |\n| --- | --- | --- |\n| App | [Illuminate\\Foundation\\Application](https://api.laravel.com/docs/{{version}}/Illuminate/Foundation/Application.html) | `app` |\n| Artisan | [Illuminate\\Contracts\\Console\\Kernel](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Console/Kernel.html) | `artisan` |\n| Auth (Instance) | [Illuminate\\Contracts\\Auth\\Guard](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Auth/Guard.html) | `auth.driver` |\n| Auth | [Illuminate\\Auth\\AuthManager](https://api.laravel.com/docs/{{version}}/Illuminate/Auth/AuthManager.html) | `auth` |\n| Blade | [Illuminate\\View\\Compilers\\BladeCompiler](https://api.laravel.com/docs/{{version}}/Illuminate/View/Compilers/BladeCompiler.html) | `blade.compiler` |\n| Broadcast (Instance) | [Illuminate\\Contracts\\Broadcasting\\Broadcaster](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Broadcasting/Broadcaster.html) | &nbsp; |\n| Broadcast | [Illuminate\\Contracts\\Broadcasting\\Factory](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Broadcasting/Factory.html) | &nbsp; |\n| Bus | [Illuminate\\Contracts\\Bus\\Dispatcher](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Bus/Dispatcher.html) | &nbsp; |\n| Cache (Instance) | [Illuminate\\Cache\\Repository](https://api.laravel.com/docs/{{version}}/Illuminate/Cache/Repository.html) | `cache.store` |\n| Cache | [Illuminate\\Cache\\CacheManager](https://api.laravel.com/docs/{{version}}/Illuminate/Cache/CacheManager.html) | `cache` |\n| Config | [Illuminate\\Config\\Repository](https://api.laravel.com/docs/{{version}}/Illuminate/Config/Repository.html) | `config` |\n| Context | [Illuminate\\Log\\Context\\Repository](https://api.laravel.com/docs/{{version}}/Illuminate/Log/Context/Repository.html) | &nbsp; |\n| Cookie | [Illuminate\\Cookie\\CookieJar](https://api.laravel.com/docs/{{version}}/Illuminate/Cookie/CookieJar.html) | `cookie` |\n| Crypt | [Illuminate\\Encryption\\Encrypter](https://api.laravel.com/docs/{{version}}/Illuminate/Encryption/Encrypter.html) | `encrypter` |\n| Date | [Illuminate\\Support\\DateFactory](https://api.laravel.com/docs/{{version}}/Illuminate/Support/DateFactory.html) | `date` |\n| DB (Instance) | [Illuminate\\Database\\Connection](https://api.laravel.com/docs/{{version}}/Illuminate/Database/Connection.html) | `db.connection` |\n| DB | [Illuminate\\Database\\DatabaseManager](https://api.laravel.com/docs/{{version}}/Illuminate/Database/DatabaseManager.html) | `db` |\n| Event | [Illuminate\\Events\\Dispatcher](https://api.laravel.com/docs/{{version}}/Illuminate/Events/Dispatcher.html) | `events` |\n| Exceptions (Instance) | [Illuminate\\Contracts\\Debug\\ExceptionHandler](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Debug/ExceptionHandler.html) | &nbsp; |\n| Exceptions | [Illuminate\\Foundation\\Exceptions\\Handler](https://api.laravel.com/docs/{{version}}/Illuminate/Foundation/Exceptions/Handler.html) | &nbsp; |\n| File | [Illuminate\\Filesystem\\Filesystem](https://api.laravel.com/docs/{{version}}/Illuminate/Filesystem/Filesystem.html) | `files` |\n| Gate | [Illuminate\\Contracts\\Auth\\Access\\Gate](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Auth/Access/Gate.html) | &nbsp; |\n| Hash | [Illuminate\\Contracts\\Hashing\\Hasher](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Hashing/Hasher.html) | `hash` |\n| Http | [Illuminate\\Http\\Client\\Factory](https://api.laravel.com/docs/{{version}}/Illuminate/Http/Client/Factory.html) | &nbsp; |\n| Lang | [Illuminate\\Translation\\Translator](https://api.laravel.com/docs/{{version}}/Illuminate/Translation/Translator.html) | `translator` |\n| Log | [Illuminate\\Log\\LogManager](https://api.laravel.com/docs/{{version}}/Illuminate/Log/LogManager.html) | `log` |\n| Mail | [Illuminate\\Mail\\Mailer](https://api.laravel.com/docs/{{version}}/Illuminate/Mail/Mailer.html) | `mailer` |\n| Notification | [Illuminate\\Notifications\\ChannelManager](https://api.laravel.com/docs/{{version}}/Illuminate/Notifications/ChannelManager.html) | &nbsp; |\n| Password (Instance) | [Illuminate\\Auth\\Passwords\\PasswordBroker](https://api.laravel.com/docs/{{version}}/Illuminate/Auth/Passwords/PasswordBroker.html) | `auth.password.broker` |\n| Password | [Illuminate\\Auth\\Passwords\\PasswordBrokerManager](https://api.laravel.com/docs/{{version}}/Illuminate/Auth/Passwords/PasswordBrokerManager.html) | `auth.password` |\n| Pipeline (Instance) | [Illuminate\\Pipeline\\Pipeline](https://api.laravel.com/docs/{{version}}/Illuminate/Pipeline/Pipeline.html) | &nbsp; |\n| Process | [Illuminate\\Process\\Factory](https://api.laravel.com/docs/{{version}}/Illuminate/Process/Factory.html) | &nbsp; |\n| Queue (Base Class) | [Illuminate\\Queue\\Queue](https://api.laravel.com/docs/{{version}}/Illuminate/Queue/Queue.html) | &nbsp; |\n| Queue (Instance) | [Illuminate\\Contracts\\Queue\\Queue](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Queue/Queue.html) | `queue.connection` |\n| Queue | [Illuminate\\Queue\\QueueManager](https://api.laravel.com/docs/{{version}}/Illuminate/Queue/QueueManager.html) | `queue` |\n| RateLimiter | [Illuminate\\Cache\\RateLimiter](https://api.laravel.com/docs/{{version}}/Illuminate/Cache/RateLimiter.html) | &nbsp; |\n| Redirect | [Illuminate\\Routing\\Redirector](https://api.laravel.com/docs/{{version}}/Illuminate/Routing/Redirector.html) | `redirect` |\n| Redis (Instance) | [Illuminate\\Redis\\Connections\\Connection](https://api.laravel.com/docs/{{version}}/Illuminate/Redis/Connections/Connection.html) | `redis.connection` |\n| Redis | [Illuminate\\Redis\\RedisManager](https://api.laravel.com/docs/{{version}}/Illuminate/Redis/RedisManager.html) | `redis` |\n| Request | [Illuminate\\Http\\Request](https://api.laravel.com/docs/{{version}}/Illuminate/Http/Request.html) | `request` |\n| Response (Instance) | [Illuminate\\Http\\Response](https://api.laravel.com/docs/{{version}}/Illuminate/Http/Response.html) | &nbsp; |\n| Response | [Illuminate\\Contracts\\Routing\\ResponseFactory](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Routing/ResponseFactory.html) | &nbsp; |\n| Route | [Illuminate\\Routing\\Router](https://api.laravel.com/docs/{{version}}/Illuminate/Routing/Router.html) | `router` |\n| Schedule | [Illuminate\\Console\\Scheduling\\Schedule](https://api.laravel.com/docs/{{version}}/Illuminate/Console/Scheduling/Schedule.html) | &nbsp; |\n| Schema | [Illuminate\\Database\\Schema\\Builder](https://api.laravel.com/docs/{{version}}/Illuminate/Database/Schema/Builder.html) | &nbsp; |\n| Session (Instance) | [Illuminate\\Session\\Store](https://api.laravel.com/docs/{{version}}/Illuminate/Session/Store.html) | `session.store` |\n| Session | [Illuminate\\Session\\SessionManager](https://api.laravel.com/docs/{{version}}/Illuminate/Session/SessionManager.html) | `session` |\n| Storage (Instance) | [Illuminate\\Contracts\\Filesystem\\Filesystem](https://api.laravel.com/docs/{{version}}/Illuminate/Contracts/Filesystem/Filesystem.html) | `filesystem.disk` |\n| Storage | [Illuminate\\Filesystem\\FilesystemManager](https://api.laravel.com/docs/{{version}}/Illuminate/Filesystem/FilesystemManager.html) | `filesystem` |\n| URL | [Illuminate\\Routing\\UrlGenerator](https://api.laravel.com/docs/{{version}}/Illuminate/Routing/UrlGenerator.html) | `url` |\n| Validator (Instance) | [Illuminate\\Validation\\Validator](https://api.laravel.com/docs/{{version}}/Illuminate/Validation/Validator.html) | &nbsp; |\n| Validator | [Illuminate\\Validation\\Factory](https://api.laravel.com/docs/{{version}}/Illuminate/Validation/Factory.html) | `validator` |\n| View (Instance) | [Illuminate\\View\\View](https://api.laravel.com/docs/{{version}}/Illuminate/View/View.html) | &nbsp; |\n| View | [Illuminate\\View\\Factory](https://api.laravel.com/docs/{{version}}/Illuminate/View/Factory.html) | `view` |\n| Vite | [Illuminate\\Foundation\\Vite](https://api.laravel.com/docs/{{version}}/Illuminate/Foundation/Vite.html) | &nbsp; |"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Using Helper Methods for Common Route Parameter Constraints",
    "codeDescription": "Demonstrates convenient helper methods for applying common parameter constraints like numbers, alpha characters, UUIDs, etc.",
    "codeLanguage": "php",
    "codeTokens": 212,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_16",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/user/{id}/{name}', function (string $id, string $name) {\n    // ...\n})->whereNumber('id')->whereAlpha('name');\n\nRoute::get('/user/{name}', function (string $name) {\n    // ...\n})->whereAlphaNumeric('name');\n\nRoute::get('/user/{id}', function (string $id) {\n    // ...\n})->whereUuid('id');\n\nRoute::get('/user/{id}', function (string $id) {\n    // ...\n})->whereUlid('id');\n\nRoute::get('/category/{category}', function (string $category) {\n    // ...\n})->whereIn('category', ['movie', 'song', 'painting']);\n\nRoute::get('/category/{category}', function (string $category) {\n    // ...\n})->whereIn('category', CategoryEnum::cases());"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Stopping Exception Propagation to Default Logging Stack",
    "codeDescription": "Example of preventing an exception from being logged by the default logging stack by using the stop method or returning false from the reporting callback.",
    "codeLanguage": "php",
    "codeTokens": 103,
    "codeId": "https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Error Handling Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Exceptions\\InvalidOrderException;\n\n->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->report(function (InvalidOrderException $e) {\n        // ...\n    })->stop();\n\n    $exceptions->report(function (InvalidOrderException $e) {\n        return false;\n    });\n})"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Using rescue() Helper with Default Values in PHP",
    "codeDescription": "Demonstrates using the rescue() helper with a default value that is returned if an exception occurs. The default value can be a simple value or a closure to be executed.",
    "codeLanguage": "php",
    "codeTokens": 89,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_72",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "return rescue(function () {\n    return $this->method();\n}, false);\n\nreturn rescue(function () {\n    return $this->method();\n}, function () {\n    return $this->failure();\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Retrieving All Input Values as Associative Array in Laravel",
    "codeDescription": "Calling the input() method without arguments to get all input values as an associative array.",
    "codeLanguage": "php",
    "codeTokens": 42,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_10",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$input = $request->input();"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Registering Custom Cache Driver in Laravel",
    "codeDescription": "Shows how to register a custom cache driver using the Cache facade's extend method. This should be done in a service provider to ensure proper integration with Laravel's service container.",
    "codeLanguage": "php",
    "codeTokens": 72,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_22",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Cache::extend('mongo', function (Application $app) {\n    return Cache::repository(new MongoStore);\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Recycling Models in Laravel Factory Relationships",
    "codeDescription": "Examples of using the recycle method to reuse existing models across multiple factory relationships. Shows both single model and collection recycling approaches.",
    "codeLanguage": "php",
    "codeTokens": 78,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_27",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "Ticket::factory()\n    ->recycle(Airline::factory()->create())\n    ->create();\n\nTicket::factory()\n    ->recycle($airlines)\n    ->create();"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Authorizing Actions Using Gate Facade in Laravel Controller",
    "codeDescription": "This snippet demonstrates how to use the Gate facade's 'authorize' method to authorize actions within a controller method, which throws an exception if the action is not authorized.",
    "codeLanguage": "php",
    "codeTokens": 160,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_23",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Post;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Gate;\n\nclass PostController extends Controller\n{\n    /**\n     * Update the given blog post.\n     *\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */\n    public function update(Request $request, Post $post): RedirectResponse\n    {\n        Gate::authorize('update', $post);\n\n        // The current user can update the blog post...\n\n        return redirect('/posts');\n    }\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Handling Chain Failures with Catch Method",
    "codeDescription": "Using the catch method to specify a closure that should be executed if any job in the chain fails, receiving the Throwable exception that caused the failure.",
    "codeLanguage": "php",
    "codeTokens": 100,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_33",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Bus;\nuse Throwable;\n\nBus::chain([\n    new ProcessPodcast,\n    new OptimizePodcast,\n    new ReleasePodcast,\n])->catch(function (Throwable $e) {\n    // A job within the chain has failed...\n})->dispatch();"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Creating Batchable Queue Jobs",
    "codeDescription": "Defines a job class that can be processed as part of a batch using the Batchable trait.",
    "codeLanguage": "php",
    "codeTokens": 138,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_46",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Jobs;\n\nuse Illuminate\\Bus\\Batchable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Queue\\Queueable;\n\nclass ImportCsv implements ShouldQueue\n{\n    use Batchable, Queueable;\n\n    /**\n     * Execute the job.\n     */\n    public function handle(): void\n    {\n        if ($this->batch()->cancelled()) {\n            // Determine if the batch has been cancelled...\n\n            return;\n        }\n\n        // Import a portion of the CSV file...\n    }\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Attaching Middleware to a Job",
    "codeDescription": "Example of how to attach custom middleware to a job by implementing the middleware method.",
    "codeLanguage": "php",
    "codeTokens": 76,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_12",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Jobs\\Middleware\\RateLimited;\n\n/**\n * Get the middleware the job should pass through.\n *\n * @return array<int, object>\n */\npublic function middleware(): array\n{\n    return [new RateLimited];\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Basic Component Slot Implementation",
    "codeDescription": "Shows implementation of a basic alert component with slot content",
    "codeLanguage": "blade",
    "codeTokens": 42,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_38",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<div class=\"alert alert-danger\">\n    {{ $slot }}\n</div>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Retrieving Old Input in Laravel Controllers",
    "codeDescription": "Retrieve previously flashed input data using the Request object's old method. This retrieves form values that were preserved from the previous request.",
    "codeLanguage": "php",
    "codeTokens": 52,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_43",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$username = $request->old('username');"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Registering Event Subscribers in Laravel Service Provider",
    "codeDescription": "Shows how to register event subscribers in a Laravel service provider's boot method.",
    "codeLanguage": "php",
    "codeTokens": 98,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_18",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Providers;\n\nuse App\\Listeners\\UserEventSubscriber;\nuse Illuminate\\Support\\Facades\\Event;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     */\n    public function boot(): void\n    {\n        Event::subscribe(UserEventSubscriber::class);\n    }\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Acquiring and Passing Lock in Laravel Cache",
    "codeDescription": "Demonstrates how to acquire a lock, dispatch a job with the lock's owner token, and release the lock in a separate process. This is useful for managing locks across different parts of an application.",
    "codeLanguage": "php",
    "codeTokens": 100,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_18",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$podcast = Podcast::find($id);\n\n$lock = Cache::lock('processing', 120);\n\nif ($lock->get()) {\n    ProcessPodcast::dispatch($podcast, $lock->owner());\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Rendering Inline Blade Templates in Laravel",
    "codeDescription": "Shows how to use the Blade facade to render inline Blade templates with optional data and temporary file cleanup.",
    "codeLanguage": "php",
    "codeTokens": 66,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_60",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Blade;\n\nreturn Blade::render('Hello, {{ $name }}', ['name' => 'Julian Bashir']);"
      },
      {
        "language": "php",
        "code": "return Blade::render(\n    'Hello, {{ $name }}',\n    ['name' => 'Julian Bashir'],\n    deleteCachedView: true\n);"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Merging Default Classes with Component Attributes",
    "codeDescription": "Demonstrates how to merge default CSS classes with those passed to the component using the $attributes->merge() method.",
    "codeLanguage": "blade",
    "codeTokens": 65,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_32",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<div {{ $attributes->merge(['class' => 'alert alert-'.$type]) }}>\n    {{ $message }}\n</div>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Configuring Factory Callbacks",
    "codeDescription": "Example of defining afterMaking and afterCreating callbacks in a factory's configure method. These callbacks allow for additional operations to be performed after a model is instantiated or created.",
    "codeLanguage": "php",
    "codeTokens": 134,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_6",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "namespace Database\\Factories;\n\nuse App\\Models\\User;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\nclass UserFactory extends Factory\n{\n    /**\n     * Configure the model factory.\n     */\n    public function configure(): static\n    {\n        return $this->afterMaking(function (User $user) {\n            // ...\n        })->afterCreating(function (User $user) {\n            // ...\n        });\n    }\n\n    // ...\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Accessing Parent Data in Child Component",
    "codeDescription": "Shows how to use the @aware directive to access data from a parent component in a child component.",
    "codeLanguage": "blade",
    "codeTokens": 83,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_48",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<!-- /resources/views/components/menu/item.blade.php -->\n\n@aware(['color' => 'gray'])\n\n<li {{ $attributes->merge(['class' => 'text-'.$color.'-800']) }}>\n    {{ $slot }}\n</li>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Synchronous Job Dispatching in Laravel",
    "codeDescription": "Demonstrates how to dispatch a job synchronously using dispatchSync method for immediate execution.",
    "codeLanguage": "php",
    "codeTokens": 136,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_25",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Jobs\\ProcessPodcast;\nuse App\\Models\\Podcast;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass PodcastController extends Controller\n{\n    /**\n     * Store a new podcast.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        $podcast = Podcast::create(/* ... */);\n\n        // Create podcast...\n\n        ProcessPodcast::dispatchSync($podcast);\n\n        return redirect('/podcasts');\n    }\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Specifying Connection and Queue for Job Chains",
    "codeDescription": "Example of specifying which connection and queue to use for all jobs in a chain using the onConnection and onQueue methods, which apply to all jobs unless they define their own connection/queue.",
    "codeLanguage": "php",
    "codeTokens": 90,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_31",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Bus::chain([\n    new ProcessPodcast,\n    new OptimizePodcast,\n    new ReleasePodcast,\n])->onConnection('redis')->onQueue('podcasts')->dispatch();"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Excluding Middleware from Specific Routes in Laravel",
    "codeDescription": "Example of excluding middleware from specific routes within a middleware group using the withoutMiddleware method. This allows exceptions to group-wide middleware rules.",
    "codeLanguage": "php",
    "codeTokens": 103,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_8",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Http\\Middleware\\EnsureTokenIsValid;\n\nRoute::middleware([EnsureTokenIsValid::class])->group(function () {\n    Route::get('/', function () {\n        // ...\n    });\n\n    Route::get('/profile', function () {\n        // ...\n    })->withoutMiddleware([EnsureTokenIsValid::class]);\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Appending All Query String Values to Pagination Links in Laravel",
    "codeDescription": "Demonstrates how to append all current request query string values to pagination links using the withQueryString method.",
    "codeLanguage": "php",
    "codeTokens": 48,
    "codeId": "https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-18_snippet_9",
    "pageTitle": "Laravel Database Pagination Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$users = User::paginate(15)->withQueryString();"
      }
    ],
    "relevance": 0.924
  },
  {
    "codeTitle": "Checking for List Arrays with Arr::isList() in PHP",
    "codeDescription": "The Arr::isList method returns true if the given array's keys are sequential integers beginning from zero. It helps identify simple, numerically indexed arrays.",
    "codeLanguage": "php",
    "codeTokens": 100,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_15",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Arr;\n\n$isList = Arr::isList(['foo', 'bar', 'baz']);\n\n// true\n\n$isList = Arr::isList(['product' => ['name' => 'Desk', 'price' => 100]]);\n\n// false"
      }
    ],
    "relevance": 0.923
  },
  {
    "codeTitle": "Configuring Laravel Mix Asset Compilation",
    "codeDescription": "Demonstrates basic Laravel Mix configuration for compiling JavaScript and CSS files. Uses mix.js() for JavaScript compilation and postCss() for CSS processing, showing the fluent API syntax for defining output paths.",
    "codeLanguage": "javascript",
    "codeTokens": 79,
    "codeId": "https://github.com/laravel/docs/blob/12.x/mix.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Mix Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "mix.js('resources/js/app.js', 'public/js')\n    .postCss('resources/css/app.css', 'public/css');"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Array Filtering with Reject in Laravel",
    "codeDescription": "The Arr::reject method filters an array by removing elements that match the given closure condition.",
    "codeLanguage": "php",
    "codeTokens": 105,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_30",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Arr;\n\n$array = [100, '200', 300, '400', 500];\n\n$filtered = Arr::reject($array, function (string|int $value, int $key) {\n    return is_string($value);\n});\n\n// [0 => 100, 2 => 300, 4 => 500]"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Testing a Laravel Helper with Facade Mocking",
    "codeDescription": "Demonstrates how to test a route that uses the cache helper function by mocking the underlying Cache facade, showing the flexibility of Laravel's testing approach.",
    "codeLanguage": "php",
    "codeTokens": 108,
    "codeId": "https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Facades",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Cache;\n\n/**\n * A basic functional test example.\n */\npublic function test_basic_example(): void\n{\n    Cache::shouldReceive('get')\n        ->with('key')\n        ->andReturn('value');\n\n    $response = $this->get('/cache');\n\n    $response->assertSee('value');\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Custom Exception Rendering in Laravel",
    "codeDescription": "Shows how to register a custom rendering closure for specific exception types in Laravel's bootstrap/app.php file. The closure returns a view response for an InvalidOrderException.",
    "codeLanguage": "php",
    "codeTokens": 107,
    "codeId": "https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-18_snippet_11",
    "pageTitle": "Laravel Error Handling Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Exceptions\\InvalidOrderException;\nuse Illuminate\\Http\\Request;\n\n->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->render(function (InvalidOrderException $e, Request $request) {\n        return response()->view('errors.invalid-order', status: 500);\n    });\n})"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Executing Multiple Result Set Query in Laravel PHP",
    "codeDescription": "Demonstrates how to use the selectResultSets method to retrieve multiple result sets from a stored procedure call.",
    "codeLanguage": "php",
    "codeTokens": 69,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_5",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "[$options, $notifications] = DB::selectResultSets(\n    \"CALL get_user_options_and_notifications(?)\", $request->user()->id\n);"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Specifying Custom Index Names in Laravel Migrations",
    "codeDescription": "This snippet demonstrates how to specify a custom index name by passing a second argument to the index creation method.",
    "codeLanguage": "php",
    "codeTokens": 49,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_50",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "$table->unique('email', 'unique_email');"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Supplying Additional Context to Gates",
    "codeDescription": "Example of passing additional parameters to a gate for more complex authorization decisions based on multiple factors.",
    "codeLanguage": "php",
    "codeTokens": 147,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Category;\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Gate;\n\nGate::define('create-post', function (User $user, Category $category, bool $pinned) {\n    if (! $user->canPublishToGroup($category->group)) {\n        return false;\n    } elseif ($pinned && ! $user->canPinPosts()) {\n        return false;\n    }\n\n    return true;\n});\n\nif (Gate::check('create-post', [$category, $pinned])) {\n    // The user can create the post...\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Implementing Factory State Methods",
    "codeDescription": "Example of defining a state transformation method in a factory class. This suspended method modifies the account_status attribute, allowing this state to be applied when creating model instances.",
    "codeLanguage": "php",
    "codeTokens": 106,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_4",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Database\\Eloquent\\Factories\\Factory;\n\n/**\n * Indicate that the user is suspended.\n */\npublic function suspended(): Factory\n{\n    return $this->state(function (array $attributes) {\n        return [\n            'account_status' => 'suspended',\n        ];\n    });\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Creating Has Many Relationships in Laravel Factories",
    "codeDescription": "Shows how to create 'has many' relationships using Laravel's factory methods, including state manipulations on related models.",
    "codeLanguage": "php",
    "codeTokens": 106,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_18",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Post;\nuse App\\Models\\User;\n\n$user = User::factory()\n    ->has(\n        Post::factory()\n            ->count(3)\n            ->state(function (array $attributes, User $user) {\n                return ['user_type' => $user->type];\n            })\n        )\n    ->create();"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Configuring Redis-Based Rate Limiting in Laravel",
    "codeDescription": "This snippet shows how to configure Laravel to use Redis for rate limiting instead of the default cache driver. This is done in the bootstrap/app.php file using the throttleWithRedis method.",
    "codeLanguage": "php",
    "codeTokens": 74,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_46",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "->withMiddleware(function (Middleware $middleware) {\n    $middleware->throttleWithRedis();\n    // ...\n})"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Writing to Specific Log Channels in PHP with Laravel",
    "codeDescription": "Shows how to write log messages to specific channels or stacks of channels using Laravel's Log facade.",
    "codeLanguage": "php",
    "codeTokens": 68,
    "codeId": "https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-18_snippet_11",
    "pageTitle": "Laravel Logging Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Log;\n\nLog::channel('slack')->info('Something happened!');\n\nLog::stack(['single', 'slack'])->info('Something happened!');"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Applying Regular Expression Constraints to Route Parameters",
    "codeDescription": "Shows how to constrain route parameters to certain formats using the 'where' method with regular expressions.",
    "codeLanguage": "php",
    "codeTokens": 140,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_15",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/user/{name}', function (string $name) {\n    // ...\n})->where('name', '[A-Za-z]+');\n\nRoute::get('/user/{id}', function (string $id) {\n    // ...\n})->where('id', '[0-9]+');\n\nRoute::get('/user/{id}/{name}', function (string $id, string $name) {\n    // ...\n})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Using Gate::authorize to Throw Exception on Failed Authorization",
    "codeDescription": "Example of using Gate::authorize to automatically throw an AuthorizationException if the user doesn't have permission.",
    "codeLanguage": "php",
    "codeTokens": 51,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Gate::authorize('update-post', $post);\n\n// The action is authorized..."
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Dispatching Events in Laravel Controllers",
    "codeDescription": "Example of dispatching events from within a Laravel controller, showing integration with order processing logic.",
    "codeLanguage": "php",
    "codeTokens": 134,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_13",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Events\\OrderShipped;\nuse App\\Models\\Order;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass OrderShipmentController extends Controller\n{\n    /**\n     * Ship the given order.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        $order = Order::findOrFail($request->order_id);\n\n        // Order shipment logic...\n\n        OrderShipped::dispatch($order);\n\n        return redirect('/orders');\n    }\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Basic Process Execution in Laravel",
    "codeDescription": "Demonstrates how to run a basic synchronous process using Laravel's Process facade and retrieve its output.",
    "codeLanguage": "php",
    "codeTokens": 58,
    "codeId": "https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Process Management Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Process;\n\n$result = Process::run('ls -la');\n\nreturn $result->output();"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Specifying Connection and Queue for Laravel Batch Jobs in PHP",
    "codeDescription": "Shows how to specify the connection and queue for batched jobs using the onConnection and onQueue methods. All jobs in the batch must use the same connection and queue.",
    "codeLanguage": "php",
    "codeTokens": 89,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_49",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$batch = Bus::batch([\n    // ...\n])->then(function (Batch $batch) {\n    // All jobs completed successfully...\n})->onConnection('redis')->onQueue('imports')->dispatch();"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Faking Specific Events in Laravel Tests using PHPUnit",
    "codeDescription": "Shows how to fake specific events in Laravel tests using PHPUnit syntax. Demonstrates order creation and event assertion while maintaining normal event dispatch for non-faked events.",
    "codeLanguage": "php",
    "codeTokens": 115,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_22",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * Test order process.\n */\npublic function test_orders_can_be_processed(): void\n{\n    Event::fake([\n        OrderCreated::class,\n    ]);\n\n    $order = Order::factory()->create();\n\n    Event::assertDispatched(OrderCreated::class);\n\n    // Other events are dispatched as normal...\n    $order->update([...]);\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Implementing Queue Worker Loop Callback in Laravel",
    "codeDescription": "Shows how to register a callback that executes before the queue worker attempts to fetch a job, specifically demonstrating how to rollback any pending database transactions.",
    "codeLanguage": "php",
    "codeTokens": 84,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_102",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Queue;\n\nQueue::looping(function () {\n    while (DB::transactionLevel() > 0) {\n        DB::rollBack();\n    }\n});"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Laravel Job Handle Method Dependency Binding",
    "codeDescription": "Example showing how to manually bind dependencies for a job's handle method using the container's bindMethod.",
    "codeLanguage": "php",
    "codeTokens": 102,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Jobs\\ProcessPodcast;\nuse App\\Services\\AudioProcessor;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n$this->app->bindMethod([ProcessPodcast::class, 'handle'], function (ProcessPodcast $job, Application $app) {\n    return $job->handle($app->make(AudioProcessor::class));\n});"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Creating Models with Pending Attributes from Scopes",
    "codeDescription": "Shows how to create new models using scopes with pending attributes, where the created model will include the attributes defined in the scope.",
    "codeLanguage": "php",
    "codeTokens": 67,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_66",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$draft = Post::draft()->create(['title' => 'In Progress']);\n\n$draft->hidden; // true"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Testing Event Dispatching in Laravel with Pest",
    "codeDescription": "Demonstrates how to test event dispatching using Laravel's Event facade with Pest testing framework.",
    "codeLanguage": "php",
    "codeTokens": 164,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_19",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nuse App\\Events\\OrderFailedToShip;\nuse App\\Events\\OrderShipped;\nuse Illuminate\\Support\\Facades\\Event;\n\ntest('orders can be shipped', function () {\n    Event::fake();\n\n    // Perform order shipping...\n\n    // Assert that an event was dispatched...\n    Event::assertDispatched(OrderShipped::class);\n\n    // Assert an event was dispatched twice...\n    Event::assertDispatched(OrderShipped::class, 2);\n\n    // Assert an event was not dispatched...\n    Event::assertNotDispatched(OrderFailedToShip::class);\n\n    // Assert that no events were dispatched...\n    Event::assertNothingDispatched();\n});"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Dispatching Closure to Queue",
    "codeDescription": "Example of dispatching a closure to the Laravel queue with error handling using the catch method.",
    "codeLanguage": "php",
    "codeTokens": 97,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_62",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$podcast = App\\Podcast::find(1);\n\ndispatch(function () use ($podcast) {\n    $podcast->publish();\n});\n\ndispatch(function () use ($podcast) {\n    $podcast->publish();\n})->catch(function (Throwable $e) {\n    // This job has failed...\n});"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "API Exception Handling for NotFoundHttpException",
    "codeDescription": "Demonstrates custom handling of NotFoundHttpException for API routes, returning a JSON response when the request is for an API endpoint.",
    "codeLanguage": "php",
    "codeTokens": 119,
    "codeId": "https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-18_snippet_12",
    "pageTitle": "Laravel Error Handling Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n\n->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->render(function (NotFoundHttpException $e, Request $request) {\n        if ($request->is('api/*')) {\n            return response()->json([\n                'message' => 'Record not found.'\n            ], 404);\n        }\n    });\n})"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Retrieving Scalar Value from Database Query in Laravel",
    "codeDescription": "Demonstrates how to use the scalar method of Laravel's DB facade to retrieve a single scalar value from a database query.",
    "codeLanguage": "php",
    "codeTokens": 70,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_4",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$burgers = DB::scalar(\n    \"select count(case when food = 'burger' then 1 end) as burgers from menu\"\n);"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Running Laravel Queue Worker with Priority Queues",
    "codeDescription": "Shows how to run a Laravel queue worker that processes jobs from multiple queues with different priorities.",
    "codeLanguage": "Shell",
    "codeTokens": 43,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "Shell",
        "code": "php artisan queue:work --queue=high,default"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Creating Polymorphic Relationship Columns with morphs()",
    "codeDescription": "Creates {column}_id and {column}_type columns for polymorphic relationships. The ID column type varies based on model key type (UNSIGNED BIGINT, CHAR(36), or CHAR(26)).",
    "codeLanguage": "php",
    "codeTokens": 67,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_28",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "$table->morphs('taggable');"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Calling Dynamic Scopes with Arguments in Laravel",
    "codeDescription": "Shows how to call dynamic scopes by passing arguments that correspond to the parameters defined in the scope method signature.",
    "codeLanguage": "php",
    "codeTokens": 52,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_64",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$users = User::ofType('admin')->get();"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Implementing Horizon Authorization Gate",
    "codeDescription": "PHP code defining authorization gate to control access to Horizon dashboard in non-local environments.",
    "codeLanguage": "php",
    "codeTokens": 100,
    "codeId": "https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Horizon Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * Register the Horizon gate.\n *\n * This gate determines who can access Horizon in non-local environments.\n */\nprotected function gate(): void\n{\n    Gate::define('viewHorizon', function (User $user) {\n        return in_array($user->email, [\n            'taylor@laravel.com',\n        ]);\n    });\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Creating Event Subscribers in Laravel",
    "codeDescription": "Demonstrates how to create an event subscriber class that can handle multiple events with dedicated methods.",
    "codeLanguage": "php",
    "codeTokens": 195,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_16",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Listeners;\n\nuse Illuminate\\Auth\\Events\\Login;\nuse Illuminate\\Auth\\Events\\Logout;\nuse Illuminate\\Events\\Dispatcher;\n\nclass UserEventSubscriber\n{\n    /**\n     * Handle user login events.\n     */\n    public function handleUserLogin(Login $event): void {}\n\n    /**\n     * Handle user logout events.\n     */\n    public function handleUserLogout(Logout $event): void {}\n\n    /**\n     * Register the listeners for the subscriber.\n     */\n    public function subscribe(Dispatcher $events): void\n    {\n        $events->listen(\n            Login::class,\n            [UserEventSubscriber::class, 'handleUserLogin']\n        );\n\n        $events->listen(\n            Logout::class,\n            [UserEventSubscriber::class, 'handleUserLogout']\n        );\n    }\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Stateless Basic Auth Middleware in Laravel",
    "codeDescription": "Custom middleware implementation for stateless HTTP Basic Authentication using Laravel's onceBasic method.",
    "codeLanguage": "php",
    "codeTokens": 134,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_13",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass AuthenticateOnceWithBasicAuth\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n     */\n    public function handle(Request $request, Closure $next): Response\n    {\n        return Auth::onceBasic() ?: $next($request);\n    }\n\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Executing Unprepared SQL Statement in Laravel",
    "codeDescription": "Demonstrates how to use the unprepared method of the DB facade to execute an SQL statement without binding any values.",
    "codeLanguage": "php",
    "codeTokens": 59,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_11",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "DB::unprepared('update users set votes = 100 where name = \"Dries\"');"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Validating Successful File Uploads in Laravel",
    "codeDescription": "Check if a file was uploaded without errors using the isValid method on the UploadedFile instance. This confirms there were no problems during the upload process.",
    "codeLanguage": "php",
    "codeTokens": 61,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_50",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "if ($request->file('photo')->isValid()) {\n    // ...\n}"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Default Attribute Merging in Blade Components",
    "codeDescription": "Shows how to set default attribute values that can be overridden when the component is used, using the merge() method.",
    "codeLanguage": "blade",
    "codeTokens": 62,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_35",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<button {{ $attributes->merge(['type' => 'button']) }}>\n    {{ $slot }}\n</button>"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Laravel Maintenance Mode Commands",
    "codeDescription": "Various Artisan commands for managing application maintenance mode with different options like refresh, retry, and secret tokens.",
    "codeLanguage": "shell",
    "codeTokens": 111,
    "codeId": "https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-18_snippet_21",
    "pageTitle": "Laravel Configuration Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan down\nphp artisan down --refresh=15\nphp artisan down --retry=60\nphp artisan down --secret=\"1630542a-246b-4b66-afa1-dd72a4c43515\"\nphp artisan down --with-secret\nphp artisan down --render=\"errors::503\"\nphp artisan down --redirect=/\nphp artisan up"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Setting Multiple Session Values with session() Helper in PHP",
    "codeDescription": "Sets multiple session values by passing an array of key/value pairs to the session() helper function. Provides a convenient way to store multiple values at once.",
    "codeLanguage": "php",
    "codeTokens": 63,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_81",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "session(['chairs' => 7, 'instruments' => 3]);"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Cursor Pagination Implementation",
    "codeDescription": "Example of implementing cursor-based pagination using the cursorPaginate method",
    "codeLanguage": "php",
    "codeTokens": 47,
    "codeId": "https://github.com/laravel/docs/blob/12.x/pagination.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Database Pagination Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$users = DB::table('users')->orderBy('id')->cursorPaginate(15);"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Creating Detailed Gate Responses",
    "codeDescription": "Example of returning an Illuminate\\Auth\\Access\\Response from a gate to provide more detailed authorization results with custom messages.",
    "codeLanguage": "php",
    "codeTokens": 96,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_7",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\nuse Illuminate\\Auth\\Access\\Response;\nuse Illuminate\\Support\\Facades\\Gate;\n\nGate::define('edit-settings', function (User $user) {\n    return $user->isAdmin\n        ? Response::allow()\n        : Response::deny('You must be an administrator.');\n});"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Basic Laravel Resource Route Return",
    "codeDescription": "Demonstrates the basic way to return a resource directly from a route closure, showing how to find and return a user resource by ID.",
    "codeLanguage": "php",
    "codeTokens": 77,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_20",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\nRoute::get('/user/{id}', function (string $id) {\n    return User::findOrFail($id)->toResource();\n});"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Using Magic Methods for Has Many Relationships in Laravel Factories",
    "codeDescription": "Demonstrates the use of Laravel's magic factory relationship methods to build 'has many' relationships more concisely.",
    "codeLanguage": "php",
    "codeTokens": 84,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_19",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$user = User::factory()\n    ->hasPosts(3, function (array $attributes, User $user) {\n        return ['user_type' => $user->type];\n    })\n    ->create();"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Rendering Anonymous Component with Properties",
    "codeDescription": "Demonstrates how to render an anonymous component while passing properties and additional attributes.",
    "codeLanguage": "blade",
    "codeTokens": 49,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_47",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<x-alert type=\"error\" :message=\"$message\" class=\"mb-4\"/>"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Using Model Factories in Pest Tests",
    "codeDescription": "Shows how to instantiate models using Laravel model factories in Pest tests to easily create test data.",
    "codeLanguage": "php",
    "codeTokens": 63,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Database Testing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\ntest('models can be instantiated', function () {\n    $user = User::factory()->create();\n\n    // ...\n});"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Testing Queue Jobs with PHPUnit",
    "codeDescription": "Example of testing queued jobs using Laravel's Queue facade with PHPUnit testing framework. Shows the same assertions as the Pest example but in PHPUnit syntax.",
    "codeLanguage": "php",
    "codeTokens": 250,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_94",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace Tests\\Feature;\n\nuse App\\Jobs\\AnotherJob;\nuse App\\Jobs\\FinalJob;\nuse App\\Jobs\\ShipOrder;\nuse Illuminate\\Support\\Facades\\Queue;\nuse Tests\\TestCase;\n\nclass ExampleTest extends TestCase\n{\n    public function test_orders_can_be_shipped(): void\n    {\n        Queue::fake();\n\n        // Perform order shipping...\n\n        // Assert that no jobs were pushed...\n        Queue::assertNothingPushed();\n\n        // Assert a job was pushed to a given queue...\n        Queue::assertPushedOn('queue-name', ShipOrder::class);\n\n        // Assert a job was pushed twice...\n        Queue::assertPushed(ShipOrder::class, 2);\n\n        // Assert a job was not pushed...\n        Queue::assertNotPushed(AnotherJob::class);\n\n        // Assert that a Closure was pushed to the queue...\n        Queue::assertClosurePushed();\n\n        // Assert the total number of jobs that were pushed...\n        Queue::assertCount(3);\n    }\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Checking for Associative Arrays with Arr::isAssoc() in PHP",
    "codeDescription": "The Arr::isAssoc method returns true if the given array is an associative array. An array is considered \"associative\" if it doesn't have sequential numerical keys beginning with zero.",
    "codeLanguage": "php",
    "codeTokens": 106,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_14",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Arr;\n\n$isAssoc = Arr::isAssoc(['product' => ['name' => 'Desk', 'price' => 100]]);\n\n// true\n\n$isAssoc = Arr::isAssoc([1, 2, 3]);\n\n// false"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Excluding Middleware from a Route Group in Laravel",
    "codeDescription": "Example of excluding a set of middleware from an entire group of routes using the withoutMiddleware method. This applies the exclusion to all routes defined within the group.",
    "codeLanguage": "php",
    "codeTokens": 86,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_9",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Http\\Middleware\\EnsureTokenIsValid;\n\nRoute::withoutMiddleware([EnsureTokenIsValid::class])->group(function () {\n    Route::get('/profile', function () {\n        // ...\n    });\n});"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Implementing Custom Collections by Overriding newCollection Method in Laravel",
    "codeDescription": "This snippet shows how to override the newCollection method in a Laravel Eloquent model to return a custom Collection instance. It requires the App\\Support\\UserCollection class to be implemented.",
    "codeLanguage": "php",
    "codeTokens": 160,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#2025-04-18_snippet_9",
    "pageTitle": "Eloquent Collections in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse App\\Support\\UserCollection;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Create a new Eloquent Collection instance.\n     *\n     * @param  array<int, \\Illuminate\\Database\\Eloquent\\Model>  $models\n     * @return \\Illuminate\\Database\\Eloquent\\Collection<int, \\Illuminate\\Database\\Eloquent\\Model>\n     */\n    public function newCollection(array $models = []): Collection\n    {\n        return new UserCollection($models);\n    }\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Laravel Eloquent Model Observer Class Structure",
    "codeDescription": "Example of a generated UserObserver class with methods for different lifecycle events. Each method receives the affected model as its only argument and is triggered when the corresponding event occurs.",
    "codeLanguage": "php",
    "codeTokens": 229,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_74",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Observers;\n\nuse App\\Models\\User;\n\nclass UserObserver\n{\n    /**\n     * Handle the User \"created\" event.\n     */\n    public function created(User $user): void\n    {\n        // ...\n    }\n\n    /**\n     * Handle the User \"updated\" event.\n     */\n    public function updated(User $user): void\n    {\n        // ...\n    }\n\n    /**\n     * Handle the User \"deleted\" event.\n     */\n    public function deleted(User $user): void\n    {\n        // ...\n    }\n\n    /**\n     * Handle the User \"restored\" event.\n     */\n    public function restored(User $user): void\n    {\n        // ...\n    }\n\n    /**\n     * Handle the User \"forceDeleted\" event.\n     */\n    public function forceDeleted(User $user): void\n    {\n        // ...\n    }\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Determining Application Environment in PHP",
    "codeDescription": "Demonstrates how to retrieve the current application environment using the App facade's environment method.",
    "codeLanguage": "php",
    "codeTokens": 45,
    "codeId": "https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\App;\n\n$environment = App::environment();"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Implementing Two-Factor Authentication in User Model with Laravel Fortify",
    "codeDescription": "Shows how to enable two-factor authentication in a Laravel application by adding the TwoFactorAuthenticatable trait to the User model class, which provides the necessary methods for 2FA functionality.",
    "codeLanguage": "php",
    "codeTokens": 107,
    "codeId": "https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-18_snippet_7",
    "pageTitle": "Laravel Fortify Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\nuse Laravel\\Fortify\\TwoFactorAuthenticatable;\n\nclass User extends Authenticatable\n{\n    use Notifiable, TwoFactorAuthenticatable;\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Flashing Input with Redirect in Laravel",
    "codeDescription": "Chain input flashing with a redirect response. This common pattern preserves form data while redirecting the user after form submission, especially after validation errors.",
    "codeLanguage": "php",
    "codeTokens": 81,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_42",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "return redirect('/form')->withInput();\n\nreturn redirect()->route('user.create')->withInput();\n\nreturn redirect('/form')->withInput(\n    $request->except('password')\n);"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Sorting Middleware in Laravel",
    "codeDescription": "Shows how to specify middleware priority using the 'priority' method in the bootstrap/app.php file, allowing control over the execution order of middleware.",
    "codeLanguage": "php",
    "codeTokens": 225,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_15",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "->withMiddleware(function (Middleware $middleware) {\n    $middleware->priority([\n        \\Illuminate\\Foundation\\Http\\Middleware\\HandlePrecognitiveRequests::class,\n        \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n        \\Illuminate\\Session\\Middleware\\StartSession::class,\n        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\ValidateCsrfToken::class,\n        \\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class,\n        \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n        \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        \\Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests::class,\n        \\Illuminate\\Auth\\Middleware\\Authorize::class,\n    ]);\n})"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Refreshing Model Instances in Laravel",
    "codeDescription": "Shows how to refresh model instances using the fresh and refresh methods to get updated data from the database.",
    "codeLanguage": "php",
    "codeTokens": 90,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_16",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$flight = Flight::where('number', 'FR 900')->first();\n\n$freshFlight = $flight->fresh();\n\n$flight->number = 'FR 456';\n\n$flight->refresh();\n\n$flight->number; // \"FR 900\""
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Applying Global Route Parameter Constraints",
    "codeDescription": "Demonstrates how globally defined constraints are automatically applied to all routes using that parameter name.",
    "codeLanguage": "php",
    "codeTokens": 59,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_18",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/user/{id}', function (string $id) {\n    // Only executed if {id} is numeric...\n});"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Utilizing the Loop Variable in Blade Templates",
    "codeDescription": "Shows how to use the $loop variable in Blade templates to access loop information such as index, iteration count, and nesting level.",
    "codeLanguage": "blade",
    "codeTokens": 103,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_12",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "@foreach ($users as $user)\n    @if ($loop->first)\n        This is the first iteration.\n    @endif\n\n    @if ($loop->last)\n        This is the last iteration.\n    @endif\n\n    <p>This is user {{ $user->id }}</p>\n@endforeach"
      },
      {
        "language": "blade",
        "code": "@foreach ($users as $user)\n    @foreach ($user->posts as $post)\n        @if ($loop->parent->first)\n            This is the first iteration of the parent loop.\n        @endif\n    @endforeach\n@endforeach"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Using Authorization Directives in Laravel Blade Templates",
    "codeDescription": "This snippet shows how to use the @can, @cannot, and @canany directives in Blade templates to conditionally display content based on user authorization.",
    "codeLanguage": "blade",
    "codeTokens": 202,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_26",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "@can('update', $post)\n    <!-- The current user can update the post... -->\n@elsecan('create', App\\Models\\Post::class)\n    <!-- The current user can create new posts... -->\n@else\n    <!-- ... -->\n@endcan\n\n@cannot('update', $post)\n    <!-- The current user cannot update the post... -->\n@elsecannot('create', App\\Models\\Post::class)\n    <!-- The current user cannot create new posts... -->\n@endcannot\n\n@canany(['update', 'view', 'delete'], $post)\n    <!-- The current user can update, view, or delete the post... -->\n@elsecanany(['create'], \\App\\Models\\Post::class)\n    <!-- The current user can create a post... -->\n@endcanany"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Eager Loading Relationships on Eloquent Collection",
    "codeDescription": "Demonstrates how to use the load method to eager load relationships for all models in an Eloquent collection.",
    "codeLanguage": "php",
    "codeTokens": 83,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#2025-04-18_snippet_5",
    "pageTitle": "Eloquent Collections in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$users->load(['comments', 'posts']);\n\n$users->load('comments.author');\n\n$users->load(['comments', 'posts' => fn ($query) => $query->where('active', 1)]);"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Executing Chained Jobs in Laravel Batch in PHP",
    "codeDescription": "Demonstrates how to execute multiple job chains in parallel within a batch, with a callback function that runs when all chains have completed processing.",
    "codeLanguage": "php",
    "codeTokens": 140,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_50",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Jobs\\ReleasePodcast;\nuse App\\Jobs\\SendPodcastReleaseNotification;\nuse Illuminate\\Bus\\Batch;\nuse Illuminate\\Support\\Facades\\Bus;\n\nBus::batch([\n    [\n        new ReleasePodcast(1),\n        new SendPodcastReleaseNotification(1),\n    ],\n    [\n        new ReleasePodcast(2),\n        new SendPodcastReleaseNotification(2),\n    ],\n])->then(function (Batch $batch) {\n    // ...\n})->dispatch();"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Assigning Multiple Middleware to a Route in Laravel",
    "codeDescription": "Example of assigning multiple middleware to a single route by passing an array of middleware class names. This allows multiple processing steps for a specific route.",
    "codeLanguage": "php",
    "codeTokens": 65,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_7",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/', function () {\n    // ...\n})->middleware([First::class, Second::class]);"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Inspecting Laravel Batch Properties and Methods in PHP",
    "codeDescription": "Demonstrates various properties and methods available on the Illuminate\\Bus\\Batch instance for interacting with and inspecting a batch of jobs.",
    "codeLanguage": "php",
    "codeTokens": 197,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_53",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "// The UUID of the batch...\n$batch->id;\n\n// The name of the batch (if applicable)...\n$batch->name;\n\n// The number of jobs assigned to the batch...\n$batch->totalJobs;\n\n// The number of jobs that have not been processed by the queue...\n$batch->pendingJobs;\n\n// The number of jobs that have failed...\n$batch->failedJobs;\n\n// The number of jobs that have been processed thus far...\n$batch->processedJobs();\n\n// The completion percentage of the batch (0-100)...\n$batch->progress();\n\n// Indicates if the batch has finished executing...\n$batch->finished();\n\n// Cancel the execution of the batch...\n$batch->cancel();\n\n// Indicates if the batch has been cancelled...\n$batch->cancelled();"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Removing Items from Laravel Cache",
    "codeDescription": "Demonstrates various methods to remove items from the cache, including using the forget method, setting zero or negative expiration times, and flushing the entire cache.",
    "codeLanguage": "php",
    "codeTokens": 79,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_14",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Cache::forget('key');\n\nCache::put('key', 'value', 0);\n\nCache::put('key', 'value', -5);\n\nCache::flush();"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Configuring Mass Assignment for JSON Columns",
    "codeDescription": "Shows how to make specific JSON attributes mass assignable by adding them to the $fillable array with dot notation. This is required when working with JSON columns.",
    "codeLanguage": "php",
    "codeTokens": 80,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_36",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * The attributes that are mass assignable.\n *\n * @var array<int, string>\n */\nprotected $fillable = [\n    'options->enabled',\n];"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Retrieving Query String Values in Laravel",
    "codeDescription": "Using the query() method to retrieve values specifically from the URL query string.",
    "codeLanguage": "php",
    "codeTokens": 42,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_11",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$name = $request->query('name');"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Monitoring Asynchronous Process Output in Laravel",
    "codeDescription": "Demonstrates how to monitor output from an asynchronous process in real-time using the latestOutput and latestErrorOutput methods.",
    "codeLanguage": "php",
    "codeTokens": 84,
    "codeId": "https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Process Management Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$process = Process::timeout(120)->start('bash import.sh');\n\nwhile ($process->running()) {\n    echo $process->latestOutput();\n    echo $process->latestErrorOutput();\n\n    sleep(1);\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Running Database Seeders in Pest Tests",
    "codeDescription": "Shows how to use the seed method in Pest tests to populate the database with test data using seeders, with options for running specific seeders or multiple seeders.",
    "codeLanguage": "php",
    "codeTokens": 168,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Database Testing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nuse Database\\Seeders\\OrderStatusSeeder;\nuse Database\\Seeders\\TransactionStatusSeeder;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\n\nuses(RefreshDatabase::class);\n\ntest('orders can be created', function () {\n    // Run the DatabaseSeeder...\n    $this->seed();\n\n    // Run a specific seeder...\n    $this->seed(OrderStatusSeeder::class);\n\n    // ...\n\n    // Run an array of specific seeders...\n    $this->seed([\n        OrderStatusSeeder::class,\n        TransactionStatusSeeder::class,\n        // ...\n    ]);\n});"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Publishing Package Configuration in Laravel (PHP)",
    "codeDescription": "Demonstrates how to publish a package's configuration file to the application's config directory using the publishes method in the service provider's boot method.",
    "codeLanguage": "php",
    "codeTokens": 80,
    "codeId": "https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Package Development Guide",
    "codeList": [
      {
        "language": "php",
        "code": "public function boot(): void\n{\n    $this->publishes([\n        __DIR__.'/../config/courier.php' => config_path('courier.php'),\n    ]);\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Error Handling with rescue() Helper in PHP",
    "codeDescription": "Executes a closure while catching any exceptions that occur during execution. Caught exceptions are sent to the exception handler, but the request continues processing.",
    "codeLanguage": "php",
    "codeTokens": 56,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_71",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "return rescue(function () {\n    return $this->method();\n});"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Cancelling Laravel Batches in PHP",
    "codeDescription": "Demonstrates how to cancel a batch's execution and check if a batch has been cancelled within a job.",
    "codeLanguage": "php",
    "codeTokens": 91,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_55",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * Execute the job.\n */\npublic function handle(): void\n{\n    if ($this->user->exceedsImportLimit()) {\n        return $this->batch()->cancel();\n    }\n\n    if ($this->batch()->cancelled()) {\n        return;\n    }\n}"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Allowing All Attributes for Mass Assignment",
    "codeDescription": "Demonstrates how to make all model attributes mass assignable by defining an empty $guarded array. This approach requires careful handling of data passed to Eloquent methods.",
    "codeLanguage": "php",
    "codeTokens": 75,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_37",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * The attributes that aren't mass assignable.\n *\n * @var array<string>|bool\n */\nprotected $guarded = [];"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Implementing Switch Statements in Blade Templates",
    "codeDescription": "Shows how to use @switch, @case, @break, @default, and @endswitch directives to create switch statements in Blade templates.",
    "codeLanguage": "blade",
    "codeTokens": 89,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_10",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "@switch($i)\n    @case(1)\n        First case...\n        @break\n\n    @case(2)\n        Second case...\n        @break\n\n    @default\n        Default case...\n@endswitch"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Customizing the Eloquent Results Query with Laravel Scout",
    "codeDescription": "Shows how to customize the Eloquent query used to retrieve models after Scout obtains search results, useful for eager loading relationships.",
    "codeLanguage": "php",
    "codeTokens": 81,
    "codeId": "https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-18_snippet_41",
    "pageTitle": "Laravel Scout Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Order;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\n$orders = Order::search('Star Trek')\n    ->query(fn (Builder $query) => $query->with('invoices'))\n    ->get();"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Using Resources in Routes",
    "codeDescription": "Examples of returning resources from Laravel routes, including direct instantiation and using the toResource convenience method.",
    "codeLanguage": "php",
    "codeTokens": 86,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Http\\Resources\\UserResource;\nuse App\\Models\\User;\n\nRoute::get('/user/{id}', function (string $id) {\n    return new UserResource(User::findOrFail($id));\n});\n\nreturn User::findOrFail($id)->toResource();"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Manipulating Query Strings with Laravel Uri",
    "codeDescription": "Shows multiple techniques for manipulating query string parameters, including adding new parameters, adding parameters only if missing, replacing the entire query string, pushing values onto array parameters, and removing specific parameters.",
    "codeLanguage": "php",
    "codeTokens": 68,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_109",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$uri = $uri->withQuery(['sort' => 'name']);"
      },
      {
        "language": "php",
        "code": "$uri = $uri->withQueryIfMissing(['page' => 1]);"
      },
      {
        "language": "php",
        "code": "$uri = $uri->replaceQuery(['page' => 1]);"
      },
      {
        "language": "php",
        "code": "$uri = $uri->pushOntoQuery('filter', ['active', 'pending']);"
      },
      {
        "language": "php",
        "code": "$uri = $uri->withoutQuery(['page']);"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Container Binding Check in Laravel",
    "codeDescription": "Shows how to check if a class or interface is bound in the container using the bound method.",
    "codeLanguage": "php",
    "codeTokens": 53,
    "codeId": "https://github.com/laravel/docs/blob/12.x/container.md#2025-04-18_snippet_12",
    "pageTitle": "Laravel Service Container Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "if ($this->app->bound(Transistor::class)) {\n    // ...\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Checking Multiple Input Values Presence in Laravel",
    "codeDescription": "Using has() with an array to check if all specified input values are present on the request.",
    "codeLanguage": "php",
    "codeTokens": 52,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_26",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "if ($request->has(['name', 'email'])) {\n    // ...\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Using Model Factories in PHPUnit Tests",
    "codeDescription": "Demonstrates how to use Laravel model factories in PHPUnit tests to create model instances for testing.",
    "codeLanguage": "php",
    "codeTokens": 66,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Database Testing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\npublic function test_models_can_be_instantiated(): void\n{\n    $user = User::factory()->create();\n\n    // ...\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Testing Laravel Facades with PHPUnit",
    "codeDescription": "Shows how to test a route that uses the Cache facade using PHPUnit. The example demonstrates mocking the Cache facade to verify it was called with the expected arguments.",
    "codeLanguage": "php",
    "codeTokens": 110,
    "codeId": "https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Facades",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Cache;\n\n/**\n * A basic functional test example.\n */\npublic function test_basic_example(): void\n{\n    Cache::shouldReceive('get')\n        ->with('key')\n        ->andReturn('value');\n\n    $response = $this->get('/cache');\n\n    $response->assertSee('value');\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Retrieving Boolean Input Values in Laravel",
    "codeDescription": "Using the boolean() method to convert truthy values like 'on', 'yes', 'true' to boolean true.",
    "codeLanguage": "php",
    "codeTokens": 53,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_17",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$archived = $request->boolean('archived');"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Refreshing and Migrating Database in Laravel",
    "codeDescription": "Shows Artisan commands for refreshing the entire database by rolling back all migrations and re-running them, optionally with seeding.",
    "codeLanguage": "shell",
    "codeTokens": 63,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_12",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan migrate:refresh\n\n# Refresh the database and run all database seeds...\nphp artisan migrate:refresh --seed"
      },
      {
        "language": "shell",
        "code": "php artisan migrate:refresh --step=5"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Customizing Response with Render Hook in PHP",
    "codeDescription": "Demonstrates how to use a render hook to customize the response, including authorization and adding data to the view.",
    "codeLanguage": "php",
    "codeTokens": 152,
    "codeId": "https://github.com/laravel/docs/blob/12.x/folio.md#2025-04-18_snippet_8",
    "pageTitle": "Laravel Folio Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nuse App\\Models\\Post;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\View\\View;\n\nuse function Laravel\\Folio\\render;\n\nrender(function (View $view, Post $post) {\n    if (! Auth::user()->can('view', $post)) {\n        return response('Unauthorized', 403);\n    }\n\n    return $view->with('photos', $post->author->photos);\n}); ?>\n\n<div>\n    {{ $post->content }}\n</div>\n\n<div>\n    This author has also taken {{ count($photos) }} photos.\n</div>"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Creating Polymorphic Relationships in Laravel Factories",
    "codeDescription": "Shows how to create polymorphic relationships, including 'morph many' and 'morph to' relationships, using Laravel factories.",
    "codeLanguage": "php",
    "codeTokens": 85,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_22",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Post;\n\n$post = Post::factory()->hasComments(3)->create();\n\n$comments = Comment::factory()->count(3)->for(\n    Post::factory(), 'commentable'\n)->create();"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Customizing Laravel Fortify Authentication Pipeline",
    "codeDescription": "Shows how to customize the authentication pipeline in Fortify by defining a custom sequence of classes that login requests are processed through. This provides fine-grained control over the authentication flow.",
    "codeLanguage": "php",
    "codeTokens": 239,
    "codeId": "https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Fortify Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Laravel\\Fortify\\Actions\\AttemptToAuthenticate;\nuse Laravel\\Fortify\\Actions\\CanonicalizeUsername;\nuse Laravel\\Fortify\\Actions\\EnsureLoginIsNotThrottled;\nuse Laravel\\Fortify\\Actions\\PrepareAuthenticatedSession;\nuse Laravel\\Fortify\\Actions\\RedirectIfTwoFactorAuthenticatable;\nuse Laravel\\Fortify\\Features;\nuse Laravel\\Fortify\\Fortify;\nuse Illuminate\\Http\\Request;\n\nFortify::authenticateThrough(function (Request $request) {\n    return array_filter([\n            config('fortify.limiters.login') ? null : EnsureLoginIsNotThrottled::class,\n            config('fortify.lowercase_usernames') ? CanonicalizeUsername::class : null,\n            Features::enabled(Features::twoFactorAuthentication()) ? RedirectIfTwoFactorAuthenticatable::class : null,\n            AttemptToAuthenticate::class,\n            PrepareAuthenticatedSession::class,\n    ]);\n});"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Adding CSRF Token as Meta Tag in Blade Template",
    "codeDescription": "Shows how to add the CSRF token as a meta tag in HTML head section for JavaScript access, useful for AJAX requests requiring CSRF validation.",
    "codeLanguage": "blade",
    "codeTokens": 56,
    "codeId": "https://github.com/laravel/docs/blob/12.x/csrf.md#2025-04-18_snippet_4",
    "pageTitle": "CSRF Protection in Laravel",
    "codeList": [
      {
        "language": "blade",
        "code": "<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Sharing Context Across All Logging Channels in PHP with Laravel Middleware",
    "codeDescription": "Demonstrates how to share contextual information across all logging channels using Laravel's Log facade.",
    "codeLanguage": "php",
    "codeTokens": 159,
    "codeId": "https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-18_snippet_10",
    "pageTitle": "Laravel Logging Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Support\\Str;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass AssignRequestId\n{\n    /**\n     * Handle an incoming request.\n     *\n     * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n     */\n    public function handle(Request $request, Closure $next): Response\n    {\n        $requestId = (string) Str::uuid();\n\n        Log::shareContext([\n            'request-id' => $requestId\n        ]);\n\n        // ...\n    }\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Synchronizing Scout Index Settings Command",
    "codeDescription": "This shell command syncs the configured index settings from your application to your search provider (Algolia or Meilisearch). It's recommended to include this in your deployment process.",
    "codeLanguage": "shell",
    "codeTokens": 58,
    "codeId": "https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-18_snippet_17",
    "pageTitle": "Laravel Scout Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan scout:sync-index-settings"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Deleting All Models in a Table",
    "codeDescription": "Shows how to delete all records in a table by executing a delete query without conditions. This performs a mass delete operation without model events.",
    "codeLanguage": "php",
    "codeTokens": 55,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_44",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$deleted = Flight::query()->delete();"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Defining a User Factory in Laravel",
    "codeDescription": "A basic example of a User model factory that extends Laravel's base Factory class, defining default attributes using Faker for generating test data. It includes methods for defining the model's default state and an optional unverified state.",
    "codeLanguage": "php",
    "codeTokens": 287,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_0",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "namespace Database\\Factories;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Str;\n\n/**\n * @extends \\Illuminate\\Database\\Eloquent\\Factories\\Factory<\\App\\Models\\User>\n */\nclass UserFactory extends Factory\n{\n    /**\n     * The current password being used by the factory.\n     */\n    protected static ?string $password;\n\n    /**\n     * Define the model's default state.\n     *\n     * @return array<string, mixed>\n     */\n    public function definition(): array\n    {\n        return [\n            'name' => fake()->name(),\n            'email' => fake()->unique()->safeEmail(),\n            'email_verified_at' => now(),\n            'password' => static::$password ??= Hash::make('password'),\n            'remember_token' => Str::random(10),\n        ];\n    }\n\n    /**\n     * Indicate that the model's email address should be unverified.\n     */\n    public function unverified(): static\n    {\n        return $this->state(fn (array $attributes) => [\n            'email_verified_at' => null,\n        ]);\n    }\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Creating a Basic Folio Route in PHP/HTML",
    "codeDescription": "Demonstrates how to create a simple Folio route by creating a Blade template file in the pages directory.",
    "codeLanguage": "php",
    "codeTokens": 47,
    "codeId": "https://github.com/laravel/docs/blob/12.x/folio.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Folio Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<div>\n    Hello World\n</div>"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Implementing Mass Prunable Models in Laravel",
    "codeDescription": "Example of implementing the MassPrunable trait for efficient bulk deletion of models.",
    "codeLanguage": "php",
    "codeTokens": 116,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_56",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\MassPrunable;\n\nclass Flight extends Model\n{\n    use MassPrunable;\n\n    /**\n     * Get the prunable model query.\n     */\n    public function prunable(): Builder\n    {\n        return static::where('created_at', '<=', now()->subMonth());\n    }\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Executing Delete Statement in Laravel Database",
    "codeDescription": "Demonstrates how to use the delete method of the DB facade to execute a delete statement and get the number of affected rows.",
    "codeLanguage": "php",
    "codeTokens": 58,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_9",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\DB;\n\n$deleted = DB::delete('delete from users');"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Conditional Migration Execution with shouldRun Method",
    "codeDescription": "Example of using the shouldRun method to conditionally execute migrations based on feature flags or other application state. When the method returns false, the migration will be skipped.",
    "codeLanguage": "php",
    "codeTokens": 94,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Flights;\nuse Laravel\\Pennant\\Feature;\n\n/**\n * Determine if this migration should run.\n */\npublic function shouldRun(): bool\n{\n    return Feature::active(Flights::class);\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Storing Items Permanently in Laravel Cache",
    "codeDescription": "Shows how to use the Cache::forever method to store an item in the cache permanently. These items must be manually removed using the forget method.",
    "codeLanguage": "php",
    "codeTokens": 55,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_13",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Cache::forever('key', 'value');"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Testing Job Chains",
    "codeDescription": "Example of testing chained jobs using the Bus facade's assertChained method.",
    "codeLanguage": "php",
    "codeTokens": 94,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_99",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Jobs\\RecordShipment;\nuse App\\Jobs\\ShipOrder;\nuse App\\Jobs\\UpdateInventory;\nuse Illuminate\\Support\\Facades\\Bus;\n\nBus::fake();\n\n// ...\n\nBus::assertChained([\n    ShipOrder::class,\n    RecordShipment::class,\n    UpdateInventory::class\n]);"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Registering Service Providers in Laravel",
    "codeDescription": "This code snippet shows how to register service providers in the bootstrap/providers.php configuration file of a Laravel application.",
    "codeLanguage": "PHP",
    "codeTokens": 68,
    "codeId": "https://github.com/laravel/docs/blob/12.x/providers.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Service Providers Documentation",
    "codeList": [
      {
        "language": "PHP",
        "code": "<?php\n\nreturn [\n    App\\Providers\\AppServiceProvider::class,\n    App\\Providers\\ComposerServiceProvider::class, // [tl! add]\n];"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Implementing Subdomain Routing in Laravel",
    "codeDescription": "Demonstrates how to handle subdomain routing with route parameters, allowing capture of subdomain segments for use in routes or controllers.",
    "codeLanguage": "php",
    "codeTokens": 79,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_28",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::domain('{account}.example.com')->group(function () {\n    Route::get('/user/{id}', function (string $account, string $id) {\n        // ...\n    });\n});"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Artisan Commands for Directory Creation",
    "codeDescription": "List of Artisan commands used to create various Laravel directory structures and their components.",
    "codeLanguage": "bash",
    "codeTokens": 59,
    "codeId": "https://github.com/laravel/docs/blob/12.x/structure.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Directory Structure Documentation",
    "codeList": [
      {
        "language": "bash",
        "code": "make:job\nevent:generate\nmake:listener\nmake:mail\nmake:notification\nmake:policy\nmake:rule"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Adding Top-Level Meta Data to Laravel API Resource Collection",
    "codeDescription": "Shows how to add top-level meta data to a resource collection response using the with() method.",
    "codeLanguage": "php",
    "codeTokens": 69,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_18",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "public function with(Request $request): array\n{\n    return [\n        'meta' => [\n            'key' => 'value',\n        ],\n    ];\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Authorizing Actions for Specific Users with Gate::forUser",
    "codeDescription": "Example of using Gate::forUser to check permissions for a user other than the currently authenticated one.",
    "codeLanguage": "php",
    "codeTokens": 93,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "if (Gate::forUser($user)->allows('update-post', $post)) {\n    // The user can update the post...\n}\n\nif (Gate::forUser($user)->denies('update-post', $post)) {\n    // The user can't update the post...\n}"
      }
    ],
    "relevance": 0.908
  },
  {
    "codeTitle": "Testing Console Command Exit Code in Laravel (PHPUnit)",
    "codeDescription": "Demonstrates how to test a console command's exit code using PHPUnit syntax. This snippet shows asserting that the 'inspire' command executes successfully with an exit code of 0.",
    "codeLanguage": "php",
    "codeTokens": 86,
    "codeId": "https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Console Command Testing Guide",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * Test a console command.\n */\npublic function test_console_command(): void\n{\n    $this->artisan('inspire')->assertExitCode(0);\n}"
      }
    ],
    "relevance": 0.908
  },
  {
    "codeTitle": "Creating Schema Dumps for Multiple Database Connections",
    "codeDescription": "Commands to create schema dumps for both default and testing database connections, allowing tests to quickly build the database structure without running individual migrations.",
    "codeLanguage": "shell",
    "codeTokens": 61,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan schema:dump\nphp artisan schema:dump --database=testing --prune"
      }
    ],
    "relevance": 0.908
  },
  {
    "codeTitle": "Using Middleware Groups in Routes in Laravel",
    "codeDescription": "Example of assigning middleware groups to routes using the same syntax as individual middleware. This demonstrates how to apply a pre-defined group of middleware to routes.",
    "codeLanguage": "php",
    "codeTokens": 76,
    "codeId": "https://github.com/laravel/docs/blob/12.x/middleware.md#2025-04-18_snippet_11",
    "pageTitle": "Laravel Middleware Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/', function () {\n    // ...\n})->middleware('group-name');\n\nRoute::middleware(['group-name'])->group(function () {\n    // ...\n});"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Using denyAsNotFound for Resource Hiding Pattern",
    "codeDescription": "Example of using the denyAsNotFound method to implement the common pattern of hiding resources with a 404 response.",
    "codeLanguage": "php",
    "codeTokens": 92,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_10",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\nuse Illuminate\\Auth\\Access\\Response;\nuse Illuminate\\Support\\Facades\\Gate;\n\nGate::define('edit-settings', function (User $user) {\n    return $user->isAdmin\n        ? Response::allow()\n        : Response::denyAsNotFound();\n});"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Retrieving View Instances with view() in PHP",
    "codeDescription": "The view() function retrieves a view instance. It provides a convenient way to return views from controllers or other parts of your application.",
    "codeLanguage": "php",
    "codeTokens": 48,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_93",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "return view('auth.login');"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Faking Asynchronous Process Output in Laravel",
    "codeDescription": "Demonstrates how to fake an asynchronous process using Process::describe() to specify multiple outputs, error outputs, exit code and running iterations.",
    "codeLanguage": "php",
    "codeTokens": 103,
    "codeId": "https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-18_snippet_12",
    "pageTitle": "Laravel Process Management Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Process::fake([\n    'bash import.sh' => Process::describe()\n        ->output('First line of standard output')\n        ->errorOutput('First line of error output')\n        ->output('Second line of standard output')\n        ->exitCode(0)\n        ->iterations(3),\n]);"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Creating a Model Observer with Artisan Command in Laravel",
    "codeDescription": "Command to generate a new observer class for a specified model using Laravel's Artisan CLI tool. This creates a UserObserver class that watches for events on the User model.",
    "codeLanguage": "shell",
    "codeTokens": 63,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_73",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan make:observer UserObserver --model=User"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Defining Event Class with Eloquent Model",
    "codeDescription": "Implementation of an event class that carries an Eloquent model as event data, using Laravel's event traits for proper model serialization.",
    "codeLanguage": "php",
    "codeTokens": 129,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Events;\n\nuse App\\Models\\Order;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass OrderShipped\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    /**\n     * Create a new event instance.\n     */\n    public function __construct(\n        public Order $order,\n    ) {}\n}"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Iterating Over Eloquent Collections",
    "codeDescription": "Shows how to iterate over an Eloquent collection using a foreach loop to access individual model properties.",
    "codeLanguage": "php",
    "codeTokens": 55,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_18",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "foreach ($flights as $flight) {\n    echo $flight->name;\n}"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Asserting Console Command Success or Failure",
    "codeDescription": "Demonstrates convenience methods for asserting a command's success or failure without specifying exact exit codes. The first example verifies success while the second verifies failure.",
    "codeLanguage": "php",
    "codeTokens": 67,
    "codeId": "https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Console Command Testing Guide",
    "codeList": [
      {
        "language": "php",
        "code": "$this->artisan('inspire')->assertSuccessful();\n\n$this->artisan('inspire')->assertFailed();"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Swapping Plans for Specific Subscription Types in Laravel Cashier",
    "codeDescription": "Shows how to update the pricing plan for a specific subscription type by identifying the subscription by name and using the swap method with the new price ID.",
    "codeLanguage": "php",
    "codeTokens": 64,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_87",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$user->subscription('swimming')->swap('price_swimming_yearly');"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Creating Unique Indexes with Column Definition in Laravel",
    "codeDescription": "This example shows how to create a unique index by chaining the unique method to a column definition when adding a new column.",
    "codeLanguage": "php",
    "codeTokens": 77,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_47",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nSchema::table('users', function (Blueprint $table) {\n    $table->string('email')->unique();\n});"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Laravel Configuration Cache Management Commands",
    "codeDescription": "Artisan commands for managing configuration cache to improve application performance.",
    "codeLanguage": "shell",
    "codeTokens": 32,
    "codeId": "https://github.com/laravel/docs/blob/12.x/configuration.md#2025-04-18_snippet_18",
    "pageTitle": "Laravel Configuration Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan config:clear"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Preventing Job Overlaps with WithoutOverlapping Middleware",
    "codeDescription": "Examples of using the WithoutOverlapping middleware to prevent concurrent job execution.",
    "codeLanguage": "php",
    "codeTokens": 81,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_15",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Queue\\Middleware\\WithoutOverlapping;\n\n/**\n * Get the middleware the job should pass through.\n *\n * @return array<int, object>\n */\npublic function middleware(): array\n{\n    return [new WithoutOverlapping($this->user->id)];\n}"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Using Custom Echo Handler in Blade Template",
    "codeDescription": "This example shows how to use a custom echo handler in a Blade template. Once the handler is registered, objects can be directly echoed in templates using Blade's standard curly brace syntax.",
    "codeLanguage": "blade",
    "codeTokens": 58,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_64",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "Cost: {{ $money }}"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Implementing Gate Before Hook in Laravel",
    "codeDescription": "Demonstrates how to implement a before hook that runs prior to all authorization checks. This allows granting all abilities to specific users like administrators.",
    "codeLanguage": "php",
    "codeTokens": 84,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_11",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Gate;\n\nGate::before(function (User $user, string $ability) {\n    if ($user->isAdministrator()) {\n        return true;\n    }\n});"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Chaining Collection Methods in Laravel Eloquent",
    "codeDescription": "This example shows how to chain Eloquent collection methods to filter inactive users and map the remaining users to their names.",
    "codeLanguage": "php",
    "codeTokens": 82,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#2025-04-18_snippet_1",
    "pageTitle": "Eloquent Collections in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$names = User::all()->reject(function (User $user) {\n    return $user->active === false;\n})->map(function (User $user) {\n    return $user->name;\n});"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Accessing Component Data in the Render Method",
    "codeDescription": "Demonstrates how to access component attributes and slots by returning a closure from the render method, which gives access to component metadata.",
    "codeLanguage": "php",
    "codeTokens": 85,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_27",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Closure;\n\n/**\n * Get the view / contents that represent the component.\n */\npublic function render(): Closure\n{\n    return function () {\n        return '<div {{ $attributes }}>Components content</div>';\n    };\n}"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Configuring Nginx for Laravel Deployment",
    "codeDescription": "This Nginx configuration serves as a starting point for deploying Laravel applications. It ensures proper routing, security headers, and PHP-FPM configuration. The setup directs all requests to the public/index.php file and includes error handling and security measures.",
    "codeLanguage": "nginx",
    "codeTokens": 274,
    "codeId": "https://github.com/laravel/docs/blob/12.x/deployment.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Deployment Guide",
    "codeList": [
      {
        "language": "nginx",
        "code": "server {\n    listen 80;\n    listen [::]:80;\n    server_name example.com;\n    root /srv/example.com/public;\n\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-Content-Type-Options \"nosniff\";\n\n    index index.php;\n\n    charset utf-8;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location = /robots.txt  { access_log off; log_not_found off; }\n\n    error_page 404 /index.php;\n\n    location ~ ^/index\\.php(/|$) {\n        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;\n        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n        include fastcgi_params;\n        fastcgi_hide_header X-Powered-By;\n    }\n\n    location ~ /\\.(?!well-known).* {\n        deny all;\n    }\n}"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Injecting Dependencies into Blade Components",
    "codeDescription": "Shows how to use Laravel's dependency injection in component constructors to automatically resolve dependencies from the service container.",
    "codeLanguage": "php",
    "codeTokens": 77,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_29",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Services\\AlertCreator;\n\n/**\n * Create the component instance.\n */\npublic function __construct(\n    public AlertCreator $creator,\n    public string $type,\n    public string $message,\n) {}"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Managing Atomic Locks in Laravel",
    "codeDescription": "Shows how to create and manage atomic locks using the Cache::lock method, including acquiring locks with timeouts and automatic release using closures.",
    "codeLanguage": "php",
    "codeTokens": 213,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_17",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Cache;\n\n$lock = Cache::lock('foo', 10);\n\nif ($lock->get()) {\n    // Lock acquired for 10 seconds...\n\n    $lock->release();\n}\n\nCache::lock('foo', 10)->get(function () {\n    // Lock acquired for 10 seconds and automatically released...\n});\n\nuse Illuminate\\Contracts\\Cache\\LockTimeoutException;\n\n$lock = Cache::lock('foo', 10);\n\ntry {\n    $lock->block(5);\n\n    // Lock acquired after waiting a maximum of 5 seconds...\n} catch (LockTimeoutException $e) {\n    // Unable to acquire lock...\n} finally {\n    $lock->release();\n}\n\nCache::lock('foo', 10)->block(5, function () {\n    // Lock acquired for 10 seconds after waiting a maximum of 5 seconds...\n});"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Real-time Output Handling with Closure in Laravel",
    "codeDescription": "Shows how to handle process output in real-time using a closure callback that receives output type and content.",
    "codeLanguage": "php",
    "codeTokens": 71,
    "codeId": "https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Process Management Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$process = Process::start('bash import.sh', function (string $type, string $output) {\n    echo $output;\n});\n\n$result = $process->wait();"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "HTTP Abort Helper Functions",
    "codeDescription": "Examples of abort(), abort_if(), and abort_unless() helpers for throwing HTTP exceptions.",
    "codeLanguage": "php",
    "codeTokens": 72,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_56",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "abort(403);\n\nabort(403, 'Unauthorized.', $headers);\n\nabort_if(! Auth::user()->isAdmin(), 403);\n\nabort_unless(Auth::user()->isAdmin(), 403);"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Checking if Any Input Values are Present in Laravel",
    "codeDescription": "Using hasAny() to determine if any of the specified values are present on the request.",
    "codeLanguage": "php",
    "codeTokens": 52,
    "codeId": "https://github.com/laravel/docs/blob/12.x/requests.md#2025-04-18_snippet_27",
    "pageTitle": "Handling HTTP Requests in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "if ($request->hasAny(['name', 'email'])) {\n    // ...\n}"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Customizing User Authentication with Fortify in Laravel",
    "codeDescription": "Demonstrates how to customize the authentication logic using Fortify's authenticateUsing method. This allows for full control over credential validation and user retrieval during login attempts.",
    "codeLanguage": "php",
    "codeTokens": 151,
    "codeId": "https://github.com/laravel/docs/blob/12.x/fortify.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Fortify Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Laravel\\Fortify\\Fortify;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Fortify::authenticateUsing(function (Request $request) {\n        $user = User::where('email', $request->email)->first();\n\n        if ($user &&\n            Hash::check($request->password, $user->password)) {\n            return $user;\n        }\n    });\n\n    // ...\n}"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Converting Eloquent Collection to Query Builder",
    "codeDescription": "Demonstrates how to use the toQuery method to convert an Eloquent collection back into a query builder instance for further manipulation.",
    "codeLanguage": "php",
    "codeTokens": 78,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#2025-04-18_snippet_7",
    "pageTitle": "Eloquent Collections in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\n$users = User::where('status', 'VIP')->get();\n\n$users->toQuery()->update([\n    'status' => 'Administrator',\n]);"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Adjusting Argon2 Work Factor in Laravel",
    "codeDescription": "Example of adjusting the Argon2 work factor when hashing a password using the Hash facade.",
    "codeLanguage": "php",
    "codeTokens": 70,
    "codeId": "https://github.com/laravel/docs/blob/12.x/hashing.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Hashing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$hashed = Hash::make('password', [\n    'memory' => 1024,\n    'time' => 2,\n    'threads' => 2,\n]);"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Using Laravel Timebox for Fixed-Duration Operations",
    "codeDescription": "Shows how to use Laravel's Timebox class to ensure operations take a fixed amount of time to execute.",
    "codeLanguage": "php",
    "codeTokens": 65,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_105",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Timebox;\n\n(new Timebox)->call(function ($timebox) {\n    // ...\n}, microseconds: 10000);"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Setting Up and Starting a Laravel Development Environment",
    "codeDescription": "These commands navigate to the new application directory, install and build frontend dependencies, and start the Laravel development server environment.",
    "codeLanguage": "shell",
    "codeTokens": 52,
    "codeId": "https://github.com/laravel/docs/blob/12.x/installation.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Installation Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "cd example-app\nnpm install && npm run build\ncomposer run dev"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Creating Cache Database Table via Artisan",
    "codeDescription": "Commands to create and migrate the cache table required for using the database cache driver in Laravel.",
    "codeLanguage": "shell",
    "codeTokens": 43,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan make:cache-table\n\nphp artisan migrate"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Laravel Resource Class with Custom Response",
    "codeDescription": "Demonstrates how to define a UserResource class with a withResponse method to customize the response headers when the resource is returned as the outermost resource.",
    "codeLanguage": "php",
    "codeTokens": 183,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_22",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Resources\\Json\\JsonResource;\n\nclass UserResource extends JsonResource\n{\n    /**\n     * Transform the resource into an array.\n     *\n     * @return array<string, mixed>\n     */\n    public function toArray(Request $request): array\n    {\n        return [\n            'id' => $this->id,\n        ];\n    }\n\n    /**\n     * Customize the outgoing response for the resource.\n     */\n    public function withResponse(Request $request, JsonResponse $response): void\n    {\n        $response->header('X-Value', 'True');\n    }\n}"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Writing Emergency Log Message in PHP with Laravel",
    "codeDescription": "Shows how to log an emergency level message using Laravel's Log facade.",
    "codeLanguage": "php",
    "codeTokens": 40,
    "codeId": "https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Logging Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "Log::emergency('The system is down!');"
      }
    ],
    "relevance": 0.902
  },
  {
    "codeTitle": "Using Session Directives in Blade Templates",
    "codeDescription": "Demonstrates the usage of @session directive to check for the existence of a session value and conditionally render content.",
    "codeLanguage": "blade",
    "codeTokens": 69,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_9",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "@session('status')\n    <div class=\"p-4 bg-green-100\">\n        {{ $value }}\n    </div>\n@endsession"
      }
    ],
    "relevance": 0.902
  },
  {
    "codeTitle": "Inspecting URI Components in Laravel",
    "codeDescription": "Demonstrates how to access and inspect various components of a URI instance, including scheme, host, port, path, query string, and fragment. These methods allow for easy extraction of URI parts.",
    "codeLanguage": "php",
    "codeTokens": 101,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_108",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$scheme = $uri->scheme();\n$host = $uri->host();\n$port = $uri->port();\n$path = $uri->path();\n$query = $uri->query();\n$fragment = $uri->fragment();"
      }
    ],
    "relevance": 0.902
  },
  {
    "codeTitle": "Ignoring Exception Types",
    "codeDescription": "Example of configuring certain exception types to never be reported using the dontReport method in the bootstrap/app.php file.",
    "codeLanguage": "php",
    "codeTokens": 73,
    "codeId": "https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-18_snippet_8",
    "pageTitle": "Laravel Error Handling Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Exceptions\\InvalidOrderException;\n\n->withExceptions(function (Exceptions $exceptions) {\n    $exceptions->dontReport([\n        InvalidOrderException::class,\n    ]);\n})"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Clearing Laravel Application Optimization Cache",
    "codeDescription": "This Artisan command clears all cache files generated by the optimize command and removes all keys in the default cache driver. It's useful for resetting the application to an unoptimized state.",
    "codeLanguage": "shell",
    "codeTokens": 56,
    "codeId": "https://github.com/laravel/docs/blob/12.x/deployment.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Deployment Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan optimize:clear"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Laravel Octane Dependency Injection Example",
    "codeDescription": "Example of proper singleton service registration with container injection handling for Octane compatibility.",
    "codeLanguage": "php",
    "codeTokens": 96,
    "codeId": "https://github.com/laravel/docs/blob/12.x/octane.md#2025-04-18_snippet_8",
    "pageTitle": "Laravel Octane Server Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Service;\nuse Illuminate\\Container\\Container;\nuse Illuminate\\Contracts\\Foundation\\Application;\n\n$this->app->bind(Service::class, function (Application $app) {\n    return new Service($app);\n});\n\n$this->app->singleton(Service::class, function () {\n    return new Service(fn () => Container::getInstance());\n});"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Reporting Throttled Exceptions in Laravel Queue Jobs",
    "codeDescription": "Example of configuring exception reporting for throttled exceptions with conditional reporting based on exception type.",
    "codeLanguage": "php",
    "codeTokens": 117,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_20",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Http\\Client\\HttpClientException;\nuse Illuminate\\Queue\\Middleware\\ThrottlesExceptions;\n\n/**\n * Get the middleware the job should pass through.\n *\n * @return array<int, object>\n */\npublic function middleware(): array\n{\n    return [(new ThrottlesExceptions(10, 10 * 60))->report(\n        fn (Throwable $throwable) => $throwable instanceof HttpClientException\n    )];\n}"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Specifying Queue in Job Constructor",
    "codeDescription": "Example of setting a job's queue by calling the onQueue method within the job's constructor, ensuring the job always uses a specific queue regardless of how it's dispatched.",
    "codeLanguage": "php",
    "codeTokens": 118,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_35",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Jobs;\n\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Queue\\Queueable;\n\nclass ProcessPodcast implements ShouldQueue\n{\n    use Queueable;\n\n    /**\n     * Create a new job instance.\n     */\n    public function __construct()\n    {\n        $this->onQueue('processing');\n    }\n}"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Customizing Laravel Resource Response Headers",
    "codeDescription": "Shows how to customize the HTTP response headers when returning a resource by chaining the response() method and using the header() method.",
    "codeLanguage": "php",
    "codeTokens": 93,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_21",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Http\\Resources\\UserResource;\nuse App\\Models\\User;\n\nRoute::get('/user', function () {\n    return User::find(1)\n        ->toResource()\n        ->response()\n        ->header('X-Value', 'True');\n});"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Configuring Encryption Keys with Previous Keys in Laravel",
    "codeDescription": "Shows how to set up the APP_KEY and APP_PREVIOUS_KEYS environment variables in Laravel to support graceful encryption key rotation. This configuration allows Laravel to try decrypting values with both the current and previous keys.",
    "codeLanguage": "ini",
    "codeTokens": 133,
    "codeId": "https://github.com/laravel/docs/blob/12.x/encryption.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Encryption",
    "codeList": [
      {
        "language": "ini",
        "code": "APP_KEY=\"base64:J63qRTDLub5NuZvP+kb8YIorGS6qFYHKVo6u7179stY=\"\nAPP_PREVIOUS_KEYS=\"base64:2nLsGFGzyoae2ax3EF2Lyq/hH6QghBGLIq5uL+Gp8/w=\""
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Creating Default Expressions for JSON Columns in Laravel Migrations",
    "codeDescription": "This snippet shows how to use Expression instances with the default modifier to set database-specific default values, particularly for JSON columns.",
    "codeLanguage": "php",
    "codeTokens": 143,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_39",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Query\\Expression;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('flights', function (Blueprint $table) {\n            $table->id();\n            $table->json('movies')->default(new Expression('(JSON_ARRAY())'));\n            $table->timestamps();\n        });\n    }\n};"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Changing Subscription Plans",
    "codeDescription": "Demonstrates how to swap between subscription plans with various options for handling proration and billing.",
    "codeLanguage": "php",
    "codeTokens": 146,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cashier-paddle.md#2025-04-18_snippet_34",
    "pageTitle": "Laravel Cashier (Paddle) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\n$user = User::find(1);\n\n$user->subscription()->swap($premium = 'pri_456');\n\n$user = User::find(1);\n\n$user->subscription()->swapAndInvoice($premium = 'pri_456');\n\n$user->subscription('default')->noProrate()->swap($premium = 'pri_456');\n\n$user->subscription('default')->noProrate()->swapAndInvoice($premium = 'pri_456');\n\n$user->subscription('default')->doNotBill()->swap($premium = 'pri_456');"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Implementing Exponential Backoff for Laravel Event Listeners",
    "codeDescription": "Demonstrates how to implement exponential backoff timing for event listener retries using an array of increasing delay values.",
    "codeLanguage": "php",
    "codeTokens": 82,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_12",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * Calculate the number of seconds to wait before retrying the queued listener.\n *\n * @return array<int, int>\n */\npublic function backoff(): array\n{\n    return [1, 5, 10];\n}"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Conditional Event Dispatching in Laravel",
    "codeDescription": "Shows how to use dispatchIf and dispatchUnless methods for conditional event dispatching.",
    "codeLanguage": "php",
    "codeTokens": 55,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_14",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "OrderShipped::dispatchIf($condition, $order);\n\nOrderShipped::dispatchUnless($condition, $order);"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Running FrankenPHP for Laravel Deployment",
    "codeDescription": "This command demonstrates how to use FrankenPHP, a modern PHP application server, to serve Laravel applications. It specifies the public directory as the root for serving the application.",
    "codeLanguage": "shell",
    "codeTokens": 57,
    "codeId": "https://github.com/laravel/docs/blob/12.x/deployment.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Deployment Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "frankenphp php-server -r public/"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Checking Rate Limit Availability and Retry Time in Laravel",
    "codeDescription": "This snippet demonstrates how to check if the rate limit has been exceeded and retrieve the time until more attempts are available using the RateLimiter facade in Laravel.",
    "codeLanguage": "php",
    "codeTokens": 131,
    "codeId": "https://github.com/laravel/docs/blob/12.x/rate-limiting.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Rate Limiting Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\RateLimiter;\n\nif (RateLimiter::tooManyAttempts('send-message:'.$user->id, $perMinute = 5)) {\n    $seconds = RateLimiter::availableIn('send-message:'.$user->id);\n\n    return 'You may try again in '.$seconds.' seconds.';\n}\n\nRateLimiter::increment('send-message:'.$user->id);\n\n// Send message..."
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Type Casting Data for Filters in Search Engines",
    "codeDescription": "This code example shows proper type casting for searchable data when using search engines that require specific data types for filtering operations. It ensures that numeric values like IDs and prices are cast to the correct type.",
    "codeLanguage": "php",
    "codeTokens": 104,
    "codeId": "https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-18_snippet_14",
    "pageTitle": "Laravel Scout Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "public function toSearchableArray()\n{\n    return [\n        'id' => (int) $this->id,\n        'name' => $this->name,\n        'price' => (float) $this->price,\n    ];\n}"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Creating On-Demand Log Channels in PHP with Laravel",
    "codeDescription": "Demonstrates how to create and use on-demand log channels with runtime configuration in Laravel.",
    "codeLanguage": "php",
    "codeTokens": 113,
    "codeId": "https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-18_snippet_12",
    "pageTitle": "Laravel Logging Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Log;\n\nLog::build([\n  'driver' => 'single',\n  'path' => storage_path('logs/custom.log'),\n])->info('Something happened!');\n\n$channel = Log::build([\n  'driver' => 'single',\n  'path' => storage_path('logs/custom.log'),\n]);\n\nLog::stack(['slack', $channel])->info('Something happened!');"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Adding and Removing Indexes when Modifying Columns in Laravel",
    "codeDescription": "This example shows how to explicitly add or remove column indexes when modifying a column using the change method.",
    "codeLanguage": "php",
    "codeTokens": 74,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_43",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "// Add an index...\n$table->bigIncrements('id')->primary()->change();\n\n// Drop an index...\n$table->char('postal_code', 10)->unique(false)->change();"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Checking Price Subscription Status in Laravel Cashier",
    "codeDescription": "Demonstrates how to determine if a customer's subscription corresponds to a specific Stripe price ID using the 'subscribedToPrice' method.",
    "codeLanguage": "php",
    "codeTokens": 68,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_55",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "if ($user->subscribedToPrice('price_basic_monthly', 'default')) {\n    // ...\n}"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Faking Specific Events in Laravel Tests using Pest",
    "codeDescription": "Demonstrates how to fake specific events in Laravel tests using Pest syntax. Shows how to create an order and assert that a specific event was dispatched while allowing other events to be dispatched normally.",
    "codeLanguage": "php",
    "codeTokens": 113,
    "codeId": "https://github.com/laravel/docs/blob/12.x/events.md#2025-04-18_snippet_21",
    "pageTitle": "Laravel Events Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "test('orders can be processed', function () {\n    Event::fake([\n        OrderCreated::class,\n    ]);\n\n    $order = Order::factory()->create();\n\n    Event::assertDispatched(OrderCreated::class);\n\n    // Other events are dispatched as normal...\n    $order->update([...]);\n});"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Creating Custom Logging Channel Configuration",
    "codeDescription": "Example of defining a custom logging channel using a factory class in Laravel's logging configuration.",
    "codeLanguage": "php",
    "codeTokens": 72,
    "codeId": "https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-18_snippet_17",
    "pageTitle": "Laravel Logging Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "'channels' => [\n    'example-custom-channel' => [\n        'driver' => 'custom',\n        'via' => App\\Logging\\CreateCustomLogger::class,\n    ],\n],"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Rendering Blade Fragments in Laravel",
    "codeDescription": "Demonstrates how to define and render Blade fragments for partial template responses, useful with frontend frameworks like Turbo and htmx.",
    "codeLanguage": "blade",
    "codeTokens": 81,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_61",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "@fragment('user-list')\n    <ul>\n        @foreach ($users as $user)\n            <li>{{ $user->name }}</li>\n        @endforeach\n    </ul>\n@endfragment"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Using trans_choice Function for Pluralization in Laravel",
    "codeDescription": "Shows how to use the trans_choice function to retrieve the appropriate translation based on a given count for pluralization.",
    "codeLanguage": "php",
    "codeTokens": 48,
    "codeId": "https://github.com/laravel/docs/blob/12.x/localization.md#2025-04-18_snippet_12",
    "pageTitle": "Laravel Localization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "echo trans_choice('messages.apples', 10);"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Controlling Column Order with After Method in Laravel Migrations",
    "codeDescription": "This snippet demonstrates how to use the after method to specify the position of new columns when adding them to an existing table in MySQL/MariaDB.",
    "codeLanguage": "php",
    "codeTokens": 89,
    "codeId": "https://github.com/laravel/docs/blob/12.x/migrations.md#2025-04-18_snippet_40",
    "pageTitle": "Laravel Database Migrations Guide",
    "codeList": [
      {
        "language": "php",
        "code": "$table->after('password', function (Blueprint $table) {\n    $table->string('address_line1');\n    $table->string('address_line2');\n    $table->string('city');\n});"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Performing Model Operations Without Events in Laravel",
    "codeDescription": "Examples of various quiet methods that perform model operations without triggering events. These methods allow deleting, force deleting, and restoring models without invoking observers.",
    "codeLanguage": "php",
    "codeTokens": 67,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_80",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$user->deleteQuietly();\n$user->forceDeleteQuietly();\n$user->restoreQuietly();"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Using Resource Collections in Routes",
    "codeDescription": "Examples of returning resource collections from routes, including using the collection method and toResourceCollection convenience method.",
    "codeLanguage": "php",
    "codeTokens": 79,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-resources.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Eloquent API Resources Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Http\\Resources\\UserResource;\nuse App\\Models\\User;\n\nRoute::get('/users', function () {\n    return UserResource::collection(User::all());\n});\n\nreturn User::all()->toResourceCollection();"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Customizing Rate Limit Response in Laravel",
    "codeDescription": "This code shows how to customize the response returned when a rate limit is exceeded. Instead of the default 429 response, you can provide a custom response with specific content.",
    "codeLanguage": "php",
    "codeTokens": 102,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_39",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "RateLimiter::for('global', function (Request $request) {\n    return Limit::perMinute(1000)->response(function (Request $request, array $headers) {\n        return response('Custom response...', 429, $headers);\n    });\n});"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Laravel Route with Dependency Injection",
    "codeDescription": "Example of type-hinting dependencies in route callbacks for automatic injection by Laravel's service container.",
    "codeLanguage": "php",
    "codeTokens": 56,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Http\\Request;\n\nRoute::get('/users', function (Request $request) {\n    // ...\n});"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Creating Laravel Components via Artisan",
    "codeDescription": "Commands for generating Blade components using Artisan, including class-based and anonymous components.",
    "codeLanguage": "shell",
    "codeTokens": 38,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_19",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan make:component Alert"
      },
      {
        "language": "shell",
        "code": "php artisan make:component Forms/Input"
      },
      {
        "language": "shell",
        "code": "php artisan make:component forms.input --view"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Reporting Usage for Metered Billing in Laravel Cashier",
    "codeDescription": "Demonstrates how to report usage for a metered event in Laravel Cashier. This is essential for accurately billing customers based on their usage of the application.",
    "codeLanguage": "php",
    "codeTokens": 69,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_91",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$user = User::find(1);\n\n$user->reportMeterEvent('emails-sent');"
      },
      {
        "language": "php",
        "code": "$user = User::find(1);\n\n$user->reportMeterEvent('emails-sent', quantity: 15);"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Exception Rendering Override Example",
    "codeDescription": "Demonstrates how to conditionally override default exception rendering behavior by returning false from the render method.",
    "codeLanguage": "php",
    "codeTokens": 85,
    "codeId": "https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-18_snippet_16",
    "pageTitle": "Laravel Error Handling Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * Render the exception as an HTTP response.\n */\npublic function render(Request $request): Response|bool\n{\n    if (/** Determine if the exception needs custom rendering */) {\n\n        return response(/* ... */);\n    }\n\n    return false;\n}"
      }
    ],
    "relevance": 0.898
  },
  {
    "codeTitle": "Overriding Factory Model Discovery Convention",
    "codeDescription": "Example of how to override the default model factory discovery convention by implementing the newFactory method on a model. This is useful when the factory is located in a non-standard namespace.",
    "codeLanguage": "php",
    "codeTokens": 89,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_2",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use Database\\Factories\\Administration\\FlightFactory;\n\n/**\n * Create a new factory instance for the model.\n */\nprotected static function newFactory()\n{\n    return FlightFactory::new();\n}"
      }
    ],
    "relevance": 0.898
  },
  {
    "codeTitle": "Allowing Encoded Forward Slashes in Route Parameters",
    "codeDescription": "Shows how to configure a route parameter to accept forward slashes using a wildcard regular expression pattern.",
    "codeLanguage": "php",
    "codeTokens": 62,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_19",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::get('/search/{search}', function (string $search) {\n    return $search;\n})->where('search', '.*');"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Using Queueable Anonymous Event Listeners with Eloquent Models",
    "codeDescription": "Shows how to utilize queueable anonymous event listeners when registering model events, which will execute the event listener in the background using the application's queue.",
    "codeLanguage": "php",
    "codeTokens": 73,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_72",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use function Illuminate\\Events\\queueable;\n\nstatic::created(queueable(function (User $user) {\n    // ...\n}));"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Reporting Exceptions with report() Helper in PHP",
    "codeDescription": "Reports an exception using Laravel's exception handler. Can accept either an exception object or a string message which will be wrapped in an exception.",
    "codeLanguage": "php",
    "codeTokens": 53,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_67",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "report($e);\n\nreport('Something went wrong.');"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Configuring Redis Queue Connection with Blocking in Laravel",
    "codeDescription": "Example configuration for a Redis queue connection in Laravel, including the block_for option for efficient polling.",
    "codeLanguage": "PHP",
    "codeTokens": 108,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "PHP",
        "code": "'redis' => [\n    'driver' => 'redis',\n    'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),\n    'queue' => env('REDIS_QUEUE', 'default'),\n    'retry_after' => env('REDIS_QUEUE_RETRY_AFTER', 90),\n    'block_for' => 5,\n    'after_commit' => false,\n],"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Paginating Scout Search Results",
    "codeDescription": "Demonstrates how to paginate search results using Scout's paginate method, which returns a LengthAwarePaginator instance.",
    "codeLanguage": "php",
    "codeTokens": 53,
    "codeId": "https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-18_snippet_35",
    "pageTitle": "Laravel Scout Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Order;\n\n$orders = Order::search('Star Trek')->paginate();"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Rendering Accordion Component with Items",
    "codeDescription": "Illustrates how to use an accordion component with nested item components in Blade templates.",
    "codeLanguage": "blade",
    "codeTokens": 58,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_45",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<x-accordion>\n    <x-accordion.item>\n        ...\n    </x-accordion.item>\n</x-accordion>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Querying Soft Deleted Models in Laravel",
    "codeDescription": "Examples of querying soft deleted models using withTrashed() and onlyTrashed() methods in Laravel Eloquent.",
    "codeLanguage": "php",
    "codeTokens": 71,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_53",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\Flight;\n\n$flights = Flight::withTrashed()\n    ->where('account_id', 1)\n    ->get();"
      },
      {
        "language": "php",
        "code": "$flight->history()->withTrashed()->get();"
      },
      {
        "language": "php",
        "code": "$flights = Flight::onlyTrashed()\n    ->where('airline_id', 1)\n    ->get();"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "HTML Form Method Spoofing using Blade Directives in Laravel",
    "codeDescription": "This snippet shows how to use the @method Blade directive to generate the _method input field for form method spoofing. This provides a more convenient way to implement PUT, PATCH, and DELETE requests in forms.",
    "codeLanguage": "blade",
    "codeTokens": 80,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_48",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<form action=\"/example\" method=\"POST\">\n    @method('PUT')\n    @csrf\n</form>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Updating Stripe Subscriptions with Laravel Cashier's Helper Method",
    "codeDescription": "Demonstrates how to use the updateStripeSubscription method to modify a Stripe subscription directly without having to retrieve the underlying Stripe object first.",
    "codeLanguage": "php",
    "codeTokens": 60,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_149",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$subscription->updateStripeSubscription(['application_fee_percent' => 5]);"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Specifying a Custom Seeder for Tests",
    "codeDescription": "Demonstrates how to specify a custom seeder class that should be executed before tests, allowing for targeted test data preparation.",
    "codeLanguage": "php",
    "codeTokens": 78,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database-testing.md#2025-04-18_snippet_7",
    "pageTitle": "Laravel Database Testing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Database\\Seeders\\OrderStatusSeeder;\n\n/**\n * Run a specific seeder before each test.\n *\n * @var string\n */\nprotected $seeder = OrderStatusSeeder::class;"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Custom Date Serialization",
    "codeDescription": "Demonstrates how to customize the date serialization format for all dates in a model",
    "codeLanguage": "php",
    "codeTokens": 68,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-18_snippet_10",
    "pageTitle": "Laravel Eloquent Serialization Guide",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * Prepare a date for array / JSON serialization.\n */\nprotected function serializeDate(DateTimeInterface $date): string\n{\n    return $date->format('Y-m-d');\n}"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Contextual Attributes Example",
    "codeDescription": "Shows how to use Laravel's built-in contextual binding attributes for dependency injection.",
    "codeLanguage": "php",
    "codeTokens": 89,
    "codeId": "https://github.com/laravel/docs/blob/12.x/container.md#2025-04-18_snippet_9",
    "pageTitle": "Laravel Service Container Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Container\\Attributes\\Storage;\nuse Illuminate\\Contracts\\Filesystem\\Filesystem;\n\nclass PhotoController extends Controller\n{\n    public function __construct(\n        #[Storage('local')] protected Filesystem $filesystem\n    )\n    {\n        // ...\n    }\n}"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Laravel Encrypted Job Implementation",
    "codeDescription": "Example showing how to implement encrypted jobs using the ShouldBeEncrypted interface.",
    "codeLanguage": "php",
    "codeTokens": 69,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_9",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nuse Illuminate\\Contracts\\Queue\\ShouldBeEncrypted;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\n\nclass UpdateSearchIndex implements ShouldQueue, ShouldBeEncrypted\n{\n    // ...\n}"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Manually Releasing Jobs Back to Queue",
    "codeDescription": "Shows how to manually release a job back to the queue with optional delay using the release method.",
    "codeLanguage": "php",
    "codeTokens": 58,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_45",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * Execute the job.\n */\npublic function handle(): void\n{\n    // ...\n\n    $this->release();\n}"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Swapping Products with Quantities in Laravel Cashier",
    "codeDescription": "Demonstrates how to swap products in a subscription while also specifying quantities for specific products by passing an array with price options to the swap method.",
    "codeLanguage": "php",
    "codeTokens": 83,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_80",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$user = User::find(1);\n\n$user->subscription('default')->swap([\n    'price_pro' => ['quantity' => 5],\n    'price_chat'\n]);"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Testing Laravel Facades with Pest",
    "codeDescription": "Demonstrates how to test a route that uses the Cache facade using Pest testing framework. The example shows how to mock the Cache facade to verify it was called with the expected arguments.",
    "codeLanguage": "php",
    "codeTokens": 105,
    "codeId": "https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Facades",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Cache;\n\ntest('basic example', function () {\n    Cache::shouldReceive('get')\n        ->with('key')\n        ->andReturn('value');\n\n    $response = $this->get('/cache');\n\n    $response->assertSee('value');\n});"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Checking Recurring Subscription Status in Laravel Cashier",
    "codeDescription": "Shows how to check if a user is currently subscribed and is no longer within their trial period using the 'recurring' method.",
    "codeLanguage": "php",
    "codeTokens": 61,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_56",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "if ($user->subscription('default')->recurring()) {\n    // ...\n}"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Dispatching Jobs to Specific Connections",
    "codeDescription": "Example of specifying which queue connection to use when dispatching a job, allowing for distribution of jobs across different queue systems.",
    "codeLanguage": "php",
    "codeTokens": 148,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_36",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Jobs\\ProcessPodcast;\nuse App\\Models\\Podcast;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\n\nclass PodcastController extends Controller\n{\n    /**\n     * Store a new podcast.\n     */\n    public function store(Request $request): RedirectResponse\n    {\n        $podcast = Podcast::create(/* ... */);\n\n        // Create podcast...\n\n        ProcessPodcast::dispatch($podcast)->onConnection('sqs');\n\n        return redirect('/podcasts');\n    }\n}"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Caching Function Results with once() Helper in PHP",
    "codeDescription": "Executes a callback and caches the result in memory for the duration of the request. Subsequent calls with the same callback return the cached result instead of re-executing the callback.",
    "codeLanguage": "php",
    "codeTokens": 101,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_61",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "function random(): int\n{\n    return once(function () {\n        return random_int(1, 1000);\n    });\n}\n\nrandom(); // 123\nrandom(); // 123 (cached result)\nrandom(); // 123 (cached result)"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Returning Laravel Batch Information from Routes in PHP",
    "codeDescription": "Shows how to return batch information as JSON from a route, allowing for easy display of batch progress in application UIs.",
    "codeLanguage": "php",
    "codeTokens": 80,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_54",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Bus;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/batch/{batchId}', function (string $batchId) {\n    return Bus::findBatch($batchId);\n});"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Building Log Stack Configuration",
    "codeDescription": "Demonstrates a complete production-ready log stack configuration combining syslog and slack channels with their respective settings.",
    "codeLanguage": "php",
    "codeTokens": 221,
    "codeId": "https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Logging Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "'channels' => [\n    'stack' => [\n        'driver' => 'stack',\n        'channels' => ['syslog', 'slack'],\n        'ignore_exceptions' => false,\n    ],\n\n    'syslog' => [\n        'driver' => 'syslog',\n        'level' => env('LOG_LEVEL', 'debug'),\n        'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),\n        'replace_placeholders' => true,\n    ],\n\n    'slack' => [\n        'driver' => 'slack',\n        'url' => env('LOG_SLACK_WEBHOOK_URL'),\n        'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),\n        'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),\n        'level' => env('LOG_LEVEL', 'critical'),\n        'replace_placeholders' => true,\n    ],\n],"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "String Casting for JSON Conversion",
    "codeDescription": "Demonstrates automatic JSON conversion by casting model to string",
    "codeLanguage": "php",
    "codeTokens": 37,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Eloquent Serialization Guide",
    "codeList": [
      {
        "language": "php",
        "code": "return (string) User::find(1);"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Handling Missing Models in Laravel Queue Jobs",
    "codeDescription": "Implementation of the deleteWhenMissingModels property to automatically discard jobs when their models are deleted while the job is waiting to be processed, preventing ModelNotFoundException errors.",
    "codeLanguage": "php",
    "codeTokens": 74,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_82",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * Delete the job if its models no longer exist.\n *\n * @var bool\n */\npublic $deleteWhenMissingModels = true;"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Creating Multiple Subscription Types in Laravel Cashier",
    "codeDescription": "Demonstrates how to create distinct subscription types for a user by providing different subscription names to the newSubscription method. This allows users to have multiple simultaneous subscriptions.",
    "codeLanguage": "php",
    "codeTokens": 107,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_86",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Http\\Request;\n\nRoute::post('/swimming/subscribe', function (Request $request) {\n    $request->user()->newSubscription('swimming')\n        ->price('price_swimming_monthly')\n        ->create($request->paymentMethodId);\n\n    // ...\n});"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Generating Redirect Responses from URIs in Laravel",
    "codeDescription": "Demonstrates how to generate HTTP redirect responses from Uri instances either by calling the redirect method or by returning the Uri instance directly from a route or controller action.",
    "codeLanguage": "php",
    "codeTokens": 65,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_110",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$uri = Uri::of('https://example.com');\n\nreturn $uri->redirect();"
      },
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Route;\nuse Illuminate\\Support\\Uri;\n\nRoute::get('/redirect', function () {\n    return Uri::to('/index')\n        ->withQuery(['sort' => 'name']);\n});"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Conditional Process Waiting in Laravel",
    "codeDescription": "Demonstrates using waitUntil method to conditionally stop waiting for a process based on its output.",
    "codeLanguage": "php",
    "codeTokens": 72,
    "codeId": "https://github.com/laravel/docs/blob/12.x/processes.md#2025-04-18_snippet_7",
    "pageTitle": "Laravel Process Management Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$process = Process::start('bash import.sh');\n\n$process->waitUntil(function (string $type, string $output) {\n    return $output === 'Ready...';\n});"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Using Custom If Statements in Blade Templates",
    "codeDescription": "This snippet shows how to use custom conditional directives in Blade templates. It demonstrates the 'disk' directive with @disk, @elsedisk, @else, @enddisk syntax, as well as the @unlessdisk variant for negated conditions.",
    "codeLanguage": "blade",
    "codeTokens": 139,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_66",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "@disk('local')\n    <!-- The application is using the local disk... -->\n@elsedisk('s3')\n    <!-- The application is using the s3 disk... -->\n@else\n    <!-- The application is using some other disk... -->\n@enddisk\n\n@unlessdisk('local')\n    <!-- The application is not using the local disk... -->\n@enddisk"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Service Provider with Bindings and Singletons Properties in Laravel",
    "codeDescription": "This example demonstrates a service provider that uses the bindings and singletons properties to automatically register multiple container bindings.",
    "codeLanguage": "PHP",
    "codeTokens": 210,
    "codeId": "https://github.com/laravel/docs/blob/12.x/providers.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Service Providers Documentation",
    "codeList": [
      {
        "language": "PHP",
        "code": "<?php\n\nnamespace App\\Providers;\n\nuse App\\Contracts\\DowntimeNotifier;\nuse App\\Contracts\\ServerProvider;\nuse App\\Services\\DigitalOceanServerProvider;\nuse App\\Services\\PingdomDowntimeNotifier;\nuse App\\Services\\ServerToolsProvider;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * All of the container bindings that should be registered.\n     *\n     * @var array\n     */\n    public $bindings = [\n        ServerProvider::class => DigitalOceanServerProvider::class,\n    ];\n\n    /**\n     * All of the container singletons that should be registered.\n     *\n     * @var array\n     */\n    public $singletons = [\n        DowntimeNotifier::class => PingdomDowntimeNotifier::class,\n        ServerProvider::class => ServerToolsProvider::class,\n    ];\n}"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Laravel Multiple HTTP Verb Route Definitions",
    "codeDescription": "Shows how to register routes that respond to multiple HTTP verbs using match() and any() methods.",
    "codeLanguage": "php",
    "codeTokens": 62,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::match(['get', 'post'], '/', function () {\n    // ...\n});\n\nRoute::any('/', function () {\n    // ...\n});"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Cache Store Operations",
    "codeDescription": "Examples of accessing multiple cache stores and performing basic cache operations like get and put.",
    "codeLanguage": "php",
    "codeTokens": 64,
    "codeId": "https://github.com/laravel/docs/blob/12.x/cache.md#2025-04-18_snippet_5",
    "pageTitle": "Laravel Cache Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$value = Cache::store('file')->get('foo');\n\nCache::store('redis')->put('bar', 'baz', 600); // 10 Minutes"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Customizing Engine Search Behavior with a Closure",
    "codeDescription": "Demonstrates how to customize the search behavior of an engine by passing a closure to the search method, adding geo-location data to Algolia search options.",
    "codeLanguage": "php",
    "codeTokens": 154,
    "codeId": "https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-18_snippet_40",
    "pageTitle": "Laravel Scout Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Algolia\\AlgoliaSearch\\SearchIndex;\nuse App\\Models\\Order;\n\nOrder::search(\n    'Star Trek',\n    function (SearchIndex $algolia, string $query, array $options) {\n        $options['body']['query']['bool']['filter']['geo_distance'] = [\n            'distance' => '1000km',\n            'location' => ['lat' => 36, 'lon' => 111],\n        ];\n\n        return $algolia->search($query, $options);\n    }\n)->get();"
      }
    ],
    "relevance": 0.892
  },
  {
    "codeTitle": "Configuring Monolog Processors",
    "codeDescription": "Configuration example for adding custom processors to a Monolog channel, including simple syntax and options-based configuration.",
    "codeLanguage": "php",
    "codeTokens": 150,
    "codeId": "https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-18_snippet_16",
    "pageTitle": "Laravel Logging Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "'memory' => [\n    'driver' => 'monolog',\n    'handler' => Monolog\\Handler\\StreamHandler::class,\n    'handler_with' => [\n        'stream' => 'php://stderr',\n    ],\n    'processors' => [\n        // Simple syntax...\n        Monolog\\Processor\\MemoryUsageProcessor::class,\n\n        // With options...\n        [\n            'processor' => Monolog\\Processor\\PsrLogMessageProcessor::class,\n            'with' => ['removeUsedContextFields' => true],\n        ],\n    ],\n],"
      }
    ],
    "relevance": 0.892
  },
  {
    "codeTitle": "Customizing Gate Response HTTP Status",
    "codeDescription": "Example of using denyWithStatus to customize the HTTP status code returned when an action is denied via a gate.",
    "codeLanguage": "php",
    "codeTokens": 94,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_9",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\nuse Illuminate\\Auth\\Access\\Response;\nuse Illuminate\\Support\\Facades\\Gate;\n\nGate::define('edit-settings', function (User $user) {\n    return $user->isAdmin\n        ? Response::allow()\n        : Response::denyWithStatus(404);\n});"
      }
    ],
    "relevance": 0.892
  },
  {
    "codeTitle": "Working with Component Data in the Render Method",
    "codeDescription": "Illustrates how to use the $data parameter in the render method's closure to access component name, attributes, and slot content.",
    "codeLanguage": "php",
    "codeTokens": 86,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_28",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "return function (array $data) {\n    // $data['componentName'];\n    // $data['attributes'];\n    // $data['slot'];\n\n    return '<div {{ $attributes }}>Components content</div>';\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Appending Attributes to Eloquent Collection Models",
    "codeDescription": "Demonstrates how to use the append method to add computed attributes to every model in an Eloquent collection.",
    "codeLanguage": "php",
    "codeTokens": 56,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-collections.md#2025-04-18_snippet_2",
    "pageTitle": "Eloquent Collections in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$users->append('team');\n\n$users->append(['team', 'is_admin']);"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Creating Current Date with today() in PHP",
    "codeDescription": "The today() function creates a new Carbon instance for the current date. It provides a convenient way to get a Carbon object representing today's date.",
    "codeLanguage": "php",
    "codeTokens": 50,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_88",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$today = today();"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Mapping Array Values with Arr::map() in PHP",
    "codeDescription": "The Arr::map method iterates through the array and passes each value and key to the given callback. The array value is replaced by the value returned by the callback.",
    "codeLanguage": "php",
    "codeTokens": 117,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_19",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Arr;\n\n$array = ['first' => 'james', 'last' => 'kirk'];\n\n$mapped = Arr::map($array, function (string $value, string $key) {\n    return ucfirst($value);\n});\n\n// ['first' => 'James', 'last' => 'Kirk']"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Returning an Inertia Page from a Laravel Controller",
    "codeDescription": "A Laravel controller method that demonstrates how to return an Inertia page response. It shows how to pass data (a user model) to a React or Vue component when using Inertia.js.",
    "codeLanguage": "php",
    "codeTokens": 139,
    "codeId": "https://github.com/laravel/docs/blob/12.x/frontend.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Frontend Development Options",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\User;\nuse Inertia\\Inertia;\nuse Inertia\\Response;\n\nclass UserController extends Controller\n{\n    /**\n     * Show the profile for a given user.\n     */\n    public function show(string $id): Response\n    {\n        return Inertia::render('users/show', [\n            'user' => User::findOrFail($id)\n        ]);\n    }\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Spoofing HTTP Methods in Laravel Blade Forms",
    "codeDescription": "Shows how to use the @method Blade directive to spoof HTTP verbs like PUT, PATCH, or DELETE in HTML forms.",
    "codeLanguage": "blade",
    "codeTokens": 62,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_56",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "<form action=\"/foo/bar\" method=\"POST\">\n    @method('PUT')\n\n    ...\n</form>"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Creating Models with Factories",
    "codeDescription": "Basic example of instantiating a model using a factory without persisting it to the database. The make method creates model instances in memory.",
    "codeLanguage": "php",
    "codeTokens": 58,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_8",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\n$user = User::factory()->make();"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Loading Package Routes in Laravel (PHP)",
    "codeDescription": "Demonstrates how to load package routes using the loadRoutesFrom method in the service provider's boot method.",
    "codeLanguage": "php",
    "codeTokens": 60,
    "codeId": "https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Package Development Guide",
    "codeList": [
      {
        "language": "php",
        "code": "public function boot(): void\n{\n    $this->loadRoutesFrom(__DIR__.'/../routes/web.php');\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Using Inline State Transformations",
    "codeDescription": "Example of using the state method directly for inline attribute modifications. This achieves the same result as passing an array to make() but follows the state pattern.",
    "codeLanguage": "php",
    "codeTokens": 71,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-factories.md#2025-04-18_snippet_12",
    "pageTitle": "Eloquent Factories in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "$user = User::factory()->state([\n    'name' => 'Abigail Otwell',\n])->make();"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Laravel Controller with Cache Facade Example",
    "codeDescription": "Example of a Laravel controller using the Cache facade, which demonstrates a typical use case for facade mocking in tests.",
    "codeLanguage": "php",
    "codeTokens": 91,
    "codeId": "https://github.com/laravel/docs/blob/12.x/mocking.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Testing Documentation - Mocking Guide",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Cache;\n\nclass UserController extends Controller\n{\n    public function index(): array\n    {\n        $value = Cache::get('key');\n\n        return [\n            // ...\n        ];\n    }\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Caching Laravel Routes",
    "codeDescription": "This Artisan command caches all route registrations into a single method call within a cached file. It's particularly beneficial for applications with many routes, improving route registration performance.",
    "codeLanguage": "shell",
    "codeTokens": 53,
    "codeId": "https://github.com/laravel/docs/blob/12.x/deployment.md#2025-04-18_snippet_6",
    "pageTitle": "Laravel Deployment Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan route:cache"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Registering Package Artisan Commands in Laravel",
    "codeDescription": "Shows how to register package Artisan commands with Laravel using the commands method in a service provider's boot method.",
    "codeLanguage": "php",
    "codeTokens": 106,
    "codeId": "https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-18_snippet_17",
    "pageTitle": "Laravel Package Development Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use Courier\\Console\\Commands\\InstallCommand;\nuse Courier\\Console\\Commands\\NetworkCommand;\n\n/**\n * Bootstrap any package services.\n */\npublic function boot(): void\n{\n    if ($this->app->runningInConsole()) {\n        $this->commands([\n            InstallCommand::class,\n            NetworkCommand::class,\n        ]);\n    }\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Custom Exception Reporting Logic",
    "codeDescription": "Shows how to implement conditional exception reporting by returning a boolean from the report method.",
    "codeLanguage": "php",
    "codeTokens": 73,
    "codeId": "https://github.com/laravel/docs/blob/12.x/errors.md#2025-04-18_snippet_17",
    "pageTitle": "Laravel Error Handling Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * Report the exception.\n */\npublic function report(): bool\n{\n    if (/** Determine if the exception needs custom reporting */) {\n\n        // ...\n\n        return true;\n    }\n\n    return false;\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Publishing File Groups in Laravel Package",
    "codeDescription": "Demonstrates how to define and publish groups of package assets and resources separately using tags in a service provider's boot method.",
    "codeLanguage": "php",
    "codeTokens": 119,
    "codeId": "https://github.com/laravel/docs/blob/12.x/packages.md#2025-04-18_snippet_20",
    "pageTitle": "Laravel Package Development Guide",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * Bootstrap any package services.\n */\npublic function boot(): void\n{\n    $this->publishes([\n        __DIR__.'/../config/package.php' => config_path('package.php')\n    ], 'courier-config');\n\n    $this->publishesMigrations([\n        __DIR__.'/../database/migrations/' => database_path('migrations')\n    ], 'courier-migrations');\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Setting Subscription Quantity",
    "codeDescription": "Shows how to set a specific quantity for a subscription price when creating a new subscription using the quantity method.",
    "codeLanguage": "php",
    "codeTokens": 66,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_39",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$user->newSubscription('default', 'price_monthly')\n    ->quantity(5)\n    ->create($paymentMethod);"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Writing Debug Log Message in PHP with Laravel",
    "codeDescription": "Demonstrates how to write a debug level log message using Laravel's Log facade.",
    "codeLanguage": "php",
    "codeTokens": 40,
    "codeId": "https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Logging Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "Log::debug('An informational message.');"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Managing Customer Balance in Laravel Cashier",
    "codeDescription": "These snippets show how to check, credit, and debit a customer's balance using Laravel Cashier.",
    "codeLanguage": "php",
    "codeTokens": 72,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_22",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$balance = $user->balance();\n\n$user->creditBalance(500, 'Premium customer top-up.');\n\n$user->debitBalance(300, 'Bad usage penalty.');"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Method Chaining with tap() on Value Objects in PHP",
    "codeDescription": "Shows how to call methods on a value when no closure is passed to tap(). The original value is always returned, allowing for fluent method chaining even when methods normally return different types.",
    "codeLanguage": "php",
    "codeTokens": 78,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_84",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$user = tap($user)->update([\n    'name' => $name,\n    'email' => $email,\n]);"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Setting Nested Array Values with data_set() in PHP",
    "codeDescription": "The data_set() function sets values within nested arrays or objects using 'dot' notation. It supports wildcards for setting multiple values and an overwrite option to prevent modifying existing values.",
    "codeLanguage": "php",
    "codeTokens": 102,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_33",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$data = ['products' => ['desk' => ['price' => 100]]];\n\ndata_set($data, 'products.desk.price', 200);\n\n// ['products' => ['desk' => ['price' => 200]]]"
      },
      {
        "language": "php",
        "code": "$data = [\n    'products' => [\n        ['name' => 'Desk 1', 'price' => 100],\n        ['name' => 'Desk 2', 'price' => 150],\n    ],\n];\n\ndata_set($data, 'products.*.price', 200);\n\n/*\n    [\n        'products' => [\n            ['name' => 'Desk 1', 'price' => 200],\n            ['name' => 'Desk 2', 'price' => 200],\n        ],\n    ]\n*/"
      },
      {
        "language": "php",
        "code": "$data = ['products' => ['desk' => ['price' => 100]]];\n\ndata_set($data, 'products.desk.price', 200, overwrite: false);\n\n// ['products' => ['desk' => ['price' => 100]]]"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Configuring Production Supervisor Settings",
    "codeDescription": "Detailed supervisor configuration for production environment including queue connections, scaling strategies and process limits.",
    "codeLanguage": "php",
    "codeTokens": 135,
    "codeId": "https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-18_snippet_4",
    "pageTitle": "Laravel Horizon Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "'environments' => [\n    'production' => [\n        'supervisor-1' => [\n            'connection' => 'redis',\n            'queue' => ['default'],\n            'balance' => 'auto',\n            'autoScalingStrategy' => 'time',\n            'minProcesses' => 1,\n            'maxProcesses' => 10,\n            'balanceMaxShift' => 1,\n            'balanceCooldown' => 3,\n            'tries' => 3,\n        ],\n    ],\n],"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Testing Console Command Exit Code in Laravel (Pest)",
    "codeDescription": "Demonstrates how to test a console command's exit code using Pest syntax. This snippet shows asserting that the 'inspire' command executes successfully with an exit code of 0.",
    "codeLanguage": "php",
    "codeTokens": 77,
    "codeId": "https://github.com/laravel/docs/blob/12.x/console-tests.md#2025-04-18_snippet_0",
    "pageTitle": "Laravel Console Command Testing Guide",
    "codeList": [
      {
        "language": "php",
        "code": "test('console command', function () {\n    $this->artisan('inspire')->assertExitCode(0);\n});"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Configuring Scout Search Strategies in PHP Model",
    "codeDescription": "Demonstrates how to configure search strategies for model attributes using PHP attributes to specify full text and prefix search behaviors.",
    "codeLanguage": "php",
    "codeTokens": 160,
    "codeId": "https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-18_snippet_23",
    "pageTitle": "Laravel Scout Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Laravel\\Scout\\Attributes\\SearchUsingFullText;\nuse Laravel\\Scout\\Attributes\\SearchUsingPrefix;\n\n/**\n * Get the indexable data array for the model.\n *\n * @return array<string, mixed>\n */\n#[SearchUsingPrefix(['id', 'email'])]\n#[SearchUsingFullText(['bio'])]\npublic function toSearchableArray(): array\n{\n    return [\n        'id' => $this->id,\n        'name' => $this->name,\n        'email' => $this->email,\n        'bio' => $this->bio,\n    ];\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Implementing resolveChildRouteBinding Method for Scoped Bindings in Laravel",
    "codeDescription": "This code demonstrates how to implement the resolveChildRouteBinding method to handle child model binding when using implicit binding scoping. It's used to resolve nested resource relationships.",
    "codeLanguage": "php",
    "codeTokens": 136,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_35",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * Retrieve the child model for a bound value.\n *\n * @param  string  $childType\n * @param  mixed  $value\n * @param  string|null  $field\n * @return \\Illuminate\\Database\\Eloquent\\Model|null\n */\npublic function resolveChildRouteBinding($childType, $value, $field)\n{\n    return parent::resolveChildRouteBinding($childType, $value, $field);\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Creating Payment Intents for Client-Side Processing",
    "codeDescription": "Demonstrates how to create a Stripe payment intent using the pay method, which returns a payment intent that can be used for client-side payment processing.",
    "codeLanguage": "php",
    "codeTokens": 96,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_116",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Http\\Request;\n\nRoute::post('/pay', function (Request $request) {\n    $payment = $request->user()->pay(\n        $request->get('amount')\n    );\n\n    return $payment->client_secret;\n});"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Filtering Blade Component Attributes",
    "codeDescription": "Demonstrates how to filter component attributes using filter() and whereStartsWith() methods",
    "codeLanguage": "blade",
    "codeTokens": 55,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_37",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "blade",
        "code": "{{ $attributes->filter(fn (string $value, string $key) => $key == 'foo') }}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Executing Insert Statement in Laravel Database",
    "codeDescription": "Demonstrates how to use the insert method of the DB facade to execute an insert statement in Laravel.",
    "codeLanguage": "php",
    "codeTokens": 64,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_7",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\DB;\n\nDB::insert('insert into users (id, name) values (?, ?)', [1, 'Marc']);"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Adding Contextual Information to Log Messages in PHP with Laravel",
    "codeDescription": "Demonstrates how to include contextual data when logging messages using Laravel's Log facade.",
    "codeLanguage": "php",
    "codeTokens": 59,
    "codeId": "https://github.com/laravel/docs/blob/12.x/logging.md#2025-04-18_snippet_8",
    "pageTitle": "Laravel Logging Configuration Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Log;\n\nLog::info('User {id} failed to login.', ['id' => $user->id]);"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Hiding Properties and Methods from Component Templates",
    "codeDescription": "Demonstrates how to prevent certain public properties or methods from being exposed as variables in the component template using the $except array.",
    "codeLanguage": "php",
    "codeTokens": 124,
    "codeId": "https://github.com/laravel/docs/blob/12.x/blade.md#2025-04-18_snippet_30",
    "pageTitle": "Laravel Blade Templates Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\View\\Components;\n\nuse Illuminate\\View\\Component;\n\nclass Alert extends Component\n{\n    /**\n     * The properties / methods that should not be exposed to the component template.\n     *\n     * @var array\n     */\n    protected $except = ['type'];\n\n    /**\n     * Create the component instance.\n     */\n    public function __construct(\n        public string $type,\n    ) {}\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Implementing Podcast Publishing with Real-Time Facade in Laravel",
    "codeDescription": "This snippet demonstrates how to refactor the Podcast model to use a real-time facade for the Publisher. It shows the changes needed to convert from dependency injection to using a real-time facade.",
    "codeLanguage": "php",
    "codeTokens": 120,
    "codeId": "https://github.com/laravel/docs/blob/12.x/facades.md#2025-04-18_snippet_10",
    "pageTitle": "Laravel Facades",
    "codeList": [
      {
        "language": "php",
        "code": "<?php\n\nnamespace App\\Models;\n\nuse Facades\\App\\Contracts\\Publisher;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Podcast extends Model\n{\n    /**\n     * Publish the podcast.\n     */\n    public function publish(): void\n    {\n        $this->update(['publishing' => now()]);\n\n        Publisher::publish($this);\n    }\n}"
      }
    ],
    "relevance": 0.888
  },
  {
    "codeTitle": "Implementing Job Skipping Middleware in Laravel",
    "codeDescription": "Shows how to use Skip middleware to conditionally skip job execution based on custom conditions.",
    "codeLanguage": "php",
    "codeTokens": 72,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_21",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Queue\\Middleware\\Skip;\n\n/**\n * Get the middleware the job should pass through.\n */\npublic function middleware(): array\n{\n    return [\n        Skip::when($someCondition),\n    ];\n}"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Collapsing Arrays with Arr::collapse()",
    "codeDescription": "Demonstrates using Arr::collapse() to flatten an array of arrays into a single array.",
    "codeLanguage": "php",
    "codeTokens": 101,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Arr;\n\n$array = Arr::collapse([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\n\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Implementing Redis Rate Limiting in Job Handle Method",
    "codeDescription": "Example of implementing Redis rate limiting directly in a job's handle method to allow only one job to process every five seconds.",
    "codeLanguage": "php",
    "codeTokens": 120,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_10",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Facades\\Redis;\n\n/**\n * Execute the job.\n */\npublic function handle(): void\n{\n    Redis::throttle('key')->block(0)->allow(1)->every(5)->then(function () {\n        info('Lock obtained...');\n\n        // Handle job...\n    }, function () {\n        // Could not obtain lock...\n\n        return $this->release(5);\n    });\n}"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Inspecting Database Table Structure with Laravel CLI",
    "codeDescription": "The db:table Artisan command provides a detailed overview of a database table's structure, including columns, types, attributes, keys, and indexes.",
    "codeLanguage": "shell",
    "codeTokens": 52,
    "codeId": "https://github.com/laravel/docs/blob/12.x/database.md#2025-04-18_snippet_21",
    "pageTitle": "Database Operations in Laravel",
    "codeList": [
      {
        "language": "shell",
        "code": "php artisan db:table users"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Adding Array Elements with Arr::add()",
    "codeDescription": "Shows usage of Arr::add() method to add key/value pairs to an array if the key doesn't exist or is null.",
    "codeLanguage": "php",
    "codeTokens": 120,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Arr;\n\n$array = Arr::add(['name' => 'Desk'], 'price', 100);\n\n// ['name' => 'Desk', 'price' => 100]\n\n$array = Arr::add(['name' => 'Desk', 'price' => null], 'price', 100);\n\n// ['name' => 'Desk', 'price' => 100]"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Defining a Policy Method with Additional Context Parameters",
    "codeDescription": "Example of a PostPolicy method that includes an additional category parameter to provide context for authorization decisions.",
    "codeLanguage": "php",
    "codeTokens": 91,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authorization.md#2025-04-18_snippet_28",
    "pageTitle": "Laravel Authorization Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "/**\n * Determine if the given post can be updated by the user.\n */\npublic function update(User $user, Post $post, int $category): bool\n{\n    return $user->id === $post->user_id &&\n           $user->canUpdateCategory($category);\n}"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Adding Soft Delete Column to Database Table",
    "codeDescription": "Uses Laravel's schema builder to add and remove the deleted_at column required for soft deletes functionality. This sets up the database structure for soft deletes.",
    "codeLanguage": "php",
    "codeTokens": 105,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent.md#2025-04-18_snippet_46",
    "pageTitle": "Eloquent Model Conventions in Laravel",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nSchema::table('flights', function (Blueprint $table) {\n    $table->softDeletes();\n});\n\nSchema::table('flights', function (Blueprint $table) {\n    $table->dropSoftDeletes();\n});"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Swapping Individual Subscription Items in Laravel Cashier",
    "codeDescription": "Shows how to swap a single product in a multi-product subscription by finding the specific subscription item and using its swap method, preserving metadata for other products.",
    "codeLanguage": "php",
    "codeTokens": 80,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_81",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$user = User::find(1);\n\n$user->subscription('default')\n    ->findItemOrFail('price_basic')\n    ->swap('price_pro');"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Configuring Horizon Environments",
    "codeDescription": "PHP configuration for defining worker process options across different environments with production and local settings.",
    "codeLanguage": "php",
    "codeTokens": 112,
    "codeId": "https://github.com/laravel/docs/blob/12.x/horizon.md#2025-04-18_snippet_2",
    "pageTitle": "Laravel Horizon Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "'environments' => [\n    'production' => [\n        'supervisor-1' => [\n            'maxProcesses' => 10,\n            'balanceMaxShift' => 1,\n            'balanceCooldown' => 3,\n        ],\n    ],\n\n    'local' => [\n        'supervisor-1' => [\n            'maxProcesses' => 3,\n        ],\n    ],\n],"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Array Value Selection in Laravel",
    "codeDescription": "The Arr::select method extracts specific keys from an array of arrays, creating a new array with only the selected values.",
    "codeLanguage": "php",
    "codeTokens": 171,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_31",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Support\\Arr;\n\n$array = [\n    ['id' => 1, 'name' => 'Desk', 'price' => 200],\n    ['id' => 2, 'name' => 'Table', 'price' => 150],\n    ['id' => 3, 'name' => 'Chair', 'price' => 300],\n];\n\nArr::select($array, ['name', 'price']);\n\n// [['name' => 'Desk', 'price' => 200], ['name' => 'Table', 'price' => 150], ['name' => 'Chair', 'price' => 300]]"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Configuring Meilisearch Index Settings in Laravel Scout",
    "codeDescription": "This configuration defines filterable and sortable attributes for Meilisearch indexes. Filterable attributes are used with the where method, while sortable attributes are used with orderBy when querying the search index.",
    "codeLanguage": "php",
    "codeTokens": 186,
    "codeId": "https://github.com/laravel/docs/blob/12.x/scout.md#2025-04-18_snippet_18",
    "pageTitle": "Laravel Scout Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\nuse App\\Models\\Flight;\n\n'meilisearch' => [\n    'host' => env('MEILISEARCH_HOST', 'http://localhost:7700'),\n    'key' => env('MEILISEARCH_KEY', null),\n    'index-settings' => [\n        User::class => [\n            'filterableAttributes'=> ['id', 'name', 'email'],\n            'sortableAttributes' => ['created_at'],\n            // Other settings fields...\n        ],\n        Flight::class => [\n            'filterableAttributes'=> ['id', 'destination'],\n            'sortableAttributes' => ['updated_at'],\n        ],\n    ],\n],"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Implementing Closure Request Guard in Laravel",
    "codeDescription": "Example of creating a simple custom authentication guard using the Auth::viaRequest method with a closure-based implementation.",
    "codeLanguage": "php",
    "codeTokens": 104,
    "codeId": "https://github.com/laravel/docs/blob/12.x/authentication.md#2025-04-18_snippet_21",
    "pageTitle": "Laravel Authentication Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\n\n/**\n * Bootstrap any application services.\n */\npublic function boot(): void\n{\n    Auth::viaRequest('custom-token', function (Request $request) {\n        return User::where('token', (string) $request->token)->first();\n    });\n}"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Creating Stripe Customer in Laravel Cashier",
    "codeDescription": "This snippet shows how to create a Stripe customer without starting a subscription using Laravel Cashier.",
    "codeLanguage": "php",
    "codeTokens": 49,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_20",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$stripeCustomer = $user->createAsStripeCustomer();"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Converting Model to JSON",
    "codeDescription": "Shows different methods to convert a model to JSON, including pretty printing options",
    "codeLanguage": "php",
    "codeTokens": 60,
    "codeId": "https://github.com/laravel/docs/blob/12.x/eloquent-serialization.md#2025-04-18_snippet_3",
    "pageTitle": "Laravel Eloquent Serialization Guide",
    "codeList": [
      {
        "language": "php",
        "code": "use App\\Models\\User;\n\n$user = User::find(1);\n\nreturn $user->toJson();\n\nreturn $user->toJson(JSON_PRETTY_PRINT);"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Managing Tax IDs in Laravel Cashier",
    "codeDescription": "These snippets demonstrate how to retrieve, create, and delete tax IDs for a customer using Laravel Cashier.",
    "codeLanguage": "php",
    "codeTokens": 99,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_23",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$taxIds = $user->taxIds();\n\n$taxId = $user->findTaxId('txi_belgium');\n\n$taxId = $user->createTaxId('eu_vat', 'BE0123456789');\n\n$user->deleteTaxId('txi_belgium');"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Managing Quantities for Specific Products in Laravel Cashier",
    "codeDescription": "Shows how to update quantities for specific products in a multi-product subscription by specifying the price ID as an additional argument to the quantity methods.",
    "codeLanguage": "php",
    "codeTokens": 101,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_83",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "$user = User::find(1);\n\n$user->subscription('default')->incrementQuantity(5, 'price_chat');\n\n$user->subscription('default')->decrementQuantity(3, 'price_chat');\n\n$user->subscription('default')->updateQuantity(10, 'price_chat');"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Implementing Single-Charge Product Checkout",
    "codeDescription": "Shows how to implement a basic product checkout flow using Stripe Checkout, including success and cancel routes.",
    "codeLanguage": "php",
    "codeTokens": 156,
    "codeId": "https://github.com/laravel/docs/blob/12.x/billing.md#2025-04-18_snippet_10",
    "pageTitle": "Laravel Cashier (Stripe) Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Http\\Request;\n\nRoute::get('/checkout', function (Request $request) {\n    $stripePriceId = 'price_deluxe_album';\n\n    $quantity = 1;\n\n    return $request->user()->checkout([$stripePriceId => $quantity], [\n        'success_url' => route('checkout-success'),\n        'cancel_url' => route('checkout-cancel'),\n    ]);\n})->name('checkout');\n\nRoute::view('/checkout/success', 'checkout.success')->name('checkout-success');\nRoute::view('/checkout/cancel', 'checkout.cancel')->name('checkout-cancel');"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Checking Current Route Name in Middleware",
    "codeDescription": "Demonstrates how to determine if the current request was routed to a specific named route using the named() method.",
    "codeLanguage": "php",
    "codeTokens": 120,
    "codeId": "https://github.com/laravel/docs/blob/12.x/routing.md#2025-04-18_snippet_25",
    "pageTitle": "Laravel Routing Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Closure;\nuse Illuminate\\Http\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Handle an incoming request.\n *\n * @param  \\Closure(\\Illuminate\\Http\\Request): (\\Symfony\\Component\\HttpFoundation\\Response)  $next\n */\npublic function handle(Request $request, Closure $next): Response\n{\n    if ($request->route()->named('profile')) {\n        // ...\n    }\n\n    return $next($request);\n}"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Back Redirect with Input in Laravel",
    "codeDescription": "Shows how to redirect users back to their previous location while preserving input data using the back helper function.",
    "codeLanguage": "php",
    "codeTokens": 61,
    "codeId": "https://github.com/laravel/docs/blob/12.x/redirects.md#2025-04-18_snippet_1",
    "pageTitle": "Laravel HTTP Redirects Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "Route::post('/user/profile', function () {\n    // Validate the request...\n\n    return back()->withInput();\n});"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Conditional Exception Throwing with throw_if() Helper in PHP",
    "codeDescription": "Throws a specified exception if a given boolean expression evaluates to true. Useful for conditional validation or permission checks that should halt execution when conditions aren't met.",
    "codeLanguage": "php",
    "codeTokens": 89,
    "codeId": "https://github.com/laravel/docs/blob/12.x/helpers.md#2025-04-18_snippet_86",
    "pageTitle": "Laravel Helper Functions Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "throw_if(! Auth::user()->isAdmin(), AuthorizationException::class);\n\nthrow_if(\n    ! Auth::user()->isAdmin(),\n    AuthorizationException::class,\n    'You are not allowed to access this page.'\n);"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Advanced Job Skipping with Closure in Laravel",
    "codeDescription": "Demonstrates how to implement complex job skipping logic using a closure in the Skip middleware.",
    "codeLanguage": "php",
    "codeTokens": 82,
    "codeId": "https://github.com/laravel/docs/blob/12.x/queues.md#2025-04-18_snippet_22",
    "pageTitle": "Laravel Queue Documentation",
    "codeList": [
      {
        "language": "php",
        "code": "use Illuminate\\Queue\\Middleware\\Skip;\n\n/**\n * Get the middleware the job should pass through.\n */\npublic function middleware(): array\n{\n    return [\n        Skip::when(function (): bool {\n            return $this->shouldSkip();\n        }),\n    ];\n}"
      }
    ],
    "relevance": 0.885
  }
]