[
  {
    "codeTitle": "Input Alias Usage in Template",
    "codeDescription": "Shows how to use an aliased input name in an Angular template.",
    "codeLanguage": "angular-html",
    "codeTokens": 34,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_14",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<custom-slider [sliderValue]=\"50\" />"
      }
    ],
    "relevance": 0.999
  },
  {
    "codeTitle": "Binding to Custom Events in Angular Templates",
    "codeDescription": "Example of binding to a custom 'panelClosed' event in an Angular template using the event binding syntax with parentheses.",
    "codeLanguage": "angular-html",
    "codeTokens": 47,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/outputs.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Custom Events with Outputs",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<expandable-panel (panelClosed)=\"savePanelState()\" />"
      }
    ],
    "relevance": 0.998
  },
  {
    "codeTitle": "Rendered DOM with Angular Component",
    "codeDescription": "This HTML snippet illustrates how the Angular component is rendered in the DOM. The component's content is inserted inside its host element.",
    "codeLanguage": "html",
    "codeTokens": 80,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/host-elements.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Component Host Elements Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<h3>Your profile photo</h3>\n<profile-photo>\n  <img src=\"profile-photo.jpg\" alt=\"Your profile photo\" />\n</profile-photo>\n<button>Upload a new profile photo</button>"
      }
    ],
    "relevance": 0.997
  },
  {
    "codeTitle": "Using Multiple Comma-Separated Selectors",
    "codeDescription": "Demonstrates how to specify multiple alternative selectors for a component using comma separation. Allows component to match different selector patterns.",
    "codeLanguage": "angular-ts",
    "codeTokens": 57,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/selectors.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Component Selectors Guide",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'drop-zone, [dropzone]',\n  ...\n})\nexport class DropZone { }"
      }
    ],
    "relevance": 0.996
  },
  {
    "codeTitle": "Demonstrating @let Variable Scope in Angular Templates",
    "codeDescription": "Example showing the scoping rules for @let variables in Angular templates. Variables are available in their own view and descendants, but not hoisted to parent or sibling views.",
    "codeLanguage": "angular-html",
    "codeTokens": 211,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/variables.md#2025-04-08_snippet_2",
    "pageTitle": "Using Variables in Angular Templates",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@let topLevel = value;\n\n<div>\n  @let insideDiv = value;\n</div>\n\n{{topLevel}} <!-- Valid -->\n{{insideDiv}} <!-- Valid -->\n\n@if (condition) {\n  {{topLevel + insideDiv}} <!-- Valid -->\n\n  @let nested = value;\n\n  @if (condition) {\n    {{topLevel + insideDiv + nested}} <!-- Valid -->\n  }\n}\n\n<div *ngIf=\"condition\">\n  {{topLevel + insideDiv}} <!-- Valid -->\n\n  @let nestedNgIf = value;\n\n  <div *ngIf=\"condition\">\n     {{topLevel + insideDiv + nestedNgIf}} <!-- Valid -->\n  </div>\n</div>\n\n{{nested}} <!-- Error, not hoisted from @if -->\n{{nestedNgIf}} <!-- Error, not hoisted from *ngIf -->"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Combining Key Modifiers in Angular Templates",
    "codeDescription": "Demonstrates how to combine multiple key modifiers in Angular templates to listen for complex key combinations. This example listens for Shift+Enter keypresses.",
    "codeLanguage": "html",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/event-listeners.md#2025-04-08_snippet_4",
    "pageTitle": "Event Listeners in Angular Templates",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- Matches shift and enter -->\n<input type=\"text\" (keyup.shift.enter)=\"updateField($event)\" />"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Basic Input Property Declaration in Angular",
    "codeDescription": "Shows how to declare a basic input property in an Angular component using the input() function with a default value.",
    "codeLanguage": "typescript",
    "codeTokens": 78,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Component, input} from '@angular/core';\n\n@Component({/*...*/})\nexport class CustomSlider {\n  // Declare an input named 'value' with a default value of zero.\n  value = input(0);\n}"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Installing Angular CLI using package managers",
    "codeDescription": "Commands for installing Angular CLI globally using npm, pnpm, yarn, and bun package managers.",
    "codeLanguage": "shell",
    "codeTokens": 35,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/introduction/installation.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Installation Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "npm install -g @angular/cli"
      },
      {
        "language": "shell",
        "code": "pnpm install -g @angular/cli"
      },
      {
        "language": "shell",
        "code": "yarn global add @angular/cli"
      },
      {
        "language": "shell",
        "code": "bun install -g @angular/cli"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Simplified Parent Component with Two-way Binding in Angular",
    "codeDescription": "Demonstrates the minimal setup required in a parent component to enable two-way binding with a child component.",
    "codeLanguage": "angular-ts",
    "codeTokens": 110,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/two-way-binding.md#2025-04-08_snippet_4",
    "pageTitle": "Two-way Data Binding in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "import { Component } from '@angular/core';\nimport { CounterComponent } from './counter/counter.component';\n\n@Component({\n  selector: 'app-root',\n  imports: [CounterComponent],\n  template: `\n    <main>\n      <app-counter [(count)]=\"initialCount\"></app-counter>\n    </main>\n  `,\n})\nexport class AppComponent {\n  initialCount = 18;\n}"
      }
    ],
    "relevance": 0.994
  },
  {
    "codeTitle": "Declaring Parameters in Angular Template Fragment",
    "codeDescription": "Demonstrates how to declare parameters in a template fragment using let- prefix in Angular.",
    "codeLanguage": "angular-html",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/ng-template.md#2025-04-08_snippet_9",
    "pageTitle": "Creating and Using Template Fragments with ng-template in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<ng-template let-pizzaTopping=\"topping\">\n  <p>You selected: {{pizzaTopping}}</p>\n</ng-template>"
      }
    ],
    "relevance": 0.993
  },
  {
    "codeTitle": "Content Projection Usage Example",
    "codeDescription": "Demonstration of how content projection works with a complete example including component source, usage, and rendered DOM output.",
    "codeLanguage": "angular-ts",
    "codeTokens": 77,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/content-projection.md#2025-04-08_snippet_1",
    "pageTitle": "Content Projection in Angular using ng-content",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'custom-card',\n  template: `\n    <div class=\"card-shadow\">\n      <ng-content />\n    </div>\n  `,\n})\nexport class CustomCard {/* ... */}"
      },
      {
        "language": "angular-html",
        "code": "<custom-card>\n  <p>This is the projected content</p>\n</custom-card>"
      },
      {
        "language": "angular-html",
        "code": "<custom-card>\n  <div class=\"card-shadow\">\n    <p>This is the projected content</p>\n  </div>\n</custom-card>"
      }
    ],
    "relevance": 0.992
  },
  {
    "codeTitle": "Displaying FlowerService Emoji in ChildComponent Template",
    "codeDescription": "This snippet shows how to bind and display the emoji from FlowerService in the ChildComponent template.",
    "codeLanguage": "html",
    "codeTokens": 46,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/hierarchical-dependency-injection.md#2025-04-08_snippet_19",
    "pageTitle": "Hierarchical Injectors in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<p>Emoji from FlowerService: {{flower.emoji}}</p>"
      }
    ],
    "relevance": 0.991
  },
  {
    "codeTitle": "Implementing View Children Query in Angular Component",
    "codeDescription": "Shows how to use the viewChildren function to query for multiple child components in the component's view and map their properties in a computed property.",
    "codeLanguage": "angular-ts",
    "codeTokens": 143,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/queries.md#2025-04-08_snippet_1",
    "pageTitle": "Referencing Component Children with Queries in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'custom-card-action',\n  /*...*/\n})\nexport class CustomCardAction {\n  text: string;\n}\n\n@Component({\n  selector: 'custom-card',\n  template: `\n    <custom-card-action>Save</custom-card-action>\n    <custom-card-action>Cancel</custom-card-action>\n  `,\n})\nexport class CustomCard {\n  actions = viewChildren(CustomCardAction);\n  actionsTexts = computed(() => this.actions().map(action => action.text);\n}"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Implementing onSubmit Method in ProfileEditor Component",
    "codeDescription": "This TypeScript code defines the onSubmit() method in the ProfileEditor component, which logs the current value of the profileForm when submitted.",
    "codeLanguage": "typescript",
    "codeTokens": 58,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_12",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "onSubmit() {\n  // TODO: Use EventEmitter with form value\n  console.warn(this.profileForm.value);\n}"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Basic Input Binding in Angular Template",
    "codeDescription": "Shows how to bind a value to a component input in an Angular template.",
    "codeLanguage": "angular-html",
    "codeTokens": 34,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_10",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<custom-slider [value]=\"50\" />"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Injecting FormBuilder Service in Angular TypeScript",
    "codeDescription": "This code demonstrates how to inject the FormBuilder service using the inject() function in an Angular component.",
    "codeLanguage": "typescript",
    "codeTokens": 36,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_20",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "private fb = inject(FormBuilder);"
      }
    ],
    "relevance": 0.989
  },
  {
    "codeTitle": "Displaying FormArray in Angular Template",
    "codeDescription": "HTML template code that uses formArrayName directive to bind the form array, with ngFor to iterate through controls and appropriate binding to each control.",
    "codeLanguage": "html",
    "codeTokens": 143,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_30",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<div formArrayName=\"aliases\">\n  <h2>Aliases</h2>\n  <button type=\"button\" (click)=\"addAlias()\">+ Add another alias</button>\n\n  <div *ngFor=\"let alias of aliases.controls; let i=index\">\n    <!-- The repeated alias template -->\n    <label for=\"alias-{{ i }}\">Alias:</label>\n    <input id=\"alias-{{ i }}\" type=\"text\" [formControlName]=\"i\">\n  </div>\n</div>"
      }
    ],
    "relevance": 0.988
  },
  {
    "codeTitle": "Toggling Form Visibility in Angular Template",
    "codeDescription": "This HTML snippet demonstrates how to hide the form when it's submitted and show a different view instead.",
    "codeLanguage": "HTML",
    "codeTokens": 50,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/template-driven-forms.md#2025-04-08_snippet_19",
    "pageTitle": "Building a Template-Driven Form in Angular",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div [hidden]=\"submitted\">\n  <!-- Form content here -->\n</div>"
      }
    ],
    "relevance": 0.988
  },
  {
    "codeTitle": "Fallback Content Implementation",
    "codeDescription": "Example showing how to implement fallback content for ng-content when no matching content is provided.",
    "codeLanguage": "angular-html",
    "codeTokens": 80,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/content-projection.md#2025-04-08_snippet_3",
    "pageTitle": "Content Projection in Angular using ng-content",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<div class=\"card-shadow\">\n  <ng-content select=\"card-title\">Default Title</ng-content>\n  <div class=\"card-divider\"></div>\n  <ng-content select=\"card-body\">Default Body</ng-content>\n</div>"
      },
      {
        "language": "angular-html",
        "code": "<custom-card>\n  <card-title>Hello</card-title>\n  <!-- No card-body provided -->\n</custom-card>"
      },
      {
        "language": "angular-html",
        "code": "<custom-card>\n  <div class=\"card-shadow\">\n    Hello\n    <div class=\"card-divider\"></div>\n    Default Body\n  </div>\n</custom-card>"
      }
    ],
    "relevance": 0.987
  },
  {
    "codeTitle": "Implementing DropdownQuestion Control in Angular",
    "codeDescription": "This code defines a DropdownQuestion class that extends QuestionBase to represent a dropdown select control in a dynamic form.",
    "codeLanguage": "TypeScript",
    "codeTokens": 62,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/dynamic-forms.md#2025-04-08_snippet_3",
    "pageTitle": "Building Dynamic Forms in Angular",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "import { QuestionBase } from './question-base';\n\nexport class DropdownQuestion extends QuestionBase<string> {\n  override controlType = 'dropdown';\n}\n"
      }
    ],
    "relevance": 0.987
  },
  {
    "codeTitle": "Accessing Host Element with ElementRef in Angular Component",
    "codeDescription": "This snippet demonstrates how to inject and use ElementRef to access a component's host element in the constructor.",
    "codeLanguage": "typescript",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/dom-apis.md#2025-04-08_snippet_0",
    "pageTitle": "Using DOM APIs in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({...})\nexport class ProfilePhoto {\n  constructor() {\n    const elementRef = inject(ElementRef);\n    console.log(elementRef.nativeElement);\n  }\n}"
      }
    ],
    "relevance": 0.987
  },
  {
    "codeTitle": "Adding New Actor Method in Angular Component",
    "codeDescription": "This snippet shows the implementation of the newActor() method in the ActorFormComponent. It creates a new Actor instance with default values.",
    "codeLanguage": "TypeScript",
    "codeTokens": 57,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/template-driven-forms.md#2025-04-08_snippet_14",
    "pageTitle": "Building a Template-Driven Form in Angular",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "newActor() {\n  this.model = new Actor(42, '', '');\n}"
      }
    ],
    "relevance": 0.986
  },
  {
    "codeTitle": "Creating a Basic Form Group in TypeScript with Angular Forms",
    "codeDescription": "Demonstrates how to create a basic user login form using FormGroup and FormControl classes in Angular reactive forms.",
    "codeLanguage": "typescript",
    "codeTokens": 51,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/typed-forms.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Typed Forms Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const login = new FormGroup({\n  email: new FormControl(''),\n  password: new FormControl(''),\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Root-Level Service Provider Configuration",
    "codeDescription": "Shows how to configure a service to be provided at the root level using providedIn property, enabling tree-shaking optimization",
    "codeLanguage": "typescript",
    "codeTokens": 47,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Dependency Injection Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Injectable({\n  providedIn: 'root'\n})\nclass HeroService {}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Input Property with Built-in Transforms",
    "codeDescription": "Shows usage of Angular's built-in transform functions for boolean and number inputs.",
    "codeLanguage": "typescript",
    "codeTokens": 81,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_7",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Component, input, booleanAttribute, numberAttribute} from '@angular/core';\n\n@Component({/*...*/})\nexport class CustomSlider {\n  disabled = input(false, {transform: booleanAttribute}); \n  value = input(0, {transform: numberAttribute}); \n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "HTML Attribute Binding in Angular",
    "codeDescription": "Demonstrates binding to HTML attributes using the attr. prefix in Angular templates.",
    "codeLanguage": "angular-html",
    "codeTokens": 53,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/introduction/essentials/templates.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Templates Documentation",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<!-- Bind the `role` attribute on the `<ul>` element to value of `listRole`. -->\n<ul [attr.role]=\"listRole()\">"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Input with Getter and Setter in Angular",
    "codeDescription": "Demonstrates implementing an input property using getter and setter methods for custom value handling.",
    "codeLanguage": "typescript",
    "codeTokens": 71,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_15",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class CustomSlider {\n  @Input()\n  get value(): number {\n    return this.internalValue;\n  }\n\nset value(newValue: number) { this.internalValue = newValue; }\n\nprivate internalValue = 0; }"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Using Input Property in Angular Template",
    "codeDescription": "Demonstrates how to bind a value to an input property in an Angular template.",
    "codeLanguage": "angular-html",
    "codeTokens": 35,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<custom-slider [value]=\"50\" />"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Required Input Property Declaration",
    "codeDescription": "Shows how to declare a required input property using input.required.",
    "codeLanguage": "typescript",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_5",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({/*...*/})\nexport class CustomSlider {\n  // Declare a required input named value. Returns an `InputSignal<number>`.\n  value = input.required<number>();\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Implementing Timer-based Defer Loading in Angular",
    "codeDescription": "Shows how to use the timer trigger to load deferred content after a specified duration in milliseconds or seconds.",
    "codeLanguage": "angular-html",
    "codeTokens": 64,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/defer.md#2025-04-08_snippet_13",
    "pageTitle": "Deferred Loading with @defer in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@defer (on timer(500ms)) {\n  <large-cmp />\n} @placeholder {\n  <div>Large component placeholder</div>\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Implementing Signals in Angular Components",
    "codeDescription": "This snippet illustrates how to use signals and computed signals within an Angular component. It shows the creation of multiple signals and a computed signal that depends on them, along with a method to update a signal's value.",
    "codeLanguage": "typescript",
    "codeTokens": 112,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/introduction/essentials/signals.md#2025-04-08_snippet_2",
    "pageTitle": "Using Signals in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({/* ... */})\nexport class UserProfile {\n  isTrial = signal(false);\n  isTrialExpired = signal(false);\n  showTrialDuration = computed(() => this.isTrial() && !this.isTrialExpired());\n\n  activateTrial() {\n    this.isTrial.set(true);\n  }\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Creating Components Programmatically in Angular",
    "codeDescription": "Function to create component instances dynamically outside of templates. Requires an environment injector and accepts options for host element, custom injector, projectable nodes, and additional directives/bindings.",
    "codeLanguage": "typescript",
    "codeTokens": 112,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/core/index.api.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Core API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export function createComponent<C>(component: Type<C>, options: {\n    environmentInjector: EnvironmentInjector;\n    hostElement?: Element;\n    elementInjector?: Injector;\n    projectableNodes?: Node[][];\n    directives?: (Type<unknown> | DirectiveWithBindings<unknown>)[];\n    bindings?: Binding[];\n}): ComponentRef<C>;"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Defining a Reusable Animation in TypeScript",
    "codeDescription": "Creates a reusable animation with parameters for height, opacity, backgroundColor, and time using the animation() function. These parameters can be replaced at runtime when the animation is used.",
    "codeLanguage": "typescript",
    "codeTokens": 87,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/reusable-animations.md#2025-04-08_snippet_0",
    "pageTitle": "Reusable Angular Animations Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "export const transitionAnimation = animation([\n  style({\n    height: \"{{ height }}\",\n    opacity: \"{{ opacity }}\",\n    backgroundColor: \"{{ backgroundColor }}\",\n  }),\n  animate(\"{{ time }}\")\n]);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Creating Basic Resource in Angular TypeScript",
    "codeDescription": "Demonstrates how to create a basic resource to fetch user data asynchronously using Angular's resource API. Shows the basic structure with request and loader functions.",
    "codeLanguage": "typescript",
    "codeTokens": 165,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/resource.md#2025-04-08_snippet_0",
    "pageTitle": "Using Async Resources in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {resource, Signal} from '@angular/core';\n\nconst userId: Signal<string> = getUserId();\n\nconst userResource = resource({\n  // Define a reactive request computation.\n  // The request value recomputes whenever any read signals change.\n  request: () => ({id: userId()}),\n\n  // Define an async loader that retrieves data.\n  // The resource calls this function every time the `request` value changes.\n  loader: ({request}) => fetchUser(request),\n});\n\n// Create a computed signal based on the result of the resource's loader function.\nconst firstName = computed(() => userResource.value().firstName);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Creating a Computed Signal in TypeScript",
    "codeDescription": "This snippet shows how to create a computed signal that derives its value from another signal using the 'computed' function.",
    "codeLanguage": "typescript",
    "codeTokens": 62,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/overview.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Signals Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const count: WritableSignal<number> = signal(0);\nconst doubleCount: Signal<number> = computed(() => count() * 2);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Basic Angular Component Structure",
    "codeDescription": "Demonstrates the basic structure of an Angular component with a selector and inline template.",
    "codeLanguage": "angular-ts",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/anatomy-of-components.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Component Structure and Usage Guide",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'profile-photo',\n  template: `<img src=\"profile-photo.jpg\" alt=\"Your profile photo\">`,\n})\nexport class ProfilePhoto { }"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Implementing Reactive Form Control in Angular TypeScript",
    "codeDescription": "This snippet demonstrates how to set up a reactive form control for a favorite color input field in an Angular component. It shows the creation of a FormControl instance and its connection to the template using formControlName.",
    "codeLanguage": "typescript",
    "codeTokens": 112,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/overview.md#2025-04-08_snippet_0",
    "pageTitle": "Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-favorite-color',\n  template: '<input type=\"text\" [formControl]=\"favoriteColorControl\">'\n})\nexport class FavoriteColorComponent {\n  favoriteColorControl = new FormControl('');\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Rendering Dynamic Text with Text Interpolation in Angular",
    "codeDescription": "This snippet demonstrates how to use text interpolation with double curly braces to render dynamic text in an Angular component template. It shows how the bound value updates automatically when changed.",
    "codeLanguage": "angular-ts",
    "codeTokens": 85,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/binding.md#2025-04-08_snippet_0",
    "pageTitle": "Binding Dynamic Text, Properties, and Attributes in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  template: `\n    <p>Your color preference is {{ theme }}.</p>\n  `,\n  ...\n})\nexport class AppComponent {\n  theme = 'dark';\n}"
      },
      {
        "language": "angular-html",
        "code": "<!-- Rendered Output -->\n<p>Your color preference is dark.</p>"
      },
      {
        "language": "angular-html",
        "code": "<!-- Rendered Output -->\n<p>Your color preference is light.</p>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Required Inputs with Various Type References",
    "codeDescription": "Demonstrates defining required inputs with different type references, including primitive types, constant types, and complex imported types. Shows how to handle cases where explicit typing would require additional imports.",
    "codeLanguage": "typescript",
    "codeTokens": 152,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/schematics/migrations/signal-migration/test/golden.txt#2025-04-08_snippet_36",
    "pageTitle": "Angular Input Migration Test Cases",
    "codeList": [
      {
        "language": "typescript",
        "code": "// tslint:disable\n\nimport {input} from '@angular/core';\nimport {COMPLEX_VAR} from './required-no-explicit-type-extra';\n\nexport const CONST = {field: true};\n\nexport class RequiredNoExplicitType {\n  readonly someInputNumber = input.required<number>();\n  readonly someInput = input.required<boolean>();\n  readonly withConstInitialVal = input.required<typeof CONST>();\n\n  // typing this explicitly now would require same imports as from the `-extra` file.\n  readonly complexVal = input.required<typeof COMPLEX_VAR>();\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Testing View-to-Model Data Flow in Reactive Forms",
    "codeDescription": "This TypeScript code demonstrates how to test the view-to-model data flow in reactive forms. It simulates user input and verifies that the form control value is updated correctly.",
    "codeLanguage": "typescript",
    "codeTokens": 100,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/overview.md#2025-04-08_snippet_4",
    "pageTitle": "Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "it('should update the value of the input field', () => {\n  const input = fixture.nativeElement.querySelector('input');\n  const event = new Event('input');\n\n  input.value = 'Red';\n  input.dispatchEvent(event);\n\n  expect(component.favoriteColorControl.value).toEqual('Red');\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Importing ReactiveFormsModule in Angular Component",
    "codeDescription": "Shows how to import the ReactiveFormsModule required for reactive forms functionality in an Angular component.",
    "codeLanguage": "typescript",
    "codeTokens": 46,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_0",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Component } from '@angular/core';\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Generating an Angular Service Using CLI",
    "codeDescription": "Command to generate a new Angular service named 'housing' without test files using the Angular CLI.",
    "codeLanguage": "shell",
    "codeTokens": 40,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/09-services/README.md#2025-04-08_snippet_0",
    "pageTitle": "Creating and Using Angular Services with Dependency Injection",
    "codeList": [
      {
        "language": "shell",
        "code": "ng generate service housing --skip-tests"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Installing Angular CLI Using Package Managers",
    "codeDescription": "Commands to install Angular CLI globally using different package managers (npm, pnpm, yarn, bun)",
    "codeLanguage": "shell",
    "codeTokens": 38,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/setup-local.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Development Environment Setup Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "npm install -g @angular/cli"
      },
      {
        "language": "shell",
        "code": "pnpm install -g @angular/cli"
      },
      {
        "language": "shell",
        "code": "yarn global add @angular/cli"
      },
      {
        "language": "shell",
        "code": "bun install -g @angular/cli"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Bidirectional Transition Definition in Angular Animation",
    "codeDescription": "Defines a bidirectional transition between 'open' and 'closed' states with a 0.5-second animation duration.",
    "codeLanguage": "typescript",
    "codeTokens": 52,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/overview.md#2025-04-08_snippet_9",
    "pageTitle": "Introduction to Angular Animations Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "transition('closed => open', [\n  animate('0.5s')\n]),\n"
      }
    ],
    "relevance": 0.984
  },
  {
    "codeTitle": "Styling Active Route Links",
    "codeDescription": "Adds CSS styles for active navigation links in the app component.",
    "codeLanguage": "css",
    "codeTokens": 37,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/router-tutorial.md#2025-04-08_snippet_8",
    "pageTitle": "Implementing Angular Routes in a Single-Page Application",
    "codeList": [
      {
        "language": "css",
        "code": "/* No CSS provided in the original text */"
      }
    ],
    "relevance": 0.983
  },
  {
    "codeTitle": "Basic @defer Block Usage in Angular HTML",
    "codeDescription": "Demonstrates the basic syntax for wrapping a component in a @defer block to enable lazy loading.",
    "codeLanguage": "angular-html",
    "codeTokens": 41,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/defer.md#2025-04-08_snippet_0",
    "pageTitle": "Deferred Loading with @defer in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@defer {\n  <large-component />\n}"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Creating and Manipulating Signals in TypeScript",
    "codeDescription": "This snippet demonstrates how to create a signal, read its value, and update it using both set and update methods. It shows the basic operations available for signals in Angular.",
    "codeLanguage": "typescript",
    "codeTokens": 143,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/introduction/essentials/signals.md#2025-04-08_snippet_0",
    "pageTitle": "Using Signals in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {signal} from '@angular/core';\n\n// Create a signal with the `signal` function.\nconst firstName = signal('Morgan');\n\n// Read a signal value by calling it— signals are functions.\nconsole.log(firstName());\n\n// Change the value of this signal by calling its `set` method with a new value.\nfirstName.set('Jaime');\n\n// You can also use the `update` method to change the value\n// based on the previous value.\nfirstName.update(name => name.toUpperCase());"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "CLI-Generated Hero Service",
    "codeDescription": "Default service class generated by Angular CLI with @Injectable decorator and root-level provider configuration.",
    "codeLanguage": "typescript",
    "codeTokens": 51,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/creating-injectable-service.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Injectable Services Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HeroService {}"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Basic Injectable Service Declaration in TypeScript",
    "codeDescription": "Demonstrates how to declare a basic injectable service class using the @Injectable decorator",
    "codeLanguage": "typescript",
    "codeTokens": 35,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Dependency Injection Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Injectable()\nclass HeroService {}"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Querying for a Single Content Child with @ContentChild in Angular",
    "codeDescription": "This snippet illustrates how to use the @ContentChild decorator to query for a single content child in an Angular component. It shows how to access the queried content in the ngAfterContentInit lifecycle hook.",
    "codeLanguage": "angular-ts",
    "codeTokens": 173,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/queries.md#2025-04-08_snippet_10",
    "pageTitle": "Referencing Component Children with Queries in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'custom-toggle',\n  /*...*/\n})\nexport class CustomToggle {\n  text: string;\n}\n\n@Component({\n  selector: 'custom-expando',\n  /*...*/\n})\nexport class CustomExpando {\n  @ContentChild(CustomToggle) toggle: CustomToggle;\n\n  ngAfterContentInit() {\n    console.log(this.toggle.text);\n  }\n}\n\n@Component({\n  selector: 'user-profile',\n  template: `\n    <custom-expando>\n      <custom-toggle>Show</custom-toggle>\n    </custom-expando>\n  `\n})\nexport class UserProfile { }"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Computed Values from Input Properties",
    "codeDescription": "Demonstrates how to create computed values based on input properties using signals.",
    "codeLanguage": "typescript",
    "codeTokens": 102,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Component, input} from '@angular/core';\n\n@Component({/*...*/})\nexport class CustomSlider {\n  // Declare an input named 'value' with a default value of zero. \n  value = input(0);\n\n  // Create a computed expression that reads the value input\n  label = computed(() => `The slider's value is ${this.value()}`); \n}"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Configuring DI-based Interceptors for Angular HttpClient",
    "codeDescription": "This code demonstrates how to configure HttpClient to use DI-based interceptors by enabling them explicitly and providing them through the DI system.",
    "codeLanguage": "typescript",
    "codeTokens": 89,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/interceptors.md#2025-04-08_snippet_10",
    "pageTitle": "Angular HttpClient Interceptors Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "bootstrapApplication(AppComponent, {providers: [\n  provideHttpClient(\n    // DI-based interceptors must be explicitly enabled.\n    withInterceptorsFromDi(),\n  ),\n\n  {provide: HTTP_INTERCEPTORS, useClass: LoggingInterceptor, multi: true},\n]});"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Using useExisting for Alias Providers in Angular",
    "codeDescription": "This example demonstrates how to use useExisting to create an alias for an existing service provider in Angular.",
    "codeLanguage": "typescript",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection-providers.md#2025-04-08_snippet_5",
    "pageTitle": "Configuring Dependency Providers in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "[\n  NewLogger,\n  // Alias OldLogger w/ reference to NewLogger\n  { provide: OldLogger, useExisting: NewLogger},\n]"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Defining a Basic Angular Component with Inline Template",
    "codeDescription": "This snippet demonstrates how to define a simple Angular component called UserProfile using the @Component decorator with an inline template.",
    "codeLanguage": "typescript",
    "codeTokens": 82,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/introduction/essentials/components.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Components Overview",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  selector: 'user-profile',\n  template: `\n    <h1>User profile</h1>\n    <p>This is the user profile page</p>\n  `,\n})\nexport class UserProfile { /* Your component code goes here */ }"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Implementing Conditional Error Messages in Angular Forms",
    "codeDescription": "Using template reference variables with ngModel to access control state and conditionally display validation error messages based on control states (valid, pristine, etc.).",
    "codeLanguage": "html",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/template-driven-forms.md#2025-04-08_snippet_12",
    "pageTitle": "Building a Template-Driven Form in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<div [hidden]=\"name.valid || name.pristine\"\n     class=\"alert alert-danger\">\n</div>"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Creating an Effect with Injector in TypeScript",
    "codeDescription": "This snippet demonstrates creating an effect outside the constructor by passing an Injector via options.",
    "codeLanguage": "typescript",
    "codeTokens": 88,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/overview.md#2025-04-08_snippet_8",
    "pageTitle": "Angular Signals Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({...})\nexport class EffectiveCounterComponent {\n  readonly count = signal(0);\n  private injector = inject(Injector);\n\n  initializeLogging(): void {\n    effect(() => {\n      console.log(`The count is: ${this.count()}`);\n    }, {injector: this.injector});\n  }\n}"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Configuring Custom XSRF Cookie and Header Names in Angular HttpClient",
    "codeDescription": "This snippet demonstrates how to customize the XSRF protection in Angular's HttpClient by specifying custom names for the XSRF token cookie and header through the withXsrfConfiguration feature in the application config.",
    "codeLanguage": "typescript",
    "codeTokens": 107,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/security.md#2025-04-08_snippet_0",
    "pageTitle": "HttpClient Security in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "export const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(\n      withXsrfConfiguration({\n        cookieName: 'CUSTOM_XSRF_TOKEN',\n        headerName: 'X-Custom-Xsrf-Header',\n      }),\n    ),\n  ]\n};"
      }
    ],
    "relevance": 0.981
  },
  {
    "codeTitle": "Component Composition Example",
    "codeDescription": "Demonstrates how to compose components together by using their selectors in templates.",
    "codeLanguage": "angular-ts",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/anatomy-of-components.md#2025-04-08_snippet_5",
    "pageTitle": "Angular Component Structure and Usage Guide",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'profile-photo',\n})\nexport class ProfilePhoto { }\n\n@Component({\n  imports: [ProfilePhoto],\n  template: `<profile-photo />`\n})\nexport class UserProfile { }"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Adding NgOptimizedImage to Component Imports",
    "codeDescription": "Demonstrates how to include the NgOptimizedImage directive in the imports array of a standalone component or NgModule.",
    "codeLanguage": "typescript",
    "codeTokens": 49,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/image-optimization.md#2025-04-08_snippet_1",
    "pageTitle": "Using NgOptimizedImage Directive in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "imports: [\n  NgOptimizedImage,\n  // ...\n],"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Component Import and Usage",
    "codeDescription": "Shows how to import and use a component within another component using the imports array.",
    "codeLanguage": "angular-ts",
    "codeTokens": 80,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/anatomy-of-components.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Component Structure and Usage Guide",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "import {ProfilePhoto} from './profile-photo';\n\n@Component({\n  // Import the `ProfilePhoto` component in\n  // order to use it in this component's template.\n  imports: [ProfilePhoto],\n  /* ... */\n})\nexport class UserProfile { }"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Combining Multiple Selector Types",
    "codeDescription": "Shows how to combine element and attribute selectors for more specific component matching. Uses both element name and attribute selector together.",
    "codeLanguage": "angular-ts",
    "codeTokens": 56,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/selectors.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Component Selectors Guide",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'button[type=\"reset\"]',\n  ...\n})\nexport class ResetButton { }"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Extending Components with Metadata Inheritance in Angular",
    "codeDescription": "Shows how a component inherits metadata from a base component, including host bindings and inputs. The child component ends up with the union of all inputs, outputs, and host bindings from both itself and its parent.",
    "codeLanguage": "typescript",
    "codeTokens": 184,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inheritance.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Component Inheritance Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  selector: 'base-listbox',\n  template: `\n    ...\n  `,\n  host: {\n    '(keydown)': 'handleKey($event)',\n  },\n})\nexport class ListboxBase {\n  @Input() value: string;\n  handleKey(event: KeyboardEvent) {\n    /* ... */\n  }\n}\n\n@Component({\n  selector: 'custom-listbox',\n  template: `\n    ...\n  `,\n  host: {\n    '(click)': 'focusActiveOption()',\n  },\n})\nexport class CustomListbox extends ListboxBase {\n  @Input() disabled = false;\n  focusActiveOption() {\n    /* ... */\n  }\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Viewport-Triggered Defer Block in Angular",
    "codeDescription": "Demonstrates using a viewport trigger to load deferred content when it enters the viewport.",
    "codeLanguage": "angular-html",
    "codeTokens": 42,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/10-deferrable-views/README.md#2025-04-08_snippet_4",
    "pageTitle": "Implementing Deferrable Views in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@defer (on viewport) {\n  <comments />\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Defining a Computed Signal in Angular",
    "codeDescription": "Creates a read-only signal that derives its value from other signals. The computation function is re-executed whenever any dependency signals change. Optional configuration includes a debug name and equality function.",
    "codeLanguage": "typescript",
    "codeTokens": 68,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/core/index.api.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Core API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export function computed<T>(computation: () => T, options?: CreateComputedOptions<T>): Signal<T>;"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Minimal Content Security Policy for Angular Applications",
    "codeDescription": "Example of a minimal Content Security Policy header required for a new Angular application. This policy allows resources from the same origin and uses nonces for inline styles and scripts.",
    "codeLanguage": "text",
    "codeTokens": 73,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/security.md#2025-04-08_snippet_6",
    "pageTitle": "Angular Security Documentation",
    "codeList": [
      {
        "language": "text",
        "code": "default-src 'self'; style-src 'self' 'nonce-randomNonceGoesHere'; script-src 'self' 'nonce-randomNonceGoesHere';"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Configuring a Custom Location Strategy Provider",
    "codeDescription": "Example of configuring an app-wide provider in the ApplicationConfig to override the default location strategy for the router with a HashLocationStrategy.",
    "codeLanguage": "typescript",
    "codeTokens": 55,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/hierarchical-dependency-injection.md#2025-04-08_snippet_3",
    "pageTitle": "Hierarchical Injectors in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "providers: [\n  { provide: LocationStrategy, useClass: HashLocationStrategy }\n]"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Using @Input Property in Angular Template",
    "codeDescription": "This example shows how to pass a value to an Input property in an Angular component's template using attribute syntax.",
    "codeLanguage": "angular-ts",
    "codeTokens": 58,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/8-input/README.md#2025-04-08_snippet_1",
    "pageTitle": "Component Communication with @Input in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  ...\n  template: `<app-user occupation=\"Angular Developer\"></app-user>`\n})\nclass AppComponent {}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Using Input Signals in Object Shorthand Properties",
    "codeDescription": "Demonstrates using input signals in object shorthand properties in component templates and host bindings. Shows how to properly access the signal value within an object literal.",
    "codeLanguage": "typescript",
    "codeTokens": 117,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/schematics/migrations/signal-migration/test/golden.txt#2025-04-08_snippet_43",
    "pageTitle": "Angular Input Migration Test Cases",
    "codeList": [
      {
        "language": "typescript",
        "code": "// tslint:disable\n\nimport {Component, input} from '@angular/core';\n\n@Component({\n  template: `\n    <div [bla]=\"{myInput: myInput()}\">\n    </div>\n  `,\n  host: {\n    '[style]': '{myInput: myInput()}',\n  },\n})\nexport class TemplateObjectShorthand {\n  readonly myInput = input(true);\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Binding to Host Element in Angular Component",
    "codeDescription": "This TypeScript snippet demonstrates how to bind properties, attributes, and events to a component's host element using the 'host' property in the @Component decorator.",
    "codeLanguage": "typescript",
    "codeTokens": 154,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/host-elements.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Component Host Elements Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  ...,\n  host: {\n    'role': 'slider',\n    '[attr.aria-valuenow]': 'value',\n    '[class.active]': 'isActive()',\n    '[tabIndex]': 'disabled ? -1 : 0',\n    '(keydown)': 'updateValue($event)',\n  },\n})\nexport class CustomSlider {\n  value: number = 0;\n  disabled: boolean = false;\n  isActive = signal(false);\n  updateValue(event: KeyboardEvent) { /* ... */ }\n\n  /* ... */\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Component Selector Definition",
    "codeDescription": "Shows how to define a CSS selector for an Angular component.",
    "codeLanguage": "angular-ts",
    "codeTokens": 43,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/anatomy-of-components.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Component Structure and Usage Guide",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'profile-photo',\n  ...\n})\nexport class ProfilePhoto { }"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Multiple Translation Units in XLIFF Format",
    "codeDescription": "Example of multiple translated XLIFF translation units showing source English text and target French text for various UI elements from an Angular application.",
    "codeLanguage": "html",
    "codeTokens": 169,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/translation-files.md#2025-04-08_snippet_8",
    "pageTitle": "Angular Internationalization (i18n) Translation File Management",
    "codeList": [
      {
        "language": "html",
        "code": "<trans-unit id=\"ba0cc104d3d69bf669f97b8d96a4c5d8d9559aa3\" datatype=\"html\">\n  <source>I don&apos;t output any element</source>\n  <target>Je n&apos;affiche aucun élément</target>\n</trans-unit>\n<trans-unit id=\"701174153757adf13e7c24a248c8a873ac9f5193\" datatype=\"html\">\n  <source>Angular logo</source>\n  <target>Logo d&apos;Angular</target>\n</trans-unit>"
      }
    ],
    "relevance": 0.979
  },
  {
    "codeTitle": "Using Template Reference Variables with NgForm in Angular",
    "codeDescription": "Setting up a template reference variable (#actorForm) to access the NgForm directive instance that governs the form, enabling tracking of overall form status.",
    "codeLanguage": "html",
    "codeTokens": 56,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/template-driven-forms.md#2025-04-08_snippet_8",
    "pageTitle": "Building a Template-Driven Form in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<form #actorForm=\"ngForm\">\n</form>"
      }
    ],
    "relevance": 0.979
  },
  {
    "codeTitle": "Configuring HttpClient with provideHttpClient in Angular",
    "codeDescription": "This snippet demonstrates how to set up HttpClient using the provideHttpClient helper function in the application configuration. It's typically included in the app.config.ts file.",
    "codeLanguage": "typescript",
    "codeTokens": 61,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/setup.md#2025-04-08_snippet_0",
    "pageTitle": "Configuring HttpClient in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "export const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(),\n  ]\n};"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Customizing Output Event Names in Angular",
    "codeDescription": "Use the alias parameter in the output function to specify a different name for the event in templates. This allows internal property names to differ from the public event API.",
    "codeLanguage": "typescript",
    "codeTokens": 67,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/outputs.md#2025-04-08_snippet_5",
    "pageTitle": "Angular Custom Events with Outputs",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({/*...*/})\nexport class CustomSlider {\n  changed = output({alias: 'valueChanged'});\n}"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Declaring an Output Property in Angular Component",
    "codeDescription": "Example of creating an Output property in a child component using the @Output decorator and EventEmitter. This establishes the communication channel from child to parent component.",
    "codeLanguage": "typescript",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/9-output/README.md#2025-04-08_snippet_0",
    "pageTitle": "Component Communication with @Output in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({...})\nclass ChildComponent {\n    @Output() incrementCountEvent = new EventEmitter<number>();\n}"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Accessing Event Objects in Angular Templates",
    "codeDescription": "Shows how to access the event object using the $event parameter in an Angular event listener. This example captures keyboard events and logs the specific key that was pressed.",
    "codeLanguage": "typescript",
    "codeTokens": 101,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/event-listeners.md#2025-04-08_snippet_1",
    "pageTitle": "Event Listeners in Angular Templates",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  template: `\n    <input type=\"text\" (keyup)=\"updateField($event)\" />\n  `,\n  ...\n})\nexport class AppComponent {\n  updateField(event: KeyboardEvent): void {\n    console.log(`The user pressed: ${event.key}`);\n  }\n}"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Input Transform Function in Angular",
    "codeDescription": "Shows how to implement an input transform function to modify input values before they're set.",
    "codeLanguage": "typescript",
    "codeTokens": 76,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_12",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  selector: 'custom-slider',\n  ...\n})\nexport class CustomSlider {\n  @Input({transform: trimString}) label = '';\n}\n\nfunction trimString(value: string | undefined) { return value?.trim() ?? ''; }"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Configuring Static Site Generation in Angular.json",
    "codeDescription": "Shows how to configure Angular to generate a fully static application without a server file by setting the outputMode to 'static' in the angular.json configuration.",
    "codeLanguage": "json",
    "codeTokens": 91,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/ssr.md#2025-04-08_snippet_11",
    "pageTitle": "Angular Server and Hybrid Rendering Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"projects\": {\n    \"your-app\": {\n      \"architect\": {\n        \"prerender\": {\n          \"options\": {\n            \"outputMode\": \"static\"\n          }\n        }\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Implementing PipeTransform Interface for Custom Pipe",
    "codeDescription": "Illustrates how to implement the PipeTransform interface when creating a custom pipe in Angular. This ensures the correct structure of the pipe class.",
    "codeLanguage": "typescript",
    "codeTokens": 70,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/pipes.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Pipes Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'myCustomTransformation',\n})\nexport class MyCustomTransformationPipe implements PipeTransform {}"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Creating Injectable Service in Angular TypeScript",
    "codeDescription": "Demonstrates how to create a basic Calculator service using the @Injectable decorator. The service provides a simple add method and is configured to be available throughout the application using providedIn: 'root'.",
    "codeLanguage": "typescript",
    "codeTokens": 90,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/introduction/essentials/dependency-injection.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Dependency Injection Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Injectable} from '@angular/core';\n\n@Injectable({providedIn: 'root'})\nexport class Calculator {\n  add(x: number, y: number) {\n    return x + y;\n  }\n}"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Configuring Zoneless Bootstrap in Angular",
    "codeDescription": "Example showing how to enable zoneless change detection in both standalone and NgModule-based Angular applications.",
    "codeLanguage": "typescript",
    "codeTokens": 82,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/zoneless.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Zoneless Implementation Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "// standalone bootstrap\nbootstrapApplication(MyApp, {providers: [\n  provideExperimentalZonelessChangeDetection(),\n]});\n\n// NgModule bootstrap\nplatformBrowser().bootstrapModule(AppModule);\n@NgModule({\n  providers: [provideExperimentalZonelessChangeDetection()]\n})\nexport class AppModule {}"
      }
    ],
    "relevance": 0.977
  },
  {
    "codeTitle": "Modifying Angular Component Template",
    "codeDescription": "This TypeScript code updates the template of the Angular component to display 'Hello world'.",
    "codeLanguage": "typescript",
    "codeTokens": 48,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/01-hello-world/README.md#2025-04-08_snippet_3",
    "pageTitle": "Creating a Hello World Angular Application",
    "codeList": [
      {
        "language": "typescript",
        "code": "template: `<h1>{{ title }}</h1>`,\n    styleUrls: ['./app.component.css']"
      }
    ],
    "relevance": 0.976
  },
  {
    "codeTitle": "Using Key Modifiers in Angular Templates",
    "codeDescription": "Shows how to use Angular's key modifiers to filter keyboard events directly in the template. This example specifically listens for the Enter key, simplifying the event handling code.",
    "codeLanguage": "typescript",
    "codeTokens": 104,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/event-listeners.md#2025-04-08_snippet_3",
    "pageTitle": "Event Listeners in Angular Templates",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  template: `\n    <input type=\"text\" (keyup.enter)=\"updateField($event)\" />\n  `,\n  ...\n})\nexport class AppComponent{\n  updateField(event: KeyboardEvent): void {\n    console.log('The user pressed enter in the text field.');\n  }\n}"
      }
    ],
    "relevance": 0.976
  },
  {
    "codeTitle": "Using Jasmine Clock with fakeAsync in Angular Tests",
    "codeDescription": "This snippet demonstrates how to use Jasmine's clock feature in conjunction with fakeAsync for testing time-dependent code in Angular components.",
    "codeLanguage": "typescript",
    "codeTokens": 150,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_20",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "describe('use jasmine.clock()', () => {\n  it('should auto enter fakeAsync', () => {\n    jasmine.clock().install();\n    let called = false;\n    setTimeout(() => {\n      called = true;\n    }, 100);\n    jasmine.clock().tick(100);\n    expect(called).toBe(true);\n    jasmine.clock().uninstall();\n  });\n\n  it('should error if nested', () => {\n    expect(() => {\n      fakeAsync(() => {\n        jasmine.clock().install();\n      })();\n    }).toThrowError(/cannot be nested/);\n  });\n});"
      }
    ],
    "relevance": 0.976
  },
  {
    "codeTitle": "Implementing Reactive Form Validation in Angular TypeScript",
    "codeDescription": "This code snippet shows how to set up validation for a reactive form in the component class. It demonstrates the use of built-in validators and a custom validator function within the FormGroup configuration.",
    "codeLanguage": "TypeScript",
    "codeTokens": 98,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/form-validation.md#2025-04-08_snippet_1",
    "pageTitle": "Validating Form Input in Angular",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "this.actorForm = new FormGroup({\n  name: new FormControl(this.actor.name, [\n    Validators.required,\n    Validators.minLength(4),\n    forbiddenNameValidator(/bob/i)\n  ]),\n  power: new FormControl(this.actor.power, Validators.required)\n});"
      }
    ],
    "relevance": 0.976
  },
  {
    "codeTitle": "Creating a Conditional Computed Signal in TypeScript",
    "codeDescription": "This snippet demonstrates creating a computed signal with dynamic dependencies based on conditions.",
    "codeLanguage": "typescript",
    "codeTokens": 78,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/overview.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Signals Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const showCount = signal(false);\nconst count = signal(0);\nconst conditionalCount = computed(() => {\n  if (showCount()) {\n    return `The count is ${count()}.`;\n  } else {\n    return 'Nothing to see here!';\n  }\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Fetching JSON Data with HttpClient GET Method in TypeScript",
    "codeDescription": "Demonstrates how to make a GET request to fetch JSON configuration data from an API endpoint. The example shows how to specify a generic type for type-safe responses and subscribe to the returned Observable.",
    "codeLanguage": "typescript",
    "codeTokens": 70,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/making-requests.md#2025-04-08_snippet_0",
    "pageTitle": "Making HTTP Requests with Angular HttpClient",
    "codeList": [
      {
        "language": "typescript",
        "code": "http.get<Config>('/api/config').subscribe(config => {\n  // process the configuration.\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Running Code in Injection Context using runInInjectionContext in Angular Service",
    "codeDescription": "This snippet illustrates how to use runInInjectionContext to execute code within an injection context when not already in one. It shows injecting the EnvironmentInjector and using it to create an injection context.",
    "codeLanguage": "typescript",
    "codeTokens": 111,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection-context.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Dependency Injection Context Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Injectable({\n  providedIn: 'root',\n})\nexport class HeroService {\n  private environmentInjector = inject(EnvironmentInjector);\n\n  someMethod() {\n    runInInjectionContext(this.environmentInjector, () => {\n      inject(SomeService); // Do what you need with the injected service\n    });\n  }\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Binding FormControl in Angular Template",
    "codeDescription": "Shows how to bind a FormControl to an input element in an Angular template using the formControl directive.",
    "codeLanguage": "html",
    "codeTokens": 56,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_2",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<label for=\"name\">Name: </label>\n<input id=\"name\" type=\"text\" [formControl]=\"name\">"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Input Property with Transform Function",
    "codeDescription": "Example of using a transform function to modify input values before they are set.",
    "codeLanguage": "typescript",
    "codeTokens": 77,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_6",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  selector: 'custom-slider',\n  /*...*/\n})\nexport class CustomSlider {\n  label = input('', {transform: trimString});\n}\n\nfunction trimString(value: string | undefined): string {\n  return value?.trim() ?? '';\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Basic Input Declaration with @Input Decorator in Angular",
    "codeDescription": "Demonstrates the basic usage of @Input decorator to declare a component input property with a default value.",
    "codeLanguage": "typescript",
    "codeTokens": 49,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_9",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({...})\nexport class CustomSlider {\n  @Input() value = 0;\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Resource with Request Abortion in Angular",
    "codeDescription": "Shows how to implement request abortion in a resource using AbortSignal, particularly useful when working with the fetch API to cancel outstanding HTTP requests.",
    "codeLanguage": "typescript",
    "codeTokens": 122,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/resource.md#2025-04-08_snippet_1",
    "pageTitle": "Using Async Resources in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "const userId: Signal<string> = getUserId();\n\nconst userResource = resource({\n  request: () => ({id: userId()}),\n  loader: ({request, abortSignal}): Promise<User> => {\n    // fetch cancels any outstanding HTTP requests when the given `AbortSignal`\n    // indicates that the request has been aborted.\n    return fetch(`users/${request.id}`, {signal: abortSignal});\n  },\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Importing Validators in Angular TypeScript",
    "codeDescription": "This snippet shows how to import the Validators class from the @angular/forms package in an Angular component for form validation.",
    "codeLanguage": "typescript",
    "codeTokens": 42,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_23",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Validators } from '@angular/forms';"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Updating a Writable Signal's Value in TypeScript",
    "codeDescription": "This snippet demonstrates how to update a writable signal's value based on its previous value using the '.update()' method.",
    "codeLanguage": "typescript",
    "codeTokens": 49,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/overview.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Signals Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// Increment the count by 1.\ncount.update(value => value + 1);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Demonstrating Bad Practices in Angular Component Structure",
    "codeDescription": "This example demonstrates what to avoid by combining multiple responsibilities in a single file: defining a component, bootstrapping the app, defining a model, and loading data all in one file.",
    "codeLanguage": "typescript",
    "codeTokens": 287,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/best-practices/style-guide.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Coding Style Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "/* tslint:disable:no-unused-variable */\n// #docregion\nimport { Component, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\n/* tslint:disable:class-name no-unused-variable */\ninterface hero {\n  id: number;\n  name: string;\n}\n\n@Component({\n  selector: 'app-root',\n  template: `\n      <h1>{{title}}</h1>\n      <pre>{{heroes | json}}</pre>\n    `,\n  styles: []\n})\nclass AppComponent {\n  title = 'Tour of Heroes';\n\n  // This is a bad way to create a service\n  heroes: any[] = [\n    { id: 1, name: 'Windstorm' },\n    { id: 2, name: 'Bombasto' },\n    { id: 3, name: 'Magneta' },\n    { id: 4, name: 'Tornado' }\n  ];\n}\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent],\n  exports: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Basic Constructor DI in Angular Component",
    "codeDescription": "Demonstrates how to inject a service (PetCareService) into a component using constructor-based dependency injection. The private keyword is used to automatically create a class property from the constructor parameter.",
    "codeLanguage": "typescript",
    "codeTokens": 76,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/21-constructor-based-di/README.md#2025-04-08_snippet_0",
    "pageTitle": "Constructor-based Dependency Injection in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({...})\nclass PetCarDashboardComponent {\n    constructor(private petCareService: PetCareService) {\n        ...\n    }\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Creating Parameterized Angular Pipe",
    "codeDescription": "Shows how to implement a custom pipe that accepts additional parameters for transformation. The pipe takes a string value and a format parameter to optionally convert the output to uppercase.",
    "codeLanguage": "angular-ts",
    "codeTokens": 127,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/pipes.md#2025-04-08_snippet_6",
    "pageTitle": "Angular Pipes Documentation",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'myCustomTransformation',\n})\nexport class MyCustomTransformationPipe implements PipeTransform {\n  transform(value: string, format: string): string {\n    let msg = `My custom transformation of ${value}.`\n\n    if (format === 'uppercase') {\n      return msg.toUpperCase()\n    } else {\n      return msg\n    }\n  }\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Using Template Reference Variable in View Query",
    "codeDescription": "Shows how to use a string locator corresponding to a template reference variable in a viewChild query to retrieve an ElementRef.",
    "codeLanguage": "angular-ts",
    "codeTokens": 91,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/queries.md#2025-04-08_snippet_5",
    "pageTitle": "Referencing Component Children with Queries in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  /*...*/\n  template: `\n    <button #save>Save</button>\n    <button #cancel>Cancel</button>\n  `\n})\nexport class ActionBar {\n  saveButton = viewChild<ElementRef<HTMLButtonElement>>('save');\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing RouterLink in Angular Application",
    "codeDescription": "Demonstrates how to use RouterLink directives on anchor tags for navigation in an Angular application. This example shows a typical application component template with navigation links to different routes.",
    "codeLanguage": "html",
    "codeTokens": 55,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/router-reference.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Router Reference Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- This is referenced as an external file in the document -->"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Binding to Native Element Properties in Angular",
    "codeDescription": "This example shows how to bind a component property to a native element property using square bracket syntax. It demonstrates binding the 'disabled' property of a button element.",
    "codeLanguage": "angular-html",
    "codeTokens": 75,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/binding.md#2025-04-08_snippet_1",
    "pageTitle": "Binding Dynamic Text, Properties, and Attributes in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<!-- Bind the `disabled` property on the button element's DOM object -->\n<button [disabled]=\"isFormValid\">Save</button>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Input Alias in @Component Decorator",
    "codeDescription": "Demonstrates how to specify an input alias using the @Component decorator's inputs array.",
    "codeLanguage": "typescript",
    "codeTokens": 52,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_18",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  ...,\n  inputs: ['disabled: sliderDisabled'],\n})\nexport class CustomSlider extends BaseSlider { }"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Component with Non-Migratable Input",
    "codeDescription": "Shows a component with an @Input that cannot be migrated due to manual instantiation. Demonstrates a case where automatic migration to input signals is not possible.",
    "codeLanguage": "typescript",
    "codeTokens": 106,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/schematics/migrations/signal-migration/test/golden.txt#2025-04-08_snippet_27",
    "pageTitle": "Angular Input Migration Test Cases",
    "codeList": [
      {
        "language": "typescript",
        "code": "// tslint:disable\n\nimport {Component, Input} from '@angular/core';\n\n@Component({})\nexport class ManualInstantiation {\n  // TODO: Skipped for migration because:\n  //  Class of this input is manually instantiated. This is discouraged and prevents\n  //  migration.\n  @Input() bla: string = '';\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Creating a Reusable User Service with HttpClient in Angular",
    "codeDescription": "Implementation of an injectable UserService that encapsulates HTTP requests to fetch user data. The service injects HttpClient and provides a method to retrieve user information by ID, returning an Observable of User type.",
    "codeLanguage": "typescript",
    "codeTokens": 100,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/making-requests.md#2025-04-08_snippet_9",
    "pageTitle": "Making HTTP Requests with Angular HttpClient",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Injectable({providedIn: 'root'})\nexport class UserService {\n  private http = inject(HttpClient);\n\n  getUser(id: string): Observable<User> {\n    return this.http.get<User>(`/api/user/${id}`);\n  }\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Defer Block in Angular Template",
    "codeDescription": "Shows how to wrap an article-comments component with @defer block to enable lazy loading. The defer block will load the component when the browser becomes idle.",
    "codeLanguage": "angular-html",
    "codeTokens": 52,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/deferrable-views/steps/1-what-are-deferrable-views/README.md#2025-04-08_snippet_0",
    "pageTitle": "Using Deferrable Views in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@defer {\n  <article-comments />\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Emitting Data with Angular Custom Events",
    "codeDescription": "Examples of emitting different types of data with Angular custom events. Shows how to emit both primitive values and complex objects.",
    "codeLanguage": "typescript",
    "codeTokens": 77,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/outputs.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Custom Events with Outputs",
    "codeList": [
      {
        "language": "typescript",
        "code": "// You can emit primitive values.\nthis.valueChanged.emit(7);\n\n// You can emit custom event objects\nthis.thumbDropped.emit({\n  pointerX: 123,\n  pointerY: 456,\n})"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing a Filter Text Service in Angular",
    "codeDescription": "A stateless service that provides text filtering functionality. This service is provided in the SharedModule and demonstrates how to create utility services for shared functionality across components.",
    "codeLanguage": "typescript",
    "codeTokens": 156,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/best-practices/style-guide.md#2025-04-08_snippet_15",
    "pageTitle": "Angular Coding Style Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class FilterTextService {\n  constructor() {\n    console.log('Created an instance of FilterTextService');\n  }\n\n  filter(data: string, props: Array<string>, originalList: Array<any>) {\n    return originalList.filter(item => {\n      let match = false;\n      for (const prop of props) {\n        if (item[prop].toString().toLowerCase().indexOf(data.toLowerCase()) > -1) {\n          match = true;\n          break;\n        }\n      }\n      return match;\n    });\n  }\n}\n"
      }
    ],
    "relevance": 0.974
  },
  {
    "codeTitle": "Implementing OnInit Lifecycle Hook (Correct)",
    "codeDescription": "This snippet shows the correct implementation of the OnInit lifecycle hook in an Angular component. By implementing the interface, TypeScript can catch spelling and syntax errors.",
    "codeLanguage": "typescript",
    "codeTokens": 94,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/best-practices/style-guide.md#2025-04-08_snippet_38",
    "pageTitle": "Angular Coding Style Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-hero-button',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent implements OnInit {\n  ngOnInit() {\n    console.log('The component is initialized');\n  }\n}"
      }
    ],
    "relevance": 0.973
  },
  {
    "codeTitle": "Importing FormsModule in Angular Component",
    "codeDescription": "The code demonstrates how to import and include FormsModule in an Angular component to enable form functionality.",
    "codeLanguage": "ts",
    "codeTokens": 61,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/15-forms/README.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Forms Overview",
    "codeList": [
      {
        "language": "ts",
        "code": "import {Component} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\n@Component({\n  ...\n  imports: [FormsModule],\n})\nexport class UserComponent {}"
      }
    ],
    "relevance": 0.973
  },
  {
    "codeTitle": "Emitting Events from Angular Components",
    "codeDescription": "Emit a custom event using the emit method on an OutputEmitterRef. This sends the event notification to any components listening to this output.",
    "codeLanguage": "typescript",
    "codeTokens": 44,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/outputs.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Custom Events with Outputs",
    "codeList": [
      {
        "language": "typescript",
        "code": "  this.panelClosed.emit();"
      }
    ],
    "relevance": 0.973
  },
  {
    "codeTitle": "Importing Animation Functions in Angular Component",
    "codeDescription": "Code snippet demonstrating how to import specific animation functions from the @angular/animations package to be used in an Angular component.",
    "codeLanguage": "typescript",
    "codeTokens": 71,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/overview.md#2025-04-08_snippet_1",
    "pageTitle": "Introduction to Angular Animations Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "// Import required symbols from @angular/animations\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationEvent\n} from '@angular/animations';"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Implementing List Iteration with @for in Angular Templates",
    "codeDescription": "Shows how to use the @for block to loop through a collection, displaying each item. The track expression is required to help Angular optimize rendering performance.",
    "codeLanguage": "angular-html",
    "codeTokens": 58,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/control-flow.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Control Flow Features",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@for (item of items; track item.id) {\n  {{ item.name }}\n}"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Configuring Injectable Decorator with providedIn for Angular Service",
    "codeDescription": "This snippet demonstrates how to use the @Injectable decorator with the providedIn property to register a service as a provider in Angular. This is a common solution to the 'No Provider Found' error.",
    "codeLanguage": "typescript",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/errors/NG0201.md#2025-04-08_snippet_0",
    "pageTitle": "Debugging No Provider Found Error in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Injectable({ providedIn: 'app' })"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Defining Custom Events using output Function in Angular Components",
    "codeDescription": "Create a custom event named 'panelClosed' using the output function in an Angular component. This allows the component to emit events that parent components can listen to.",
    "codeLanguage": "typescript",
    "codeTokens": 64,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/outputs.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Custom Events with Outputs",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({/*...*/})\nexport class ExpandablePanel {\n  panelClosed = output<void>();\n}"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Mutating Server State with HttpClient POST Method in TypeScript",
    "codeDescription": "Demonstrates making a POST request to update server configuration. The example shows how to send a request body and handle the response, which includes the updated configuration data.",
    "codeLanguage": "typescript",
    "codeTokens": 70,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/making-requests.md#2025-04-08_snippet_2",
    "pageTitle": "Making HTTP Requests with Angular HttpClient",
    "codeList": [
      {
        "language": "typescript",
        "code": "http.post<Config>('/api/config', newConfig).subscribe(config => {\n  console.log('Updated config:', config);\n});"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Lazy-Loading Components with Dynamic Import in Angular",
    "codeDescription": "Demonstrates how to lazy-load a component using JavaScript's dynamic import. The AdminSettings component loads the AdvancedSettings component only when the user clicks a button, improving initial load performance.",
    "codeLanguage": "angular-ts",
    "codeTokens": 196,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/programmatic-rendering.md#2025-04-08_snippet_3",
    "pageTitle": "Programmatically Rendering Components in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  ...,\n  template: `\n    <section>\n      <h2>Basic settings</h2>\n      <basic-settings />\n    </section>\n    <section>\n      <h2>Advanced settings</h2>\n      <button (click)=\"loadAdvanced()\" *ngIf=\"!advancedSettings\">\n        Load advanced settings\n      </button>\n      <ng-container *ngComponentOutlet=\"advancedSettings\" />\n    </section>\n  `\n})\nexport class AdminSettings {\n  advancedSettings: {new(): AdvancedSettings} | undefined;\n\n  async loadAdvanced() {\n    const { AdvancedSettings } = await import('path/to/advanced_settings.js');\n    this.advancedSettings = AdvancedSettings;\n  }\n}"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Initializing Third-Party Libraries Outside NgZone in Angular",
    "codeDescription": "Shows how to initialize a third-party library (Plotly.js) outside of Angular's zone to prevent unnecessary change detection cycles triggered by the library's internal operations.",
    "codeLanguage": "typescript",
    "codeTokens": 118,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/best-practices/runtime-performance/zone-pollution.md#2025-04-08_snippet_1",
    "pageTitle": "Resolving Zone Pollution in Angular Applications",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Component, NgZone, OnInit } from '@angular/core';\nimport * as Plotly from 'plotly.js-dist-min';\n\n@Component(...)\nclass AppComponent implements OnInit {\n  private ngZone = inject(NgZone);\n\n  ngOnInit() {\n    this.ngZone.runOutsideAngular(() => {\n      Plotly.newPlot('chart', data);\n    });\n  }\n}"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Defining Host Bindings in Angular Component",
    "codeDescription": "This TypeScript snippet shows how to define host bindings for properties and attributes within an Angular component using the 'host' property in the @Component decorator.",
    "codeLanguage": "typescript",
    "codeTokens": 77,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/host-elements.md#2025-04-08_snippet_6",
    "pageTitle": "Angular Component Host Elements Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  ...,\n  host: {\n    'role': 'presentation',\n    '[id]': 'id',\n  }\n})\nexport class ProfilePhoto { /* ... */ }"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Using NonNullableFormBuilder for Non-Nullable Controls",
    "codeDescription": "Demonstrates using the NonNullableFormBuilder to create forms where all controls are non-nullable, reducing boilerplate code.",
    "codeLanguage": "typescript",
    "codeTokens": 57,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/typed-forms.md#2025-04-08_snippet_13",
    "pageTitle": "Angular Typed Forms Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const fb = new FormBuilder();\nconst login = fb.nonNullable.group({\n  email: '',\n  password: '',\n});"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Configuring Component-Level Service Providers in Angular",
    "codeDescription": "A code snippet showing how to configure component-level service providers in Angular using the providers property in the component decorator metadata.",
    "codeLanguage": "typescript",
    "codeTokens": 43,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/hierarchical-dependency-injection.md#2025-04-08_snippet_27",
    "pageTitle": "Hierarchical Injectors in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "providers: [HeroTaxReturnService]"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Creating a FormGroup with Non-Nullable Controls",
    "codeDescription": "Demonstrates creating a login form with non-nullable FormControls, where the controls will reset to their initial values instead of null.",
    "codeLanguage": "typescript",
    "codeTokens": 67,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/typed-forms.md#2025-04-08_snippet_9",
    "pageTitle": "Angular Typed Forms Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const login = new FormGroup({\n    email: new FormControl('', {nonNullable: true}),\n    password: new FormControl('', {nonNullable: true}),\n});"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Configuring Angular Builder Target in angular.json",
    "codeDescription": "Example of configuring a builder target in angular.json file with build configurations for production and default options.",
    "codeLanguage": "json",
    "codeTokens": 156,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/cli-builder.md#2025-04-08_snippet_8",
    "pageTitle": "Angular CLI Builders Guide",
    "codeList": [
      {
        "language": "json",
        "code": "\"myApp\": {\n  \"architect\": {\n    \"build\": {\n      \"builder\": \"@angular-devkit/build-angular:browser\",\n      \"options\": {\n        \"outputPath\": \"dist/myApp\",\n        \"index\": \"src/index.html\"\n      },\n      \"configurations\": {\n        \"production\": {\n          \"fileReplacements\": [\n            {\n              \"replace\": \"src/environments/environment.ts\",\n              \"with\": \"src/environments/environment.prod.ts\"\n            }\n          ],\n          \"optimization\": true,\n          \"outputHashing\": \"all\"\n        }\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.971
  },
  {
    "codeTitle": "Handling Version Updates with SwUpdate Service in Angular",
    "codeDescription": "Demonstrates how to subscribe to version update events using the SwUpdate service. Handles different types of events including version detection, installation, and failure notifications.",
    "codeLanguage": "typescript",
    "codeTokens": 172,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/ecosystem/service-workers/communications.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Service Worker Communication Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class LogUpdateService {\n  constructor(updates: SwUpdate) {\n    updates.versionUpdates.subscribe(evt => {\n      switch (evt.type) {\n        case 'VERSION_DETECTED':\n          console.log(`Downloading new app version: ${evt.version.hash}`);\n          break;\n        case 'VERSION_READY':\n          console.log(`Current app version: ${evt.currentVersion.hash}`);\n          console.log(`New app version ready for use: ${evt.latestVersion.hash}`);\n          break;\n        case 'VERSION_INSTALLATION_FAILED':\n          console.log(`Failed to install app version '${evt.version.hash}': ${evt.error}`);\n          break;\n      }\n    });\n  }\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Implementing ngOnChanges Hook in Angular TypeScript",
    "codeDescription": "Demonstrates how to implement the ngOnChanges lifecycle hook in an Angular component. This hook runs after any component inputs have changed and allows inspection of the changes.",
    "codeLanguage": "typescript",
    "codeTokens": 146,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/lifecycle.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Component Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  /* ... */\n})\nexport class UserProfile {\n  @Input() name: string = '';\n\n  ngOnChanges(changes: SimpleChanges) {\n    for (const inputName in changes) {\n      const inputValues = changes[inputName];\n      console.log(`Previous ${inputName} == ${inputValues.previousValue}`);\n      console.log(`Current ${inputName} == ${inputValues.currentValue}`);\n      console.log(`Is first ${inputName} change == ${inputValues.firstChange}`);\n    }\n  }\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating Getter for FormArray Access in Angular",
    "codeDescription": "Implementing a getter method to access the aliases FormArray from the parent form group, providing easier access to the form array control.",
    "codeLanguage": "typescript",
    "codeTokens": 54,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_28",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "get aliases() {\n  return this.profileForm.get('aliases') as FormArray;\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Implementing hover Trigger with @defer in Angular HTML",
    "codeDescription": "Demonstrates how to use the hover trigger to load deferred content when the mouse hovers over a specified area.",
    "codeLanguage": "angular-html",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/defer.md#2025-04-08_snippet_10",
    "pageTitle": "Deferred Loading with @defer in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@defer (on hover) {\n  <large-cmp />\n} @placeholder {\n  <div>Large component placeholder</div>\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Binding Input Control to Name Property with ngModel",
    "codeDescription": "This snippet shows how to bind an input form control to the name property in the data model using ngModel directive with two-way data binding syntax.",
    "codeLanguage": "html",
    "codeTokens": 105,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/template-driven-forms.md#2025-04-08_snippet_7",
    "pageTitle": "Building a Template-Driven Form in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"form-group\">\n  <label for=\"name\">Name</label>\n  <input type=\"text\" class=\"form-control\" id=\"name\" required [(ngModel)]=\"model.name\" name=\"name\">\n  <!-- TODO: remove this: {{model.name}} -->\n</div>"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Fetching Binary Data with HttpClient GET Method in TypeScript",
    "codeDescription": "Shows how to download binary data (an image) as an ArrayBuffer using HttpClient. This example demonstrates the use of the responseType option to specify the expected response format.",
    "codeLanguage": "typescript",
    "codeTokens": 82,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/making-requests.md#2025-04-08_snippet_1",
    "pageTitle": "Making HTTP Requests with Angular HttpClient",
    "codeList": [
      {
        "language": "typescript",
        "code": "http.get('/images/dog.jpg', {responseType: 'arraybuffer'}).subscribe(buffer => {\n  console.log('The image is ' + buffer.byteLength + ' bytes large');\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Using Structural Directive Syntax in Angular",
    "codeDescription": "Shows the shorthand syntax for applying a structural directive to an element in Angular.",
    "codeLanguage": "angular-html",
    "codeTokens": 51,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/ng-template.md#2025-04-08_snippet_12",
    "pageTitle": "Creating and Using Template Fragments with ng-template in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<section *myDirective>\n  <p>This is a fragment</p>\n</section>"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Installing Angular CLI via npm",
    "codeDescription": "Shows how to install the Angular CLI package from npm. The package is named '@angular/cli' and provides the 'ng' binary for executing CLI commands.",
    "codeLanguage": "markdown",
    "codeTokens": 45,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/overview.md#2025-04-08_snippet_0",
    "pageTitle": "Angular CLI Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "`@angular/cli`"
      },
      {
        "language": "markdown",
        "code": "`ng`"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Chaining Rules in Schematic Factory",
    "codeDescription": "Code that chains multiple rules into a single rule using the chain() method, combining template rules with any other code executed by the schematic.",
    "codeLanguage": "typescript",
    "codeTokens": 51,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/schematics-for-libraries.md#2025-04-08_snippet_18",
    "pageTitle": "Creating and Packaging Angular Library Schematics",
    "codeList": [
      {
        "language": "typescript",
        "code": "return chain([\n  mergeWith(templateSource)\n]);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Resolving Circular Dependencies with forwardRef in Angular",
    "codeDescription": "This example demonstrates the use of forwardRef to resolve circular dependencies in Angular, specifically when a class references itself in its providers array.",
    "codeLanguage": "typescript",
    "codeTokens": 62,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/di-in-action.md#2025-04-08_snippet_2",
    "pageTitle": "Dependency Injection in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "providers: [\n  {\n    provide: PARENT_MENU_ITEM,\n    useExisting: forwardRef(() => MenuItem),\n  },\n],"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Implementing Custom Validator Directive in Angular TypeScript",
    "codeDescription": "This code defines a custom validator directive that can be used in template-driven forms. It wraps the forbiddenNameValidator function and integrates with Angular's form validation system.",
    "codeLanguage": "TypeScript",
    "codeTokens": 139,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/form-validation.md#2025-04-08_snippet_3",
    "pageTitle": "Validating Form Input in Angular",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "@Directive({\n  selector: '[appForbiddenName]',\n  providers: [{provide: NG_VALIDATORS, useExisting: ForbiddenValidatorDirective, multi: true}]\n})\nexport class ForbiddenValidatorDirective implements Validator {\n  @Input('appForbiddenName') forbiddenName = '';\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return this.forbiddenName ? forbiddenNameValidator(new RegExp(this.forbiddenName, 'i'))(control)\n                               : null;\n  }\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Defining NgForm Class in Angular",
    "codeDescription": "This class extends ControlContainer and implements Form and AfterViewInit interfaces. It provides functionality for managing form controls and form groups within a template-driven form.",
    "codeLanguage": "TypeScript",
    "codeTokens": 402,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/forms/index.api.md#2025-04-08_snippet_17",
    "pageTitle": "Angular Forms API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export class NgForm extends ControlContainer implements Form, AfterViewInit {\n    constructor(validators: (Validator | ValidatorFn)[], asyncValidators: (AsyncValidator | AsyncValidatorFn)[], callSetDisabledState?: SetDisabledStateOption | undefined);\n    addControl(dir: NgModel): void;\n    addFormGroup(dir: NgModelGroup): void;\n    get control(): FormGroup;\n    get controls(): {\n        [key: string]: AbstractControl;\n    };\n    form: FormGroup;\n    get formDirective(): Form;\n    getControl(dir: NgModel): FormControl;\n    getFormGroup(dir: NgModelGroup): FormGroup;\n    ngAfterViewInit(): void;\n    ngSubmit: EventEmitter<any>;\n    onReset(): void;\n    onSubmit($event: Event): boolean;\n    options: {\n        updateOn?: FormHooks;\n    };\n    get path(): string[];\n    removeControl(dir: NgModel): void;\n    removeFormGroup(dir: NgModelGroup): void;\n    resetForm(value?: any): void;\n    setValue(value: {\n        [key: string]: any;\n    }): void;\n    get submitted(): boolean;\n    updateModel(dir: NgControl, value: any): void;\n    static ɵdir: i0.ɵɵDirectiveDeclaration<NgForm, \"form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]\", [\"ngForm\"], { \"options\": { \"alias\": \"ngFormOptions\"; \"required\": false; }; }, { \"ngSubmit\": \"ngSubmit\"; }, never, never, false, never>;\n    static ɵfac: i0.ɵɵFactoryDeclaration<NgForm, [{ optional: true; self: true; }, { optional: true; self: true; }, { optional: true; }]>;\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Using Required Queries in Angular Component",
    "codeDescription": "Demonstrates how to use required queries for both viewChild and contentChild to enforce the presence of specific child components.",
    "codeLanguage": "angular-ts",
    "codeTokens": 71,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/queries.md#2025-04-08_snippet_4",
    "pageTitle": "Referencing Component Children with Queries in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({/* ... */})\nexport class CustomCard {\n  header = viewChild.required(CustomCardHeader);\n  body = contentChild.required(CustomCardBody);\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Using Built-in Pipes in Angular Component",
    "codeDescription": "Demonstrates the usage of built-in Angular pipes (TitleCase, Date, Currency) in a component template. The example shows how to transform company name, date, and amount using pipes.",
    "codeLanguage": "angular-ts",
    "codeTokens": 214,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/pipes.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Pipes Documentation",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "import { Component } from '@angular/core';\nimport { CurrencyPipe, DatePipe, TitleCasePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-root',\n  imports: [CurrencyPipe, DatePipe, TitleCasePipe],\n  template: `\n    <main>\n       <!-- Transform the company name to title-case and\n       transform the purchasedOn date to a locale-formatted string -->\n<h1>Purchases from {{ company | titlecase }} on {{ purchasedOn | date }}</h1>\n\n\t    <!-- Transform the amount to a currency-formatted string -->\n      <p>Total: {{ amount | currency }}</p>\n    </main>\n  `,\n})\nexport class ShoppingCartComponent {\n  amount = 123.45;\n  company = 'acme corporation';\n  purchasedOn = '2024-07-08';\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Optional Input Property Declaration",
    "codeDescription": "Shows how to declare an optional input property without a default value.",
    "codeLanguage": "typescript",
    "codeTokens": 62,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({/*...*/})\nexport class CustomSlider {\n  // Produces an InputSignal<number | undefined> because `value` may not be set.\n  value = input<number>();\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Handling Template Writes to Inputs",
    "codeDescription": "Shows examples of inputs that cannot be migrated to signals because they are written to from templates. Includes cases like ngModel two-way binding and event handlers that modify input values.",
    "codeLanguage": "typescript",
    "codeTokens": 229,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/schematics/migrations/signal-migration/test/golden.txt#2025-04-08_snippet_44",
    "pageTitle": "Angular Input Migration Test Cases",
    "codeList": [
      {
        "language": "typescript",
        "code": "// tslint:disable\n\nimport {Component, Input, input} from '@angular/core';\n\n@Component({\n  template: `\n    <input [(ngModel)]=\"inputA\" />\n    <div (click)=\"inputB = false\">\n    </div>\n  `,\n  host: {\n    '(click)': 'inputC = true',\n  },\n})\nclass TwoWayBinding {\n  // TODO: Skipped for migration because:\n  //  Your application code writes to the input. This prevents migration.\n  @Input() inputA = '';\n  // TODO: Skipped for migration because:\n  //  Your application code writes to the input. This prevents migration.\n  @Input() inputB = true;\n  // TODO: Skipped for migration because:\n  //  Your application code writes to the input. This prevents migration.\n  @Input() inputC = false;\n  readonly inputD = input(false);\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Implementing Two-way Binding with Form Controls in Angular",
    "codeDescription": "Demonstrates how to set up two-way binding between a component and a form input using ngModel. Shows dynamic updates of component state based on user input.",
    "codeLanguage": "angular-ts",
    "codeTokens": 122,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/two-way-binding.md#2025-04-08_snippet_0",
    "pageTitle": "Two-way Data Binding in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "import { Component } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  imports: [FormsModule],\n  template: `\n    <main>\n      <h2>Hello {{ firstName }}!</h2>\n      <input type=\"text\" [(ngModel)]=\"firstName\" />\n    </main>\n  `\n})\nexport class AppComponent {\n  firstName = 'Ada';\n}"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Importing NgClass in Angular Component",
    "codeDescription": "This snippet demonstrates how to import the NgClass directive in an Angular component. NgClass is used to add or remove multiple CSS classes simultaneously.",
    "codeLanguage": "TypeScript",
    "codeTokens": 50,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "import { NgClass } from '@angular/common';"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Complete Schematic Factory Implementation",
    "codeDescription": "The complete implementation of the schematic rule function, combining all the necessary components to read workspace configuration, apply templates, and generate files.",
    "codeLanguage": "typescript",
    "codeTokens": 513,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/schematics-for-libraries.md#2025-04-08_snippet_19",
    "pageTitle": "Creating and Packaging Angular Library Schematics",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {\n  Rule,\n  SchematicContext,\n  Tree,\n  apply,\n  chain,\n  mergeWith,\n  move,\n  template,\n  url,\n  applyTemplates,\n} from '@angular-devkit/schematics';\nimport {\n  strings,\n  normalize,\n  virtualFs,\n  workspaces\n} from '@angular-devkit/core';\n\nimport { Schema as MyServiceSchema } from './schema';\n\nfunction createHost(tree: Tree): workspaces.WorkspaceHost {\n  return {\n    async readFile(path: string): Promise<string> {\n      const data = tree.read(path);\n      if (!data) {\n        throw new Error('File not found.');\n      }\n      return virtualFs.fileBufferToString(data);\n    },\n    async writeFile(path: string, data: string): Promise<void> {\n      return tree.overwrite(path, data);\n    },\n    async isDirectory(path: string): Promise<boolean> {\n      return !tree.exists(path) && tree.getDir(path).subfiles.length > 0;\n    },\n    async isFile(path: string): Promise<boolean> {\n      return tree.exists(path);\n    }\n  };\n}\n\nexport function myService(options: MyServiceSchema): Rule {\n  return async (tree: Tree, _context: SchematicContext) => {\n    const host = createHost(tree);\n    const { workspace } = await workspaces.readWorkspace('/', host);\n\n    const project = options.project || workspace.extensions.defaultProject;\n\n    // Throws if project is not defined\n    if (!project) {\n      throw new Error('Option \"project\" is required.');\n    }\n\n    // Get configured project\n    const projectConfig = workspace.projects.get(project);\n    if (!projectConfig) {\n      throw new Error(`Project \"${project}\" does not exist.`);\n    }\n\n    const projectType = projectConfig.extensions.projectType === 'application' ? 'app' : 'lib';\n\n    if (options.path === undefined) {\n      options.path = `${projectConfig.sourceRoot}/${projectType}`;\n    }\n\n    const templateSource = apply(\n      url('./files'),\n      [\n        applyTemplates({\n          classify: strings.classify,\n          dasherize: strings.dasherize,\n          name: options.name\n        }),\n        move(normalize(options.path as string))\n      ]);\n\n    return chain([\n      mergeWith(templateSource)\n    ]);\n  };\n}"
      }
    ],
    "relevance": 0.969
  },
  {
    "codeTitle": "Binding Component Property to Directive",
    "codeDescription": "HTML example showing how to bind the component's color property to the highlight directive.",
    "codeLanguage": "html",
    "codeTokens": 43,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/attribute-directives.md#2025-04-08_snippet_11",
    "pageTitle": "Building and Using Attribute Directives in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<p [appHighlight]=\"color\">Highlight me!</p>"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Setting URL Parameters with HttpParams in HttpClient GET Request",
    "codeDescription": "Demonstrates how to use HttpParams for more control over URL parameter construction. This example shows how to create and modify immutable HttpParams instances for configuring request parameters.",
    "codeLanguage": "typescript",
    "codeTokens": 87,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/making-requests.md#2025-04-08_snippet_4",
    "pageTitle": "Making HTTP Requests with Angular HttpClient",
    "codeList": [
      {
        "language": "typescript",
        "code": "const baseParams = new HttpParams().set('filter', 'all');\n\nhttp.get('/api/config', {\n  params: baseParams.set('details', 'enabled'),\n}).subscribe(config => {\n  // ...\n});"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Complete Input Field with Validation Error Message in Angular",
    "codeDescription": "Implementation of an input field with two-way data binding and conditional validation error message that shows only when the field is invalid and not pristine.",
    "codeLanguage": "html",
    "codeTokens": 131,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/template-driven-forms.md#2025-04-08_snippet_13",
    "pageTitle": "Building a Template-Driven Form in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"form-group\">\n  <label for=\"name\">Name</label>\n  <input type=\"text\" class=\"form-control\" id=\"name\"\n         required\n         [(ngModel)]=\"model.name\" name=\"name\"\n         #name=\"ngModel\">\n\n  <div [hidden]=\"name.valid || name.pristine\"\n       class=\"alert alert-danger\">\n    Name is required\n  </div>\n</div>"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Configuring TestBed for HTTP Testing in Angular",
    "codeDescription": "Basic setup for HTTP testing in Angular using TestBed with provideHttpClient and provideHttpClientTesting providers.",
    "codeLanguage": "typescript",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/testing.md#2025-04-08_snippet_0",
    "pageTitle": "Testing HTTP Requests in Angular Applications",
    "codeList": [
      {
        "language": "typescript",
        "code": "TestBed.configureTestingModule({\n  providers: [\n    // ... other test providers\n    provideHttpClient(),\n    provideHttpClientTesting(),\n  ],\n});\n\nconst httpTesting = TestBed.inject(HttpTestingController);"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "FormGroup with Optional Controls using Interfaces",
    "codeDescription": "Shows how to define a FormGroup with optional controls that can be added or removed at runtime using TypeScript interfaces.",
    "codeLanguage": "typescript",
    "codeTokens": 86,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/typed-forms.md#2025-04-08_snippet_10",
    "pageTitle": "Angular Typed Forms Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface LoginForm {\n  email: FormControl<string>;\n  password?: FormControl<string>;\n}\n\nconst login = new FormGroup<LoginForm>({\n  email: new FormControl('', {nonNullable: true}),\n  password: new FormControl('', {nonNullable: true}),\n});\n\nlogin.removeControl('password');"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Basic Schema Definition for Schematic Options",
    "codeDescription": "Defines a JSON schema for a Hello World schematic with name and useColor options. The schema includes type definitions and default values for the options.",
    "codeLanguage": "json",
    "codeTokens": 92,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/schematics-authoring.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Schematics Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"minLength\": 1,\n            \"default\": \"world\"\n        },\n        \"useColor\": {\n            \"type\": \"boolean\"\n        }\n    }\n}"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Customizing Responsive Breakpoints for Image Srcset Generation",
    "codeDescription": "Demonstrates how to customize the breakpoint values used for responsive image srcset generation using the IMAGE_CONFIG provider.",
    "codeLanguage": "typescript",
    "codeTokens": 95,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/image-optimization.md#2025-04-08_snippet_12",
    "pageTitle": "Using NgOptimizedImage Directive in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "providers: [\n  {\n    provide: IMAGE_CONFIG,\n    useValue: {\n      breakpoints: [16, 48, 96, 128, 384, 640, 750, 828, 1080, 1200, 1920]\n    }\n  },\n],"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Defining a Custom Element Component in TypeScript",
    "codeDescription": "This snippet shows how to define a component that will be used as a custom element. It includes an input property 'content' of type string.",
    "codeLanguage": "typescript",
    "codeTokens": 56,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/elements.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Elements Overview",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component(…)\nclass MyDialog {\n  @Input() content: string;\n}"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Querying for a Single Child Component with @ViewChild in Angular",
    "codeDescription": "This snippet demonstrates how to use the @ViewChild decorator to query for a single child component in an Angular application. It shows how to access the queried component in the ngAfterViewInit lifecycle hook.",
    "codeLanguage": "angular-ts",
    "codeTokens": 141,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/queries.md#2025-04-08_snippet_8",
    "pageTitle": "Referencing Component Children with Queries in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'custom-card-header',\n  /*...*/\n})\nexport class CustomCardHeader {\n  text: string;\n}\n\n@Component({\n  selector: 'custom-card',\n  template: '<custom-card-header>Visit sunny California!</custom-card-header>',\n})\nexport class CustomCard {\n  @ViewChild(CustomCardHeader) header: CustomCardHeader;\n\n  ngAfterViewInit() {\n    console.log(this.header.text);\n  }\n}"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Implementing Nested Routes in Angular HTML Template",
    "codeDescription": "This snippet demonstrates how to set up nested routes in an Angular component's HTML template using router links and a router outlet.",
    "codeLanguage": "html",
    "codeTokens": 99,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/common-router-tasks.md#2025-04-08_snippet_15",
    "pageTitle": "Common Routing Tasks in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<h2>First Component</h2>\n\n<nav>\n  <ul>\n    <li><a routerLink=\"child-a\">Child A</a></li>\n    <li><a routerLink=\"child-b\">Child B</a></li>\n  </ul>\n</nav>\n\n<router-outlet />"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Using Fill Mode with NgOptimizedImage",
    "codeDescription": "Demonstrates how to use the fill attribute to make an image fill its containing element, useful for background image behavior.",
    "codeLanguage": "angular-html",
    "codeTokens": 47,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/image-optimization.md#2025-04-08_snippet_5",
    "pageTitle": "Using NgOptimizedImage Directive in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<img ngSrc=\"cat.jpg\" fill>"
      }
    ],
    "relevance": 0.967
  },
  {
    "codeTitle": "Executing Angular CLI Update for New Build System",
    "codeDescription": "Command to run the automated migration to the new application builder using the Angular CLI.",
    "codeLanguage": "shell",
    "codeTokens": 37,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/build-system-migration.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Application Build System Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "ng update @angular/cli --name use-application-builder"
      }
    ],
    "relevance": 0.967
  },
  {
    "codeTitle": "Creating QuestionControlService for Dynamic Forms in Angular",
    "codeDescription": "This service creates FormGroup instances for dynamic forms based on the question model, specifying default values and validation rules.",
    "codeLanguage": "TypeScript",
    "codeTokens": 142,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/dynamic-forms.md#2025-04-08_snippet_4",
    "pageTitle": "Building Dynamic Forms in Angular",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\nimport { QuestionBase } from './question-base';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionControlService {\n  toFormGroup(questions: QuestionBase<string>[] ) {\n    const group: any = {};\n\n    questions.forEach(question => {\n      group[question.key] = question.required ? new FormControl(question.value || '', Validators.required)\n                                              : new FormControl(question.value || '');\n    });\n    return new FormGroup(group);\n  }\n}\n"
      }
    ],
    "relevance": 0.967
  },
  {
    "codeTitle": "Importing SVG Content Using File Extension Loader",
    "codeDescription": "Example of importing an SVG file as text content after configuring the loader option. The imported content is available as a string via the default export.",
    "codeLanguage": "typescript",
    "codeTokens": 58,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/build-system-migration.md#2025-04-08_snippet_13",
    "pageTitle": "Angular Application Build System Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import contents from './some-file.svg';\n\nconsole.log(contents); // <svg>...</svg>"
      }
    ],
    "relevance": 0.966
  },
  {
    "codeTitle": "Using inject in Angular Router Guard Function",
    "codeDescription": "This example shows how to use the inject function within a CanActivateFn router guard. It demonstrates that router guards run in an injection context, allowing direct use of inject to access services.",
    "codeLanguage": "typescript",
    "codeTokens": 91,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection-context.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Dependency Injection Context Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "const canActivateTeam: CanActivateFn =\n    (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {\n      return inject(PermissionsService).canActivate(inject(UserToken), route.params.id);\n    };"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Overriding Lifecycle Methods in Angular Component Inheritance",
    "codeDescription": "Demonstrates how to properly override lifecycle methods from parent components. When a child component implements a lifecycle method, it must call super to preserve the parent's implementation.",
    "codeLanguage": "typescript",
    "codeTokens": 106,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inheritance.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Component Inheritance Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({ ... })\nexport class ListboxBase {\n  protected isInitialized = false;\n  ngOnInit() {\n    this.isInitialized = true;\n  }\n}\n\n@Component({ ... })\nexport class CustomListbox extends ListboxBase {\n  override ngOnInit() {\n    super.ngOnInit();\n    /* ... */\n  }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Comparing Manual Form Creation to FormBuilder in Angular TypeScript",
    "codeDescription": "These snippets compare creating form controls manually versus using FormBuilder in an Angular component. They show two different approaches to achieve the same form structure.",
    "codeLanguage": "typescript",
    "codeTokens": 93,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_22",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "profileForm = new FormGroup({\n  firstName: new FormControl(''),\n  lastName: new FormControl(''),\n  address: new FormGroup({\n    street: new FormControl(''),\n    city: new FormControl(''),\n    state: new FormControl(''),\n    zip: new FormControl('')\n  })\n});"
      },
      {
        "language": "typescript",
        "code": "profileForm = this.fb.group({\n  firstName: [''],\n  lastName: [''],\n  address: this.fb.group({\n    street: [''],\n    city: [''],\n    state: [''],\n    zip: ['']\n  })\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Trust Functions in Angular Component",
    "codeDescription": "TypeScript code demonstrating how to inject DomSanitizer and use bypassSecurityTrustUrl to mark a URL as safe. This allows Angular to bind potentially dangerous URLs without automatic sanitization.",
    "codeLanguage": "typescript",
    "codeTokens": 88,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/security.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Security Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "constructor(private sanitizer: DomSanitizer) {\n  this.dangerousUrl = 'javascript:alert(\"Hi there\")';\n  this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Importing Angular FormsModule",
    "codeDescription": "This snippet shows the import statements needed to enable Angular's Forms feature by importing the FormsModule, which provides directives like NgModel.",
    "codeLanguage": "typescript",
    "codeTokens": 56,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/template-driven-forms.md#2025-04-08_snippet_3",
    "pageTitle": "Building a Template-Driven Form in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Component } from '@angular/core';\n\nimport { Actor } from '../actor';"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Template-Driven Form Validation in Angular HTML",
    "codeDescription": "This snippet demonstrates how to add validation to a template-driven form using HTML attributes and Angular directives. It includes examples of built-in validators and custom validators, along with error message display logic.",
    "codeLanguage": "HTML",
    "codeTokens": 194,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/form-validation.md#2025-04-08_snippet_0",
    "pageTitle": "Validating Form Input in Angular",
    "codeList": [
      {
        "language": "HTML",
        "code": "<input id=\"name\" name=\"name\" class=\"form-control\"\n       required minlength=\"4\" appForbiddenName=\"bob\"\n       [(ngModel)]=\"actor.name\" #name=\"ngModel\">\n\n<div *ngIf=\"name.invalid && (name.dirty || name.touched)\"\n    class=\"alert\">\n\n  <div *ngIf=\"name.errors?.['required']\">\n    Name is required.\n  </div>\n  <div *ngIf=\"name.errors?.['minlength']\">\n    Name must be at least 4 characters long.\n  </div>\n  <div *ngIf=\"name.errors?.['forbiddenName']\">\n    Name cannot be Bob.\n  </div>\n\n</div>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing DynamicFormComponent in Angular",
    "codeDescription": "This component serves as the main container for the dynamic form, presenting a list of questions and handling form submission.",
    "codeLanguage": "TypeScript",
    "codeTokens": 191,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/dynamic-forms.md#2025-04-08_snippet_7",
    "pageTitle": "Building Dynamic Forms in Angular",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { QuestionBase } from './question-base';\nimport { QuestionControlService } from './question-control.service';\n\n@Component({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  providers: [ QuestionControlService ]\n})\nexport class DynamicFormComponent implements OnInit {\n\n  @Input() questions: QuestionBase<string>[] | null = [];\n  form!: FormGroup;\n  payLoad = '';\n\n  constructor(private qcs: QuestionControlService) {}\n\n  ngOnInit() {\n    this.form = this.qcs.toFormGroup(this.questions as QuestionBase<string>[]);\n  }\n\n  onSubmit() {\n    this.payLoad = JSON.stringify(this.form.getRawValue());\n  }\n}\n"
      },
      {
        "language": "HTML",
        "code": "<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n\n  <div *ngFor=\"let question of questions\" class=\"form-row\">\n    <app-question [question]=\"question\" [form]=\"form\"></app-question>\n  </div>\n\n  <div class=\"form-row\">\n    <button type=\"submit\" [disabled]=\"!form.valid\">Save</button>\n  </div>\n</form>\n\n<div *ngIf=\"payLoad\" class=\"form-row\">\n  <strong>Saved the following values</strong><br>{{payLoad}}\n</div>\n"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Using ARIA attribute binding in Angular templates",
    "codeDescription": "Demonstrates the proper syntax for binding to ARIA attributes in Angular templates using the attr. prefix, which is necessary because ARIA relies on HTML attributes rather than DOM properties.",
    "codeLanguage": "html",
    "codeTokens": 71,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/best-practices/a11y.md#2025-04-08_snippet_0",
    "pageTitle": "Accessibility in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- Use attr. when binding to an ARIA attribute -->\n<button [attr.aria-label]=\"myActionLabel\">…</button>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Installing Angular CLI Globally",
    "codeDescription": "Command to install the latest version of Angular CLI globally using npm.",
    "codeLanguage": "bash",
    "codeTokens": 32,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/intro/README.md#2025-04-08_snippet_1",
    "pageTitle": "Building Your First Angular App Tutorial",
    "codeList": [
      {
        "language": "bash",
        "code": "npm install -g @angular/cli"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring Server Routes in Angular",
    "codeDescription": "TypeScript configuration for server routes defining different rendering modes (CSR, SSG, SSR) for various application paths.",
    "codeLanguage": "typescript",
    "codeTokens": 190,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/ssr.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Server and Hybrid Rendering Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// app.routes.server.ts\nimport { RenderMode, ServerRoute } from '@angular/ssr';\n\nexport const serverRoutes: ServerRoute[] = [\n  {\n    path: '', // This renders the \"/\" route on the client (CSR)\n    renderMode: RenderMode.Client,\n  },\n  {\n    path: 'about', // This page is static, so we prerender it (SSG)\n    renderMode: RenderMode.Prerender,\n  },\n  {\n    path: 'profile', // This page requires user-specific data, so we use SSR\n    renderMode: RenderMode.Server,\n  },\n  {\n    path: '**', // All other routes will be rendered on the server (SSR)\n    renderMode: RenderMode.Server,\n  },\n];"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Defining Types and Interfaces for Angular Signals in TypeScript",
    "codeDescription": "This code snippet defines various types and interfaces used in Angular's signal system, including ComputationFn, ComputedNode, ReactiveNode, and SignalNode. It also declares several utility functions for managing reactive computations and signals.",
    "codeLanguage": "typescript",
    "codeTokens": 1478,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/core/primitives/signals/index.api.md#2025-04-08_snippet_0",
    "pageTitle": "API Report for @angular/core_primitives_signals",
    "codeList": [
      {
        "language": "typescript",
        "code": "// @public (undocumented)\nexport type ComputationFn<S, D> = (source: S, previous?: {\n    source: S;\n    value: D;\n}) => D;\n\n// @public\nexport interface ComputedNode<T> extends ReactiveNode {\n    computation: () => T;\n    // (undocumented)\n    equal: ValueEqualityFn<T>;\n    error: unknown;\n    value: T;\n}\n\n// @public\nexport function consumerAfterComputation(node: ReactiveNode | null, prevConsumer: ReactiveNode | null): void;\n\n// @public\nexport function consumerBeforeComputation(node: ReactiveNode | null): ReactiveNode | null;\n\n// @public\nexport function consumerDestroy(node: ReactiveNode): void;\n\n// @public (undocumented)\nexport function consumerMarkDirty(node: ReactiveNode): void;\n\n// @public\nexport function consumerPollProducersForChange(node: ReactiveNode): boolean;\n\n// @public\nexport function createComputed<T>(computation: () => T, equal?: ValueEqualityFn<T>): ComputedGetter<T>;\n\n// @public (undocumented)\nexport function createLinkedSignal<S, D>(sourceFn: () => S, computationFn: ComputationFn<S, D>, equalityFn?: ValueEqualityFn<D>): LinkedSignalGetter<S, D>;\n\n// @public\nexport function createSignal<T>(initialValue: T, equal?: ValueEqualityFn<T>): SignalGetter<T>;\n\n// @public (undocumented)\nexport function createWatch(fn: (onCleanup: WatchCleanupRegisterFn) => void, schedule: (watch: Watch) => void, allowSignalWrites: boolean): Watch;\n\n// @public\nexport function defaultEquals<T>(a: T, b: T): boolean;\n\n// @public (undocumented)\nexport function getActiveConsumer(): ReactiveNode | null;\n\n// @public (undocumented)\nexport function isInNotificationPhase(): boolean;\n\n// @public (undocumented)\nexport function isReactive(value: unknown): value is Reactive;\n\n// @public (undocumented)\nexport type LinkedSignalGetter<S, D> = (() => D) & {\n    [SIGNAL]: LinkedSignalNode<S, D>;\n};\n\n// @public (undocumented)\nexport interface LinkedSignalNode<S, D> extends ReactiveNode {\n    computation: ComputationFn<S, D>;\n    // (undocumented)\n    equal: ValueEqualityFn<D>;\n    error: unknown;\n    source: () => S;\n    sourceValue: S;\n    value: D;\n}\n\n// @public (undocumented)\nexport function linkedSignalSetFn<S, D>(node: LinkedSignalNode<S, D>, newValue: D): void;\n\n// @public (undocumented)\nexport function linkedSignalUpdateFn<S, D>(node: LinkedSignalNode<S, D>, updater: (value: D) => D): void;\n\n// @public\nexport function producerAccessed(node: ReactiveNode): void;\n\n// @public\nexport function producerIncrementEpoch(): void;\n\n// @public (undocumented)\nexport function producerMarkClean(node: ReactiveNode): void;\n\n// @public\nexport function producerNotifyConsumers(node: ReactiveNode): void;\n\n// @public\nexport function producerUpdatesAllowed(): boolean;\n\n// @public\nexport function producerUpdateValueVersion(node: ReactiveNode): void;\n\n// @public (undocumented)\nexport interface Reactive {\n    // (undocumented)\n    [SIGNAL]: ReactiveNode;\n}\n\n// @public (undocumented)\nexport const REACTIVE_NODE: ReactiveNode;\n\n// @public (undocumented)\nexport type ReactiveHookFn = (node: ReactiveNode) => void;\n\n// @public\nexport interface ReactiveNode {\n    consumerAllowSignalWrites: boolean;\n    // (undocumented)\n    readonly consumerIsAlwaysLive: boolean;\n    // (undocumented)\n    consumerMarkedDirty(node: unknown): void;\n    consumerOnSignalRead(node: unknown): void;\n    debugName?: string;\n    dirty: boolean;\n    kind: string;\n    lastCleanEpoch: Version;\n    liveConsumerIndexOfThis: number[] | undefined;\n    liveConsumerNode: ReactiveNode[] | undefined;\n    nextProducerIndex: number;\n    producerIndexOfThis: number[] | undefined;\n    producerLastReadVersion: Version[] | undefined;\n    producerMustRecompute(node: unknown): boolean;\n    producerNode: ReactiveNode[] | undefined;\n    // (undocumented)\n    producerRecomputeValue(node: unknown): void;\n    version: Version;\n}\n\n// @public (undocumented)\nexport function runPostProducerCreatedFn(node: ReactiveNode): void;\n\n// @public (undocumented)\nexport function runPostSignalSetFn<T>(node: SignalNode<T>): void;\n\n// @public (undocumented)\nexport function setActiveConsumer(consumer: ReactiveNode | null): ReactiveNode | null;\n\n// @public\nexport function setAlternateWeakRefImpl(impl: unknown): void;\n\n// @public (undocumented)\nexport function setPostProducerCreatedFn(fn: ReactiveHookFn | null): ReactiveHookFn | null;\n\n// @public (undocumented)\nexport function setPostSignalSetFn(fn: ReactiveHookFn | null): ReactiveHookFn | null;\n\n// @public (undocumented)\nexport function setThrowInvalidWriteToSignalError(fn: <T>(node: SignalNode<T>) => never): void;\n\n// @public\nexport const SIGNAL: unique symbol;\n\n// @public (undocumented)\nexport const SIGNAL_NODE: SignalNode<unknown>;\n\n// @public (undocumented)\nexport function signalGetFn<T>(node: SignalNode<T>): T;\n\n// @public (undocumented)\nexport interface SignalGetter<T> extends SignalBaseGetter<T> {\n    // (undocumented)\n    readonly [SIGNAL]: SignalNode<T>;\n}\n\n// @public (undocumented)\nexport interface SignalNode<T> extends ReactiveNode {\n    // (undocumented)\n    equal: ValueEqualityFn<T>;\n    // (undocumented)\n    value: T;\n}\n\n// @public (undocumented)\nexport function signalSetFn<T>(node: SignalNode<T>, newValue: T): void;\n\n// @public (undocumented)\nexport function signalUpdateFn<T>(node: SignalNode<T>, updater: (value: T) => T): void;\n\n// @public\nexport function untracked<T>(nonReactiveReadsFn: () => T): T;\n\n// @public\nexport type ValueEqualityFn<T> = (a: T, b: T) => boolean;\n\n// @public (undocumented)\nexport interface Watch {\n    // (undocumented)\n    [SIGNAL]: WatchNode;\n    // (undocumented)\n    cleanup(): void;\n    destroy(): void;\n    // (undocumented)\n    notify(): void;\n    run(): void;\n}\n\n// @public\nexport type WatchCleanupFn = () => void;\n\n// @public\nexport type WatchCleanupRegisterFn = (cleanupFn: WatchCleanupFn) => void;"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring Import Conditions in Package.json for Development/Production",
    "codeDescription": "Package.json configuration for subpath imports that maps '#logger' to different files based on the development or production condition. This enables environment-specific code loading.",
    "codeLanguage": "json",
    "codeTokens": 80,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/build-system-migration.md#2025-04-08_snippet_19",
    "pageTitle": "Angular Application Build System Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  ...\n  \"imports\": {\n    \"#logger\": {\n      \"development\": \"./src/logging/debug.ts\",\n      \"default\": \"./src/logging/noop.ts\"\n    }\n  }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Testing Angular Defer Blocks",
    "codeDescription": "Demonstrates how to test defer blocks using TestBed APIs and manually control different states during testing.",
    "codeLanguage": "angular-ts",
    "codeTokens": 266,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/defer.md#2025-04-08_snippet_16",
    "pageTitle": "Deferred Loading with @defer in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "it('should render a defer block in different states', async () => {\n  // configures the defer block behavior to start in \"paused\" state for manual control.\n  TestBed.configureTestingModule({deferBlockBehavior: DeferBlockBehavior.Manual});\n  @Component({\n    // ...\n    template: `\n      @defer {\n        <large-component />\n      } @placeholder {\n        Placeholder\n      } @loading {\n        Loading...\n      }\n    `\n  })\n  class ComponentA {}\n  // Create component fixture.\n  const componentFixture = TestBed.createComponent(ComponentA);\n  // Retrieve the list of all defer block fixtures and get the first block.\n  const deferBlockFixture = (await componentFixture.getDeferBlocks())[0];\n  // Renders placeholder state by default.\n  expect(componentFixture.nativeElement.innerHTML).toContain('Placeholder');\n  // Render loading state and verify rendered output.\n  await deferBlockFixture.render(DeferBlockState.Loading);\n  expect(componentFixture.nativeElement.innerHTML).toContain('Loading');\n  // Render final state and verify the output.\n  await deferBlockFixture.render(DeferBlockState.Complete);\n  expect(componentFixture.nativeElement.innerHTML).toContain('large works!');\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Using Dependency Injection in Angular HttpClient Interceptors",
    "codeDescription": "This example demonstrates how to use dependency injection in an interceptor to retrieve an authentication token from a service and add it to the request headers.",
    "codeLanguage": "typescript",
    "codeTokens": 125,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/interceptors.md#2025-04-08_snippet_4",
    "pageTitle": "Angular HttpClient Interceptors Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "export function authInterceptor(req: HttpRequest<unknown>, next: HttpHandlerFn) {\n  // Inject the current `AuthService` and use it to get an authentication token:\n  const authToken = inject(AuthService).getAuthToken();\n\n  // Clone the request to add the authentication header.\n  const newReq = req.clone({\n    headers: req.headers.append('X-Authentication-Token', authToken),\n  });\n  return next(newReq);\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Injecting Component's DOM Element in Angular Directive",
    "codeDescription": "This code snippet shows how to inject and access a component's DOM element using ElementRef in an Angular directive. This is useful for direct DOM manipulation when necessary.",
    "codeLanguage": "typescript",
    "codeTokens": 93,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/di-in-action.md#2025-04-08_snippet_1",
    "pageTitle": "Dependency Injection in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n  private element = inject(ElementRef)\n\n  update() {\n    this.element.nativeElement.style.color = 'red';\n  }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Model Input with Two-way Binding",
    "codeDescription": "Demonstrates how to implement two-way binding using model inputs in Angular components.",
    "codeLanguage": "typescript",
    "codeTokens": 93,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_8",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({ /* ... */})\nexport class CustomSlider {\n  // Define a model input named \"value\".\n  value = model(0);\n\n  increment() {\n    // Update the model input with a new value, propagating the value to any bindings. \n    this.value.update(oldValue => oldValue + 10);\n  }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Generating Form Controls with FormBuilder in Angular TypeScript",
    "codeDescription": "This snippet shows how to use the FormBuilder service to create form controls and form groups in an Angular component. It creates a profileForm with various fields including nested form groups.",
    "codeLanguage": "typescript",
    "codeTokens": 91,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_21",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "profileForm = this.fb.group({\n  firstName: [''],\n  lastName: [''],\n  address: this.fb.group({\n    street: [''],\n    city: [''],\n    state: [''],\n    zip: ['']\n  }),\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Using NgIf for Conditional Rendering in Angular HTML Template",
    "codeDescription": "This snippet demonstrates how to use the NgIf directive to conditionally render an ItemDetailComponent based on the isActive expression.",
    "codeLanguage": "html",
    "codeTokens": 55,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_11",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<app-item-detail *ngIf=\"isActive\" [item]=\"item\"></app-item-detail>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Generating Form Controls with FormBuilder in Angular TypeScript",
    "codeDescription": "This snippet shows how to use the FormBuilder service to create form controls and form groups in an Angular component. It creates a profileForm with various fields including nested form groups.",
    "codeLanguage": "typescript",
    "codeTokens": 91,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_21",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "profileForm = this.fb.group({\n  firstName: [''],\n  lastName: [''],\n  address: this.fb.group({\n    street: [''],\n    city: [''],\n    state: [''],\n    zip: ['']\n  }),\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Type Narrowing with Angular Input Properties in TypeScript",
    "codeDescription": "This snippet demonstrates various techniques for type narrowing when using Angular's input() function. It includes examples of arrow functions, object destructuring, and multi-line formatting.",
    "codeLanguage": "TypeScript",
    "codeTokens": 245,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/schematics/migrations/signal-migration/test/golden_best_effort.txt#2025-04-08_snippet_17",
    "pageTitle": "Angular Input Signal Migration Tests",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "import {Directive, input} from '@angular/core';\n\n@Directive()\nexport class Narrowing {\n  readonly name = input<string>();\n\n  narrowingArrowFn() {\n    [this].map((x) => {\n      const name = x.name();\n      return name && name.charAt(0);\n    });\n  }\n\n  narrowingArrowFnMultiLineWrapped() {\n    [this].map(\n      (x) => {\n      const name = x.name();\n      return name &&\n        name.includes(\n          'A super long string to ensure this is wrapped and we can test formatting.',\n        );\n    },\n    );\n  }\n\n  narrowingObjectExpansion() {\n    [this].map(({name: nameInput}) => {\n      const name = nameInput();\n      return name && name.charAt(0);\n    });\n  }\n\n  narrowingNormalThenObjectExpansion() {\n    const name = this.name();\n    if (name) {\n      const {charAt} = name;\n      charAt(0);\n    }\n  }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Defining Angular Components with Input Decorators",
    "codeDescription": "This snippet defines two Angular components with input decorators. It includes comments about migration challenges for inputs used in control flow expressions.",
    "codeLanguage": "TypeScript",
    "codeTokens": 161,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/schematics/migrations/signal-migration/test/golden.txt#2025-04-08_snippet_47",
    "pageTitle": "Angular Input Migration Test Cases",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "@Component({template: ''})\nexport class OtherComponent {\n  // TODO: Skipped for migration because:\n  //  This input is used in a control flow expression (e.g. `@if` or `*ngIf`)\n  //  and migrating would break narrowing currently.\n  @Input() safeRead: string = '';\n  // TODO: Skipped for migration because:\n  //  This input is used in a control flow expression (e.g. `@if` or `*ngIf`)\n  //  and migrating would break narrowing currently.\n  @Input() safeRead2: string = '';\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Defining Basic Component Selector in Angular",
    "codeDescription": "Demonstrates how to define a basic component with a custom element selector. Shows the basic structure of an Angular component decorator with a selector property.",
    "codeLanguage": "angular-ts",
    "codeTokens": 58,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/selectors.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Component Selectors Guide",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'profile-photo',\n  ...\n})\nexport class ProfilePhoto { }"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Simulating User Input in Angular Component Tests",
    "codeDescription": "This test demonstrates how to simulate user input by setting an input element's value and dispatching an input event.",
    "codeLanguage": "typescript",
    "codeTokens": 121,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_8",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "it('should convert hero name to Title Case', () => {\n  const hostElement = fixture.nativeElement;\n  const nameInput: HTMLInputElement = hostElement.querySelector('input');\n  const nameDisplay: HTMLElement = hostElement.querySelector('span');\n\n  nameInput.value = 'quick BROWN  fOx';\n  nameInput.dispatchEvent(new Event('input'));\n  fixture.detectChanges();\n  expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Hero Service with Dependencies",
    "codeDescription": "Demonstrates a HeroService class that depends on BackendService and Logger service for fetching and logging hero data asynchronously.",
    "codeLanguage": "typescript",
    "codeTokens": 120,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/creating-injectable-service.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Injectable Services Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { inject } from \"@angular/core\";\n\nexport class HeroService {\n  private heroes: Hero[] = [];\n\n  private backend = inject(BackendService);\n  private logger = inject(Logger);\n\n  async getHeroes() {\n    // Fetch\n    this.heroes = await this.backend.getAll(Hero);\n    // Log\n    this.logger.log(`Fetched ${this.heroes.length} heroes.`);\n    return this.heroes;\n  }\n}"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Using NgClass with an Expression in Angular Template",
    "codeDescription": "This example shows how to use NgClass with a boolean expression in an Angular template. The class 'special' is applied when isSpecial is true.",
    "codeLanguage": "HTML",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div [ngClass]=\"{ 'special': isSpecial }\">This div is special</div>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Correct Default Import Example in TypeScript",
    "codeDescription": "The proper way to import the 'moment' package using default import syntax, which conforms to ECMAScript specifications. This requires enabling the esModuleInterop option in tsconfig.",
    "codeLanguage": "typescript",
    "codeTokens": 58,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/build-system-migration.md#2025-04-08_snippet_23",
    "pageTitle": "Angular Application Build System Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import moment from 'moment';\n\nconsole.log(moment().format());"
      }
    ],
    "relevance": 0.964
  },
  {
    "codeTitle": "Implementing QuestionService for Dynamic Forms in Angular",
    "codeDescription": "This service provides a set of questions for the dynamic form. In a real application, this might fetch data from a backend system.",
    "codeLanguage": "TypeScript",
    "codeTokens": 302,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/dynamic-forms.md#2025-04-08_snippet_6",
    "pageTitle": "Building Dynamic Forms in Angular",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "import { Injectable } from '@angular/core';\n\nimport { DropdownQuestion } from './question-dropdown';\nimport { QuestionBase } from './question-base';\nimport { TextboxQuestion } from './question-textbox';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QuestionService {\n\n  // TODO: get from a remote source of question metadata\n  getQuestions() {\n\n    const questions: QuestionBase<string>[] = [\n\n      new DropdownQuestion({\n        key: 'brave',\n        label: 'Bravery Rating',\n        options: [\n          {key: 'solid',  value: 'Solid'},\n          {key: 'great',  value: 'Great'},\n          {key: 'good',   value: 'Good'},\n          {key: 'unproven', value: 'Unproven'}\n        ],\n        order: 3\n      }),\n\n      new TextboxQuestion({\n        key: 'firstName',\n        label: 'First name',\n        value: 'Bombasto',\n        required: true,\n        order: 1\n      }),\n\n      new TextboxQuestion({\n        key: 'emailAddress',\n        label: 'Email',\n        type: 'email',\n        order: 2\n      })\n    ];\n\n    return questions.sort((a, b) => a.order - b.order);\n  }\n}\n"
      }
    ],
    "relevance": 0.964
  },
  {
    "codeTitle": "Testing Asynchronous Operations with fakeAsync and tick",
    "codeDescription": "This snippet shows how to use fakeAsync and tick to test asynchronous operations. It demonstrates simulating the passage of time and checking the results of setTimeout calls.",
    "codeLanguage": "typescript",
    "codeTokens": 96,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_19",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "it('should run timeout callback with delay after call tick with millis', fakeAsync(() => {\n  let called = false;\n  setTimeout(() => {\n    called = true;\n  }, 100);\n  tick(100);\n  expect(called).toBe(true);\n}));"
      }
    ],
    "relevance": 0.963
  },
  {
    "codeTitle": "Testing Class-based HTTP Interceptor",
    "codeDescription": "Configuration and testing setup for class-based HTTP interceptor using HTTP_INTERCEPTORS token.",
    "codeLanguage": "typescript",
    "codeTokens": 95,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/testing.md#2025-04-08_snippet_10",
    "pageTitle": "Testing HTTP Requests in Angular Applications",
    "codeList": [
      {
        "language": "typescript",
        "code": "TestBed.configureTestingModule({\n  providers: [\n    AuthService,\n    provideHttpClient(withInterceptorsFromDi()),\n    provideHttpClientTesting(), \n    // We rely on the HTTP_INTERCEPTORS token to register the AuthInterceptor as an HttpInterceptor\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n  ],\n});"
      }
    ],
    "relevance": 0.963
  },
  {
    "codeTitle": "Defining User Interface for Template Type Checking in TypeScript",
    "codeDescription": "TypeScript interface definition for a User object with name and nested address properties. This interface is used in the examples to demonstrate how Angular's template type checking handles nested properties in different modes.",
    "codeLanguage": "typescript",
    "codeTokens": 72,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/template-typecheck.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Template Type Checking Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface User {\n  name: string;\n  address: {\n    city: string;\n    state: string;\n  }\n}"
      }
    ],
    "relevance": 0.963
  },
  {
    "codeTitle": "Implementing ViewChild and ViewChildren Decorators for Angular Component References",
    "codeDescription": "Defines the ViewChild and ViewChildren decorators and their signal-based alternatives for querying child elements, components, or directives from a component's template. These APIs allow accessing and manipulating child elements.",
    "codeLanguage": "typescript",
    "codeTokens": 551,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/core/index.api.md#2025-04-08_snippet_77",
    "pageTitle": "Angular Core API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// @public\nexport type ViewChild = Query;\n\n// @public\nexport const ViewChild: ViewChildDecorator;\n\n// @public\nexport const viewChild: ViewChildFunction;\n\n// @public\nexport interface ViewChildDecorator {\n    (selector: ProviderToken<unknown> | Function | string, opts?: {\n        read?: any;\n        static?: boolean;\n    }): any;\n    // (undocumented)\n    new (selector: ProviderToken<unknown> | Function | string, opts?: {\n        read?: any;\n        static?: boolean;\n    }): ViewChild;\n}\n\n// @public\nexport interface ViewChildFunction {\n    <LocatorT, ReadT>(locator: ProviderToken<LocatorT> | string, opts: {\n        read: ProviderToken<ReadT>;\n        debugName?: string;\n    }): Signal<ReadT | undefined>;\n    // (undocumented)\n    <LocatorT>(locator: ProviderToken<LocatorT> | string, opts?: {\n        debugName?: string;\n    }): Signal<LocatorT | undefined>;\n    required: {\n        <LocatorT>(locator: ProviderToken<LocatorT> | string, opts?: {\n            debugName?: string;\n        }): Signal<LocatorT>;\n        <LocatorT, ReadT>(locator: ProviderToken<LocatorT> | string, opts: {\n            read: ProviderToken<ReadT>;\n            debugName?: string;\n        }): Signal<ReadT>;\n    };\n}\n\n// @public\nexport type ViewChildren = Query;\n\n// @public\nexport const ViewChildren: ViewChildrenDecorator;\n\n// @public (undocumented)\nexport function viewChildren<LocatorT>(locator: ProviderToken<LocatorT> | string, opts?: {\n    debugName?: string;\n}): Signal<ReadonlyArray<LocatorT>>;\n\n// @public (undocumented)\nexport function viewChildren<LocatorT, ReadT>(locator: ProviderToken<LocatorT> | string, opts: {\n    read: ProviderToken<ReadT>;\n    debugName?: string;\n}): Signal<ReadonlyArray<ReadT>>;\n\n// @public\nexport interface ViewChildrenDecorator {\n    (selector: ProviderToken<unknown> | Function | string, opts?: {\n        read?: any;\n        emitDistinctChangesOnly?: boolean;\n    }): any;\n    // (undocumented)\n    new (selector: ProviderToken<unknown> | Function | string, opts?: {\n        read?: any;\n        emitDistinctChangesOnly?: boolean;\n    }): ViewChildren;\n}"
      }
    ],
    "relevance": 0.963
  },
  {
    "codeTitle": "Implementing a Popup Component and Service in Angular",
    "codeDescription": "A complete example showing how to implement a popup component and service in Angular. This includes the component definition, service implementation for both dynamic loading and custom element creation, and usage in the app component.",
    "codeLanguage": "typescript",
    "codeTokens": 393,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/elements.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Elements Overview",
    "codeList": [
      {
        "language": "typescript",
        "code": "// popup.component.ts\nimport { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\n\n@Component({\n  selector: 'app-popup',\n  template: `\n    <span>Popup: {{message}}</span>\n    <button type=\"button\" (click)=\"closed.emit()\">&#x2716;</button>\n  `,\n  animations: [\n    trigger('state', [\n      state('opened', style({transform: 'translateY(0%)'}) ),\n      state('void, closed', style({transform: 'translateY(100%)', opacity: 0}) ),\n      transition('* => *', animate('100ms ease-in')),\n    ])\n  ],\n  styles: [`\n    :host {\n      position: fixed;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      background: #009cff;\n      height: 48px;\n      padding: 16px;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      border-top: 1px solid black;\n      font-size: 24px;\n    }\n\n    button {\n      border-radius: 50%;\n    }\n  `]\n})\nexport class PopupComponent {\n  @HostBinding('@state')\n  state: 'opened' | 'closed' = 'closed';\n\n  @Input()\n  get message(): string { return this._message; }\n  set message(message: string) {\n    this._message = message;\n    this.state = 'opened';\n  }\n  private _message = '';\n\n  @Output()\n  closed = new EventEmitter<void>();\n}"
      },
      {
        "language": "typescript",
        "code": "// popup.service.ts\nimport { ApplicationRef, ComponentFactoryResolver, Injectable, Injector } from '@angular/core';\nimport { NgElement, WithProperties } from '@angular/elements';\nimport { PopupComponent } from './popup.component';\n\n@Injectable()\nexport class PopupService {\n  constructor(\n    private injector: Injector,\n    private applicationRef: ApplicationRef,\n    private componentFactoryResolver: ComponentFactoryResolver) {}\n\n  // Previous dynamic-loading method required you to set up infrastructure\n  // before adding the popup to the DOM.\n  showAsComponent({message}: {message: string}) {\n    // Create element\n    const popup = document.createElement('popup-component');\n\n    // Create the component and wire it up with the element\n    const factory = this.componentFactoryResolver.resolveComponentFactory(PopupComponent);\n    const popupComponentRef = factory.create(this.injector, [], popup);\n\n    // Attach to the view so that the change detector knows to run\n    this.applicationRef.attachView(popupComponentRef.hostView);\n\n    // Listen to the close event\n    popupComponentRef.instance.closed.subscribe(() => {\n      document.body.removeChild(popup);\n      this.applicationRef.detachView(popupComponentRef.hostView);\n    });\n\n    // Set the message\n    popupComponentRef.instance.message = message;\n\n    // Add to the DOM\n    document.body.appendChild(popup);\n  }\n\n  // This uses the new custom-element method to add the popup to the DOM.\n  showAsElement({message}: {message: string}) {\n    // Create element\n    const popupEl: NgElement & WithProperties<PopupComponent> = document.createElement('popup-element') as any;\n\n    // Listen to the close event\n    popupEl.addEventListener('closed', () => document.body.removeChild(popupEl));\n\n    // Set the message\n    popupEl.message = message;\n\n    // Add to the DOM\n    document.body.appendChild(popupEl);\n  }\n}"
      },
      {
        "language": "typescript",
        "code": "// app.component.ts\nimport { Component, Injector } from '@angular/core';\nimport { createCustomElement } from '@angular/elements';\nimport { PopupService } from './popup.service';\nimport { PopupComponent } from './popup.component';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <input #input value=\"Message\">\n    <button type=\"button\" (click)=\"popup.showAsComponent({message: input.value})\">Show as component</button>\n    <button type=\"button\" (click)=\"popup.showAsElement({message: input.value})\">Show as element</button>\n  `,\n})\nexport class AppComponent {\n  constructor(injector: Injector, public popup: PopupService) {\n    // Convert `PopupComponent` to a custom element.\n    const PopupElement = createCustomElement(PopupComponent, {injector});\n    // Register the custom element with the browser.\n    customElements.define('popup-element', PopupElement);\n  }\n}"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Testing Component with Host Setup - TypeScript",
    "codeDescription": "Configuration code for setting up a test host component to test DashboardHeroComponent in a more realistic scenario with proper data binding.",
    "codeLanguage": "typescript",
    "codeTokens": 58,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_29",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "this.testHost = TestBed.createComponent(TestHostComponent);\nthis.heroEl = fixture.nativeElement.querySelector('.hero');\nthis.fixture.detectChanges();"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Angular Component Before Signal Query Migration",
    "codeDescription": "Example of a component using traditional @ContentChild decorator for querying elements",
    "codeLanguage": "typescript",
    "codeTokens": 101,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/migrations/signal-queries.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Signal Queries Migration Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Component, ContentChild} from '@angular/core';\n\n@Component({\n  template: `Has ref: {{someRef ? 'Yes' : 'No'}}`\n})\nexport class MyComponent {\n  @ContentChild('someRef') ref: ElementRef|undefined = undefined;\n\n  someMethod() {\n    if (this.ref) {\n      this.ref.nativeElement;\n    }\n  }\n}"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Using NgFor to Render Lists in Angular HTML Template",
    "codeDescription": "This snippet demonstrates how to use the NgFor directive to iterate over an array and render list items in an Angular template.",
    "codeLanguage": "html",
    "codeTokens": 51,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_14",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div *ngFor=\"let item of items\">{{ item }}</div>"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "ESM Declaration in package.json",
    "codeDescription": "Demonstrates how to declare a package as using EcmaScript Modules in package.json.",
    "codeLanguage": "javascript",
    "codeTokens": 40,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/libraries/angular-package-format.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Package Format (APF) Specification",
    "codeList": [
      {
        "language": "javascript",
        "code": "{\n  \"type\": \"module\"\n}"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Defining a BaseButton Component with ng-content in Angular",
    "codeDescription": "This snippet defines a BaseButton component that uses ng-content to accept and render any markup from its parent component. It demonstrates the basic structure of a component using content projection.",
    "codeLanguage": "angular-ts",
    "codeTokens": 94,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/ng-content.md#2025-04-08_snippet_0",
    "pageTitle": "Using ng-content for Content Projection in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "// ./base-button/base-button.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'button[baseButton]',\n  template: `\n      <ng-content />\n  `,\n})\nexport class BaseButton {}"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Creating FormGroup Instance in ProfileEditor Component",
    "codeDescription": "This code creates a FormGroup instance called profileForm with two FormControl instances for firstName and lastName.",
    "codeLanguage": "typescript",
    "codeTokens": 49,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_9",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "profileForm = new FormGroup({\n  firstName: new FormControl(''),\n  lastName: new FormControl(''),\n});"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Creating and Reading a Writable Signal in TypeScript",
    "codeDescription": "This snippet demonstrates how to create a writable signal using the 'signal' function and read its value by calling the getter function.",
    "codeLanguage": "typescript",
    "codeTokens": 64,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/overview.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Signals Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const count = signal(0);\n\n// Signals are getter functions - calling them reads their value.\nconsole.log('The count is: ' + count());"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Accessing Route Parameters in Angular Component",
    "codeDescription": "This code shows how to access route parameters in an Angular component using ActivatedRoute and RxJS operators.",
    "codeLanguage": "typescript",
    "codeTokens": 92,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/common-router-tasks.md#2025-04-08_snippet_22",
    "pageTitle": "Common Routing Tasks in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "heroes$: Observable<Hero[]>;\nselectedId: number;\nheroes = HEROES;\n\nngOnInit() {\n  this.heroes$ = this.route.paramMap.pipe(\n    switchMap(params => {\n      this.selectedId = Number(params.get('id'));\n      return this.service.getHeroes();\n    })\n  );\n}"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Defining Inline Styles in Angular Component",
    "codeDescription": "Demonstrates how to include CSS styles directly within the @Component decorator using the 'styles' property. This example applies a border-radius to an img element.",
    "codeLanguage": "angular-ts",
    "codeTokens": 90,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/styling.md#2025-04-08_snippet_0",
    "pageTitle": "Styling Angular Components",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'profile-photo',\n  template: `<img src=\"profile-photo.jpg\" alt=\"Your profile photo\">`,\n  styles: ` img { border-radius: 50%; } `,\n})\nexport class ProfilePhoto { }"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Injecting a Service in Angular Component",
    "codeDescription": "This snippet demonstrates how to inject a service into an Angular component using the inject() function. It initializes a class property with the injected service.",
    "codeLanguage": "typescript",
    "codeTokens": 64,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/20-inject-based-di/README.md#2025-04-08_snippet_0",
    "pageTitle": "Inject-based Dependency Injection in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({...})\nclass PetCareDashboardComponent {\n    petRosterService = inject(PetRosterService);\n}"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Configuring Optimization Options in Angular.json",
    "codeDescription": "Example of configuring optimization settings for scripts, styles, and fonts in an Angular application. This configuration enables script optimization, customizes CSS minification and critical CSS inlining, and enables font optimization.",
    "codeLanguage": "json",
    "codeTokens": 142,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/configs/workspace-config.md#2025-04-08_snippet_8",
    "pageTitle": "Angular Workspace Configuration Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"projects\": {\n    \"my-app\": {\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:application\",\n          \"options\": {\n            \"optimization\": {\n              \"scripts\": true,\n              \"styles\": {\n                \"minify\": true,\n                \"inlineCritical\": true\n              },\n              \"fonts\": true\n            }\n          }\n        }\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.961
  },
  {
    "codeTitle": "Parent Component Setup for Two-way Binding in Angular",
    "codeDescription": "Shows the parent component configuration for two-way binding with a child counter component. Demonstrates how to bind the initial count and handle updates.",
    "codeLanguage": "angular-ts",
    "codeTokens": 131,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/two-way-binding.md#2025-04-08_snippet_1",
    "pageTitle": "Two-way Data Binding in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "import { Component } from '@angular/core';\nimport { CounterComponent } from './counter/counter.component';\n\n@Component({\n  selector: 'app-root',\n  imports: [CounterComponent],\n  template: `\n    <main>\n      <h1>Counter: {{ initialCount }}</h1>\n      <app-counter [(count)]=\"initialCount\"></app-counter>\n    </main>\n  `,\n})\nexport class AppComponent {\n  initialCount = 18;\n}"
      }
    ],
    "relevance": 0.961
  },
  {
    "codeTitle": "Binding CSS Classes in Angular Templates",
    "codeDescription": "This complex example demonstrates various ways to bind CSS classes in Angular templates, including conditional class binding, binding to the 'class' property with different value types, and combining static and dynamic classes.",
    "codeLanguage": "angular-ts",
    "codeTokens": 82,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/binding.md#2025-04-08_snippet_5",
    "pageTitle": "Binding Dynamic Text, Properties, and Attributes in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<!-- When `isExpanded` is truthy, add the `expanded` CSS class. -->\n<ul [class.expanded]=\"isExpanded\">"
      },
      {
        "language": "angular-ts",
        "code": "@Component({\n  template: `\n    <ul [class]=\"listClasses\"> ... </ul>\n    <section [class]=\"sectionClasses\"> ... </section>\n    <button [class]=\"buttonClasses\"> ... </button>\n  `,\n  ...\n})\nexport class UserProfile {\n  listClasses = 'full-width outlined';\n  sectionClasses = ['expandable', 'elevated'];\n  buttonClasses = {\n    highlighted: true,\n    embiggened: false,\n  };\n}"
      },
      {
        "language": "angular-html",
        "code": "<ul class=\"full-width outlined\"> ... </ul>\n<section class=\"expandable elevated\"> ... </section>\n<button class=\"highlighted\"> ... </button>"
      },
      {
        "language": "angular-ts",
        "code": "@Component({\n  template: `<ul class=\"list\" [class]=\"listType\" [class.expanded]=\"isExpanded\"> ...`,\n  ...\n})\nexport class Listbox {\n  listType = 'box';\n  isExpanded = true;\n}"
      },
      {
        "language": "angular-html",
        "code": "<ul class=\"list box expanded\">"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Creating Singleton Services in Angular",
    "codeDescription": "Shows how to create and use singleton services in Angular for sharing data and functionality across a feature area or an entire app. The example demonstrates a hero service that manages a collection of heroes.",
    "codeLanguage": "TypeScript",
    "codeTokens": 105,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/best-practices/style-guide.md#2025-04-08_snippet_34",
    "pageTitle": "Angular Coding Style Guide",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n  private heroes: Hero[] = [];\n\n  constructor(private backend: BackendService) {}\n\n  getHeroes() {\n    this.heroes = this.backend.getAll(Hero);\n    return this.heroes;\n  }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Updating Form Model with patchValue in Angular TypeScript",
    "codeDescription": "This snippet demonstrates how to use the patchValue() method to update specific parts of the form model in an Angular component. It updates the first name and street address for the user profile.",
    "codeLanguage": "typescript",
    "codeTokens": 82,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_17",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "updateProfile() {\n  this.profileForm.patchValue({\n    firstName: 'Nancy',\n    address: {\n      street: '123 Drew Street'\n    }\n  });\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Creating a Signal with Custom Equality Function in TypeScript",
    "codeDescription": "This snippet shows how to create a signal with a custom equality function for value comparison.",
    "codeLanguage": "typescript",
    "codeTokens": 85,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/overview.md#2025-04-08_snippet_9",
    "pageTitle": "Angular Signals Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import _ from 'lodash';\n\nconst data = signal(['test'], {equal: _.isEqual});\n\n// Even though this is a different array instance, the deep equality\n// function will consider the values to be equal, and the signal won't\n// trigger any updates.\ndata.set(['test']);"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Forwarding Injected Dependencies in Angular Component Inheritance",
    "codeDescription": "Illustrates how to properly pass injected dependencies to the parent class using the super keyword. Child classes must explicitly forward dependencies to the parent class.",
    "codeLanguage": "typescript",
    "codeTokens": 88,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inheritance.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Component Inheritance Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({ ... })\nexport class ListboxBase {\n  constructor(private element: ElementRef) { }\n}\n\n@Component({ ... })\nexport class CustomListbox extends ListboxBase {\n  constructor(element: ElementRef) {\n    super(element);\n  }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing Basic Angular Pipe Transformation",
    "codeDescription": "Demonstrates how to create a basic custom pipe transformation in Angular that takes a string value and returns a transformed string. Uses the @Pipe decorator and implements PipeTransform interface.",
    "codeLanguage": "angular-ts",
    "codeTokens": 99,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/pipes.md#2025-04-08_snippet_5",
    "pageTitle": "Angular Pipes Documentation",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'myCustomTransformation',\n})\nexport class MyCustomTransformationPipe implements PipeTransform {\n  transform(value: string): string {\n    return `My custom transformation of ${value}.`\n  }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Typing Generic Directive Context in Angular with Template Context Guards",
    "codeDescription": "This snippet demonstrates how to properly type a directive's context for templates when using generics. It implements the ngTemplateContextGuard static method to correctly infer and propagate the generic type from the directive to the template context.",
    "codeLanguage": "typescript",
    "codeTokens": 201,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/structural-directives.md#2025-04-08_snippet_11",
    "pageTitle": "Angular Structural Directives Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "// Declare an interface for the template context:\nexport interface SelectTemplateContext<T> {\n  $implicit: T;\n}\n\n@Directive(...)\nexport class SelectDirective<T> {\n  // The directive's generic type `T` will be inferred from the `DataSource` type\n  // passed to the input.\n  @Input({required: true}) selectFrom!: DataSource<T>;\n\n  // Narrow the type of the context using the generic type of the directive.\n  static ngTemplateContextGuard<T>(dir: SelectDirective<T>, ctx: any): ctx is SelectTemplateContext<T> {\n    // As before the guard body is not used at runtime, and included only to avoid\n    // TypeScript errors.\n    return true;\n  }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Resource Reload Implementation in Angular",
    "codeDescription": "Demonstrates how to programmatically trigger a resource's loader using the reload method.",
    "codeLanguage": "typescript",
    "codeTokens": 71,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/resource.md#2025-04-08_snippet_2",
    "pageTitle": "Using Async Resources in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "const userId: Signal<string> = getUserId();\n\nconst userResource = resource({\n  request: () => ({id: userId()}),\n  loader: ({request}) => fetchUser(request),\n});\n\n// ...\n\nuserResource.reload();"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Configuring a Factory Provider in Angular",
    "codeDescription": "This snippet demonstrates how to configure a factory provider for HeroService using useFactory and deps in Angular.",
    "codeLanguage": "typescript",
    "codeTokens": 61,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection-providers.md#2025-04-08_snippet_8",
    "pageTitle": "Configuring Dependency Providers in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "export const heroServiceProvider = {\n  provide: HeroService,\n  useFactory: heroServiceFactory,\n  deps: [Logger, UserService]\n};"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Using a Component Harness in a Unit Test",
    "codeDescription": "Example of a test that uses a harness for MyButtonComponent to verify the button's text. The test loads the harness using a loader and then calls the getText() method to check if the button displays the expected text.",
    "codeLanguage": "typescript",
    "codeTokens": 107,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/component-harnesses-overview.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Component Harnesses Overview",
    "codeList": [
      {
        "language": "typescript",
        "code": "// Example of test with a harness for a component called MyButtonComponent\nit('should load button with exact text', async () => {\n  const button = await loader.getHarness(MyButtonComponentHarness);\n  expect(await button.getText()).toBe('Confirm');\n});"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Child Counter Component with Two-way Binding in Angular",
    "codeDescription": "Implements a counter component using the model property for two-way binding. Shows how to update the counter value and propagate changes to the parent.",
    "codeLanguage": "angular-ts",
    "codeTokens": 140,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/two-way-binding.md#2025-04-08_snippet_2",
    "pageTitle": "Two-way Data Binding in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "import { Component, model } from '@angular/core';\n\n@Component({\n  selector: 'app-counter',\n  template: `\n    <button (click)=\"updateCount(-1)\">-</button>\n    <span>{{ count() }}</span>\n    <button (click)=\"updateCount(+1)\">+</button>\n  `,\n})\nexport class CounterComponent {\n  count = model<number>(0);\n\n  updateCount(amount: number): void {\n    this.count.update(currentCount => currentCount + amount);\n  }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Generating Angular Application and Library in Workspace",
    "codeDescription": "Commands to generate a new application and library within an existing Angular workspace. These commands should be run from the workspace root directory.",
    "codeLanguage": "shell",
    "codeTokens": 53,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/configs/file-structure.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Workspace and Project File Structure",
    "codeList": [
      {
        "language": "shell",
        "code": "cd my-workspace\nng generate application my-app\nng generate library my-lib"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing Mouse Event Handlers",
    "codeDescription": "Adding mouse enter and leave event handlers using @HostListener decorator to the highlight directive.",
    "codeLanguage": "typescript",
    "codeTokens": 80,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/attribute-directives.md#2025-04-08_snippet_6",
    "pageTitle": "Building and Using Attribute Directives in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@HostListener('mouseenter') onMouseEnter() {\n  this.highlight('yellow');\n}\n\n@HostListener('mouseleave') onMouseLeave() {\n  this.highlight('');\n}\n\nprivate highlight(color: string) {\n  this.el.nativeElement.style.backgroundColor = color;\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Using Variable Assignment in Angular @if Blocks",
    "codeDescription": "Demonstrates saving the result of a conditional expression into a variable with the 'as' keyword for reuse inside the block. This helps with longer expressions to improve readability.",
    "codeLanguage": "angular-html",
    "codeTokens": 60,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/control-flow.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Control Flow Features",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@if (user.profile.settings.startDate; as startDate) {\n  {{ startDate }}\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Marking a Class as a Pipe in Angular",
    "codeDescription": "This snippet demonstrates how to define a basic pipe class using the @Pipe decorator. The example creates a simple 'greet' pipe with proper naming conventions following Angular style guidelines.",
    "codeLanguage": "typescript",
    "codeTokens": 72,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/pipes/transform-data.md#2025-04-08_snippet_0",
    "pageTitle": "Creating Custom Pipes in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Pipe } from '@angular/core';\n\n@Pipe({\n  name: 'greet',\n})\nexport class GreetPipe {}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Setting a Writable Signal's Value in TypeScript",
    "codeDescription": "This snippet shows how to directly set the value of a writable signal using the '.set()' method.",
    "codeLanguage": "typescript",
    "codeTokens": 34,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/overview.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Signals Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "count.set(3);"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Adding Redirect Route in Angular TypeScript",
    "codeDescription": "This snippet shows how to add a redirect route to the '/heroes-list' path when the application root is accessed. It uses an empty string path with 'redirectTo' and 'pathMatch' properties.",
    "codeLanguage": "typescript",
    "codeTokens": 71,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/router-tutorial.md#2025-04-08_snippet_10",
    "pageTitle": "Implementing Angular Routes in a Single-Page Application",
    "codeList": [
      {
        "language": "typescript",
        "code": "{path: '', redirectTo: '/heroes-list', pathMatch: 'full'},"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Consuming HTTP Service with AsyncPipe in Angular Component",
    "codeDescription": "Example of a component that consumes the UserService to fetch user data. It demonstrates using AsyncPipe with conditional template rendering to handle the Observable response, showing user information only after data is loaded.",
    "codeLanguage": "typescript",
    "codeTokens": 162,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/making-requests.md#2025-04-08_snippet_10",
    "pageTitle": "Making HTTP Requests with Angular HttpClient",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { AsyncPipe } from '@angular/common';\n@Component({\n  imports: [AsyncPipe],\n  template: `\n    @if (user$ | async; as user) {\n      <p>Name: {{ user.name }}</p>\n      <p>Biography: {{ user.biography }}</p>\n    }\n  `,\n})\nexport class UserProfileComponent {\n  @Input() userId!: string;\n  user$!: Observable<User>;\n\n  private userService = inject(UserService);\n\n  constructor(): void {\n    this.user$ = this.userService.getUser(this.userId);\n  }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Applying Modifiers to Angular Input Properties in TypeScript",
    "codeDescription": "This snippet demonstrates how to apply various modifiers to Angular input properties. It includes examples of readonly, protected, and custom decorator usage with the input() function.",
    "codeLanguage": "TypeScript",
    "codeTokens": 128,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/schematics/migrations/signal-migration/test/golden_best_effort.txt#2025-04-08_snippet_15",
    "pageTitle": "Angular Input Signal Migration Tests",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "import {Component, input} from '@angular/core';\n\nfunction CustomDecorator() {\n  return (a: any, b: any) => {};\n}\n\n@Component({template: ''})\nclass ModifierScenarios {\n  readonly alreadyReadonly = input(true);\n  protected readonly ImProtected = input(true);\n  protected readonly ImProtectedAndReadonly = input(true);\n  @CustomDecorator()\nprotected readonly usingCustomDecorator = input(true);\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Importing and Using Angular's input() Function in TypeScript",
    "codeDescription": "This snippet demonstrates how to import and use Angular's input() function in a component. It shows the basic syntax for creating an input property with a boolean default value.",
    "codeLanguage": "TypeScript",
    "codeTokens": 75,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/schematics/migrations/signal-migration/test/golden_best_effort.txt#2025-04-08_snippet_7",
    "pageTitle": "Angular Input Signal Migration Tests",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "import {\n  Directive,\n  input\n} from '@angular/core';\n\n@Directive()\nexport class TestCmp {\n  readonly disabled = input(false);\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Enabling Hydration in Angular Application with bootstrapApplication",
    "codeDescription": "This snippet demonstrates how to enable hydration in an Angular application using bootstrapApplication. It imports provideClientHydration and adds it to the providers list.",
    "codeLanguage": "typescript",
    "codeTokens": 75,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/hydration.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Hydration Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {\n  bootstrapApplication,\n  provideClientHydration,\n} from '@angular/platform-browser';\n...\n\nbootstrapApplication(AppComponent, {\n  providers: [provideClientHydration()]\n});"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Displaying Form Status in Angular HTML Template",
    "codeDescription": "This HTML snippet shows how to display the current status of the profileForm using interpolation in an Angular template.",
    "codeLanguage": "html",
    "codeTokens": 44,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_25",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<p>Form Status: {{ profileForm.status }}</p>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Child Counter Component with Two-way Binding in Angular",
    "codeDescription": "Implements a counter component using the model property for two-way binding. Shows how to update the counter value and propagate changes to the parent.",
    "codeLanguage": "angular-ts",
    "codeTokens": 140,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/two-way-binding.md#2025-04-08_snippet_2",
    "pageTitle": "Two-way Data Binding in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "import { Component, model } from '@angular/core';\n\n@Component({\n  selector: 'app-counter',\n  template: `\n    <button (click)=\"updateCount(-1)\">-</button>\n    <span>{{ count() }}</span>\n    <button (click)=\"updateCount(+1)\">+</button>\n  `,\n})\nexport class CounterComponent {\n  count = model<number>(0);\n\n  updateCount(amount: number): void {\n    this.count.update(currentCount => currentCount + amount);\n  }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Correct Attribute Binding in Angular HTML",
    "codeDescription": "Proper way to bind width with pixel units by including the unit in the value string rather than as a suffix.",
    "codeLanguage": "html",
    "codeTokens": 46,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/extended-diagnostics/NG8106.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Template Suffix Bindings Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<img [attr.width]=\"'5px'\">"
      }
    ],
    "relevance": 0.959
  },
  {
    "codeTitle": "Basic Component Inheritance in Angular",
    "codeDescription": "Demonstrates how a component can extend a base class to inherit properties. The CustomListbox component inherits the value property from ListboxBase.",
    "codeLanguage": "typescript",
    "codeTokens": 78,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inheritance.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Component Inheritance Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class ListboxBase {\n  value: string;\n}\n\n@Component({ ... })\nexport class CustomListbox extends ListboxBase {\n  // CustomListbox inherits the `value` property.\n}"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Incorrect Usage of attr. Prefix in Angular Template",
    "codeDescription": "This snippet demonstrates the incorrect usage of the attr. prefix, where it's treated as a regular attribute instead of a binding.",
    "codeLanguage": "html",
    "codeTokens": 48,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/extended-diagnostics/NG8104.md#2025-04-08_snippet_0",
    "pageTitle": "Text Attribute Not Binding in Angular Templates",
    "codeList": [
      {
        "language": "html",
        "code": "<div attr.id=\"my-id\"></div>"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Template with Color Selection Controls",
    "codeDescription": "Enhanced template with radio buttons for selecting the highlight color to be used by the directive.",
    "codeLanguage": "html",
    "codeTokens": 136,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/attribute-directives.md#2025-04-08_snippet_12",
    "pageTitle": "Building and Using Attribute Directives in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<h1>My First Attribute Directive</h1>\n\n<h2>Pick a highlight color</h2>\n<div>\n  <input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\">Green\n  <input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\">Yellow\n  <input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\">Cyan\n</div>\n<p [appHighlight]=\"color\">Highlight me!</p>"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Using DestroyRef in Angular TypeScript Component",
    "codeDescription": "Shows how to use DestroyRef as an alternative to ngOnDestroy for handling component destruction. This approach allows registering a callback to be invoked when the component is destroyed.",
    "codeLanguage": "typescript",
    "codeTokens": 81,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/lifecycle.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Component Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  /* ... */\n})\nexport class UserProfile {\n  constructor() {\n    inject(DestroyRef).onDestroy(() => {\n      console.log('UserProfile destruction');\n    });\n  }\n}"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Binding to Aliased @Output Events in Angular Templates",
    "codeDescription": "Example of binding to an event that uses an alias with the @Output decorator. The template uses the alias name instead of the property name.",
    "codeLanguage": "angular-html",
    "codeTokens": 50,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/outputs.md#2025-04-08_snippet_11",
    "pageTitle": "Angular Custom Events with Outputs",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<custom-slider (valueChanged)=\"saveVolume()\" />"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Disabling the interpolatedSignalNotInvoked Diagnostic in tsconfig.json",
    "codeDescription": "This configuration example shows how to disable the 'interpolatedSignalNotInvoked' diagnostic in the project's tsconfig.json file when it cannot be avoided.",
    "codeLanguage": "json",
    "codeTokens": 86,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/extended-diagnostics/NG8109.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Signals Usage in Template Interpolations",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"angularCompilerOptions\": {\n    \"extendedDiagnostics\": {\n      \"checks\": {\n        \"interpolatedSignalNotInvoked\": \"suppress\"\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Referencing Directives through exportAs in Angular Templates",
    "codeDescription": "Example showing how to reference an Angular directive instance in a template using the exportAs name. This allows direct access to directive properties and methods.",
    "codeLanguage": "angular-html",
    "codeTokens": 71,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/variables.md#2025-04-08_snippet_8",
    "pageTitle": "Using Variables in Angular Templates",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<!-- The `firstZone` variable refers to the `DropZone` directive instance. -->\n<section dropZone #firstZone=\"dropZone\"> ... </section>"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Bootstrapping an Angular Application",
    "codeDescription": "Shows how to bootstrap an Angular application using the bootstrapApplication method, which creates a child injector of the platform injector configured by an ApplicationConfig instance.",
    "codeLanguage": "javascript",
    "codeTokens": 49,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/hierarchical-dependency-injection.md#2025-04-08_snippet_1",
    "pageTitle": "Hierarchical Injectors in Angular",
    "codeList": [
      {
        "language": "javascript",
        "code": "bootstrapApplication(AppComponent, appConfig);"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Implementing @loading and @placeholder with @defer in Angular HTML",
    "codeDescription": "Demonstrates how to use both @loading and @placeholder blocks with a @defer block, showing loading state while content is being fetched.",
    "codeLanguage": "angular-html",
    "codeTokens": 79,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/defer.md#2025-04-08_snippet_2",
    "pageTitle": "Deferred Loading with @defer in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@defer {\n  <large-component />\n} @loading {\n  <img alt=\"loading...\" src=\"loading.gif\" />\n} @placeholder {\n  <p>Placeholder content</p>\n}"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Creating a FormRecord with FormBuilder",
    "codeDescription": "Shows how to create a FormRecord using the FormBuilder helper class for more concise syntax.",
    "codeLanguage": "typescript",
    "codeTokens": 44,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/typed-forms.md#2025-04-08_snippet_12",
    "pageTitle": "Angular Typed Forms Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const addresses = fb.record({'Andrew': '2340 Folsom St'});"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Passing Format Parameter to DatePipe in Angular Template",
    "codeDescription": "Shows how to pass a format parameter to the date pipe using colon syntax. This example formats the date to display only the year by using the 'yyyy' format pattern.",
    "codeLanguage": "angular-html",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/pipes/template.md#2025-04-08_snippet_2",
    "pageTitle": "Using Pipes in Angular Templates",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<p>The hero's birthday is in {{ birthday | date:'yyyy' }}</p>"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Passing Format Parameter to DatePipe in Angular Template",
    "codeDescription": "Shows how to pass a format parameter to the date pipe using colon syntax. This example formats the date to display only the year by using the 'yyyy' format pattern.",
    "codeLanguage": "angular-html",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/pipes/template.md#2025-04-08_snippet_2",
    "pageTitle": "Using Pipes in Angular Templates",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<p>The hero's birthday is in {{ birthday | date:'yyyy' }}</p>"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Adding Default Color Property",
    "codeDescription": "Adding a second Input property to the directive for specifying a default color to use when no primary color is set.",
    "codeLanguage": "typescript",
    "codeTokens": 43,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/attribute-directives.md#2025-04-08_snippet_15",
    "pageTitle": "Building and Using Attribute Directives in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Input() defaultColor = '';"
      }
    ],
    "relevance": 0.957
  },
  {
    "codeTitle": "Correct Function Invocation in Angular Event Binding",
    "codeDescription": "This snippet shows the correct way to use a function in an Angular event binding. The function is properly invoked, ensuring it will execute when the event is triggered.",
    "codeLanguage": "typescript",
    "codeTokens": 88,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/extended-diagnostics/NG8111.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Event Binding Function Invocation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Component} from '@angular/core';\n\n@Component({\n  template: `<button (click)=\"onClick()\">Click me</button>`,\n})\nclass MyComponent {\n  onClick() {\n    console.log('clicked');\n  }\n}"
      }
    ],
    "relevance": 0.957
  },
  {
    "codeTitle": "Using @HostBinding in Angular Component",
    "codeDescription": "This TypeScript snippet shows how to use the @HostBinding decorator to bind host properties and attributes to component properties and methods. This approach is less preferred than using the 'host' property.",
    "codeLanguage": "typescript",
    "codeTokens": 112,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/host-elements.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Component Host Elements Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  /* ... */\n})\nexport class CustomSlider {\n  @HostBinding('attr.aria-valuenow')\n  value: number = 0;\n\n  @HostBinding('tabIndex')\n  getTabIndex() {\n    return this.disabled ? -1 : 0;\n  }\n\n  /* ... */\n}"
      }
    ],
    "relevance": 0.956
  },
  {
    "codeTitle": "Lazy Loaded Route Configuration Example",
    "codeDescription": "Example showing the route configuration after migration to lazy loading, demonstrating the use of loadComponent",
    "codeLanguage": "typescript",
    "codeTokens": 91,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/migrations/route-lazy-loading.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Route Lazy Loading Migration Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "// app.module.ts\n@NgModule({\n  imports: [\n    RouterModule.forRoot([\n      {\n        path: 'home',\n        // ↓ HomeComponent is now lazy loaded\n        loadComponent: () => import('./home/home.component').then(m => m.HomeComponent),\n      },\n    ]),\n  ],\n})\nexport class AppModule {}"
      }
    ],
    "relevance": 0.956
  },
  {
    "codeTitle": "Implementing View Child Query in Angular Component",
    "codeDescription": "Demonstrates how to use the viewChild function to query for a single child component in the component's view and use the result in a computed property.",
    "codeLanguage": "angular-ts",
    "codeTokens": 126,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/queries.md#2025-04-08_snippet_0",
    "pageTitle": "Referencing Component Children with Queries in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'custom-card-header',\n  /*...*/\n})\nexport class CustomCardHeader {\n  text: string;\n}\n\n@Component({\n  selector: 'custom-card',\n  template: '<custom-card-header>Visit sunny California!</custom-card-header>',\n})\nexport class CustomCard {\n  header = viewChild(CustomCardHeader);\n  headerText = computed(() => this.header()?.text);\n}"
      }
    ],
    "relevance": 0.956
  },
  {
    "codeTitle": "Enabling Event Replay in Angular Application",
    "codeDescription": "This snippet demonstrates how to enable the Event Replay feature in an Angular application. It imports provideClientHydration and withEventReplay, then adds them to the providers list in bootstrapApplication.",
    "codeLanguage": "typescript",
    "codeTokens": 88,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/hydration.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Hydration Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {provideClientHydration, withEventReplay} from '@angular/platform-browser';\n\nbootstrapApplication(App, {\n  providers: [\n    provideClientHydration(withEventReplay())\n  ]\n});"
      }
    ],
    "relevance": 0.956
  },
  {
    "codeTitle": "Implementing Angular Lifecycle Interface",
    "codeDescription": "Shows how to implement an Angular lifecycle interface (OnInit) in a component to ensure correct method implementation.",
    "codeLanguage": "typescript",
    "codeTokens": 56,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/lifecycle.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Component Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  /* ... */\n})\nexport class UserProfile implements OnInit {\n  ngOnInit() {\n    /* ... */\n  }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating Basic Logging Service in TypeScript",
    "codeDescription": "Implements a simple logging service class with methods for logging, error, and warning messages to the browser console.",
    "codeLanguage": "typescript",
    "codeTokens": 72,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/creating-injectable-service.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Injectable Services Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class Logger {\n  log(msg: unknown) { console.log(msg); }\n  error(msg: unknown) { console.error(msg); }\n  warn(msg: unknown) { console.warn(msg); }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using ng-container with NgIf in Angular HTML Template",
    "codeDescription": "This snippet shows how to use ng-container with NgIf to conditionally render content without introducing extra DOM elements.",
    "codeLanguage": "html",
    "codeTokens": 79,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_19",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<p>\n  I turned the corner\n  <ng-container *ngIf=\"hero\">\n    and saw {{ hero.name }}. I waved\n  </ng-container>\n  and continued on my way.\n</p>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating Nested FormGroup in ProfileEditor Component",
    "codeDescription": "This TypeScript code creates a nested FormGroup for address information within the main profileForm FormGroup.",
    "codeLanguage": "typescript",
    "codeTokens": 83,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_15",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "profileForm = new FormGroup({\n  firstName: new FormControl(''),\n  lastName: new FormControl(''),\n  address: new FormGroup({\n    street: new FormControl(''),\n    city: new FormControl(''),\n    state: new FormControl(''),\n    zip: new FormControl('')\n  })\n});"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Testing MasterService with TestBed and Spy",
    "codeDescription": "Test case showing how to use a spy to verify both the return value and that the spy method was called correctly.",
    "codeLanguage": "typescript",
    "codeTokens": 142,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/services.md#2025-04-08_snippet_7",
    "pageTitle": "Testing Angular Services: Strategies and Best Practices",
    "codeList": [
      {
        "language": "typescript",
        "code": "it('#getValue should return stubbed value from a spy', () => {\n  const stubValue = 'stub value';\n  valueServiceSpy.getValue.and.returnValue(stubValue);\n\n  expect(masterService.getValue())\n    .withContext('service returned stub value')\n    .toBe(stubValue);\n  expect(valueServiceSpy.getValue.calls.count())\n    .withContext('spy method was called once')\n    .toBe(1);\n  expect(valueServiceSpy.getValue.calls.mostRecent().returnValue)\n    .toBe(stubValue);\n});"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Binding Host Directive Inputs and Outputs in Angular HTML Template",
    "codeDescription": "Demonstrates how to bind inputs and outputs from host directives in an Angular HTML template after they have been explicitly included in the component's API.",
    "codeLanguage": "angular-html",
    "codeTokens": 56,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/directive-composition-api.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Directive Composition API Documentation",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<admin-menu menuId=\"top-menu\" (menuClosed)=\"logMenuClosed()\">"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Constructor-Based Service Injection",
    "codeDescription": "Demonstrates how to inject a service using constructor dependency injection in a component.",
    "codeLanguage": "typescript",
    "codeTokens": 33,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/creating-injectable-service.md#2025-04-08_snippet_6",
    "pageTitle": "Angular Injectable Services Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "constructor(private heroService: HeroService)"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Associating FormGroup Model with View in ProfileEditor Template",
    "codeDescription": "This HTML template binds the profileForm FormGroup to the form element and associates individual form controls with input elements.",
    "codeLanguage": "html",
    "codeTokens": 107,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_10",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<form [formGroup]=\"profileForm\">\n  <label for=\"first-name\">First Name: </label>\n  <input id=\"first-name\" type=\"text\" formControlName=\"firstName\">\n\n  <label for=\"last-name\">Last Name: </label>\n  <input id=\"last-name\" type=\"text\" formControlName=\"lastName\">\n</form>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Input Declaration in @Component Decorator",
    "codeDescription": "Shows how to declare inputs in the @Component decorator, useful for inherited properties.",
    "codeLanguage": "typescript",
    "codeTokens": 48,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_17",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  ...,\n  inputs: ['disabled'],\n})\nexport class CustomSlider extends BaseSlider { }"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing Empty State Handling with @for and @empty",
    "codeDescription": "Shows how to provide a fallback content with the @empty block when there are no items in the collection being iterated over by the @for block.",
    "codeLanguage": "angular-html",
    "codeTokens": 83,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/control-flow.md#2025-04-08_snippet_5",
    "pageTitle": "Angular Control Flow Features",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@for (item of items; track item.name) {\n  <li> {{ item.name }}</li>\n} @empty {\n  <li aria-hidden=\"true\"> There are no items. </li>\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Custom Card Container Structure in Markdown",
    "codeDescription": "Markdown structure for displaying downloadable Angular logo assets and brand guidelines using custom docs-card-container and docs-card components.",
    "codeLanguage": "markdown",
    "codeTokens": 350,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/press-kit.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Brand and Press Kit Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "<docs-card-container>\n  <docs-card title=\"Angular logos\" href=\"https://drive.google.com/drive/folders/1IgcAwLDVZUz8ycnFa7T4_H6B4V4LhYUQ?usp=sharing\" link=\"Download from Google Drive\">\n    ![Angular wordmark gradient logo](assets/images/press-kit/angular_wordmark_gradient.png \"Angular wordmark gradient logo\")\n    ![Angular wordmark white logo](assets/images/press-kit/angular_wordmark_white.png \"Angular wordmark white logo\")\n    ![Angular wordmark black logo](assets/images/press-kit/angular_wordmark_black.png \"Angular wordmark black logo\")\n    Black and white are the default color variations and should be used in most circumstances. A gradient version of the icon and lockup is available in both static and animated formats and can be used in cases where a color icon is required.\n  </docs-card>\n  <docs-card title=\"Brand guidelines\" href=\"https://drive.google.com/drive/folders/1gD5-kamfribnib6TH4-aqVZxjYaDZlCg?usp=drive_link\" link=\"Download from Google Drive\">\n    ![Angular animated gradient logo](assets/images/press-kit/angular_icon_gradient.gif \"Angular animated gradient logo\")\n    Our brand guidelines folders contain the design files, guidance and community examples for how the brand can be adapted.\n    Read more about adapting the logo in the section below.\n  </docs-card>\n</docs-card-container>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing Hero List Page Animations with Query and Stagger in Angular",
    "codeDescription": "Demonstrates how to animate a list of heroes entering the page using query() to find elements and stagger() to create sequential delayed animations. The animation includes styling for transparency and transform properties with custom timing.",
    "codeLanguage": "typescript",
    "codeTokens": 151,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/complex-sequences.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Complex Animation Sequences Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  animations: [\n    trigger('pageAnimations', [\n      transition(':enter', [\n        query('.hero', [\n          style({opacity: 0, transform: 'translateY(-100px)'}),\n          stagger(30, [\n            animate('500ms cubic-bezier(0.35, 0, 0.25, 1)',\n              style({ opacity: 1, transform: 'none' }))\n          ])\n        ])\n      ])\n    ])\n  ]\n})"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating FormControl Instance in Angular",
    "codeDescription": "Demonstrates creating a FormControl instance in an Angular component class to manage form input state.",
    "codeLanguage": "typescript",
    "codeTokens": 33,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_1",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "name = new FormControl('');"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Adding a Cross-Field Validator to a FormGroup in Angular",
    "codeDescription": "Demonstrates how to add a cross-field validator to a FormGroup by passing it as the second argument when creating the form group, enabling validation across multiple form controls.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/form-validation.md#2025-04-08_snippet_5",
    "pageTitle": "Validating Form Input in Angular",
    "codeList": [
      {
        "language": "javascript",
        "code": "const actorForm = new FormGroup({\n  'name': new FormControl(),\n  'role': new FormControl(),\n  'skill': new FormControl()\n}, { validators: unambiguousRoleValidator });"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Importing and Declaring Required Modules in Angular",
    "codeDescription": "Example showing how to import and declare a module (FormsModule) in an Angular application to resolve a missing export error. This demonstrates the proper syntax for importing a module and adding it to the NgModule imports array.",
    "codeLanguage": "typescript",
    "codeTokens": 78,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/errors/NG8003.md#2025-04-08_snippet_0",
    "pageTitle": "Debugging Missing Reference Target in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { FormsModule } from '@angular/forms';\n\n@NgModule({\n  …\n  imports: [\n    FormsModule,\n    …\n"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using Component Selector in Template",
    "codeDescription": "Shows how to use a component's selector in another component's template. Demonstrates the usage of a custom element in an Angular template.",
    "codeLanguage": "angular-ts",
    "codeTokens": 72,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/selectors.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Component Selectors Guide",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  template: `\n    <profile-photo />\n    <button>Upload a new profile photo</button>`,\n  ...,\n})\nexport class UserProfile { }"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Defining a Custom Pipe with @Pipe Decorator",
    "codeDescription": "Shows the basic structure of defining a custom pipe in Angular using the @Pipe decorator. This example demonstrates how to set up the pipe class and specify its name.",
    "codeLanguage": "typescript",
    "codeTokens": 69,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/pipes.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Pipes Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Pipe } from '@angular/core';\n\n@Pipe({\n  name: 'myCustomTransformation',\n})\nexport class MyCustomTransformationPipe {}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Complete Open-Close Component in Angular Animation",
    "codeDescription": "The complete component file showing animation triggers, state definitions, and transitions for an open-close animation effect.",
    "codeLanguage": "typescript",
    "codeTokens": 198,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/overview.md#2025-04-08_snippet_12",
    "pageTitle": "Introduction to Angular Animations Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  selector: 'app-open-close',\n  animations: [\n    trigger('openClose', [\n      // ...\n      state('open', style({\n        height: '200px',\n        opacity: 1,\n        backgroundColor: 'yellow'\n      })),\n      state('closed', style({\n        height: '100px',\n        opacity: 0.8,\n        backgroundColor: 'blue'\n      })),\n      transition('open => closed', [\n        animate('1s')\n      ]),\n      transition('closed => open', [\n        animate('0.5s')\n      ]),\n    ]),\n  ],\n  templateUrl: 'open-close.component.html',\n  styleUrls: ['open-close.component.css']\n})\nexport class OpenCloseComponent {\n  isOpen = true;\n\n  toggle() {\n    this.isOpen = !this.isOpen;\n  }\n\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Optimized Tracking Expression in Angular @for Loop",
    "codeDescription": "Corrected implementation using todo.id as the tracking expression, which properly identifies items regardless of object identity. This prevents unnecessary DOM re-creation when updating item properties.",
    "codeLanguage": "typescript",
    "codeTokens": 176,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/errors/NG0956.md#2025-04-08_snippet_1",
    "pageTitle": "Angular @for Loop Tracking Expression Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  template: `\n    <button (click)=\"toggleAllDone()\">All done!</button>\n    <ul>\n    @for (todo of todos; track todo.id) {\n      <li>{{todo.task}}</li>\n    }\n    </ul>\n  `,\n})\nexport class App {\n  todos = [\n    { id: 0, task: 'understand trackBy', done: false },\n    { id: 1, task: 'use proper tracking expression', done: false },\n  ];\n\n  toggleAllDone() {\n    this.todos = this.todos.map(todo => ({ ...todo, done: true }));\n  }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Angular Component After Signal Query Migration",
    "codeDescription": "Example of a component using the new signal-based contentChild query API",
    "codeLanguage": "typescript",
    "codeTokens": 103,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/migrations/signal-queries.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Signal Queries Migration Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Component, contentChild} from '@angular/core';\n\n@Component({\n  template: `Has ref: {{someRef() ? 'Yes' : 'No'}}`\n})\nexport class MyComponent {\n  readonly ref = contentChild<ElementRef>('someRef');\n\n  someMethod() {\n    const ref = this.ref();\n    if (ref) {\n      ref.nativeElement;\n    }\n  }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Adding ngSubmit Event Listener to Form in ProfileEditor Template",
    "codeDescription": "This HTML snippet adds an ngSubmit event listener to the form element, which calls the onSubmit() method when the form is submitted.",
    "codeLanguage": "html",
    "codeTokens": 52,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_11",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<form [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit()\">"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Testing HTTP Error Responses",
    "codeDescription": "Examples of testing both backend errors and network errors in HTTP requests.",
    "codeLanguage": "typescript",
    "codeTokens": 99,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/testing.md#2025-04-08_snippet_6",
    "pageTitle": "Testing HTTP Requests in Angular Applications",
    "codeList": [
      {
        "language": "typescript",
        "code": "const req = httpTesting.expectOne('/api/config');\nreq.flush('Failed!', {status: 500, statusText: 'Internal Server Error'});\n\n// Assert that the application successfully handled the backend error.\n\nconst req = httpTesting.expectOne('/api/config');\nreq.error(new ProgressEvent('network error!'));\n\n// Assert that the application successfully handled the network error."
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Querying for Multiple Child Components with @ViewChildren in Angular",
    "codeDescription": "This example shows how to use the @ViewChildren decorator to query for multiple child components in an Angular application. It demonstrates how to iterate over the QueryList of results in the ngAfterViewInit lifecycle hook.",
    "codeLanguage": "angular-ts",
    "codeTokens": 170,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/queries.md#2025-04-08_snippet_9",
    "pageTitle": "Referencing Component Children with Queries in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'custom-card-action',\n  /*...*/\n})\nexport class CustomCardAction {\n  text: string;\n}\n\n@Component({\n  selector: 'custom-card',\n  template: `\n    <custom-card-action>Save</custom-card-action>\n    <custom-card-action>Cancel</custom-card-action>\n  `,\n})\nexport class CustomCard {\n  @ViewChildren(CustomCardAction) actions: QueryList<CustomCardAction>;\n\n  ngAfterViewInit() {\n    this.actions.forEach(action => {\n      console.log(action.text);\n    });\n  }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Configuring Router Provider in Angular Application",
    "codeDescription": "This code demonstrates how to set up the router provider in an Angular application's configuration file. It imports necessary functions and routes, then adds the router provider to the application config.",
    "codeLanguage": "typescript",
    "codeTokens": 92,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/12-enable-routing/README.md#2025-04-08_snippet_1",
    "pageTitle": "Setting up Angular Router",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {ApplicationConfig} from '@angular/core';\nimport {provideRouter} from '@angular/router';\nimport {routes} from './app.routes';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [provideRouter(routes)],\n};"
      }
    ],
    "relevance": 0.954
  },
  {
    "codeTitle": "Displaying FormControl Value in Template",
    "codeDescription": "Demonstrates how to display the current value of a FormControl using template interpolation.",
    "codeLanguage": "html",
    "codeTokens": 31,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_4",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "Value: {{ name.value }}"
      }
    ],
    "relevance": 0.954
  },
  {
    "codeTitle": "Configuring Router in Angular Bootstrap",
    "codeDescription": "Update the bootstrapApplication call to include the routing configuration in main.ts.",
    "codeLanguage": "typescript",
    "codeTokens": 61,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/10-routing/README.md#2025-04-08_snippet_2",
    "pageTitle": "Adding Routes to Angular Application",
    "codeList": [
      {
        "language": "typescript",
        "code": "bootstrapApplication(AppComponent,\n    {\n      providers: [\n        provideProtractorTestingSupport(),\n        provideRouter(routes)\n      ]\n    }\n  ).catch(err => console.error(err));"
      }
    ],
    "relevance": 0.953
  },
  {
    "codeTitle": "Importing ReactiveFormsModule in Angular Component",
    "codeDescription": "Import ReactiveFormsModule from @angular/forms and add it to the imports array of the component. This step is necessary to use reactive forms in the component.",
    "codeLanguage": "typescript",
    "codeTokens": 127,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/17-reactive-forms/README.md#2025-04-08_snippet_0",
    "pageTitle": "Setting Up Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { ReactiveFormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <form>\n      <label>Name\n        <input type=\"text\" />\n      </label>\n      <label>Email\n        <input type=\"email\" />\n      </label>\n      <button type=\"submit\">Submit</button>\n    </form>\n  `,\n  imports: [ReactiveFormsModule],\n})"
      }
    ],
    "relevance": 0.953
  },
  {
    "codeTitle": "Implementing Impure Angular Pipe for Arrays",
    "codeDescription": "Demonstrates creation of an impure pipe for detecting changes in arrays by setting pure: false. The pipe joins array elements and updates when array references or contents change.",
    "codeLanguage": "angular-ts",
    "codeTokens": 99,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/pipes.md#2025-04-08_snippet_7",
    "pageTitle": "Angular Pipes Documentation",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'joinNamesImpure',\n  pure: false,\n})\nexport class JoinNamesImpurePipe implements PipeTransform {\n  transform(names: string[]): string {\n    return names.join();\n  }\n}"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Disabling XSRF Protection in Angular HttpClient",
    "codeDescription": "This snippet shows how to completely disable the built-in XSRF protection mechanism in Angular's HttpClient using the withNoXsrfProtection feature when it doesn't suit the application's needs.",
    "codeLanguage": "typescript",
    "codeTokens": 78,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/security.md#2025-04-08_snippet_1",
    "pageTitle": "HttpClient Security in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "export const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(\n      withNoXsrfProtection(),\n    ),\n  ]\n};"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Setting URL Parameters with Object Literal in HttpClient GET Request",
    "codeDescription": "Shows how to add URL parameters to an HTTP request using a simple object literal. This approach provides a straightforward way to include query parameters in the request URL.",
    "codeLanguage": "typescript",
    "codeTokens": 68,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/making-requests.md#2025-04-08_snippet_3",
    "pageTitle": "Making HTTP Requests with Angular HttpClient",
    "codeList": [
      {
        "language": "typescript",
        "code": "http.get('/api/config', {\n  params: {filter: 'all'},\n}).subscribe(config => {\n  // ...\n});"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Implementing Animation Callbacks in Angular",
    "codeDescription": "Shows how to implement start and done animation callbacks using the trigger() function and handle animation events in the template.",
    "codeLanguage": "typescript",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/transition-and-triggers.md#2025-04-08_snippet_7",
    "pageTitle": "Angular Animation Transitions and Triggers Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class OpenCloseComponent {\n  onAnimationEvent(event: AnimationEvent) {\n    // Callback code\n  }\n}"
      },
      {
        "language": "html",
        "code": "<div [@openClose]=\"isOpen\"\n     (@openClose.start)=\"onAnimationEvent($event)\"\n     (@openClose.done)=\"onAnimationEvent($event)\">\n</div>"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Implementing Input Property in Child Components",
    "codeDescription": "Shows how to set up an input property in a child component to receive the item data from the parent component when using NgSwitch.",
    "codeLanguage": "typescript",
    "codeTokens": 83,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_24",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Input() item!: Item;\n\n@Component({\n  selector: 'app-stout-item',\n  template: `The <strong>{{item.name}}</strong> costs ${{item.price}}`\n})\nexport class StoutItemComponent {}"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Configuring HomeComponent Template",
    "codeDescription": "Adding search filter and button to HomeComponent's template",
    "codeLanguage": "typescript",
    "codeTokens": 71,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/02-HomeComponent/README.md#2025-04-08_snippet_5",
    "pageTitle": "Creating and Configuring Angular Home Component Tutorial",
    "codeList": [
      {
        "language": "typescript",
        "code": "template: `\n  <section>\n    <form>\n      <input type=\"text\" placeholder=\"Filter by city\">\n      <button class=\"primary\" type=\"button\">Search</button>\n    </form>\n  </section>\n`"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Using RouterOutlet in Angular Templates",
    "codeDescription": "Shows how to use the RouterOutlet directive as a placeholder in templates where routed components should be displayed. The router will dynamically insert components at this location based on the current URL.",
    "codeLanguage": "html",
    "codeTokens": 61,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/router-reference.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Router Reference Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<router-outlet></router-outlet>\n<!-- Routed components go here -->"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Applying the Highlight Directive",
    "codeDescription": "HTML template example showing how to apply the highlight directive to a paragraph element.",
    "codeLanguage": "html",
    "codeTokens": 39,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/attribute-directives.md#2025-04-08_snippet_4",
    "pageTitle": "Building and Using Attribute Directives in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<p appHighlight>Highlight me!</p>"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Setting Page Titles in Angular Routes",
    "codeDescription": "This snippet demonstrates how to set page titles for Angular routes using the title property in the route configuration.",
    "codeLanguage": "typescript",
    "codeTokens": 182,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/common-router-tasks.md#2025-04-08_snippet_17",
    "pageTitle": "Common Routing Tasks in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "const routes: Routes = [\n  {\n    path: 'first-component',\n    title: 'First component',\n    component: FirstComponent,  // this is the component with the <router-outlet> in the template\n    children: [\n      {\n        path: 'child-a',  // child route path\n        title: resolvedChildATitle,\n        component: ChildAComponent,  // child route component that the router renders\n      },\n      {\n        path: 'child-b',\n        title: 'child b',\n        component: ChildBComponent,  // another child route component that the router renders\n      },\n    ],\n  },\n];\n\nconst resolvedChildATitle: ResolveFn<string> = () => Promise.resolve('child a');"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Using Contextual Variables with let in @for Blocks",
    "codeDescription": "Demonstrates how to use and alias contextual variables like $index and $even in @for blocks using the let segment. These aliases are useful especially when nesting @for blocks.",
    "codeLanguage": "angular-html",
    "codeTokens": 85,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/control-flow.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Control Flow Features",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@for (item of items; track item.id; let idx = $index, e = $even) {\n  <p>Item #{{ idx }}: {{ item.name }}</p>\n}"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Installing Angular Elements Package",
    "codeDescription": "Command to install the @angular/elements package in your Angular workspace using npm. This package is required to create custom elements from Angular components.",
    "codeLanguage": "shell",
    "codeTokens": 45,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/elements.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Elements Overview",
    "codeList": [
      {
        "language": "shell",
        "code": "npm install @angular/elements --save"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Defining FormArray Control in Angular Component",
    "codeDescription": "Creating a FormArray control named 'aliases' within a form group using FormBuilder. The array is initialized with a single control.",
    "codeLanguage": "typescript",
    "codeTokens": 98,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_27",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "profileForm = this.fb.group({\n  firstName: ['', Validators.required],\n  lastName: [''],\n  address: this.fb.group({\n    street: [''],\n    city: [''],\n    state: [''],\n    zip: ['']\n  }),\n  aliases: this.fb.array([\n    this.fb.control('')\n  ])\n});"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Creating a Factory Function for HeroService in Angular",
    "codeDescription": "This example shows how to create a factory function for HeroService that depends on Logger and UserService in Angular.",
    "codeLanguage": "typescript",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection-providers.md#2025-04-08_snippet_7",
    "pageTitle": "Configuring Dependency Providers in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "const heroServiceFactory = (logger: Logger, userService: UserService) =>\n  new HeroService(logger, userService.user.isAuthorized);"
      }
    ],
    "relevance": 0.951
  },
  {
    "codeTitle": "Adding RouterLink Directive in Angular Component Template",
    "codeDescription": "Shows how to use the routerLink directive in an Angular component template for dynamic navigation to the details page.",
    "codeLanguage": "typescript",
    "codeTokens": 55,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/11-details-page/README.md#2025-04-08_snippet_1",
    "pageTitle": "Integrating Details Page with Routing in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "<a [routerLink]=\"['/details', housingLocation.id]\">Learn More</a>"
      }
    ],
    "relevance": 0.951
  },
  {
    "codeTitle": "Creating a new Angular project using CLI",
    "codeDescription": "Command to create a new Angular project using the Angular CLI. Replace <project-name> with your desired project name.",
    "codeLanguage": "shell",
    "codeTokens": 38,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/introduction/installation.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Installation Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "ng new <project-name>"
      }
    ],
    "relevance": 0.951
  },
  {
    "codeTitle": "Injecting HttpClient in Angular Services",
    "codeDescription": "This code demonstrates how to inject the HttpClient service as a dependency in an Angular service using dependency injection.",
    "codeLanguage": "typescript",
    "codeTokens": 69,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/setup.md#2025-04-08_snippet_2",
    "pageTitle": "Configuring HttpClient in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Injectable({providedIn: 'root'})\nexport class ConfigService {\n  private http = inject(HttpClient);\n  // This service can now make HTTP requests via `this.http`.\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Creating Conditional Chains with @if, @else-if, and @else in Angular",
    "codeDescription": "Shows how to chain multiple conditions together with @if, @else-if, and @else blocks to handle different scenarios based on the comparison between variables a and b.",
    "codeLanguage": "angular-html",
    "codeTokens": 96,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/control-flow.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Control Flow Features",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@if (a > b) {\n  {{a}} is greater than {{b}}\n} @else if (b > a) {\n  {{a}} is less than {{b}}\n} @else {\n  {{a}} is equal to {{b}}\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Testing TitleCase Pipe in Component Context",
    "codeDescription": "Integration test demonstrating how to test the TitleCasePipe within a component context. Shows how to verify pipe behavior when applied to component properties in the template.",
    "codeLanguage": "typescript",
    "codeTokens": 187,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/pipes.md#2025-04-08_snippet_2",
    "pageTitle": "Testing Angular Pipes Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "it('should convert hero name to Title Case', () => {\n  // get the name's input and display elements\n  const hostElement: HTMLElement = fixture.nativeElement;\n  const nameInput: HTMLInputElement = hostElement.querySelector('input')!;\n  const nameDisplay: HTMLElement = hostElement.querySelector('span')!;\n\n  // simulate user entering a new name into the input box\n  nameInput.value = 'quick BROWN  fOx';\n\n  // Dispatch a DOM event so that Angular learns of input value change.\n  nameInput.dispatchEvent(new Event('input'));\n\n  // Tell Angular to update the display binding through the title pipe\n  fixture.detectChanges();\n\n  expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing afterRender Phases in Angular Component",
    "codeDescription": "Demonstrates how to use afterNextRender with write and read phases to optimize DOM operations and minimize layout thrashing. Shows phase communication through return values.",
    "codeLanguage": "typescript",
    "codeTokens": 231,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/lifecycle.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Component Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Component, ElementRef, afterNextRender} from '@angular/core';\n\n@Component({...})\nexport class UserProfile {\n  private prevPadding = 0;\n  private elementHeight = 0;\n\n  constructor() {\n    private elementRef = inject(ElementRef);\n    const nativeElement = elementRef.nativeElement;\n\n    afterNextRender({\n      // Use the `Write` phase to write to a geometric property.\n      write: () => {\n        const padding = computePadding();\n        const changed = padding !== this.prevPadding;\n        if (changed) {\n          nativeElement.style.padding = padding;\n        }\n        return changed; // Communicate whether anything changed to the read phase.\n      },\n\n      // Use the `Read` phase to read geometric properties after all writes have occurred.\n      read: (didWrite) => {\n        if (didWrite) {\n          this.elementHeight = nativeElement.getBoundingClientRect().height;\n        }\n      }\n    });\n  }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Converting Angular Component to Standalone (After)",
    "codeDescription": "Example of a standalone Angular component and its updated NgModule after migration.",
    "codeLanguage": "typescript",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/migrations/standalone.md#2025-04-08_snippet_2",
    "pageTitle": "Migrating Angular Projects to Standalone Components",
    "codeList": [
      {
        "language": "typescript",
        "code": "// shared.module.ts\n@NgModule({\n  imports: [CommonModule, GreeterComponent],\n  exports: [GreeterComponent]\n})\nexport class SharedModule {}"
      },
      {
        "language": "typescript",
        "code": "// greeter.component.ts\n@Component({\n  selector: 'greeter',\n  template: '<div *ngIf=\"showGreeting\">Hello</div>',\n  imports: [NgIf]\n})\nexport class GreeterComponent {\n  showGreeting = true;\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Providing a Service in a Component",
    "codeDescription": "Shows how to configure an ElementInjector by providing a service in the @Component decorator using its providers property, making the service available to that component instance and potentially to its children.",
    "codeLanguage": "typescript",
    "codeTokens": 78,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/hierarchical-dependency-injection.md#2025-04-08_snippet_4",
    "pageTitle": "Hierarchical Injectors in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  …\n  providers: [{ provide: ItemService, useValue: { name: 'lamp' } }]\n})\nexport class TestComponent"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Parallel Group Animations in Angular Hero List",
    "codeDescription": "Shows how to use group() function to run multiple animations simultaneously on the same element. The example applies different timing configurations for enter and leave animations.",
    "codeLanguage": "typescript",
    "codeTokens": 175,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/complex-sequences.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Complex Animation Sequences Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "trigger('filterAnimation', [\n  transition(':enter, * => 0, * => -1', []),\n  transition(':increment', [\n    query(':enter', [\n      style({ opacity: 0, width: 0 }),\n      stagger(50, [\n        animate('300ms ease-out', style({ opacity: 1, width: '*' })),\n      ]),\n    ], { optional: true })\n  ]),\n  transition(':decrement', [\n    query(':leave', [\n      stagger(50, [\n        animate('300ms ease-out', style({ opacity: 0, width: 0 })),\n      ]),\n    ], { optional: true })\n  ]),\n])"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Defining an InjectionToken for Configuration in Angular",
    "codeDescription": "This example shows how to define an InjectionToken for a configuration object in Angular.",
    "codeLanguage": "typescript",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection-providers.md#2025-04-08_snippet_9",
    "pageTitle": "Configuring Dependency Providers in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { InjectionToken } from '@angular/core';\n\nexport interface AppConfig {\n  title: string;\n}\n\nexport const APP_CONFIG = new InjectionToken<AppConfig>('app.config description');"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing Hero Service with Mock Data",
    "codeDescription": "Complete implementation of HeroService that returns mock hero data using the @Injectable decorator.",
    "codeLanguage": "typescript",
    "codeTokens": 92,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/creating-injectable-service.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Injectable Services Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Injectable } from '@angular/core';\nimport { HEROES } from './mock-heroes';\n\n@Injectable({\n  // declares that this service should be created\n  // by the root application injector.\n  providedIn: 'root',\n})\nexport class HeroService {\n  getHeroes() {\n    return HEROES;\n  }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Minimal Component Test Configuration",
    "codeDescription": "Simplified test setup with only essential TestBed configuration for basic component testing.",
    "codeLanguage": "typescript",
    "codeTokens": 34,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-basics.md#2025-04-08_snippet_2",
    "pageTitle": "Testing Angular Components",
    "codeList": [
      {
        "language": "typescript",
        "code": "TestBed.configureTestingModule({\n  declarations: [ BannerComponent ]\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing DetailsComponent Class in Angular",
    "codeDescription": "Demonstrates how to implement the DetailsComponent class to retrieve and display housing location details based on route parameters.",
    "codeLanguage": "typescript",
    "codeTokens": 112,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/11-details-page/README.md#2025-04-08_snippet_4",
    "pageTitle": "Integrating Details Page with Routing in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class DetailsComponent {\n  route: ActivatedRoute = inject(ActivatedRoute);\n  housingService = inject(HousingService);\n  housingLocation: HousingLocation | undefined;\n\n  constructor() {\n    const housingLocationId = parseInt(this.route.snapshot.params['id'], 10);\n    this.housingLocation = this.housingService.getHousingLocationById(housingLocationId);\n  }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Displaying Component in Angular Template",
    "codeDescription": "Shows how to include the form component in a parent component's template.",
    "codeLanguage": "html",
    "codeTokens": 33,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_3",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<app-name-editor></app-name-editor>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing a Custom Logger with Dependency in Angular",
    "codeDescription": "This snippet shows the implementation of a custom logger (EvenBetterLogger) that depends on UserService in Angular.",
    "codeLanguage": "typescript",
    "codeTokens": 85,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection-providers.md#2025-04-08_snippet_4",
    "pageTitle": "Configuring Dependency Providers in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Injectable()\nexport class EvenBetterLogger extends Logger {\n  private userService = inject(UserService);\n\n  override log(message: string) {\n    const name = this.userService.user.name;\n    super.log(`Message to ${name}: ${message}`);\n  }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing a Cross-Field Validator Function in Angular",
    "codeDescription": "Creates a custom validator function that compares the values of name and role fields to ensure they don't match, returning validation errors when appropriate.",
    "codeLanguage": "typescript",
    "codeTokens": 110,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/form-validation.md#2025-04-08_snippet_6",
    "pageTitle": "Validating Form Input in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "export const unambiguousRoleValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n  const actorName = control.get('name');\n  const actorRole = control.get('role');\n\n  return actorName && actorRole && actorName.value === actorRole.value\n    ? { ambiguousRole: true }\n    : null;\n};"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing Multi-branch Conditionals with @switch in Angular",
    "codeDescription": "Demonstrates using the @switch block for multi-branch conditional rendering based on a value. The example shows different dashboard components displayed based on user permissions.",
    "codeLanguage": "angular-html",
    "codeTokens": 108,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/control-flow.md#2025-04-08_snippet_6",
    "pageTitle": "Angular Control Flow Features",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@switch (userPermissions) {\n  @case ('admin') {\n    <app-admin-dashboard />\n  }\n  @case ('reviewer') {\n    <app-reviewer-dashboard />\n  }\n  @case ('editor') {\n    <app-editor-dashboard />\n  }\n  @default {\n    <app-viewer-dashboard />\n  }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Generating ProfileEditor Component in Angular CLI",
    "codeDescription": "This command uses the Angular CLI to generate a new component called ProfileEditor.",
    "codeLanguage": "shell",
    "codeTokens": 30,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_7",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "shell",
        "code": "ng generate component ProfileEditor"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing an Asynchronous Validator in Angular",
    "codeDescription": "Creates a custom async validator that checks if an actor role is already taken by making an asynchronous service call, implementing the AsyncValidator interface.",
    "codeLanguage": "typescript",
    "codeTokens": 131,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/form-validation.md#2025-04-08_snippet_12",
    "pageTitle": "Validating Form Input in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Injectable({ providedIn: 'root' })\nexport class UniqueRoleValidator implements AsyncValidator {\n  constructor(private actorsService: ActorsService) {}\n\n  validate(\n    control: AbstractControl\n  ): Observable<ValidationErrors | null> {\n    return this.actorsService.isRoleTaken(control.value).pipe(\n      map(isTaken => (isTaken ? { uniqueRole: true } : null)),\n      catchError(() => of(null))\n    );\n  }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Corrected @for Loop with Unique Keys in Angular",
    "codeDescription": "Fixed version using item.key as the tracking expression to ensure unique identification of items in the collection. Uses the unique key property instead of the potentially duplicate value property.",
    "codeLanguage": "typescript",
    "codeTokens": 111,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/errors/NG0955.md#2025-04-08_snippet_1",
    "pageTitle": "Angular @for Loop Tracking Expression Issue",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n    template: `@for (item of items; track item.key) {{{item.value}}}`,\n})\nclass TestComponent {\n    items = [{key: 1, value: 'a'}, {key: 2, value: 'b'}, {key: 3, value: 'a'}];\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Injecting Service Using inject Function",
    "codeDescription": "Shows how to inject a service into a component using Angular's inject function.",
    "codeLanguage": "typescript",
    "codeTokens": 50,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/creating-injectable-service.md#2025-04-08_snippet_5",
    "pageTitle": "Angular Injectable Services Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { inject } from \"@angular/core\";\n\nexport class HeroListComponent {\n  private heroService = inject(HeroService);\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Creating a Custom Kebab Case Pipe in Angular",
    "codeDescription": "Demonstrates how to create a custom pipe in Angular that transforms strings to kebab case. The example shows the implementation of the pipe class with the @Pipe decorator and the transform method.",
    "codeLanguage": "typescript",
    "codeTokens": 111,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/pipes.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Pipes Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// kebab-case.pipe.ts\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'kebabCase',\n})\nexport class KebabCasePipe implements PipeTransform {\n  transform(value: string): string {\n    return value.toLowerCase().replace(/ /g, '-');\n  }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Using AsyncPipe with Observable Data Stream in Angular Component",
    "codeDescription": "Example demonstrating how to bind an observable message stream to a component view using the async pipe. Shows component setup with a message observable and template binding using AsyncPipe to automatically handle subscription lifecycle.",
    "codeLanguage": "typescript",
    "codeTokens": 204,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/pipes/unwrapping-data-observables.md#2025-04-08_snippet_0",
    "pageTitle": "Unwrapping Observable Data in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Component } from '@angular/core';\nimport { Observable, interval } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-hero-message',\n  standalone: true,\n  template: `\n    <h2>Async Hero Message and AsyncPipe</h2>\n    <p>Message: {{ message$ | async }}</p>\n  `,\n})\nexport class HeroAsyncMessageComponent {\n  message$: Observable<string>;\n\n  constructor() {\n    this.message$ = interval(500).pipe(\n      map(i => messages[i]),\n      take(messages.length)\n    );\n  }\n}\n\nconst messages = [\n  'You are my hero!',\n  'You are the best hero!',\n  'Will you be my hero?',\n];"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Setting API URL in Housing Service",
    "codeDescription": "Definition of the API endpoint URL in the housing service",
    "codeLanguage": "javascript",
    "codeTokens": 35,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/14-http/README.md#2025-04-08_snippet_3",
    "pageTitle": "Integrating HTTP Communication in Angular Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "url = 'http://localhost:3000/locations';"
      }
    ],
    "relevance": 0.949
  },
  {
    "codeTitle": "Repeating Component Views with NgFor in Angular HTML Template",
    "codeDescription": "This snippet shows how to use NgFor to repeat a component element for each item in an array.",
    "codeLanguage": "html",
    "codeTokens": 54,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_15",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<app-item-detail *ngFor=\"let item of items\" [item]=\"item\"></app-item-detail>"
      }
    ],
    "relevance": 0.949
  },
  {
    "codeTitle": "Specifying Output Aliases in the @Component Decorator",
    "codeDescription": "Define output aliases in the outputs array of the @Component decorator using a colon notation. This approach is useful for renaming inherited output properties.",
    "codeLanguage": "typescript",
    "codeTokens": 80,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/outputs.md#2025-04-08_snippet_13",
    "pageTitle": "Angular Custom Events with Outputs",
    "codeList": [
      {
        "language": "typescript",
        "code": "// `CustomSlider` inherits the `valueChanged` property from `BaseSlider`.\n@Component({\n  /*...*/\n  outputs: ['valueChanged: volumeChanged'],\n})\nexport class CustomSlider extends BaseSlider {}"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Using HostListener and HostBinding in Angular Directives",
    "codeDescription": "Demonstrates the use of @HostListener and @HostBinding decorators in Angular directives as an alternative to the host metadata property. This approach allows for easier modification of properties and methods in a single place.",
    "codeLanguage": "TypeScript",
    "codeTokens": 127,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/best-practices/style-guide.md#2025-04-08_snippet_33",
    "pageTitle": "Angular Coding Style Guide",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "@Directive({\n  selector: '[appValidate]'\n})\nexport class ValidateDirective {\n  @HostBinding('class.valid') isValid = false;\n\n  @HostListener('blur') onBlur() {\n    this.validate(this.el.nativeElement.value);\n  }\n\n  private validate(value: string) {\n    this.isValid = value.length > 3;\n  }\n\n  constructor(private el: ElementRef) {}\n}"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Customizing View Transitions with CSS",
    "codeDescription": "CSS code that shows how to create custom animations for view transitions by defining keyframes and applying them to specific view-transition elements.",
    "codeLanguage": "css",
    "codeTokens": 139,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/route-animations.md#2025-04-08_snippet_2",
    "pageTitle": "Route Transition Animations with View Transitions API in Angular",
    "codeList": [
      {
        "language": "css",
        "code": "/* Custom transition */\n@keyframes rotate-out {\n to {\n   transform: rotate(90deg);\n }\n}\n@keyframes rotate-in {\n from {\n   transform: rotate(-90deg);\n }\n}\n::view-transition-old(count),\n::view-transition-new(count) {\n animation-duration: 200ms;\n animation-name: -ua-view-transition-fade-in, rotate-in;\n}\n::view-transition-old(count) {\n animation-name: -ua-view-transition-fade-out, rotate-out;\n}"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Adding @placeholder Block in Angular Deferrable View",
    "codeDescription": "This snippet demonstrates how to add a @placeholder block to a @defer block in an Angular component template. The placeholder content is shown before the deferred content loads.",
    "codeLanguage": "angular-html",
    "codeTokens": 78,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/deferrable-views/steps/2-loading-error-placeholder/README.md#2025-04-08_snippet_0",
    "pageTitle": "Using @loading, @error, and @placeholder Blocks in Angular Deferrable Views",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@defer {\n  <article-comments />\n} @placeholder {\n  <p>Placeholder for comments</p>\n}"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Defining @Input Property in TypeScript",
    "codeDescription": "This snippet demonstrates how to create an Input property using the @Input decorator in a TypeScript class for an Angular component.",
    "codeLanguage": "typescript",
    "codeTokens": 48,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/8-input/README.md#2025-04-08_snippet_0",
    "pageTitle": "Component Communication with @Input in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "class UserComponent {\n  @Input() occupation = '';\n}"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Navigating with Parameters in Angular",
    "codeDescription": "This snippet demonstrates how to navigate to a route with parameters in Angular using the Router's navigate method.",
    "codeLanguage": "typescript",
    "codeTokens": 141,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/common-router-tasks.md#2025-04-08_snippet_23",
    "pageTitle": "Common Routing Tasks in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "private readonly route = inject(ActivatedRoute);\nprivate readonly router = inject(Router);\n\nhero$: Observable<Hero>;\n\nngOnInit() {\n  const heroId = this.route.snapshot.paramMap.get('id');\n  this.hero$ = this.service.getHero(heroId);\n}\n\ngotoItems(hero: Hero) {\n  const heroId = hero ? hero.id : null;\n  // Pass along the hero id if available\n  // so that the HeroList component can select that item.\n  this.router.navigate(['/heroes', { id: heroId }]);\n}"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Adding Required Validator to Form Control in Angular TypeScript",
    "codeDescription": "This code demonstrates how to add a required validator to the firstName form control using the Validators.required method in an Angular component.",
    "codeLanguage": "typescript",
    "codeTokens": 40,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_24",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "firstName: ['', Validators.required],"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Using Lightweight Injection Tokens for API Definition in Angular",
    "codeDescription": "This example shows how to use lightweight injection tokens for API definition in Angular components. It demonstrates defining an abstract method in the token class and its implementation in the component, allowing type-safe communication between components.",
    "codeLanguage": "typescript",
    "codeTokens": 198,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/lightweight-injection-tokens.md#2025-04-08_snippet_1",
    "pageTitle": "Optimizing Angular Applications with Lightweight Injection Tokens",
    "codeList": [
      {
        "language": "typescript",
        "code": "abstract class LibHeaderToken {\n  abstract doSomething(): void;\n}\n\n@Component({\n  selector: 'lib-header',\n  providers: [\n    {provide: LibHeaderToken, useExisting: LibHeaderComponent}\n  ]\n  …,\n})\nclass LibHeaderComponent extends LibHeaderToken {\n  doSomething(): void {\n    // Concrete implementation of `doSomething`\n  }\n}\n\n@Component({\n  selector: 'lib-card',\n  …,\n})\nclass LibCardComponent implement AfterContentInit {\n  @ContentChild(LibHeaderToken) header: LibHeaderToken|null = null;\n\n  ngAfterContentInit(): void {\n    if (this.header !== null) {\n      this.header?.doSomething();\n    }\n  }\n}"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Creating a Cross-Validation Directive for Template-Driven Forms",
    "codeDescription": "Implements a directive that wraps the cross-field validator function for use in template-driven forms, providing it to Angular's NG_VALIDATORS token.",
    "codeLanguage": "typescript",
    "codeTokens": 112,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/form-validation.md#2025-04-08_snippet_8",
    "pageTitle": "Validating Form Input in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Directive({\n  selector: '[appUnambiguousRole]',\n  providers: [\n    { provide: NG_VALIDATORS, useExisting: UnambiguousRoleValidatorDirective, multi: true }\n  ]\n})\nexport class UnambiguousRoleValidatorDirective implements Validator {\n  validate(control: AbstractControl): ValidationErrors | null {\n    return unambiguousRoleValidator(control);\n  }\n}"
      }
    ],
    "relevance": 0.947
  },
  {
    "codeTitle": "Adding @Pipe Decorator to ReversePipe in TypeScript",
    "codeDescription": "This code snippet shows how to add the @Pipe decorator to the ReversePipe class, specifying the name to be used in templates.",
    "codeLanguage": "typescript",
    "codeTokens": 49,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/24-create-a-pipe/README.md#2025-04-08_snippet_1",
    "pageTitle": "Creating and Using Custom Pipes in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Pipe({\n    name: 'reverse'\n})"
      }
    ],
    "relevance": 0.947
  },
  {
    "codeTitle": "Generating Web Worker for Root Component",
    "codeDescription": "Specific command to generate a web worker for the app root component.",
    "codeLanguage": "shell",
    "codeTokens": 31,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/ecosystem/web-workers.md#2025-04-08_snippet_1",
    "pageTitle": "Web Workers Implementation Guide for Angular Applications",
    "codeList": [
      {
        "language": "shell",
        "code": "ng generate web-worker app"
      }
    ],
    "relevance": 0.947
  },
  {
    "codeTitle": "Testing HTTP GET Request with Mock Response",
    "codeDescription": "Example of testing a GET request to fetch configuration, including request assertion and response mocking.",
    "codeLanguage": "typescript",
    "codeTokens": 262,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/testing.md#2025-04-08_snippet_1",
    "pageTitle": "Testing HTTP Requests in Angular Applications",
    "codeList": [
      {
        "language": "typescript",
        "code": "TestBed.configureTestingModule({\n  providers: [\n    ConfigService,\n    provideHttpClient(),\n    provideHttpClientTesting(),\n  ],\n});\n\nconst httpTesting = TestBed.inject(HttpTestingController);\n\n// Load `ConfigService` and request the current configuration.\nconst service = TestBed.inject(ConfigService);\nconst config$ = this.configService.getConfig<Config>();\n\n// `firstValueFrom` subscribes to the `Observable`, which makes the HTTP request,\n// and creates a `Promise` of the response.\nconst configPromise = firstValueFrom(config$);\n\n// At this point, the request is pending, and we can assert it was made\n// via the `HttpTestingController`:\nconst req = httpTesting.expectOne('/api/config', 'Request to load the configuration');\n\n// We can assert various properties of the request if desired.\nexpect(req.request.method).toBe('GET');\n\n// Flushing the request causes it to complete, delivering the result.\nreq.flush(DEFAULT_CONFIG);\n\n// We can then assert that the response was successfully delivered by the `ConfigService`:\nexpect(await configPromise).toEqual(DEFAULT_CONFIG);\n\n// Finally, we can assert that no other requests were made.\nhttpTesting.verify();"
      }
    ],
    "relevance": 0.947
  },
  {
    "codeTitle": "Manual Unsubscription from Angular Output Events",
    "codeDescription": "Example of manually unsubscribing from an output event when needed. The subscribe method returns an OutputRefSubscription with an unsubscribe method for cleanup.",
    "codeLanguage": "typescript",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/outputs.md#2025-04-08_snippet_8",
    "pageTitle": "Angular Custom Events with Outputs",
    "codeList": [
      {
        "language": "typescript",
        "code": "const eventSubscription = someComponent.someEventProperty.subscribe(eventData => {\n  console.log(eventData);\n});\n\n// ...\n\neventSubscription.unsubscribe();"
      }
    ],
    "relevance": 0.946
  },
  {
    "codeTitle": "Manual Unsubscription from Angular Output Events",
    "codeDescription": "Example of manually unsubscribing from an output event when needed. The subscribe method returns an OutputRefSubscription with an unsubscribe method for cleanup.",
    "codeLanguage": "typescript",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/outputs.md#2025-04-08_snippet_8",
    "pageTitle": "Angular Custom Events with Outputs",
    "codeList": [
      {
        "language": "typescript",
        "code": "const eventSubscription = someComponent.someEventProperty.subscribe(eventData => {\n  console.log(eventData);\n});\n\n// ...\n\neventSubscription.unsubscribe();"
      }
    ],
    "relevance": 0.946
  },
  {
    "codeTitle": "Creating Navigation Pill in HTML for Angular Documentation",
    "codeDescription": "This HTML snippet defines a custom 'docs-pill-row' element containing a 'docs-pill' element. It's used to create a navigation link to the 'Composing with Components' section of the Angular Essentials guide.",
    "codeLanguage": "HTML",
    "codeTokens": 80,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/introduction/essentials/overview.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Essentials Introduction",
    "codeList": [
      {
        "language": "HTML",
        "code": "<docs-pill-row>\n  <docs-pill title=\"Composing with Components\" href=\"essentials/components\" />\n</docs-pill-row>"
      }
    ],
    "relevance": 0.946
  },
  {
    "codeTitle": "Implementing TrackBy Function for NgFor in Angular Component",
    "codeDescription": "This snippet shows how to implement a trackBy function in an Angular component to optimize rendering performance with NgFor.",
    "codeLanguage": "typescript",
    "codeTokens": 53,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_17",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "trackByItems(index: number, item: Item): number {\n  return item.id;\n}"
      }
    ],
    "relevance": 0.946
  },
  {
    "codeTitle": "Visualizing Model-to-View Data Flow in Template-Driven Forms",
    "codeDescription": "This diagram shows how data flows from the model to the view when a property changes in template-driven forms, demonstrating the change detection process and async operations.",
    "codeLanguage": "mermaid",
    "codeTokens": 226,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/overview.md#2025-04-08_snippet_3",
    "pageTitle": "Forms in Angular",
    "codeList": [
      {
        "language": "mermaid",
        "code": "flowchart TB\n    C(Component)\n    P(Property bound to NgModel)\n    C-->|Updates the property value|P\n    P-->|Triggers CD|CD1\n\n\n    subgraph CD1 [First Change Detection]\n        direction TB\n        M(NgModel)\n        FC(FormControl)\n\n        M-->|Asynchronously sets FormControl value|FC\n    end\n    CD1-->|Async actions trigger a second round of Change Detection|CD2\n\n    subgraph CD2 [Second Change Detection]\n        direction TB\n        FC2(FormControl)\n        O(Observers)\n        CVA(ControlValueAccessor)\n        I(\"&lt;input&gt;\")\n        FC2-.->|Fires a 'valueChanges' event to observers|O\n        O-->|ControlValueAccessor receives valueChanges event|CVA\n        CVA-->|Sets the value in the control|I\n    end"
      }
    ],
    "relevance": 0.946
  },
  {
    "codeTitle": "Specifying a Basic Provider in Angular",
    "codeDescription": "This snippet shows how to specify a basic provider for a Logger service in an Angular component.",
    "codeLanguage": "typescript",
    "codeTokens": 35,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection-providers.md#2025-04-08_snippet_0",
    "pageTitle": "Configuring Dependency Providers in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "providers: [Logger],"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Exporting an Animation Trigger in TypeScript",
    "codeDescription": "Defines and exports a complete animation trigger that can be reused across components. This animation handles open and closed states with different styles and transitions.",
    "codeLanguage": "typescript",
    "codeTokens": 125,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/reusable-animations.md#2025-04-08_snippet_1",
    "pageTitle": "Reusable Angular Animations Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "export const openCloseAnimation = trigger('openClose', [\n  state('open', style({\n    height: '200px',\n    opacity: 1,\n    backgroundColor: 'yellow'\n  })),\n  state('close', style({\n    height: '100px',\n    opacity: 0.5,\n    backgroundColor: 'green'\n  })),\n  transition('* => *', [\n    animate('1s')\n  ])\n]);"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing HttpResponse Class in TypeScript",
    "codeDescription": "This class extends HttpResponseBase and represents an HTTP response. It includes methods for cloning the response and properties for the response body and type.",
    "codeLanguage": "TypeScript",
    "codeTokens": 199,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/common/http/index.api.md#2025-04-08_snippet_22",
    "pageTitle": "Angular HTTP API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export class HttpResponse<T> extends HttpResponseBase {\n    constructor(init?: {\n        body?: T | null;\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    });\n    readonly body: T | null;\n    // (undocumented)\n    clone(): HttpResponse<T>;\n    // (undocumented)\n    clone(update: {\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    }): HttpResponse<T>;\n    // (undocumented)\n    clone<V>(update: {\n        body?: V | null;\n        headers?: HttpHeaders;\n        status?: number;\n        statusText?: string;\n        url?: string;\n    }): HttpResponse<V>;\n    // (undocumented)\n    readonly type: HttpEventType.Response;\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Defining Angular Routes",
    "codeDescription": "Creates and exports a routes array with paths for crisis-list and heroes-list components.",
    "codeLanguage": "typescript",
    "codeTokens": 71,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/router-tutorial.md#2025-04-08_snippet_4",
    "pageTitle": "Implementing Angular Routes in a Single-Page Application",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Routes} from '@angular/router';\n\nexport const routes = [];\n\n{path: 'crisis-list', component: CrisisListComponent},\n{path: 'heroes-list', component: HeroesListComponent},"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Defining Hero Detail Component Template in Angular",
    "codeDescription": "This HTML snippet shows the template for a HeroDetailComponent in Angular, which includes a title, two hero fields, and two buttons.",
    "codeLanguage": "HTML",
    "codeTokens": 160,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_38",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div *ngIf=\"hero\">\n  <h2><span>{{hero.name | titlecase}}</span> Details</h2>\n  <div>\n    <span>id: </span>{{hero.id}}\n  </div>\n  <div>\n    <label for=\"name\">name:\n      <input id=\"name\" [(ngModel)]=\"hero.name\" placeholder=\"name\"/>\n    </label>\n  </div>\n  <button type=\"button\" (click)=\"save()\">Save</button>\n  <button type=\"button\" (click)=\"cancel()\">Cancel</button>\n</div>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using an Angular Component in HTML Template",
    "codeDescription": "This HTML snippet shows how to use the previously defined 'profile-photo' component in a template. The component tag becomes the host element for the component instance.",
    "codeLanguage": "html",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/host-elements.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Component Host Elements Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<h3>Your profile photo</h3>\n<profile-photo />\n<button>Upload a new profile photo</button>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Creating Trusted Resource URLs for iframes in Angular",
    "codeDescription": "Component method that creates a trusted resource URL for YouTube videos. It uses bypassSecurityTrustResourceUrl to allow binding to an iframe src attribute, which requires a trusted resource URL.",
    "codeLanguage": "typescript",
    "codeTokens": 95,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/security.md#2025-04-08_snippet_5",
    "pageTitle": "Angular Security Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "updateVideoUrl(id: string) {\n  this.dangerousVideoUrl = 'https://www.youtube.com/embed/' + id;\n  this.videoUrl =\n    this.sanitizer.bypassSecurityTrustResourceUrl(this.dangerousVideoUrl);\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Dependency Injection Usage Example",
    "codeDescription": "Demonstrates how to use the inject function to consume dependencies in an Angular component",
    "codeLanguage": "typescript",
    "codeTokens": 101,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection.md#2025-04-08_snippet_5",
    "pageTitle": "Angular Dependency Injection Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {inject, Component} from 'angular/core'; \n\n@Component({/* ... */})\nexport class UserProfile {\n  // You can use the `inject` function in property initializers.\n  private userClient = inject(UserClient);\n  \n  constructor() {\n    // You can also use the `inject` function in a constructor.\n    const logger = inject(Logger);\n  }\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Accessing Event Data in Angular Templates",
    "codeDescription": "Access event data in a template using the $event variable when listening to a custom event. This allows the template to receive data passed from the component's emit method.",
    "codeLanguage": "angular-html",
    "codeTokens": 57,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/outputs.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Custom Events with Outputs",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<custom-slider (valueChanged)=\"logValue($event)\" />"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "French Translation Unit Before Translation in XLIFF Format",
    "codeDescription": "Example of an untranslated XLIFF translation unit element showing a source element that needs French translation. This represents an h1 greeting tag marked with the i18n attribute.",
    "codeLanguage": "html",
    "codeTokens": 114,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/translation-files.md#2025-04-08_snippet_6",
    "pageTitle": "Angular Internationalization (i18n) Translation File Management",
    "codeList": [
      {
        "language": "html",
        "code": "<trans-unit id=\"introductionHeader\" datatype=\"html\">\n  <source>Hello i18n!</source>\n  <note priority=\"1\" from=\"description\">An introduction header for this sample</note>\n  <note priority=\"1\" from=\"meaning\">User welcome</note>\n</trans-unit>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Component Definition with DOM Elements in Angular Ivy",
    "codeDescription": "Example showing how a simple template with div and text elements is represented in Angular's Ivy renderer. The component defines 5 declarations which are stored in the DECLS section of LView/TView.data.",
    "codeLanguage": "typescript",
    "codeTokens": 201,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/src/render3/VIEW_DATA.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Ivy Renderer Data Layout Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  template: `<div>Hello <b>World</b>!</div>`\n})\nclass MyApp {\n\n  static ɵcmp = ɵɵdefineComponent({\n    ...,\n    decls: 5,\n    template: function(rf: RenderFlags, ctx: MyApp) {\n      if (rf & RenderFlags.Create) {\n        ɵɵelementStart(0, 'div');\n        ɵɵtext(1, 'Hello ');\n        ɵɵelementStart(2, 'b');\n        ɵɵtext(3, 'World');\n        ɵɵelementEnd();\n        ɵɵtext(4, '!');\n        ɵɵelementEnd();\n      }\n      ...\n    }\n  });\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Translating Inline Text without HTML Element using ng-container",
    "codeDescription": "Demonstrates how to use ng-container to translate inline text without creating a new DOM element.",
    "codeLanguage": "html",
    "codeTokens": 52,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/prepare.md#2025-04-08_snippet_2",
    "pageTitle": "Preparing Angular Components for Internationalization (i18n)",
    "codeList": [
      {
        "language": "html",
        "code": "<ng-container i18n>I don't output any element</ng-container>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Rendering Template Fragments with NgTemplateOutlet in Angular",
    "codeDescription": "This example shows how to use <ng-container> with the NgTemplateOutlet directive to dynamically render different template fragments based on a condition. It selects between admin and basic templates based on the isAdmin input.",
    "codeLanguage": "typescript",
    "codeTokens": 176,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/ng-container.md#2025-04-08_snippet_2",
    "pageTitle": "Using ng-container in Angular Templates",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  template: `\n    <h2>Your profile</h2>\n    <ng-container [ngTemplateOutlet]=\"profileTemplate()\" />\n\n    <ng-template #admin>This is the admin profile</ng-template>\n    <ng-template #basic>This is the basic profile</ng-template>\n  `\n})\nexport class UserProfile {\n  isAdmin = input(false);\n  adminTemplate = viewChild('admin', {read: TemplateRef});\n  basicTemplate = viewChild('basic', {read: TemplateRef});\n  profileTemplate = computed(() => this.isAdmin() ? this.adminTemplate() : this.basicTemplate());\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Intercepting Response Events in Angular HttpClient",
    "codeDescription": "This interceptor demonstrates how to access and log response events, specifically logging the status of responses for each request URL.",
    "codeLanguage": "typescript",
    "codeTokens": 100,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/interceptors.md#2025-04-08_snippet_2",
    "pageTitle": "Angular HttpClient Interceptors Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "export function loggingInterceptor(req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  return next(req).pipe(tap(event => {\n    if (event.type === HttpEventType.Response) {\n      console.log(req.url, 'returned a response with status', event.status);\n    }\n  }));\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Defining HousingLocation Interface in TypeScript",
    "codeDescription": "This code defines the HousingLocation interface with properties representing data about a housing location, including id, name, and location information.",
    "codeLanguage": "typescript",
    "codeTokens": 83,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/04-interfaces/README.md#2025-04-08_snippet_1",
    "pageTitle": "Creating an Interface in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "export interface HousingLocation {\n  id: number;\n  name: string;\n  city: string;\n  state: string;\n  photo: string;\n  availableUnits: number;\n  wifi: boolean;\n  laundry: boolean;\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using Untracked with External Code in an Effect in TypeScript",
    "codeDescription": "This snippet shows how to use 'untracked' to prevent external code from being treated as a dependency in an effect.",
    "codeLanguage": "typescript",
    "codeTokens": 89,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/overview.md#2025-04-08_snippet_11",
    "pageTitle": "Angular Signals Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "effect(() => {\n  const user = currentUser();\n  untracked(() => {\n    // If the `loggingService` reads signals, they won't be counted as\n    // dependencies of this effect.\n    this.loggingService.log(`User set to ${user}`);\n  });\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Creating a Named Effect as a Component Field in TypeScript",
    "codeDescription": "This snippet shows how to create a named effect by assigning it to a component field.",
    "codeLanguage": "typescript",
    "codeTokens": 69,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/overview.md#2025-04-08_snippet_7",
    "pageTitle": "Angular Signals Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({...})\nexport class EffectiveCounterComponent {\n  readonly count = signal(0);\n\n  private loggingEffect = effect(() => {\n    console.log(`The count is: ${this.count()}`);\n  });\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing Two-Way Data Binding with ngModel in Angular Forms",
    "codeDescription": "Setting up two-way data binding on form input elements using [(ngModel)] with the required name attribute to register each control with NgForm.",
    "codeLanguage": "html",
    "codeTokens": 244,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/template-driven-forms.md#2025-04-08_snippet_9",
    "pageTitle": "Building a Template-Driven Form in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<form #actorForm=\"ngForm\">\n  {{model | json}}\n  <div class=\"form-group\">\n    <label for=\"name\">Name</label>\n    <input type=\"text\" class=\"form-control\" id=\"name\"\n           required\n           [(ngModel)]=\"model.name\" name=\"name\">\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"studio\">Studio</label>\n    <input type=\"text\" class=\"form-control\" id=\"studio\"\n           [(ngModel)]=\"model.studio\" name=\"studio\">\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"skill\">Skill</label>\n    <select class=\"form-control\" id=\"skill\"\n            required\n            [(ngModel)]=\"model.skill\" name=\"skill\">\n      <option *ngFor=\"let pow of skills\" [value]=\"pow\">{{pow}}</option>\n    </select>\n  </div>\n</form>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Providing Services in Angular",
    "codeDescription": "Demonstrates how to provide a service at the application root level using the @Injectable decorator. This approach allows for better tree-shaking and optimization in production builds.",
    "codeLanguage": "TypeScript",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/best-practices/style-guide.md#2025-04-08_snippet_35",
    "pageTitle": "Angular Coding Style Guide",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "@Injectable({\n  providedIn: 'root'\n})\nexport class Service {\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Generating an Attribute Directive with Angular CLI",
    "codeDescription": "Command for using the Angular CLI to generate a new directive called 'highlight'. This creates both the directive file and a corresponding test file.",
    "codeLanguage": "shell",
    "codeTokens": 45,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/attribute-directives.md#2025-04-08_snippet_0",
    "pageTitle": "Building and Using Attribute Directives in Angular",
    "codeList": [
      {
        "language": "shell",
        "code": "ng generate directive highlight"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing Effect Cleanup in Angular",
    "codeDescription": "Demonstrates how to use the onCleanup function in Angular effects to cancel long-running operations. The example shows setting up a timer that logs a message after 1 second, and clearing the timeout when the effect is cleaned up.",
    "codeLanguage": "typescript",
    "codeTokens": 108,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/overview.md#2025-04-08_snippet_12",
    "pageTitle": "Angular Signals Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "effect((onCleanup) => {\n  const user = currentUser();\n\n  const timer = setTimeout(() => {\n    console.log(`1 second ago, the user became ${user}`);\n  }, 1000);\n\n  onCleanup(() => {\n    clearTimeout(timer);\n  });\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Angular Service Package Reference",
    "codeDescription": "Reference to the HttpClient service package location in Angular's common HTTP module.",
    "codeLanguage": "markdown",
    "codeTokens": 28,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/overview.md#2025-04-08_snippet_0",
    "pageTitle": "Angular HTTP Client Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "@angular/common/http"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Defining linkedSignal Function in TypeScript",
    "codeDescription": "Defines a function for creating linked signals. It supports both simple computations and more complex options with source and computation functions.",
    "codeLanguage": "TypeScript",
    "codeTokens": 138,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/core/index.api.md#2025-04-08_snippet_25",
    "pageTitle": "Angular Core API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export function linkedSignal<D>(computation: () => D, options?: {\n    equal?: ValueEqualityFn<NoInfer<D>>;\n}): WritableSignal<D>;\n\nexport function linkedSignal<S, D>(options: {\n    source: () => S;\n    computation: (source: NoInfer<S>, previous?: {\n        source: NoInfer<S>;\n        value: NoInfer<D>;\n    }) => D;\n    equal?: ValueEqualityFn<NoInfer<D>>;\n}): WritableSignal<D>;"
      }
    ],
    "relevance": 0.944
  },
  {
    "codeTitle": "Component with Child Components and Directives in Angular Ivy",
    "codeDescription": "Example showing how directives, child components, and host bindings are represented in the EXPANDO section of LView/TView.data. This demonstrates how Angular tracks dynamically-sized data structures.",
    "codeLanguage": "typescript",
    "codeTokens": 251,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/src/render3/VIEW_DATA.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Ivy Renderer Data Layout Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  template: `<child tooltip></child>`\n})\nclass MyApp {\n\n  static ɵcmp = ɵɵdefineComponent({\n    ...,\n    decls: 1,\n    template: function(rf: RenderFlags, ctx: MyApp) {\n      if (rf & RenderFlags.Create) {\n        ɵɵelement(0, 'child', ['tooltip', null]);\n      }\n      ...\n    },\n    directives: [Child, Tooltip]\n  });\n}\n\n\n@Component({\n  selector: 'child',\n  ...\n})\nclass Child {\n  @HostBinding('tooltip') hostTitle = 'Hello World!';\n  static ɵcmp = ɵɵdefineComponent({\n    ...\n    hostVars: 1\n  });\n  ...\n}\n\n@Directive({\n  selector: '[tooltip]'\n})\nclass Tooltip {\n  @HostBinding('title') hostTitle = 'greeting';\n  static ɵdir = ɵɵdefineDirective({\n    ...\n    hostVars: 1\n  });\n  ...\n}"
      }
    ],
    "relevance": 0.944
  },
  {
    "codeTitle": "Applying Basic DatePipe in Angular HTML Template",
    "codeDescription": "Shows how to use the pipe operator (|) to apply the date pipe to a birthday property in an Angular template. The pipe transforms the Date object into a human-readable date format.",
    "codeLanguage": "angular-html",
    "codeTokens": 62,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/pipes/template.md#2025-04-08_snippet_0",
    "pageTitle": "Using Pipes in Angular Templates",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<p>The hero's birthday is {{ birthday | date }}</p>"
      }
    ],
    "relevance": 0.944
  },
  {
    "codeTitle": "Prioritizing Important Images with NgOptimizedImage",
    "codeDescription": "Demonstrates how to prioritize loading of important images using the priority attribute.",
    "codeLanguage": "typescript",
    "codeTokens": 51,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/11-optimizing-images/README.md#2025-04-08_snippet_3",
    "pageTitle": "Optimizing Images with NgOptimizedImage in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "<img ngSrc=\"www.example.com/image.png\" height=\"600\" width=\"800\" priority />"
      }
    ],
    "relevance": 0.944
  },
  {
    "codeTitle": "Implementing getQuote Method in Angular Component",
    "codeDescription": "This snippet demonstrates the implementation of the getQuote method in the TwainComponent. It shows how the component interacts with an injected TwainService to fetch quotes asynchronously.",
    "codeLanguage": "typescript",
    "codeTokens": 135,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_16",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "getQuote() {\n  this.errorMessage = '';\n  this.quote = this.twainService.getQuote().pipe(\n    startWith('...'),\n    catchError((err: any) => {\n      // Wait a turn because componentDidCatch runs after the error is caught in\n      // component and the error message would be wiped out by this timer otherwise.\n      setTimeout(() => this.errorMessage = err.message || err.toString());\n      return of('...');\n    })\n  );\n}"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Implementing i18n Component Example in TypeScript",
    "codeDescription": "Example component showing i18n attribute usage and plural form handling in Angular templates. Demonstrates usage of i18n markers and template bindings.",
    "codeLanguage": "typescript",
    "codeTokens": 152,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/src/render3/i18n/i18n.md#2025-04-08_snippet_0",
    "pageTitle": "Angular i18n Message Implementation Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  template: `\n    <div i18n-title title=\"Hello {{name}}!\" i18n>\n      {{count}} is rendered as:\n      <b *ngIf=\"exp\">\n        { count, plural,\n            =0 {no <b title=\"none\">emails</b>!}\n            =1 {one <i>email</i>}\n            other {{{count}} <span title=\"{{count}}\">emails</span>}\n        }\n      </b>.\n    </div>\n  `\n})\nclass MyComponent {\n}"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Using NgClass with a Method in Angular Template",
    "codeDescription": "This snippet shows how to use NgClass with a method in an Angular template, binding to the currentClasses property.",
    "codeLanguage": "HTML",
    "codeTokens": 58,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div [ngClass]=\"currentClasses\">This div is initially saveable, unchanged, and special.</div>"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "HTML Template Binding Example",
    "codeDescription": "Demonstrates safe HTML content binding in Angular templates using both interpolation and innerHTML binding.",
    "codeLanguage": "html",
    "codeTokens": 34,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/security.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Security Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "src/app/inner-html-binding.component.html"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Creating New SSR Angular Project",
    "codeDescription": "Command to create a new Angular project with server-side rendering enabled using Angular CLI.",
    "codeLanguage": "shell",
    "codeTokens": 33,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/ssr.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Server and Hybrid Rendering Documentation",
    "codeList": [
      {
        "language": "shell",
        "code": "ng new --ssr"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Configuring TestBed for ValueService Testing",
    "codeDescription": "Setting up TestBed to provide the ValueService for testing, demonstrating how to configure the testing module in the beforeEach function.",
    "codeLanguage": "typescript",
    "codeTokens": 70,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/services.md#2025-04-08_snippet_3",
    "pageTitle": "Testing Angular Services: Strategies and Best Practices",
    "codeList": [
      {
        "language": "typescript",
        "code": "let valueService: ValueService;\n\nbeforeEach(() => {\n  TestBed.configureTestingModule({ providers: [ValueService] });\n  valueService = TestBed.inject(ValueService);\n});"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Implementing DynamicFormQuestionComponent in Angular",
    "codeDescription": "This component is responsible for rendering individual questions in a dynamic form based on the question model.",
    "codeLanguage": "TypeScript",
    "codeTokens": 121,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/dynamic-forms.md#2025-04-08_snippet_5",
    "pageTitle": "Building Dynamic Forms in Angular",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { QuestionBase } from './question-base';\n\n@Component({\n  selector: 'app-question',\n  templateUrl: './dynamic-form-question.component.html'\n})\nexport class DynamicFormQuestionComponent {\n  @Input() question!: QuestionBase<string>;\n  @Input() form!: FormGroup;\n  get isValid() { return this.form.controls[this.question.key].valid; }\n}\n"
      },
      {
        "language": "HTML",
        "code": "<div [formGroup]=\"form\">\n  <label [attr.for]=\"question.key\">{{question.label}}</label>\n\n  <div [ngSwitch]=\"question.controlType\">\n\n    <input *ngSwitchCase=\"'textbox'\" [formControlName]=\"question.key\"\n            [id]=\"question.key\" [type]=\"question.type\">\n\n    <select [id]=\"question.key\" *ngSwitchCase=\"'dropdown'\" [formControlName]=\"question.key\">\n      <option *ngFor=\"let opt of question.options\" [value]=\"opt.key\">{{opt.value}}</option>\n    </select>\n\n  </div>\n\n  <div class=\"errorMessage\" *ngIf=\"!isValid\">{{question.label}} is required</div>\n</div>\n"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "i18n String Renderer Implementation in TypeScript",
    "codeDescription": "Pseudo-code implementation showing how i18n strings are rendered by concatenating string parts and handling interpolations.",
    "codeLanguage": "typescript",
    "codeTokens": 226,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/src/render3/i18n/i18n.md#2025-04-08_snippet_2",
    "pageTitle": "Angular i18n Message Implementation Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "function render18nString(i18nStringParts: string|number) {\n  const accumulator:string[] = [];\n  i18nStringParts.forEach(part => accumulate(part));\n  return accumulatorFlush(sanitizer);\n\n /**\n   * Collect intermediate interpolation values.\n   */\n  function accumulate(value: string|number): void {\n    if (typeof value == 'number') {\n      // if the value is a number then look it up in previous `i18nBind` location.\n      value = lviewData[bindIndex + value];\n    }\n    accumulator.push(stringify(value));\n  }\n\n  /**\n   * Flush final interpolation value.\n   */\n  function accumulatorFlush(sanitizer: null|((text: string)=>string) = null): string {\n    let interpolation = accumulator.join('');\n    if (sanitizer != null) {\n      interpolation = sanitizer(interpolation);\n    }\n    accumulator.length = 0;\n    return interpolation;\n  }\n}"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Setting up TestBed for Angular Component Testing",
    "codeDescription": "This snippet demonstrates how to set up TestBed for testing an Angular component with dependencies. It shows the complete beforeEach() function using TestBed.inject() to provide necessary services.",
    "codeLanguage": "typescript",
    "codeTokens": 128,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_13",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "beforeEach(() => {\n  userServiceSpy = jasmine.createSpyObj('UserService', ['getLoggedInUser']);\n  TestBed.configureTestingModule({\n    imports: [RouterTestingModule],\n    declarations: [WelcomeComponent],\n    providers: [{ provide: UserService, useValue: userServiceSpy }],\n  });\n  fixture = TestBed.createComponent(WelcomeComponent);\n  component = fixture.componentInstance;\n  userService = TestBed.inject(UserService) as jasmine.SpyObj<UserService>;\n});"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Aliasing Inputs and Outputs from Host Directives in Angular Component",
    "codeDescription": "Shows how to alias inputs and outputs from host directives to customize the API of a component in Angular.",
    "codeLanguage": "typescript",
    "codeTokens": 88,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/directive-composition-api.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Directive Composition API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  selector: 'admin-menu',\n  template: 'admin-menu.html',\n  hostDirectives: [{\n    directive: MenuBehavior,\n    inputs: ['menuId: id'],\n    outputs: ['menuClosed: closed'],\n  }],\n})\nexport class AdminMenu { }"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Implementing a Service with Conditional Logic in Angular",
    "codeDescription": "This snippet shows the implementation of a HeroService that includes conditional logic based on user authorization.",
    "codeLanguage": "typescript",
    "codeTokens": 105,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection-providers.md#2025-04-08_snippet_6",
    "pageTitle": "Configuring Dependency Providers in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "class HeroService {\n  constructor(\n    private logger: Logger,\n    private isAuthorized: boolean) { }\n\n  getHeroes() {\n    const auth = this.isAuthorized ? 'authorized' : 'unauthorized';\n    this.logger.log(`Getting heroes for ${auth} user.`);\n    return HEROES.filter(hero => this.isAuthorized || !hero.isSecret);\n  }\n}"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Creating a Simple Form Control with Type Inference",
    "codeDescription": "Shows how to create a simple FormControl with automatic type inference based on the initial value.",
    "codeLanguage": "typescript",
    "codeTokens": 38,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/typed-forms.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Typed Forms Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const email = new FormControl('angularrox@gmail.com');"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Querying Multiple Template Fragments in Angular Component",
    "codeDescription": "Demonstrates how to query for multiple named template fragments using @ViewChild in an Angular component.",
    "codeLanguage": "angular-ts",
    "codeTokens": 163,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/ng-template.md#2025-04-08_snippet_4",
    "pageTitle": "Creating and Using Template Fragments with ng-template in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  /* ... */,\n  template: `\n    <p>This is a normal element</p>\n\n    <ng-template #fragmentOne>\n      <p>This is one template fragment</p>\n    </ng-template>\n\n    <ng-template #fragmentTwo>\n      <p>This is another template fragment</p>\n    </ng-template>\n  `,\n})\nexport class ComponentWithFragment {\n  @ViewChild('fragmentOne', {read: TemplateRef}) fragmentOne: TemplateRef<unknown> | undefined;\n  @ViewChild('fragmentTwo', {read: TemplateRef}) fragmentTwo: TemplateRef<unknown> | undefined;\n}"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Generating i18n Message in Angular TypeScript",
    "codeDescription": "This snippet shows the TypeScript representation of the i18n message generated by the Angular template compiler. It includes markers for dynamic content and pluralization.",
    "codeLanguage": "typescript",
    "codeTokens": 139,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/src/render3/i18n/i18n.md#2025-04-08_snippet_4",
    "pageTitle": "Angular i18n Message Implementation Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "const MSG_div = `�0� is rendered as: �*3:1��#1:1�{�0:1�, plural,\n  =0 {no <b title=\"none\">emails</b>!}\n  =1 {one <i>email</i>}\n  other {�0:1� <span title=\"�0:1�\">emails</span>}\n}�/#1:1��/*3:1�.`;"
      }
    ],
    "relevance": 0.941
  },
  {
    "codeTitle": "Configuring DatePipe in Angular Component",
    "codeDescription": "Demonstrates the component setup required for using DatePipe, including importing DatePipe from @angular/common and adding it to the component's imports array. The component defines a birthday property as a Date object.",
    "codeLanguage": "typescript",
    "codeTokens": 99,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/pipes/template.md#2025-04-08_snippet_1",
    "pageTitle": "Using Pipes in Angular Templates",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Component } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  templateUrl: './app.component.html',\n  imports: [DatePipe],\n})\nexport class AppComponent {\n  birthday = new Date();\n}"
      }
    ],
    "relevance": 0.941
  },
  {
    "codeTitle": "Simple Transition Definition in Angular Animation",
    "codeDescription": "Defines a unidirectional transition from 'open' to 'closed' state with a 1-second animation duration.",
    "codeLanguage": "typescript",
    "codeTokens": 49,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/overview.md#2025-04-08_snippet_8",
    "pageTitle": "Introduction to Angular Animations Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "transition('open => closed', [\n  animate('1s')\n]),\n"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Using Static Query Option with @ViewChild in Angular",
    "codeDescription": "This snippet shows how to use the static option with @ViewChild decorator to make the query result available earlier in the component lifecycle. It demonstrates accessing the query result in the ngOnInit hook.",
    "codeLanguage": "angular-ts",
    "codeTokens": 115,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/queries.md#2025-04-08_snippet_12",
    "pageTitle": "Referencing Component Children with Queries in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'custom-card',\n  template: '<custom-card-header>Visit sunny California!</custom-card-header>',\n})\nexport class CustomCard {\n  @ViewChild(CustomCardHeader, {static: true}) header: CustomCardHeader;\n\n  ngOnInit() {\n    console.log(this.header.text);\n  }\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Angular Component Before Signal Input Migration",
    "codeDescription": "Example of a component using traditional @Input decorator before migration",
    "codeLanguage": "typescript",
    "codeTokens": 94,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/migrations/signal-inputs.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Signal Inputs Migration Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Component, Input} from '@angular/core';\n\n@Component({\n  template: `Name: {{name ?? ''}}`\n})\nexport class MyComponent {\n  @Input() name: string|undefined = undefined;\n\n  someMethod(): number {\n    if (this.name) {\n      return this.name.length;\n    }\n    return -1;\n  }\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Using Keyboard Code Values in Angular Templates",
    "codeDescription": "Shows how to use the 'code' suffix in Angular to bind to specific physical keyboard codes rather than key values. This example listens for Alt+LeftShift key combination.",
    "codeLanguage": "html",
    "codeTokens": 71,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/event-listeners.md#2025-04-08_snippet_5",
    "pageTitle": "Event Listeners in Angular Templates",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- Matches alt and left shift -->\n<input type=\"text\" (keydown.code.alt.shiftleft)=\"updateField($event)\" />"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Consolidating Angular Test Setup with Async/Await",
    "codeDescription": "This TypeScript snippet demonstrates how to consolidate the asynchronous and synchronous setup steps for an Angular component test into a single async function using await.",
    "codeLanguage": "TypeScript",
    "codeTokens": 84,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_45",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "beforeEach(async () => {\n  await TestBed.configureTestingModule({\n    declarations: [ BannerComponent ],\n  }).compileComponents();\n\n  fixture = TestBed.createComponent(BannerComponent);\n  component = fixture.componentInstance;\n  h1 = fixture.nativeElement.querySelector('h1');\n});"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Implementing Page Object for Angular Component Testing",
    "codeDescription": "This TypeScript snippet defines a Page class that encapsulates the logic for accessing and manipulating the HeroDetailComponent's properties in tests.",
    "codeLanguage": "TypeScript",
    "codeTokens": 262,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_39",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "class Page {\n  get buttons()  { return this.queryAll<HTMLButtonElement>('button'); }\n  get saveBtn() { return this.buttons[0]; }\n  get cancelBtn() { return this.buttons[1]; }\n  get nameDisplay() { return this.query<HTMLElement>('span'); }\n  get nameInput() { return this.query<HTMLInputElement>('input'); }\n\n  gotoListSpy!: jasmine.Spy;\n  navigateSpy!: jasmine.Spy;\n\n  constructor(private fixture: ComponentFixture<HeroDetailComponent>) {\n    // get the navigate spy from the injected router spy object\n    const routerSpy = fixture.debugElement.injector.get(Router) as any;\n    this.navigateSpy = routerSpy.navigate;\n\n    // spy on component's `gotoList()` method\n    const component = fixture.componentInstance;\n    this.gotoListSpy = spyOn(component, 'gotoList');\n  }\n\n  //// query helpers ///\n  private query<T>(selector: string): T {\n    return this.fixture.nativeElement.querySelector(selector);\n  }\n\n  private queryAll<T>(selector: string): T[] {\n    return this.fixture.nativeElement.querySelectorAll(selector);\n  }\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Debug Element Usage in Tests",
    "codeDescription": "Accessing and testing component's native element through DebugElement abstraction.",
    "codeLanguage": "typescript",
    "codeTokens": 32,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-basics.md#2025-04-08_snippet_4",
    "pageTitle": "Testing Angular Components",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { DebugElement } from '@angular/core';"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Configuring Non-blurred Placeholders in NgOptimizedImage",
    "codeDescription": "Shows how to disable the default CSS blur effect on image placeholders by providing a placeholderConfig object with the blur property set to false.",
    "codeLanguage": "angular-html",
    "codeTokens": 77,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/image-optimization.md#2025-04-08_snippet_9",
    "pageTitle": "Using NgOptimizedImage Directive in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<img \n  ngSrc=\"cat.jpg\" \n  width=\"400\" \n  height=\"200\" \n  placeholder \n  [placeholderConfig]=\"{blur: false}\"\n/>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Importing FormsModule in Angular Module",
    "codeDescription": "Example showing how to properly import and declare the FormsModule in an Angular module to resolve missing export errors related to form directives.",
    "codeLanguage": "typescript",
    "codeTokens": 60,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/errors/NG0301.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Export Not Found Error Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { FormsModule } from '@angular/forms';\n\n@NgModule({\n  …\n  imports: [\n    FormsModule,\n    …\n"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Using @placeholder with @defer in Angular HTML",
    "codeDescription": "Shows how to define placeholder content to display before the deferred content is loaded, with an optional minimum display time.",
    "codeLanguage": "angular-html",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/defer.md#2025-04-08_snippet_1",
    "pageTitle": "Deferred Loading with @defer in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@defer {\n  <large-component />\n} @placeholder (minimum 500ms) {\n  <p>Placeholder content</p>\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Parsed ICU Data Structure in Angular",
    "codeDescription": "TypeScript representation of how Angular parses an ICU message into a structured object. The parsed structure includes the type of ICU (plural), the expression binding index, and the different case strings with HTML.",
    "codeLanguage": "typescript",
    "codeTokens": 131,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/src/render3/i18n/i18n.md#2025-04-08_snippet_18",
    "pageTitle": "Angular i18n Message Implementation Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "const icu = {\n  type: 'plural',             // or 'select'\n  expressionBindingIndex: 0,  // from �0�,\n  cases: [\n    'no <b title=\"none\">emails</b>!',\n    'one <i>email</i>',\n    '�0� <span title=\"�0�\">emails</span>',\n  ]\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Using Meaning, Custom ID, and Description with $localize in Angular",
    "codeDescription": "This example demonstrates how to combine a meaning, custom ID, and description in a $localize tagged message string for a TypeScript variable.",
    "codeLanguage": "typescript",
    "codeTokens": 72,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/manage-marked-text.md#2025-04-08_snippet_7",
    "pageTitle": "Managing Marked Text with Custom IDs in Angular Internationalization",
    "codeList": [
      {
        "language": "typescript",
        "code": "variableText3 = $localize`:site header|An introduction header for this sample@@introductionHeader:Hello i18n!`;"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Angular Logical and Comparison Operators",
    "codeDescription": "Examples of supported logical and comparison operators in Angular expressions",
    "codeLanguage": "javascript",
    "codeTokens": 52,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/expression-syntax.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Expression Syntax Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "a > b ? true : false\n&&\n||\n!\npossiblyNullValue ?? 'default'\n<, <=, >, >=, ==, ===, !=="
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Component Creation in Tests",
    "codeDescription": "Creating component instance using TestBed.createComponent() and accessing it through ComponentFixture.",
    "codeLanguage": "typescript",
    "codeTokens": 40,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-basics.md#2025-04-08_snippet_3",
    "pageTitle": "Testing Angular Components",
    "codeList": [
      {
        "language": "typescript",
        "code": "fixture = TestBed.createComponent(BannerComponent);\ncomponent = fixture.componentInstance;\nexpect(component).toBeTruthy();"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Angular RegExp Literals (Unsupported)",
    "codeDescription": "Example of unsupported RegExp literal syntax in Angular expressions",
    "codeLanguage": "javascript",
    "codeTokens": 22,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/expression-syntax.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Expression Syntax Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "/\\d+/"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Implementing Type Narrowing with a Template Guard Function in Angular",
    "codeDescription": "This snippet demonstrates how to narrow an input expression's type using a static ngTemplateGuard method. It creates a directive that only renders its template if the actor is a User, narrowing the type from User|Robot to User within the template.",
    "codeLanguage": "typescript",
    "codeTokens": 165,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/structural-directives.md#2025-04-08_snippet_9",
    "pageTitle": "Angular Structural Directives Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "// This directive only renders its template if the actor is a user.\n// You want to assert that within the template, the type of the `actor`\n// expression is narrowed to `User`.\n@Directive(...)\nclass ActorIsUser {\n  @Input() actor: User|Robot;\n\n  static ngTemplateGuard_actor(dir: ActorIsUser, expr: User|Robot): expr is User {\n    // The return statement is unnecessary in practice, but included to\n    // prevent TypeScript errors.\n    return true;\n  }\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Binding Form Submission in Angular Template",
    "codeDescription": "This HTML snippet demonstrates how to bind the form's ngSubmit event to the onSubmit() method of the component.",
    "codeLanguage": "HTML",
    "codeTokens": 52,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/template-driven-forms.md#2025-04-08_snippet_17",
    "pageTitle": "Building a Template-Driven Form in Angular",
    "codeList": [
      {
        "language": "HTML",
        "code": "<form (ngSubmit)=\"onSubmit()\" #actorForm=\"ngForm\">"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Disabling Submit Button Based on Form Validity in Angular",
    "codeDescription": "This HTML snippet shows how to disable the submit button when the form is invalid by binding to the form's validity state.",
    "codeLanguage": "HTML",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/template-driven-forms.md#2025-04-08_snippet_18",
    "pageTitle": "Building a Template-Driven Form in Angular",
    "codeList": [
      {
        "language": "HTML",
        "code": "<button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!actorForm.form.valid\">Submit</button>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Injecting and Using Housing Service in Component",
    "codeDescription": "Code to inject the HousingService into the HomeComponent and initialize the housingLocationList data by calling the service's method.",
    "codeLanguage": "typescript",
    "codeTokens": 86,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/09-services/README.md#2025-04-08_snippet_5",
    "pageTitle": "Creating and Using Angular Services with Dependency Injection",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class HomeComponent {\n  housingLocationList: HousingLocation[] = [];\n  housingService: HousingService = inject(HousingService);\n\n  constructor() {\n    this.housingLocationList = this.housingService.getAllHousingLocations();\n  }\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Importing Dependencies in NgModule",
    "codeDescription": "Shows how to use the imports property to specify dependencies for components declared in the NgModule. This example imports PopupTrigger and SelectionIndicator components that are needed by CustomMenu and CustomMenuItem.",
    "codeLanguage": "typescript",
    "codeTokens": 98,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/ngmodules/overview.md#2025-04-08_snippet_4",
    "pageTitle": "Angular NgModules Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@NgModule({\n  /* ... */\n  // CustomMenu and CustomMenuItem depend on the PopupTrigger and SelectorIndicator components.\n  imports: [PopupTrigger, SelectionIndicator],\n  declarations: [CustomMenu, CustomMenuItem],\n})\nexport class CustomMenuModule { }"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Programmatically Subscribing to Angular Output Events",
    "codeDescription": "Subscribe to component outputs programmatically when working with dynamically created components. Useful for handling events from components created through ViewContainerRef.",
    "codeLanguage": "typescript",
    "codeTokens": 75,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/outputs.md#2025-04-08_snippet_7",
    "pageTitle": "Angular Custom Events with Outputs",
    "codeList": [
      {
        "language": "typescript",
        "code": "const someComponentRef: ComponentRef<SomeComponent> = viewContainerRef.createComponent(/*...*/);\n\nsomeComponentRef.instance.someEventProperty.subscribe(eventData => {\n  console.log(eventData);\n});"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Executing Signal Input Migration Command in Angular CLI",
    "codeDescription": "Command to run the automated migration schematic for converting @Input decorators to signal inputs",
    "codeLanguage": "bash",
    "codeTokens": 36,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/migrations/signal-inputs.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Signal Inputs Migration Guide",
    "codeList": [
      {
        "language": "bash",
        "code": "ng generate @angular/core:signal-input-migration"
      }
    ],
    "relevance": 0.939
  },
  {
    "codeTitle": "Compiler-Generated Code for i18n with ng-template in Angular",
    "codeDescription": "The Angular compiler-generated TypeScript code for handling i18n in an ng-template element. Shows how i18nStart and i18nEnd functions are used to handle translation without a common parent element.",
    "codeLanguage": "typescript",
    "codeTokens": 113,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/src/render3/i18n/i18n.md#2025-04-08_snippet_20",
    "pageTitle": "Angular i18n Message Implementation Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "const MSG_text = 'Translated text';\n\nfunction MyComponent_Template_0(rf: RenderFlags, ctx: any) {\n  if (rf & RenderFlags.Create) {\n    i18nStart(0, MSG_text, 1);\n    i18nEnd();\n  }\n  ...\n}"
      }
    ],
    "relevance": 0.939
  },
  {
    "codeTitle": "Configuring TestBed for Automatic Change Detection",
    "codeDescription": "This code configures the TestBed to use automatic change detection by adding ComponentFixtureAutoDetect to the providers array.",
    "codeLanguage": "typescript",
    "codeTokens": 61,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_6",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "TestBed.configureTestingModule({\n  declarations: [ BannerComponent ],\n  providers: [\n    { provide: ComponentFixtureAutoDetect, useValue: true }\n  ]\n});"
      }
    ],
    "relevance": 0.939
  },
  {
    "codeTitle": "Configuring CSP Nonce in Angular Application",
    "codeDescription": "TypeScript code showing how to provide a Content Security Policy nonce to Angular using the CSP_NONCE injection token. This approach is useful when the nonce is available at runtime.",
    "codeLanguage": "typescript",
    "codeTokens": 97,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/security.md#2025-04-08_snippet_7",
    "pageTitle": "Angular Security Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {bootstrapApplication, CSP_NONCE} from '@angular/core';\nimport {AppComponent} from './app/app.component';\n\nbootstrapApplication(AppComponent, {\n  providers: [{\n    provide: CSP_NONCE,\n    useValue: globalThis.myRandomNonceValue\n  }]\n});"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Example Component Selector Declaration in Angular",
    "codeDescription": "This code snippet shows the basic syntax for declaring a component selector in Angular. When debugging selector collision errors, developers should search for components using identical selectors in their codebase.",
    "codeLanguage": "typescript",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/errors/NG0300.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Selector Collision Error Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  selector: 'YOUR_STRING',\n  …\n})"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Implementing Async Data Helper for Testing",
    "codeDescription": "Utility function that creates an async observable that emits data in the next JavaScript engine turn",
    "codeLanguage": "typescript",
    "codeTokens": 47,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_24",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "export function asyncData<T>(data: T) {\n  return defer(() => Promise.resolve(data));\n}"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Component Metadata JSON for Ivy",
    "codeDescription": "Shows the transformed metadata structure for the component in Ivy, which includes static fields for the component definition and selector information needed for module scope compilation.",
    "codeLanguage": "json",
    "codeTokens": 104,
    "codeId": "https://github.com/angular/angular/blob/main/packages/compiler/design/separate_compilation.md#2025-04-08_snippet_2",
    "pageTitle": "Separate Compilation Design Doc for Angular Ivy",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"__symbolic\": \"module\",\n  \"version\": 4,\n  \"metadata\": {\n    \"MyComponent\": {\n      \"__symbolic\": \"class\",\n      \"statics\": {\n        \"ɵcmp\": {},\n        \"ngSelector\": \"my-comp\"\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Adding LowerCasePipe to Component Imports",
    "codeDescription": "Code showing how to include the LowerCasePipe in the component's imports array, making it available for use in the template.",
    "codeLanguage": "ts",
    "codeTokens": 49,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/22-pipes/README.md#2025-04-08_snippet_2",
    "pageTitle": "Using Pipes in Angular Templates",
    "codeList": [
      {
        "language": "ts",
        "code": "@Component({\n    ...\n    imports: [LowerCasePipe]\n})"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Using linkedSignal for Dependent State in Angular Shipping Method Selection",
    "codeDescription": "This snippet showcases how to use linkedSignal to create a dependent state for shipping method selection. It ensures that the selected option always remains valid even when the available options change.",
    "codeLanguage": "typescript",
    "codeTokens": 125,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/linked-signal.md#2025-04-08_snippet_1",
    "pageTitle": "Dependent State Management with linkedSignal in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({/* ... */})\nexport class ShippingMethodPicker {\n  shippingOptions: Signal<ShippingMethod[]> = getShippingOptions();\n\n  // Initialize selectedOption to the first shipping option.\n  selectedOption = linkedSignal(() => this.shippingOptions()[0]);\n\n  changeShipping(index: number) {\n    this.selectedOption.set(this.shippingOptions()[index]);\n  }\n}"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Exporting Components from NgModule",
    "codeDescription": "Demonstrates how to use the exports property to make components available to other components and NgModules. This allows components declared in one module to be used by other modules that import it.",
    "codeLanguage": "typescript",
    "codeTokens": 110,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/ngmodules/overview.md#2025-04-08_snippet_5",
    "pageTitle": "Angular NgModules Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@NgModule({\n  imports: [PopupTrigger, SelectionIndicator],\n  declarations: [CustomMenu, CustomMenuItem],\n\n  // Make CustomMenu and CustomMenuItem available to\n  // components and NgModules that import CustomMenuModule.\n  exports: [CustomMenu, CustomMenuItem],\n})\nexport class CustomMenuModule { }"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Initial Component Test Setup",
    "codeDescription": "Basic test configuration using TestBed to test component creation and setup. Uses waitForAsync for handling asynchronous compilation.",
    "codeLanguage": "typescript",
    "codeTokens": 138,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-basics.md#2025-04-08_snippet_1",
    "pageTitle": "Testing Angular Components",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { BannerComponent } from './banner.component';\n\ndescribe('BannerComponent', () => {\n  let component: BannerComponent;\n  let fixture: ComponentFixture<BannerComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ BannerComponent ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(BannerComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Advanced HTTP Request Matching",
    "codeDescription": "Examples of using predicate functions for custom request matching logic.",
    "codeLanguage": "typescript",
    "codeTokens": 72,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/testing.md#2025-04-08_snippet_5",
    "pageTitle": "Testing HTTP Requests in Angular Applications",
    "codeList": [
      {
        "language": "typescript",
        "code": "// Look for one request that has a request body.\nconst requestsWithBody = httpTesting.expectOne(req => req.body !== null);\n\n// Assert that no mutation requests have been issued.\nhttpTesting.expectNone(req => req.method !== 'GET');"
      }
    ],
    "relevance": 0.937
  },
  {
    "codeTitle": "Using Default idle Trigger with @defer in Angular HTML",
    "codeDescription": "Shows the default behavior of @defer which uses the idle trigger to load content when the browser is idle.",
    "codeLanguage": "angular-html",
    "codeTokens": 58,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/defer.md#2025-04-08_snippet_5",
    "pageTitle": "Deferred Loading with @defer in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@defer {\n  <large-cmp />\n} @placeholder {\n  <div>Large component placeholder</div>\n}"
      }
    ],
    "relevance": 0.937
  },
  {
    "codeTitle": "Input Property with Type Inference",
    "codeDescription": "Example showing TypeScript type inference for input properties with default values.",
    "codeLanguage": "typescript",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/inputs.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Input Properties Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({/*...*/})\nexport class CustomSlider {\n  // TypeScript infers that this input is a number, returning InputSignal<number>.\n  value = input(0);\n}"
      }
    ],
    "relevance": 0.937
  },
  {
    "codeTitle": "Compiled Directive in JavaScript with Ivy",
    "codeDescription": "Shows how the example directive is transformed after Ivy compilation, where the decorator is replaced with a static field containing the directive definition.",
    "codeLanguage": "javascript",
    "codeTokens": 72,
    "codeId": "https://github.com/angular/angular/blob/main/packages/compiler/design/separate_compilation.md#2025-04-08_snippet_4",
    "pageTitle": "Separate Compilation Design Doc for Angular Ivy",
    "codeList": [
      {
        "language": "javascript",
        "code": "export class MyDirective {\n  constructor() {\n    this.dirId = 'some id';\n  }\n  static ɵdir = ɵɵdefineDirective({...});\n}"
      }
    ],
    "relevance": 0.937
  },
  {
    "codeTitle": "Passing Multiple Parameters to DatePipe in Angular Template",
    "codeDescription": "Demonstrates passing multiple parameters to a pipe by separating them with colons. This example uses the date pipe with a time format and timezone parameter to display the current time in UTC.",
    "codeLanguage": "angular-html",
    "codeTokens": 67,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/pipes/template.md#2025-04-08_snippet_3",
    "pageTitle": "Using Pipes in Angular Templates",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<p>The current time is: {{ currentTime | date:'hh:mm':'UTC' }}</p>"
      }
    ],
    "relevance": 0.937
  },
  {
    "codeTitle": "Various Binding Types in Angular DI",
    "codeDescription": "Demonstrates different ways to bind dependencies: to classes, to values, to factories, and using shorthand syntax for class bindings.",
    "codeLanguage": "typescript",
    "codeTokens": 153,
    "codeId": "https://github.com/angular/angular/blob/main/packages/docs/di/di.md#2025-04-08_snippet_13",
    "pageTitle": "Dependency Injection in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "var inj = Injector.resolveAndCreate([\n  bind(Car).toClass(Car),\n  bind(Engine).toClass(Engine)\n]);\n\nvar inj = Injector.resolveAndCreate([\n  Car,  // syntax sugar for bind(Car).toClass(Car)\n  Engine\n]);\n\nvar inj = Injector.resolveAndCreate([\n  bind(Car).toValue(new Car(new Engine()))\n]);\n\nvar inj = Injector.resolveAndCreate([\n  bind(Car).toFactory((e) => new Car(e), [Engine]),\n  bind(Engine).toFactory(() => new Engine())\n]);"
      }
    ],
    "relevance": 0.936
  },
  {
    "codeTitle": "Using SkipSelf with Optional for Nullable Service Injection",
    "codeDescription": "Shows how to combine 'skipSelf' and 'optional' modifiers when injecting a service. This prevents errors if the service is null in the parent injectors.",
    "codeLanguage": "typescript",
    "codeTokens": 64,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/hierarchical-dependency-injection.md#2025-04-08_snippet_9",
    "pageTitle": "Hierarchical Injectors in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "class Person {\n  parent = inject(Person, {optional: true, skipSelf: true})\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using ng-container with NgIf in Angular Select Element",
    "codeDescription": "This snippet demonstrates how to use ng-container with NgIf to conditionally include options in a select element without affecting the DOM structure.",
    "codeLanguage": "html",
    "codeTokens": 113,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_20",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<select [(ngModel)]=\"hero\">\n  <ng-container *ngFor=\"let h of heroes\">\n    <ng-container *ngIf=\"showSad || h.emotion !== 'sad'\">\n      <option [ngValue]=\"h\">{{ h.name }} ({{ h.emotion }})</option>\n    </ng-container>\n  </ng-container>\n</select>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using Optional Library Header in Angular Template",
    "codeDescription": "This HTML snippet shows how to use an optional library header component within a library card component in an Angular template.",
    "codeLanguage": "html",
    "codeTokens": 54,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/lightweight-injection-tokens.md#2025-04-08_snippet_4",
    "pageTitle": "Optimizing Angular Applications with Lightweight Injection Tokens",
    "codeList": [
      {
        "language": "html",
        "code": "<lib-card>;\n  <lib-header>…</lib-header>;\n</lib-card>;"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using Template Reference with hover Trigger in Angular HTML",
    "codeDescription": "Shows how to use a template reference variable with the hover trigger to specify which element to observe for hover events.",
    "codeLanguage": "angular-html",
    "codeTokens": 61,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/defer.md#2025-04-08_snippet_11",
    "pageTitle": "Deferred Loading with @defer in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<div #greeting>Hello!</div>\n@defer (on hover(greeting)) {\n  <greetings-cmp />\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Configuring Async Observable Test Setup in Angular",
    "codeDescription": "Sets up async observable testing using fakeAsync and jasmine spies for getQuote method",
    "codeLanguage": "typescript",
    "codeTokens": 34,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_23",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "getQuote.and.returnValue(asyncData(testQuote));"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Defining an Angular Component with Inline Styles",
    "codeDescription": "This snippet shows how to add inline styles to an Angular component using the styles property in the @Component decorator.",
    "codeLanguage": "typescript",
    "codeTokens": 98,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/introduction/essentials/components.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Components Overview",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  selector: 'user-profile',\n  template: `\n    <h1>User profile</h1>\n    <p>This is the user profile page</p>\n  `,\n  styles: `h1 { font-size: 3em; } `,\n})\nexport class UserProfile { /* Your component code goes here */ }"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Marking Text in Angular Component Code with $localize",
    "codeDescription": "Demonstrates how to use the $localize tagged message string to mark text in component code for translation, including examples with interpolation and conditional syntax.",
    "codeLanguage": "typescript",
    "codeTokens": 114,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/prepare.md#2025-04-08_snippet_4",
    "pageTitle": "Preparing Angular Components for Internationalization (i18n)",
    "codeList": [
      {
        "language": "typescript",
        "code": "$localize`string_to_translate`;\n$localize`:{i18n_metadata}:string_to_translate`;\n$localize`string_to_translate ${variable_name}`;\n$localize`string_to_translate ${variable_name}:placeholder_name:`;\nreturn this.show ? $localize`Show Tabs` : $localize`Hide tabs`;"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Filter Animation Template in Angular HTML",
    "codeDescription": "HTML template implementation showing how to apply filter animations to a hero list using the filterAnimation trigger.",
    "codeLanguage": "angular-html",
    "codeTokens": 99,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/complex-sequences.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Complex Animation Sequences Guide",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<ul class=\"heroes\" [@filterAnimation]=\"heroTotal\">\n  <li *ngFor=\"let hero of heroes\" class=\"hero\">\n    <div class=\"inner\">\n      <span class=\"badge\">{{ hero.id }}</span>\n      <span>{{ hero.name }}</span>\n    </div>\n  </li>\n</ul>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementing Immediate Defer Loading in Angular",
    "codeDescription": "Demonstrates using the immediate trigger to load deferred content as soon as non-deferred content finishes rendering.",
    "codeLanguage": "angular-html",
    "codeTokens": 62,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/defer.md#2025-04-08_snippet_12",
    "pageTitle": "Deferred Loading with @defer in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@defer (on immediate) {\n  <large-cmp />\n} @placeholder {\n  <div>Large component placeholder</div>\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Binding to HTML Attributes in Angular",
    "codeDescription": "This example demonstrates how to bind values to HTML attributes that don't have corresponding DOM properties, such as ARIA attributes, using the 'attr.' prefix in Angular templates.",
    "codeLanguage": "angular-html",
    "codeTokens": 82,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/binding.md#2025-04-08_snippet_3",
    "pageTitle": "Binding Dynamic Text, Properties, and Attributes in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<!-- Bind the `role` attribute on the `<ul>` element to the component's `listRole` property. -->\n<ul [attr.role]=\"listRole\">"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Handling Identifier Collisions with Input Signals in Angular",
    "codeDescription": "Shows how to handle variable name collisions when migrating to input signals. The example demonstrates resolving conflicts between input signal names and local variables or global identifiers.",
    "codeLanguage": "typescript",
    "codeTokens": 327,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/schematics/migrations/signal-migration/test/golden.txt#2025-04-08_snippet_17",
    "pageTitle": "Angular Input Migration Test Cases",
    "codeList": [
      {
        "language": "typescript",
        "code": "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n// tslint:disable\n\nimport {Component, input} from '@angular/core';\n\nconst complex = 'some global variable';\n\n@Component({template: ''})\nclass MyComp {\n  readonly name = input<string | null>(null);\n  readonly complex = input<string | null>(null);\n\n  valid() {\n    const name = this.name();\n    if (name) {\n      name.charAt(0);\n    }\n  }\n\n  // Input read cannot be stored in a variable: `name`.\n  simpleLocalCollision() {\n    const name = 'some other name';\n    const nameValue = this.name();\n    if (nameValue) {\n      nameValue.charAt(0);\n    }\n  }\n\n  // `this.complex` should conflict with the file-level `complex` variable,\n  // and result in a suffix variable.\n  complexParentCollision() {\n    const complexValue = this.complex();\n    if (complexValue) {\n      complexValue.charAt(0);\n    }\n  }\n\n  nestedShadowing() {\n    const nameValue = this.name();\n    if (nameValue) {\n      nameValue.charAt(0);\n    }\n\n    function nested() {\n      const name = '';\n    }\n  }\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using DatePipe with Parameters in Angular",
    "codeDescription": "Example of how to format a date using Angular's DatePipe with the 'medium' parameter. The pipe transforms a date value into a formatted string according to the specified format.",
    "codeLanguage": "typescript",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/23-pipes-format-data/README.md#2025-04-08_snippet_0",
    "pageTitle": "Formatting Data with Pipes in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "template: `{{ date | date:'medium' }}`;"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using Structural Directive Shorthand Syntax in Angular HTML",
    "codeDescription": "Example of using the '*select' shorthand syntax to apply the structural directive directly to an element. This demonstrates the microsyntax pattern for structural directives.",
    "codeLanguage": "html",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/structural-directives.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Structural Directives Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<p *select=\"let data from source\">The data is: {{data}}</p>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Defining the 'Closed' Animation State with Styles",
    "codeDescription": "Code snippet showing how to define a 'closed' animation state using Angular's state() and style() functions with specific CSS properties like height, opacity, and backgroundColor.",
    "codeLanguage": "typescript",
    "codeTokens": 73,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/overview.md#2025-04-08_snippet_5",
    "pageTitle": "Introduction to Angular Animations Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "state('closed', style({\n  height: '100px',\n  opacity: 0.8,\n  backgroundColor: 'blue'\n}))"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Creating Non-Nullable FormControl with nonNullable Option",
    "codeDescription": "Demonstrates how to create a FormControl that doesn't reset to null by using the nonNullable option, which changes runtime behavior.",
    "codeLanguage": "typescript",
    "codeTokens": 65,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/typed-forms.md#2025-04-08_snippet_5",
    "pageTitle": "Angular Typed Forms Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const email = new FormControl('angularrox@gmail.com', {nonNullable: true});\nemail.reset();\nconsole.log(email.value); // angularrox@gmail.com"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using @HostListener in Angular Component",
    "codeDescription": "This TypeScript snippet demonstrates how to use the @HostListener decorator to bind event listeners to the host element. The decorator accepts an event name and an optional array of arguments.",
    "codeLanguage": "typescript",
    "codeTokens": 76,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/host-elements.md#2025-04-08_snippet_5",
    "pageTitle": "Angular Component Host Elements Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class CustomSlider {\n  @HostListener('keydown', ['$event'])\n  updateValue(event: KeyboardEvent) {\n    /* ... */\n  }\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "NgModel Class Definition",
    "codeDescription": "Class definition for NgModel directive used for two-way data binding in template-driven forms.",
    "codeLanguage": "typescript",
    "codeTokens": 124,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/forms/index.api.md#2025-04-08_snippet_19",
    "pageTitle": "Angular Forms API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "readonly control: FormControl;\nget formDirective(): any;\nisDisabled: boolean;\nmodel: any;\nname: string;\nstatic ngAcceptInputType_isDisabled: boolean | string;\nngOnChanges(changes: SimpleChanges): void;\nngOnDestroy(): void;\noptions: {\n    name?: string;\n    standalone?: boolean;\n    updateOn?: FormHooks;\n};\nget path(): string[];\nupdate: EventEmitter<any>;\nviewModel: any;\nviewToModelUpdate(newValue: any): void;"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Updating Template for Nested FormGroup in ProfileEditor",
    "codeDescription": "This HTML template shows how to structure the form inputs for a nested FormGroup, including the address fields.",
    "codeLanguage": "html",
    "codeTokens": 167,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/reactive-forms.md#2025-04-08_snippet_16",
    "pageTitle": "Reactive Forms in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<div formGroupName=\"address\">\n  <h2>Address</h2>\n\n  <label for=\"street\">Street: </label>\n  <input id=\"street\" type=\"text\" formControlName=\"street\">\n\n  <label for=\"city\">City: </label>\n  <input id=\"city\" type=\"text\" formControlName=\"city\">\n\n  <label for=\"state\">State: </label>\n  <input id=\"state\" type=\"text\" formControlName=\"state\">\n\n  <label for=\"zip\">Zip Code: </label>\n  <input id=\"zip\" type=\"text\" formControlName=\"zip\">\n</div>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementing Route Guards in Angular",
    "codeDescription": "This snippet shows how to create and use route guards in Angular to prevent unauthorized access to routes.",
    "codeLanguage": "typescript",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/common-router-tasks.md#2025-04-08_snippet_25",
    "pageTitle": "Common Routing Tasks in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "export const yourGuardFunction: CanActivateFn = (\n  next: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot\n) => {\n  // your  logic goes here\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Creating Injectable User Service - Angular TypeScript",
    "codeDescription": "Example of creating an injectable service using the @Injectable decorator with root-level provider configuration. The service demonstrates the basic structure for making a class available for dependency injection throughout the Angular application.",
    "codeLanguage": "typescript",
    "codeTokens": 75,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/19-creating-an-injectable-service/README.md#2025-04-08_snippet_0",
    "pageTitle": "Injectable Service Creation Guide - Angular TypeScript",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Injectable({\n    providedIn: 'root'\n})\nclass UserService {\n    // methods to retrieve and return data\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Specifying Providers in NgModules",
    "codeDescription": "Demonstrates how to define providers in NgModules that make services available for dependency injection. Shows how providers from one module are available to components declared in that module and to other modules that import it.",
    "codeLanguage": "typescript",
    "codeTokens": 129,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/ngmodules/overview.md#2025-04-08_snippet_7",
    "pageTitle": "Angular NgModules Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@NgModule({\n  imports: [PopupTrigger, SelectionIndicator],\n  declarations: [CustomMenu, CustomMenuItem],\n\n  // Provide the OverlayManager service\n  providers: [OverlayManager],\n  /* ... */\n})\nexport class CustomMenuModule { }\n\n@NgModule({\n  imports: [CustomMenuModule],\n  declarations: [UserProfile],\n  providers: [UserDataClient],\n})\nexport class UserProfileModule { }"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Setting Up Redirects in Angular Router",
    "codeDescription": "Configures routes with a redirect to default to the first-component route when the path is empty.",
    "codeLanguage": "typescript",
    "codeTokens": 111,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/common-router-tasks.md#2025-04-08_snippet_13",
    "pageTitle": "Common Routing Tasks in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "const routes: Routes = [\n  { path: 'first-component', component: FirstComponent },\n  { path: 'second-component', component: SecondComponent },\n  { path: '',   redirectTo: '/first-component', pathMatch: 'full' }, // redirect to `first-component`\n  { path: '**', component: PageNotFoundComponent },  // Wildcard route for a 404 page\n];"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Importing NgSwitch Directives in Angular Component",
    "codeDescription": "This snippet shows how to import the NgSwitch, NgSwitchCase, and NgSwitchDefault directives in an Angular component.",
    "codeLanguage": "typescript",
    "codeTokens": 83,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_21",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { NgSwitch, NgSwitchCase, NgSwitchDefault } from '@angular/common';\n\n@Component({\n  standalone: true,\n  imports: [NgSwitch, NgSwitchCase, NgSwitchDefault],\n  // ... other metadata\n})"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Basic @if Conditional Template Example in Angular",
    "codeDescription": "A simple example demonstrating how to use the @if template syntax in an Angular component to conditionally display content based on a boolean property.",
    "codeLanguage": "typescript",
    "codeTokens": 84,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/4-control-flow-if/README.md#2025-04-08_snippet_0",
    "pageTitle": "Control Flow in Components - Using @if in Angular Templates",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  ...\n  template: `\n    @if (isLoggedIn) {\n      <p>Welcome back, Friend!</p>\n    }\n  `,\n})\nclass AppComponent {\n  isLoggedIn = true;\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Managing Shared Variables Across Incompatible Scopes",
    "codeDescription": "Demonstrates patterns for sharing input signal values across different scope blocks. Shows how to handle type narrowing and variable lifetime when dealing with conditional blocks and class properties.",
    "codeLanguage": "typescript",
    "codeTokens": 272,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/schematics/migrations/signal-migration/test/golden.txt#2025-04-08_snippet_39",
    "pageTitle": "Angular Input Migration Test Cases",
    "codeList": [
      {
        "language": "typescript",
        "code": "// tslint:disable\n\nimport {Directive, Component, input} from '@angular/core';\n\n@Directive()\nclass SomeDir {\n  readonly bla = input.required<RegExp>();\n}\n\n@Component({\n  template: ``,\n})\nexport class ScopeMismatchTest {\n  eachScopeRedeclared() {\n    const regexs: RegExp[] = [];\n\n    if (global.console) {\n      const dir: SomeDir = null!;\n      regexs.push(dir.bla());\n    }\n\n    const dir: SomeDir = null!;\n    regexs.push(dir.bla());\n  }\n\n  nestedButSharedLocal() {\n    const regexs: RegExp[] = [];\n    const dir: SomeDir = null!;\n\n    const bla = dir.bla();\n    if (global.console) {\n      regexs.push(bla);\n    }\n\n    regexs.push(bla);\n  }\n\n  dir: SomeDir = null!;\n  nestedButSharedInClassInstance() {\n    const regexs: RegExp[] = [];\n\n    const bla = this.dir.bla();\n    if (global.console) {\n      regexs.push(bla);\n    }\n\n    regexs.push(bla);\n  }\n}"
      }
    ],
    "relevance": 0.934
  },
  {
    "codeTitle": "Dynamic Component Creation with ViewContainerRef in Angular",
    "codeDescription": "This example demonstrates how to dynamically create and render a component using ViewContainerRef. It shows three components working together: an outer container, an inner item with a button, and a leaf content component that gets dynamically inserted when the button is clicked.",
    "codeLanguage": "angular-ts",
    "codeTokens": 206,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/programmatic-rendering.md#2025-04-08_snippet_1",
    "pageTitle": "Programmatically Rendering Components in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'leaf-content',\n  template: `\n    This is the leaf content\n  `,\n})\nexport class LeafContent {}\n\n@Component({\n  selector: 'outer-container',\n  template: `\n    <p>This is the start of the outer container</p>\n    <inner-item />\n    <p>This is the end of the outer container</p>\n  `,\n})\nexport class OuterContainer {}\n\n@Component({\n  selector: 'inner-item',\n  template: `\n    <button (click)=\"loadContent()\">Load content</button>\n  `,\n})\nexport class InnerItem {\n  private viewContainer = inject(ViewContainerRef);\n\n  loadContent() {\n    this.viewContainer.createComponent(LeafContent);\n  }\n}"
      }
    ],
    "relevance": 0.934
  },
  {
    "codeTitle": "Creating Form Object in Angular Component",
    "codeDescription": "This code creates a FormGroup object with FormControl elements for firstName, lastName, and email in the DetailsComponent class.",
    "codeLanguage": "TypeScript",
    "codeTokens": 62,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/12-forms/README.md#2025-04-08_snippet_3",
    "pageTitle": "Adding a Form to an Angular App",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "applyForm = new FormGroup({\n  firstName: new FormControl(''),\n  lastName: new FormControl(''),\n  email: new FormControl('')\n});"
      }
    ],
    "relevance": 0.934
  },
  {
    "codeTitle": "Resetting Form on New Actor Creation in Angular Template",
    "codeDescription": "This HTML snippet shows how to reset the form when creating a new actor, clearing all form fields and restoring the pristine state.",
    "codeLanguage": "HTML",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/template-driven-forms.md#2025-04-08_snippet_16",
    "pageTitle": "Building a Template-Driven Form in Angular",
    "codeList": [
      {
        "language": "HTML",
        "code": "<button type=\"button\" class=\"btn btn-default\" (click)=\"newActor(); actorForm.reset()\">New Actor</button>"
      }
    ],
    "relevance": 0.933
  },
  {
    "codeTitle": "Mutating Objects from Angular Input Properties in TypeScript",
    "codeDescription": "This snippet shows how to handle mutation of objects received from Angular input properties. It demonstrates accessing and modifying properties of an input object.",
    "codeLanguage": "TypeScript",
    "codeTokens": 119,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/schematics/migrations/signal-migration/test/golden_best_effort.txt#2025-04-08_snippet_16",
    "pageTitle": "Angular Input Signal Migration Tests",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "import {input} from '@angular/core';\n\nexport class TestCmp {\n  readonly shared = input<{\n    x: string;\n}>({ x: '' });\n\n  bla() {\n    const shared = this.shared();\n    shared.x = this.doSmth(shared);\n\n    this.doSmth(shared);\n  }\n\n  doSmth(v: typeof this.shared()): string {\n    return v.x;\n  }\n}"
      }
    ],
    "relevance": 0.933
  },
  {
    "codeTitle": "Binding MouseOver Event in Angular Template",
    "codeDescription": "This snippet demonstrates how to bind the mouseover event to a section element in an Angular template. It uses the parentheses syntax to connect the DOM event with the component's onMouseOver method.",
    "codeLanguage": "angular-html",
    "codeTokens": 56,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/7-event-handling/README.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Event Handling Guide",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<section (mouseover)=\"onMouseOver()\">"
      }
    ],
    "relevance": 0.933
  },
  {
    "codeTitle": "Defining ErrorHandler Class in TypeScript",
    "codeDescription": "Declares the ErrorHandler class with a handleError method for handling errors in Angular applications.",
    "codeLanguage": "TypeScript",
    "codeTokens": 39,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/core/index.api.md#2025-04-08_snippet_10",
    "pageTitle": "Angular Core API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export class ErrorHandler {\n    handleError(error: any): void;\n}"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "UpdateOn Option in Template-Driven Forms - HTML",
    "codeDescription": "Shows how to configure the updateOn option in template-driven forms to optimize async validator performance.",
    "codeLanguage": "html",
    "codeTokens": 52,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/form-validation.md#2025-04-08_snippet_17",
    "pageTitle": "Validating Form Input in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<input [(ngModel)]=\"name\" [ngModelOptions]=\"{updateOn: 'blur'}\">"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Global Library Type Declaration",
    "codeDescription": "Example of declaring types for a global library without TypeScript definitions.",
    "codeLanguage": "typescript",
    "codeTokens": 29,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/libraries/using-libraries.md#2025-04-08_snippet_7",
    "pageTitle": "Angular Libraries Usage Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "declare var libraryName: any;"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Marking Element Attributes for Translation in Angular",
    "codeDescription": "Shows how to mark element attributes for translation using the i18n- prefix. The example translates the title attribute of an image.",
    "codeLanguage": "html",
    "codeTokens": 61,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/prepare.md#2025-04-08_snippet_3",
    "pageTitle": "Preparing Angular Components for Internationalization (i18n)",
    "codeList": [
      {
        "language": "html",
        "code": "<img [src]=\"logo\" i18n-title title=\"Angular logo\" />"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Example of Angular Modules After NgModule Removal",
    "codeDescription": "Shows the result after removing unnecessary NgModules, where the ImporterModule is deleted and references to it are marked with TODO comments for manual cleanup.",
    "codeLanguage": "typescript",
    "codeTokens": 99,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/schematics/ng-generate/standalone-migration/README.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Standalone Migration Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "// configurer.module.ts\nconsole.log(/* TODO(standalone-migration): clean up removed NgModule reference manually */ ImporterModule);\n\n@NgModule({\n  imports: [],\n  exports: [],\n  providers: [{provide: FOO, useValue: 123}]\n})\nexport class ConfigurerModule {}"
      },
      {
        "language": "typescript",
        "code": "// index.ts\nexport {ConfigurerModule} from './modules/index';"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Using ReversePipe in Angular Component Template",
    "codeDescription": "This snippet shows how to use the custom ReversePipe in an Angular component's template and how to import it into the component.",
    "codeLanguage": "angular-ts",
    "codeTokens": 64,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/24-create-a-pipe/README.md#2025-04-08_snippet_3",
    "pageTitle": "Creating and Using Custom Pipes in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n    ...\n    template: `Reverse Machine: {{ word | reverse }}`\n    imports: [ReversePipe]\n})"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Angular Object and Array Literals",
    "codeDescription": "Examples of supported object and array literal syntax in Angular expressions",
    "codeLanguage": "javascript",
    "codeTokens": 39,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/expression-syntax.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Expression Syntax Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "{name: 'Alice'}\n['Onion', 'Cheese', 'Garlic']"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Testing Model to View Data Flow in Angular Template-Driven Forms",
    "codeDescription": "This test verifies that changes to the component model are properly reflected in the view. It updates the component's favoriteColor property and checks if the input field displays the updated value.",
    "codeLanguage": "TypeScript",
    "codeTokens": 95,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/overview.md#2025-04-08_snippet_7",
    "pageTitle": "Forms in Angular",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "it('should update the value in the control', fakeAsync(() => {\n  component.favoriteColor = 'Blue';\n\n  fixture.detectChanges();\n\n  tick();\n\n  const input = fixture.nativeElement.querySelector('input');\n\n  expect(input.value).toBe('Blue');\n}));"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Using forChild Pattern for Component-Level Providers",
    "codeDescription": "Demonstrates the forChild pattern used to add providers to components within an application hierarchy. This approach is used when providers should not be available application-wide but only to specific components.",
    "codeLanguage": "typescript",
    "codeTokens": 77,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/ngmodules/overview.md#2025-04-08_snippet_9",
    "pageTitle": "Angular NgModules Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  /* ... */\n  providers: [\n    CustomMenuModule.forChild(/* some config */),\n  ],\n})\nexport class UserProfile { /* ... */ }"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Importing Input for Directive Properties",
    "codeDescription": "Import statement adding Input from @angular/core to enable property binding for the directive.",
    "codeLanguage": "typescript",
    "codeTokens": 46,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/attribute-directives.md#2025-04-08_snippet_8",
    "pageTitle": "Building and Using Attribute Directives in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Directive, ElementRef, HostListener, Input } from '@angular/core';"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Preparing for Zone.js Release",
    "codeDescription": "Commands to prepare for a new Zone.js release, including updating the version and generating the changelog.",
    "codeLanguage": "bash",
    "codeTokens": 130,
    "codeId": "https://github.com/angular/angular/blob/main/packages/zone.js/DEVELOPER.md#2025-04-08_snippet_9",
    "pageTitle": "Angular Zone.js Project Setup and Release Process",
    "codeList": [
      {
        "language": "bash",
        "code": "rm -rf node_modules && yarn install\nexport PREVIOUS_ZONE_TAG=`git tag -l 'zone.js-0.15.*' | tail -n1`\nexport VERSION=`(cd packages/zone.js; npm version patch --no-git-tag-version)`\nexport VERSION=${VERSION#v}\nexport TAG=\"zone.js-${VERSION}\"\necho \"Releasing zone.js version ${TAG}. Last release was ${PREVIOUS_ZONE_TAG}.\"\nyarn gulp changelog:zonejs"
      }
    ],
    "relevance": 0.931
  },
  {
    "codeTitle": "Configuring Imgix Loader Provider in Angular",
    "codeDescription": "Example of providing the Imgix loader for NgOptimizedImage using a base URL. This configuration enables static analysis for preconnect link generation.",
    "codeLanguage": "typescript",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/image-optimization.md#2025-04-08_snippet_22",
    "pageTitle": "Using NgOptimizedImage Directive in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "providers: [\n  provideImgixLoader('https://my.base.url/'),\n],"
      }
    ],
    "relevance": 0.931
  },
  {
    "codeTitle": "Initial Attribute Directive Structure",
    "codeDescription": "Basic structure of a generated attribute directive file showing the @Directive decorator with a CSS selector configuration.",
    "codeLanguage": "typescript",
    "codeTokens": 64,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/attribute-directives.md#2025-04-08_snippet_1",
    "pageTitle": "Building and Using Attribute Directives in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n  constructor() { }\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Defining Application Module with Single Responsibility",
    "codeDescription": "This app.module.ts file demonstrates proper module setup by focusing solely on module configuration and imports, separating it from component implementations.",
    "codeLanguage": "typescript",
    "codeTokens": 114,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/best-practices/style-guide.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Coding Style Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "// #docregion\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, HeroesComponent],\n  exports: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Implementing NgComponentOutlet Directive in Angular",
    "codeDescription": "Defines the NgComponentOutlet directive for dynamically rendering components. It includes input properties for the component, inputs, injector, content, and NgModule.",
    "codeLanguage": "TypeScript",
    "codeTokens": 210,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/common/index.api.md#2025-04-08_snippet_10",
    "pageTitle": "Angular Common Module API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "static ɵdir: i0.ɵɵDirectiveDeclaration<NgComponentOutlet<any>, \"[ngComponentOutlet]\", [\"ngComponentOutlet\"], { \"ngComponentOutlet\": { \"alias\": \"ngComponentOutlet\"; \"required\": false; }; \"ngComponentOutletInputs\": { \"alias\": \"ngComponentOutletInputs\"; \"required\": false; }; \"ngComponentOutletInjector\": { \"alias\": \"ngComponentOutletInjector\"; \"required\": false; }; \"ngComponentOutletContent\": { \"alias\": \"ngComponentOutletContent\"; \"required\": false; }; \"ngComponentOutletNgModule\": { \"alias\": \"ngComponentOutletNgModule\"; \"required\": false; }; \"ngComponentOutletNgModuleFactory\": { \"alias\": \"ngComponentOutletNgModuleFactory\"; \"required\": false; }; }, {}, never, never, true, never>;"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Marking Static Text in Angular Component Template with i18n Attribute",
    "codeDescription": "Demonstrates how to use the i18n attribute to mark static text in an Angular component template for translation. The example shows a simple greeting message.",
    "codeLanguage": "html",
    "codeTokens": 70,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/prepare.md#2025-04-08_snippet_0",
    "pageTitle": "Preparing Angular Components for Internationalization (i18n)",
    "codeList": [
      {
        "language": "html",
        "code": "<h1 i18n=\"An introduction header for this sample\">Hello i18n!</h1>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Expanded Provider Configuration in Angular",
    "codeDescription": "This example demonstrates the expanded form of provider configuration using the Provider interface in Angular.",
    "codeLanguage": "typescript",
    "codeTokens": 37,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection-providers.md#2025-04-08_snippet_1",
    "pageTitle": "Configuring Dependency Providers in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "[{ provide: Logger, useClass: Logger }]"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Double Arrow State Transitions in Angular",
    "codeDescription": "Shows how to use double arrow syntax to specify state transitions in both directions.",
    "codeLanguage": "typescript",
    "codeTokens": 45,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/transition-and-triggers.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Animation Transitions and Triggers Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "transition('open <=> closed', [\n  animate('0.5s')\n])"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Configuration for Building Production French Version",
    "codeDescription": "Angular.json configuration that combines production settings with French localization using the 'configurations' object.",
    "codeLanguage": "json",
    "codeTokens": 155,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/merge.md#2025-04-08_snippet_6",
    "pageTitle": "Angular Internationalization (i18n) Guide: Merging Translations",
    "codeList": [
      {
        "language": "json",
        "code": "\"configurations\": {\n  \"fr\": {\n    \"localize\": [\"fr\"]\n  },\n  \"production\": {\n    \"optimization\": true,\n    \"outputHashing\": \"all\",\n    \"sourceMap\": false,\n    \"namedChunks\": false,\n    \"extractLicenses\": true,\n    \"vendorChunk\": false,\n    \"buildOptimizer\": true,\n    \"budgets\": [\n      {\n        \"type\": \"initial\",\n        \"maximumWarning\": \"2mb\",\n        \"maximumError\": \"5mb\"\n      }\n    ]\n  }\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Enter/Leave Animation Implementation",
    "codeDescription": "Shows how to implement animations for elements entering and leaving the view using void state transitions.",
    "codeLanguage": "typescript",
    "codeTokens": 91,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/transition-and-triggers.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Animation Transitions and Triggers Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "trigger('flyInOut', [\n  transition('void => *', [\n    style({transform: 'translateX(-100%)'}),\n    animate(100)\n  ]),\n  transition('* => void', [\n    animate(100, style({transform: 'translateX(100%)'}))\n  ])\n])"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Using HttpContext in Angular HttpClient Interceptors",
    "codeDescription": "This interceptor demonstrates how to read a context token from the request and apply conditional logic based on its value.",
    "codeLanguage": "typescript",
    "codeTokens": 100,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/interceptors.md#2025-04-08_snippet_6",
    "pageTitle": "Angular HttpClient Interceptors Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "export function cachingInterceptor(req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  if (req.context.get(CACHING_ENABLED)) {\n    // apply caching logic\n    return ...;\n  } else {\n    // caching has been disabled for this request\n    return next(req);\n  }\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Implementing the Factory System for Angular Dependency Injection",
    "codeDescription": "Implementation of the Factory class used to wrap factory functions in Angular's DI system. This allows for monomorphic detection at runtime and handles recursive dependency detection.",
    "codeLanguage": "typescript",
    "codeTokens": 155,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/src/render3/VIEW_DATA.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Ivy Renderer Data Layout Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "class Factory {\n  /// Marker set to true during factory invocation to see if we get into recursive loop.\n  /// Recursive loop causes an error to be displayed.\n  resolving = false;\n  constructor(public factory: Function) { }\n}\nfunction factory(fn) {\n  return new Factory(fn);\n}\nconst FactoryPrototype = Factory.prototype;\nfunction isFactory(obj: any): obj is Factory {\n  // See: https://jsperf.com/instanceof-vs-getprototypeof\n  return typeof obj === 'object' && Object.getPrototypeOf(obj) === FactoryPrototype;\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Service Isolation Example",
    "codeDescription": "Demonstrates how to restrict service visibility by providing it at component level instead of root level.",
    "codeLanguage": "typescript",
    "codeTokens": 70,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/hierarchical-dependency-injection.md#2025-04-08_snippet_24",
    "pageTitle": "Hierarchical Injectors in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  selector: 'app-villains-list',\n  templateUrl: './villains-list.component.html',\n  providers: [VillainsService]\n})\nexport class VillainsListComponent {}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Upgrading Zone.js to Angular Package Format (APF)",
    "codeDescription": "Upgrades Zone.js to use the Angular Package Format (APF). This change is related to issue #36540 and closes issue #35157.",
    "codeLanguage": "JavaScript",
    "codeTokens": 48,
    "codeId": "https://github.com/angular/angular/blob/main/packages/zone.js/CHANGELOG.md#2025-04-08_snippet_6",
    "pageTitle": "Zone.js Release Notes",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import 'zone.js/dist/zone';"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Nesting Plural and Select Clauses in Angular HTML",
    "codeDescription": "Illustrates how to nest 'plural' and 'select' clauses in an ICU expression to handle complex internationalization scenarios in Angular templates.",
    "codeLanguage": "html",
    "codeTokens": 97,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/prepare.md#2025-04-08_snippet_15",
    "pageTitle": "Preparing Angular Components for Internationalization (i18n)",
    "codeList": [
      {
        "language": "html",
        "code": "<span i18n>{gender, select, female {She} male {He} other {They}} updated the status {minutes, plural, =0 {just now} =1 {one minute ago} other {{{minutes}} minutes ago}}</span>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Enabling Component Input Binding for Angular Router",
    "codeDescription": "Adds withComponentInputBinding feature to provideRouter method for passing information from routes to components.",
    "codeLanguage": "typescript",
    "codeTokens": 44,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/common-router-tasks.md#2025-04-08_snippet_9",
    "pageTitle": "Common Routing Tasks in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "providers: [\n  provideRouter(appRoutes, withComponentInputBinding()),\n]"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Unit Testing TitleCase Pipe with Jasmine",
    "codeDescription": "Unit tests for the TitleCasePipe using Jasmine testing framework. Tests various scenarios including empty strings, mixed case inputs, and multiple word inputs to ensure proper transformation.",
    "codeLanguage": "typescript",
    "codeTokens": 145,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/pipes.md#2025-04-08_snippet_1",
    "pageTitle": "Testing Angular Pipes Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "describe('TitleCasePipe', () => {\n  // This pipe is a pure function so no need for BeforeEach\n  const pipe = new TitleCasePipe();\n\n  it('transforms \"abc\" to \"Abc\"', () => {\n    expect(pipe.transform('abc')).toBe('Abc');\n  });\n\n  it('transforms \"abc def\" to \"Abc Def\"', () => {\n    expect(pipe.transform('abc def')).toBe('Abc Def');\n  });\n\n  // ... more test cases ...\n});"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Testing a Service with Dependencies Using Multiple Approaches",
    "codeDescription": "Multiple unit test strategies for MasterService, showing how to test with an actual dependency, a spy, a dummy value, and a fake object implementation.",
    "codeLanguage": "typescript",
    "codeTokens": 317,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/services.md#2025-04-08_snippet_2",
    "pageTitle": "Testing Angular Services: Strategies and Best Practices",
    "codeList": [
      {
        "language": "typescript",
        "code": "describe('MasterService without Angular testing support', () => {\n  let masterService: MasterService;\n\n  it('#getValue should return real value from the real service', () => {\n    masterService = new MasterService(new ValueService());\n    expect(masterService.getValue()).toBe('real value');\n  });\n\n  it('#getValue should return faked value from a fakeService', () => {\n    masterService = new MasterService({ getValue: () => 'fake value' } as ValueService);\n    expect(masterService.getValue()).toBe('fake value');\n  });\n\n  it('#getValue should return stubbed value from a spy', () => {\n    // create `getValue` spy on an object representing the ValueService\n    const valueServiceSpy =\n      jasmine.createSpyObj('ValueService', ['getValue']);\n\n    // set the spy to return a value\n    const stubValue = 'stub value';\n    valueServiceSpy.getValue.and.returnValue(stubValue);\n\n    masterService = new MasterService(valueServiceSpy);\n\n    expect(masterService.getValue())\n      .withContext('service returned stub value')\n      .toBe(stubValue);\n    expect(valueServiceSpy.getValue.calls.count())\n      .withContext('spy method was called once')\n      .toBe(1);\n    expect(valueServiceSpy.getValue.calls.mostRecent().returnValue)\n      .toBe(stubValue);\n  });\n});"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Setting ngSkipHydration as a Host Binding in Angular TypeScript",
    "codeDescription": "This code shows how to set the ngSkipHydration attribute as a host binding in an Angular component. This method skips hydration for the entire component and its children, causing it to behave as if hydration is not enabled.",
    "codeLanguage": "typescript",
    "codeTokens": 76,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/hydration.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Hydration Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  ...\n  host: {ngSkipHydration: 'true'},\n})\nclass ExampleComponent {}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Component-Level Service Provider Configuration",
    "codeDescription": "Demonstrates how to provide a service at the component level using the providers array in the @Component decorator",
    "codeLanguage": "typescript",
    "codeTokens": 57,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Dependency Injection Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  selector: 'hero-list',\n  template: '...',\n  providers: [HeroService]\n})\nclass HeroListComponent {}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Applying Route Guards in Angular Route Configuration",
    "codeDescription": "This code demonstrates how to apply route guards in the Angular route configuration to protect specific routes.",
    "codeLanguage": "typescript",
    "codeTokens": 52,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/common-router-tasks.md#2025-04-08_snippet_26",
    "pageTitle": "Common Routing Tasks in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "{\n  path: '/your-path',\n  component: YourComponent,\n  canActivate: [yourGuardFunction],\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Angular Dependency Injection Documentation Header",
    "codeDescription": "HTML markup for the documentation header section that introduces dependency injection in Angular, including a decorative image and title.",
    "codeLanguage": "html",
    "codeTokens": 99,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/overview.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Dependency Injection Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<docs-decorative-header title=\"Dependency injection in Angular\" imgSrc=\"adev/src/assets/images/dependency_injection.svg\"> <!-- markdownlint-disable-line -->\n\"DI\" is a design pattern and mechanism for creating and delivering some parts of an app to other parts of an app that require them.\n</docs-decorative-header>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Using Arrays for NgModule Declarations",
    "codeDescription": "Shows how to use arrays of components for the declarations property. This approach allows organizing related components into groups that can be referenced together in the NgModule metadata.",
    "codeLanguage": "typescript",
    "codeTokens": 112,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/ngmodules/overview.md#2025-04-08_snippet_2",
    "pageTitle": "Angular NgModules Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const MENU_COMPONENTS = [CustomMenu, CustomMenuItem];\nconst WIDGETS = [MENU_COMPONENTS, CustomSlider];\n\n@NgModule({\n  /* ... */\n  // This NgModule declares all of CustomMenu, CustomMenuItem,\n  // CustomSlider, and CustomCheckbox.\n  declarations: [WIDGETS, CustomCheckbox],\n})\nexport class CustomMenuModule { }"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Importing NgIf in Angular Component",
    "codeDescription": "This code shows how to import the NgIf directive in an Angular component. NgIf is used to conditionally add or remove elements from the DOM.",
    "codeLanguage": "TypeScript",
    "codeTokens": 52,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_10",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "import { NgIf } from '@angular/common';"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Basic Inject Migration Example - After",
    "codeDescription": "Migrated component using the inject() function instead of constructor injection",
    "codeLanguage": "typescript",
    "codeTokens": 81,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/schematics/ng-generate/inject-migration/README.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Inject Migration Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Component, inject } from '@angular/core';\nimport { MyService } from './service';\nimport { DI_TOKEN } from './token';\n\n@Component({})\nexport class MyComp {\n  private service = inject(MyService);\n  readonly token = inject(DI_TOKEN, { optional: true });\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Publishing Angular Benchpress Package using Bazel",
    "codeDescription": "Command to publish the @angular/benchpress package using Bazel after updating the version in package.json. This package needs to be published separately from the main Angular framework.",
    "codeLanguage": "bash",
    "codeTokens": 60,
    "codeId": "https://github.com/angular/angular/blob/main/packages/benchpress/DEVELOPER.md#2025-04-08_snippet_0",
    "pageTitle": "Publishing Guide for Angular Benchpress Package",
    "codeList": [
      {
        "language": "bash",
        "code": "yarn bazel run //packages/benchpress:npm_package.publish"
      }
    ],
    "relevance": 0.929
  },
  {
    "codeTitle": "Defining NgTemplateOutlet Directive in Angular",
    "codeDescription": "This snippet defines the NgTemplateOutlet directive with its input properties and factory declaration. It's used for rendering template contents.",
    "codeLanguage": "TypeScript",
    "codeTokens": 160,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/common/index.api.md#2025-04-08_snippet_20",
    "pageTitle": "Angular Common Module API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "static ɵdir: i0.ɵɵDirectiveDeclaration<NgTemplateOutlet<any>, \"[ngTemplateOutlet]\", never, { \"ngTemplateOutletContext\": { \"alias\": \"ngTemplateOutletContext\"; \"required\": false; }; \"ngTemplateOutlet\": { \"alias\": \"ngTemplateOutlet\"; \"required\": false; }; \"ngTemplateOutletInjector\": { \"alias\": \"ngTemplateOutletInjector\"; \"required\": false; }; }, {}, never, never, true, never>;\n// (undocumented)\nstatic ɵfac: i0.ɵɵFactoryDeclaration<NgTemplateOutlet<any>, never>;"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Configuring HttpClient with Fetch API in Angular",
    "codeDescription": "This snippet shows how to configure HttpClient to use the Fetch API instead of XMLHttpRequest by including the withFetch() feature in the provideHttpClient configuration.",
    "codeLanguage": "typescript",
    "codeTokens": 65,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/setup.md#2025-04-08_snippet_3",
    "pageTitle": "Configuring HttpClient in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "export const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(\n      withFetch(),\n    ),\n  ]\n};"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Accessing Full Response with observe Option in HttpClient",
    "codeDescription": "Shows how to access the complete HTTP response, including status code and headers, instead of just the response body. This is done by setting the observe option to 'response'.",
    "codeLanguage": "typescript",
    "codeTokens": 85,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/making-requests.md#2025-04-08_snippet_7",
    "pageTitle": "Making HTTP Requests with Angular HttpClient",
    "codeList": [
      {
        "language": "typescript",
        "code": "http.get<Config>('/api/config', {observe: 'response'}).subscribe(res => {\n  console.log('Response status:', res.status);\n  console.log('Body:', res.body);\n});"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Preserving Whitespace in Angular Component",
    "codeDescription": "Example of using preserveWhitespaces option in Component decorator to maintain whitespace in templates.",
    "codeLanguage": "angular-ts",
    "codeTokens": 60,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/whitespace.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Template Whitespace Handling Guide",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  /* ... */,\n  preserveWhitespaces: true,\n  template: `\n    <p>Hello         world</p>\n  `\n})"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Building Production Version for a Specific Locale",
    "codeDescription": "Command to build a production version specifically for the French locale using configuration composition.",
    "codeLanguage": "bash",
    "codeTokens": 43,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/merge.md#2025-04-08_snippet_5",
    "pageTitle": "Angular Internationalization (i18n) Guide: Merging Translations",
    "codeList": [
      {
        "language": "bash",
        "code": "ng build --configuration=production,fr"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Enabling Production Mode in Angular",
    "codeDescription": "Disables development-only features and assertions to optimize performance for production environments.",
    "codeLanguage": "typescript",
    "codeTokens": 32,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/core/index.api.md#2025-04-08_snippet_9",
    "pageTitle": "Angular Core API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export function enableProdMode(): void;"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Animation Trigger Binding in HTML Template",
    "codeDescription": "Shows how to bind the animation trigger to the isOpen property in the component's HTML template.",
    "codeLanguage": "html",
    "codeTokens": 75,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/overview.md#2025-04-08_snippet_13",
    "pageTitle": "Introduction to Angular Animations Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<div [@openClose]=\"isOpen ? 'open' : 'closed'\" class=\"open-close-container\">\n  <p>The box is now {{ isOpen ? 'Open' : 'Closed' }}!</p>\n</div>"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Multiple State Transitions with Wildcards",
    "codeDescription": "Demonstrates using wildcard transitions with multiple possible states including specific state pairs.",
    "codeLanguage": "typescript",
    "codeTokens": 41,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/transition-and-triggers.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Animation Transitions and Triggers Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "transition('* => *', [\n  animate('1s')\n])"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Setting Request Headers with Object Literal in HttpClient",
    "codeDescription": "Shows how to add HTTP headers to a request using a simple object literal. This provides a straightforward way to include custom headers like debugging information in the request.",
    "codeLanguage": "typescript",
    "codeTokens": 75,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/making-requests.md#2025-04-08_snippet_5",
    "pageTitle": "Making HTTP Requests with Angular HttpClient",
    "codeList": [
      {
        "language": "typescript",
        "code": "http.get('/api/config', {\n  headers: {\n    'X-Debug-Level': 'verbose',\n  }\n}).subscribe(config => {\n  // ...\n});"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Disabling Image Lazy Loading with Loading Attribute",
    "codeDescription": "Demonstrates how to disable the default lazy loading behavior by explicitly setting the loading attribute to eager.",
    "codeLanguage": "angular-html",
    "codeTokens": 54,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/image-optimization.md#2025-04-08_snippet_16",
    "pageTitle": "Using NgOptimizedImage Directive in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<img ngSrc=\"cat.jpg\" width=\"400\" height=\"200\" loading=\"eager\">"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Implementing Router Links and Outlet in Angular Template",
    "codeDescription": "Adds router links to navigate between components and includes a router outlet to display the selected component.",
    "codeLanguage": "html",
    "codeTokens": 132,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/common-router-tasks.md#2025-04-08_snippet_7",
    "pageTitle": "Common Routing Tasks in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<h1>Angular Router App</h1>\n<nav>\n  <ul>\n    <li><a routerLink=\"/first-component\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">First Component</a></li>\n    <li><a routerLink=\"/second-component\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Second Component</a></li>\n  </ul>\n</nav>\n<!-- The routed views render in the <router-outlet>-->\n<router-outlet />"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Manual Change Detection Control in Angular Tests",
    "codeDescription": "Demonstrates how to use manualChangeDetection to control change detection timing while testing async operations. Shows checking component state during an async button click operation.",
    "codeLanguage": "typescript",
    "codeTokens": 140,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/using-component-harnesses.md#2025-04-08_snippet_8",
    "pageTitle": "Using Component Harnesses in Angular Tests",
    "codeList": [
      {
        "language": "typescript",
        "code": "it('checks state while async action is in progress', async () => {\n  const buttonHarness = loader.getHarness(MyButtonHarness);\n  await manualChangeDetection(async () => {\n    await buttonHarness.click();\n    fixture.detectChanges();\n    // Check expectations while async click operation is in progress.\n    expect(isProgressSpinnerVisible()).toBe(true);\n    await fixture.whenStable();\n    // Check expectations after async click operation complete.\n    expect(isProgressSpinnerVisible()).toBe(false);\n  });\n});"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Configuring Synchronous Setup for Angular Component Test",
    "codeDescription": "This TypeScript snippet shows the synchronous setup steps for an Angular component test, including creating the component and querying for elements to inspect.",
    "codeLanguage": "TypeScript",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_44",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "beforeEach(() => {\n  fixture = TestBed.createComponent(BannerComponent);\n  component = fixture.componentInstance;\n  h1 = fixture.nativeElement.querySelector('h1');\n});"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Defining Input Decorator and Function in TypeScript",
    "codeDescription": "Declares the Input decorator and input function for creating input properties in Angular components.",
    "codeLanguage": "TypeScript",
    "codeTokens": 40,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/core/index.api.md#2025-04-08_snippet_17",
    "pageTitle": "Angular Core API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export const Input: InputDecorator;\nexport const input: InputFunction;"
      }
    ],
    "relevance": 0.927
  },
  {
    "codeTitle": "Defining SlicePipe Class in Angular",
    "codeDescription": "This class implements a pipe for slicing arrays or strings in Angular templates.",
    "codeLanguage": "TypeScript",
    "codeTokens": 223,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/common/index.api.md#2025-04-08_snippet_27",
    "pageTitle": "Angular Common Module API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export class SlicePipe implements PipeTransform {\n    // (undocumented)\n    transform<T>(value: ReadonlyArray<T>, start: number, end?: number): Array<T>;\n    // (undocumented)\n    transform(value: null | undefined, start: number, end?: number): null;\n    // (undocumented)\n    transform<T>(value: ReadonlyArray<T> | null | undefined, start: number, end?: number): Array<T> | null;\n    // (undocumented)\n    transform(value: string, start: number, end?: number): string;\n    // (undocumented)\n    transform(value: string | null | undefined, start: number, end?: number): string | null;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<SlicePipe, never>;\n    // (undocumented)\n    static ɵpipe: i0.ɵɵPipeDeclaration<SlicePipe, \"slice\", true>;\n}"
      }
    ],
    "relevance": 0.926
  },
  {
    "codeTitle": "Enabling I18n Support for Hydration in Angular TypeScript",
    "codeDescription": "This snippet demonstrates how to enable hydration for i18n blocks by adding withI18nSupport to the provideClientHydration call when bootstrapping an Angular application. This feature is currently in developer preview.",
    "codeLanguage": "typescript",
    "codeTokens": 101,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/hydration.md#2025-04-08_snippet_5",
    "pageTitle": "Angular Hydration Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {\n  bootstrapApplication,\n  provideClientHydration,\n  withI18nSupport,\n} from '@angular/platform-browser';\n...\n\nbootstrapApplication(AppComponent, {\n  providers: [provideClientHydration(withI18nSupport())]\n});"
      }
    ],
    "relevance": 0.926
  },
  {
    "codeTitle": "Defining PLATFORM_ID Constant in TypeScript",
    "codeDescription": "Defines a constant for the PLATFORM_ID injection token, used to identify the current platform.",
    "codeLanguage": "TypeScript",
    "codeTokens": 36,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/core/index.api.md#2025-04-08_snippet_61",
    "pageTitle": "Angular Core API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export const PLATFORM_ID: InjectionToken<Object>;"
      }
    ],
    "relevance": 0.926
  },
  {
    "codeTitle": "Using Custom Predicate with DebugElement in Angular Tests",
    "codeDescription": "Shows how to create a custom predicate function to query elements that have a specific template reference variable. The predicate filters DebugElements based on whether they have a reference named 'content'.",
    "codeLanguage": "typescript",
    "codeTokens": 115,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/utility-apis.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Testing Utility APIs Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "it('should find the \"content\" <h2> with a predicate', () => {\n  const de = fixture.debugElement;\n  const h2 = de.query(el => el.references.content);\n  const h2Element = h2.nativeElement;\n  expect(h2).toBeDefined();\n  expect(h2Element.textContent).toEqual('Content');\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Multiple Content Placeholders with Selectors",
    "codeDescription": "Example showing how to use multiple ng-content elements with CSS selectors to project different content into specific locations.",
    "codeLanguage": "angular-html",
    "codeTokens": 77,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/content-projection.md#2025-04-08_snippet_2",
    "pageTitle": "Content Projection in Angular using ng-content",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<div class=\"card-shadow\">\n  <ng-content select=\"card-title\"></ng-content>\n  <div class=\"card-divider\"></div>\n  <ng-content select=\"card-body\"></ng-content>\n</div>"
      },
      {
        "language": "angular-html",
        "code": "<custom-card>\n  <card-title>Hello</card-title>\n  <card-body>Welcome to the example</card-body>\n</custom-card>"
      },
      {
        "language": "angular-html",
        "code": "<custom-card>\n  <div class=\"card-shadow\">\n    <card-title>Hello</card-title>\n    <div class=\"card-divider\"></div>\n    <card-body>Welcome to the example</card-body>\n  </div>\n</custom-card>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Configuring Fallback Strategies for Prerendered Routes in Angular",
    "codeDescription": "Shows how to specify a fallback strategy for prerendered routes. This example demonstrates setting a client-side rendering fallback for paths that weren't prerendered at build time.",
    "codeLanguage": "typescript",
    "codeTokens": 210,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/ssr.md#2025-04-08_snippet_7",
    "pageTitle": "Angular Server and Hybrid Rendering Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "// app.routes.server.ts\nimport { RenderMode, PrerenderFallback, ServerRoute } from '@angular/ssr';\n\nexport const serverRoutes: ServerRoute[] = [\n  {\n    path: 'post/:id',\n    renderMode: RenderMode.Prerender,\n    fallback: PrerenderFallback.Client, // Fallback to CSR if not prerendered\n    async getPrerenderParams() {\n      // This function returns an array of objects representing prerendered posts at the paths:\n      // `/post/1`, `/post/2`, and `/post/3`.\n      // The path `/post/4` will utilize the fallback behavior if it's requested.\n      return [{ id: 1 }, { id: 2 }, { id: 3 }];\n    },\n  },\n];"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Component with Non-null Assertion Operator",
    "codeDescription": "Shows how to use the non-null assertion operator to suppress possibly undefined errors.",
    "codeLanguage": "typescript",
    "codeTokens": 102,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/aot-compiler.md#2025-04-08_snippet_12",
    "pageTitle": "Angular AOT Compilation Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  selector: 'my-component',\n  template: '<span *ngIf=\"person\"> {{person.name}} lives on {{address!.street}} </span>'\n})\nclass MyComponent {\n  person?: Person;\n  address?: Address;\n\n  setData(person: Person, address: Address) {\n    this.person = person;\n    this.address = address;\n  }\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Angular Unsupported Declarations",
    "codeDescription": "Examples of declaration syntax that is not supported in Angular expressions",
    "codeLanguage": "javascript",
    "codeTokens": 48,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/expression-syntax.md#2025-04-08_snippet_6",
    "pageTitle": "Angular Expression Syntax Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "let label = 'abc'\nconst item = 'apple'\nfunction myCustomFunction() { }\n() => { }\nclass Rectangle { }"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Including Inputs and Outputs from Host Directives in Angular Component",
    "codeDescription": "Shows how to explicitly include inputs and outputs from host directives in a component's API by expanding the entry in the hostDirectives property.",
    "codeLanguage": "typescript",
    "codeTokens": 91,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/directive-composition-api.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Directive Composition API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  selector: 'admin-menu',\n  template: 'admin-menu.html',\n  hostDirectives: [{\n    directive: MenuBehavior,\n    inputs: ['menuId'],\n    outputs: ['menuClosed'],\n  }],\n})\nexport class AdminMenu { }"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Modifying Requests in Angular HttpClient Interceptors",
    "codeDescription": "This snippet shows how to clone and modify an HttpRequest to add a new header, demonstrating the immutable nature of HttpRequest objects.",
    "codeLanguage": "typescript",
    "codeTokens": 61,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/interceptors.md#2025-04-08_snippet_3",
    "pageTitle": "Angular HttpClient Interceptors Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "const reqWithHeader = req.clone({\n  headers: req.headers.set('X-New-Header', 'new header value'),\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Using Select Clause for Gender in Angular HTML",
    "codeDescription": "Demonstrates how to use the 'select' clause in an ICU expression to handle different gender values in an Angular template.",
    "codeLanguage": "html",
    "codeTokens": 69,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/prepare.md#2025-04-08_snippet_14",
    "pageTitle": "Preparing Angular Components for Internationalization (i18n)",
    "codeList": [
      {
        "language": "html",
        "code": "<span i18n>The author is {gender, select, female {female} male {male} other {other}}</span>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Implementing NgLocaleLocalization Service in Angular",
    "codeDescription": "Defines the NgLocaleLocalization service for handling plural categories based on locale. It extends NgLocalization and implements the getPluralCategory method.",
    "codeLanguage": "TypeScript",
    "codeTokens": 114,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/common/index.api.md#2025-04-08_snippet_14",
    "pageTitle": "Angular Common Module API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export class NgLocaleLocalization extends NgLocalization {\n    constructor(locale: string);\n    getPluralCategory(value: any, locale?: string): string;\n    protected locale: string;\n    static ɵfac: i0.ɵɵFactoryDeclaration<NgLocaleLocalization, never>;\n    static ɵprov: i0.ɵɵInjectableDeclaration<NgLocaleLocalization>;\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Referencing Template Fragments with Variables in Angular",
    "codeDescription": "Example showing how to reference an Angular template fragment using template reference variables. The variable references a TemplateRef instance.",
    "codeLanguage": "angular-html",
    "codeTokens": 77,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/variables.md#2025-04-08_snippet_5",
    "pageTitle": "Using Variables in Angular Templates",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<!-- The `myFragment` variable is assigned the `TemplateRef` instance corresponding to this template fragment. -->\n<ng-template #myFragment>\n  <p>This is a template fragment</p>\n</ng-template>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Adding Automatic Placeholder to an Image",
    "codeDescription": "Shows how to implement automatic low-resolution placeholders for images when using an image loader or CDN that supports image resizing.",
    "codeLanguage": "angular-html",
    "codeTokens": 54,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/image-optimization.md#2025-04-08_snippet_6",
    "pageTitle": "Using NgOptimizedImage Directive in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<img ngSrc=\"cat.jpg\" width=\"400\" height=\"200\" placeholder>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Angular Arithmetic Operators",
    "codeDescription": "Examples of supported arithmetic operators in Angular expressions",
    "codeLanguage": "javascript",
    "codeTokens": 57,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/expression-syntax.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Expression Syntax Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "1 + 2\n52 - 3\n41 * 6\n20 / 4\n17 % 5\n10 ** 3\n9 * (8 + 4)"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Using ng-container for Dependency Injection Context in Angular",
    "codeDescription": "This example shows how to use <ng-container> with a directive to provide a context (theme in this case) that descendant components can inject. It demonstrates defining a Theme directive and applying it to <ng-container> to affect child components.",
    "codeLanguage": "typescript",
    "codeTokens": 109,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/ng-container.md#2025-04-08_snippet_4",
    "pageTitle": "Using ng-container in Angular Templates",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Directive({\n  selector: '[theme]',\n})\nexport class Theme {\n  // Create an input that accepts 'light' or 'dark`, defaulting to 'light'.\n  mode = input<'light' | 'dark'>('light');\n}"
      },
      {
        "language": "html",
        "code": "<ng-container theme=\"dark\">\n  <profile-pic />\n  <user-bio />\n</ng-container>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Insert/Remove Animation with NgIf",
    "codeDescription": "Demonstrates how to implement enter/leave animations with *ngIf directives.",
    "codeLanguage": "html",
    "codeTokens": 56,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/transition-and-triggers.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Animation Transitions and Triggers Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<div @myInsertRemoveTrigger *ngIf=\"isShown\">\n  <p>The box is inserted</p>\n</div>"
      },
      {
        "language": "typescript",
        "code": "trigger('myInsertRemoveTrigger', [\n  transition(':enter', [\n    style({ opacity: 0 }),\n    animate('100ms', style({ opacity: 1 }))\n  ])\n])"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Importing FormsModule for NgModel in Angular Component",
    "codeDescription": "This snippet demonstrates how to import the FormsModule, which is required to use NgModel for two-way data binding in forms.",
    "codeLanguage": "TypeScript",
    "codeTokens": 45,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_7",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "import { FormsModule } from '@angular/forms';"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Creating and Updating Writable Signals in Angular",
    "codeDescription": "This snippet demonstrates how to create a writable signal using the signal() function and update its value using the set() and update() methods. The signal holds a counter value that can be directly replaced or updated based on its current state.",
    "codeLanguage": "typescript",
    "codeTokens": 76,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/primitives/signals/README.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Signals Implementation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const counter = signal(0);\n\ncounter.set(2);\ncounter.update(count => count + 1);"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Testing HTTP Services with Spies",
    "codeDescription": "Testing a service that makes HTTP calls by using spies on the HttpClient, showing how to test success and error cases for Observable-returning methods.",
    "codeLanguage": "typescript",
    "codeTokens": 351,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/services.md#2025-04-08_snippet_11",
    "pageTitle": "Testing Angular Services: Strategies and Best Practices",
    "codeList": [
      {
        "language": "typescript",
        "code": "let httpClientSpy: jasmine.SpyObj<HttpClient>;\nlet heroService: HeroService;\n\nbeforeEach(() => {\n  // TODO: spy on other methods too\n  httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);\n  heroService = new HeroService(httpClientSpy);\n});\n\nit('should return expected heroes (HttpClient called once)', (done: DoneFn) => {\n  const expectedHeroes: Hero[] =\n    [{ id: 1, name: 'A' }, { id: 2, name: 'B' }];\n\n  httpClientSpy.get.and.returnValue(of(expectedHeroes));\n\n  heroService.getHeroes().subscribe({\n    next: heroes => {\n      expect(heroes)\n        .withContext('expected heroes')\n        .toEqual(expectedHeroes);\n      done();\n    },\n    error: done.fail\n  });\n  expect(httpClientSpy.get.calls.count())\n    .withContext('one call')\n    .toBe(1);\n});\n\nit('should return an error when the server returns a 404', (done: DoneFn) => {\n  const errorResponse = new HttpErrorResponse({\n    error: 'test 404 error',\n    status: 404, statusText: 'Not Found'\n  });\n\n  httpClientSpy.get.and.returnValue(throwError(() => errorResponse));\n\n  heroService.getHeroes().subscribe({\n    next: heroes => done.fail('expected an error, not heroes'),\n    error: error => {\n      expect(error.message).toContain('test 404 error');\n      done();\n    }\n  });\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Registering a Value Provider with InjectionToken in Angular",
    "codeDescription": "This snippet demonstrates how to register a value provider using an InjectionToken in an Angular component.",
    "codeLanguage": "typescript",
    "codeTokens": 62,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection-providers.md#2025-04-08_snippet_10",
    "pageTitle": "Configuring Dependency Providers in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "const MY_APP_CONFIG_VARIABLE: AppConfig = {\n  title: 'Hello',\n};\n\nproviders: [{ provide: APP_CONFIG, useValue: MY_APP_CONFIG_VARIABLE }]"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Querying for Multiple Content Children with @ContentChildren in Angular",
    "codeDescription": "This example demonstrates how to use the @ContentChildren decorator to query for multiple content children in an Angular component. It shows how to iterate over the QueryList of results in the ngAfterContentInit lifecycle hook.",
    "codeLanguage": "angular-ts",
    "codeTokens": 200,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/queries.md#2025-04-08_snippet_11",
    "pageTitle": "Referencing Component Children with Queries in Angular",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'custom-menu-item',\n  /*...*/\n})\nexport class CustomMenuItem {\n  text: string;\n}\n\n@Component({\n  selector: 'custom-menu',\n  /*...*/\n})\nexport class CustomMenu {\n  @ContentChildren(CustomMenuItem) items: QueryList<CustomMenuItem>;\n\n  ngAfterContentInit() {\n    this.items.forEach(item => {\n      console.log(item.text);\n    });\n  }\n}\n\n@Component({\n  selector: 'user-profile',\n  template: `\n    <custom-menu>\n      <custom-menu-item>Cheese</custom-menu-item>\n      <custom-menu-item>Tomato</custom-menu-item>\n    </custom-menu>\n  `\n})\nexport class UserProfile { }"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Importing Angular Core in Home Component",
    "codeDescription": "Import statement that includes the 'inject' function from Angular core, which is needed for dependency injection.",
    "codeLanguage": "typescript",
    "codeTokens": 45,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/09-services/README.md#2025-04-08_snippet_3",
    "pageTitle": "Creating and Using Angular Services with Dependency Injection",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Component, inject } from '@angular/core';"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Defining Actor Data Model Class in TypeScript",
    "codeDescription": "The Actor class defines the data model that will be reflected in the form, including properties for name, studio, and skill.",
    "codeLanguage": "typescript",
    "codeTokens": 76,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/template-driven-forms.md#2025-04-08_snippet_0",
    "pageTitle": "Building a Template-Driven Form in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class Actor {\n\n  constructor(\n    public id: number,\n    public name: string,\n    public studio: string,\n    public skill: string\n  ) {  }\n\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Testing Without beforeEach Using Setup Function",
    "codeDescription": "Test case that uses a setup function instead of beforeEach, showing a more explicit and self-contained approach to test organization.",
    "codeLanguage": "typescript",
    "codeTokens": 138,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/services.md#2025-04-08_snippet_9",
    "pageTitle": "Testing Angular Services: Strategies and Best Practices",
    "codeList": [
      {
        "language": "typescript",
        "code": "it('#getValue should return stubbed value from a spy', () => {\n  const { masterService, stubValue, valueServiceSpy } = setup();\n  expect(masterService.getValue())\n    .withContext('service returned stub value')\n    .toBe(stubValue);\n  expect(valueServiceSpy.getValue.calls.count())\n    .withContext('spy method was called once')\n    .toBe(1);\n  expect(valueServiceSpy.getValue.calls.mostRecent().returnValue)\n    .toBe(stubValue);\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Importing NgFor in Angular Component",
    "codeDescription": "This snippet shows how to import the NgFor directive in an Angular component to use it for list rendering.",
    "codeLanguage": "typescript",
    "codeTokens": 64,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_13",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { NgFor } from '@angular/common';\n\n@Component({\n  standalone: true,\n  imports: [NgFor],\n  // ... other metadata\n})"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Using Angular's By Class for Element Selection in Tests",
    "codeDescription": "Demonstrates how to use Angular's By utility class to create predicates for querying elements in component tests. The example shows querying by CSS selector, directive type, and selecting all elements.",
    "codeLanguage": "typescript",
    "codeTokens": 150,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/utility-apis.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Testing Utility APIs Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "// By.css() is the most useful predicate\nlet de = fixture.debugElement;\nlet heroEl = de.query(By.css('.hero'));\n\n// Access classes through Angular because browser support is inconsistent\nexpect(heroEl.classes.selected).toBeFalsy();\n\n// A component reference\nlet heroComponentDe = fixture.debugElement.query(By.directive(HeroComponent));\nexpect(heroComponentDe.componentInstance instanceof HeroComponent).toBeTruthy();\n\n// By.all() is a wildcard predicate that matches all elements\nlet allDe = fixture.debugElement.queryAll(By.all());"
      }
    ],
    "relevance": 0.924
  },
  {
    "codeTitle": "Marking Alternates with Select Clause in Angular HTML",
    "codeDescription": "Shows the structure of using the 'select' clause in an ICU expression to handle alternate text based on string values in Angular templates.",
    "codeLanguage": "html",
    "codeTokens": 53,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/prepare.md#2025-04-08_snippet_11",
    "pageTitle": "Preparing Angular Components for Internationalization (i18n)",
    "codeList": [
      {
        "language": "html",
        "code": "{ component_property, select, selection_categories }"
      }
    ],
    "relevance": 0.924
  },
  {
    "codeTitle": "Defining PlatformLocation Abstract Class in Angular",
    "codeDescription": "This abstract class defines methods for interacting with the browser's location object and history API.",
    "codeLanguage": "TypeScript",
    "codeTokens": 318,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/common/index.api.md#2025-04-08_snippet_25",
    "pageTitle": "Angular Common Module API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export abstract class PlatformLocation {\n    // (undocumented)\n    abstract back(): void;\n    // (undocumented)\n    abstract forward(): void;\n    // (undocumented)\n    abstract getBaseHrefFromDOM(): string;\n    // (undocumented)\n    abstract getState(): unknown;\n    // (undocumented)\n    abstract get hash(): string;\n    // (undocumented)\n    historyGo?(relativePosition: number): void;\n    // (undocumented)\n    abstract get hostname(): string;\n    // (undocumented)\n    abstract get href(): string;\n    abstract onHashChange(fn: LocationChangeListener): VoidFunction;\n    abstract onPopState(fn: LocationChangeListener): VoidFunction;\n    // (undocumented)\n    abstract get pathname(): string;\n    // (undocumented)\n    abstract get port(): string;\n    // (undocumented)\n    abstract get protocol(): string;\n    // (undocumented)\n    abstract pushState(state: any, title: string, url: string): void;\n    // (undocumented)\n    abstract replaceState(state: any, title: string, url: string): void;\n    // (undocumented)\n    abstract get search(): string;\n    // (undocumented)\n    static ɵfac: i0.ɵɵFactoryDeclaration<PlatformLocation, never>;\n    // (undocumented)\n    static ɵprov: i0.ɵɵInjectableDeclaration<PlatformLocation>;\n}"
      }
    ],
    "relevance": 0.924
  },
  {
    "codeTitle": "Implementing Prefetch in Angular Defer Blocks",
    "codeDescription": "Shows how to implement prefetching in defer blocks, allowing resource loading before content display.",
    "codeLanguage": "angular-html",
    "codeTokens": 62,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/defer.md#2025-04-08_snippet_15",
    "pageTitle": "Deferred Loading with @defer in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@defer (on interaction; prefetch on idle) {\n  <large-cmp />\n} @placeholder {\n  <div>Large component placeholder</div>\n}"
      }
    ],
    "relevance": 0.923
  },
  {
    "codeTitle": "Defining ROUTES InjectionToken in TypeScript",
    "codeDescription": "InjectionToken for providing route configurations to the Router. It accepts an array of Route arrays, allowing routes to be provided from multiple sources.",
    "codeLanguage": "typescript",
    "codeTokens": 47,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/router/index.api.md#2025-04-08_snippet_19",
    "pageTitle": "Angular Router API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export const ROUTES: InjectionToken<Route[][]>;"
      }
    ],
    "relevance": 0.923
  },
  {
    "codeTitle": "Testing Angular Component Router Links",
    "codeDescription": "This code snippet contains tests that confirm that the router links in an Angular component are wired correctly to the routerLink directives.",
    "codeLanguage": "TypeScript",
    "codeTokens": 174,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_37",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "it('can get RouterLinks from template', () => {\n  expect(page.navLinks.length).toBe(3, 'should have 3 routerLinks');\n  expect(page.navLinks[0].routerLink.linkParams).toBe('/dashboard');\n  expect(page.navLinks[1].routerLink.linkParams).toBe('/heroes');\n  expect(page.navLinks[2].routerLink.linkParams).toBe('/about');\n});\n\nit('can click Heroes link in template', () => {\n  const heroesLinkDe = page.navLinks[1];\n  const heroesLink = heroesLinkDe.nativeElement;\n  heroesLink.click();\n  expect(heroesLinkDe.routerLink.navigatedTo).toBe('/heroes');\n});"
      }
    ],
    "relevance": 0.923
  },
  {
    "codeTitle": "Installing Angular CDK for Component Harnesses",
    "codeDescription": "Command to install the Angular Component Dev Kit (CDK) which provides the foundation for creating component harnesses.",
    "codeLanguage": "shell",
    "codeTokens": 41,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/creating-component-harnesses.md#2025-04-08_snippet_0",
    "pageTitle": "Creating Component Test Harnesses in Angular",
    "codeList": [
      {
        "language": "shell",
        "code": "ng add @angular/cdk"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Disabling XSRF Protection in Angular HttpClient",
    "codeDescription": "This code snippet shows how to disable the built-in XSRF protection mechanism in Angular's HttpClient using the withNoXsrfProtection function in the application configuration.",
    "codeLanguage": "typescript",
    "codeTokens": 72,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/security.md#2025-04-08_snippet_13",
    "pageTitle": "Angular Security Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export const appConfig: ApplicationConfig = {\n  providers: [\n    provideHttpClient(\n      withNoXsrfProtection(),\n    ),\n  ]\n};"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Installing D3 Library with TypeScript Types",
    "codeDescription": "Commands to install the D3 library and its corresponding TypeScript type definitions for Angular projects.",
    "codeLanguage": "shell",
    "codeTokens": 43,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/libraries/using-libraries.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Libraries Usage Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "npm install d3 --save\nnpm install @types/d3 --save-dev"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Extracting i18n Translations with Different Format Options in Angular CLI",
    "codeDescription": "Commands demonstrating how to extract i18n translations in various formats including XLIFF 1.2, XLIFF 2.0, XMB, ARB, and JSON using the --format flag.",
    "codeLanguage": "bash",
    "codeTokens": 109,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/translation-files.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Internationalization (i18n) Translation File Management",
    "codeList": [
      {
        "language": "bash",
        "code": "ng extract-i18n --format=xlf\nng extract-i18n --format=xlf2\nng extract-i18n --format=xmb\nng extract-i18n --format=arb\nng extract-i18n --format=json"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Angular Special Operators",
    "codeDescription": "Examples of Angular-specific operators including pipes and optional chaining",
    "codeLanguage": "javascript",
    "codeTokens": 38,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/expression-syntax.md#2025-04-08_snippet_5",
    "pageTitle": "Angular Expression Syntax Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "{{ total | currency }}\nsomeObj.someProp?.nestedProp\nsomeObj!.someProp"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Using bypassSecurityTrustUrl in Angular HTML Template",
    "codeDescription": "Example of an Angular template that needs to bind a potentially unsafe URL. This shows how a JavaScript alert URL would be used in a template that will later be marked as trusted.",
    "codeLanguage": "html",
    "codeTokens": 68,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/security.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Security Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<a [href]=\"dangerousUrl\">Click me</a>\n<div [innerHTML]=\"dangerousHtml\"></div>"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Implementing Scroll Event Class in TypeScript",
    "codeDescription": "Class that represents a scroll event in the Router, triggered after navigation. It includes the router event that caused the scroll, the position to scroll to, and an optional anchor element.",
    "codeLanguage": "typescript",
    "codeTokens": 157,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/router/index.api.md#2025-04-08_snippet_22",
    "pageTitle": "Angular Router API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class Scroll {\n    constructor(\n    routerEvent: NavigationEnd | NavigationSkipped,\n    position: [number, number] | null,\n    anchor: string | null);\n    // (undocumented)\n    readonly anchor: string | null;\n    // (undocumented)\n    readonly position: [number, number] | null;\n    // (undocumented)\n    readonly routerEvent: NavigationEnd | NavigationSkipped;\n    // (undocumented)\n    toString(): string;\n    // (undocumented)\n    readonly type = EventType.Scroll;\n}"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Creating a Minimal Component Harness",
    "codeDescription": "Basic implementation of a component harness that extends ComponentHarness and specifies the hostSelector to match the component it targets.",
    "codeLanguage": "typescript",
    "codeTokens": 53,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/creating-component-harnesses.md#2025-04-08_snippet_2",
    "pageTitle": "Creating Component Test Harnesses in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "class MyPopupHarness extends ComponentHarness {\n  static hostSelector = 'my-popup';\n}"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Multiple Object Instantiation Sequence in Angular DI",
    "codeDescription": "Demonstrates how the order of object instantiation affects caching behavior in Angular's DI system, with Engine being instantiated first and then reused for Car.",
    "codeLanguage": "typescript",
    "codeTokens": 70,
    "codeId": "https://github.com/angular/angular/blob/main/packages/docs/di/di.md#2025-04-08_snippet_3",
    "pageTitle": "Dependency Injection in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "var engine = inj.get(Engine); //instantiates an Engine\nvar car = inj.get(Car); //instantiates a Car (reuses Engine)"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Accessing Request Object via Dependency Injection in Angular Components",
    "codeDescription": "Shows how to access the HTTP request object in an Angular component during server-side rendering using the REQUEST token from @angular/core.",
    "codeLanguage": "typescript",
    "codeTokens": 100,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/ssr.md#2025-04-08_snippet_8",
    "pageTitle": "Angular Server and Hybrid Rendering Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { inject, REQUEST } from '@angular/core';\n\n@Component({\n  selector: 'app-my-component',\n  template: `<h1>My Component</h1>`,\n})\nexport class MyComponent {\n  constructor() {\n    const request = inject(REQUEST);\n    console.log(request?.url);\n  }\n}"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Using Structural Directives with ng-container in Angular",
    "codeDescription": "This example demonstrates applying structural directives to <ng-container> elements. It shows how to conditionally render content with *ngIf and iterate through items with *ngFor without adding extra DOM elements.",
    "codeLanguage": "html",
    "codeTokens": 136,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/ng-container.md#2025-04-08_snippet_3",
    "pageTitle": "Using ng-container in Angular Templates",
    "codeList": [
      {
        "language": "html",
        "code": "<ng-container *ngIf=\"permissions == 'admin'\">\n  <h1>Admin Dashboard</h1>\n  <admin-infographic></admin-infographic>\n</ng-container>\n\n<ng-container *ngFor=\"let item of items; index as i; trackBy: trackByFn\">\n  <h2>{{ item.title }}</h2>\n  <p>{{ item.description }}</p>\n</ng-container>"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Generating a New Angular Component with CLI",
    "codeDescription": "Command to generate a new HousingLocation component using Angular CLI. This creates the component files including the TypeScript class, HTML template, CSS file, and test file.",
    "codeLanguage": "shell",
    "codeTokens": 50,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/03-HousingLocation/README.md#2025-04-08_snippet_0",
    "pageTitle": "Creating the HousingLocation Component in Angular",
    "codeList": [
      {
        "language": "shell",
        "code": "ng generate component housingLocation"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Implementing User Interaction Methods in a Component Harness",
    "codeDescription": "Enhanced component harness implementation with methods for toggling the popup and checking its open state, demonstrating how to provide behavior-focused APIs rather than exposing raw TestElement instances.",
    "codeLanguage": "typescript",
    "codeTokens": 156,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/creating-component-harnesses.md#2025-04-08_snippet_4",
    "pageTitle": "Creating Component Test Harnesses in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "class MyPopupHarness extends ComponentHarness {\n  static hostSelector = 'my-popup';\n\n  protected getTriggerElement = this.locatorFor('button');\n  protected getContentElement = this.locatorForOptional('.my-popup-content');\n\n  /** Toggles the open state of the popup. */\n  async toggle() {\n    const trigger = await this.getTriggerElement();\n    return trigger.click();\n  }\n\n  /** Checks if the popup us open. */\n  async isOpen() {\n    const content = await this.getContentElement();\n    return !!content;\n  }\n}"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Running Public API Golden Checks and Updates in Angular",
    "codeDescription": "Commands to verify and update the public API golden files that define Angular's package interfaces. The check command validates existing goldens while update regenerates them.",
    "codeLanguage": "bash",
    "codeTokens": 58,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/README.md#2025-04-08_snippet_0",
    "pageTitle": "Managing Public API Goldens for Angular NPM Packages",
    "codeList": [
      {
        "language": "bash",
        "code": "yarn public-api:check\nyarn public-api:update"
      }
    ],
    "relevance": 0.921
  },
  {
    "codeTitle": "Configuring Additional Macro Tasks for fakeAsync in Angular Tests",
    "codeDescription": "This snippet demonstrates how to configure additional macro tasks to be supported in fakeAsync tests. It shows how to enable support for HTMLCanvasElement.toBlob() in Angular tests.",
    "codeLanguage": "typescript",
    "codeTokens": 105,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_22",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "beforeEach(() => {\n  // Enable 'toBlob' as a macroTask\n  (window as any)['__zone_symbol__FakeAsyncTestMacroTask'] = [\n    {\n      source: 'HTMLCanvasElement.toBlob',\n      callbackArgs: [{size: 200}]\n    }\n  ];\n});"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Implementing a Service with Dependencies in Angular",
    "codeDescription": "Definition of MasterService that depends on the ValueService, demonstrating how to implement a service that delegates to an injected dependency.",
    "codeLanguage": "typescript",
    "codeTokens": 70,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/services.md#2025-04-08_snippet_1",
    "pageTitle": "Testing Angular Services: Strategies and Best Practices",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Injectable()\nexport class MasterService {\n  constructor(private valueService: ValueService) { }\n  getValue() { return this.valueService.getValue(); }\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Disabling Preconnect Warnings with PRECONNECT_CHECK_BLOCKLIST Token",
    "codeDescription": "Shows how to disable preconnect warnings for specific domains by injecting the PRECONNECT_CHECK_BLOCKLIST token into the providers array.",
    "codeLanguage": "typescript",
    "codeTokens": 62,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/image-optimization.md#2025-04-08_snippet_11",
    "pageTitle": "Using NgOptimizedImage Directive in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "providers: [\n  {provide: PRECONNECT_CHECK_BLOCKLIST, useValue: 'https://your-domain.com'}\n],"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Implementing Template-Driven Form Control in Angular TypeScript",
    "codeDescription": "This snippet shows how to set up a template-driven form control for a favorite color input field in an Angular component. It uses ngModel to create an implicit FormControl instance managed by Angular.",
    "codeLanguage": "typescript",
    "codeTokens": 96,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/overview.md#2025-04-08_snippet_1",
    "pageTitle": "Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-favorite-color',\n  template: '<input type=\"text\" [(ngModel)]=\"favoriteColor\">'\n})\nexport class FavoriteColorComponent {\n  favoriteColor = '';\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Basic Signal Usage for Shipping Method Selection in Angular",
    "codeDescription": "This snippet demonstrates a basic implementation of state management for shipping method selection using signals. It shows how to initialize a default selection and update it based on user input.",
    "codeLanguage": "typescript",
    "codeTokens": 123,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/linked-signal.md#2025-04-08_snippet_0",
    "pageTitle": "Dependent State Management with linkedSignal in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({/* ... */})\nexport class ShippingMethodPicker {\n  shippingOptions: Signal<ShippingMethod[]> = getShippingOptions();\n\n  // Select the first shipping option by default.\n  selectedOption = signal(this.shippingOptions()[0]);\n\n  changeShipping(newOptionIndex: number) {\n    this.selectedOption.set(this.shippingOptions()[newOptionIndex]);\n  }\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Extracting i18n Translations with Custom Output Filename in Angular CLI",
    "codeDescription": "Command to extract i18n translations and specify a custom output file name instead of using the default messages.xlf name.",
    "codeLanguage": "bash",
    "codeTokens": 53,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/translation-files.md#2025-04-08_snippet_3",
    "pageTitle": "Angular Internationalization (i18n) Translation File Management",
    "codeList": [
      {
        "language": "bash",
        "code": "ng extract-i18n --out-file=source.xlf"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Declaring Local Template Variables with @let in Angular",
    "codeDescription": "Examples of declaring local template variables using Angular's @let syntax. These variables are bound to template expressions and automatically kept up-to-date by Angular.",
    "codeLanguage": "angular-html",
    "codeTokens": 132,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/variables.md#2025-04-08_snippet_0",
    "pageTitle": "Using Variables in Angular Templates",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@let name = user.name;\n@let greeting = 'Hello, ' + name;\n@let data = data$ | async;\n@let pi = 3.1459;\n@let coordinates = {x: 50, y: 100};\n@let longExpression = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit ' +\n                      'sed do eiusmod tempor incididunt ut labore et dolore magna ' +\n                      'Ut enim ad minim veniam...';"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Service-to-Service Injection Example",
    "codeDescription": "Shows how to inject and use the Logger service within the HeroService, demonstrating service-to-service dependency injection.",
    "codeLanguage": "typescript",
    "codeTokens": 104,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/creating-injectable-service.md#2025-04-08_snippet_7",
    "pageTitle": "Angular Injectable Services Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { inject, Injectable } from '@angular/core';\nimport { HEROES } from './mock-heroes';\nimport { Logger } from '../logger.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HeroService {\n  private logger = inject(Logger);\n\n  getHeroes() {\n    this.logger.log('Getting heroes.');\n    return HEROES;\n  }\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Creating FormGroup with FormControls in Angular",
    "codeDescription": "Create a FormGroup object with FormControls for name and email fields. This sets up the structure for the reactive form in the component class.",
    "codeLanguage": "typescript",
    "codeTokens": 83,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/17-reactive-forms/README.md#2025-04-08_snippet_1",
    "pageTitle": "Setting Up Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {ReactiveFormsModule, FormControl, FormGroup } from '@angular/forms';\n...\nexport class AppComponent {\n  profileForm = new FormGroup({\n    name: new FormControl(''),\n    email: new FormControl(''),\n  });\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Implementing Filtered Item Retrieval in Menu Harness using TypeScript",
    "codeDescription": "This code snippet shows how to implement a method in the MyMenuHarness class to retrieve menu items with optional filtering. It demonstrates the use of the locatorForAll method with a HarnessPredicate to enable powerful filtering capabilities.",
    "codeLanguage": "typescript",
    "codeTokens": 140,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/creating-component-harnesses.md#2025-04-08_snippet_8",
    "pageTitle": "Creating Component Test Harnesses in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "class MyMenuHarness extends ComponentHarness {\n  static hostSelector = 'my-menu';\n\n  /** Gets a list of items in the menu, optionally filtered based on the given criteria. */\n  async getItems(filters: MyMenuItemHarnessFilters = {}): Promise<MyMenuItemHarness[]> {\n    const getFilteredItems = this.locatorForAll(MyMenuItemHarness.with(filters));\n    return getFilteredItems();\n  }\n  ...\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Adding Transient Info to RouterLink Input in Angular",
    "codeDescription": "This commit adds support for passing transient information to the RouterLink directive, allowing additional data to be associated with a navigation link.",
    "codeLanguage": "TypeScript",
    "codeTokens": 70,
    "codeId": "https://github.com/angular/angular/blob/main/CHANGELOG.md#2025-04-08_snippet_10",
    "pageTitle": "Angular v20.0.0-next.5 Release Notes",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "// Example usage:\n<a [routerLink]=\"['/path']\" [info]=\"{ transient: true }\">Link</a>"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Using Not Pseudo-Class in Component Selector",
    "codeDescription": "Demonstrates how to use the :not pseudo-class in a component selector to exclude specific elements from matching. Shows attribute selector with exclusion.",
    "codeLanguage": "angular-ts",
    "codeTokens": 61,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/selectors.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Component Selectors Guide",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: '[dropzone]:not(textarea)',\n  ...\n})\nexport class DropZone { }"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Listening to Child Component Events in Angular Templates",
    "codeDescription": "Example of binding to a child component's output event in a parent component template. The $event parameter represents the data emitted by the child component.",
    "codeLanguage": "angular-html",
    "codeTokens": 54,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/9-output/README.md#2025-04-08_snippet_3",
    "pageTitle": "Component Communication with @Output in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<app-child (addItemEvent)=\"addItem($event)\" />"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Simple Dependency Declaration in Angular DI",
    "codeDescription": "Shows a class with a constructor that declares a dependency on Engine, which the DI system will attempt to resolve by traversing the injector hierarchy.",
    "codeLanguage": "typescript",
    "codeTokens": 48,
    "codeId": "https://github.com/angular/angular/blob/main/packages/docs/di/di.md#2025-04-08_snippet_8",
    "pageTitle": "Dependency Injection in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "class Car {\n  constructor(e: Engine){}\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Binding to Component and Directive Properties in Angular",
    "codeDescription": "These snippets illustrate how to bind values to properties of custom components and directives using square bracket syntax in Angular templates.",
    "codeLanguage": "angular-html",
    "codeTokens": 67,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/binding.md#2025-04-08_snippet_2",
    "pageTitle": "Binding Dynamic Text, Properties, and Attributes in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<!-- Bind the `value` property on the `MyListbox` component instance. -->\n<my-listbox [value]=\"mySelection\" />"
      },
      {
        "language": "angular-html",
        "code": "<!-- Bind to the `ngSrc` property of the `NgOptimizedImage` directive  -->\n<img [ngSrc]=\"profilePhotoUrl\" alt=\"The current user's profile photo\">"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "RouterLink with Route Parameters",
    "codeDescription": "Shows how to include required route parameters in the router link array.",
    "codeLanguage": "angular-html",
    "codeTokens": 56,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/common-router-tasks.md#2025-04-08_snippet_28",
    "pageTitle": "Common Routing Tasks in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<a [routerLink]=\"['/hero', hero.id]\">\n  <span class=\"badge\">{{ hero.id }}</span>{{ hero.name }}\n</a>"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Demonstrating linkedSignal Behavior with Changing Options",
    "codeDescription": "This example illustrates how linkedSignal updates its value based on changes in the linked state. It shows the automatic update of the selected option when the available options change.",
    "codeLanguage": "typescript",
    "codeTokens": 124,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/linked-signal.md#2025-04-08_snippet_2",
    "pageTitle": "Dependent State Management with linkedSignal in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "const shippingOptions = signal(['Ground', 'Air', 'Sea']);\nconst selectedOption = linkedSignal(() => shippingOptions()[0]);\nconsole.log(selectedOption()); // 'Ground'\n\nselectedOption.set(shippingOptions()[2]);\nconsole.log(selectedOption()); // 'Sea'\n\nshippingOptions.set(['Email', 'Will Call', 'Postal service']);\nconsole.log(selectedOption()); // 'Email'"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Defining Dynamic Route in Angular",
    "codeDescription": "Demonstrates how to define a route with a dynamic segment for the details page in Angular.",
    "codeLanguage": "javascript",
    "codeTokens": 37,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/11-details-page/README.md#2025-04-08_snippet_0",
    "pageTitle": "Integrating Details Page with Routing in Angular",
    "codeList": [
      {
        "language": "javascript",
        "code": "'details/:id'"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Creating an InitCaps Pipe in Angular",
    "codeDescription": "A custom pipe that transforms text by capitalizing the first letter of each word. This is part of a shared module and demonstrates how to implement and export utility pipes for use across an application.",
    "codeLanguage": "typescript",
    "codeTokens": 111,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/best-practices/style-guide.md#2025-04-08_snippet_13",
    "pageTitle": "Angular Coding Style Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'initCaps' })\nexport class InitCapsPipe implements PipeTransform {\n  transform(value: string) {\n    return value.toLowerCase().replace(/(?:^|\\s)[a-z]/g, m => m.toUpperCase());\n  }\n}\n"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Adding HousingLocationComponent to HomeComponent Imports Array",
    "codeDescription": "Code showing how to add HousingLocationComponent to the imports array in the @Component decorator of HomeComponent. This registers the component for use within HomeComponent's template.",
    "codeLanguage": "typescript",
    "codeTokens": 54,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/03-HousingLocation/README.md#2025-04-08_snippet_3",
    "pageTitle": "Creating the HousingLocation Component in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "imports: [CommonModule, HousingLocationComponent],"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Using NgStyle in Angular Template",
    "codeDescription": "This example shows how to use NgStyle in an Angular template, binding to the currentStyles property.",
    "codeLanguage": "HTML",
    "codeTokens": 56,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_6",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div [ngStyle]=\"currentStyles\">This div is initially italic, normal weight, and extra large.</div>"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Testing Angular HighlightDirective with Various Techniques",
    "codeDescription": "This code snippet shows comprehensive tests for the HighlightDirective using various techniques such as By.directive predicate, DebugElement styles, element injector, and custom properties access.",
    "codeLanguage": "typescript",
    "codeTokens": 54,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/attribute-directives.md#2025-04-08_snippet_4",
    "pageTitle": "Testing Attribute Directives in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "app/shared/highlight.directive.spec.ts (selected tests)"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Optimizing Directive/Pipe Reference Emission in Angular Compiler",
    "codeDescription": "Enhancement to the Angular compiler-cli that reduces bundle size by only emitting directive and pipe references that are actually used in the application.",
    "codeLanguage": "typescript",
    "codeTokens": 41,
    "codeId": "https://github.com/angular/angular/blob/main/CHANGELOG_ARCHIVE.md#2025-04-08_snippet_44",
    "pageTitle": "Angular 13.3.11 Changelog",
    "codeList": [],
    "relevance": 0.919
  },
  {
    "codeTitle": "Bootstrap Application Configuration",
    "codeDescription": "Shows how to bootstrap an Angular application with configuration",
    "codeLanguage": "typescript",
    "codeTokens": 27,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/dependency-injection.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Dependency Injection Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "bootstrapApplication(AppComponent, appConfig)"
      }
    ],
    "relevance": 0.919
  },
  {
    "codeTitle": "ChangeDetectorRef Deprecation Notice - Angular Core",
    "codeDescription": "Documentation of the deprecation of ChangeDetectorRef.checkNoChanges method, recommending the use of ComponentFixture for test code instead.",
    "codeLanguage": "typescript",
    "codeTokens": 48,
    "codeId": "https://github.com/angular/angular/blob/main/CHANGELOG.md#2025-04-08_snippet_15",
    "pageTitle": "Angular v20.0.0-next.5 Release Notes",
    "codeList": [
      {
        "language": "typescript",
        "code": "ChangeDetectorRef.checkNoChanges"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Using Attribute Directives in Angular",
    "codeDescription": "Shows how to use attribute directives to enhance elements with presentation logic without a template. This example demonstrates a highlight directive applied to an element.",
    "codeLanguage": "TypeScript",
    "codeTokens": 132,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/best-practices/style-guide.md#2025-04-08_snippet_32",
    "pageTitle": "Angular Coding Style Guide",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "@Directive({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n  @Input('appHighlight') highlightColor = '';\n\n  @HostListener('mouseenter') onMouseEnter() {\n    this.highlight(this.highlightColor || 'cyan');\n  }\n\n  @HostListener('mouseleave') onMouseLeave() {\n    this.highlight('');\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n\n  constructor(private el: ElementRef) {}\n}"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Demonstrating Unsupported DOM Node Projection in Angular Components",
    "codeDescription": "This code snippet shows two Angular components: DynamicComponent and SimpleComponent. The SimpleComponent creates DOM nodes outside of Angular's context and attempts to content-project them, which is unsupported and triggers an error during hydration.",
    "codeLanguage": "typescript",
    "codeTokens": 239,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/errors/NG0503.md#2025-04-08_snippet_0",
    "pageTitle": "Hydration Unsupported Projection of DOM Nodes in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({\n  selector: 'dynamic',\n  template: `\n  <ng-content />\n`,\n})\nclass DynamicComponent {\n}\n\n@Component({\n  selector: 'app',\n  template: `<div #target></div>`,\n})\nclass SimpleComponent {\n  @ViewChild('target', {read: ViewContainerRef}) vcr!: ViewContainerRef;\n  envInjector = inject(EnvironmentInjector);\n\n  ngAfterViewInit() {\n    const div = document.createElement('div');\n    const p = document.createElement('p');\n    // In this test we create DOM nodes outside of Angular context\n    // (i.e. not using Angular APIs) and try to content-project them.\n    // This is an unsupported pattern and an exception will be thrown.\n    const compRef = createComponent(DynamicComponent, {\n      environmentInjector: this.envInjector,\n      projectableNodes: [[div, p]]\n    });\n  }\n}"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Configuring Angular Workspace with i18n SubPath for Localization",
    "codeDescription": "Example configuration in angular.json that sets up the subPath property for internationalization. This enables the CLI to adjust the base href for each localized version of the application.",
    "codeLanguage": "json",
    "codeTokens": 156,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/deploy.md#2025-04-08_snippet_0",
    "pageTitle": "Deploying Angular Applications with Multiple Locales",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"projects\": {\n    \"angular.io-example\": {\n      \"architect\": {\n        \"build\": {\n          \"options\": {\n            \"localize\": false,\n            \"i18nMissingTranslation\": \"warning\"\n          },\n          \"configurations\": {\n            \"production\": {\n              \"subPath\": \"\"\n            },\n            \"fr\": {\n              \"localize\": [\"fr\"]\n            },\n            \"es\": {\n              \"localize\": [\"es\"]\n            }\n          }\n        }\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Using Text Interpolation in Properties and Attributes in Angular",
    "codeDescription": "These snippets show how to use text interpolation syntax (double curly braces) for property and attribute binding in Angular templates, including binding to the 'alt' property and 'aria-label' attribute.",
    "codeLanguage": "angular-html",
    "codeTokens": 90,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/binding.md#2025-04-08_snippet_4",
    "pageTitle": "Binding Dynamic Text, Properties, and Attributes in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<!-- Binds a value to the `alt` property of the image element's DOM object. -->\n<img src=\"profile-photo.jpg\" alt=\"Profile photo of {{ firstName }}\" >"
      },
      {
        "language": "angular-html",
        "code": "<button attr.aria-label=\"Save changes to {{ objectType }}\">"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Adding Support for TypeScript 3.8",
    "codeDescription": "This update adds support for TypeScript 3.8 in the Angular framework.",
    "codeLanguage": "typescript",
    "codeTokens": 37,
    "codeId": "https://github.com/angular/angular/blob/main/CHANGELOG_ARCHIVE.md#2025-04-08_snippet_88",
    "pageTitle": "Angular 13.3.11 Changelog",
    "codeList": [
      {
        "language": "typescript",
        "code": "typescript 3.8 support"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Setting Path for Schematic Output",
    "codeDescription": "Code that determines where the schematic template files will be moved to once the schematic is applied, using either the provided path or the project's sourceRoot.",
    "codeLanguage": "typescript",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/schematics-for-libraries.md#2025-04-08_snippet_16",
    "pageTitle": "Creating and Packaging Angular Library Schematics",
    "codeList": [
      {
        "language": "typescript",
        "code": "if (options.path === undefined) {\n  options.path = `${projectConfig.sourceRoot}/${projectType}`;\n}"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "TI18n Data Structure for ICU Attribute Binding in Angular",
    "codeDescription": "Detailed TypeScript representation of the TI18n internal data structure used by Angular for ICU messages in attribute bindings. Contains create, update operation codes, and ICU case handling with expandoStartIndex and variable definitions.",
    "codeLanguage": "typescript",
    "codeTokens": 959,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/src/render3/i18n/i18n.md#2025-04-08_snippet_16",
    "pageTitle": "Angular i18n Message Implementation Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "const tI18n = <TI18n>{\n  vars: 0,                               // Number of slots to allocate in EXPANDO. (Max of all ICUs + fixed)\n  expandoStartIndex: 200,                // Assume in this example EXPANDO starts at 200\n  create: <I18nMutateOpCodes>[\n    // attributes have no create block\n  ],\n  update: <I18nUpdateOpCodes>[\n    // If `changeMask & 0b1`\n    //        has changed then execute update OpCodes.\n    //        has NOT changed then skip `2` values and start processing next OpCodes.\n    0b1, 2,\n    -1,       // accumulate(-1)\n    // Switch ICU: `icuSwitchCase(lView[200 /*SHIFT_REF*/], 0 /*SHIFT_ICU*/, accumulatorFlush());`\n    200 << SHIFT_REF | 0 << SHIFT_ICU | IcuSwitch,\n\n    // NOTE: the bit mask here is the logical OR of all of the masks in the ICU.\n    0b1, 4,\n    'You have ',  // accumulate('You have ');\n\n    // Update ICU: `icuUpdateCase(lView[200 /*SHIFT_REF*/], 0 /*SHIFT_ICU*/);`\n    // SHIFT_REF: points to: `i18nStart(0, MSG_div, 1);`\n    // SHIFT_ICU: is an index into which ICU is being updated. In our example we only have\n    //            one ICU so it is 0-th ICU to update.\n    200 << SHIFT_REF | 0 << SHIFT_ICU | IcuUpdate,\n\n    '.',  // accumulate('.');\n\n    // Update attribute: `elementAttribute(1, 'title', accumulatorFlush(null));`\n    // NOTE: `null` means don't sanitize\n    1 << SHIFT_REF | Attr, 'title', null,\n  ],\n  icus: [\n    <TIcu>{\n      cases: [0, 1, 'other'],\n      vars: [0, 0, 0],\n      expandoStartIndex: 200,                // Assume in this example EXPANDO starts at 200\n      childIcus: [],\n      create: [\n        // Case: `0`: `{no emails}`\n        <I18nMutateOpCodes>[ ]\n        // Case: `1`: `{one email}`\n        <I18nMutateOpCodes>[ ]\n        // Case: `\"other\"`: `{�0� emails}`\n        <I18nMutateOpCodes>[ ]\n      ],\n      remove: [\n        // Case: `0`: `{no emails}`\n        <I18nMutateOpCodes>[ ]\n        // Case: `1`: `{one email}`\n        <I18nMutateOpCodes>[ ]\n        // Case: `\"other\"`: `{�0� emails}`\n        <I18nMutateOpCodes>[ ]\n      ],\n      update: [\n        // Case: `0`: `{no emails}`\n        <I18nMutateOpCodes>[\n          // If `changeMask & -1` // always true\n          //        has changed then execute update OpCodes.\n          //        has NOT changed then skip `1` values and start processing next OpCodes.\n          -1, 1,\n          'no emails',  // accumulate('no emails');\n        ]\n        // Case: `1`: `{one email}`\n        <I18nMutateOpCodes>[\n          // If `changeMask & -1` // always true\n          //        has changed then execute update OpCodes.\n          //        has NOT changed then skip `1` values and start processing next OpCodes.\n          -1, 1,\n          'one email',  // accumulate('no emails');\n        ]\n        // Case: `\"other\"`: `{�0� emails}`\n        <I18nMutateOpCodes>[\n          // If `changeMask & -1` // always true\n          //        has changed then execute update OpCodes.\n          //        has NOT changed then skip `1` values and start processing next OpCodes.\n          -1, 2,\n          -1,        // accumulate(lView[bindIndex-1]);\n          'emails',  // accumulate('no emails');\n         ]\n      ]\n    }\n  ]\n}"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Using Harness Loader to Get Component Harnesses in Angular",
    "codeDescription": "Demonstrates how to use a harness loader to get single or multiple instances of component harnesses. It shows both getHarness() for a single instance and getAllHarnesses() for multiple instances.",
    "codeLanguage": "typescript",
    "codeTokens": 98,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/using-component-harnesses.md#2025-04-08_snippet_3",
    "pageTitle": "Using Component Harnesses in Angular Tests",
    "codeList": [
      {
        "language": "typescript",
        "code": "// Get harness for first instance of the element\nconst myComponentHarness = await loader.getHarness(MyComponent);\n\n// Get harnesses for all instances of the element\nconst myComponentHarnesses = await loader.getHarnesses(MyComponent);"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Adding RouterModule to Angular Component Imports",
    "codeDescription": "Include RouterModule in the @Component metadata imports for the AppComponent.",
    "codeLanguage": "typescript",
    "codeTokens": 28,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/10-routing/README.md#2025-04-08_snippet_4",
    "pageTitle": "Adding Routes to Angular Application",
    "codeList": [
      {
        "language": "typescript",
        "code": "imports: [RouterModule],"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Applying Async Validator to FormControl - TypeScript",
    "codeDescription": "Demonstrates how to apply an async validator to a FormControl in reactive forms by passing it to the asyncValidators option.",
    "codeLanguage": "typescript",
    "codeTokens": 57,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/form-validation.md#2025-04-08_snippet_14",
    "pageTitle": "Validating Form Input in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "const roleControl = new FormControl('', {\n  asyncValidators: this.roleValidator.validate.bind(this.roleValidator)\n});"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Implementing Custom Image Loader Function in Angular",
    "codeDescription": "Example of a custom image loader function that uses src, width, and loaderParams to construct a URL. It demonstrates handling optional parameters and custom CDN features.",
    "codeLanguage": "typescript",
    "codeTokens": 133,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/image-optimization.md#2025-04-08_snippet_20",
    "pageTitle": "Using NgOptimizedImage Directive in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "const myCustomLoader = (config: ImageLoaderConfig) => {\n  let url = `https://example.com/images/${config.src}?`;\n  let queryParams = [];\n  if (config.width) {\n    queryParams.push(`w=${config.width}`);\n  }\n  if (config.loaderParams?.roundedCorners) {\n    queryParams.push('mask=corners&corner-radius=5');\n  }\n  return url + queryParams.join('&');\n};"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Adding style=\"{{exp}}\" based interpolation in Angular Core",
    "codeDescription": "This fix adds support for style attribute interpolation using the format style=\"{{exp}}\" in Angular core, addressing issue #33575.",
    "codeLanguage": "TypeScript",
    "codeTokens": 49,
    "codeId": "https://github.com/angular/angular/blob/main/CHANGELOG_ARCHIVE.md#2025-04-08_snippet_91",
    "pageTitle": "Angular 13.3.11 Changelog",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "Add `style=\"{{exp}}\"` based interpolation"
      }
    ],
    "relevance": 0.917
  },
  {
    "codeTitle": "Configuring Styles and Scripts in Angular CLI JSON",
    "codeDescription": "Illustrates how to configure styles and scripts as separate bundles with custom names and injection settings in the Angular CLI configuration file.",
    "codeLanguage": "json",
    "codeTokens": 162,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/configs/workspace-config.md#2025-04-08_snippet_5",
    "pageTitle": "Angular Workspace Configuration Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"projects\": {\n    \"my-app\": {\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:application\",\n          \"options\": {\n            \"styles\": [\n              {\n                \"input\": \"src/external-module/styles.scss\",\n                \"inject\": false,\n                \"bundleName\": \"external-module\"\n              }\n            ],\n            \"scripts\": [\n              {\n                \"input\": \"src/external-module/main.js\",\n                \"inject\": false,\n                \"bundleName\": \"external-module\"\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.916
  },
  {
    "codeTitle": "Implementing Skill Selection Dropdown with NgForOf",
    "codeDescription": "This template code creates a dropdown selection element for skills using Angular's NgForOf directive to iterate over available skills.",
    "codeLanguage": "html",
    "codeTokens": 108,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/forms/template-driven-forms.md#2025-04-08_snippet_6",
    "pageTitle": "Building a Template-Driven Form in Angular",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"form-group\">\n  <label for=\"skill\">Skill</label>\n  <select class=\"form-control\" id=\"skill\" required [(ngModel)]=\"model.skill\" name=\"skill\">\n    <option *ngFor=\"let skill of skills\" [value]=\"skill\">{{skill}}</option>\n  </select>\n</div>"
      }
    ],
    "relevance": 0.916
  },
  {
    "codeTitle": "Adding Original Placeholder Value - Angular Compiler",
    "codeDescription": "Enhancement to add original placeholder value on extracted XMB in the Angular compiler.",
    "codeLanguage": "typescript",
    "codeTokens": 34,
    "codeId": "https://github.com/angular/angular/blob/main/CHANGELOG_ARCHIVE.md#2025-04-08_snippet_133",
    "pageTitle": "Angular 13.3.11 Changelog",
    "codeList": [
      {
        "language": "typescript",
        "code": "e99d860"
      }
    ],
    "relevance": 0.916
  },
  {
    "codeTitle": "Implementing Custom Provider with @Inject for Browser Storage in Angular",
    "codeDescription": "This snippet demonstrates how to create a custom provider for localStorage using InjectionToken and implement it in a BrowserStorageService. It allows for easy mocking during testing.",
    "codeLanguage": "typescript",
    "codeTokens": 147,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/di/di-in-action.md#2025-04-08_snippet_0",
    "pageTitle": "Dependency Injection in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nexport const BROWSER_STORAGE = new InjectionToken<Storage>('Browser Storage', {\n  providedIn: 'root',\n  factory: () => localStorage\n});\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BrowserStorageService {\n  public storage = inject(BROWSER_STORAGE);\n\n  get(key: string) {\n    return this.storage.getItem(key);\n  }\n\n  set(key: string, value: string) {\n    this.storage.setItem(key, value);\n  }\n}"
      }
    ],
    "relevance": 0.916
  },
  {
    "codeTitle": "Testing Function-based HTTP Interceptor",
    "codeDescription": "Configuration and testing setup for function-based HTTP interceptor.",
    "codeLanguage": "typescript",
    "codeTokens": 96,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/testing.md#2025-04-08_snippet_8",
    "pageTitle": "Testing HTTP Requests in Angular Applications",
    "codeList": [
      {
        "language": "typescript",
        "code": "TestBed.configureTestingModule({\n  providers: [\n    AuthService,\n    // Testing one interceptor at a time is recommended.\n    provideHttpClient(withInterceptors([authInterceptor])),\n    provideHttpClientTesting(),\n  ],\n});\n\nconst service = TestBed.inject(AuthService);\nconst req = httpTesting.expectOne('/api/config');\n\nexpect(req.request.headers.get('X-Authentication-Token')).toEqual(service.getAuthToken());"
      }
    ],
    "relevance": 0.916
  },
  {
    "codeTitle": "Proper Usage of inject() in Angular Components",
    "codeDescription": "Shows valid places to call inject() within a class, including field initializers and constructor bodies. These are allowed because they execute during component creation when the injection context is available.",
    "codeLanguage": "typescript",
    "codeTokens": 106,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/errors/NG0203.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Inject Function Usage Guidelines",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Injectable({providedIn: 'root'})\nexport class Car {\n  radio: Radio|undefined;\n\n  // OK: field initializer\n  spareTyre = inject(Tyre);\n  \n  constructor() {\n    // OK: constructor body\n    this.radio = inject(Radio);\n  }\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Implementing viewport Trigger with @defer in Angular HTML",
    "codeDescription": "Demonstrates how to use the viewport trigger to load deferred content when it enters the viewport.",
    "codeLanguage": "angular-html",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/defer.md#2025-04-08_snippet_6",
    "pageTitle": "Deferred Loading with @defer in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@defer (on viewport) {\n  <large-cmp />\n} @placeholder {\n  <div>Large component placeholder</div>\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Enabling Localization for All Defined Locales in angular.json",
    "codeDescription": "Configuration in angular.json that sets the 'localize' option to true, instructing the CLI to build versions for all locales defined in the build configuration.",
    "codeLanguage": "json",
    "codeTokens": 141,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/merge.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Internationalization (i18n) Guide: Merging Translations",
    "codeList": [
      {
        "language": "json",
        "code": "\"build\": {\n  \"builder\": \"@angular-devkit/build-angular:browser\",\n  \"options\": {\n    \"localize\": true,\n    \"aot\": true,\n    \"outputPath\": \"dist/my-project\",\n    \"index\": \"src/index.html\",\n    \"main\": \"src/main.ts\",\n    \"polyfills\": \"src/polyfills.ts\",\n    \"tsConfig\": \"tsconfig.app.json\"\n  }\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Configuring Import Conditions in Package.json for Browser/Server",
    "codeDescription": "Package.json configuration for subpath imports that maps '#crashReporter' to different files based on the browser or server environment. This is useful for SSR applications that need different implementations.",
    "codeLanguage": "json",
    "codeTokens": 89,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/build-system-migration.md#2025-04-08_snippet_20",
    "pageTitle": "Angular Application Build System Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  ...\n  \"imports\": {\n    \"#crashReporter\": {\n      \"browser\": \"./src/browser-logger.ts\",\n      \"default\": \"./src/server-logger.ts\"\n    }\n  }\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "CSS Styles for Open-Close Component",
    "codeDescription": "The CSS styles applied to the open-close component, defining the container's appearance and layout.",
    "codeLanguage": "css",
    "codeTokens": 100,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/overview.md#2025-04-08_snippet_14",
    "pageTitle": "Introduction to Angular Animations Guide",
    "codeList": [
      {
        "language": "css",
        "code": ":host {\n  display: block;\n}\n\n.open-close-container {\n  border: 1px solid #dddddd;\n  margin-top: 1em;\n  padding: 20px 20px 0px 20px;\n  color: #000000;\n  font-weight: bold;\n  font-size: 20px;\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Incorrect Usage of inject() in Angular Lifecycle Hooks",
    "codeDescription": "Shows an example of an invalid inject() call within a component's lifecycle hook. This fails because lifecycle hooks execute after component instantiation when the injection context is no longer available.",
    "codeLanguage": "typescript",
    "codeTokens": 88,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/errors/NG0203.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Inject Function Usage Guidelines",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Component({ ... })\nexport class CarComponent {\n  ngOnInit() {\n    // ERROR: too late, the component instance was already created\n    const engine = inject(Engine);\n    engine.start();\n  }\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Updating DetailsComponent Template in Angular",
    "codeDescription": "Shows how to update the DetailsComponent template to display housing location details using optional chaining.",
    "codeLanguage": "typescript",
    "codeTokens": 213,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/11-details-page/README.md#2025-04-08_snippet_3",
    "pageTitle": "Integrating Details Page with Routing in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "template: `\n  <article>\n    <img class=\"listing-photo\" [src]=\"housingLocation?.photo\"\n      alt=\"Exterior photo of {{housingLocation?.name}}\">\n    <section class=\"listing-description\">\n      <h2 class=\"listing-heading\">{{housingLocation?.name}}</h2>\n      <p class=\"listing-location\">{{housingLocation?.city}}, {{housingLocation?.state}}</p>\n    </section>\n    <section class=\"listing-features\">\n      <h2 class=\"section-heading\">About this housing location</h2>\n      <ul>\n        <li>Units available: {{housingLocation?.availableUnits}}</li>\n        <li>Does this location have wifi: {{housingLocation?.wifi}}</li>\n        <li>Does this location have laundry: {{housingLocation?.laundry}}</li>\n      </ul>\n    </section>\n  </article>\n`,"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Complete HomeComponent TypeScript File",
    "codeDescription": "This is the complete HomeComponent file including imports, component decorator, and class definition with the HousingLocation instance.",
    "codeLanguage": "typescript",
    "codeTokens": 253,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/04-interfaces/README.md#2025-04-08_snippet_4",
    "pageTitle": "Creating an Interface in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HousingLocationComponent } from '../housing-location/housing-location.component';\nimport { HousingLocation } from '../housinglocation';\n\n@Component({\n  selector: 'app-home',\n  standalone: true,\n  imports: [\n    CommonModule,\n    HousingLocationComponent\n  ],\n  template: `\n    <section>\n      <form>\n        <input type=\"text\" placeholder=\"Filter by city\">\n        <button class=\"primary\" type=\"button\">Search</button>\n      </form>\n    </section>\n    <section class=\"results\">\n      <app-housing-location></app-housing-location>\n    </section>\n  `,\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent {\n  housingLocation: HousingLocation = {\n    id: 9999,\n    name: 'Test Home',\n    city: 'Test city',\n    state: 'ST',\n    photo: 'assets/example-house.jpg',\n    availableUnits: 99,\n    wifi: true,\n    laundry: false,\n  };\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Generating Code Coverage Report with Angular CLI",
    "codeDescription": "This command runs unit tests and generates a code coverage report for an Angular project.",
    "codeLanguage": "shell",
    "codeTokens": 39,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/code-coverage.md#2025-04-08_snippet_0",
    "pageTitle": "Generating and Enforcing Code Coverage in Angular",
    "codeList": [
      {
        "language": "shell",
        "code": "ng test --no-watch --code-coverage"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Allowing Null Values in Angular Core Renderer",
    "codeDescription": "This fix allows null values to be passed to the renderer's setElement method in Angular core.",
    "codeLanguage": "TypeScript",
    "codeTokens": 93,
    "codeId": "https://github.com/angular/angular/blob/main/CHANGELOG_ARCHIVE.md#2025-04-08_snippet_139",
    "pageTitle": "Angular 13.3.11 Changelog",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "allow null value for renderer setElement(…) ([#17065](https://github.com/angular/angular/issues/17065)) ([ff15043](https://github.com/angular/angular/commit/ff15043)), closes [#13686](https://github.com/angular/angular/issues/13686)"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Updating Angular Material Library",
    "codeDescription": "Demonstrates how to use the ng update command to update the Angular Material library and its dependencies.",
    "codeLanguage": "shell",
    "codeTokens": 37,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/schematics.md#2025-04-08_snippet_4",
    "pageTitle": "Generating Code with Angular Schematics",
    "codeList": [
      {
        "language": "shell",
        "code": "ng update @angular/material"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Defining Basic Routes in Angular Router",
    "codeDescription": "Basic implementation of routes in Angular using the Routes array. This snippet shows how to import the Routes type from Angular router and define a route for the HomeComponent with an empty path, which corresponds to the root URL.",
    "codeLanguage": "typescript",
    "codeTokens": 94,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/13-define-a-route/README.md#2025-04-08_snippet_0",
    "pageTitle": "Defining Routes in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Routes} from '@angular/router';\n\nimport {HomeComponent} from './home/home.component';\n\nexport const routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent,\n  },\n];"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Rendering i18n Elements in Angular HTML Template",
    "codeDescription": "This snippet demonstrates an Angular template with i18n elements, including pluralization and conditional rendering. It shows how complex i18n structures are represented in HTML.",
    "codeLanguage": "html",
    "codeTokens": 128,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/src/render3/i18n/i18n.md#2025-04-08_snippet_3",
    "pageTitle": "Angular i18n Message Implementation Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<div i18n>\n  {{count}} is rendered as:\n  <b *ngIf=\"exp\">\n    { count, plural,\n        =0 {no <b title=\"none\">emails</b>!}\n        =1 {one <i>email</i>}\n        other {{{count}} <span title=\"{{count}}\">emails</span>}\n    }\n  </b>.\n</div>"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Setting Up a Structural Directive in Angular TypeScript",
    "codeDescription": "Initial setup for a structural directive in Angular, injecting TemplateRef and ViewContainerRef which are required for manipulating the template.",
    "codeLanguage": "typescript",
    "codeTokens": 88,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/structural-directives.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Structural Directives Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\n\n@Directive({\n  selector: '[select]',\n})\nexport class SelectDirective {\n  private templateRef = inject(TemplateRef);\n  private ViewContainerRef = inject(ViewContainerRef);\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Implementing Wildcard Transitions in Angular Animations",
    "codeDescription": "Demonstrates how to use wildcard state transitions to handle animations between open and closed states with different timing durations.",
    "codeLanguage": "typescript",
    "codeTokens": 132,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/animations/transition-and-triggers.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Animation Transitions and Triggers Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "trigger('openClose', [\n  state('open', style({\n    height: '200px',\n    opacity: 1,\n    backgroundColor: 'yellow'\n  })),\n  state('closed', style({\n    height: '100px',\n    opacity: 0.5,\n    backgroundColor: 'green'\n  })),\n  transition('* => closed', [\n    animate('1s')\n  ]),\n  transition('* => open', [\n    animate('0.5s')\n  ])\n])"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Using TrackBy with NgFor in Angular HTML Template",
    "codeDescription": "This snippet demonstrates how to use the trackBy function with NgFor in an Angular template to improve rendering efficiency.",
    "codeLanguage": "html",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/overview.md#2025-04-08_snippet_18",
    "pageTitle": "Angular Built-in Directives Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div *ngFor=\"let item of items; trackBy: trackByItems\">\n  ({{ item.id }}) {{ item.name }}\n</div>"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Configuring Nested Routes in Angular TypeScript",
    "codeDescription": "This code snippet shows how to configure nested routes in Angular using the Routes array, including parent and child routes.",
    "codeLanguage": "typescript",
    "codeTokens": 139,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/routing/common-router-tasks.md#2025-04-08_snippet_16",
    "pageTitle": "Common Routing Tasks in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "const routes: Routes = [\n  {\n    path: 'first-component',\n    component: FirstComponent, // this is the component with the <router-outlet> in the template\n    children: [\n      {\n        path: 'child-a', // child route path\n        component: ChildAComponent, // child route component that the router renders\n      },\n      {\n        path: 'child-b',\n        component: ChildBComponent, // another child route component that the router renders\n      },\n    ],\n  },\n];"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Importing RouterLink and RouterOutlet in Angular Component",
    "codeDescription": "Demonstrates how to import RouterLink and RouterOutlet from @angular/router for use in an Angular component.",
    "codeLanguage": "typescript",
    "codeTokens": 78,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/11-details-page/README.md#2025-04-08_snippet_2",
    "pageTitle": "Integrating Details Page with Routing in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HousingLocation } from '../housinglocation';\nimport { RouterLink, RouterOutlet } from '@angular/router';"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Defining a Basic NgModule in TypeScript",
    "codeDescription": "Shows the basic structure for defining an NgModule with the @NgModule decorator. The decorator accepts metadata that tells Angular how to compile component templates and configure dependency injection.",
    "codeLanguage": "typescript",
    "codeTokens": 66,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/ngmodules/overview.md#2025-04-08_snippet_0",
    "pageTitle": "Angular NgModules Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {NgModule} from '@angular/core';\n\n@NgModule({\n  // Metadata goes here\n})\nexport class CustomMenuModule { }"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Starting JSON Server",
    "codeDescription": "Command to start the JSON server and watch for changes in the db.json file",
    "codeLanguage": "bash",
    "codeTokens": 34,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/14-http/README.md#2025-04-08_snippet_2",
    "pageTitle": "Integrating HTTP Communication in Angular Applications",
    "codeList": [
      {
        "language": "bash",
        "code": "json-server --watch db.json"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Angular Prefetch Configuration for @defer Blocks",
    "codeDescription": "Example showing how to configure prefetching for deferred content in Angular templates. Prefetching initiates loading of the defer block but doesn't affect rendering, which is controlled by the standard triggers and conditions.",
    "codeLanguage": "angular-html",
    "codeTokens": 73,
    "codeId": "https://github.com/angular/angular/blob/main/tools/manual_api_docs/blocks/defer.md#2025-04-08_snippet_1",
    "pageTitle": "Angular @defer Block Documentation",
    "codeList": [
      {
        "language": "angular-html",
        "code": "@defer (prefetch on <trigger>; prefetch when <condition>) {\n  <!-- deferred template fragment -->\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Setting View Encapsulation Mode in Angular Component",
    "codeDescription": "Demonstrates how to set a specific view encapsulation mode for an Angular component using the 'encapsulation' property in the @Component decorator. This example sets it to ViewEncapsulation.None.",
    "codeLanguage": "angular-ts",
    "codeTokens": 70,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/styling.md#2025-04-08_snippet_2",
    "pageTitle": "Styling Angular Components",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  ...,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class ProfilePhoto { }"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Implementing Form Submission Handler in Angular Component",
    "codeDescription": "This method handles the 'Apply now' button click in the DetailsComponent, submitting the form data to the housing service.",
    "codeLanguage": "TypeScript",
    "codeTokens": 76,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/12-forms/README.md#2025-04-08_snippet_4",
    "pageTitle": "Adding a Form to an Angular App",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "submitApplication() {\n  this.housingService.submitApplication(\n    this.applyForm.value.firstName ?? '',\n    this.applyForm.value.lastName ?? '',\n    this.applyForm.value.email ?? ''\n  );\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Configuring CommonJS Dependencies in Angular JSON",
    "codeDescription": "This JSON snippet shows how to suppress warnings for CommonJS dependencies by adding them to the 'allowedCommonJsDependencies' array in the project's angular.json file. This example specifically allows the 'lodash' package.",
    "codeLanguage": "json",
    "codeTokens": 97,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/build.md#2025-04-08_snippet_2",
    "pageTitle": "Building Angular Applications Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "\"build\": {\n  \"builder\": \"@angular-devkit/build-angular:browser\",\n  \"options\": {\n     \"allowedCommonJsDependencies\": [\n        \"lodash\"\n     ]\n     …\n   }\n   …\n},"
      }
    ],
    "relevance": 0.914
  },
  {
    "codeTitle": "Setting Correct Timezone for ISO8601 Dates in Safari",
    "codeDescription": "Fixes an issue with timezone handling for ISO8601 dates in Safari browser.",
    "codeLanguage": "TypeScript",
    "codeTokens": 84,
    "codeId": "https://github.com/angular/angular/blob/main/CHANGELOG_ARCHIVE.md#2025-04-08_snippet_153",
    "pageTitle": "Angular 13.3.11 Changelog",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "([#21506](https://github.com/angular/angular/issues/21506)) ([8e9cd57](https://github.com/angular/angular/commit/8e9cd57)), closes [#21491](https://github.com/angular/angular/issues/21491)"
      }
    ],
    "relevance": 0.914
  },
  {
    "codeTitle": "Testing Angular Component with Property Changes",
    "codeDescription": "This test demonstrates changing a component's property and then triggering change detection to update the view.",
    "codeLanguage": "typescript",
    "codeTokens": 64,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "it('should display a different test title', () => {\n  component.title = 'Test Title';\n  fixture.detectChanges();\n  expect(h1.textContent).toContain('Test Title');\n});"
      }
    ],
    "relevance": 0.914
  },
  {
    "codeTitle": "Testing Angular Component with Property Changes",
    "codeDescription": "This test demonstrates changing a component's property and then triggering change detection to update the view.",
    "codeLanguage": "typescript",
    "codeTokens": 64,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/testing/components-scenarios.md#2025-04-08_snippet_4",
    "pageTitle": "Angular Component Testing Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "it('should display a different test title', () => {\n  component.title = 'Test Title';\n  fixture.detectChanges();\n  expect(h1.textContent).toContain('Test Title');\n});"
      }
    ],
    "relevance": 0.914
  },
  {
    "codeTitle": "Initializing Input Properties with Angular's input() Function in TypeScript",
    "codeDescription": "This snippet shows how to initialize input properties using Angular's input() function. It demonstrates handling nullable string inputs and implementing a validation method.",
    "codeLanguage": "TypeScript",
    "codeTokens": 87,
    "codeId": "https://github.com/angular/angular/blob/main/packages/core/schematics/migrations/signal-migration/test/golden_best_effort.txt#2025-04-08_snippet_4",
    "pageTitle": "Angular Input Signal Migration Tests",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "  readonly name = input<string | null>(null);\n  readonly complex = input<string | null>(null);\n\n  valid() {\n    const name = this.name();\n    if (name) {\n      name.charAt(0);\n    }\n  }"
      }
    ],
    "relevance": 0.913
  },
  {
    "codeTitle": "Breaking Change Example: Injector Type Checking Variant",
    "codeDescription": "Another example showing the same breaking change around injector type checking, illustrating the impact on mock implementations.",
    "codeLanguage": "typescript",
    "codeTokens": 154,
    "codeId": "https://github.com/angular/angular/blob/main/CHANGELOG_ARCHIVE.md#2025-04-08_snippet_216",
    "pageTitle": "Angular 13.3.11 Changelog",
    "codeList": [
      {
        "language": "typescript",
        "code": "class Foo {}\nclass MockFoo extends Foo {\n  setupMock();\n}\n\nvar PROVIDERS = [\n  {provide: Foo, useClass: MockFoo}\n];\n\n...\n\nfunction myTest(injector: Injector) {\n  var foo = injector.get(Foo);\n  // This line used to work since `foo` used to be `any` before this\n  // change, it will now be `Foo`, and `Foo` does not have `setUpMock()`.\n  // The fix is to downcast: `injector.get(Foo) as MockFoo`.\n  foo.setUpMock();\n}"
      }
    ],
    "relevance": 0.913
  },
  {
    "codeTitle": "Adding Filtered Results Property in HomeComponent",
    "codeDescription": "Updates the HomeComponent class to include a new property 'filteredLocationList' for storing filtered housing locations. The constructor is also modified to initialize this property with all housing locations by default.",
    "codeLanguage": "typescript",
    "codeTokens": 74,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/13-search/README.md#2025-04-08_snippet_0",
    "pageTitle": "Adding Search Functionality to Angular App",
    "codeList": [
      {
        "language": "typescript",
        "code": "filteredLocationList: HousingLocation[] = [];\n\nconstructor() {\n  this.filteredLocationList = this.housingLocationList;\n}"
      }
    ],
    "relevance": 0.913
  },
  {
    "codeTitle": "Configuring Production Size Budgets in Angular.json",
    "codeDescription": "Example configuration showing how to set size budgets for production builds in angular.json. The snippet demonstrates setting initial bundle size thresholds with warning at 250kb and error at 500kb.",
    "codeLanguage": "json",
    "codeTokens": 100,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tools/cli/build.md#2025-04-08_snippet_1",
    "pageTitle": "Building Angular Applications Documentation",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"configurations\": {\n    \"production\": {\n      \"budgets\": [\n        {\n          \"type\": \"initial\",\n          \"maximumWarning\": \"250kb\",\n          \"maximumError\": \"500kb\"\n        }\n      ]\n    }\n  }\n}"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Angular Component with Styles",
    "codeDescription": "Shows how to add inline CSS styles to an Angular component that are scoped to the component.",
    "codeLanguage": "angular-ts",
    "codeTokens": 79,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/components/anatomy-of-components.md#2025-04-08_snippet_1",
    "pageTitle": "Angular Component Structure and Usage Guide",
    "codeList": [
      {
        "language": "angular-ts",
        "code": "@Component({\n  selector: 'profile-photo',\n  template: `<img src=\"profile-photo.jpg\" alt=\"Your profile photo\">`,\n  styles: `img { border-radius: 50%; }`,\n})\nexport class ProfilePhoto { }"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Configuring Basic Push Notification Payload with Click Action in JSON",
    "codeDescription": "Example showing how to structure a basic push notification payload with a default click action to open a window. Demonstrates using the onActionClick property to define default behavior.",
    "codeLanguage": "json",
    "codeTokens": 95,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/ecosystem/service-workers/push-notifications.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Service Worker Push Notifications Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"notification\": {\n    \"title\": \"New Notification!\",\n    \"data\": {\n      \"onActionClick\": {\n        \"default\": {\"operation\": \"openWindow\", \"url\": \"foo\"}\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Configuring Production Build with Conditional Optimization in Angular",
    "codeDescription": "Example showing how to configure build options with environment-specific configurations. This sets up optimization to be disabled by default but enabled specifically for production builds.",
    "codeLanguage": "json",
    "codeTokens": 119,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/reference/configs/workspace-config.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Workspace Configuration Guide",
    "codeList": [
      {
        "language": "json",
        "code": "{\n  \"projects\": {\n    \"my-app\": {\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-devkit/build-angular:application\",\n          \"options\": {\n            \"optimization\": false\n          },\n          \"configurations\": {\n            \"production\": {\n              \"optimization\": true\n            }\n          }\n        }\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Defining Angular Component Template with i18n Attributes",
    "codeDescription": "An Angular component template containing text with i18n directives for internationalization. It includes examples of basic text translation, translation with meaning and description, plural forms, and nested expressions.",
    "codeLanguage": "html",
    "codeTokens": 231,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/i18n/example.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Internationalization Example Application",
    "codeList": [
      {
        "language": "html",
        "code": "<h1 i18n=\"site header|An introduction header for this sample@@introductionHeader\">Hello i18n!</h1>\n\n<ng-container i18n>I don't output any element</ng-container>\n\n<br>\n\n<ng-container i18n>{{ placeholder }}</ng-container>\n\n<br>\n\n<button type=\"button\" (click)=\"inc(1)\">+</button> <button type=\"button\" (click)=\"inc(-1)\">-</button>\n\n<span i18n>{minutes, plural, =0 {just now} =1 {one minute ago} other {{{minutes}} minutes ago}}</span>\n\n<br>\n\n<span i18n>Updated: {minutes, number}</span>\n\n<br />\n\n<span i18n>The author is {gender, select, male {male} female {female} other {other}}</span>\n\n<br />\n\n<span i18n example=\"User welcome\">Hello {{ placeholder }}</span>"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Using Maps in Angular compiler selector implementation",
    "codeDescription": "Performance improvement to use Maps instead of objects in selector implementation in the Angular compiler.",
    "codeLanguage": "TypeScript",
    "codeTokens": 39,
    "codeId": "https://github.com/angular/angular/blob/main/CHANGELOG_ARCHIVE.md#2025-04-08_snippet_225",
    "pageTitle": "Angular 13.3.11 Changelog",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "use Maps instead of objects in selector implementation"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Configuring Placeholder Resolution in IMAGE_CONFIG",
    "codeDescription": "Demonstrates how to configure the resolution of automatic placeholders by setting the placeholderResolution value in the IMAGE_CONFIG provider.",
    "codeLanguage": "typescript",
    "codeTokens": 64,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/image-optimization.md#2025-04-08_snippet_7",
    "pageTitle": "Using NgOptimizedImage Directive in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "providers: [\n  {\n    provide: IMAGE_CONFIG,\n    useValue: {\n      placeholderResolution: 40\n    }\n  },\n],"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Component Selector Naming Convention",
    "codeDescription": "Demonstrates proper kebab-case naming for component selectors following Custom Elements specification.",
    "codeLanguage": "typescript",
    "codeTokens": 45,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/best-practices/style-guide.md#2025-04-08_snippet_9",
    "pageTitle": "Angular Coding Style Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "@Pipe({ name: 'initCaps' })\nexport class InitCapsPipe implements PipeTransform { }"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Setting Priority Attribute on an Image",
    "codeDescription": "Demonstrates how to mark an image as high priority for loading, which is especially important for Largest Contentful Paint (LCP) elements.",
    "codeLanguage": "angular-html",
    "codeTokens": 60,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/image-optimization.md#2025-04-08_snippet_3",
    "pageTitle": "Using NgOptimizedImage Directive in Angular",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<img ngSrc=\"cat.jpg\" width=\"400\" height=\"200\" priority>"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Handling Form Submission in Angular Component",
    "codeDescription": "Add a handleSubmit method to the component class to handle form submission. This method accesses form values and displays them in an alert.",
    "codeLanguage": "typescript",
    "codeTokens": 63,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/learn-angular/steps/17-reactive-forms/README.md#2025-04-08_snippet_4",
    "pageTitle": "Setting Up Reactive Forms in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "handleSubmit() {\n  alert(\n    this.profileForm.value.name + ' | ' + this.profileForm.value.email\n  );\n}"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Implementing Router Outlet in Angular Component Template",
    "codeDescription": "Replace the home component tag with router-outlet directive and add a link to the home page in the AppComponent template.",
    "codeLanguage": "typescript",
    "codeTokens": 117,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/tutorials/first-app/steps/10-routing/README.md#2025-04-08_snippet_5",
    "pageTitle": "Adding Routes to Angular Application",
    "codeList": [
      {
        "language": "typescript",
        "code": "template: `\n  <main>\n    <a [routerLink]=\"['/']\">\n      <header class=\"brand-name\">\n        <img class=\"brand-logo\" src=\"/assets/logo.svg\" alt=\"logo\" aria-hidden=\"true\">\n      </header>\n    </a>\n    <section class=\"content\">\n      <router-outlet></router-outlet>\n    </section>\n  </main>\n`,"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Using Extended HTTP Request Matching",
    "codeDescription": "Example of using expanded form of expectOne to match both method and URL of the request.",
    "codeLanguage": "typescript",
    "codeTokens": 59,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/http/testing.md#2025-04-08_snippet_2",
    "pageTitle": "Testing HTTP Requests in Angular Applications",
    "codeList": [
      {
        "language": "typescript",
        "code": "const req = httpTesting.expectOne({\n  method: 'GET',\n  url: '/api/config',\n}, 'Request to load the configuration');"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Installing Angular CLI Globally",
    "codeDescription": "Command to install the Angular Command Line Interface (CLI) globally on your system using npm. This is a prerequisite for creating and managing Angular projects.",
    "codeLanguage": "bash",
    "codeTokens": 48,
    "codeId": "https://github.com/angular/angular/blob/main/README.md#2025-04-08_snippet_0",
    "pageTitle": "Angular Development Platform Setup and Documentation",
    "codeList": [
      {
        "language": "bash",
        "code": "npm install -g @angular/cli"
      }
    ],
    "relevance": 0.911
  },
  {
    "codeTitle": "Implementing Business Logic in Structural Directive",
    "codeDescription": "Implementation of ngOnInit lifecycle hook in a structural directive that loads data from a source and creates an embedded view with the data in the context.",
    "codeLanguage": "typescript",
    "codeTokens": 108,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/directives/structural-directives.md#2025-04-08_snippet_6",
    "pageTitle": "Angular Structural Directives Guide",
    "codeList": [
      {
        "language": "typescript",
        "code": "export class SelectDirective {\n  // ...\n\n  async ngOnInit() {\n    const data = await this.selectFrom.load();\n    this.viewContainerRef.createEmbeddedView(this.templateRef, {\n      // Create the embedded view with a context object that contains\n      // the data via the key `$implicit`.\n      $implicit: data,\n    });\n  }\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Creating RxJS Observable from Angular Output using outputToObservable",
    "codeDescription": "Shows how to use outputToObservable to create an RxJS observable from a component output. This allows for further manipulation of the output using RxJS operators.",
    "codeLanguage": "typescript",
    "codeTokens": 117,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/ecosystem/rxjs-interop/output-interop.md#2025-04-08_snippet_1",
    "pageTitle": "RxJS Interop with Angular Component and Directive Outputs",
    "codeList": [
      {
        "language": "typescript",
        "code": "import {outputToObservable} from '@angular/core/rxjs-interop';\n\n@Component(/*...*/)\nclass CustomSlider {\n  valueChange = output<number>();\n}\n\n// Instance reference to `CustomSlider`.\nconst slider: CustomSlider = createSlider();\n\noutputToObservable(slider.valueChange) // Observable<number>\n  .pipe(...)\n  .subscribe(...);"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Defining OutputOptions Interface in TypeScript",
    "codeDescription": "Defines an interface for output options, including an optional alias property.",
    "codeLanguage": "TypeScript",
    "codeTokens": 34,
    "codeId": "https://github.com/angular/angular/blob/main/goldens/public-api/core/index.api.md#2025-04-08_snippet_54",
    "pageTitle": "Angular Core API Documentation",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "export interface OutputOptions {\n    alias?: string;\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Multiple Whitespace Example in Template",
    "codeDescription": "Shows how multiple consecutive spaces appear in the template source.",
    "codeLanguage": "angular-html",
    "codeTokens": 39,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/templates/whitespace.md#2025-04-08_snippet_2",
    "pageTitle": "Angular Template Whitespace Handling Guide",
    "codeList": [
      {
        "language": "angular-html",
        "code": "<!-- What it looks like in the template -->\n<p>Hello         world</p>"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Advanced linkedSignal Usage with Previous State Consideration in Angular",
    "codeDescription": "This snippet demonstrates a more complex use of linkedSignal where the previous state is taken into account when computing the new state. It preserves the user's selection if it's still valid after the options change.",
    "codeLanguage": "typescript",
    "codeTokens": 361,
    "codeId": "https://github.com/angular/angular/blob/main/adev/src/content/guide/signals/linked-signal.md#2025-04-08_snippet_3",
    "pageTitle": "Dependent State Management with linkedSignal in Angular",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ShippingMethod {\n  id: number;\n  name: string;\n}\n\n@Component({/* ... */})\nexport class ShippingMethodPicker {\n  constructor() {\n    this.changeShipping(2);\n    this.changeShippingOptions();\n    console.log(this.selectedOption()); // {\"id\":2,\"name\":\"Postal Service\"}\n  }\n\n  shippingOptions = signal<ShippingMethod[]>([\n    { id: 0, name: 'Ground' },\n    { id: 1, name: 'Air' },\n    { id: 2, name: 'Sea' },\n  ]);\n\n  selectedOption = linkedSignal<ShippingMethod[], ShippingMethod>({\n    // `selectedOption` is set to the `computation` result whenever this `source` changes.\n    source: this.shippingOptions,\n    computation: (newOptions, previous) => {\n      // If the newOptions contain the previously selected option, preserve that selection.\n      // Otherwise, default to the first option.\n      return (\n        newOptions.find((opt) => opt.id === previous?.value.id) ?? newOptions[0]\n      );\n    },\n  });\n\n  changeShipping(index: number) {\n    this.selectedOption.set(this.shippingOptions()[index]);\n  }\n\n  changeShippingOptions() {\n    this.shippingOptions.set([\n      { id: 0, name: 'Email' },\n      { id: 1, name: 'Sea' },\n      { id: 2, name: 'Postal Service' },\n    ]);\n  }\n}"
      }
    ],
    "relevance": 0.91
  }
]