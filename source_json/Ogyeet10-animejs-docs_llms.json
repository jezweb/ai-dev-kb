[
  {
    "codeTitle": "Importing and Using the animate() Method in Anime.js",
    "codeDescription": "Basic syntax for importing and using the animate() method from Anime.js to create animations. The example shows how to target elements and define animation parameters.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimation.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Animation Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nconst animation = animate(targets, parameters);"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Installing Anime.js with NPM",
    "codeDescription": "This snippet demonstrates how to install Anime.js using NPM, a package manager for JavaScript. This approach is commonly used in projects that utilize bundlers like Vite or esbuild for module management.",
    "codeLanguage": "shell",
    "codeTokens": 59,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedinstallation.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Installation Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "npm install animejs"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Basic Anime.js Animation Configuration",
    "codeDescription": "Demonstrates the basic structure of an Anime.js animation configuration using a CSS selector target. Shows various animation properties including translation, scaling, opacity, duration, delay, easing, looping, and callback functions.",
    "codeLanguage": "javascript",
    "codeTokens": 139,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtargets.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Animation Targets Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate(\n'.square',\n{\n  translateX: 100,\n  scale: 2,\n  opacity: .5,\n  duration: 400,\n  delay: 250,\n  ease: 'out(3)',\n  loop: 3,\n  alternate: true,\n  autoplay: false,\n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Manipulating Timeline in Anime.js",
    "codeDescription": "Shows how to create a timeline with default settings and add multiple animations to it. The example demonstrates using labels, adding animations with different positions, and chaining timeline methods.",
    "codeLanguage": "javascript",
    "codeTokens": 137,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimeline.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Timeline Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline } from 'animejs';\n\nconst tl = createTimeline({ defaults: { duration: 750 } });\n\ntl.label('start')\n  .add('.square', { x: '15rem' }, 500)\n  .add('.circle', { x: '15rem' }, 'start')\n  .add('.triangle', { x: '15rem', rotate: '1turn' }, '<-=500');"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Using Anime.js ES6 Modules from local file",
    "codeDescription": "This code shows how to import Anime.js as an ES6 module after downloading the library directly from GitHub and placing it in your project directory. The script tag includes the 'type=module' attribute to treat the code as a module.",
    "codeLanguage": "html",
    "codeTokens": 88,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedinstallation.md#2025-04-18_snippet_4",
    "pageTitle": "Anime.js Installation Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<script type=\"module\">\n  import { animate } from './path/to/anime.esm.min.js';\n</script>"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Using Anime.js Stagger Functionality in JavaScript",
    "codeDescription": "This snippet demonstrates how to use the `stagger` function from Anime.js to create animations where multiple elements move sequentially. The `stagger` function takes a value and optional parameters to determine the start times for the animations of each element. This allows for visually appealing effects where elements animate one after another rather than simultaneously.",
    "codeLanguage": "JavaScript",
    "codeTokens": 136,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstagger.md#2025-04-18_snippet_0",
    "pageTitle": "Creating Staggered Animations with Anime.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { animate, stagger } from 'animejs';\\n\\nanimate('.square', {\\n  x: '17rem',\\n  scale: stagger([1, .1]),\\n  delay: stagger(100),\\n});"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Creating Complex Animations with Keyframes and Property-Specific Parameters",
    "codeDescription": "Example demonstrating how to use the animate() method with keyframes, property-specific parameters, function-based values, easing, looping, and delays. Shows advanced animation configuration options.",
    "codeLanguage": "javascript",
    "codeTokens": 187,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimation.md#2025-04-18_snippet_2",
    "pageTitle": "Anime.js Animation Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate('span', {\n  // Property keyframes\n  y: [\n    { to: '-2.75rem', ease: 'outExpo', duration: 600 },\n    { to: 0, ease: 'outBounce', duration: 800, delay: 100 }\n  ],\n  // Property specific parameters\n  rotate: {\n    from: '-1turn',\n    delay: 0\n  },\n  delay: (_, i) => i * 50, // Function based value\n  ease: 'inOutCirc',\n  loopDelay: 1000,\n  loop: true\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Comparing WAAPI and JavaScript Animations with Anime.js",
    "codeDescription": "This code demonstrates how to create animations using both the Web Animation API and standard JavaScript approaches in Anime.js. It includes a CPU-blocking timer to showcase how WAAPI animations remain smooth even when the main thread is busy.",
    "codeLanguage": "javascript",
    "codeTokens": 321,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apihardware-accelerated-animations.md#2025-04-18_snippet_0",
    "pageTitle": "Hardware Accelerated Animations in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, waapi, createTimer, utils } from 'animejs';\n\nconst [ $block ] = utils.$('.button');\n\nconst waapiAnim = waapi.animate('.waapi.square', {\n  translate: 270,\n  rotate: 180,\n  alternate: true,\n  loop: true,\n  ease: 'cubicBezier(0, 0, .58, 1)',\n});\n\nconst jsAnim = animate('.js.square', {\n  x: 270,\n  rotate: 180,\n  ease: 'cubicBezier(0, 0, .58, 1)',\n  alternate: true,\n  loop: true,\n});\n\nconst blockCPUTimer = createTimer({\n  onUpdate: () => {\n    const end = Date.now() + 100;\n    while(Date.now() < end) {\n      Math.random() * Math.random();\n    }\n  },\n  autoplay: false\n});\n\nlet isBusy = false;\n\nconst toggleCPU = () => {\n  blockCPUTimer[isBusy ? 'pause' : 'play']();\n  $block.innerText = (isBusy ? 'block' : 'free') + ' CPU';\n  isBusy = !isBusy;\n}\n\n$block.addEventListener('click', toggleCPU);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Configuring Animation Callbacks in Anime.js",
    "codeDescription": "This snippet demonstrates how to set up various animation callbacks in Anime.js. It includes settings for animation properties like duration, delay, easing, and looping, along with placeholder callback functions.",
    "codeLanguage": "javascript",
    "codeTokens": 135,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacks.md#2025-04-18_snippet_0",
    "pageTitle": "Animation Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.square', {\n  translateX: 100,\n  scale: 2,\n  opacity: .5,\n  duration: 400,\n  delay: 250,\n  ease: 'out(3)',\n  loop: 3,\n  alternate: true,\n  autoplay: false,\n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "HTML Structure for AnimeJS Animation Demo",
    "codeDescription": "HTML structure showing the target elements for the animation example. Contains a container with multiple nested square elements that will be animated.",
    "codeLanguage": "html",
    "codeTokens": 116,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtargetsdom-elements.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS DOM Element Animation Targets Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div id=\"selector-demo\">\n  <div class=\"medium row\">\n    <div class=\"square\"></div>\n  </div>\n  <div class=\"medium row\">\n    <div class=\"square\"></div>\n  </div>\n  <div class=\"medium row\">\n    <div class=\"square\"></div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "React Component with Anime.js Integration",
    "codeDescription": "This React component utilizes Anime.js to animate a logo. It imports necessary modules from both Anime.js and React, including animate, createScope, createSpring, createDraggable, useEffect, useRef, and useState. The useEffect hook sets up the Anime.js scope and animations. A click handler demonstrates triggering animations defined within the scope.",
    "codeLanguage": "jsx",
    "codeTokens": 548,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedusing-with-react.md#2025-04-18_snippet_0",
    "pageTitle": "Using Anime.js with React",
    "codeList": [
      {
        "language": "jsx",
        "code": "import { animate, createScope, createSpring, createDraggable } from 'animejs';\nimport { useEffect, useRef, useState } from 'react';\nimport reactLogo from './assets/react.svg';\nimport './App.css';\n\nfunction App() {\n  const root = useRef(null);\n  const scope = useRef(null);\n  const [ rotations, setRotations ] = useState(0);\n\n  useEffect(() => {\n  \n    scope.current = createScope({ root }).add( scope => {\n    \n      // Every anime.js instances declared here are now scopped to <div ref={root}>\n\n      // Created a bounce animation loop\n      animate('.logo', {\n        scale: [\n          { to: 1.25, ease: 'inOut(3)', duration: 200 },\n          { to: 1, ease: createSpring({ stiffness: 300 }) }\n        ],\n        loop: true,\n        loopDelay: 250,\n      });\n      \n      // Make the logo draggable around its center\n      createDraggable('.logo', {\n        container: [0, 0, 0, 0],\n        releaseEase: createSpring({ stiffness: 200 })\n      });\n\n      // Register function methods to be used outside the useEffect\n      scope.add('rotateLogo', (i) => {\n        animate('.logo', {\n          rotate: i * 360,\n          ease: 'out(4)',\n          duration: 1500,\n        });\n      });\n\n    });\n\n    // Properly cleanup all anime.js instances declared inside the scope\n    return () => scope.current.revert()\n\n  }, []);\n\n  const handleClick = () => {\n    const i = rotations + 1;\n    setRotations(i);\n    // Animate logo rotation on click using the method declared inside the scope\n    scope.current.methods.rotateLogo(i);\n  };\n\n  return (\n    <div ref={root}>\n      <div className=\"large centered row\">\n        <img src={reactLogo} className=\"logo react\" alt=\"React logo\" />\n      </div>\n      <div className=\"medium row\">\n        <fieldset className=\"controls\">\n        <button onClick={handleClick}>rotations: {rotations}</button>\n        </fieldset>\n      </div>\n    </div>\n  )\n}\n\nexport default App;"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Implementing Reverse Animation with Anime.js",
    "codeDescription": "Creates an animation that moves squares horizontally with a staggered delay, and implements a reverse function triggered by a button click. The animation uses the inOutSine easing function and can be reversed through a click event listener.",
    "codeLanguage": "javascript",
    "codeTokens": 137,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsreverse.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Animation Methods Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils, stagger } from 'animejs';\n\nconst [ $reverseButton ] = utils.$('.reverse');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  ease: 'inOutSine',\n  delay: stagger(100),\n});\n\nconst reverseAnimation = () => animation.reverse();\n\n$reverseButton.addEventListener('click', reverseAnimation);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Importing Anime.js methods as ES6 modules",
    "codeDescription": "This code snippet shows how to import specific Anime.js methods as ES6 modules. This is necessary when using Anime.js with bundlers like Vite or esbuild after installing it via NPM.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedinstallation.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Installation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Importing Anime.js using ES Modules",
    "codeDescription": "Shows how to import Anime.js modules using ES Modules syntax with the import statement. This method is suitable for modern JavaScript environments that support module syntax.",
    "codeLanguage": "JavaScript",
    "codeTokens": 71,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedimports.md#2025-04-18_snippet_0",
    "pageTitle": "Importing Anime.js Modules",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import {\n  animate,\n  createTimeline,\n  createTimer,\n  // ...other methods\n} from 'animejs';"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Comparing WAAPI and JavaScript Animations in Anime.js",
    "codeDescription": "Demonstrates side-by-side comparison of WAAPI animation versus JavaScript animation using Anime.js. The WAAPI example uses hardware acceleration to animate CSS properties, while the JavaScript example manipulates object data with more control options and renders the values to the DOM.",
    "codeLanguage": "javascript",
    "codeTokens": 206,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiwhen-to-use-waapi.md#2025-04-18_snippet_0",
    "pageTitle": "Web Animation API in Anime.js Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, waapi, utils } from 'animejs';\n\n// WAAPI Animation\n\nwaapi.animate('.waapi.square', {\n  x: '17rem',\n  rotate: 180,\n  loop: 3,\n  alternate: true,\n});\n\n// JS Animation\n\nconst data = { x: '0rem', rotate: '0deg' }\nconst [ $log ] = utils.$('code');\n\nanimate(data, {\n  x: 17,\n  rotate: 180,\n  modifier: utils.round(0),\n  loop: 3,\n  alternate: true,\n  onRender: () => $log.innerHTML = JSON.stringify(data)\n});"
      },
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square waapi\"></div>\n</div>\n<div class=\"small row\"></div>\n<pre class=\"medium centered row\">\n  <code>{\"x\": '0rem',\"rotate\":\"0deg\"}</code>\n</pre>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Configuring Draggable Settings in Anime.js",
    "codeDescription": "Example showing how to create a draggable element with custom settings including snap points, axis constraints, container padding, and event handlers. The code demonstrates various configuration options available in the createDraggable() method.",
    "codeLanguage": "javascript",
    "codeTokens": 141,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settings.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Draggable Settings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "createDraggable('.square', {\n  x: { snap: 100 },\n  y: { snap: 50 },\n  modifier: utils.wrap(-200, 0),\n  containerPadding: 10,\n  releaseStiffness: 40,\n  releaseEase: 'out(3)',\n  onGrab: () => {},\n  onDrag: () => {},\n  onRelease: () => {},\n});"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Initializing Animatable in AnimeJS",
    "codeDescription": "Basic syntax for importing and creating an Animatable instance which can be used to animate properties efficiently.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatable.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Animatable Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createAnimatable } from 'animejs';\n\nconst animatable = createAnimatable(targets, parameters);"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Animating with Percentage-Based Keyframes in AnimeJS",
    "codeDescription": "Creates an animation using keyframes that define multiple property values at specific percentage points of the animation. The animation will transition between each keyframe based on their percentage positions over the specified duration.",
    "codeLanguage": "javascript",
    "codeTokens": 126,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframes.md#2025-04-18_snippet_3",
    "pageTitle": "AnimeJS Animation Keyframes Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.square', {\n  keyframes: {\n    '0%'  : { x: 0,   y: 0   },\n    '50%' : { x: 100, y: 100 },\n    '100%': { x: 200, y: 200 },\n  },\n  duration: 3000,\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Initializing Basic AnimeJS Animation in JavaScript",
    "codeDescription": "Demonstrates the basic syntax for creating an animation using AnimeJS. Shows how to initialize an animation with targets and parameters, and lists the available animation properties that can be accessed.",
    "codeLanguage": "javascript",
    "codeTokens": 97,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-properties.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Animation Properties Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const animation = animate(targets, parameters);\n          ┌────────────┐\nanimation.│targets     │\nanimation.│currentTime ├─ Properties\nanimation.│duration    │\n          └────────────┘"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Defining Function-Based Animation Values with AnimeJS",
    "codeDescription": "Example of how to use function-based values in AnimeJS animations. This snippet shows how to access target element attributes, use index and length parameters, and implement random values for various animation properties.",
    "codeLanguage": "javascript",
    "codeTokens": 196,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesfunction-based.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Animation Tween Value Types",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate('.square', {\n  x: $el => /** @type {HTMLElement} */($el).getAttribute('data-x'),\n  y: (_, i) => 50 + (-50 * i),\n  scale: (_, i, l) => (l - i) * .75,\n  rotate: () => utils.random(-360, 360),\n  borderRadius: () => `+=${utils.random(0, 8)}`,\n  duration: () => utils.random(1200, 1800),\n  delay: () => utils.random(0, 400),\n  ease: 'outElastic(1, .5)',\n});"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Anime.js Stagger Grid Animation",
    "codeDescription": "This JavaScript code uses Anime.js to animate a grid of square elements. The `stagger` function is used to delay the animation of each square based on its position in a 11x4 grid. The `animateGrid` function is called repeatedly to create a continuous animation loop.",
    "codeLanguage": "javascript",
    "codeTokens": 219,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-grid.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Stagger Grid Animation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, stagger } from 'animejs';\n\nconst $squares = utils.$('.square');\n\nfunction animateGrid() {\n  animate($squares, {\n    scale: [\n      { to: [0, 1.25] },\n      { to: 0 }\n    ],\n    boxShadow: [\n      { to: '0 0 1rem 0 currentColor' },\n      { to: '0 0 0rem 0 currentColor' }\n    ],\n    delay: stagger(100, {\n      grid: [11, 4],\n      from: utils.random(0, 11 * 4)\n    }),\n    onComplete: animateGrid\n  });\n}\n\nanimateGrid();"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "SVG Shape Morphing Animation Implementation in JavaScript",
    "codeDescription": "Demonstrates how to create an animated morphing effect between two SVG polygons using Anime.js. The code includes a random point generator function and animation setup with recursive calls for continuous morphing.",
    "codeLanguage": "javascript",
    "codeTokens": 379,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvgmorphto.md#2025-04-18_snippet_0",
    "pageTitle": "SVG Morphing with Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, svg, utils } from 'animejs';\n\nconst [ $path1, $path2 ] = utils.$('polygon');\n\nfunction animateRandomPoints() {\n  // Update the points attribute on #path-2\n  utils.set($path2, { points: generatePoints() });\n  // Morph the points of #path-1 into #path-2\n  animate($path1, {\n    points: svg.morphTo($path2),\n    ease: 'inOutCirc',\n    duration: 500,\n    onComplete: animateRandomPoints\n  });\n}\n\n// Start the animation\nanimateRandomPoints();\n\n// A function to generate random points on #path-2 on each iteration\n// For demo purpose only\nfunction generatePoints() {\n  const total = utils.random(4, 64);\n  const r1 = utils.random(4, 56);\n  const r2 = 56;\n  const isOdd = n => n % 2;\n  let points = '';\n  for (let i = 0, l = isOdd(total) ? total + 1 : total; i < l; i++) {\n    const r = isOdd(i) ? r1 : r2;\n    const a = (2 * Math.PI * i / l) - Math.PI / 2;\n    const x = 152 + utils.round(r * Math.cos(a), 0);\n    const y = 56 + utils.round(r * Math.sin(a), 0);\n    points += `${x},${y} `;\n  }\n  return points;\n}"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Configuring Timeline Playback Settings in Anime.js",
    "codeDescription": "This example demonstrates how to configure timeline playback settings in the createTimeline() function call. It shows various options including defaults for animations, loop count, alternate direction, autoplay setting, and callback functions.",
    "codeLanguage": "javascript",
    "codeTokens": 117,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settings.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timeline Playback Settings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "createTimeline({\n  defaults: {\n    ease: 'out(3)',\n    duration: 500,\n  },\n  loop: 3,\n  alternate: true,\n  autoplay: false,\n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Configuring Animation Duration in AnimeJS",
    "codeDescription": "Demonstrates setting both global and property-specific duration values in an animation configuration. Shows how to animate position and rotation with different durations.",
    "codeLanguage": "javascript",
    "codeTokens": 123,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersduration.md#2025-04-18_snippet_1",
    "pageTitle": "Tween Parameters Documentation for AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nconst animation = animate('.square', {\n  x: '17rem',\n  rotate: {\n    to: 360,\n    duration: 1500, // Local duration only applied to rotate property\n  },\n  duration: 3000,  // Global duration applied to all properties\n  loop: true,\n  alternate: true\n});"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Creating a Bounce Animation Loop",
    "codeDescription": "This snippet demonstrates creating a looping bounce animation using Anime.js's `animate` function.  It targets elements with the class `.logo.js` and animates their `scale` property with custom easing functions and durations. The animation loops indefinitely with a specified delay.",
    "codeLanguage": "javascript",
    "codeTokens": 141,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedusing-with-vanilla-js.md#2025-04-18_snippet_2",
    "pageTitle": "Anime.js Vanilla JavaScript Integration",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Created a bounce animation loop\nanimate('.logo.js', {\n  scale: [\n    { to: 1.25, ease: 'inOut(3)', duration: 200 },\n    { to: 1, ease: createSpring({ stiffness: 300 }) }\n  ],\n  loop: true,\n  loopDelay: 250,\n});"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Setting Animation Values in Anime.js",
    "codeDescription": "Demonstrates different ways to specify animation values in Anime.js including direct values, function-based values, relative values, and property objects with 'from' values.",
    "codeLanguage": "javascript",
    "codeTokens": 97,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-types.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Animation Value Types Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.square', {\n  x: '6rem', \n  y: $el => $el.dataset.y, \n  scale: '+=.25', \n  opacity: {\n    from: .4, \n  },\n});"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Setting Global Default Duration in AnimeJS",
    "codeDescription": "Code showing how to change the default animation duration globally by updating the engine.defaults object. This affects all animations that don't specify a duration.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsduration.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Animation Playback Settings: Duration",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.duration = 500;"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Importing and Using the WAAPI Version of Anime.js",
    "codeDescription": "Shows how to import and use the Web Animation API (WAAPI) powered version of Anime.js, which is more lightweight (3KB) compared to the standard JavaScript version (10KB).",
    "codeLanguage": "javascript",
    "codeTokens": 75,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimation.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Animation Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { waapi } from 'animejs';\n\nconst animation = waapi.animate(targets, parameters);"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Creating a Timeline in Anime.js",
    "codeDescription": "Demonstrates how to import and create a timeline using the createTimeline function from Anime.js. The timeline can be used to synchronize animations, timers, and functions.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimeline.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timeline Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline } from 'animejs';\n\nconst timeline = createTimeline(parameters);"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Animating Elements with Scroll-based Autoplay - JavaScript/Anime.js",
    "codeDescription": "This JavaScript snippet utilizes Anime.js to animate a square element's position and rotation based on scrolling within a specified container. The animation links its progress to the scroll position with a smooth easing effect, providing dynamic feedback to the user's scrolling action.",
    "codeLanguage": "JavaScript",
    "codeTokens": 150,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-synchronisation-modessmooth-scroll.md#2025-04-18_snippet_0",
    "pageTitle": "Animating Scroll-based Playback with Anime.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: .25,\n    debug: true,\n  })\n});"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Adding Labels to AnimeJS Timeline in JavaScript",
    "codeDescription": "This snippet demonstrates how to create a timeline and add labels at specific time positions. It then uses these labels to add animations to different elements at the labeled positions.",
    "codeLanguage": "javascript",
    "codeTokens": 160,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodslabel.md#2025-04-18_snippet_0",
    "pageTitle": "Timeline Label Method Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline } from 'animejs';\n\nconst tl = createTimeline()\n.label('circle', 0)\n.label('square', 500)\n.label('triangle', 1000)\n.add('.square', {\n  x: '17rem',\n  duration: 500,\n}, 'square')\n.add('.circle', {\n  x: '13rem',\n  duration: 1000,\n}, 'circle')\n.add('.triangle', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 500,\n}, 'triangle');"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Complex Keyframe Animation with Multiple Properties - JavaScript",
    "codeDescription": "Shows a comprehensive example of keyframe animation with multiple properties including translation, scaling, and rotation. Includes various animation parameters like duration, easing, and looping.",
    "codeLanguage": "javascript",
    "codeTokens": 194,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframestween-values-keyframes.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Keyframe Animation Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.square', {\n  translateX: ['0rem', 0, 17, 17, 0, 0],\n  translateY: ['0rem', -2.5, -2.5, 2.5, 2.5, 0],\n  scale: [1, 1, .5, .5, 1, 1],\n  rotate: { to: 360, ease: 'linear' },\n  duration: 3000,\n  ease: 'inOut', // ease applied between each keyframes if no ease defined\n  playbackEase: 'ouIn(5)', // ease applied accross all keyframes\n  loop: true,\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Creating a Timeline with Various Position Types in Anime.js",
    "codeDescription": "This example demonstrates how to create an Anime.js timeline with different time position strategies. It creates a timeline with labeled positions, absolute positioning (at 500ms), label-based positioning ('start'), and relative positioning ('<-=250') for different elements.",
    "codeLanguage": "javascript",
    "codeTokens": 165,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetime-position.md#2025-04-18_snippet_0",
    "pageTitle": "Timeline Time Position in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline } from 'animejs';\n\nconst tl = createTimeline()\n.label('start', 0)\n.add('.square', {\n  x: '15rem',\n  duration: 500,\n}, 500)\n.add('.circle', {\n  x: '15rem',\n  duration: 500,\n}, 'start')\n.add('.triangle', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 500,\n}, '<-=250');"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Using onBegin Callback in Anime.js Animation",
    "codeDescription": "This code snippet shows how to create an animation using Anime.js and implement the onBegin callback. The callback updates a DOM element with the animation's 'began' status when it starts.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonbegin.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  delay: 1000, // Delays the onBegin() callback by 1000ms\n  onBegin: self => $value.textContent = self.began\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Using onComplete Callback in Anime.js Animation",
    "codeDescription": "Shows how to implement the onComplete callback in an Anime.js animation. This example creates an animation that moves an element with class 'circle', loops twice with alternating direction, and updates text content when the animation completes.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksoncomplete.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Callbacks: onComplete in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  delay: 500,\n  loop: 2,\n  alternate: true,\n  onComplete: self => $value.textContent = self.completed\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Implementing Complex Keyframe Animation with Anime.js",
    "codeDescription": "Demonstrates creating a complex animation sequence using keyframes in Anime.js. The animation includes multiple properties (x, y, scale, rotate) with individual timing, easing, and delay parameters for each keyframe. The animation is set to loop with a total duration of 3000ms.",
    "codeLanguage": "javascript",
    "codeTokens": 305,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframestween-parameters-keyframes.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Keyframes Animation Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate('.square', {\n  x: [\n    { to: '17rem', duration: 700, delay: 400 },\n    { to: 0, duration: 700, delay: 800 },\n  ],\n  y: [\n    { to: '-2.5rem', ease: 'out', duration: 400 },\n    { to: '2.5rem', duration: 800, delay: 700 },\n    { to: 0, ease: 'in', duration: 400, delay: 700 },\n  ],\n  scale: [\n    { to: .5, duration: 700, delay: 400 },\n    { to: 1, duration: 700, delay: 800 },\n  ],\n  rotate: { to: 360, ease: 'linear' },\n  duration: 3000,\n  ease: 'inOut', // ease applied between each keyframes if no ease defined\n  playbackEase: 'ouIn(5)', // ease applied accross all keyframes\n  loop: true,\n});"
      },
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Adding Animations and Timers to Anime.js Timeline",
    "codeDescription": "This example demonstrates how to create a timeline and add labels, timers, and animations to it. It shows how to reference labels as position markers and update DOM elements during animation.",
    "codeLanguage": "javascript",
    "codeTokens": 209,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsadd.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timeline Methods: add()",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nconst tl = createTimeline()\n// Add labels\n.label('start timer 1', 0)\n.label('animate circle', 1000)\n.label('start timer 2', 2000)\n// Add Timer\n.add({\n  duration: 1000,\n  onUpdate: self => $value.innerHTML = self.currentTime,\n}, 'start timer 1')\n// Add Animation\n.add('.circle', {\n  duration: 2000,\n  x: '16rem',\n}, 'animate circle')\n// Add Timer\n.add({\n  duration: 1000,\n  onUpdate: self => $value.innerHTML = self.currentTime,\n}, 'start timer 2');"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Comparing AnimeJS WAAPI adapter with native Web Animation API",
    "codeDescription": "This code snippet compares the syntax of AnimeJS's WAAPI adapter with the equivalent native Web Animation API implementation. While AnimeJS uses 'loop: 3', the native WAAPI uses 'iterations: 4' to achieve the same effect.",
    "codeLanguage": "javascript",
    "codeTokens": 159,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapiiterations.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Web Animation API - Iterations vs Loop Parameter",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Anime.js\nwaapi.animate('.square', {\n  x: 100,\n  loop: 3\n});\n\n// WAAPI equivalent\nconst targets = document.querySelectorAll('.square');\n\ntargets.forEach(($el, i) => {\n  $el.animate({\n    translate: '100px',\n  }, {\n    fill: 'forwards',\n    duration: 1000,\n    iterations: 4\n  })\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Adding Functions to Timeline in Anime.js",
    "codeDescription": "Demonstrates how to add callback functions to a timeline at specific time positions using the call() method. The example selects DOM elements using utils.$() and updates their innerHTML at different timestamps (0ms, 800ms, and 1200ms).",
    "codeLanguage": "javascript",
    "codeTokens": 169,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinecall-functions.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timeline Call Functions Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $functionA ] = utils.$('.function-A');\nconst [ $functionB ] = utils.$('.function-B');\nconst [ $functionC ] = utils.$('.function-C');\n\nconst tl = createTimeline()\n.call(() => $functionA.innerHTML = 'A', 0)\n.call(() => $functionB.innerHTML = 'B', 800)\n.call(() => $functionC.innerHTML = 'C', 1200);"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Accessing Animation Methods in Anime.js",
    "codeDescription": "Demonstrates several animation control methods that can be called on an animation instance, including pause(), play(), and restart().",
    "codeLanguage": "javascript",
    "codeTokens": 49,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methods.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Animation Methods Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "animation.pause()\nanimation.play()\nanimation.restart()"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Animating with ScrollObserver in Anime.js - JavaScript",
    "codeDescription": "This JavaScript snippet uses Anime.js to animate elements based on scroll events. It utilizes the ScrollObserver to define callbacks that are triggered at certain scroll positions. The snippet requires Anime.js and targets elements within a specified container on the y-axis. It supports multiple callbacks for handling enter, leave, and update events.",
    "codeLanguage": "JavaScript",
    "codeTokens": 158,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacks.md#2025-04-18_snippet_0",
    "pageTitle": "Implementing Scroll Observers with Anime.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "animate('.square', {\n  x: 100,\n  autoplay: onScroll({\n    container: '.container',\n    target: '.section',\n    axis: 'y',\n    enter: 'bottom top',\n    leave: 'top bottom',\n    sync: true,\n    onEnter: () => {},\n    onLeave: () => {},\n    onUpdate: () => {}\n  })\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Configuring Animation Playback Settings in AnimeJS",
    "codeDescription": "Example showing how to set various animation properties including playback settings like loop, alternate, and autoplay in an AnimeJS animation. This demonstrates the structure of an animation declaration with highlighted playback settings.",
    "codeLanguage": "javascript",
    "codeTokens": 140,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settings.md#2025-04-18_snippet_0",
    "pageTitle": "Animation Playback Settings Documentation for AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.square', {\n  translateX: 100,\n  scale: 2,\n  opacity: .5,\n  duration: 400,\n  delay: 250,\n  ease: 'out(3)',\n  loop: 3,          \n  alternate: true,  \n  autoplay: false,  \n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Using Anime.js UMD Modules from local file",
    "codeDescription": "This code shows how to import Anime.js as an UMD module after downloading the library directly from GitHub and placing it in your project directory. The script tag includes the 'type=module' attribute to treat the code as a module.",
    "codeLanguage": "html",
    "codeTokens": 88,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedinstallation.md#2025-04-18_snippet_5",
    "pageTitle": "Anime.js Installation Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<script type=\"module\">\n  import { animate } from './path/to/anime.esm.min.js';\n</script>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Defining Animatable Properties in Anime.js",
    "codeDescription": "This code snippet demonstrates how to define animatable properties in Anime.js using the animate() function. The example shows how to animate translateX, scale, and opacity properties along with animation configuration options like duration, delay, easing, looping, and callbacks.",
    "codeLanguage": "javascript",
    "codeTokens": 149,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-properties.md#2025-04-18_snippet_0",
    "pageTitle": "Animejs Animatable Properties Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.square', {\n  translateX: 100,\n  scale: 2,\n  opacity: .5,\n  duration: 400,\n  delay: 250,\n  ease: 'out(3)',\n  loop: 3,\n  alternate: true,\n  autoplay: false,\n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "HTML Structure for AnimeJS Getter Demo",
    "codeDescription": "This HTML structure creates the interface for the interactive demonstration. It includes elements to display the x and y coordinates of the circle as it follows mouse movement.",
    "codeLanguage": "html",
    "codeTokens": 250,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-methodsgetters.md#2025-04-18_snippet_1",
    "pageTitle": "Animatable Methods: Getters in AnimeJS",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"col\">\n    <div class=\"large row\">\n      <pre class=\"large log row\">\n        <span class=\"label\">x</span>\n        <span class=\"coords x value\">0</span>\n      </pre>\n    </div>\n  </div>\n  <div class=\"col\" style=\"flex: .25; z-index: 3;\">\n    <div class=\"large centered row\">\n      <div class=\"circle\"></div>\n    </div>\n  </div>\n  <div class=\"col\">\n    <div class=\"large row\">\n      <pre class=\"large log row\">\n        <span class=\"label\">y</span>\n        <span class=\"coords y value\">0</span>\n      </pre>\n    </div>\n  </div>\n</div>\n<div class=\"medium centered row\">\n  <span class=\"label\">Move cursor around</span>\n</div>"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Implementing playbackEase Animation in Anime.js (JavaScript)",
    "codeDescription": "Demonstrates how to animate an element with keyframes while applying a global easing function across all keyframes using the playbackEase parameter. This example creates a looping animation with multiple position, rotation, and scale changes.",
    "codeLanguage": "javascript",
    "codeTokens": 188,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsplaybackease.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Playback Settings in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate('.square', {\n  keyframes: [\n    { y: '-2.5rem', duration: 400 },\n    { x: '17rem', rotate: 180, scale: .5 },\n    { y: '2.5rem' },\n    { x: 0, rotate: 360, scale: 1 },\n    { y: 0, duration: 400 }\n  ],\n  duration: 4000,\n  playbackEase: 'inOut(3)', // this ease is applied accross all keyframes\n  loop: true,\n});"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Implementing onLoop Callback in an Anime.js Timeline",
    "codeDescription": "Demonstrates how to create a timeline with an onLoop callback that increments and displays a counter for each completed loop. The timeline animates three shapes with a loop delay and updates the DOM with the loop count.",
    "codeLanguage": "javascript",
    "codeTokens": 169,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonloop.md#2025-04-18_snippet_1",
    "pageTitle": "Timeline Callbacks - onLoop in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet loops = 0;\n\nconst tl = createTimeline({\n  defaults: { duration: 500 },\n  loopDelay: 500,\n  loop: true,\n  onLoop: self => $value.textContent = ++loops\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' })\n.add('.square', { x: '15rem' });"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Animating CSS Variables with Anime.js",
    "codeDescription": "This code demonstrates how to set and animate CSS variables using Anime.js. It shows how to initialize variables including one applied to a pseudo-element, and then animate those variables. The example includes changing border radius, translation, and scaling of a pseudo-element.",
    "codeLanguage": "javascript",
    "codeTokens": 213,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiescss-variables.md#2025-04-18_snippet_0",
    "pageTitle": "Animatable Properties in Anime.js - CSS Variables Animation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\n// Set the CSS variables as properties on the animated elements\nutils.set('.square', {\n  '--radius': '4px',\n  '--x': '0rem',\n  '--pseudo-el-after-scale': '1', // applied to the pseudo element \"::after\"\n  borderRadius: 'var(--radius)',\n  translateX: 'var(--x)',\n});\n\n// Animate the values of the CSS variables\nanimate('.square', {\n  '--radius': '20px',\n  '--x': '16.5rem',\n  '--pseudo-el-after-scale': '1.55' // Animates the \":after\" pseudo element of the element\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Configuring Global Default for onUpdate Callback in AnimeJS",
    "codeDescription": "This snippet demonstrates how to change the default onUpdate callback globally for all animations using the engine.defaults object in AnimeJS.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonupdate.md#2025-04-18_snippet_0",
    "pageTitle": "Animation Callbacks in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.onUpdate = self => console.log(self.id);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Implementing Timeline.play() Method in Anime.js",
    "codeDescription": "This code snippet demonstrates how to create a timeline with multiple animations and control it using the play() method. It creates a timeline with three animations for different shapes and attaches a click event listener to a play button.",
    "codeLanguage": "javascript",
    "codeTokens": 160,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsplay.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timeline Play Method Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $playButton ] = utils.$('.play');\n\nconst tl = createTimeline({\n  autoplay: false\n})\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst playTimeline = () => tl.play();\n\n$playButton.addEventListener('click', playTimeline);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Anime.js Stagger Modifier with boxShadow",
    "codeDescription": "This JavaScript snippet demonstrates the use of the stagger modifier in Anime.js to control the box-shadow of multiple elements. It defines a function that modifies the staggered value to generate different box-shadow offsets based on the input value. The animation is set to loop indefinitely.",
    "codeLanguage": "javascript",
    "codeTokens": 165,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-modifier.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Stagger Modifier Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, stagger } from 'animejs';\n\nanimate('.square', {\n  boxShadow: [\n    { to: stagger([1, .25], {\n        modifier: v => `0 0 ${v * 30}px ${v * 20}px currentColor`,\n        from: 'center'\n      })\n    },\n    { to: 0 },\n  ],\n  delay: stagger(100, { from: 'center' }),\n  loop: true\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Using seek() Method in Anime.js Animation",
    "codeDescription": "This snippet demonstrates how to use the seek() method in an Anime.js animation. It creates an animation for squares, implements play/pause functionality, and allows seeking to specific times using a range input.",
    "codeLanguage": "javascript",
    "codeTokens": 265,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsseek.md#2025-04-18_snippet_0",
    "pageTitle": "Animation Methods in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils, stagger } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $playPauseButton ] = utils.$('.play-pause');\n\nconst updateButtonLabel = animation => {\n  $playPauseButton.textContent = animation.paused ? 'Play' : 'Pause';\n}\n\nconst animation = animate('.square', {\n  x: '17rem',\n  ease: 'inOutSine',\n  duration: 1750,\n  delay: stagger(250),\n  autoplay: false,\n  onUpdate: self => {\n    $range.value = self.currentTime;\n    updateButtonLabel(self);\n  },\n  onComplete: updateButtonLabel,\n});\n\nconst seekAnimation = () => animation.seek(+$range.value);\n\nconst playPauseAnimation = () => {\n  if (animation.paused) {\n    animation.play();\n  } else {\n    animation.pause();\n    updateButtonLabel(animation);\n  }\n}\n\n$range.addEventListener('input', seekAnimation);\n$playPauseButton.addEventListener('click', playPauseAnimation);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Anime.js Stagger Example",
    "codeDescription": "This example demonstrates how to use the `stagger` function in Anime.js to create staggered animations. It shows different options for staggering, including `start`, `from`, `reversed`, `ease`, and `grid` parameters.",
    "codeLanguage": "javascript",
    "codeTokens": 124,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-value-types.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Stagger Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "stagger(\n  /*───────────────────*/\n  '1rem',\n  /*───────────────────*/\n  {\n    start: 100,\n    from: 2,\n    reversed: false,\n    ease: 'outQuad',\n    grid: [8, 8],\n  }\n);"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Complete Anime.js Animation with Percentage-based Keyframes",
    "codeDescription": "A comprehensive example showing how to animate an element using percentage-based keyframes with the Anime.js library. It demonstrates multiple keyframes with different properties, custom easing, and animation configuration options.",
    "codeLanguage": "javascript",
    "codeTokens": 283,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframespercentage-based-keyframes.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Documentation: Percentage-based Keyframes",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate('.square', {\n  keyframes: {\n    '0%'  : { x: '0rem', y: '0rem', ease: 'out' },\n    '13%' : { x: '0rem', y: '-2.5rem', },\n    '37%' : { x: '17rem', y: '-2.5rem', scale: .5 },\n    '63%' : { x: '17rem', y: '2.5rem', scale: .5 },\n    '87%' : { x: '0rem', y: '2.5rem', scale: 1 },\n    '100%': { y: '0rem', ease: 'in' }\n  },\n  rotate: { to: 360, ease: 'linear' },\n  duration: 3000,\n  ease: 'inOut', // ease applied between each keyframes if no ease defined\n  playbackEase: 'ouIn(5)', // ease applied accross all keyframes\n  loop: true,\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Configuring Animatable Properties in AnimeJS",
    "codeDescription": "Demonstrates how to set both specific and global animation properties using createAnimatable. Shows configuration of unit types, duration, and easing for individual properties as well as global settings.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settings.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Animatable Settings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "createAnimatable(targets, {\n  x: {\n    unit: 'rem',\n    duration: 400,\n    ease: 'out(4)'\n  },\n  y: 200,\n  rotate: 1000,\n  ease: 'out(2)'\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating Draggable Elements with Container Boundaries in Anime.js",
    "codeDescription": "This snippet demonstrates how to create draggable elements with specified container boundaries using Anime.js. It shows two examples: one using a CSS selector to define the container, and another using an array of numerical values.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingscontainer.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Settings in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n});\n\ncreateDraggable('.circle', {\n  container: [-16, 80, 16, 0],\n});"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating Timeline Instance in Anime.js",
    "codeDescription": "Demonstrates how to create a Timeline instance with parameters that provides control over animation timing and progression.",
    "codeLanguage": "javascript",
    "codeTokens": 43,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methods.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timeline Methods Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const timeline = createTimeline(parameters);"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Animating with Individual Property Parameters using Anime.js WAAPI",
    "codeDescription": "This code demonstrates how to animate multiple properties with individual parameter configurations. Each property can have its own specific to/from values, ease function, and duration while sharing global animation parameters.",
    "codeLanguage": "javascript",
    "codeTokens": 161,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apiindividual-property-parameters.md#2025-04-18_snippet_1",
    "pageTitle": "Improvements to Web Animation API in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "waapi.animate('.square', {\n  y: {\n    to: [0, -30, 0],\n    ease: 'out(4)',\n    duration: 1000,\n  },\n  rotate: { from: -180, to: 0, ease: 'out(3)' },\n  scale: { to: [.65, 1, .65], ease: 'inOut(3)' },\n  duration: 500,\n  delay: stagger(75),\n  loop: true,\n});"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Implementing Various Loop Behaviors in Anime.js",
    "codeDescription": "Shows different ways to implement loop behaviors in Anime.js animations including basic looping with a specified count, looping with alternating direction, looping with reversed animation, and infinite looping. Each example moves an element 17.5rem along the x-axis with different loop configurations.",
    "codeLanguage": "javascript",
    "codeTokens": 183,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsloop.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Loop Animation Setting Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate('.loop', {\n  x: '17.5rem',\n  loop: 3,\n});\n\nanimate('.loop-alternate', {\n  x: '17.5rem',\n  loop: 3,\n  alternate: true,\n});\n\nanimate('.loop-reverse', {\n  x: '17.5rem',\n  loop: 3,\n  reversed: true,\n});\n\nanimate('.loop-infinity', {\n  x: '17.5rem',\n  loop: true, // Or Infinity\n});"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Using Anime.js Global Object from local file",
    "codeDescription": "This snippet demonstrates how to use Anime.js as a global object after downloading the library and including it in your HTML. It accesses the animate function from the global anime object.",
    "codeLanguage": "html",
    "codeTokens": 78,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedinstallation.md#2025-04-18_snippet_6",
    "pageTitle": "Anime.js Installation Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<script src=\"path/to/anime.iife.min.js\"></script>\n\n<script>\n  const { animate } = anime;\n</script>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Animating CSS Transforms with AnimeJS",
    "codeDescription": "Demonstrates two methods of animating CSS transforms using AnimeJS: direct property animation with JavaScript and WAAPI method. Shows how to use individual transform properties and the recommended WAAPI approach for direct transform animations.",
    "codeLanguage": "javascript",
    "codeTokens": 165,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiescss-transforms.md#2025-04-18_snippet_0",
    "pageTitle": "CSS Transform Animation with AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, waapi } from 'animejs';\n\nanimate('.square', {\n  x: '15rem', // TranslateX shorthand\n  scale: 1.25,\n  skew: -45,\n  rotate: '1turn',\n});\n\n// the WAAPI version is recommanded if you want to animate the transform property directly\nwaapi.animate('.square', {\n  transform: 'translateX(15rem) scale(1.25) skew(-45deg) rotate(1turn)',\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Animating SVG Polygon Points with Anime.js",
    "codeDescription": "Example of animating an SVG polygon shape by modifying its points attribute in a looping animation. The animation transitions between different polygon shapes and alternates back and forth.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiessvg-attributes.md#2025-04-18_snippet_1",
    "pageTitle": "Animating SVG Attributes with Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('polygon', {\n  points: '64 68.64 8.574 100 63.446 67.68 64 4 64.554 67.68 119.426 100',\n  alternate: true,\n  loop: true\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Setting Default onRender Callback Globally in Anime.js",
    "codeDescription": "This snippet demonstrates how to set a default onRender callback globally for all Anime.js animations by updating the engine.defaults object.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonrender.md#2025-04-18_snippet_0",
    "pageTitle": "Animation Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.onRender = self => console.log(self.id);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Using revert() Method to Cancel and Revert AnimeJS Animations in JavaScript",
    "codeDescription": "This snippet demonstrates how to create a staggered animation with AnimeJS and implement revert() and restart() functionality through button clicks. It imports required functions from AnimeJS, sets up a staggered animation on multiple square elements, and attaches event listeners to buttons that control the animation state.",
    "codeLanguage": "javascript",
    "codeTokens": 217,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsrevert.md#2025-04-18_snippet_0",
    "pageTitle": "Animation Methods - revert() in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils, stagger } from 'animejs';\n\nconst [ $revertButton ] = utils.$('.revert');\nconst [ $restartButton ] = utils.$('.restart');\n\n// Set an initial translateX value\nutils.set('.square', { x: '17rem' });\n\nconst animation = animate('.square', {\n  x: 0,\n  alternate: true,\n  ease: 'inOutSine',\n  loop: true,\n  delay: stagger(100),\n});\n\nconst revertAnimation = () => animation.revert();\nconst restartAnimation = () => animation.restart();\n\n$revertButton.addEventListener('click', revertAnimation);\n$restartButton.addEventListener('click', restartAnimation);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Animating Elements with Function-based Values using Anime.js",
    "codeDescription": "This snippet shows how to use Anime.js to animate multiple '.square' elements with function-based values for translation, rotation, and scaling. It also demonstrates the use of the stagger function for delayed animations.",
    "codeLanguage": "javascript",
    "codeTokens": 119,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apifunction-based-values.md#2025-04-18_snippet_0",
    "pageTitle": "Function-based Values in Web Animation API",
    "codeList": [
      {
        "language": "javascript",
        "code": "waapi.animate('.square', {\n  translate: () => `${utils.random(10, 17)}rem`,\n  rotate: () => utils.random(-180, 180),\n  scale: (_, i) => .25 + (i * .25),\n  delay: stagger(100)\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Animating Element with Scroll Synchronization using Anime.js in JavaScript",
    "codeDescription": "This snippet demonstrates how to animate an element's properties and synchronize its playback with the scroll position using Anime.js. It utilizes the 'animate' function and 'onScroll' method, with set parameters for scroll tracking and sync. Required dependencies include Anime.js and a scroll container element.",
    "codeLanguage": "JavaScript",
    "codeTokens": 158,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-synchronisation-modesplayback-progress.md#2025-04-18_snippet_0",
    "pageTitle": "Synchronizing Scroll with Anime.js Animations",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: true,\n    debug: true,\n  })\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Configuring Global and Local Tween Parameters in Anime.js",
    "codeDescription": "This example demonstrates how to set both global and local tween parameters in an Anime.js animation. Global parameters (duration, delay, ease, loop, alternate) apply to all properties, while local parameters can be defined for specific properties to override the global settings.",
    "codeLanguage": "javascript",
    "codeTokens": 145,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parameters.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Documentation: Tween Parameters",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.square', {\n  x: {\n    to: 100,\n    delay: 0,\n    ease: 'inOut(4)'\n  },\n  scale: 1,\n  opacity: .5,\n  duration: 400,\n  delay: 250,\n  ease: 'out(3)',\n  loop: 3,\n  alternate: true,\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Converting Spring Easing Function to WAAPI Compatible Linear Easing",
    "codeDescription": "Basic example showing how to convert a spring easing function to WAAPI compatible linear easing. It imports the necessary functions from anime.js, creates a spring with specified stiffness, and converts it to a linear easing function for WAAPI.",
    "codeLanguage": "javascript",
    "codeTokens": 103,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiwaapi-convertease.md#2025-04-18_snippet_0",
    "pageTitle": "Web Animation API - Convert Ease Function",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { waapi, createSpring } from 'animejs';\n\nconst spring = createSpring({ stiffness: 12 });\n\nconst linearEasing = waapi.convertEase(spring.ease);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing onBeforeUpdate Callback in AnimeJS Animation",
    "codeDescription": "This example shows how to use the onBeforeUpdate callback in an AnimeJS animation. It animates a circle element, updates a counter, and modifies the animation based on its progress. The callback is executed before each frame update.",
    "codeLanguage": "javascript",
    "codeTokens": 183,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonbeforeupdate.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Callbacks in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet mult = 1;\nlet updates = 0;\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  loopDelay: 1500,\n  modifier: v => mult * v,\n  loop: true,\n  alternate: true,\n  onBeforeUpdate: self => {\n    $value.textContent = ++updates;\n    // Update the mult value just before updating the tweens\n    mult = 1 - self.iterationProgress;\n  }\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Creating a Manual Timeline with Playback Control in Anime.js",
    "codeDescription": "Example of creating a timeline with autoplay disabled that requires manual playback control. The code sets up a timeline with animation sequences for multiple elements and adds a click event listener to a play button.",
    "codeLanguage": "javascript",
    "codeTokens": 201,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsautoplay.md#2025-04-18_snippet_1",
    "pageTitle": "Timeline Playback Settings - Autoplay in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $paused ] = utils.$('.paused');\nconst [ $play ] = utils.$('.play');\n\nconst tl = createTimeline({\n  autoplay: false,\n  onUpdate: self => $paused.innerHTML = !!self.paused,\n  onComplete: self => $paused.innerHTML = !!self.paused\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '-=500')\n.add('.square', { x: '15rem' }, '-=500');\n\nconst playTl = () => tl.paused ? tl.restart() : tl.play();\n\n$play.addEventListener('click', playTl);"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "HTML Structure for CSS Variables Animation Demo",
    "codeDescription": "HTML markup showing the structure used for demonstrating CSS variable animations. It consists of three rows, each containing a square element that will be animated using the CSS variables.",
    "codeLanguage": "html",
    "codeTokens": 118,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiescss-variables.md#2025-04-18_snippet_1",
    "pageTitle": "Animatable Properties in Anime.js - CSS Variables Animation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"css-variables square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"css-variables square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"css-variables square\"></div>\n</div>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Applying Stagger Effects with Anime.js in JavaScript",
    "codeDescription": "The JavaScript snippet demonstrates how to apply stagger effects using Anime.js, which includes altering the y-position of elements in a staggered manner with ease functions. Dependencies include Anime.js, and it manipulates DOM elements with the class '.square'. The primary inputs are element selectors and stagger configurations. The result is a smooth animation of movement and delay.",
    "codeLanguage": "JavaScript",
    "codeTokens": 148,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-ease.md#2025-04-18_snippet_0",
    "pageTitle": "Utilizing Stagger Effect with Anime.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { animate, stagger } from 'animejs';\n\nanimate('.square', {\n  y: stagger(['2.75rem', '-2.75rem'], { ease: 'inOut(3)' }),\n  delay: stagger(100, { ease: 'inOut(3)' }),\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Creating and Adding Animations to a Timeline in AnimeJS",
    "codeDescription": "Code example that demonstrates creating a timeline in AnimeJS and using both sync() and add() methods to add animations. This showcases how to create external animations and synchronize them with a timeline as well as adding animations directly to a timeline with various parameters.",
    "codeLanguage": "javascript",
    "codeTokens": 154,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelineadd-animations.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Timeline Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, animate } from 'animejs';\n\nconst circleAnimation = animate('.circle', {\n  x: '15rem'\n});\n\nconst tl = createTimeline()\n.sync(circleAnimation)\n.add('.triangle', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 500,\n  alternate: true,\n  loop: 2,\n})\n.add('.square', {\n  x: '15rem',\n});"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Timeline Reverse Animation with Anime.js",
    "codeDescription": "Creates an animation timeline with sequential animations for multiple elements and implements a reverse functionality triggered by a button click. The timeline animates circle, triangle, and square elements along the x-axis with different delays.",
    "codeLanguage": "javascript",
    "codeTokens": 152,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsreverse.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timeline Reverse Method Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $reverseButton ] = utils.$('.reverse');\n\nconst tl = createTimeline()\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst reverseTimeline = () => tl.reverse();\n\n$reverseButton.addEventListener('click', reverseTimeline);"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Implementing Motion Path Animation with Anime.js",
    "codeDescription": "Demonstrates how to animate an element along a motion path using Anime.js, including both the element animation and path drawing animation.",
    "codeLanguage": "javascript",
    "codeTokens": 157,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvgcreatemotionpath.md#2025-04-18_snippet_1",
    "pageTitle": "SVG Motion Path Creation with Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, svg } from 'animejs';\n\n// Animate the transforms properties of .car the motion path values\nconst carAnimation = animate('.car', {\n  ease: 'linear',\n  duration: 5000,\n  loop: true,\n  ...svg.createMotionPath('path')\n});\n\n// Line drawing animation following the motion path values\n// For demo aesthetic only\nanimate(svg.createDrawable('path'), {\n  draw: '0 1',\n  ease: 'linear',\n  duration: 5000,\n  loop: true\n});"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Using Anime.js with Async/Await",
    "codeDescription": "Shows how to use Anime.js animations with async/await pattern. The function returns the animation which can be awaited to continue execution after completion.",
    "codeLanguage": "javascript",
    "codeTokens": 89,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapifinished.md#2025-04-18_snippet_1",
    "pageTitle": "API Differences between Anime.js and Web Animation API",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function waitForAnimationToComplete() {\n  return animate(target, {\n    translate: '100px',\n    duration: 500,\n  });\n}\n\nconst asyncAnimation = await waitForAnimationToComplete();"
      }
    ],
    "relevance": 0.962
  },
  {
    "codeTitle": "Animating Elements with Scroll Observer in Anime.js",
    "codeDescription": "This snippet imports essential functions from the Anime.js library and uses the animate function to animate elements with the class '.square'. The animations are triggered by scroll events, defined by the minimum and maximum thresholds for entering and leaving the viewport.",
    "codeLanguage": "JavaScript",
    "codeTokens": 173,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholdsmin-max.md#2025-04-18_snippet_0",
    "pageTitle": "Animating Elements on Scroll with Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, onScroll, utils } from 'animejs';\n\nutils.$('.square').forEach($square => {\n  animate($square, {\n    x: '15rem',\n    rotate: '1turn',\n    duration: 2000,\n    alternate: true,\n    ease: 'inOutQuad',\n    autoplay: onScroll({\n      container: '.scroll-container',\n      sync: 1,\n      enter: 'max bottom',\n      leave: 'min top',\n      debug: true\n    })\n  });\n});"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "HTML Structure for Anime.js Pause Demo",
    "codeDescription": "HTML structure for demonstrating the pause functionality in Anime.js. It includes square elements that will be animated and a pause button to control the animation.",
    "codeLanguage": "html",
    "codeTokens": 116,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodspause.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Methods: Pause in Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button pause\">Pause</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Using Timeline cancel() Method with AnimeJS",
    "codeDescription": "Demonstrates how to create a timeline with multiple animations and implement cancel functionality. The code creates a timeline that animates three shapes, then sets up event handlers for cancel and play buttons.",
    "codeLanguage": "javascript",
    "codeTokens": 191,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodscancel.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Timeline Cancel Method Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $cancelButton ] = utils.$('.cancel');\nconst [ $playButton ] = utils.$('.play');\n\nconst tl = createTimeline({\n  loop: true,\n  alternate: true,\n})\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst cancelTimeline = () => tl.cancel();\nconst playTimeline = () => tl.play();\n\n$cancelButton.addEventListener('click', cancelTimeline);\n$playButton.addEventListener('click', playTimeline);"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Creating Looped Timeline Animation",
    "codeDescription": "Demonstrates creating a timeline animation with infinite loops and a loop counter callback. The animation moves three shapes sequentially with overlapping timing.",
    "codeLanguage": "javascript",
    "codeTokens": 141,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsloop.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Timeline Loop Configuration Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $loops ] = utils.$('.loops');\n\nlet loops = 0;\n\nconst tl = createTimeline({\n  loop: true,\n  onLoop: self => $loops.innerHTML = ++loops,\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '-=500')\n.add('.square', { x: '15rem' }, '-=500');"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Creating Motion Path Parameters in Anime.js",
    "codeDescription": "Creates pre-defined Tween parameter objects that animate along an SVG path's coordinates and inclination, returning translateX, translateY, and rotate properties.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvgcreatemotionpath.md#2025-04-18_snippet_0",
    "pageTitle": "SVG Motion Path Creation with Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const { translateX, translateY, rotate } = svg.createMotionPath(path);"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Using Anime.js from CDN as Global object",
    "codeDescription": "This snippet shows how to include Anime.js from a CDN as a global object. This approach makes Anime.js functions available directly in the global scope.",
    "codeLanguage": "html",
    "codeTokens": 87,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedinstallation.md#2025-04-18_snippet_3",
    "pageTitle": "Anime.js Installation Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<script src=\"https://cdn.jsdelivr.net/npm/animejs@4.0.0/lib/anime.iife.min.js\"></script>\n\n<script>\n  const { animate } = anime;\n</script>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing Staggered Timeline Animations with Anime.js",
    "codeDescription": "This example demonstrates how to use the stagger function in Anime.js to position animations with consistent delays between targets. It creates a timeline with staggered animations that include callbacks which are also staggered for each target.",
    "codeLanguage": "javascript",
    "codeTokens": 171,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggertimeline-positions-staggering.md#2025-04-18_snippet_0",
    "pageTitle": "Using Stagger Function in Anime.js Timeline Position Arguments",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, stagger, utils } from 'animejs';\n\nconst tl = createTimeline();\n\nconst onComplete = ({ targets }) => {\n  utils.set(targets, { color: 'var(--hex-red)' });\n}\n\ntl\n.add('.circle', { x: '15rem', onComplete })\n.label('circle completes')\n.add(['.triangle', '.square'], {\n  x: '15rem',\n  onComplete, // Callbacks are aslo staggered\n}, stagger(500, { start: 'circle completes-=500' }));"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Using Animatable with Mouse Movement in AnimeJS",
    "codeDescription": "A complete example demonstrating how to use Animatable to create smooth animations that follow mouse movement. The snippet creates an animatable square that responds to cursor position with customized easing and duration.",
    "codeLanguage": "javascript",
    "codeTokens": 297,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatable.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Animatable Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createAnimatable, utils } from 'animejs';\n\nconst $demos = document.querySelector('#docs-demos');\nconst $demo = $demos.querySelector('.docs-demo.is-active');\n\nlet bounds = $demo.getBoundingClientRect();\nconst refreshBounds = () => bounds = $demo.getBoundingClientRect();\n\nconst animatableSquare = createAnimatable('.square', {\n  x: 500, // Define the x duration to be 500ms\n  y: 500, // Define the y duration to be 500ms\n  ease: 'out(3)',\n});\n\nconst onMouseMove = e => {\n  const { width, height, left, top } = bounds;\n  const hw = width / 2;\n  const hh = height / 2;\n  const x = utils.clamp(e.clientX - left - hw, -hw, hw);\n  const y = utils.clamp(e.clientY - top - hh, -hh, hh);\n  animatableSquare.x(x); // Animate the x value in 500ms\n  animatableSquare.y(y); // Animate the y value in 500ms\n}\n\nwindow.addEventListener('mousemove', onMouseMove);\n$demos.addEventListener('scroll', refreshBounds);"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Animating SVG Filter Effects with Anime.js",
    "codeDescription": "Example of animating SVG filter elements (feTurbulence and feDisplacementMap) by changing their baseFrequency and scale properties in a looping animation. This creates a dynamic displacement effect that alternates.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiessvg-attributes.md#2025-04-18_snippet_0",
    "pageTitle": "Animating SVG Attributes with Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate(['feTurbulence', 'feDisplacementMap'], {\n  baseFrequency: .05,\n  scale: 15,\n  alternate: true,\n  loop: true\n});"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing onUpdate Callback in AnimeJS Animation",
    "codeDescription": "This code creates an animation using AnimeJS, with an onUpdate callback that updates a DOM element's text content on each frame. It also demonstrates importing utilities and setting up loop and alternate options.",
    "codeLanguage": "javascript",
    "codeTokens": 130,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonupdate.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Callbacks in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet updates = 0;\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  loopDelay: 1500,\n  loop: true,\n  alternate: true,\n  onUpdate: self => $value.textContent = ++updates\n});"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Creating Timeline with onComplete Callback in Anime.js",
    "codeDescription": "This code creates a timeline using Anime.js, setting up animations for multiple elements. It demonstrates how to use the onComplete callback to update a DOM element when the timeline completes.",
    "codeLanguage": "javascript",
    "codeTokens": 145,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksoncomplete.md#2025-04-18_snippet_1",
    "pageTitle": "Timeline Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nconst tl = createTimeline({\n  defaults: { duration: 500 },\n  loop: 1,\n  onComplete: self => $value.textContent = self.completed\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' })\n.add('.square', { x: '15rem' });"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Defining a ScrollObserver Instance",
    "codeDescription": "This snippet demonstrates how to initialize a ScrollObserver using the 'onScroll' function. The properties provided, such as 'target', 'linked', and 'repeat', allow the observer to manage and track the target element's scroll states. Dependencies include the Anime.js library. The function requires parameters detailing scroll behavior, and it outputs an instance with various scroll-related properties.",
    "codeLanguage": "JavaScript",
    "codeTokens": 137,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-properties.md#2025-04-18_snippet_0",
    "pageTitle": "ScrollObserver Properties Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "const scrollObserver = onScroll(parameters);\n       ┌───────┐\nscrollObserver.│target │\nscrollObserver.│linked ├─ Properties\nscrollObserver.│repeat │\n       └───────┘"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Anime.js Scroll Animation Example",
    "codeDescription": "This code snippet demonstrates the usage of Anime.js with scroll to trigger animations.  It defines a container element using `utils.$('.scroll-container')` and sets up an animation for elements with the class 'square', which moves them along the x-axis and rotates them when the container is scrolled.",
    "codeLanguage": "javascript",
    "codeTokens": 155,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscroll.md#2025-04-18_snippet_3",
    "pageTitle": "Anime.js Scroll Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils, onScroll } from 'animejs';\n\nconst [ container ] = utils.$('.scroll-container');\nconst debug = true;\n\n// Animation\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  autoplay: onScroll({ container, debug })\n});"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Creating Scoped Animations and Draggables in Anime.js",
    "codeDescription": "This snippet initializes a new scope with media queries and default settings. It registers a constructor function that animates an element based on the media query match, using Anime.js to either animate the square or create a draggable element. It also returns a cleanup function to remove any added class when the scope reverts.",
    "codeLanguage": "JavaScript",
    "codeTokens": 300,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopeadd-constructor-function.md#2025-04-18_snippet_0",
    "pageTitle": "Creating Scoped Animations and Draggables in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { utils, animate, createScope, createDraggable } from 'animejs';\n\ncreateScope({\n  mediaQueries: { isSmall: '(max-width: 200px)' },\n  defaults: { ease: 'linear' },\n})\n.add(self => {\n\n  /* Media queries state are accessible on the matches property */\n  const { isSmall } = self.matches;\n  /* The $() utility method is also scoped */\n  const [ $square ] = utils.$('.square');\n\n  if (self.matches.isSmall) {\n    /* Only animate the square when the iframe is small */\n    animate($square, {\n      rotate: 360,\n      loop: true,\n    });\n  } else {\n    /* Only create the draggable when the iframe is large enough */\n    $square.classList.add('draggable');\n    createDraggable($square, {\n      container: document.body,\n    });\n  }\n  \n  return () => {\n    /* Removes the class 'draggable' when the scope reverts itself */\n    $square.classList.remove('draggable');\n  }\n\n});"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Anime.js Engine Control Methods",
    "codeDescription": "Core engine methods for managing animation lifecycle, including update, pause, and resume functionality. These methods provide granular control over animation playback and engine state.",
    "codeLanguage": "javascript",
    "codeTokens": 55,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-methods.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Engine Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "engine.update()\nengine.pause()\nengine.resume()"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing Stagger Range Values with AnimeJS",
    "codeDescription": "This code demonstrates how to use the stagger function with range values to distribute animations evenly. It animates elements with class 'square' using staggered y-position values between '2.75rem' and '-2.75rem', and delays between 0 and 500 milliseconds.",
    "codeLanguage": "javascript",
    "codeTokens": 118,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-value-typesrange-value.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Stagger Range Value Types",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, stagger } from 'animejs';\n\nanimate('.square', {\n  y: stagger(['2.75rem', '-2.75rem']),\n  delay: stagger([0, 500]),\n});"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Displaying Animated Object State in HTML",
    "codeDescription": "This HTML snippet shows how the animated object's state is displayed in the DOM. It uses a pre-formatted code block to show the current values of the object's properties as they are being animated.",
    "codeLanguage": "html",
    "codeTokens": 87,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiesjavascript-object-properties.md#2025-04-18_snippet_1",
    "pageTitle": "Animating JavaScript Object Properties with Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<pre class=\"row large centered\">\n  <code>{\"number\":1337,\"unit\":\"42%\"}</code>\n</pre>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Animating JavaScript Object Properties with Anime.js",
    "codeDescription": "This snippet shows how to use Anime.js to animate properties of a JavaScript object. It animates a 2D vector object, updating its x and y coordinates, and logs the changes to the DOM.",
    "codeLanguage": "javascript",
    "codeTokens": 140,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtargetsjavascript-objects.md#2025-04-18_snippet_0",
    "pageTitle": "Animating JavaScript Objects with Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nconst [ $log ] = utils.$('code');\n\nconst vector2D = { x: 0, y: 0 };\n\nanimate(vector2D, {\n  x: 100,\n  y: 150,\n  modifier: utils.round(0),\n  onUpdate: () => $log.textContent = JSON.stringify(vector2D),\n});"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Synchronizing WAAPI Animations with Anime.js Timeline",
    "codeDescription": "Shows how to create WAAPI animations for different shapes and synchronize them to an Anime.js timeline using the sync() method with different positions. This allows precise control over when each animation starts within the timeline sequence.",
    "codeLanguage": "javascript",
    "codeTokens": 193,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinesync-waapi-animations.md#2025-04-18_snippet_0",
    "pageTitle": "Syncing WAAPI Animations with Anime.js Timeline",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, waapi } from 'animejs';\n\nconst circle = waapi.animate('.circle', {\n  x: '15rem',\n});\n\nconst triangle = waapi.animate('.triangle', {\n  x: '15rem',\n  y: [0, '-1.5rem', 0],\n  ease: 'out(4)',\n  duration: 750,\n});\n\nconst square = waapi.animate('.square', {\n  x: '15rem',\n  rotateZ: 360,\n});\n\nconst tl = createTimeline()\n.sync(circle, 0)\n.sync(triangle, 350)\n.sync(square, 250);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Animating a Staggered Grid in JavaScript using Anime.js",
    "codeDescription": "This code snippet creates an animated grid effect by utilizing the stagger functionality provided by the Anime.js library. It allows squares in the grid to animate along the x and y axes with staggered delays according to defined parameters. The animation is recursive, allowing for continuous motion.",
    "codeLanguage": "JavaScript",
    "codeTokens": 265,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-grid-axis.md#2025-04-18_snippet_0",
    "pageTitle": "Animating Staggered Grids Using Anime.js in JavaScript",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, stagger } from 'animejs';\n\nconst grid = [11, 4];\nconst $squares = utils.$('.square');\n\nfunction animateGrid() {\n  const from = utils.random(0, 11 * 4);\n  animate($squares, {\n    translateX: [\n      { to: stagger('-.75rem', { grid, from, axis: 'x' }) },\n      { to: 0, ease: 'inOutQuad', },\n    ],\n    translateY: [\n      { to: stagger('-.75rem', { grid, from, axis: 'y' }) },\n      { to: 0, ease: 'inOutQuad' },\n    ],\n    opacity: [\n      { to: .5 },\n      { to: 1 }\n    ],\n    delay: stagger(85, { grid, from }),\n    onComplete: animateGrid\n  });\n}\n\nanimateGrid();"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating an Animation Instance in Anime.js",
    "codeDescription": "Shows how to create an animation instance object using the animate function, which allows calling animation methods on the returned object.",
    "codeLanguage": "javascript",
    "codeTokens": 48,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methods.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Animation Methods Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const animation = animate(target, parameters);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing Timeline Revert Animation with AnimeJS - JavaScript",
    "codeDescription": "Demonstrates how to create and control an animation timeline with revert functionality using AnimeJS. Sets up initial positions for shapes, creates a looping timeline animation, and implements revert and restart button handlers.",
    "codeLanguage": "javascript",
    "codeTokens": 218,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsrevert.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Timeline Revert Method Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $revertButton ] = utils.$('.revert');\nconst [ $restartButton ] = utils.$('.restart');\n\n// Set an initial x value\nutils.set(['.circle', '.triangle', '.square'], { x: '15rem' });\n\nconst tl = createTimeline({\n  loop: true,\n  alternate: true,\n})\n.add('.circle',   { x: 0 })\n.add('.triangle', { x: 0 }, 500)\n.add('.square',   { x: 0 }, 1000);\n\nconst revertTimeline = () => tl.revert();\nconst restartTimeline = () => tl.restart();\n\n$revertButton.addEventListener('click', revertTimeline);\n$restartButton.addEventListener('click', restartTimeline);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Importing Anime.js Modules",
    "codeDescription": "This code snippet demonstrates how to import specific modules from the Anime.js library. These modules include `animate` for creating animations, `utils` for utility functions like selecting DOM elements, and `createSpring` for creating spring-based easing functions.",
    "codeLanguage": "javascript",
    "codeTokens": 79,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedusing-with-vanilla-js.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Vanilla JavaScript Integration",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils, createSpring } from 'animejs';"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Importing and Using WAAPI with Anime.js",
    "codeDescription": "Basic syntax for creating WAAPI-powered animations in Anime.js. This shows how to import the waapi module and use the animate() method with targets and parameters.",
    "codeLanguage": "javascript",
    "codeTokens": 71,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-api.md#2025-04-18_snippet_0",
    "pageTitle": "Web Animation API in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { waapi } from 'animejs';\n\nconst animation = waapi.animate(targets, parameters);"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Animating with Reverse Stagger in Anime.js",
    "codeDescription": "This code snippet demonstrates the use of the stagger function in Anime.js to create a staggered animation effect that operates in reverse. The 'reversed' parameter is set to true, which alters the animation timing for each element. The expected input is a series of elements with the class 'square', and the output is an animation that translates each element to the right over specified delays.",
    "codeLanguage": "JavaScript",
    "codeTokens": 135,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-reversed.md#2025-04-18_snippet_0",
    "pageTitle": "Animating with Reverse Staggering in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, stagger } from 'animejs';\n\nanimate('.square', {\n  translateX: '17rem',\n  delay: stagger(100, { reversed: true }),\n});"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Animating Elements on Scroll with Anime.js in JavaScript",
    "codeDescription": "This JavaScript snippet uses the Anime.js library to animate a '.square' element. The animation involves moving the element horizontally by '15rem' and rotating it one full turn. It is coupled with a scroll event handler that increments a display value each time the scrolling forward exceeds a specified threshold. The animation autoplays on scroll events triggered by the 'onScroll' method, with debug mode enabled for detailed interaction feedback. The 'onLeaveForward' callback function is utilized for counting the exits. Key dependencies include Anime.js and a structured HTML layout where elements with classes like '.value' and '.square' are manipulated.",
    "codeLanguage": "JavaScript",
    "codeTokens": 262,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonleaveforward.md#2025-04-18_snippet_0",
    "pageTitle": "Animating with Scroll and Event Callbacks in Anime.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { animate, onScroll, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet exits = 0;\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: true,\n    debug: true,\n    onLeaveForward: () => $value.textContent = ++exits,\n  })\n});"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Applying Multiple Spring Animations Using WAAPI",
    "codeDescription": "Demonstration of applying different spring animations to multiple elements using WAAPI. This snippet creates three spring animations with different stiffness values, selects elements with querySelector, and applies animations with different settings to each element.",
    "codeLanguage": "javascript",
    "codeTokens": 193,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiwaapi-convertease.md#2025-04-18_snippet_1",
    "pageTitle": "Web Animation API - Convert Ease Function",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { waapi, createSpring } from 'animejs';\n\nconst springs = [\n  createSpring({ stiffness: 100 }),\n  createSpring({ stiffness: 150 }),\n  createSpring({ stiffness: 200 })\n]\n\ndocument.querySelectorAll('#web-animation-api-waapi-convertease .demo .square').forEach(($el, i) => {\n  $el.animate({\n    translate: '17rem',\n    rotate: '1turn',\n  }, {\n    easing: waapi.convertEase(springs[i].ease),\n    delay: i * 250,\n    duration: springs[i].duration,\n    fill: 'forwards'\n  });\n});"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Creating and Using Anime.js Timer Instance",
    "codeDescription": "Demonstrates how to create a timer instance and access its methods in Anime.js. The timer object provides various control methods for managing animation timing.",
    "codeLanguage": "javascript",
    "codeTokens": 61,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methods.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timer Methods Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const timer = createTimer(parameters);\ntimer.pause();\ntimer.play();\ntimer.restart();"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Creating Animation with Delay in Anime.js",
    "codeDescription": "Shows how to apply a 500ms delay to a specific animation. This delay is applied to all properties in the animation, which moves and scales an element with the 'delay' class while looping and alternating.",
    "codeLanguage": "javascript",
    "codeTokens": 121,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsdelay.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Playback Settings in Anime.js - Delay Configuration",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nconst playbackDelay = animate('.delay', {\n  x: '16rem',\n  scale: 1.8,\n  delay: 500, // Global delay applied to all properties\n  loop: true,\n  alternate: true\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Timeline Seek Method Implementation in JavaScript",
    "codeDescription": "Demonstrates implementation of timeline seek functionality using Anime.js. Creates a timeline with multiple animations and connects it to range input and play/pause button controls. Includes event listeners and state management for timeline control.",
    "codeLanguage": "javascript",
    "codeTokens": 279,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsseek.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timeline Seek Method Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $playPauseButton ] = utils.$('.play-pause');\n\nconst updateButtonLabel = tl => {\n  $playPauseButton.textContent = tl.paused ? 'Play' : 'Pause';\n}\n\nconst tl = createTimeline({\n  autoplay: false,\n  onUpdate: self => {\n    $range.value = self.currentTime;\n    updateButtonLabel(self);\n  },\n  onComplete: updateButtonLabel,\n})\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst seekTimeline = () => tl.seek(+$range.value);\n\nconst playPauseTimeline = () => {\n  if (tl.paused) {\n    tl.play();\n  } else {\n    tl.pause();\n    updateButtonLabel(tl);\n  }\n}\n\n$range.addEventListener('input', seekTimeline);\n$playPauseButton.addEventListener('click', playPauseTimeline);"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Creating and Using an Animatable Instance in Anime.js",
    "codeDescription": "This snippet demonstrates how to create an Animatable instance and use its methods to trigger animations. It shows the basic syntax for applying x and y transformations with optional parameters and using the revert() method.",
    "codeLanguage": "javascript",
    "codeTokens": 97,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-methods.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Animatable Methods Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const animatable = createAnimatable(target, parameters);\nanimatable.x(100)               \nanimatable.y(50, 500, 'out(2)') \nanimatable.revert()             "
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "HTML Structure for Anime.js Animation Demo",
    "codeDescription": "Provides the HTML structure for demonstrating the difference between normal and interpolated animations using Anime.js. It creates two clock elements with labels.",
    "codeLanguage": "html",
    "codeTokens": 127,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesinterpolate.md#2025-04-18_snippet_3",
    "pageTitle": "Interpolate Utility in Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"x-large spaced-evenly row\">\n  <div class=\"col\">\n    <div class=\"clock normal\"></div>\n    <div class=\"label\">normal</div>\n  </div>\n  <div class=\"col\">\n    <div class=\"clock interpolated\"></div>\n    <div class=\"label\">interpolated [0,12]</div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing Time Staggering with AnimeJS",
    "codeDescription": "Demonstrates how to use the stagger() function to create staggered animations with different delays and durations for multiple elements. The example shows importing required functions and creating an animation with staggered timing properties.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggertime-staggering.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Stagger Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, stagger } from 'animejs';\n\nanimate('.square', {\n  x: '17rem',\n  delay: stagger(100),\n  duration: stagger(200, { start: 500 }),\n  loop: true,\n  alternate: true\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing onUpdate in an Anime.js Timeline",
    "codeDescription": "Demonstrates how to use the onUpdate callback in a timeline to update a DOM element's content on every frame. The example creates a looping animation with multiple elements and tracks the number of updates.",
    "codeLanguage": "javascript",
    "codeTokens": 169,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonupdate.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Timeline onUpdate Callback Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet updates = 0;\n\nconst tl = createTimeline({\n  defaults: { duration: 500 },\n  loopDelay: 250,\n  loop: true,\n  onUpdate: self => $value.textContent = ++updates\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '+=250')\n.add('.square', { x: '15rem' }, '+=250');"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing Timeline restart() Method in Anime.js",
    "codeDescription": "This snippet demonstrates how to create a timeline with Anime.js and implement a restart button. The timeline animates three shapes sequentially with loop and alternate properties enabled. The restart() method resets the timeline to the beginning when a button is clicked.",
    "codeLanguage": "javascript",
    "codeTokens": 171,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsrestart.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timeline restart() Method Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $restartButton ] = utils.$('.restart');\n\nconst tl = createTimeline({\n  loop: true,\n  alternate: true,\n})\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst restartTimeline = () => tl.restart();\n\n$restartButton.addEventListener('click', restartTimeline);"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing Draggable Refresh Method in JavaScript with Anime.js",
    "codeDescription": "This snippet demonstrates how to create a draggable element and implement a refresh function using Anime.js. It creates a draggable square with randomized snap and drag speed, and adds a refresh button to recalculate these values.",
    "codeLanguage": "javascript",
    "codeTokens": 152,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsrefresh.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Draggable Refresh Method Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable, utils } from 'animejs';\n\nconst [ $refreshButton ] = utils.$('.refresh');\n\nconst draggable = createDraggable('.square', {\n  snap: () => utils.random(0, 32, 0),\n  dragSpeed: () => utils.random(.5, 1.5, 1),\n});\n\nconst refreshDraggable = () => draggable.refresh();\n\n$refreshButton.addEventListener('click', refreshDraggable);"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Creating a Draggable Instance in JavaScript with AnimeJS",
    "codeDescription": "This snippet demonstrates how to create a draggable instance using the createDraggable function from AnimeJS. It takes a target element and optional parameters to configure the draggable behavior.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-properties.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Properties Documentation for AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "const draggable = createDraggable(target, parameters);"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing onRelease Callback with Anime.js Draggable",
    "codeDescription": "Demonstrates how to create a draggable element with an onRelease callback that increments and displays a counter. The callback function executes whenever the draggable element is released after being grabbed.",
    "codeLanguage": "javascript",
    "codeTokens": 112,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonrelease.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Callbacks Documentation for Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet releases = 0;\n\ncreateDraggable('.square', {\n  container: '.grid',\n  onRelease: () => $value.textContent = ++releases\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Defining Anime.js Scope with Media Queries",
    "codeDescription": "This JavaScript code snippet demonstrates how to define an anime.js scope with media queries. It imports `createScope` and `animate` from the animejs library and creates a scope with `mediaQueries` object, which maps arbitrary names (isSmall, isMedium, isLarge, reduceMotion) to media query definition strings. It then adds an animation to the scope that adjusts animation properties based on the matched media queries.",
    "codeLanguage": "JavaScript",
    "codeTokens": 309,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-parametersmediaqueries.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Scope with Media Queries",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { createScope, animate } from 'animejs';\n\ncreateScope({\n  mediaQueries: {\n    isSmall: '(max-width: 100px)',\n    isMedium: '(min-width: 101px) and (max-width: 200px)',\n    isLarge: '(min-width: 201px)',\n    reduceMotion: '(prefers-reduced-motion)',\n  }\n})\n.add(self => {\n\n  const { isSmall, isMedium, isLarge, reduceMotion } = self.matches;\n    \n  utils.set('.square', { scale: isMedium ? .75 : isLarge ? 1 : .5 });\n    \n  animate('.square', {\n    x: isSmall ? 0 : ['-35vw', '35vw'],\n    y: isSmall ? ['-40vh', '40vh'] : 0,\n    rotate: 360,\n    loop: true,\n    alternate: true,\n    duration: reduceMotion ? 0 : isSmall ? 750 : 1250\n  });\n\n});"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Animating Logo Rotation on Click",
    "codeDescription": "This snippet defines a function `rotateLogo` that increments a rotation counter and animates the rotation of the logo element when a button is clicked.  It updates the button's text to display the current rotation count. The animation uses Anime.js to rotate the logo with a specified easing and duration.",
    "codeLanguage": "javascript",
    "codeTokens": 139,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedusing-with-vanilla-js.md#2025-04-18_snippet_4",
    "pageTitle": "Anime.js Vanilla JavaScript Integration",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Animate logo rotation on click\nconst rotateLogo = () => {\n  rotations++;\n  $button.innerText = `rotations: ${rotations}`;\n  animate($logo, {\n    rotate: rotations * 360,\n    ease: 'out(4)',\n    duration: 1500,\n  });\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Animating Element Position with Eased Scroll Synchronization - Anime.js - JavaScript",
    "codeDescription": "This code snippet demonstrates how to use Anime.js to animate a '.square' element with easing functions based on the scroll position of a container. It utilizes the 'onScroll' callback to trigger animations as scrolling occurs, creating a dynamic visual effect. The code includes parameters for animation settings such as rotation, delay, and synchronization mode.",
    "codeLanguage": "javascript",
    "codeTokens": 186,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-synchronisation-modeseased-scroll.md#2025-04-18_snippet_0",
    "pageTitle": "Animating Scroll Effects with Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, stagger, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '12rem',\n  rotate: '1turn',\n  ease: 'linear',\n  delay: stagger(100, { from: 'last' }),\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: 'inOutCirc',\n    debug: true,\n  })\n});"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Creating Draggable Elements with Custom Easing - JavaScript",
    "codeDescription": "This code snippet demonstrates how to create draggable elements using the Anime.js library. It allows for customization of the easing that takes effect when the draggable elements are released. The code utilizes the createDraggable function from Anime.js to assign draggable behavior to specified elements while setting the releaseEase property for the easing effect upon release.",
    "codeLanguage": "JavaScript",
    "codeTokens": 154,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsreleaseease.md#2025-04-18_snippet_0",
    "pageTitle": "Creating Draggable Elements in Anime.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { createDraggable, createSpring } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  releaseEase: 'outElastic',\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  releaseEase: createSpring({\n    stiffness: 150,\n    damping: 15,\n  })\n});"
      }
    ],
    "relevance": 0.947
  },
  {
    "codeTitle": "Creating and Managing Scope in Anime.js",
    "codeDescription": "This JavaScript snippet demonstrates initializing a scope using 'createScope' in Anime.js. The 'scope' object contains properties and methods to manage DOM operations, constructor functions, media queries, and revertibles. Essential functions include getting default parameters, root elements, and media query matches. Dependencies include the Anime.js library version 4.0.0 or higher.",
    "codeLanguage": "javascript",
    "codeTokens": 126,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-properties.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Scope Properties Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const scope = createScope();\n┌────────┐\nscope.│methods │\nscope.│root    ├─ Properties\nscope.│matches │\n└────────┘"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Creating a Staggered Animation with WAAPI",
    "codeDescription": "Example of creating a staggered animation effect using WAAPI in Anime.js. This code animates span elements with a vertical translation, staggered delay, looping, and easing.",
    "codeLanguage": "javascript",
    "codeTokens": 115,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-api.md#2025-04-18_snippet_1",
    "pageTitle": "Web Animation API in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { waapi, stagger } from 'animejs';\n\nwaapi.animate('span', {\n  translate: `0 -2rem`,\n  delay: stagger(100),\n  duration: 600,\n  loop: true,\n  alternate: true,\n  ease: 'inOut(2)',\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Creating and Accessing Timeline Properties in Anime.js",
    "codeDescription": "This snippet demonstrates how to create a timeline and access its properties in Anime.js. It shows the basic structure for creating a timeline with parameters and accessing various timeline properties.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-properties.md#2025-04-18_snippet_0",
    "pageTitle": "Timeline Properties in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const timeline = createTimeline(parameters);\n timeline.labels\n timeline.currentTime\n timeline.duration"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Setting Global Default for Reversed Animation in AnimeJS",
    "codeDescription": "Shows how to change the default value of the 'reversed' property globally by updating the engine.defaults object. This allows all animations to play backwards by default without specifying for each instance.",
    "codeLanguage": "javascript",
    "codeTokens": 75,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsreversed.md#2025-04-18_snippet_0",
    "pageTitle": "Animation Playback Settings in AnimeJS: Reversed Property",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.reversed = true;"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Practical Animation Callback Example in Anime.js",
    "codeDescription": "Complete example showing how to import Anime.js, create an animation, and update DOM content on completion.",
    "codeLanguage": "javascript",
    "codeTokens": 92,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksthen.md#2025-04-18_snippet_2",
    "pageTitle": "Animation Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  delay: 500,\n});\n\nanimation.then(() => $value.textContent = 'fulfilled');"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using WAAPI with Scope for Media Queries in Anime.js",
    "codeDescription": "Example of creating a scope for WAAPI animations with media queries handling. This demonstrates how to create responsive animations that respect user preferences like reduced motion.",
    "codeLanguage": "javascript",
    "codeTokens": 124,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-api.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Web Animation API Improvements Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "createScope({\n  mediaQueries: { reduceMotion: '(prefers-reduced-motion)' }\n})\n.add(({ matches }) => {\n  const { reduceMotion } = matches;\n  waapi.animate('.square', {\n    transform: reduceMotion ? ['100px', '100px'] : '100px',\n    opacity: [0, 1],\n  });\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Structuring HTML for Particle Animation and User Input",
    "codeDescription": "This HTML snippet sets up the necessary structure for displaying the animated particles and a control input range slider. It assumes CSS for styling and layout management. The HTML includes a container for particles and a range input for dynamic frame rate adjustments.",
    "codeLanguage": "HTML",
    "codeTokens": 122,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parametersfps.md#2025-04-18_snippet_1",
    "pageTitle": "Controlling Animation Frame Rate with Anime.js in JavaScript",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div class=\"large row container\"></div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=240 value=60 step=1 class=\"range\" />\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using $ Utility Function in Anime.js",
    "codeDescription": "Shows how to use the $ utility function to select elements and manipulate them. It demonstrates both global selection and scoped selection with createScope.",
    "codeLanguage": "javascript",
    "codeTokens": 54,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesdollar-sign.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js $ Utility Function Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const targetsArray = utils.$(targets);"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using Timeline Refresh Method in AnimeJS",
    "codeDescription": "This snippet demonstrates how to use the refresh() method with an AnimeJS timeline. It creates a timeline with random x-position animations for three shapes (circle, triangle, square) and sets up a button to refresh and restart the animation. The timeline also has a loop property with an onLoop callback that automatically refreshes the animations.",
    "codeLanguage": "javascript",
    "codeTokens": 226,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsrefresh.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Timeline Refresh Method",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $refreshButton ] = utils.$('.refresh');\n\nconst tl = createTimeline({\n  loop: true,\n  onLoop: self => self.refresh()\n})\n.add('.circle',   { x: () => utils.random(0, 15) + 'rem' }, 0)\n.add('.triangle', { x: () => utils.random(0, 15) + 'rem' }, 0)\n.add('.square',   { x: () => utils.random(0, 15) + 'rem' }, 0);\n\nconst refreshTimeline = () => tl.refresh().restart();\n\n$refreshButton.addEventListener('click', refreshTimeline);"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing animateInView for Draggable Elements in Anime.js",
    "codeDescription": "This snippet demonstrates how to create a draggable element and use the animateInView method to bring it back into the viewport. It includes event listener setup and initial positioning of the draggable element.",
    "codeLanguage": "javascript",
    "codeTokens": 146,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsanimateinview.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Methods in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\nconst [ $animateInView ] = utils.$('.animate-button');\n\nconst draggable = createDraggable('.square', {\n  container: '.grid',\n});\n\nconst animateInView = () => {\n  draggable.animateInView(400, 16);\n}\n\n// Set the draggable position outside the container\ndraggable.x = -24;\ndraggable.y = 72;\n\n$animateInView.addEventListener('click', animateInView);"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Initializing Timeline Elements with init() in AnimeJS",
    "codeDescription": "Demonstrates how to use the init() method to set initial values for timeline animations. The code creates a timeline with three elements (.square, .triangle, and .circle), each with a specific 'from' value, and uses init() to force rendering of their initial states.",
    "codeLanguage": "javascript",
    "codeTokens": 152,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsinit.md#2025-04-18_snippet_0",
    "pageTitle": "Timeline Methods: init() - AnimeJS Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline } from 'animejs';\n\nconst tl = createTimeline()\n.add('.square',   { x: { from: '15rem' } })\n.add('.triangle', { x: { from: '15rem' } }, 500)\n.add('.circle',   { x: { from: '15rem' } }, 1000)\n.init();"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Defining Percentage-based Keyframes in Anime.js",
    "codeDescription": "Shows the basic syntax for percentage-based keyframes in Anime.js. Each keyframe defines animation properties at specific percentage points in the animation duration, with optional easing parameters.",
    "codeLanguage": "javascript",
    "codeTokens": 97,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframespercentage-based-keyframes.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Documentation: Percentage-based Keyframes",
    "codeList": [
      {
        "language": "javascript",
        "code": "keyframes: {\n  '25%' : { x: 100, y: 50, ease: 'out' },\n  '50%' : { x: 200, y: 75, },\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "AnimeJS Set Utility Implementation Example",
    "codeDescription": "Demonstrates practical usage of utils.set() with dynamic values, stagger effects, and random color selection. Includes event listeners for setting and reverting styles on square elements.",
    "codeLanguage": "javascript",
    "codeTokens": 245,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesset.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Utils.set() Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { utils, stagger } from 'animejs';\n\nconst [ $set, $revert ] = utils.$('button');\nconst squares = utils.$('.square');\nconst colors = ['red', 'orange', 'yellow'];\n\nlet setter;\n\nconst setStyles = () => {\n  setter = utils.set(squares, {\n    borderRadius: '50%',\n    y: () => utils.random(-1, 1) + 'rem',\n    scale: stagger(.1, { start: .25, ease: 'out' }),\n    color: () => `var(--hex-${utils.randomPick(colors)})`\n  });\n  $set.setAttribute('disabled', 'true');\n  $revert.removeAttribute('disabled');\n}\n\nconst revertStyles = () => {\n  setter.revert();\n  $set.removeAttribute('disabled');\n  $revert.setAttribute('disabled', 'true');\n}\n\n$set.addEventListener('click', setStyles);\n$revert.addEventListener('click', revertStyles);"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Anime.js Timer with Scroll",
    "codeDescription": "This code snippet shows how to synchronize a timer with scrolling. It uses `createTimer` (assumed to be a custom function) and updates the inner HTML of an element with the class 'timer' to display the timer's current time, controlled by the scroll position of a container.",
    "codeLanguage": "javascript",
    "codeTokens": 149,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscroll.md#2025-04-18_snippet_4",
    "pageTitle": "Anime.js Scroll Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Timer\n\nconst [ $timer ] = utils.$('.timer');\n\ncreateTimer({\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  onUpdate: self => {\n    $timer.innerHTML = self.iterationCurrentTime\n  },\n  autoplay: onScroll({\n    target: $timer.parentNode,\n    container,\n    debug\n  })\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Creating a Complex Animation with Keyframes in Anime.js",
    "codeDescription": "This example shows how to create a complex animation using keyframes in Anime.js. It animates a square element with multiple keyframes, including translations, scaling, and rotation. The animation also demonstrates the use of different easing functions and looping.",
    "codeLanguage": "javascript",
    "codeTokens": 252,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframesduration-based-keyframes.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Animation Keyframes Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate('.square', {\n  keyframes: [\n    { y: '-2.5rem', ease: 'out', duration: 400 },\n    { x: '17rem', scale: .5, duration: 800 },\n    { y: '2.5rem' }, // The duration here is 3000 / 5 = 600ms\n    { x: 0, scale: 1, duration: 800 },\n    { y: 0, ease: 'in', duration: 400 }\n  ],\n  rotate: { to: 360, ease: 'linear' },\n  duration: 3000,\n  ease: 'inOut', // ease applied between each keyframes if no ease defined\n  playbackEase: 'ouIn(5)', // ease applied accross all keyframes\n  loop: true,\n});"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing Timer Controls with AnimeJS",
    "codeDescription": "Creates a timer instance with controls for resuming, pausing, and alternating playback. The timer updates a display element with the current iteration time every frame and loops continuously. Includes event listeners for button controls.",
    "codeLanguage": "javascript",
    "codeTokens": 196,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsresume.md#2025-04-18_snippet_0",
    "pageTitle": "Resume Timer Method Documentation - AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $resumeButton, $pauseButton, $alternateButton ] = utils.$('.button');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  duration: 2000,\n  onUpdate: self => $time.innerHTML = self.iterationCurrentTime,\n  loop: true,\n});\n\nconst resumeTimer = () => timer.resume();\nconst pauseTimer = () => timer.pause();\nconst alternateTimer = () => timer.alternate();\n\n$resumeButton.addEventListener('click', resumeTimer);\n$pauseButton.addEventListener('click', pauseTimer);\n$alternateButton.addEventListener('click', alternateTimer);"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Anime.js ScrollObserver onLeave Callback",
    "codeDescription": "This JavaScript code snippet demonstrates how to use the `onLeave` callback within Anime.js's `onScroll` function. It imports necessary modules from Anime.js, selects an HTML element with class 'value', initializes a counter, and animates a '.square' element based on scroll position. The `onLeave` callback increments the counter and updates the text content of the selected element when the square leaves the defined threshold.",
    "codeLanguage": "JavaScript",
    "codeTokens": 218,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonleave.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js ScrollObserver onLeave Callback Example",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { animate, onScroll, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet exits = 0;\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: true,\n    debug: true,\n    onLeave: () => $value.textContent = ++exits,\n  })\n});"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Async/Await Animation Pattern in Anime.js",
    "codeDescription": "Demonstrates how to use async/await syntax with Anime.js animations for better flow control.",
    "codeLanguage": "javascript",
    "codeTokens": 75,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksthen.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "async function waitForAnimationToComplete() {\n  return animate(target, {\n    x: 100,\n    duration: 500,\n  });\n}\n\nconst asyncAnimation = await waitForAnimationToComplete();"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Implementing Alternate Animation with Anime.js in JavaScript",
    "codeDescription": "This snippet demonstrates how to use the alternate() method in Anime.js to toggle the playback direction of an animation. It creates an animation for multiple squares, moving them horizontally with a staggered delay, and sets up a button to trigger the alternate() method.",
    "codeLanguage": "javascript",
    "codeTokens": 152,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsalternate.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Animation Alternate Method Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils, stagger } from 'animejs';\n\nconst [ $alternateButton ] = utils.$('.button');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  ease: 'inOutSine',\n  loop: true,\n  delay: stagger(100),\n});\n\nconst alternateAnimation = () => animation.alternate();\n\n$alternateButton.addEventListener('click', alternateAnimation);"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "HTML Structure for Reversed Animation Examples",
    "codeDescription": "HTML markup that creates containers for demonstrating normal and reversed animations. Each container includes a circle element that will be animated and a label indicating the reversed property value.",
    "codeLanguage": "html",
    "codeTokens": 127,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsreversed.md#2025-04-18_snippet_2",
    "pageTitle": "Animation Playback Settings in AnimeJS: Reversed Property",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"circle dir-normal\"></div>\n  <div class=\"padded label\">reversed: false</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"circle dir-reverse\"></div>\n  <div class=\"padded label\">reversed: true</div>\n</div>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Adding Animations and Managing Engine State with Anime.js",
    "codeDescription": "This code snippet sets up a container where 150 animated particles are added, along with functionality to pause and resume the animation engine through button interactions. Dependencies include the Anime.js library, which provides animation utilities and engine control methods.",
    "codeLanguage": "JavaScript",
    "codeTokens": 317,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-methodsresume.md#2025-04-18_snippet_0",
    "pageTitle": "Animating and Controlling Engine with Anime.js in JavaScript",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { engine, animate, utils } from 'animejs';\n\nconst [ $container ] = utils.$('.container');\nconst [ $pause, $resume ] = utils.$('button');\n\nfunction addAnimation() {\n  const $particle = document.createElement('div');\n  $particle.classList.add('particle');\n  $container.appendChild($particle);\n  animate($particle, {\n    x: utils.random(-10, 10, 2) + 'rem',\n    y: utils.random(-3, 3, 2) + 'rem',\n    scale: [{ from: 0, to: 1 }, { to: 0 }],\n    loop: true,\n    delay: utils.random(0, 1000)\n  });\n}\n\nfor (let i = 0; i < 150; i++) addAnimation();\n\nconst resumeEngine = () => engine.resume();\nconst pauseEngine = () => engine.pause();\n\n$pause.addEventListener('click', pauseEngine);\n$resume.addEventListener('click', resumeEngine);\n\n<div class=\"large row container\"></div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button>Pause</button>\n    <button>Resume</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Creating Animated Cubes in Three.js with Anime.js - JavaScript",
    "codeDescription": "This function creates and animates multiple cubes using Three.js and Anime.js. It establishes a timeline for animations, including random positions and rotations for each cube, and adds these cubes to the Three.js scene.",
    "codeLanguage": "JavaScript",
    "codeTokens": 254,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-methodsupdate.md#2025-04-18_snippet_1",
    "pageTitle": "Manually Updating Anime.js Engine - JavaScript",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "function createAnimatedCube() {\n  const cube = new THREE.Mesh(geometry, material);\n  const x = utils.random(-10, 10, 2);\n  const y = utils.random(-5, 5, 2);\n  const z = [-10, 7];\n  const r = () => utils.random(-Math.PI * 2, Math.PI * 2, 3);\n  const duration = 4000;\n  createTimeline({\n    delay: utils.random(0, duration),\n    defaults: { loop: true, duration, ease: 'inSine', },\n  })\n  .add(cube.position, { x, y, z }, 0)\n  .add(cube.rotation, { x: r, y: r, z: r }, 0)\n  .init();\n  scene.add(cube);\n}\n\nfor (let i = 0; i < 40; i++) {\n  createAnimatedCube();\n}\n"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Creating and Modifying Animation Frame Rate in AnimeJS",
    "codeDescription": "Example showing how to create an animation with a specific frame rate and dynamically update it using a range input. The code initializes an animation with a frame rate of 60fps and allows changing it through a UI slider.",
    "codeLanguage": "javascript",
    "codeTokens": 167,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsframerate.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Frame Rate Settings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $fps ] = utils.$('.fps');\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  loop: true,\n  alternate: true,\n  frameRate: 60,\n});\n\nconst updateFps = () => {\n  const { value } = $range;\n  $fps.innerHTML = value;\n  animation.fps = value;\n}\n\n$range.addEventListener('input', updateFps);"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Using Animatable Getters in AnimeJS",
    "codeDescription": "This snippet demonstrates how to create an animatable object and use its properties as getter methods to retrieve current values. It creates a circle element that responds to mouse movement and displays its x and y coordinates.",
    "codeLanguage": "javascript",
    "codeTokens": 326,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-methodsgetters.md#2025-04-18_snippet_0",
    "pageTitle": "Animatable Methods: Getters in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createAnimatable, utils } from 'animejs';\n\nconst $demos = document.querySelector('#docs-demos');\nconst $demo = $demos.querySelector('.docs-demo.is-active');\nconst [ $x, $y ] = utils.$('.coords');\nlet bounds = $demo.getBoundingClientRect();\nconst refreshBounds = () => bounds = $demo.getBoundingClientRect();\n\nconst circle = createAnimatable('.circle', {\n  x: 500,\n  y: 500,\n  ease: 'out(2)',\n});\n\n// Gets and log the current x and y values\ncircle.animations.x.onRender = () => {\n  $x.innerHTML = utils.roundPad(circle.x(), 2);\n  $y.innerHTML = utils.roundPad(circle.y(), 2);\n}\n\nconst onMouseMove = e => {\n  const { width, height, left, top } = bounds;\n  const hw = width / 2;\n  const hh = height / 2;\n  const x = utils.clamp(e.clientX - left - hw, -hw, hw);\n  const y = utils.clamp(e.clientY - top - hh, -hh, hh);\n  // Sets x and y values\n  circle.x(x);\n  circle.y(y);\n}\n\nwindow.addEventListener('mousemove', onMouseMove);\n$demos.addEventListener('scroll', refreshBounds);"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Animating Individual CSS Transforms with anime.js Web Animation API",
    "codeDescription": "This example demonstrates how to use anime.js WAAPI module to animate individual transform properties on multiple elements. The code randomly positions and rotates square elements continuously by using function-based values for x, y, rotateX, and rotateY properties.",
    "codeLanguage": "javascript",
    "codeTokens": 185,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apiindividual-css-transforms.md#2025-04-18_snippet_0",
    "pageTitle": "Individual CSS Transforms in Web Animation API",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { waapi, utils } from 'animejs';\n\nconst $squares = utils.$('.square');\n\nconst animateSquares = () => {\n  waapi.animate($squares, {\n    x: () => utils.random(0, 17) + 'rem',\n    y: () => utils.random(-1, 1) + 'rem',\n    rotateX: () => utils.random(-90, 90),\n    rotateY: () => utils.random(-90, 90),\n    onComplete: () => animateSquares()\n  });\n}\n\nanimateSquares();"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Implementing Timer with Status Update in Anime.js",
    "codeDescription": "Creates a timer using Anime.js createTimer function, updates a time display during the timer's progress, and changes a status message upon completion. This example showcases the use of onUpdate and then() methods.",
    "codeLanguage": "javascript",
    "codeTokens": 126,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksthen.md#2025-04-18_snippet_1",
    "pageTitle": "Timer Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $status ] = utils.$('.status');\nconst [ $time ] = utils.$('.time');\n\ncreateTimer({\n  duration: 2000,\n  onUpdate: self => $time.innerHTML = self.currentTime,\n})\n.then(() => $status.innerHTML = 'fulfilled');"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Defining Duration-Based Keyframes in Anime.js",
    "codeDescription": "This snippet demonstrates how to define duration-based keyframes in Anime.js. Each keyframe object can include an animatable property and tween parameters. The default duration of a keyframe is calculated by dividing the total animation duration by the number of keyframes.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframesduration-based-keyframes.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Animation Keyframes Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "keyframes: [\n  { y: 50, ease: 'out', duration: 400 },\n  { x: 75, scale: .5, duration: 800 },\n]"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Creating and Adding Timer to AnimeJS Timeline",
    "codeDescription": "This snippet demonstrates how to create a timeline and add timers using the add() method. It also shows how to synchronize an existing timer using the sync() method.",
    "codeLanguage": "javascript",
    "codeTokens": 169,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelineadd-timers.md#2025-04-18_snippet_0",
    "pageTitle": "Adding Timers to AnimeJS Timeline",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, createTimer, utils } from 'animejs';\n\nconst [ $timer01, $timer02, $timer03 ] = utils.$('.timer');\n\nconst timer1 = createTimer({\n  duration: 1500,\n  onUpdate: self => $timer01.innerHTML = self.currentTime,\n});\n\nconst tl = createTimeline()\n.sync(timer1)\n.add({\n  duration: 500,\n  onUpdate: self => $timer02.innerHTML = self.currentTime,\n})\n.add({\n  onUpdate: self => $timer03.innerHTML = self.currentTime,\n  duration: 1000\n});"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Converting Units in AnimeJS Animations with JavaScript",
    "codeDescription": "Demonstrates how to use the animate() method to convert between different unit types during animation. The example shows converting from pixels to percentage, pixels to rem, and degrees to turns.",
    "codeLanguage": "javascript",
    "codeTokens": 122,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesunit-conversion-value.md#2025-04-18_snippet_0",
    "pageTitle": "Unit Conversion in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nanimate('.square', {\n  width: '25%', // from '48px' to '25%',\n  x: '15rem', // from '0px' to '15rem',\n  rotate: '.75turn', // from `0deg` to '.75turn',\n});"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Synchronizing Multiple Timelines in Anime.js",
    "codeDescription": "This example demonstrates how to synchronize multiple timelines and animations in Anime.js. It creates a main timeline that syncs with two child timelines (tlA and tlB), with tlB starting 2000ms before the end of tlA due to the offset parameter.",
    "codeLanguage": "javascript",
    "codeTokens": 227,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinesync-timelines.md#2025-04-18_snippet_0",
    "pageTitle": "Synchronizing Timelines in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, animate } from 'animejs';\n\nconst circleAnimation = animate('.circle', {\n  x: '15rem'\n});\n\nconst tlA = createTimeline()\n.sync(circleAnimation)\n.add('.triangle', {\n  x: '15rem',\n  duration: 2000,\n})\n.add('.square', {\n  x: '15rem',\n});\n\nconst tlB = createTimeline({ defaults: { duration: 2000 } })\n.add(['.triangle', '.square'], {\n  rotate: 360,\n}, 0)\n.add('.circle', {\n  scale: [1, 1.5, 1],\n}, 0);\n\nconst tlMain = createTimeline()\n.sync(tlA)\n.sync(tlB, '-=2000');"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Creating an Anime.js Scope with Media Queries (JavaScript)",
    "codeDescription": "This code snippet demonstrates creating an Anime.js scope using the `createScope` function and defining media queries within it.  The scope is configured with `mediaQueries` for 'isSmall' and 'reduceMotion', which are then used to conditionally modify the animation based on the current viewport size and user preferences.",
    "codeLanguage": "JavaScript",
    "codeTokens": 248,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscope.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Scopes: Managing Animations in Responsive Environments",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { animate, utils, createScope } from 'animejs';\n\ncreateScope({\n  mediaQueries: {\n    isSmall: '(max-width: 200px)',\n    reduceMotion: '(prefers-reduced-motion)',\n  }\n})\n.add(self => {\n\n  const { isSmall, reduceMotion } = self.matches;\n  \n  if (isSmall) {\n    utils.set('.square', { scale: .5 });\n  }\n    \n  animate('.square', {\n    x: isSmall ? 0 : ['-35vw', '35vw'],\n    y: isSmall ? ['-40vh', '40vh'] : 0,\n    loop: true,\n    alternate: true,\n    duration: reduceMotion ? 0 : isSmall ? 750 : 1250\n  });\n\n});"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "HTML Structure for Anime.js Alternate Animation Demo",
    "codeDescription": "This HTML snippet provides the structure for the Anime.js alternate animation demo. It includes multiple rows with squares that will be animated, and a button to trigger the alternate() method.",
    "codeLanguage": "html",
    "codeTokens": 121,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsalternate.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Animation Alternate Method Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button\">Alternate</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Creating a Draggable Element with AnimeJS",
    "codeDescription": "Demonstrates the basic usage of the createDraggable function. It takes a target (CSS selector or DOM element) and optional parameters to create a draggable element.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggable.md#2025-04-18_snippet_1",
    "pageTitle": "Draggable Documentation for AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "const draggable = createDraggable(target, parameters);"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Creating a Timer with Callbacks in Anime.js",
    "codeDescription": "This snippet demonstrates how to create a timer using the createTimer() function in Anime.js, including various callback functions. The timer is set to run for 1000 milliseconds, use frame-based timing, and loop indefinitely.",
    "codeLanguage": "javascript",
    "codeTokens": 104,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacks.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timer Callbacks Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "createTimer({\n  duration: 1000,\n  frameRate: true,\n  loop: true,\n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Configuring Anime.js Engine for Manual Updates - JavaScript",
    "codeDescription": "This snippet disables the default animation loop in Anime.js, allowing for manual updates in projects using custom animation loops like Three.js. It initializes the engine and sets up the environment for rendering objects in Three.js while managing animations with Anime.js.",
    "codeLanguage": "JavaScript",
    "codeTokens": 252,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-methodsupdate.md#2025-04-18_snippet_0",
    "pageTitle": "Manually Updating Anime.js Engine - JavaScript",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { engine, createTimeline, utils } from 'animejs';\n\n// Prevents Anime.js from using its own loop\nengine.useDefaultMainLoop = false;\n\nconst [ $container ] = utils.$('.container');\nconst color = utils.get($container, 'color');\nconst { width, height } = $container.getBoundingClientRect();\n\n// Three.js setup, note that the global THREE object is defined globally\nconst renderer = new THREE.WebGLRenderer({ alpha: true });\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(65, width / height, 0.1, 20);\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\nconst material = new THREE.MeshBasicMaterial({ color, wireframe: true });\n\nrenderer.setSize(width, height);\nrenderer.setPixelRatio(window.devicePixelRatio);\n$container.appendChild(renderer.domElement);\ncamera.position.z = 5;\n"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementing Timer Seek Functionality with AnimeJS in JavaScript",
    "codeDescription": "This snippet demonstrates how to create and control a timer using AnimeJS. It includes functions for seeking to a specific time, playing/pausing the timer, and updating the UI accordingly. The timer is created with a duration of 2000ms and includes callbacks for updates and completion.",
    "codeLanguage": "javascript",
    "codeTokens": 275,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsseek.md#2025-04-18_snippet_0",
    "pageTitle": "Timer Methods in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $playPauseButton ] = utils.$('.play-pause');\nconst [ $time ] = utils.$('.time');\n\nconst updateButtonLabel = timer => {\n  $playPauseButton.textContent = timer.paused ? 'Play' : 'Pause';\n}\n\nconst timer = createTimer({\n  duration: 2000,\n  autoplay: false,\n  onUpdate: self => {\n    $range.value = self.currentTime;\n    $time.innerHTML = self.currentTime;\n    updateButtonLabel(self);\n  },\n  onComplete: updateButtonLabel,\n});\n\nconst seekTimer = () => timer.seek(+$range.value);\n\nconst playPauseTimer = () => {\n  if (timer.paused) {\n    timer.play();\n  } else {\n    timer.pause();\n    updateButtonLabel(timer);\n  }\n}\n\n$range.addEventListener('input', seekTimer);\n$playPauseButton.addEventListener('click', playPauseTimer);"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Animating with HSLA Color Values in Anime.js",
    "codeDescription": "This example illustrates the use of HSLA color values in Anime.js animations. It targets an element with the class 'hsla' and animates its background color to 'hsla(44, 100%, 59%, .2)'.",
    "codeLanguage": "javascript",
    "codeTokens": 93,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-value.md#2025-04-18_snippet_5",
    "pageTitle": "Anime.js Color Value Types Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.hsla', {\n  background: 'hsla(44, 100%, 59%, .2)',\n});"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Creating and Adding Scopes",
    "codeDescription": "This code creates two Anime.js scopes, `scope1` and `scope2`, associated with the '.row-1' and '.row-2' elements respectively. The `scopeConstructor` function is added to each scope, applying the defined animations and event listeners to the elements within each row.",
    "codeLanguage": "javascript",
    "codeTokens": 116,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsrevert.md#2025-04-18_snippet_3",
    "pageTitle": "Anime.js Scope Revert Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const scope1 = createScope({ root: '.row-1' }).add(scopeConstructor);\nconst scope2 = createScope({ root: '.row-2' }).add(scopeConstructor);"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using Modifier Functions with AnimeJS Animatable Elements",
    "codeDescription": "This example demonstrates how to use modifier functions with AnimeJS's createAnimatable method. It creates two clock elements that rotate based on mouse position - one with a snapping modifier that rounds rotation to specific increments, and another with an inverting modifier that reverses the rotation direction.",
    "codeLanguage": "javascript",
    "codeTokens": 314,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settingsmodifier.md#2025-04-18_snippet_0",
    "pageTitle": "Animatable Settings - Modifier Function in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createAnimatable, utils, stagger } from 'animejs';\n\nconst PI = Math.PI;\n\nconst clock1 = createAnimatable('.clock-1', {\n  rotate: { unit: 'rad' },\n  modifier: utils.snap(PI / 10),\n  duration: 0,\n});\n\nconst clock2 = createAnimatable('.clock-2', {\n  rotate: { unit: 'rad' },\n  modifier: v => -v,\n  duration: 0,\n});\n\nconst rotateClock = (animatable) => {\n  return e => {\n    const [ $clock ] = animatable.targets;\n    const { width, height, left, top } = $clock.getBoundingClientRect();\n    const x = e.clientX - left - width / 2;\n    const y = e.clientY - top - height / 2;\n    animatable.rotate(Math.atan2(y, x) + PI / 2);\n  }\n}\n\nconst rotateClock1 = rotateClock(clock1);\nconst rotateClock2 = rotateClock(clock2);\n\nconst onMouseMove = e => {\n  rotateClock1(e);\n  rotateClock2(e);\n}\n\nwindow.addEventListener('mousemove', onMouseMove);"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementing Draggable Reset Functionality in JavaScript with Anime.js",
    "codeDescription": "This snippet demonstrates how to create a draggable element and implement a reset function using Anime.js. It imports necessary functions, creates a draggable element, and sets up an event listener for a reset button.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsreset.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Reset Method Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable, utils } from 'animejs';\n\nconst [ $resetButton ] = utils.$('.reset');\n\nconst draggable = createDraggable('.square');\n\nconst resetDraggable = () => draggable.reset();\n\n$resetButton.addEventListener('click', resetDraggable);"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Initializing Animation and Speed Control with Anime.js in JavaScript",
    "codeDescription": "This snippet sets up an animation using Anime.js, creates a range input for speed control, and uses utils.sync() to update the animation speed. It demonstrates how to synchronize speed changes with the animation engine loop.",
    "codeLanguage": "javascript",
    "codeTokens": 178,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiessync.md#2025-04-18_snippet_0",
    "pageTitle": "Synchronizing Animation Speed with Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $speed ] = utils.$('.speed');\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  loop: true,\n  alternate: true,\n  playbackRate: 1,\n});\n\nconst updateSpeed = () => {\n  const { value } = $range;\n  $speed.innerHTML = utils.roundPad(+value, 2);\n  utils.sync(() => animation.speed = value);\n}\n\n$range.addEventListener('input', updateSpeed);"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using play() Method with Event Listener in Anime.js",
    "codeDescription": "This JavaScript snippet demonstrates how to create a paused animation with Anime.js and then use the play() method to start it when a button is clicked. It creates an animation that moves squares horizontally with a staggered delay.",
    "codeLanguage": "javascript",
    "codeTokens": 151,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsplay.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Animation Methods: play()",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils, stagger } from 'animejs';\n\nconst [ $playButton ] = utils.$('.play');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  ease: 'inOutSine',\n  delay: stagger(100),\n  autoplay: false, // The animation is paused by default\n});\n\nconst playAnimation = () => animation.play();\n\n$playButton.addEventListener('click', playAnimation);"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Anime.js Scope Creation and Method Registration",
    "codeDescription": "Creates an Anime.js scope, registers a method within it, and attaches an event listener to execute the method. The method accesses scope properties, specifically media query matches, to dynamically adjust animation parameters. Utilizes the `animejs` library.",
    "codeLanguage": "javascript",
    "codeTokens": 279,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscoperegister-method-function.md#2025-04-18_snippet_2",
    "pageTitle": "Anime.js Scope Method Registration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { utils, animate, createScope } from 'animejs';\n\nconst scope = createScope({\n  mediaQueries: { isSmall: '(max-width: 200px)' },\n})\n.add(self => {\n\n  /* Registering the method inside the scope allows access to the scope itself */\n  self.add('onClick', (e) => {\n\n    const { clientX, clientY } = e;\n    const { isSmall } = self.matches;\n\n    animate('.square', {\n      rotate: isSmall ? '+=360' : 0,\n      x: isSmall ? 0 : clientX - (window.innerWidth / 2),\n      y: isSmall ? 0 : clientY - (window.innerHeight / 2),\n      duration: isSmall ? 750 : 400,\n    });\n    \n  });\n  \n  utils.set(document.body, {\n    cursor: self.matches.isSmall ? 'alias' : 'crosshair'\n  });\n  \n});\n\n/* Methods can be called outside the scope */\ndocument.addEventListener('click', scope.methods.onClick);"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Setting Global Modifiers in AnimeJS",
    "codeDescription": "Shows how to change the default modifier globally by updating the engine.defaults object. This example demonstrates setting a global modifier that negates all animated values.",
    "codeLanguage": "javascript",
    "codeTokens": 74,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersmodifier.md#2025-04-18_snippet_0",
    "pageTitle": "Using Modifiers in AnimeJS Animation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.modifier = v => -v; // Don't do this :D"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Defining Timeline Callbacks in AnimeJS",
    "codeDescription": "This snippet demonstrates how to define timeline callbacks within the createTimeline() function in AnimeJS. It includes settings for defaults, loop, alternate, autoplay, and various callback functions.",
    "codeLanguage": "javascript",
    "codeTokens": 113,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacks.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Timeline Callbacks Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "createTimeline({\n  defaults: {\n    ease: 'out(3)',\n    duration: 500,\n  },\n  loop: 3,\n  alternate: true,\n  autoplay: false,\n  onBegin: () => {},\n  onLoop: () => {},\n  onUpdate: () => {},\n});"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using restart() Method with Anime.js",
    "codeDescription": "This snippet demonstrates how to create an animation with Anime.js and implement a restart functionality. It animates squares with a staggered delay and provides a button that calls the restart() method when clicked.",
    "codeLanguage": "javascript",
    "codeTokens": 145,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsrestart.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Animation Methods: restart()",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils, stagger } from 'animejs';\n\nconst [ $restartButton ] = utils.$('.restart');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  direction: 'alternate',\n  ease: 'inOutSine',\n  loop: true,\n  delay: stagger(100)\n});\n\nconst restartAnimation = () => animation.restart();\n\n$restartButton.addEventListener('click', restartAnimation);"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementing onResize Callback for Draggable Elements in Anime.js",
    "codeDescription": "This snippet demonstrates how to use the onResize callback with createDraggable in Anime.js. It creates a draggable square and updates a counter each time the container or dragged target sizes change.",
    "codeLanguage": "javascript",
    "codeTokens": 119,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonresize.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet resizes = 0;\n\ncreateDraggable('.square', {\n  container: '.grid',\n  onResize: self => {\n    $value.textContent = ++resizes;\n  }\n});"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Animating CSS Properties with Anime.js",
    "codeDescription": "This example demonstrates how to animate various CSS properties including positioning, border radius, background color, and filter effects using Anime.js. It shows property naming conventions for properties with dashes, which can be written in camelCase or as strings.",
    "codeLanguage": "javascript",
    "codeTokens": 119,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiescss-properties.md#2025-04-18_snippet_0",
    "pageTitle": "Animatable Properties in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate('.square', {\n  left: 'calc(7.75rem * 2)',\n  borderRadius: 64,\n  'background-color': '#F9F640',\n  filter: 'blur(5px)',\n});"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Removing Targets from Anime.js Timeline",
    "codeDescription": "Shows how to remove targets from an Anime.js timeline. The method accepts targets as a parameter.",
    "codeLanguage": "javascript",
    "codeTokens": 41,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsremove.md#2025-04-18_snippet_1",
    "pageTitle": "Timeline Remove Method in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "timeline.remove(targets);"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "HTML Structure for Color Animation Examples in Anime.js",
    "codeDescription": "This HTML snippet provides the structure for displaying the color animation examples. It creates a row of circular divs, each with a class corresponding to a different color format used in the animation examples.",
    "codeLanguage": "html",
    "codeTokens": 130,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-value.md#2025-04-18_snippet_6",
    "pageTitle": "Anime.js Color Value Types Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large justified row\">\n  <div class=\"circle hex\"></div>\n  <div class=\"circle rgb\"></div>\n  <div class=\"circle hsl\"></div>\n  <div class=\"circle hexa\"></div>\n  <div class=\"circle rgba\"></div>\n  <div class=\"circle hsla\"></div>\n</div>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Creating an Anime.js Scope Constructor",
    "codeDescription": "The `scopeConstructor` function defines the animation logic and event listeners for elements within a scope. It selects elements with the class 'circle', adds animations to them, and attaches mouseenter and mouseleave event listeners.  The return value is a cleanup function that removes the event listeners, which is essential for the `revert` method to work correctly.",
    "codeLanguage": "javascript",
    "codeTokens": 249,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsrevert.md#2025-04-18_snippet_2",
    "pageTitle": "Anime.js Scope Revert Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const scopeConstructor = scope => {\n  const circles = utils.$('.circle');\n    \n  circles.forEach(($circle, i) => {\n    animate($circle, {\n      opacity: .25,\n      loop: true,\n      alternate: true,\n      duration: 500,\n      delay: i * 100,\n      ease: 'inOut(3)',\n    });\n    $circle.addEventListener('mouseenter', onMouseEnter);\n    $circle.addEventListener('mouseleave', onMouseLeave);\n  });\n  \n  // Cleanup function to take care of removing event listeners on revert\n  return () => {\n    circles.forEach($circle => {\n      // Anime.js instances are automatically reverted by the Scope\n      $circle.removeEventListener('mouseenter', onMouseEnter);\n      $circle.removeEventListener('mouseleave', onMouseLeave);\n    });\n  }\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Implementing Animation Refresh with AnimeJS in JavaScript",
    "codeDescription": "This snippet demonstrates how to use the refresh() method in AnimeJS to update animated property values. It creates an animation with random values for position, rotation, and scale, and implements a button to refresh and restart the animation.",
    "codeLanguage": "javascript",
    "codeTokens": 201,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsrefresh.md#2025-04-18_snippet_0",
    "pageTitle": "Animation Methods in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nconst [ $refreshButton ] = utils.$('.refresh');\n\nconst animation = animate('.square', {\n  x: () => utils.random(0, 17) + 'rem',\n  y: () => utils.random(-1, 1) + 'rem',\n  rotate: () => utils.random(-360, 360, 1),\n  scale: () => utils.random(.1, 1.5, 2),\n  duration: 750,\n  loop: true,\n  onLoop: self => self.refresh()\n});\n\nconst refreshAnimation = () => animation.refresh().restart();\n\n$refreshButton.addEventListener('click', refreshAnimation);"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Creating Draggable Element with Custom Trigger - JavaScript - Anime.js",
    "codeDescription": "This code snippet demonstrates how to create a draggable element in Anime.js, specifying a different trigger element for dragging. It uses the createDraggable function to initialize the draggable behavior, where the trigger can be a CSS selector or a DOM element.",
    "codeLanguage": "JavaScript",
    "codeTokens": 92,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingstrigger.md#2025-04-18_snippet_0",
    "pageTitle": "Creating Draggable Elements in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.row', {\n  trigger: '.circle',\n});"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Using set() Method in Anime.js Timeline",
    "codeDescription": "Demonstrates how to use the set() method in an Anime.js timeline to instantly set property values for different targets at specific times. The example creates a timeline and sets the x position of three different elements (.circle, .triangle, .square) at different time positions.",
    "codeLanguage": "javascript",
    "codeTokens": 133,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsset.md#2025-04-18_snippet_0",
    "pageTitle": "Timeline Methods in Anime.js: set()",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline } from 'animejs';\n\nconst tl = createTimeline()\n.set('.circle', { x: '15rem' })\n.set('.triangle', { x: '15rem' }, 500)\n.set('.square', { x: '15rem' }, 1000);"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Implementing Timer Alternation in AnimeJS",
    "codeDescription": "This snippet demonstrates how to create and use a timer with the alternate() method in AnimeJS. It sets up a timer with a duration of 10 seconds, loops continuously, and updates a display element with the current iteration time. A button is set up to trigger the alternate() method, which reverses the playback direction.",
    "codeLanguage": "javascript",
    "codeTokens": 179,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsalternate.md#2025-04-18_snippet_0",
    "pageTitle": "Timer Methods in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $alternateButton ] = utils.$('.button');\nconst [ $iterationTime ] = utils.$('.iteration-time');\n\nconst timer = createTimer({\n  duration: 10000,\n  loop: true,\n  onUpdate: self => {\n    $iterationTime.innerHTML = self.iterationCurrentTime;\n  }\n});\n\nconst alternateTimer = () => timer.alternate();\n\n$alternateButton.addEventListener('click', alternateTimer);"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Animating SVG drawing with anime.js",
    "codeDescription": "Example of using anime.js to animate SVG elements with the createDrawable method. The animation transitions the draw property from no visibility to full visibility with easing, duration, and staggered delay effects.",
    "codeLanguage": "javascript",
    "codeTokens": 122,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvgcreatedrawable.md#2025-04-18_snippet_2",
    "pageTitle": "anime.js SVG Drawing Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, svg, stagger } from 'animejs';\n\nanimate(svg.createDrawable('.line'), {\n  draw: ['0 0', '0 1', '1 1'],\n  ease: 'inOutQuad',\n  duration: 2000,\n  delay: stagger(100),\n  loop: true\n});"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Adding Event Listeners to Buttons",
    "codeDescription": "This snippet adds click event listeners to the buttons with the class 'revert'. When clicked, these buttons will trigger the `revertScope1` or `revertScope2` functions, reverting the animations and removing the event listeners associated with each scope.",
    "codeLanguage": "javascript",
    "codeTokens": 93,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsrevert.md#2025-04-18_snippet_5",
    "pageTitle": "Anime.js Scope Revert Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "$button1.addEventListener('click', revertScope1);\n$button2.addEventListener('click', revertScope2);"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Animating with Tween Values Array in AnimeJS",
    "codeDescription": "Creates an animation sequence using an array of values for the x and y properties. The animation will automatically transition between each value in the array over the specified duration.",
    "codeLanguage": "javascript",
    "codeTokens": 87,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframes.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Animation Keyframes Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.square', {\n  x: [0, 100, 200],\n  y: [0, 100, 200],\n  duration: 3000,\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Basic Keyframe Animation Example - JavaScript",
    "codeDescription": "Demonstrates a simple keyframe animation using array syntax to define the from and to values for the x property.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframestween-values-keyframes.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Keyframe Animation Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate(target: { x: [-100, 100] }); // Animate x from -100 to 100"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Animating with HEXA Color Values in Anime.js",
    "codeDescription": "This example demonstrates how to use HEXA (HEX with alpha) color values in Anime.js animations. It targets an element with the class 'hexa' and animates its background color to '#FF4B4B33'.",
    "codeLanguage": "javascript",
    "codeTokens": 83,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-value.md#2025-04-18_snippet_3",
    "pageTitle": "Anime.js Color Value Types Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.hexa', {\n  background: '#FF4B4B33',\n});"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Adding Methods to Scope with Media Query Handling - JavaScript",
    "codeDescription": "This snippet demonstrates how to create a Scope with Anime.js, registering methods to handle responsive interactions. It conditionally creates draggable and animatable behaviors for a circle element based on window size, and registers mouse and pointer event handlers to update its position and scale dynamically.",
    "codeLanguage": "javascript",
    "codeTokens": 482,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsadd.md#2025-04-18_snippet_0",
    "pageTitle": "Creating Dynamic Animations with Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createScope, createAnimatable, createDraggable } from 'animejs';\n\nconst scope = createScope({\n  mediaQueries: {\n    isSmall: '(max-width: 200px)',\n  }\n})\n.add(self => {\n\n  const [ $circle ] = utils.$('.circle');\n    \n  if (self.matches.isSmall) {\n    $circle.classList.add('draggable');\n    self.circle = createDraggable($circle, {\n      container: document.body,\n    });\n  } else {\n    $circle.classList.remove('draggable');\n    self.circle = createAnimatable($circle, {\n      x: 500,\n      y: 500,\n      ease: 'out(3)'\n    });\n  }\n  \n  let win = { w: window.innerWidth, h: window.innerHeight };\n  \n  self.add('refreshBounds', () => {\n    win.w = window.innerWidth;\n    win.h = window.innerHeight;\n  });\n      \n  self.add('onMouseMove', e => {\n    if (self.matches.isSmall) return;\n    const { w, h } = win;\n    const hw = w / 2;\n    const hh = h / 2;\n    const x = utils.clamp(e.clientX - hw, -hw, hw);\n    const y = utils.clamp(e.clientY - hh, -hh, hh);\n    if (self.circle.x) {\n      self.circle.x(x);\n      self.circle.y(y);\n    }\n  });\n  \n  self.add('onPointerDown', e => {\n    const { isSmall } = self.matches;\n    animate($circle, {\n      scale: [\n        { to: isSmall ? 1.25 : .25, duration: isSmall ? 50 : 150 },\n        { to: 1, duration: isSmall ? 250 : 500 },\n      ]\n    });\n  });\n});\n\nwindow.addEventListener('resize', scope.methods.refreshBounds);\nwindow.addEventListener('mousemove', scope.methods.onMouseMove);\ndocument.addEventListener('pointerdown', scope.methods.onPointerDown);"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Basic Usage of createDraggable with CSS Selector",
    "codeDescription": "Shows a simple example of creating a draggable element using a CSS selector '.square' as the target. This makes all elements with the class 'square' draggable.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggable.md#2025-04-18_snippet_2",
    "pageTitle": "Draggable Documentation for AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square');"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Setting Animation Precision in Anime.js - JavaScript",
    "codeDescription": "This snippet demonstrates how to set the precision of animated values in Anime.js. The 'engine.precision' property is adjusted based on user input, allowing for control over the rounding of decimal points in animations. A number higher than or equal to 0 enables rounding, while a negative number skips rounding altogether. The default precision is set to 4.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parametersprecision.md#2025-04-18_snippet_0",
    "pageTitle": "Animating with Precision in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "engine.precision = 1; // values will be rounded to 1 decimal place ('120.7px')"
      },
      {
        "language": "javascript",
        "code": "import { engine, animate, utils } from 'animejs';\n\nconst [ $container ] = utils.$('.container');\nconst [ $range ] = utils.$('.range');\n\nfor (let i = 0; i < 150; i++) {\n  const $particle = document.createElement('div');\n  $particle.classList.add('particle');\n  $container.appendChild($particle);\n  animate($particle, {\n    x: utils.random(-10, 10, 2) + 'rem',\n    y: utils.random(-3, 3, 2) + 'rem',\n    scale: [{ from: 0, to: 1 }, { to: 0 }],\n    delay: utils.random(0, 1000),\n    loop: true,\n  });  \n}\n\nfunction onInput() {\n  engine.precision = this.value;\n}\n\n$range.addEventListener('input', onInput);"
      }
    ],
    "relevance": 0.927
  },
  {
    "codeTitle": "Animating Elements with From Parameter in Animejs",
    "codeDescription": "Demonstrates how to use the 'from' parameter to define starting values for various animation properties including opacity, translation, and rotation. The animation transitions from these specified values to their default target values.",
    "codeLanguage": "javascript",
    "codeTokens": 146,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersfrom.md#2025-04-18_snippet_0",
    "pageTitle": "Animejs Tween Parameters Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate('.square', {\n  opacity: { from: .5 }, // Animate from .5 opacity to 1 opacity\n  translateX: { from: '16rem' }, // From 16rem to 0rem\n  rotate: {\n    from: '-.75turn', // From -.75turn to 0turn\n    ease: 'inOutQuad',\n  },\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Using Numerical Values with AnimeJS Stagger Function in JavaScript",
    "codeDescription": "This snippet demonstrates how to use the stagger function with numerical values to create incremental animations. It shows how to increase translateX by 5.75rem and delay by 100ms for each element in a sequence.",
    "codeLanguage": "javascript",
    "codeTokens": 123,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-value-typesnumerical-value.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Stagger Value Types Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, stagger } from 'animejs';\n\nanimate('.square', {\n  // Increase translateX by 5.75rem for each elements\n  x: stagger('5.75rem'),\n  // Increase delay by 100ms for each elements\n  delay: stagger(100)\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Rendering the Three.js Scene with Anime.js Integration - JavaScript",
    "codeDescription": "This render function updates the Anime.js engine and renders the Three.js scene within a custom animation loop. It allows for real-time updates and ensures that animations are synchronized with the existing Three.js rendering.",
    "codeLanguage": "JavaScript",
    "codeTokens": 104,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-methodsupdate.md#2025-04-18_snippet_2",
    "pageTitle": "Manually Updating Anime.js Engine - JavaScript",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "function render() {\n  engine.update(); // Manually update Anime.js engine\n  renderer.render(scene, camera); // Render Three.js scene\n}\n\n// Calls the builtin Three.js animation loop\nrenderer.setAnimationLoop(render);\n"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Creating a Draggable Element with Snap Parameters in Anime.js",
    "codeDescription": "This code snippet demonstrates how to create a draggable element using Anime.js with various snap parameters. It shows how to set a global snap value applied to both axes, as well as a specific snap array for the x-axis only.",
    "codeLanguage": "javascript",
    "codeTokens": 121,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parameterssnap.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Axes Parameters in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  snap: 56, // Global to both x and y\n  x: { snap: [0, 200] }, // Specific to x \n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Implementing Timeline Animation with onPause Callback",
    "codeDescription": "Complete example showing how to create an animation timeline with shape transformations and pause handling. Includes event listeners for animation control and target management.",
    "codeLanguage": "javascript",
    "codeTokens": 309,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonpause.md#2025-04-18_snippet_1",
    "pageTitle": "Timeline Callbacks in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $animateButton, $pauseButton, $removeButton ] = utils.$('.button');\nconst [ $value ] = utils.$('.value');\nconst shapes = utils.$('.shape');\nconst [ $triangle, $square, $circle ] = shapes;\n\nlet paused = 0;\nlet alternate = 0;\nlet tl;\n\nconst animateShapes = () => {\n  alternate = !alternate;\n  const x = (alternate ? 15 : 0) + 'rem';\n  const rotate = (alternate ? 360 : -360);\n  tl = createTimeline({\n    defaults: { duration: 2000 },\n    onPause: () => $value.textContent = ++paused\n  })\n  .add($circle, { x }, 0)\n  .add($triangle, { x }, 0)\n  .add($square, { x }, 0)\n  .add(shapes, { rotate }, 0);\n}\n\nconst pauseTL = () => {\n  if (tl) tl.pause();\n}\n\nconst removeTargets = () => {\n  utils.remove(shapes);\n}\n\nanimateShapes();\n\n$animateButton.addEventListener('click', animateShapes);\n$pauseButton.addEventListener('click', pauseTL);\n$removeButton.addEventListener('click', removeTargets);"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Implementing Draggable Elements with Custom Drag Speeds in Anime.js",
    "codeDescription": "This snippet demonstrates how to create draggable elements with different drag speeds using Anime.js. It shows two examples: one with increased speed and another with decreased speed.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsdragspeed.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Settings in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  dragSpeed: 2,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  dragSpeed: .5,\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Using the snap utility function for value rounding in anime.js",
    "codeDescription": "Demonstrates basic usage of the utils.snap function to round a number to the nearest increment or create a snapping function with a predefined increment parameter.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiessnap.md#2025-04-18_snippet_0",
    "pageTitle": "anime.js Snap Utility Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const snappedValue = utils.snap(value, increment);\nconst snapperFunction = utils.snap(increment);"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Adjusting Global Animation Speed with Anime.js in JavaScript",
    "codeDescription": "This code snippet demonstrates setting the global speed of all animations in Anime.js to half speed, using the engine.speed parameter. It requires the Anime.js library and features a simple import statement.",
    "codeLanguage": "JavaScript",
    "codeTokens": 71,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parametersspeed.md#2025-04-18_snippet_0",
    "pageTitle": "Configuring Animation Speed in Anime.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "engine.speed = 0.5; // Run all animations at half speed"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Using then() with createTimer in Anime.js",
    "codeDescription": "Demonstrates how to use the then() method with createTimer to execute a callback when the timer completes. This snippet shows both inline usage and async/await implementation.",
    "codeLanguage": "javascript",
    "codeTokens": 91,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksthen.md#2025-04-18_snippet_0",
    "pageTitle": "Timer Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "createTimer({duration: 500}).then(callback);\n\nasync function waitForTimerToComplete() {\n  return createTimer({ duration: 250 })\n}\n\nconst asyncTimer = await waitForTimerToComplete();"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Creating a Timeline with Delay in Anime.js",
    "codeDescription": "Demonstrates creating a timeline with a 2000ms delay and adding sequential animations for different elements. Also includes a timer function to log the delayed time.",
    "codeLanguage": "javascript",
    "codeTokens": 175,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsdelay.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Timeline Playback Settings - Delay",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, createTimer, utils } from 'animejs';\n\nconst tl = createTimeline({\n  delay: 2000,\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '-=500')\n.add('.square', { x: '15rem' }, '-=500');\n\n// For logging delayed time only\n\nconst [ $time ] = utils.$('.time');\n\ncreateTimer({\n  duration: 2000 + tl.duration,\n  onUpdate: self => $time.innerHTML = (2000 - self.currentTime) * -1,\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "HTML Structure for Anime.js play() Method Demo",
    "codeDescription": "This HTML snippet defines the structure for demonstrating the play() method. It includes multiple rows with square elements that will be animated, and a control section with a play button that triggers the animation.",
    "codeLanguage": "html",
    "codeTokens": 126,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsplay.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Animation Methods: play()",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button play\">Play</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Configuring Draggable Component with Axes Parameters in AnimeJS",
    "codeDescription": "This snippet demonstrates how to create a draggable element with specific configurations for x and y axes. It shows how to set different snap values for each axis, apply a modifier function, set container padding, adjust release animations, and handle events.",
    "codeLanguage": "javascript",
    "codeTokens": 148,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parameters.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Draggable Library Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "createDraggable('.square', {\n  x: { snap: 100 },\n  y: { snap: 50 },\n  modifier: utils.wrap(-200, 0),\n  containerPadding: 10,\n  releaseStiffness: 40,\n  releaseEase: 'out(3)',\n  onGrab: () => {},\n  onDrag: () => {},\n  onRelease: () => {},\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Creating HTML Structure for Animation and Speed Control",
    "codeDescription": "This HTML snippet provides the structure for displaying the animated circle, speed value, and range input for controlling the animation speed. It works in conjunction with the JavaScript code to create an interactive animation speed control interface.",
    "codeLanguage": "html",
    "codeTokens": 162,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiessync.md#2025-04-18_snippet_1",
    "pageTitle": "Synchronizing Animation Speed with Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">speed</span>\n    <span class=\"speed value\">1.00</span>\n  </pre>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=5 value=1 step=.01 class=\"range\" />\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Initializing Anime.js Scope",
    "codeDescription": "This code snippet initializes an Anime.js scope using the `createScope` function. It configures the scope with a root element selector, default animation properties (duration and easing), and media queries. The media queries are defined for mobile devices and reduced motion preference.",
    "codeLanguage": "javascript",
    "codeTokens": 211,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-parameters.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Scope Configuration",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createScope, animate } from 'animejs';\n\ncreateScope({\n  root: '.section',\n  defaults: {\n    duration: 250,\n    ease: 'out(4)',\n  },\n  mediaQueries: {\n    mobile: '(max-width: 640px)',\n    reducedMotion: '(prefers-reduced-motion)',\n  }\n})\n.add( ctx => {\n  const isMobile = ctx.matches.mobile;\n  const reduceMotion = ctx.matches.reducedMotion;\n  animate(targets, {\n    x: isMobile ? 0 : '100vw',\n    y: isMobile ? '100vh' : 0,\n    duration: reduceMotion ? 0 : 750\n  });\n});"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Creating and Controlling Timeline with Dynamic Framerate in Anime.js",
    "codeDescription": "This code creates an Anime.js timeline with an initial framerate of 60 fps and sets up event listeners to dynamically update the framerate based on user input. It animates multiple elements and allows real-time adjustment of the animation speed.",
    "codeLanguage": "javascript",
    "codeTokens": 206,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsframerate.md#2025-04-18_snippet_1",
    "pageTitle": "Timeline Playback Settings: Framerate in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $fps ] = utils.$('.fps');\n\nconst tl = createTimeline({\n  frameRate: 60,\n  loop: true,\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '-=500')\n.add('.square', { x: '15rem' }, '-=500');\n\nconst updateFps = () => {\n  const { value } = $range;\n  $fps.innerHTML = value;\n  tl.fps = value;\n}\n\n$range.addEventListener('input', updateFps);"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "HTML Structure for Animation Demo",
    "codeDescription": "HTML markup for the animation demo interface, including display elements for duration value, animated squares, and a range input control for adjusting the animation duration.",
    "codeLanguage": "html",
    "codeTokens": 166,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsstretch.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Stretching Methods in Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<pre class=\"large log row\">\n  <span class=\"label\">total duration</span>\n  <span class=\"value\">0</span>\n</pre>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium centered row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=100 max=2000 value=1000 step=100 class=\"seek range\" />\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.923
  },
  {
    "codeTitle": "Implementing Draggable onSnap Callback in AnimeJS",
    "codeDescription": "Creates a draggable element with snap functionality and a callback to count snap events. The code demonstrates how to use createDraggable with snap settings and update a counter display when snap events occur.",
    "codeLanguage": "javascript",
    "codeTokens": 137,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonsnap.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Draggable Callbacks Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet snaps = 0;\n\ncreateDraggable('.square', {\n  container: '.grid',\n  snap: 16,\n  modifier: utils.snap(16), // also snap the element while draggin\n  onSnap: () => $value.textContent = ++snaps\n});"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Creating Timeline with onBegin Callback in AnimeJS",
    "codeDescription": "Demonstrates creating a timeline with a custom onBegin callback that updates DOM content. The timeline includes multiple animations with a 1000ms delay before the callback executes.",
    "codeLanguage": "javascript",
    "codeTokens": 153,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonbegin.md#2025-04-18_snippet_1",
    "pageTitle": "Timeline Callbacks Documentation - AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nconst tl = createTimeline({\n  delay: 1000, // Delays the onBegin() callback by 1000ms\n  onBegin: self => $value.textContent = self.began\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' })\n.add('.square', { x: '15rem' });"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "HTML Structure for Draggable Element in Anime.js",
    "codeDescription": "This HTML snippet shows the required DOM structure for implementing a draggable element. It includes a container with the 'grid' and 'square-grid' classes, and the draggable element with 'square' and 'draggable' classes.",
    "codeLanguage": "html",
    "codeTokens": 86,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parameterssnap.md#2025-04-18_snippet_1",
    "pageTitle": "Draggable Axes Parameters in Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large grid square-grid\">\n  <div class=\"square draggable\"></div>\n</div>"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Implementing Timer Loop Counter with AnimeJS",
    "codeDescription": "Creates a timer with loop functionality that updates UI elements showing the loop count and current iteration time. Uses utility functions for DOM selection and implements both onLoop and onUpdate callbacks.",
    "codeLanguage": "javascript",
    "codeTokens": 136,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonloop.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Timer Callbacks Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $loops ] = utils.$('.loops');\nconst [ $time ] = utils.$('.time');\n\nlet loops = 0;\n\ncreateTimer({\n  loop: true,\n  duration: 1000,\n  onLoop: self => $loops.innerHTML = ++loops,\n  onUpdate: self => $time.innerHTML = self.iterationCurrentTime,\n});"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Animating Elements on Scroll with Enter Callback - Anime.js - JavaScript",
    "codeDescription": "This snippet sets up an animation on a '.square' element that triggers when the user scrolls backward and meets a specified threshold. It updates a value displayed on the screen each time the enter threshold is met. The animation utilizes the onScroll method from the Anime.js library and requires the library to be imported. The key parameters include 'container' for the scrolling element and 'enter' defining the point where the callback is triggered.",
    "codeLanguage": "JavaScript",
    "codeTokens": 222,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonenterbackward.md#2025-04-18_snippet_0",
    "pageTitle": "Animating Elements on Scroll - Anime.js - JavaScript",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { animate, onScroll, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet entered = 0;\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: true,\n    debug: true,\n    onEnterBackward: () => $value.textContent = ++entered,\n  })\n});"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Applying Random Values to AnimeJS Animations",
    "codeDescription": "Example showing how to use random utility to set dynamic properties for animation, including position, rotation, and scale transformations.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrandom.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Random Utility Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { utils } from 'animejs';\n\nutils.set('.square', {\n  x: () => utils.random(2, 18, 2) + 'rem',\n  rotate: () => utils.random(0, 180),\n  scale: () => utils.random(.25, 1.5, 3),\n});"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Creating Rotatable Clock Animation with Radians in AnimeJS",
    "codeDescription": "Demonstrates how to create an interactive clock animation using AnimeJS with radians as the rotation unit. The code tracks mouse movement to rotate a clock element, calculating angles using Math.atan2 and handling angle transitions across the full rotation range.",
    "codeLanguage": "javascript",
    "codeTokens": 317,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settingsunit.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Animatable Settings Documentation - Unit Property",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createAnimatable, utils } from 'animejs';\n\nconst $demos = document.querySelector('#docs-demos');\nconst [ $clock ] = utils.$('.clock');\nlet bounds = $clock.getBoundingClientRect();\nconst refreshBounds = () => bounds = $clock.getBoundingClientRect();\n\nconst clock = createAnimatable($clock, {\n  rotate: { unit: 'rad' }, // Set the unit to 'rad'\n  duration: 400,\n});\n\nconst { PI } = Math;\nlet lastAngle = 0\nlet angle = PI / 2;\n\nconst onMouseMove = e => {\n  const { width, height, left, top } = bounds;\n  const x = e.clientX - left - width / 2;\n  const y = e.clientY - top - height / 2;\n  const currentAngle = Math.atan2(y, x);\n  const diff = currentAngle - lastAngle;\n  angle += diff > PI ? diff - 2 * PI : diff < -PI ? diff + 2 * PI : diff;\n  lastAngle = currentAngle;\n  clock.rotate(angle); // Pass the new angle value in rad\n}\n\nwindow.addEventListener('mousemove', onMouseMove);\n$demos.addEventListener('scroll', refreshBounds);"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Basic Interpolation in JavaScript using Anime.js",
    "codeDescription": "Demonstrates how to use the interpolate utility function to calculate a value between two numbers based on a progress value. It also shows how to create an interpolation function for repeated use.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesinterpolate.md#2025-04-18_snippet_0",
    "pageTitle": "Interpolate Utility in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const interpolatedValue = utils.interpolate(start, end, progress);\nconst interpolatorFunction = utils.interpolate(start, end);"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Animating Elements with ScrollObserver in JavaScript",
    "codeDescription": "The snippet demonstrates how to configure the ScrollObserver settings in animejs to animate elements when they enter or leave the viewport. Dependencies include the animejs library, and key parameters include container and target for the element selection, as well as axis for defining the scroll direction. The onEnter, onLeave, and onUpdate functions are used as hooks for respective scroll events.",
    "codeLanguage": "JavaScript",
    "codeTokens": 206,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settings.md#2025-04-18_snippet_0",
    "pageTitle": "Configuring ScrollObserver in animejs",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "animate('.square', {\n  x: 100,\n  autoplay: onScroll({\n  ┌───────────────────────────────────────┌\n  │ container: '.container', │\n  │ target: '.section',      ├─ Settings\n  │ axis: 'y',               │\n  └──────────────────────────────────────────┌\n    enter: 'bottom top',\n    leave: 'top bottom',\n    sync: true,\n    onEnter: () => {},\n    onLeave: () => {},\n    onUpdate: () => {},\n  })\n});"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Initializing Draggable with Velocity Multiplier",
    "codeDescription": "This code snippet demonstrates how to initialize the Anime.js draggable functionality with the `velocityMultiplier` setting.  It shows examples using both a static number (0 and 5) to control the post-release velocity of the dragged elements within a specified container.",
    "codeLanguage": "javascript",
    "codeTokens": 122,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsvelocitymultiplier.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Draggable Velocity Multiplier",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  velocityMultiplier: 0,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  velocityMultiplier: 5,\n});"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Configuring Draggable Axis Mapping with Anime.js",
    "codeDescription": "Demonstrates how to create a draggable element with custom axis mapping. The x-axis movement is mapped to rotateY transformation and y-axis movement is mapped to z-index positioning. Includes initial setup of z-index using utils.set().",
    "codeLanguage": "javascript",
    "codeTokens": 118,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parametersmapto.md#2025-04-18_snippet_0",
    "pageTitle": "Animejs Draggable Axes Parameters Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable, utils } from 'animejs';\n\nutils.set('.square', { z: 100 });\n\ncreateDraggable('.square', {\n  x: { mapTo: 'rotateY' },\n  y: { mapTo: 'z' },\n});"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Setting Default Timer Loop Callback in AnimeJS",
    "codeDescription": "Shows how to globally configure the default onLoop callback by updating the engine defaults. The callback receives the timer instance as an argument.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonloop.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Timer Callbacks Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.onLoop = self => console.log(self.id);"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Advanced Random Pick Implementation - JavaScript",
    "codeDescription": "Shows how to use randomPick with AnimeJS utils.set() to randomly assign various properties including position, scale, color, and content to elements with the 'letter' class.",
    "codeLanguage": "javascript",
    "codeTokens": 156,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrandom-pick.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Random Pick Utility Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { utils } from 'animejs';\n\nutils.set('.letter', {\n  x: () => utils.randomPick([5, 9, 13, 17]) + 'rem',\n  scale: () => utils.randomPick([1, 1.25, 1.5, 1.75]),\n  color: () => `var(--hex-${utils.randomPick(['red', 'orange', 'yellow'])})`,\n  innerHTML: () => utils.randomPick('ABCD'),\n});"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Implementing Timeline Completion with Anime.js in JavaScript",
    "codeDescription": "This snippet demonstrates how to create a timeline using Anime.js, add animations to it, and implement a function to complete the timeline instantly. It also shows how to attach this function to a button click event.",
    "codeLanguage": "javascript",
    "codeTokens": 158,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodscomplete.md#2025-04-18_snippet_0",
    "pageTitle": "Timeline Methods in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $completeButton ] = utils.$('.complete');\n\nconst tl = createTimeline({\n  loop: true,\n})\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst completeTimeline = () => tl.complete();\n\n$completeButton.addEventListener('click', completeTimeline);"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "HTML Structure for Composition Mode Demonstration in Anime.js",
    "codeDescription": "This HTML structure creates a layout for demonstrating three different composition modes in Anime.js. It contains three squares with class names corresponding to their composition modes ('none', 'replace', and 'blend') and instructions for user interaction.",
    "codeLanguage": "html",
    "codeTokens": 251,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parameterscomposition.md#2025-04-18_snippet_2",
    "pageTitle": "Anime.js Animation Composition Modes",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large spaced-evenly row\">\n  <div class=\"col\">\n    <div class=\"centered row\">\n      <span class=\"label centered\">none<br><br></span>\n      <div class=\"square none\"></div>\n    </div>\n  </div>\n  <div class=\"col\">\n    <div class=\"centered row\">\n      <span class=\"label centered\">replace<br><br></span>\n      <div class=\"square replace\"></div>\n    </div>\n  </div>\n  <div class=\"col\">\n    <div class=\"centered row\">\n      <span class=\"label centered\">blend<br><br></span>\n      <div class=\"square blend\"></div>\n    </div>\n  </div>\n</div>\n\n<div class=\"medium spaced-evenly centered row\">\n  <div class=\"label\"><br><br>(Hover the squares)</div>\n</div>"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Setting Global Default Composition Mode in Anime.js",
    "codeDescription": "This snippet demonstrates how to change the default composition mode globally for all animations by updating the engine.defaults object in Anime.js.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parameterscomposition.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Animation Composition Modes",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.composition = 'blend';"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Creating Timers with onBegin Callback",
    "codeDescription": "Shows how to create timers with custom onBegin callbacks and update DOM elements. Creates two timers: one with an onBegin callback to update status, and another to track and display the current time.",
    "codeLanguage": "javascript",
    "codeTokens": 153,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonbegin.md#2025-04-18_snippet_1",
    "pageTitle": "Timer Callbacks Documentation for AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $status ] = utils.$('.status');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  delay: 2000,\n  duration: 2000,\n  onBegin: self => $status.innerHTML = 'true'\n});\n\nconst logTimer = createTimer({\n  duration: 4000,\n  onUpdate: self => $time.innerHTML = timer.currentTime\n});"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Implementing Mouse-tracking Animation with Revert Functionality - JavaScript",
    "codeDescription": "Creates an interactive animation where circles follow mouse movement with staggered positioning. Includes functionality to revert the animation using a button click and handles cleanup of event listeners.",
    "codeLanguage": "javascript",
    "codeTokens": 302,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-methodsrevert.md#2025-04-18_snippet_0",
    "pageTitle": "Animatable Methods Documentation - AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "const $demos = document.querySelector('#docs-demos');\nconst $demo = $demos.querySelector('.docs-demo.is-active');\nconst [ $revertButton ] = utils.$('.revert');\nlet bounds = $demo.getBoundingClientRect();\nconst refreshBounds = () => bounds = $demo.getBoundingClientRect();\n\nconst circles = createAnimatable('.circle', {\n  x: stagger(50, { from: 'center', start: 100 }),\n  y: stagger(200, { from: 'center', start: 200 }),\n  ease: 'out(4)',\n});\n\nconst onMouseMove = e => {\n  const { width, height, left, top } = bounds;\n  const hw = width / 2;\n  const hh = height / 2;\n  const x = utils.clamp(e.clientX - left - hw, -hw, hw);\n  const y = utils.clamp(e.clientY - top - hh, -hh, hh);\n  circles.x(x).y(y);\n}\n\nconst revertAnimatable = () => {\n  window.removeEventListener('mousemove', onMouseMove);\n  circles.revert();\n}\n\n$revertButton.addEventListener('click', revertAnimatable);\nwindow.addEventListener('mousemove', onMouseMove);\n$demos.addEventListener('scroll', refreshBounds);"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Implementing Animation Pause Functionality with Anime.js in JavaScript",
    "codeDescription": "This code demonstrates how to create and pause an animation using Anime.js. It creates an animation that moves squares along the x-axis with staggered delays, and adds a pause button event listener to control the animation.",
    "codeLanguage": "javascript",
    "codeTokens": 147,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodspause.md#2025-04-18_snippet_0",
    "pageTitle": "Animation Methods: Pause in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils, stagger } from 'animejs';\n\nconst [ $pauseButton ] = utils.$('.pause');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  alternate: true,\n  ease: 'inOutSine',\n  loop: true,\n  delay: stagger(100),\n});\n\nconst pauseAnimation = () => animation.pause();\n\n$pauseButton.addEventListener('click', pauseAnimation);"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Creating Draggable Elements with Scroll Speed - JavaScript",
    "codeDescription": "This code snippet demonstrates how to initialize a draggable square element with a specified scrolling speed within a designated container using the Anime.js library. The scroll speed is adjustable through a numerical value or a refreshable function.",
    "codeLanguage": "JavaScript",
    "codeTokens": 93,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsscrollspeed.md#2025-04-18_snippet_0",
    "pageTitle": "Creating Draggable Elements in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.scroll-container',\n  scrollSpeed: 2,\n});"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "HTML Structure for Draggable Element",
    "codeDescription": "Defines the HTML structure required for the draggable functionality, including a container grid, a counter display, and the draggable square element.",
    "codeLanguage": "html",
    "codeTokens": 103,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonsettle.md#2025-04-18_snippet_1",
    "pageTitle": "Draggable Callbacks Documentation in Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large padded grid square-grid\">\n  <pre class=\"large log row\">\n    <span class=\"label\">stops</span>\n    <span class=\"value\">0</span>\n  </pre>\n  <div class=\"square draggable\"></div>\n</div>"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Applying Different Modifiers in AnimeJS Animations",
    "codeDescription": "Demonstrates how to apply different modifiers to animations, including using utility functions and custom modifiers. Shows modifiers applied both globally to an animation and to specific properties.",
    "codeLanguage": "javascript",
    "codeTokens": 200,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersmodifier.md#2025-04-18_snippet_1",
    "pageTitle": "Using Modifiers in AnimeJS Animation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nanimate('.row:nth-child(1) .square', {\n  x: '17rem',\n  modifier: utils.round(0), // Round to 0 decimals\n  duration: 4000,\n});\n\nanimate('.row:nth-child(2) .square', {\n  x: '85rem',\n  modifier: v => v % 17,\n  duration: 4000,\n});\n\nanimate('.row:nth-child(3) .square', {\n  x: '17rem',\n  y: {\n    to: '70rem',\n    modifier: v => Math.cos(v) / 2, // Specific modifier to y property\n  },\n  duration: 4000,\n});"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Creating Looped Timer with Counter Display",
    "codeDescription": "Creates a timer that loops indefinitely, updates a loop counter, and displays the current iteration time. Uses utility functions for DOM selection and implements loop and update callbacks.",
    "codeLanguage": "javascript",
    "codeTokens": 133,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsloop.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Timer Loop Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $loops ] = utils.$('.loops');\nconst [ $time ] = utils.$('.time');\n\nlet loops = 0;\n\ncreateTimer({\n  loop: true,\n  duration: 1000,\n  onLoop: () => $loops.innerHTML = ++loops,\n  onUpdate: self => $time.innerHTML = self.iterationCurrentTime\n});"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Animating Multiple Properties with Default Units in Anime.js WAAPI",
    "codeDescription": "This example demonstrates animating multiple properties of an element using Anime.js WAAPI. It animates opacity, x-position, rotation, width, and height, relying on default units for numeric values.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apidefault-units.md#2025-04-18_snippet_2",
    "pageTitle": "Improvements to Web Animation API in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { waapi } from 'animejs';\n\nwaapi.animate('.square', {\n  opacity: .5,\n  x: 250,\n  rotate: 45,\n  width: 40,\n  height: 40,\n});"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Initializing ScrollObserver Instance",
    "codeDescription": "Creates a ScrollObserver instance using the onScroll() function, which allows tracking and controlling scroll-related animations and interactions",
    "codeLanguage": "javascript",
    "codeTokens": 47,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-methods.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js ScrollObserver Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "const scrollObserver = onScroll(parameters);"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Basic MapRange Usage in JavaScript",
    "codeDescription": "Demonstrates the basic usage of mapRange utility function to map a value from one range to another.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesmap-range.md#2025-04-18_snippet_0",
    "pageTitle": "Utilities Documentation - Map Range Function in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "const mappedValue = utils.mapRange(value, fromLow, fromHigh, toLow, toHigh);\nconst mapperFunction = utils.mapRange(fromLow, fromHigh, toLow, toHigh);"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Animating with clamp utility in Anime.js",
    "codeDescription": "Shows how to use the clamp utility in animation settings. It compares a normal animation with a clamped animation using the clamp function as a modifier.",
    "codeLanguage": "javascript",
    "codeTokens": 140,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesclamp.md#2025-04-18_snippet_1",
    "pageTitle": "Clamp Utility in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nanimate('.normal', {\n  rotate: '1turn',\n  duration: 3000,\n  loop: true,\n  ease: 'inOut',\n});\n\nanimate('.clamped', {\n  rotate: '1turn',\n  modifier: utils.clamp(.25, .75), // Used as a function\n  duration: 3000,\n  loop: true,\n  ease: 'inOut',\n});"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Setting Global Autoplay Default in Anime.js",
    "codeDescription": "Shows how to change the default autoplay parameter value globally by updating the engine.defaults object in Anime.js.",
    "codeLanguage": "javascript",
    "codeTokens": 54,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsautoplay.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timer Autoplay Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.autoplay = false;"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Implementing onSettle Callback with Anime.js Draggable",
    "codeDescription": "Demonstrates how to create a draggable element with an onSettle callback that counts and displays the number of times the element has stopped moving. The callback is triggered when the dragged element comes to a complete stop after being released.",
    "codeLanguage": "javascript",
    "codeTokens": 123,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonsettle.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Callbacks Documentation in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet stops = 0;\n\ncreateDraggable('.square', {\n  container: '.grid',\n  onSettle: () => $value.textContent = ++stops\n});"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Implementing Staggered Animation with Custom Easing",
    "codeDescription": "Example showing how to create a staggered animation with a custom power-based easing function. This snippet imports the required modules and animates multiple elements with a 100ms delay between each animation.",
    "codeLanguage": "javascript",
    "codeTokens": 101,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapieasing.md#2025-04-18_snippet_2",
    "pageTitle": "Easing in Anime.js Web Animation API",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { waapi, stagger } from 'animejs';\n\nwaapi.animate('.square', {\n  translate: '17rem',\n  ease: 'inOut(6)',\n  delay: stagger(100)\n});"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Animation with onPause Callback Implementation in Anime.js",
    "codeDescription": "Complete example showing how to implement the onPause callback in an animation. This creates an animation that moves a circle element horizontally while incrementing a counter each time the animation is paused via buttons or target removal.",
    "codeLanguage": "javascript",
    "codeTokens": 250,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonpause.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nconst [ $animateButton, $pauseButton, $removeButton ] = utils.$('.button');\nconst [ $value ] = utils.$('.value');\nconst [ $circle ] = utils.$('.circle');\n\nlet paused = 0;\nlet alternate = 0;\nlet animation;\n\nconst animateX = () => {\n  alternate = !alternate;\n  animation = animate($circle, {\n    x: () => (alternate ? 16 : 0) + 'rem',\n    duration: 2000,\n    onPause: () => $value.innerHTML = ++paused,\n  });\n}\n\nconst pauseAnimation = () => {\n  if (animation) animation.pause();\n}\n\nconst removeTarget = () => {\n  utils.remove($circle);\n}\n\nanimateX();\n\n$animateButton.addEventListener('click', animateX);\n$pauseButton.addEventListener('click', pauseAnimation);\n$removeButton.addEventListener('click', removeTarget);"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Linking an Animation with ScrollObserver in animejs",
    "codeDescription": "This JavaScript snippet demonstrates how to create an animation using the animejs library and link it to a ScrollObserver instance. The ScrollObserver watches scroll events in a specified container and updates the animation accordingly. Dependencies include the animejs library imported using named imports. The main parameters include the target element for animation and scroll-related configuration in the onScroll function. The snippet assumes the presence of elements matching class selectors within an HTML structure.",
    "codeLanguage": "JavaScript",
    "codeTokens": 194,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-methodslink.md#2025-04-18_snippet_0",
    "pageTitle": "Linking Animation to ScrollObserver with animejs",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { animate, onScroll } from 'animejs';\n\nconst animation = animate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n});\n\nconst scrollObserver = onScroll({\n  container: '.scroll-container',\n  enter: 'bottom-=50 top',\n  leave: 'top+=60 bottom',\n  sync: true,\n  debug: true,\n});\n\nscrollObserver.link(animation);"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Setting Global Loop Delay in AnimeJS",
    "codeDescription": "Demonstrates how to set the default loop delay globally for all animations using the engine.defaults object.",
    "codeLanguage": "javascript",
    "codeTokens": 57,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsplayback-loopdelay.md#2025-04-18_snippet_0",
    "pageTitle": "Animation Playback Settings - Loop Delay in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.loopDelay = 500;"
      }
    ],
    "relevance": 0.913
  },
  {
    "codeTitle": "Practical Animation Example Using radToDeg in Anime.js",
    "codeDescription": "Demonstrates a practical application of the radToDeg utility in an animation context. Creates two clock elements, one rotating in radians and the other in degrees, showing their synchronized rotation.",
    "codeLanguage": "javascript",
    "codeTokens": 177,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrad-to-deg.md#2025-04-18_snippet_2",
    "pageTitle": "Anime.js radToDeg Utility Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, createAnimatable, utils } from 'animejs';\n\nconst degAnimatable = createAnimatable('.deg', {\n  rotate: { unit: 'deg', duration: 0 }\n});\n\nconst [ $rad ] = utils.$('.rad');\n\nconst degAnimation = animate($rad, {\n  rotate: (Math.PI * 2) + 'rad',\n  ease: 'linear',\n  loop: true,\n  onUpdate: () => {\n    const radians = utils.get($rad, 'rotate', false);\n    degAnimatable.rotate(utils.radToDeg(radians));\n  }\n});"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Implementing Draggable Revert Method with AnimeJS",
    "codeDescription": "Demonstrates how to create a draggable element and implement revert functionality using AnimeJS. The code creates a draggable square element with buttons to revert it to its initial position and enable dragging.",
    "codeLanguage": "javascript",
    "codeTokens": 147,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsrevert.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Methods Documentation for AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable, utils } from 'animejs';\n\nconst [ $revertButton ] = utils.$('.revert');\nconst [ $enableButton ] = utils.$('.enable');\n\nconst draggable = createDraggable('.square');\n\nconst revertDraggable = () => draggable.revert();\nconst enableDraggable = () => draggable.enable();\n\n$revertButton.addEventListener('click', revertDraggable);\n$enableButton.addEventListener('click', enableDraggable);"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Accessing Draggable Properties in JavaScript with AnimeJS",
    "codeDescription": "This snippet shows how to access various properties of a draggable instance, such as progressX, progressY, and velocity. These properties provide information about the current state of the draggable element.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-properties.md#2025-04-18_snippet_1",
    "pageTitle": "Draggable Properties Documentation for AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "draggable.progressX\ndraggable.progressY\ndraggable.velocity"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Configuring Draggable Container Padding in Anime.js",
    "codeDescription": "This snippet demonstrates how to create a draggable element with custom container padding using Anime.js. It sets up a draggable square within a grid container, specifying different padding values for each side.",
    "codeLanguage": "javascript",
    "codeTokens": 114,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingscontainerpadding.md#2025-04-18_snippet_0",
    "pageTitle": "Configuring Draggable Settings in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  containerPadding: [ 16, 32, -16, 64], // top, right, bottom, left\n  scrollThreshold: 0,\n});"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Creating a Scoped Animation in Anime.js using JavaScript",
    "codeDescription": "This snippet demonstrates how to use the `createScope` function from Anime.js to limit queries to a particular DOM subtree, defined by a CSS selector or a DOM element. Dependencies include the Anime.js library, and key functionality involves initializing animations within a defined scope.",
    "codeLanguage": "javascript",
    "codeTokens": 127,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-parametersroot.md#2025-04-18_snippet_0",
    "pageTitle": "Using Scope in Anime.js for DOM Queries",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createScope, animate } from 'animejs';\n\ncreateScope({ root: '.row:nth-child(2)' })\n.add(() => {\n  animate('.square', {\n    x: '17rem',\n    loop: true,\n    alternate: true\n  });\n});"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Anime.js Scroll Animation with Numeric Thresholds",
    "codeDescription": "This JavaScript snippet uses Anime.js to create a scroll-triggered animation on an element with the class '.square'. The animation moves the element along the x-axis, rotates it, and sets its duration, easing, and loop properties.  The `onScroll` function is used to trigger the animation based on the scroll position of the element relative to the scroll container. The `enter` and `leave` properties define the scroll thresholds for triggering the animation.",
    "codeLanguage": "JavaScript",
    "codeTokens": 254,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholdsnumeric-values.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js ScrollObserver Thresholds with Numeric Values",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  ease: 'inOutQuad',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    // -48px from the top of the target, 80px from the top of the container \n    enter: '80 -48',\n    // 250% from the top of the target, 67.5% from the top of the container\n    leave: '67.5% 250%',\n    debug: true\n  })\n});"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Configuring Y-Axis Draggable Behavior with Anime.js",
    "codeDescription": "This snippet demonstrates how to create draggable elements with different y-axis configurations using Anime.js. It shows enabling and disabling vertical movement for square elements.",
    "codeLanguage": "javascript",
    "codeTokens": 88,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parametersy.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Y-Axis Configuration in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square.enabled', {\n  y: true\n});\n\ncreateDraggable('.square.disabled', {\n  y: false\n});"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Configuring X-axis Draggable Behavior in Anime.js",
    "codeDescription": "This example demonstrates how to enable or disable the x-axis dragging functionality using the 'createDraggable' function from Anime.js. It shows two implementations: one with x-axis enabled (default) and another with x-axis explicitly disabled.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parametersx.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Draggable Axes Parameters - X Parameter",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square.enabled', {\n  x: true\n});\n\ncreateDraggable('.square.disabled', {\n  x: false\n});"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Using Custom Easing with Anime.js WAAPI",
    "codeDescription": "Example demonstrating how to use the custom elastic easing function with Anime.js' WAAPI implementation. The ease parameter accepts an easing function and animates an element 100px horizontally.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapieasing.md#2025-04-18_snippet_0",
    "pageTitle": "Easing in Anime.js Web Animation API",
    "codeList": [
      {
        "language": "javascript",
        "code": "waapi.animate('.square', {\n  x: 100,\n  ease: eases.outElastic(1.25, .1)\n});"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Setting Global Default onLoop Callback in Anime.js",
    "codeDescription": "Shows how to change the default onLoop callback globally by updating the engine.defaults object. This example sets a function that logs the timeline's ID every time a loop completes.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonloop.md#2025-04-18_snippet_0",
    "pageTitle": "Timeline Callbacks - onLoop in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.onLoop = self => console.log(self.id);"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Defining draw property values",
    "codeDescription": "Examples of different draw property values that control how much of an SVG line is visible. The values range from 0 to 1, with pairs of numbers indicating the start and end points of visibility.",
    "codeLanguage": "javascript",
    "codeTokens": 162,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvgcreatedrawable.md#2025-04-18_snippet_1",
    "pageTitle": "anime.js SVG Drawing Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "drawable.draw = '0 1';      |[———————————————————]|\n\n                            0         .5\ndrawable.draw = '0 .5';     |[—————————]          |\n\n                                 .25       .75\ndrawable.draw = '.25 .75';  |     [—————————]     |\n\n                                      .5          1\ndrawable.draw = '.5 1';     |          [—————————]|\n\n                                                1 1\ndrawable.draw = '1 1';      |                   []|"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Implementing Animatable Methods in Anime.js",
    "codeDescription": "This code example shows a practical implementation of animatable methods in Anime.js. It creates an animatable circle element and uses methods to animate its position and background color based on mouse movement.",
    "codeLanguage": "javascript",
    "codeTokens": 357,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-methodssetters.md#2025-04-18_snippet_1",
    "pageTitle": "Animatable Methods in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createAnimatable, utils } from 'animejs';\n\nconst $demos = document.querySelector('#docs-demos');\nconst $demo = $demos.querySelector('.docs-demo.is-active');\nlet bounds = $demo.getBoundingClientRect();\nconst refreshBounds = () => bounds = $demo.getBoundingClientRect();\n\nconst circle = createAnimatable('.circle', {\n  x: 0,\n  y: 0,\n  backgroundColor: 0,\n  ease: 'outExpo',\n});\n\nconst rgb = [164, 255, 79];\n\n// Sets new durations and easings\ncircle.x(0, 500, 'out(2)');\ncircle.y(0, 500, 'out(3)');\ncircle.backgroundColor(rgb, 250);\n\nconst onMouseMove = e => {\n  const { width, height, left, top } = bounds;\n  const hw = width / 2;\n  const hh = height / 2;\n  const x = utils.clamp(e.clientX - left - hw, -hw, hw);\n  const y = utils.clamp(e.clientY - top - hh, -hh, hh);\n  rgb[0] = utils.mapRange(x, -hw, hw, 0, 164);\n  rgb[2] = utils.mapRange(x, -hw, hw, 79, 255);\n  circle.x(x).y(y).backgroundColor(rgb); // Update values\n}\n\nwindow.addEventListener('mousemove', onMouseMove);\n$demos.addEventListener('scroll', refreshBounds);"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "HTML Structure for Anime.js Timeline Demo",
    "codeDescription": "This HTML snippet defines the structure for demonstrating the restart() method. It includes shape elements (triangle, square, circle) that will be animated by the timeline, and a control button to trigger the restart function.",
    "codeLanguage": "html",
    "codeTokens": 142,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsrestart.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Timeline restart() Method Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button restart\">Restart</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Anime.js Scroll Animation with Relative Positions",
    "codeDescription": "This JavaScript snippet uses Anime.js to animate a '.square' element when it enters and leaves a specified scroll container. The 'onScroll' function is used to trigger the animation based on scroll position, and relative values are applied to the 'enter' and 'leave' thresholds to define when the animation should start and stop.",
    "codeLanguage": "javascript",
    "codeTokens": 185,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholdsrelative-position-values.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js ScrollObserver Relative Position Values",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  ease: 'inOutQuad',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'center+=1em top-=100%',\n    leave: 'center-=1em bottom+=100%',\n    debug: true\n  })\n});"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Animating Elements on Scroll using Anime.js - JavaScript",
    "codeDescription": "This snippet demonstrates how to use Anime.js to animate elements when specific scroll events occur. It uses `animate` and `onScroll` functions from the Anime.js library and configures various animation settings such as `enter`, `leave`, and `autoplay`. The snippet requires Anime.js and appropriate HTML structure for the scroll container and elements.",
    "codeLanguage": "JavaScript",
    "codeTokens": 249,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-methodsrefresh.md#2025-04-18_snippet_0",
    "pageTitle": "Managing Scroll Animations with Anime.js - JavaScript",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { animate, onScroll } from 'animejs';\n\nconst scrollSettings = {\n  enter: 20,\n  leave: 60,\n}\n\nconst animation = animate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: () => `bottom-=${scrollSettings.enter} top`,\n    leave: () => `top+=${scrollSettings.leave} bottom`,\n    sync: .5,\n    debug: true,\n  })\n});\n\nanimate(scrollSettings, {\n  enter: 90,\n  leave: 100,\n  loop: true,\n  alternate: true,\n  modifier: utils.round(0),\n  onUpdate: () => animation._autoplay.refresh()\n});"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Toggling Engine Pause Behavior",
    "codeDescription": "This snippet provides the functionality to toggle the 'pauseOnDocumentHidden' setting. It updates the engine's visibility behavior and modifies the button text accordingly to reflect the current state.",
    "codeLanguage": "JavaScript",
    "codeTokens": 152,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterspauseondocumenthidden.md#2025-04-18_snippet_2",
    "pageTitle": "Controlling Animation Engine Pause Behavior in Anime.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "const toggleSetting = () => {\n  const isPauseWhenHidden = engine.pauseOnDocumentHidden;\n  if (isPauseWhenHidden) {\n    engine.pauseOnDocumentHidden = false;\n    $toggle.innerHTML = '○ Disabled (Switch tab to see the effect)';\n  } else {\n    engine.pauseOnDocumentHidden = true;\n    $toggle.innerHTML = '● Enabled (Switch tab to see the effect)';\n  }\n}\n\n$toggle.addEventListener('click', toggleSetting);"
      }
    ],
    "relevance": 0.908
  },
  {
    "codeTitle": "HTML Structure for Anime.js onComplete Demo",
    "codeDescription": "Shows the HTML markup structure used for demonstrating the onComplete callback. It includes a div with class 'circle' that will be animated, and a pre element that displays the completion status of the animation.",
    "codeLanguage": "html",
    "codeTokens": 113,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksoncomplete.md#2025-04-18_snippet_2",
    "pageTitle": "Animation Callbacks: onComplete in Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">completed</span>\n    <span class=\"value\">false</span>\n  </pre>\n</div>"
      }
    ],
    "relevance": 0.908
  },
  {
    "codeTitle": "Animating Elements on Scroll Using Anime.js - JavaScript",
    "codeDescription": "This code snippet sets up a scrolling animation using the Anime.js library, where an 'onEnterForward' callback updates a counter indicating how many times the target element has entered the viewport.",
    "codeLanguage": "JavaScript",
    "codeTokens": 171,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonenterforward.md#2025-04-18_snippet_0",
    "pageTitle": "Using ScrollObserver Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, onScroll, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet entered = 0;\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: true,\n    debug: true,\n    onEnterForward: () => $value.textContent = ++entered,\n  })\n});"
      }
    ],
    "relevance": 0.908
  },
  {
    "codeTitle": "Anime.js ScrollObserver Thresholds Example",
    "codeDescription": "This code snippet demonstrates how to use ScrollObserver with custom enter and leave thresholds to control an animation. The animation is triggered when the bottom of the container meets the top of the target and when the top of the container meets the bottom of the target.",
    "codeLanguage": "javascript",
    "codeTokens": 176,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholds.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js ScrollObserver Thresholds",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.square', {\n  x: 100,\n  autoplay: onScroll({\n\n    container: '.container',\n    target: '.section',\n    axis: 'y',\n  ┬─────────────────────┐\n  │ enter: 'bottom top',     │─ Thresholds\n  │ leave: 'top bottom',     │\n  └─────────────────────┘\n    sync: true,\n    onEnter: () => {},\n    onLeave: () => {},\n    onUpdate: () => {},\n  })\n});"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Creating Animation Scopes with Anime.js in JavaScript",
    "codeDescription": "This JavaScript snippet demonstrates how to create custom scopes with Anime.js, setting default animation properties like easing. The snippet iterates through row elements and applies a specific animation to child '.square' elements. It requires 'animejs' for animation functions and an element selection utility method 'utils.$'.",
    "codeLanguage": "JavaScript",
    "codeTokens": 170,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-parametersdefaults.md#2025-04-18_snippet_0",
    "pageTitle": "Defining Scope Defaults for Animations in Anime.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { createScope, animate } from 'animejs';\n\nconst rows = utils.$('.row');\n\nrows.forEach(($row, i) => {\n  createScope({\n    root: $row,\n    defaults: { ease: `out(${1 + i})` }\n  })\n  .add(() => {\n    animate('.square', {\n      x: '17rem',\n      loop: true,\n      alternate: true\n    });\n  });\n});"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Animating with RGB Color Values in Anime.js",
    "codeDescription": "This example shows how to use RGB color values in Anime.js animations. It targets an element with the class 'rgb' and animates its background color to 'rgb(255, 168, 40)'.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-value.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Color Value Types Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.rgb',  {\n  background: 'rgb(255, 168, 40)',\n});"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Creating Draggable Elements with minVelocity in Anime.js",
    "codeDescription": "This snippet demonstrates how to create draggable elements using Anime.js with different minVelocity settings. It shows two examples: one with default minVelocity and another with a custom value.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsminvelocity.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Draggable Settings: minVelocity",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  minVelocity: 0,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  minVelocity: 10,\n});"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Animating DOM Elements with AnimeJS",
    "codeDescription": "Demonstrates how to target and animate single and multiple DOM elements using AnimeJS. Shows scaling a single element and moving multiple elements horizontally using querySelector and querySelectorAll.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtargetsdom-elements.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS DOM Element Animation Targets Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nconst $demo = document.querySelector('#selector-demo');\nconst $squares = $demo.querySelectorAll('.square');\n\nanimate($demo, { scale: .75 });\nanimate($squares, { x: '23rem' });"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Implementing Shuffle Animation with Anime.js in JavaScript",
    "codeDescription": "Shows a practical implementation of the shuffle utility in combination with other Anime.js functions. It sets up event listeners and animates shuffled elements on button click.",
    "codeLanguage": "javascript",
    "codeTokens": 123,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesshuffle.md#2025-04-18_snippet_1",
    "pageTitle": "Shuffling Arrays with Anime.js Utils",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { utils } from 'animejs';\n\nconst [ $shuffle ] = utils.$('button');\nconst squares = utils.$('.square');\nconst x = stagger('3.2rem');\n\n// Initial squares x position\nutils.set(squares, { x });\n\nconst shuffle = () => animate(utils.shuffle(squares), { x });\n\n$shuffle.addEventListener('click', shuffle);"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Importing and Creating an AnimJS Timer in JavaScript",
    "codeDescription": "This snippet demonstrates how to import the createTimer function from AnimJS and create a new timer with optional parameters. The createTimer function returns a Timer object.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimer.md#2025-04-18_snippet_0",
    "pageTitle": "AnimJS Timer Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer } from 'animejs';\n\nconst timer = createTimer(parameters);"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Modifying Default onComplete Callback in Anime.js",
    "codeDescription": "This snippet shows how to change the default onComplete callback globally for all Anime.js timers. It imports the engine from Anime.js and sets a new default function that logs the timer's ID.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksoncomplete.md#2025-04-18_snippet_0",
    "pageTitle": "Timer Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.onComplete = self => console.log(self.id);"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Animating with Anime.js WAAPI Module",
    "codeDescription": "Demonstrates the simplified syntax for animating an element using Anime.js WAAPI module. It applies a translation of 100 pixels to an element with the class 'circle'.",
    "codeLanguage": "javascript",
    "codeTokens": 70,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apisensible-defaults.md#2025-04-18_snippet_0",
    "pageTitle": "Improvements to Web Animation API in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "waapi.animate('.circle', { translate: '100px' });"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Creating Alternating Timer Animation with Loop Counter",
    "codeDescription": "Shows how to create a timer animation with alternating direction and loop counting functionality. Includes loop and update callbacks to display current iteration count and time.",
    "codeLanguage": "javascript",
    "codeTokens": 132,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsalternate.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Timer Playback Settings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nconst [ $loops ] = utils.$('.loops');\nconst [ $time ] = utils.$('.time');\n\nlet loops = 0;\n\ncreateTimer({\n  loop: true,\n  duration: 1000,\n  alternate: true,\n  onLoop: () => $loops.innerHTML = ++loops,\n  onUpdate: self => $time.innerHTML = self.iterationCurrentTime\n});"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Importing Anime.js utilities and functions",
    "codeDescription": "This snippet imports necessary functions and utilities from the Anime.js library, including `utils`, `stagger`, `createScope`, and `createTimeline`. These modules will be used to select elements, create animations with staggered delays, and manage animation scopes.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsrevert.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Scope Revert Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { utils, stagger, createScope, createTimeline } from 'animejs';"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "HTML Structure for Clock Animation Demo",
    "codeDescription": "The HTML markup for the clock animation example. It defines two clock elements with labels, structured in a responsive grid layout. Each clock will demonstrate a different modifier behavior when animated.",
    "codeLanguage": "html",
    "codeTokens": 137,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settingsmodifier.md#2025-04-18_snippet_1",
    "pageTitle": "Animatable Settings - Modifier Function in AnimeJS",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered row\">\n  <div class=\"col\">\n    <div class=\"clock clock-1\"></div>\n    <div class=\"label\">snapped</div>\n  </div>\n  <div class=\"col\">\n    <div class=\"clock clock-2\"></div>\n    <div class=\"label\">inverted</div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Creating a Timeline with Default Parameters in Anime.js",
    "codeDescription": "This example demonstrates how to create an Anime.js timeline with default parameters that will be applied to all animations within the timeline. The defaults include easing, duration, loop count, and direction settings.",
    "codeLanguage": "javascript",
    "codeTokens": 146,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsdefaults.md#2025-04-18_snippet_0",
    "pageTitle": "Timeline Playback Settings in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline } from 'animejs';\n\nconst tl = createTimeline({\n  defaults: {\n    ease: 'inOutExpo',\n    duration: 500,\n    loop: 2,\n    reversed: true,\n    alternate: true,\n  }\n})\n.add('.square', { x: '15rem' })\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' });"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "HTML Structure for Anime.js Animation Scopes",
    "codeDescription": "This HTML snippet provides the structure needed for applying the Anime.js animation. Each '.row' element contains a '.square' div that is the target for animations, demonstrating how multiple identical structures can use shared scope defaults for consistent animations.",
    "codeLanguage": "HTML",
    "codeTokens": 168,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-parametersdefaults.md#2025-04-18_snippet_1",
    "pageTitle": "Defining Scope Defaults for Animations in Anime.js",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">scope 1</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">scope 2</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">scope 3</div>\n</div>"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Animating with ScrollObserver using Position Shorthands - JavaScript",
    "codeDescription": "This JavaScript snippet demonstrates how to use Anime.js to animate a '.square' element based on scroll position within a '.scroll-container'.  The `onScroll` function is used to trigger the animation when the element enters or leaves the specified scroll positions (center top, center bottom).",
    "codeLanguage": "javascript",
    "codeTokens": 167,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholdspositions-shorthands.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js ScrollObserver Thresholds and Positions",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  ease: 'inOutQuad',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'center top',\n    leave: 'center bottom',\n    debug: true\n  })\n});"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Animating Multiple Targets with Anime.js",
    "codeDescription": "Example showing how to animate both a JavaScript object (vector2D) and a DOM element (.square) simultaneously. Uses utils.roundPad for number formatting and updates a log element with the current vector2D state.",
    "codeLanguage": "javascript",
    "codeTokens": 150,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtargetsarray-of-targets.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Array Targets Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nconst [ $log ] = utils.$('.demo code');\n\nconst vector2D = { x: 0, y: 0 };\n\nanimate([vector2D, '.square'], {\n  x: '17rem',\n  modifier: utils.roundPad(2).padStart(5, '0'),\n  onRender: () => $log.textContent = JSON.stringify(vector2D),\n});"
      }
    ],
    "relevance": 0.902
  },
  {
    "codeTitle": "Configuring Global Autoplay Default in Anime.js",
    "codeDescription": "Code snippet showing how to change the default autoplay setting globally for all timelines by updating the engine.defaults object in Anime.js.",
    "codeLanguage": "javascript",
    "codeTokens": 61,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsautoplay.md#2025-04-18_snippet_0",
    "pageTitle": "Timeline Playback Settings - Autoplay in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.autoplay = false;"
      }
    ],
    "relevance": 0.902
  },
  {
    "codeTitle": "Basic Utils.get() Function Signature",
    "codeDescription": "Shows the basic syntax for using utils.get() to retrieve a target's property value. The function accepts a target element, property name, and optional unit parameter.",
    "codeLanguage": "javascript",
    "codeTokens": 61,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesget.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Utils.get() Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const value = utils.get(target, property, unit);"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Pausing and Resuming Anime.js Engine",
    "codeDescription": "This JavaScript code pauses the Anime.js engine, displays a countdown on a button, and resumes the engine after the countdown. It uses `engine.pause()` to stop animations and `engine.resume()` to restart them. The `setInterval` function is used to manage the countdown and update the button text.",
    "codeLanguage": "javascript",
    "codeTokens": 354,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-methodspause.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Engine Pause and Resume Example",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine, animate, utils } from 'animejs';\n\nconst [ $container ] = utils.$('.container');\nconst [ $add, $pause ] = utils.$('button');\n\nfunction addAnimation() {\n  const $particle = document.createElement('div');\n  $particle.classList.add('particle');\n  $container.appendChild($particle);\n  animate($particle, {\n    x: utils.random(-10, 10, 2) + 'rem',\n    y: utils.random(-3, 3, 2) + 'rem',\n    scale: [{ from: 0, to: 1 }, { to: 0 }],\n    loop: true,\n  });\n}\n\nlet timeout = 3;\nlet interval;\n\nfunction pauseEngine() {\n  engine.pause();\n  $pause.setAttribute('disabled', 'true');\n  $pause.innerHTML = `Resume in ${timeout--} seconds`;\n  interval = setInterval(() => {\n    if (timeout <= 0) {\n      clearInterval(interval);\n      engine.resume();\n      $pause.removeAttribute('disabled');\n      $pause.innerHTML = 'Pause for 3 seconds';\n      timeout = 3;    \n    } else {\n      $pause.innerHTML = `Resume in ${timeout--} seconds`;\n    }\n  }, 1000);\n}\n\n$add.addEventListener('click', addAnimation);\n$pause.addEventListener('click', pauseEngine);"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Implementing Draggable Callbacks in Anime.js",
    "codeDescription": "Example showing how to create a draggable element with snap points, container constraints, and callback functions. The code demonstrates setting up x/y snap points, modifier functions, container padding, stiffness, and ease settings along with basic callback hooks.",
    "codeLanguage": "javascript",
    "codeTokens": 149,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacks.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Callbacks Documentation - Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "createDraggable('.square', {\n  x: { snap: 100 },\n  y: { snap: 50 },\n  modifier: utils.wrap(-200, 0),\n  containerPadding: 10,\n  containerStiffness: 40,\n  containerEase: 'out(3)',\n  onGrab: () => {},\n  onDrag: () => {},\n  onRelease: () => {},\n});"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Targeting Elements with AnimeJS CSS Selectors",
    "codeDescription": "Demonstrates different ways to target DOM elements using CSS selectors in AnimeJS animations. Shows examples of class, ID, and nth-child selectors with various animation properties.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtargetscss-selector.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS CSS Selector Targets Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate('.square', { x: '17rem' });\nanimate('#css-selector-id', { rotate: '1turn' });\nanimate('.row:nth-child(3) .square', { scale: [1, .5, 1] });"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Implementing onAfterResize Callback in AnimeJS Draggable",
    "codeDescription": "This snippet demonstrates how to use the onAfterResize callback in AnimeJS Draggable. It creates a draggable element and updates a counter each time the container or target sizes change. The callback also triggers an animation to bring the dragged element into view.",
    "codeLanguage": "javascript",
    "codeTokens": 146,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonafterresize.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Callbacks in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet resizes = 0;\n\nconst draggable = createDraggable('.square', {\n  container: '.grid',\n  onAfterResize: self => {\n    $value.textContent = ++resizes;\n    self.animateInView(1000, 30);\n  }\n});"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Setting Engine Pause Behavior",
    "codeDescription": "This snippet demonstrates how to configure the Anime.js engine to pause animations when the document is hidden. It sets the 'pauseOnDocumentHidden' property and outlines its effect on animation playback.",
    "codeLanguage": "JavaScript",
    "codeTokens": 66,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterspauseondocumenthidden.md#2025-04-18_snippet_0",
    "pageTitle": "Controlling Animation Engine Pause Behavior in Anime.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "engine.pauseOnDocumentHidden = true;"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Implementing Timer Restart Functionality with AnimeJS in JavaScript",
    "codeDescription": "This code snippet demonstrates how to create and restart a timer using AnimeJS. It sets up a timer that updates a time display and adds a click event listener to a restart button. The timer's current time is displayed and can be reset to 0 using the restart method.",
    "codeLanguage": "JavaScript",
    "codeTokens": 145,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsrestart.md#2025-04-18_snippet_0",
    "pageTitle": "Timer Methods in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $restartButton ] = utils.$('.restart');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  onUpdate: self => $time.innerHTML = self.currentTime\n});\n\nconst restartTimer = () => timer.restart();\n\n$restartButton.addEventListener('click', restartTimer);"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Creating Manual Timer Control with Anime.js",
    "codeDescription": "Demonstrates how to create a timer with autoplay disabled and manually play it using a button click event. The timer updates a time display on each update.",
    "codeLanguage": "javascript",
    "codeTokens": 114,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsautoplay.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Timer Autoplay Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const [ $time ] = utils.$('.time');\nconst [ $playButton ] = utils.$('.play');\n\nconst timer = createTimer({\n  autoplay: false,\n  onUpdate: self => $time.innerHTML = self.currentTime\n});\n\nconst playTimer = () => timer.play();\n\n$playButton.addEventListener('click', playTimer);"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Implementing Multiple Animations with Different Durations in AnimeJS",
    "codeDescription": "Example showing three animations with different durations (0ms, 500ms, and 2000ms). The first animation completes instantly, the second takes half a second, and the third takes two seconds to complete.",
    "codeLanguage": "javascript",
    "codeTokens": 136,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsduration.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Animation Playback Settings: Duration",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate('.dur-0', {\n  x: '17rem',\n  duration: 0,\n});\n\nanimate('.dur-500', {\n  x: '17rem',\n  duration: 500,\n});\n\nanimate('.dur-2000', {\n  x: '17rem',\n  duration: 2000\n});"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Initializing and Animating Circles with Anime.js",
    "codeDescription": "This snippet creates animatable circles and sets up mouse move event handling to animate their positions. It uses createAnimatable, stagger, and utility functions from Anime.js.",
    "codeLanguage": "javascript",
    "codeTokens": 270,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settingsduration.md#2025-04-18_snippet_0",
    "pageTitle": "Animatable Settings - Duration in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createAnimatable, utils, stagger } from 'animejs';\n\nconst $demos = document.querySelector('#docs-demos');\nconst $demo = $demos.querySelector('.docs-demo.is-active');\nlet bounds = $demo.getBoundingClientRect();\nconst refreshBounds = () => bounds = $demo.getBoundingClientRect();\n\nconst circles = createAnimatable('.circle', {\n  x: 0, // Imediatly set the value without animation\n  y: stagger(200, { from: 'center', start: 200 }),\n  ease: 'out(4)',\n});\n\nconst onMouseMove = e => {\n  const { width, height, left, top } = bounds;\n  const hw = width / 2;\n  const hh = height / 2;\n  const x = utils.clamp(e.clientX - left - hw, -hw, hw);\n  const y = utils.clamp(e.clientY - top - hh, -hh, hh);\n  circles.x(x).y(y);\n}\n\nwindow.addEventListener('mousemove', onMouseMove);\n$demos.addEventListener('scroll', refreshBounds);"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "HTML Structure for Anime.js Animation Demo",
    "codeDescription": "The HTML markup that structures the animation demo, containing the elements being animated (triangle, square, circle) and a counter display that shows the number of updates triggered by the onUpdate callback.",
    "codeLanguage": "html",
    "codeTokens": 139,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonupdate.md#2025-04-18_snippet_2",
    "pageTitle": "Anime.js Timeline onUpdate Callback Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">updates</span>\n    <span class=\"value\">0</span>\n  </pre>\n</div>"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Toggle Anime.js Time Unit Setting",
    "codeDescription": "This function `toggleSetting` toggles the Anime.js `engine.timeUnit` between seconds and milliseconds. It also disables the appropriate button based on the current time unit, enhancing user interface feedback.",
    "codeLanguage": "javascript",
    "codeTokens": 113,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterstimeunit-seconds-milliseconds.md#2025-04-18_snippet_3",
    "pageTitle": "Anime.js Engine Time Unit Configuration",
    "codeList": [
      {
        "language": "javascript",
        "code": "const toggleSetting = () => {\n  const isUsingSeconds = engine.timeUnit === 's';\n  engine.timeUnit = isUsingSeconds ? 'ms' : 's';\n  $ms.disabled = isUsingSeconds;\n  $s.disabled = !isUsingSeconds;\n}"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Set Anime.js Global Time Unit",
    "codeDescription": "This snippet shows how to globally change the time unit used by Anime.js to either seconds ('s') or milliseconds ('ms') using `engine.timeUnit`. The code also illustrates how the default duration is automatically adjusted to match the new time unit.",
    "codeLanguage": "javascript",
    "codeTokens": 95,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterstimeunit-seconds-milliseconds.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Engine Time Unit Configuration",
    "codeList": [
      {
        "language": "javascript",
        "code": "engine.timeUnit = 's'; // Change the time unit globally to seconds\nconsole.log(engine.engine.defaults.duration); // -> Returns 1"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "HTML Structure for Anime.js Staggered Animation",
    "codeDescription": "The HTML structure used for the staggered animation example, containing a pyramid of shapes (triangle, square, and circle) that will be animated with different timing delays.",
    "codeLanguage": "html",
    "codeTokens": 104,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggertimeline-positions-staggering.md#2025-04-18_snippet_1",
    "pageTitle": "Using Stagger Function in Anime.js Timeline Position Arguments",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.898
  },
  {
    "codeTitle": "Creating Anime.js Timeline with Stagger Effect",
    "codeDescription": "This code snippet demonstrates how to create an Anime.js timeline with a stagger effect using the `stagger` function. It imports `createtimeline` and `stagger` from the animejs library and defines a timeline with multiple animations, each applying a different 'from' value to the stagger function to control the starting point of the animation on a series of square elements.",
    "codeLanguage": "javascript",
    "codeTokens": 254,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-from.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Stagger Parameters Examples",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createtimeline, stagger } from 'animejs';\n\nconst tl = createTimeline({\n  loop: true,\n  alternate: true,\n})\n.add('.row:nth-child(1) .square', {\n  scale: 0,\n  delay: stagger(50, { from: 8 }),\n})\n.add('.row:nth-child(2) .square', {\n  scale: 0,\n  delay: stagger(50, { from: 'first' }),\n})\n.add('.row:nth-child(3) .square', {\n  scale: 0,\n  delay: stagger(50, { from: 'center' }),\n})\n.add('.row:nth-child(4) .square', {\n  scale: 0,\n  delay: stagger(50, { from: 'last' }),\n});"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Animating with Interpolation in JavaScript using Anime.js",
    "codeDescription": "Demonstrates how to use the interpolate utility within animation configurations. It shows two animations: one normal rotation and one using interpolation for rotation.",
    "codeLanguage": "javascript",
    "codeTokens": 154,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesinterpolate.md#2025-04-18_snippet_2",
    "pageTitle": "Interpolate Utility in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nanimate('.normal', {\n  rotate: '1turn',\n  duration: 3000,\n  loop: true,\n  ease: 'inOut',\n});\n\nanimate('.interpolated', {\n  rotate: '1turn',\n  modifier: utils.interpolate(0, 12), // Interpolates 0 to 12 by passing the rotate progress value 0 to 1\n  duration: 3000,\n  loop: true,\n  ease: 'inOut',\n});"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Using clamp utility in Anime.js",
    "codeDescription": "Demonstrates how to use the clamp utility function from Anime.js to restrict values or create a clamping function. It shows basic usage and chaining with other utilities.",
    "codeLanguage": "javascript",
    "codeTokens": 75,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesclamp.md#2025-04-18_snippet_0",
    "pageTitle": "Clamp Utility in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const clampedValue = utils.clamp(value, min, max);\nconst clamperFunction = utils.clamp(min, max);"
      },
      {
        "language": "javascript",
        "code": "const clampBetween0and100 = utils.clamp(0, 100);\nclampBetween0and100(90);  // 90\nclampBetween0and100(120); // 100\nclampBetween0and100(-15); // 0\n\nconst clampAndRound = utils.clamp(0, 100).round(2); // Clamp then round to 2 decimal places\nclampAndRound(72.7523); // 72.75\nclampAndRound(120.2514); // 100"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Import onScroll from Anime.js",
    "codeDescription": "Imports the `onScroll` function along with `animate` from the Anime.js library. The `onScroll` function is used to create a ScrollObserver, which triggers animations based on scroll position.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscroll.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Scroll Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { onScroll, animate } from 'animejs';"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Complete Anime.js Example with Promise Handling",
    "codeDescription": "A full example showing how to import Anime.js modules, create an animation with multiple options, and use the then() method to update UI text when the animation is fulfilled.",
    "codeLanguage": "javascript",
    "codeTokens": 119,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapifinished.md#2025-04-18_snippet_3",
    "pageTitle": "API Differences between Anime.js and Web Animation API",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { waapi, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nconst animation = waapi.animate('.circle', {\n  translate: '16rem',\n  loop: 2,\n  alternate: true,\n});\n\nanimation.then(() => $value.textContent = 'fulfilled');"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Enabling Draggable Elements with Anime.js in JavaScript",
    "codeDescription": "This code snippet demonstrates how to create a draggable element, disable it, and then enable it using a button click event. It utilizes the createDraggable and utils functions from the animejs library.",
    "codeLanguage": "javascript",
    "codeTokens": 118,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsenable.md#2025-04-18_snippet_0",
    "pageTitle": "Enabling Draggable Elements with Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable, utils } from 'animejs';\n\nconst [ $enableButton ] = utils.$('.enable');\n\nconst draggable = createDraggable('.square');\n\ndraggable.disable();\n\nconst enableDraggable = () => draggable.enable();\n\n$enableButton.addEventListener('click', enableDraggable);"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Creating Draggable Object in JavaScript",
    "codeDescription": "The snippet demonstrates how to create a Draggable object using 'createDraggable' function, detailing object initialization with target elements and parameters. This instance object 'draggable' allows managing its behavior via methods like 'disable', 'enable', and 'revert'. Requires anime.js library version 4.0.0 or higher.",
    "codeLanguage": "JavaScript",
    "codeTokens": 92,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methods.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Methods Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "const draggable = createDraggable(target, parameters);"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Setting Global Default Duration in AnimeJS",
    "codeDescription": "Shows how to modify the default animation duration globally using the engine.defaults object.",
    "codeLanguage": "javascript",
    "codeTokens": 49,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersduration.md#2025-04-18_snippet_0",
    "pageTitle": "Tween Parameters Documentation for AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.duration = 500;"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Interactive Timer Stretch Implementation",
    "codeDescription": "Complete implementation of a timer stretch demo that includes creating a timer with update callback and handling range input events to dynamically adjust timer duration.",
    "codeLanguage": "javascript",
    "codeTokens": 156,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsstretch.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Timer Stretch Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $duration ] = utils.$('.duration');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  duration: 2000,\n  onUpdate: self => $time.innerHTML = self.currentTime\n});\n\nconst stretchTimer = () => {\n  timer.stretch(+$range.value);\n  $duration.innerHTML = utils.round(timer.duration, 0);\n  timer.restart();\n}\n\n$range.addEventListener('input', stretchTimer);"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Implementing Timer Complete Method in AnimeJS",
    "codeDescription": "Demonstrates how to create and complete a timer using AnimeJS. The code creates a timer with a 100000ms duration that updates a display element, and includes a button to trigger instant completion.",
    "codeLanguage": "javascript",
    "codeTokens": 138,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodscomplete.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Timer Complete Method Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $completeButton ] = utils.$('.complete');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  duration: 100000,\n  onUpdate: self => $time.innerHTML = self.currentTime\n});\n\nconst completeTimer = () => timer.complete();\n\n$completeButton.addEventListener('click', completeTimer);"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "HTML Structure for Anime.js Timeline Animation",
    "codeDescription": "HTML structure containing the target elements for the Anime.js timeline animation. It includes a pyramid with triangle, square, and circle elements that will be animated according to the timeline positioning.",
    "codeLanguage": "html",
    "codeTokens": 102,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetime-position.md#2025-04-18_snippet_1",
    "pageTitle": "Timeline Time Position in Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Advanced Interpolation Examples in JavaScript using Anime.js",
    "codeDescription": "Shows more complex usage of the interpolate function, including creating a reusable interpolation function, chaining with rounding, and using it within animation configurations.",
    "codeLanguage": "javascript",
    "codeTokens": 163,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesinterpolate.md#2025-04-18_snippet_1",
    "pageTitle": "Interpolate Utility in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const interpolateBetween0and100 = utils.interpolate(0, 100);\ninterpolateBetween0and100(0.5);  // 50\ninterpolateBetween0and100(0.75); // 75\ninterpolateBetween0and100(0.25); // 25\n\nconst interpolateAndRound = utils.interpolate(0, 100).round(2); // Interpolate then round to 2 decimal places\ninterpolateAndRound(0.677523); // 67.75\ninterpolateAndRound(1.202514); // 100"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "HTML Structure for AnimeJS Timeline Example",
    "codeDescription": "This HTML snippet provides the structure for displaying the results of the AnimeJS timeline 'call' method example. It includes three columns to show the output of functions A, B, and C.",
    "codeLanguage": "html",
    "codeTokens": 217,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodscall.md#2025-04-18_snippet_1",
    "pageTitle": "Timeline Call Method in AnimeJS",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">function A</span>\n      <span class=\"function-A value lcd\">--</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">function B</span>\n      <span class=\"function-B value lcd\">--</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">function C</span>\n      <span class=\"function-C value lcd\">--</span>\n    </pre>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Implementing onComplete and onUpdate Callbacks in Anime.js Timer",
    "codeDescription": "This example demonstrates the usage of onComplete and onUpdate callbacks in an Anime.js timer. It creates a timer with a duration of 2000ms, updates the status when completed, and continuously updates the current time.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksoncomplete.md#2025-04-18_snippet_1",
    "pageTitle": "Timer Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $status ] = utils.$('.status');\nconst [ $time ] = utils.$('.time');\n\ncreateTimer({\n  duration: 2000,\n  onComplete: self => $status.innerHTML = 'true',\n  onUpdate: self => $time.innerHTML = self.currentTime\n});"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Creating Animatable Clocks with Different Easing Functions in Anime.js",
    "codeDescription": "This snippet demonstrates how to create two animatable clocks using Anime.js, each with a different easing function. It includes functions to rotate the clocks based on mouse movement.",
    "codeLanguage": "javascript",
    "codeTokens": 336,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settingsease.md#2025-04-18_snippet_0",
    "pageTitle": "Animatable Settings in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createAnimatable, utils, stagger } from 'animejs';\n\nconst clock1 = createAnimatable('.clock-1', {\n  rotate: { unit: 'rad' },\n  ease: 'linear',\n});\n\nconst clock2 = createAnimatable('.clock-2', {\n  rotate: { unit: 'rad' },\n  ease: 'outElastic',\n});\n\nconst rotateClock = (animatable) => {\n  const PI = Math.PI;\n  let angle = PI / 2;\n  let lastAngle = 0;\n  return e => {\n    const [ $clock ] = animatable.targets;\n    const { width, height, left, top } = $clock.getBoundingClientRect();\n    const x = e.clientX - left - width / 2;\n    const y = e.clientY - top - height / 2;\n    const currentAngle = Math.atan2(y, x);\n    const diff = currentAngle - lastAngle;\n    angle += diff > PI ? diff - 2 * PI : diff < -PI ? diff + 2 * PI : diff;\n    lastAngle = currentAngle;\n    animatable.rotate(angle);\n  }\n}\n\nconst rotateClock1 = rotateClock(clock1);\nconst rotateClock2 = rotateClock(clock2);\n\nconst onMouseMove = e => {\n  rotateClock1(e);\n  rotateClock2(e);\n}\n\nwindow.addEventListener('mousemove', onMouseMove);"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Animating Scroll with Synchronization Mode in Anime.js",
    "codeDescription": "This snippet demonstrates how to utilize the onScroll() method from Anime.js to synchronize animation with scroll position, utilizing parameters to define the synchronization behavior.",
    "codeLanguage": "JavaScript",
    "codeTokens": 134,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-synchronisation-modes.md#2025-04-18_snippet_0",
    "pageTitle": "Configuring Scroll Animation Synchronization in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.square', {\n  x: 100,\n  autoplay: onScroll({\n    container: '.container',\n    target: '.section',\n    axis: 'y',\n    enter: 'bottom top',\n    leave: 'top bottom',\n    sync: true,            // Synchronisation Mode\n    onEnter: () => {},\n    onLeave: () => {},\n    onUpdate: () => {},\n  })\n});"
      }
    ],
    "relevance": 0.892
  },
  {
    "codeTitle": "Chaining Multiple Utility Functions in JavaScript",
    "codeDescription": "Demonstrates how to chain multiple utility functions together to create a more complex operation. This example normalizes a value and rounds it to one decimal place.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieschain-able-utility-functions.md#2025-04-18_snippet_2",
    "pageTitle": "Chain-able Utility Functions in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const normalizeAndRound = utils.mapRange(0, 255, 0, 1).round(1);\nnormalizeAndRound(128); // '0.5'\nnormalizeAndRound(64);  // '0.3'"
      }
    ],
    "relevance": 0.892
  },
  {
    "codeTitle": "Setting Global Framerate Defaults in AnimeJS",
    "codeDescription": "Demonstrates how to modify the default framerate globally using the engine.defaults object. This affects all subsequent timer instances.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsframerate.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Timer Framerate Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.frameRate = 30;"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Scroll Layout Structure - HTML",
    "codeDescription": "This snippet provides the HTML structure necessary to demonstrate the scroll-enabled animations defined in the JavaScript snippet. It includes a scroll container with elements that respond to scroll events.",
    "codeLanguage": "html",
    "codeTokens": 185,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonupdate.md#2025-04-18_snippet_1",
    "pageTitle": "Animating Scroll Updates with Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded sticky\">\n      <div class=\"large row\">\n        <pre class=\"large log row\">\n          <span class=\"label\">updates</span>\n          <span class=\"value\">0</span>\n        </pre>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Configuring Anime.js Stagger Parameters",
    "codeDescription": "Demonstrates the stagger method with multiple configuration options including start, from, reversed, ease, and grid parameters. Used to create sequential or grid-based animation effects.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parameters.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Stagger Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "stagger(\n  '1rem',\n  {\n    start: 100,\n    from: 2,\n    reversed: false,\n    ease: 'outQuad',\n    grid: [8, 8],\n  }\n);"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Setting Animatable Properties in Anime.js",
    "codeDescription": "This snippet demonstrates how to use animatable properties as methods to set new values, durations, and easing functions. It shows the syntax for calling these methods and explains their parameters and return values.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-methodssetters.md#2025-04-18_snippet_0",
    "pageTitle": "Animatable Methods in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "animatable.property(value, duration, easing);"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Implementing Draggable ScrollInView with AnimeJS",
    "codeDescription": "Creates a draggable element and implements scroll-into-view functionality. The code demonstrates how to initialize a draggable element and trigger scrolling animation when the element is outside the viewport. Includes event listener setup and position configuration.",
    "codeLanguage": "javascript",
    "codeTokens": 153,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsscrollinview.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Draggable Methods Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\nconst [ $scrollInView ] = utils.$('.scroll-button');\n\nconst draggable = createDraggable('.square', {\n  container: '.scroll-container',\n});\n\nconst scrollInView = () => {\n  draggable.scrollInView(400, 100);\n}\n\n// Set the draggable position outside the scroll viewport\ndraggable.x = 120;\ndraggable.y = 200;\n\n$scrollInView.addEventListener('click', scrollInView);"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Animating Scroll Updates with Anime.js - JavaScript",
    "codeDescription": "This snippet imports the necessary functions from Anime.js and sets up an animation on a square element that updates a displayed value during scroll events. It uses the onScroll callback to handle synchronization with the scroll container.",
    "codeLanguage": "javascript",
    "codeTokens": 173,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonupdate.md#2025-04-18_snippet_0",
    "pageTitle": "Animating Scroll Updates with Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, onScroll, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet updates = 0;\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: .5,\n    debug: true,\n    onUpdate: () => $value.textContent = ++updates,\n  })\n});"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Implementing onBeforeUpdate Callback in Anime.js Timeline",
    "codeDescription": "This code creates an Anime.js timeline with an onBeforeUpdate callback. The callback updates a DOM element with the number of updates. The timeline animates three shapes sequentially with loops and delays.",
    "codeLanguage": "javascript",
    "codeTokens": 171,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonbeforeupdate.md#2025-04-18_snippet_1",
    "pageTitle": "Timeline Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet updates = 0;\n\nconst tl = createTimeline({\n  defaults: { duration: 500 },\n  loopDelay: 250,\n  loop: true,\n  onBeforeUpdate: self => $value.textContent = ++updates\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '+=250')\n.add('.square', { x: '15rem' }, '+=250');"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Native WAAPI Animation with Promise.all",
    "codeDescription": "Demonstrates the equivalent approach using native Web Animation API. This example creates multiple animations and uses Promise.all with the finished property to track completion of all animations.",
    "codeLanguage": "javascript",
    "codeTokens": 135,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapifinished.md#2025-04-18_snippet_2",
    "pageTitle": "API Differences between Anime.js and Web Animation API",
    "codeList": [
      {
        "language": "javascript",
        "code": "const targets = document.querySelectorAll('.square');\nconst animations = [];\n\ntargets.forEach(($el, i) => {\n  animations[i] = $el.animate({\n    translate: '100px',\n  }, {\n    fill: 'forwards',\n    duration: 500,\n  });\n});\n\nPromise.all(\n  animations\n    .map((animation) => animation.finished)\n    .then(() => console.log('completed'))\n);"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Implementing Different Composition Modes with Interactive Animation Example in Anime.js",
    "codeDescription": "This code demonstrates how to use different composition modes ('none', 'replace', and 'blend') in Anime.js animations. It sets up a base animation for three squares and adds interactive hover animations with different composition behaviors for each square.",
    "codeLanguage": "javascript",
    "codeTokens": 406,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parameterscomposition.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Animation Composition Modes",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nconst squares = utils.$('.square');\nconst [ $none, $replace, $blend ] = squares;\n\n// Animate each square with a different composition mode\n\nsquares.forEach($square => {\n  // 'none', 'replace', 'blend'\n  const mode = $square.classList[1];\n  animate($square, {\n    scale: [.5, 1],\n    alternate: true,\n    loop: true,\n    duration: 750,\n    composition: mode,\n  });\n});\n\n// Common animation parameters\n\nconst enter = { scale: 1.5, duration: 350 };\nconst leave = { scale: 1.0, duration: 250 };\n\n// Composition none animations\n\nconst enterNone = () => animate($none, {\n  composition: 'none', ...enter\n});\n\nconst leaveNone = () => animate($none, {\n  composition: 'none', ...leave\n});\n\n$none.addEventListener('mouseenter', enterNone);\n$none.addEventListener('mouseleave', leaveNone);\n\n// Composition replace animations\n\nconst enterReplace = () => animate($replace, {\n  composition: 'replace', ...enter\n});\n\nconst leaveReplace = () => animate($replace, {\n  composition: 'replace', ...leave\n});\n\n$replace.addEventListener('mouseenter', enterReplace);\n$replace.addEventListener('mouseleave', leaveReplace);\n\n// Composition blend animations\n\nconst enterBlend = () => animate($blend, {\n  composition: 'blend', ...enter\n});\n\nconst leaveBlend = () => animate($blend, {\n  composition: 'blend', ...leave\n});\n\n$blend.addEventListener('mouseenter', enterBlend);\n$blend.addEventListener('mouseleave', leaveBlend);"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Creating and Using padStart Function with Examples",
    "codeDescription": "Examples demonstrating how to create a reusable padding function with predefined parameters and how to chain utility functions together to perform multiple operations like rounding and padding.",
    "codeLanguage": "javascript",
    "codeTokens": 171,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiespad-start.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js padStart Utility Function Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const padTo5WithZeros = utils.padStart(5, '0');\npadTo5WithZeros('123');  // '00123'\npadTo5WithZeros(78);     // '00078'\npadTo5WithZeros('1234'); // '01234'\n\nconst roundAndPad = utils.round(2).padStart(5, '0'); // Round to 2 decimal places then pad to 5 characters\nroundAndPad(12.345);  // '12.35'\nroundAndPad(7.8);     // '07.80'"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Importing Anime.js Engine",
    "codeDescription": "This snippet demonstrates how to import the `engine` object from the animejs library. The `engine` object provides access to global animation parameters like speed, fps, and precision, allowing you to configure the overall animation behavior.",
    "codeLanguage": "JavaScript",
    "codeTokens": 71,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameters.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Engine Parameters Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Timeline Stretch Method Implementation in JavaScript",
    "codeDescription": "Shows how to create and control an Anime.js timeline with the stretch method. Creates animations for multiple elements with different delays and allows dynamic duration adjustment through a range input.",
    "codeLanguage": "javascript",
    "codeTokens": 197,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsstretch.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timeline Stretch Method Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $totalDuration ] = utils.$('.value');\n\nconst tl = createTimeline({\n  loop: 1,\n  alternate: true,\n})\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst stretchTimeline = () => {\n  const newDuration = +$range.value;\n  $totalDuration.textContent = newDuration;\n  tl.stretch(newDuration).restart();\n}\n\nstretchTimeline();\n\n$range.addEventListener('input', stretchTimeline);"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Configuring Draggable Cursor Settings in AnimeJS",
    "codeDescription": "This snippet demonstrates how to create draggable elements with custom cursor settings using AnimeJS. It shows two examples: one disabling custom cursor styling and another setting specific cursor styles for hover and grab states.",
    "codeLanguage": "javascript",
    "codeTokens": 108,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingscursor.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Settings in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  cursor: false\n});\n\ncreateDraggable('.circle', {\n  cursor: {\n    onHover: 'move',\n    onGrab: 'wait'\n  }\n});"
      }
    ],
    "relevance": 0.888
  },
  {
    "codeTitle": "Using stretch() Method in Anime.js",
    "codeDescription": "Demonstrates how to use the stretch() method to modify animation duration. The animation moves squares horizontally with staggered timing, allowing runtime duration adjustment via a range input.",
    "codeLanguage": "javascript",
    "codeTokens": 168,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsstretch.md#2025-04-18_snippet_0",
    "pageTitle": "Animation Stretching Methods in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils, stagger } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $totalDuration ] = utils.$('.value');\n\nconst animation = animate('.square', {\n  x: '17rem',\n  ease: 'inOutSine',\n  delay: stagger(200),\n});\n\nconst stretchAnimation = () => {\n  const newDuration = +$range.value;\n  $totalDuration.textContent = newDuration;\n  animation.stretch(newDuration).restart();\n}\n\nstretchAnimation();\n\n$range.addEventListener('input', stretchAnimation);"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Creating a Timer with Custom Playback Rate and Interactive Controls",
    "codeDescription": "Demonstrates how to create a timer with a custom playback rate and implement interactive controls to adjust the speed in real-time. The timer updates a time display and allows changing the speed via a range input.",
    "codeLanguage": "javascript",
    "codeTokens": 183,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsplaybackrate.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Timer Playback Rate Settings",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $speed ] = utils.$('.speed');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  playbackRate: 2,\n  onUpdate: self => $time.innerHTML = utils.round(self.currentTime, 0),\n});\n\nconst updateSpeed = () => {\n  const speed = utils.roundPad(+$range.value, 1);\n  $speed.innerHTML = speed;\n  utils.sync(() => timer.speed = speed);\n}\n\n$range.addEventListener('input', updateSpeed);"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Setting Global Default Playback Rate in Anime.js",
    "codeDescription": "Demonstrates how to set the default playback rate globally for all animations using the engine.defaults object. This affects all animations unless overridden locally.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsplaybackrate.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timeline Playback Rate Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.playbackRate = .75;"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Animating a Square on Scroll with Anime.js",
    "codeDescription": "This snippet demonstrates how to animate a square element by changing its position and rotation when the user scrolls horizontally. It uses the 'onScroll' function from the Anime.js library to trigger the animation based on the scroll container defined by the user.",
    "codeLanguage": "JavaScript",
    "codeTokens": 148,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingsaxis.md#2025-04-18_snippet_0",
    "pageTitle": "Animating Scroll Events with Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  ease: 'inOutQuad',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    axis: 'x',\n  })\n});"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Animating with Duration-Based Keyframes in AnimeJS",
    "codeDescription": "Creates an animation using keyframes that define multiple property values at specific points in time. The animation will transition between each keyframe over the specified duration.",
    "codeLanguage": "javascript",
    "codeTokens": 92,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframes.md#2025-04-18_snippet_2",
    "pageTitle": "AnimeJS Animation Keyframes Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.square', {\n  keyframes: [\n    { x: 100, y: 100 },\n    { x: 200, y: 200 },\n  ],\n  duration: 3000,\n}"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "AnimeJS Animation with MapRange Modifier",
    "codeDescription": "Demonstrates using mapRange as a modifier in AnimeJS animations, comparing normal and mapped rotation animations.",
    "codeLanguage": "javascript",
    "codeTokens": 140,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesmap-range.md#2025-04-18_snippet_2",
    "pageTitle": "Utilities Documentation - Map Range Function in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nanimate('.normal', {\n  rotate: '12turn',\n  duration: 12000,\n  loop: true,\n  ease: 'inOut',\n});\n\nanimate('.mapped', {\n  rotate: '12turn',\n  modifier: utils.mapRange(0, 12, 0, 1), // Used as a modifier\n  duration: 12000,\n  loop: true,\n  ease: 'inOut',\n});"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Creating and Using Simple Chain-able Functions in JavaScript",
    "codeDescription": "Shows how to create a simple chain-able function using the clamp utility and how to use it without chaining.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieschain-able-utility-functions.md#2025-04-18_snippet_1",
    "pageTitle": "Chain-able Utility Functions in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const chainableClamp = utils.clamp(0, 100); // Returns a chain-able function\nconst result = chainableClamp(150); // 100"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Removing Animations, Timers, or Timelines from Anime.js Timeline",
    "codeDescription": "Demonstrates how to remove animations, timers, or timelines from an Anime.js timeline. The method accepts an object (Animation, Timer, or Timeline) and an optional time position.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsremove.md#2025-04-18_snippet_0",
    "pageTitle": "Timeline Remove Method in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "timeline.remove([animation, timer, timeline]);"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "HTML Structure for Animated Circles",
    "codeDescription": "This HTML snippet defines the structure for the animated circles and includes a label instructing users to move the cursor around.",
    "codeLanguage": "html",
    "codeTokens": 128,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settingsduration.md#2025-04-18_snippet_1",
    "pageTitle": "Animatable Settings - Duration in Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium centered row\">\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n</div>\n<div class=\"small centered row\">\n  <span class=\"label\"><br><br><br>Move cursor around</span>\n</div>"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "HTML for Time Unit Display and Controls",
    "codeDescription": "This HTML snippet defines the structure for displaying the time in both seconds and milliseconds, along with buttons to toggle between the two time units. It includes `div` elements for layout, `pre` elements for displaying the timer values, and `button` elements for user interaction.",
    "codeLanguage": "html",
    "codeTokens": 235,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterstimeunit-seconds-milliseconds.md#2025-04-18_snippet_5",
    "pageTitle": "Anime.js Engine Time Unit Configuration",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">duration: 1</span>\n      <span class=\"time-s value lcd\">0</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">duration: 1000</span>\n      <span class=\"time-ms value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button toggle\" disabled>milliseconds</button>\n    <button class=\"button toggle\">seconds</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "HTML Structure for Anime.js Animation Target",
    "codeDescription": "Provides the HTML structure for the target element of the Anime.js animation, which is a square div inside a container with specific classes.",
    "codeLanguage": "html",
    "codeTokens": 63,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersdelay.md#2025-04-18_snippet_2",
    "pageTitle": "Delay Parameter in Anime.js Animation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "HTML Structure for Displaying Anime.js Timer Values",
    "codeDescription": "This HTML snippet creates a structure to display the iteration time and current time of an Anime.js timer animation. It uses pre-formatted elements with specific classes for styling and identification.",
    "codeLanguage": "html",
    "codeTokens": 164,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsreversed.md#2025-04-18_snippet_2",
    "pageTitle": "Anime.js Timer Playback Settings Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered row\">\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">iteration time</span>\n      <span class=\"iteration-time value lcd\">0</span>\n    </pre>\n  </div>\n  <div class=\"col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"current-time value lcd\">0</span>\n    </pre>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "HTML Structure for Staggered Animations with Anime.js",
    "codeDescription": "This HTML snippet provides the structure for elements that will be animated using the stagger function in Anime.js. Each div with the class 'square' will be the target of the animations, allowing those elements to be animated in sequence according to the specified parameters in the JavaScript code.",
    "codeLanguage": "HTML",
    "codeTokens": 159,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstagger.md#2025-04-18_snippet_1",
    "pageTitle": "Creating Staggered Animations with Anime.js",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div class=\\\"small row\\\">\\n  <div class=\\\"square\\\"></div>\\n</div>\\n<div class=\\\"small row\\\">\\n  <div class=\\\"square\\\"></div>\\n</div>\\n<div class=\\\"small row\\\">\\n  <div class=\\\"square\\\"></div>\\n</div>\\n<div class=\\\"small row\\\">\\n  <div class=\\\"square\\\"></div>\\n</div>"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Initializing ScrollObserver with Scroll-Based Animation",
    "codeDescription": "Creates a scroll-triggered animation for an element using Anime.js onScroll configuration with revert method",
    "codeLanguage": "javascript",
    "codeTokens": 130,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-methodsrevert.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js ScrollObserver Revert Method",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  ease: 'linear',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    enter: 'bottom-=50 top',\n    leave: 'top+=60 bottom',\n    sync: 1,\n    debug: true,\n    onSyncComplete: self => self.revert()\n  })\n});"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Implementing Timeline Remove Methods in Anime.js",
    "codeDescription": "A complete example demonstrating the usage of remove() method in different scenarios. It creates a timeline with multiple animations and provides functions to remove an animation, a target, and a specific tween property.",
    "codeLanguage": "javascript",
    "codeTokens": 231,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsremove.md#2025-04-18_snippet_3",
    "pageTitle": "Timeline Remove Method in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $removeA, $removeB, $removeC ] = utils.$('.button');\n\nconst animation = animate('.circle', { x: '15rem', scale: [1, .5, 1] });\n\nconst tl = createTimeline({ loop: true, alternate: true })\n.sync(animation)\n.add('.triangle', { x: '15rem', rotate: 360 }, 100)\n.add('.square',   { x: '15rem' }, 200);\n\nconst removeAnimation = () => tl.remove(animation);\nconst removeTarget = () => tl.remove('.square');\nconst removeRotate = () => tl.remove('.triangle', 'rotate');\n\n$removeA.addEventListener('click', removeAnimation);\n$removeB.addEventListener('click', removeTarget);\n$removeC.addEventListener('click', removeRotate);"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Animating Elements with Anime.js in JavaScript",
    "codeDescription": "This snippet illustrates adding and animating 150 particles with random positions and scale, leveraging utility functions from Anime.js. Requires imports from the Anime.js package and a container to hold particles.",
    "codeLanguage": "JavaScript",
    "codeTokens": 241,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parametersspeed.md#2025-04-18_snippet_1",
    "pageTitle": "Configuring Animation Speed in Anime.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { engine, animate, utils } from 'animejs';\n\nconst [ $container ] = utils.$('.container');\nconst [ $range ] = utils.$('.range');\n\nfor (let i = 0; i < 150; i++) {\n  const $particle = document.createElement('div');\n  $particle.classList.add('particle');\n  $container.appendChild($particle);\n  animate($particle, {\n    x: utils.random(-10, 10, 2) + 'rem',\n    y: utils.random(-3, 3, 2) + 'rem',\n    scale: [{ from: 0, to: 1 }, { to: 0 }],\n    delay: utils.random(0, 1000),\n    loop: true,\n  });  \n}\n\nfunction onInput() {\n  utils.sync(() => engine.speed = this.value);\n}\n\n$range.addEventListener('input', onInput);"
      }
    ],
    "relevance": 0.882
  },
  {
    "codeTitle": "HTML Structure for Animation Target",
    "codeDescription": "Shows the HTML markup structure required for the animation example, containing a square element within a medium row container.",
    "codeLanguage": "html",
    "codeTokens": 58,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersduration.md#2025-04-18_snippet_2",
    "pageTitle": "Tween Parameters Documentation for AnimeJS",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>"
      }
    ],
    "relevance": 0.882
  },
  {
    "codeTitle": "Anime.js ScrollObserver Object Syntax",
    "codeDescription": "This snippet shows how to define ScrollObserver thresholds using an object syntax.  The `enter` property defines when the target enters the viewport (top of the target meets the bottom of the container), and the `leave` property defines when the target leaves the viewport (bottom of the target meets the top of the container).",
    "codeLanguage": "javascript",
    "codeTokens": 149,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholds.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js ScrollObserver Thresholds",
    "codeList": [
      {
        "language": "javascript",
        "code": "onScroll({\n  // Enters when the top of the target meets the bottom of the container\n  enter: { target: 'top', container: 'bottom' },\n  // Leaves when the bottom of the target meets the top of the container\n  leave: { target: 'bottom', container: 'top' }\n});"
      }
    ],
    "relevance": 0.882
  },
  {
    "codeTitle": "Creating a Timeline with Alternate and Loop Parameters in Anime.js",
    "codeDescription": "Shows how to create an Anime.js timeline with the 'alternate' parameter set to true and looping enabled. The example also includes an onLoop callback that updates a counter display element.",
    "codeLanguage": "javascript",
    "codeTokens": 157,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsalternate.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Timeline Alternate Parameter Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $loops ] = utils.$('.loops');\n\nlet loops = 0;\n\nconst tl = createTimeline({\n  loop: true,\n  alternate: true,\n  onLoop: self => $loops.innerHTML = ++loops,\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '-=500')\n.add('.square', { x: '15rem' }, '-=500');"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Scroll Container and Content Structure - HTML",
    "codeDescription": "This HTML structure provides a scrollable container with sections and a square element within it. It is necessary for the scroll observer to function properly, allowing the Anime.js animations to be triggered as the user scrolls.",
    "codeLanguage": "HTML",
    "codeTokens": 171,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-synchronisation-modessmooth-scroll.md#2025-04-18_snippet_1",
    "pageTitle": "Animating Scroll-based Playback with Anime.js",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Anime.js ScrollObserver with Target",
    "codeDescription": "This code snippet demonstrates how to use the `target` property within `onScroll` to specify which element triggers the scroll event. The `createTimer` function creates an animation that updates the timer's inner HTML based on the scroll position of the specified target element within the scroll container.",
    "codeLanguage": "javascript",
    "codeTokens": 162,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingstarget.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js ScrollObserver Target Setting",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils, onScroll } from 'animejs';\n\nconst [ $timer ] = utils.$('.timer');\n\ncreateTimer({\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  onUpdate: self => {\n    $timer.innerHTML = self.iterationCurrentTime\n  },\n  autoplay: onScroll({\n    target: $timer,\n    container: '.scroll-container',\n  })\n});"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Setting Global Frame Rate in AnimeJS",
    "codeDescription": "Code snippet demonstrating how to change the default frame rate globally in AnimeJS by updating the engine.defaults object.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsframerate.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Frame Rate Settings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.frameRate = 30;"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Importing Anime.js and Animating Input Value",
    "codeDescription": "This snippet demonstrates how to import Anime.js and create an animation that targets an input element's 'value' attribute. It uses the 'animate' function to set up a looping animation with alternating direction and rounds the value to integers.",
    "codeLanguage": "javascript",
    "codeTokens": 116,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertieshtml-attributes.md#2025-04-18_snippet_0",
    "pageTitle": "Animating HTML Attributes with Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nanimate('input', {\n  value: 1000, // animate the input \"value\" attribute\n  alternate: true,\n  loop: true,\n  modifier: utils.round(0),\n});"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Implementing onDrag Callback with Anime.js",
    "codeDescription": "Demonstrates how to create a draggable element with a callback function that counts and displays the number of drag operations. The callback executes whenever the element is being dragged.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksondrag.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Callbacks Documentation for Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet drags = 0;\n\ncreateDraggable('.square', {\n  container: '.grid',\n  onDrag: () => $value.textContent = ++drags\n});"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Setting Global Default Playback Rate in Anime.js",
    "codeDescription": "Shows how to modify the default playbackRate value globally for all animations by updating the engine.defaults object. This allows setting a different base speed for all animations in your project.",
    "codeLanguage": "javascript",
    "codeTokens": 71,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsplaybackrate.md#2025-04-18_snippet_0",
    "pageTitle": "Animation Playback Rate Documentation for Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.playbackRate = .75;"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Animating with animejs in JavaScript",
    "codeDescription": "This JavaScript snippet illustrates how to use the 'stagger' function from 'animejs' to apply staggered animation effects to elements. It imports the 'animate' and 'stagger' functions and uses them to animate '.square' elements with staggered positions and delays. Dependencies include the animejs library. The key parameters are the stagger value ('1rem') and the start values for x position and delay (14 and 500 respectively).",
    "codeLanguage": "JavaScript",
    "codeTokens": 173,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-start.md#2025-04-18_snippet_0",
    "pageTitle": "Documenting Stagger Parameters with animejs",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { animate, stagger } from 'animejs';\n\nanimate('.square', {\n  x: stagger('1rem', { start: 14 }), // adds 11 to the staggered value\n  delay: stagger(100, { start: 500 }) // adds 500 to the staggered value\n});"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Implementing Timer Reverse Functionality with AnimeJS in JavaScript",
    "codeDescription": "This code snippet demonstrates how to create and use a timer with AnimeJS, including a reverse functionality. It sets up a timer with a duration of 2000ms and updates a UI element with the current time. A button event listener is added to trigger the reverse method.",
    "codeLanguage": "javascript",
    "codeTokens": 156,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsreverse.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Timer Reverse Method Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $reverseButton ] = utils.$('.reverse');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  duration: 2000,\n  onUpdate: self => $time.innerHTML = self.iterationCurrentTime,\n});\n\nconst reverseTimer = () => timer.reverse();\n\n$reverseButton.addEventListener('click', reverseTimer);"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Chain-able radToDeg Examples in Anime.js",
    "codeDescription": "Demonstrates how to create a chain-able radToDeg function that can be reused or combined with other utility functions. Shows examples of direct conversion and combining with the round utility.",
    "codeLanguage": "javascript",
    "codeTokens": 137,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrad-to-deg.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js radToDeg Utility Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const radToDeg = utils.radToDeg();\nradToDeg(1.7453292519943295); // 100\nradToDeg(Math.PI);            // 180\n\nconst roundRadToDeg = utils.radToDeg().round(2); // Convert radians to degrees then round to 2 decimal places\nroundRadToDeg(Math.PI / 7);  // 25.71"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Creating an Anime.js Timer with Duration Setting",
    "codeDescription": "This code demonstrates how to create a timer using Anime.js with a specified duration of 2000 milliseconds. The timer updates a DOM element with the current time value on each timer update.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsduration.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timer Documentation: Duration Property",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $time ] = utils.$('.time');\n\ncreateTimer({\n  duration: 2000,\n  onUpdate: self => $time.innerHTML = self.currentTime\n});"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Dynamic Timer Framerate Control Implementation",
    "codeDescription": "Creates a timer instance with configurable framerate and implements real-time FPS updating through range input control. Includes DOM manipulation for displaying current time and FPS values.",
    "codeLanguage": "javascript",
    "codeTokens": 161,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsframerate.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Timer Framerate Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $range ] = utils.$('.range');\nconst [ $fps ] = utils.$('.fps');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  frameRate: 60,\n  onUpdate: self => $time.innerHTML = self.currentTime,\n});\n\nconst updateFps = () => {\n  const { value } = $range;\n  $fps.innerHTML = value;\n  timer.fps = value;\n}\n\n$range.addEventListener('input', updateFps);"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Configuring Tween Parameters in Anime.js",
    "codeDescription": "Demonstrates how to animate elements using the 'to' parameter with specific easing functions. The example shows x-axis translation and rotation animations.",
    "codeLanguage": "javascript",
    "codeTokens": 121,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersto.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Tween Parameters Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate('.square', {\n  x: {\n    to: '16rem', // From 0px to 16rem\n    ease: 'outCubic',\n  },\n  rotate: {\n    to: '.75turn', // From 0turn to .75turn\n    ease: 'inOutQuad'\n  },\n});"
      }
    ],
    "relevance": 0.878
  },
  {
    "codeTitle": "HTML Structure for Scroll Animation",
    "codeDescription": "This snippet provides the HTML structure necessary for implementing the scroll animation. It includes a scroll container that wraps the animated square and additional sections to demonstrate the scrolling effect visually.",
    "codeLanguage": "HTML",
    "codeTokens": 152,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingsaxis.md#2025-04-18_snippet_1",
    "pageTitle": "Animating Scroll Events with Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"scroll-container scroll-x\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <div class=\"label\">scroll right →</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.878
  },
  {
    "codeTitle": "HTML Setup for Scoped Animation with Anime.js",
    "codeDescription": "This HTML structure sets up three '.medium.row' divs, each containing a '.square' div. The second '.row' is targeted for scoped animation with Anime.js, allowing the animation to be contained within a specific section of the DOM.",
    "codeLanguage": "html",
    "codeTokens": 166,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-parametersroot.md#2025-04-18_snippet_1",
    "pageTitle": "Using Scope in Anime.js for DOM Queries",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">outside scope</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">inside scope</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">outside scope</div>\n</div>"
      }
    ],
    "relevance": 0.878
  },
  {
    "codeTitle": "Implementing Draggable setX Method - JavaScript",
    "codeDescription": "Demonstrates how to use the setX method to programmatically set the x-position of a draggable element. The example shows creating a draggable instance and setting random x positions via button click.",
    "codeLanguage": "javascript",
    "codeTokens": 118,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodssetx.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Methods - Animejs Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable, utils } from 'animejs';\n\nconst [ $setButton ] = utils.$('.set');\n\nconst draggable = createDraggable('.square');\n\nconst setRandomX = () => draggable.setX(utils.random(-100, 100));\n\n$setButton.addEventListener('click', setRandomX);"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Implementing pause() Method with AnimeJS Timeline",
    "codeDescription": "This code demonstrates how to create a timeline with AnimeJS and pause it using the pause() method. The example creates a timeline with three animations that run in sequence with specific timings, and adds a pause button event listener to control the timeline.",
    "codeLanguage": "javascript",
    "codeTokens": 172,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodspause.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Timeline Methods - pause()",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $pauseButton ] = utils.$('.pause');\n\nconst tl = createTimeline({\n  loop: true,\n  alternate: true,\n})\n.add('.circle',   { x: '15rem' })\n.add('.triangle', { x: '15rem' }, 500)\n.add('.square',   { x: '15rem' }, 1000);\n\nconst pauseTimeline = () => tl.pause();\n\n$pauseButton.addEventListener('click', pauseTimeline);"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Setting Global Default for Alternate Parameter in Anime.js",
    "codeDescription": "Demonstrates how to change the default value of the 'alternate' parameter globally in Anime.js by updating the engine.defaults object. This affects all animations unless overridden locally.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsalternate.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timeline Alternate Parameter Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.alternate = true;"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "HTML Grid Structure",
    "codeDescription": "This HTML code defines a grid of square elements using `div` elements with the class 'square'. The grid is structured using 'row' divs to arrange the squares in rows. This markup is used by the JavaScript code to select and animate the grid elements.",
    "codeLanguage": "html",
    "codeTokens": 508,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-grid.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Stagger Grid Animation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "HTML Structure for Draggable Elements",
    "codeDescription": "Shows the HTML markup required to create a grid container with draggable square and circle elements. The elements are styled with 'large centered grid' classes.",
    "codeLanguage": "html",
    "codeTokens": 80,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsmaxvelocity.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Draggable Settings Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered grid square-grid\">\n  <div class=\"square draggable\"></div>\n  <div class=\"circle draggable\"></div>\n</div>"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Wrap Function with Chaining in JavaScript",
    "codeDescription": "Examples of using the wrap utility function with specific ranges and chaining with other utilities like round(). Shows practical applications for number wrapping.",
    "codeLanguage": "javascript",
    "codeTokens": 149,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieswrap.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Wrap Utility Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const wrapBetween0and100 = utils.wrap(0, 100);\nwrapBetween0and100(105); // 5\nwrapBetween0and100(220); // 20\nwrapBetween0and100(-15); // 85\n\nconst wrapAndRound = utils.wrap(0, 100).round(2); // Wrap then round to 2 decimal places\nwrapAndRound(105.7523); // 5.75\nwrapAndRound(220.2514); // 20.25"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Setting Default Framerate Globally in Anime.js",
    "codeDescription": "This snippet shows how to change the default framerate for all animations globally using the engine.defaults object in Anime.js. It sets the default framerate to 30 fps.",
    "codeLanguage": "javascript",
    "codeTokens": 71,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsframerate.md#2025-04-18_snippet_0",
    "pageTitle": "Timeline Playback Settings: Framerate in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.frameRate = 30;"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Basic Timeline Synchronization in AnimeJS",
    "codeDescription": "Demonstrates basic timeline synchronization by creating and syncing a child timeline with position transformations.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodssync.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Timeline Synchronization Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const tlChild = createTimeline().add(target, { x: 100 }).add(target, { y: 100 });\n\ncreatTimeline().sync(tlChild);"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Setting Global Default Playback Rate in AnimeJS",
    "codeDescription": "Shows how to change the default playback rate for all timers globally by updating the engine.defaults object. This affects all timers that don't explicitly specify a playback rate.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsplaybackrate.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Timer Playback Rate Settings",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.playbackRate = .75;"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "HTML Structure for Random Animation Demo",
    "codeDescription": "HTML markup structure showing multiple square elements that can be targeted for random animations.",
    "codeLanguage": "html",
    "codeTokens": 105,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrandom.md#2025-04-18_snippet_2",
    "pageTitle": "AnimeJS Random Utility Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "HTML Structure for Scroll Container and Animated Element",
    "codeDescription": "This HTML snippet defines the structure for a scroll container and an element that will be animated using Anime.js. The `.scroll-container` div is set to enable vertical scrolling (`scroll-y`).  Inside the container, there are nested divs to structure the content and the `.square` div, which will be the target of the Anime.js scroll animation.",
    "codeLanguage": "HTML",
    "codeTokens": 202,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-thresholdsnumeric-values.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js ScrollObserver Thresholds with Numeric Values",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Using AnimJS Timer with Callbacks and DOM Updates in JavaScript",
    "codeDescription": "This example shows how to create an AnimJS timer with specific parameters, including duration, loop, frameRate, and callbacks. It updates DOM elements with the current time and iteration count.",
    "codeLanguage": "javascript",
    "codeTokens": 126,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimer.md#2025-04-18_snippet_1",
    "pageTitle": "AnimJS Timer Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nconst [ $time, $count ] = utils.$('.value');\n\ncreateTimer({\n  duration: 1000,\n  loop: true,\n  frameRate: 30,\n  onUpdate: self => $time.innerHTML = self.currentTime,\n  onLoop: self => $count.innerHTML = self._currentIteration\n});"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "HTML Structure for AnimeJS Animation Controls Demo",
    "codeDescription": "This HTML markup provides the structure for demonstrating animation controls in AnimeJS. It includes animated square elements and control buttons for pausing, alternating direction, and resuming animations.",
    "codeLanguage": "html",
    "codeTokens": 144,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsresume.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Methods - resume() in AnimeJS",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button\">Pause</button>\n    <button class=\"button\">Alternate</button>\n    <button class=\"button\">Resume</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Setting Global Default Loop Value in Anime.js",
    "codeDescription": "Demonstrates how to change the default loop value globally by updating the engine.defaults object in Anime.js. This allows all animations to use the specified loop behavior without explicitly defining it for each animation.",
    "codeLanguage": "javascript",
    "codeTokens": 71,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsloop.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Loop Animation Setting Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.loop = true;"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Implementing onUpdate Callback with AnimeJS Timer",
    "codeDescription": "This example shows how to create a timer with AnimeJS and use the onUpdate callback. It updates HTML elements with the number of updates and the current time of the timer on each frame.",
    "codeLanguage": "javascript",
    "codeTokens": 123,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonupdate.md#2025-04-18_snippet_1",
    "pageTitle": "Timer Callbacks in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $updates ] = utils.$('.updates');\nconst [ $time ] = utils.$('.time');\n\nlet updates = 0;\n\ncreateTimer({\n  onUpdate: self => {\n    $updates.innerHTML = ++updates;\n    $time.innerHTML = self.currentTime;\n  }\n});"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Creating a Non-Repeating Scroll Observer in Anime.js",
    "codeDescription": "This code snippet creates a scroll observer that updates a value but does not repeat the event handling after the animation is complete. It utilizes 'createTimer' similarly to the repeating observer but sets the 'repeat' property to false.",
    "codeLanguage": "JavaScript",
    "codeTokens": 163,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingsrepeat.md#2025-04-18_snippet_1",
    "pageTitle": "Creating Scroll Observers in Anime.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "const [ $noRepeat ] = utils.$('.no-repeat .value');\nlet noRepeatUpdates = 0;\n\ncreateTimer({\n  duration: 1000,\n  autoplay: onScroll({\n    container: '.scroll-container',\n    target: '.no-repeat',\n    enter: 'bottom-=40 top',\n    leave: 'top+=60 bottom',\n    onUpdate: () => $noRepeat.innerHTML = noRepeatUpdates++,\n    repeat: false,\n    debug: true,\n  })\n});"
      }
    ],
    "relevance": 0.872
  },
  {
    "codeTitle": "HTML structure for clamp demonstration in Anime.js",
    "codeDescription": "Provides the HTML structure for demonstrating the difference between normal and clamped animations using Anime.js.",
    "codeLanguage": "html",
    "codeTokens": 119,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesclamp.md#2025-04-18_snippet_2",
    "pageTitle": "Clamp Utility in Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"x-large spaced-evenly row\">\n  <div class=\"col\">\n    <div class=\"clock normal\"></div>\n    <div class=\"label\">normal</div>\n  </div>\n  <div class=\"col\">\n    <div class=\"clock clamped\"></div>\n    <div class=\"label\">clamped [.25,.75]</div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.872
  },
  {
    "codeTitle": "Configuring Global Timer Pause Callback in AnimeJS",
    "codeDescription": "Shows how to set up a default global pause callback handler by modifying the engine defaults. The callback receives the timer instance as an argument.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonpause.md#2025-04-18_snippet_0",
    "pageTitle": "Timer Callbacks Documentation - AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.onPause = self => console.log(self.id);"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Using stagger function with AnimeJS for multi-target animations",
    "codeDescription": "This snippet demonstrates how to use the stagger function in AnimeJS to create staggered animations across multiple elements. It shows how to apply different y-position and rotation values to each target in sequence, with loop and alternate options enabled.",
    "codeLanguage": "javascript",
    "codeTokens": 122,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggervalues-staggering.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Stagger Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, stagger } from 'animejs';\n\nconst animation = animate('.square', {\n  y: stagger(['-2.75rem', '2.75rem']),\n  rotate: { from: stagger('-.125turn') },\n  loop: true,\n  alternate: true\n});"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Setting Global Default Delay in Anime.js",
    "codeDescription": "Demonstrates how to change the default delay value globally for all animations by updating the engine.defaults object. This code sets a 500ms delay for all animations across the application.",
    "codeLanguage": "javascript",
    "codeTokens": 72,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsdelay.md#2025-04-18_snippet_0",
    "pageTitle": "Animation Playback Settings in Anime.js - Delay Configuration",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.delay = 500;"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Setting Global onUpdate Default in Anime.js",
    "codeDescription": "Shows how to change the default onUpdate callback globally by updating the engine.defaults object in Anime.js.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonupdate.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timeline onUpdate Callback Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.onUpdate = self => console.log(self.id);"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Setting Global Default Delay in Anime.js",
    "codeDescription": "Demonstrates how to change the default delay value globally for all animations using the engine.defaults object in Anime.js.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-parametersdelay.md#2025-04-18_snippet_0",
    "pageTitle": "Delay Parameter in Anime.js Animation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.delay = 500;"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Using padStart Utility Function in Anime.js",
    "codeDescription": "Shows basic usage of the padStart utility function which pads a value from the start with a specified string until it reaches a desired length. It can be used directly with a value or as a chainable function.",
    "codeLanguage": "javascript",
    "codeTokens": 90,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiespad-start.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js padStart Utility Function Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const paddedValue = utils.padStart(value, totalLength, padString);\nconst padderFunction = utils.padStart(totalLength, padString);"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "HTML Structure for Draggable Elements in AnimeJS",
    "codeDescription": "This HTML snippet defines the structure for two draggable elements: a square and a circle. These elements are targeted by the JavaScript code to apply draggable functionality with custom cursor settings.",
    "codeLanguage": "html",
    "codeTokens": 83,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingscursor.md#2025-04-18_snippet_1",
    "pageTitle": "Draggable Settings in AnimeJS",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered row\">\n  <div class=\"square draggable\"></div>\n  <div class=\"circle draggable\"></div>\n</div>"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "HTML Structure for AnimateJS Loop Counter Example",
    "codeDescription": "This HTML snippet provides the structure for the AnimateJS loop counter example. It includes a div for the animated circle and a pre element to display the loop count.",
    "codeLanguage": "html",
    "codeTokens": 106,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonloop.md#2025-04-18_snippet_2",
    "pageTitle": "AnimateJS Animation Callbacks Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">loops</span>\n    <span class=\"value\">0</span>\n  </pre>\n</div>"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Initializing Draggable Element with Release Mass in Anime.js",
    "codeDescription": "This snippet demonstrates how to initialize a draggable element using Anime.js and set the `releaseMass` property.  The `releaseMass` affects the element's behavior after it is released, influencing its movement and bounciness. Two elements, square and circle, are initialized with different releaseMass values.",
    "codeLanguage": "javascript",
    "codeTokens": 132,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsreleasemass.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Draggable Release Mass Configuration",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  releaseMass: .1,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  releaseMass: 10,\n});"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "HTML Structure for CSS Variable Animation Demo",
    "codeDescription": "The HTML structure shows a grid of square elements that will be animated using CSS variables. These squares are the targets for the animation examples shown in the JavaScript code.",
    "codeLanguage": "html",
    "codeTokens": 142,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescss-variable.md#2025-04-18_snippet_2",
    "pageTitle": "AnimeJS: CSS Variable Animation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Basic Usage of roundPad Function in AnimeJS",
    "codeDescription": "Shows the basic syntax for using the roundPad utility in AnimeJS. It can be used directly to round and pad a value, or to create a reusable function with a pre-defined decimal length.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesround-pad.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Utilities - roundPad Function",
    "codeList": [
      {
        "language": "javascript",
        "code": "const roundedPaddedValue = utils.roundPad(value, decimalLength);\nconst roundPadderFunction = utils.roundPad(decimalLength);"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Implementing onRender Callback in Anime.js Animation",
    "codeDescription": "This example shows how to use the onRender callback in an Anime.js animation. It animates a circle element and updates a render count display on each render.",
    "codeLanguage": "javascript",
    "codeTokens": 127,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonrender.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nconst [ $rendersLog ] = utils.$('.value');\n\nlet renders = 0;\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  loopDelay: 1500,\n  loop: true,\n  alternate: true,\n  onRender: self => $rendersLog.textContent = ++renders\n});"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "HTML Structure for Scroll-Triggered Animation",
    "codeDescription": "This HTML structure provides a scrollable container and a target element for the Anime.js animation. The `.scroll-container` class defines the scrollable area, and the `.square` class targets the animated element.  The structure includes sections for scrolling down and up indications.",
    "codeLanguage": "html",
    "codeTokens": 208,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingsdebug.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js ScrollObserver Debug Setting",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <div class=\"label\">scroll up</div>\n      </div>\n    </div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.868
  },
  {
    "codeTitle": "HTML Structure for Draggable Elements",
    "codeDescription": "This HTML snippet defines the structure for the draggable elements and their container.  The `.square` and `.circle` elements are defined as draggable, and they are placed within a container element with the class `.grid`. This structure allows the Anime.js code to select and initialize the draggable behavior for these elements.",
    "codeLanguage": "html",
    "codeTokens": 113,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsreleasemass.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Draggable Release Mass Configuration",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered grid square-grid\">\n  <div class=\"square draggable\"></div>\n  <div class=\"circle draggable\"></div>\n</div>"
      }
    ],
    "relevance": 0.868
  },
  {
    "codeTitle": "Animate with ScrollObserver",
    "codeDescription": "Animates the 'targets' element, setting its x position to 100.  The autoplay parameter uses `onScroll(parameters)` to trigger the animation based on scroll position. The parameters object configures the ScrollObserver settings, thresholds, sync modes, and callbacks.",
    "codeLanguage": "javascript",
    "codeTokens": 85,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscroll.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Scroll Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate(targets, { x: 100, autoplay: onScroll(parameters) });"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Configuring Draggable Elements with ReleaseDamping - JavaScript",
    "codeDescription": "Demonstrates how to create draggable elements with different damping settings using AnimeJS. Shows configuration of both square and circle elements with custom releaseDamping and releaseStiffness values.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsreleasedamping.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Settings Documentation - AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  releaseDamping: 5,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  releaseStiffness: 30,\n});"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Importing Engine and Setting Default Duration in Anime.js",
    "codeDescription": "This code snippet demonstrates how to import the `engine` object from the Anime.js library and then set the default animation duration to 500 milliseconds. This will affect all subsequent Timer, Animation, and Timeline instances created.",
    "codeLanguage": "JavaScript",
    "codeTokens": 77,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-defaults.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Engine Defaults Configuration",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { engine } from 'animejs';\n\nengine.engine.defaults.duration = 500;"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Creating drawable SVG element",
    "codeDescription": "Creates a proxy of an SVG element with a draw property to control line visibility. The method accepts various SVG element types as targets and returns an array of proxy SVG elements.",
    "codeLanguage": "javascript",
    "codeTokens": 61,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationsvgcreatedrawable.md#2025-04-18_snippet_0",
    "pageTitle": "anime.js SVG Drawing Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const [ drawable ] = svg.createDrawable(target);"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Initializing Draggable Elements with Release Stiffness in Anime.js",
    "codeDescription": "This snippet demonstrates how to initialize draggable elements using the `createDraggable` function from Anime.js and configure the `releaseStiffness` property. The `releaseStiffness` parameter controls the bounciness and speed of the element after it is released.",
    "codeLanguage": "javascript",
    "codeTokens": 131,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsreleasestiffness.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Draggable Release Stiffness Configuration",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  releaseStiffness: 20,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  releaseStiffness: 300,\n});"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Using then() Method with Anime.js WAAPI",
    "codeDescription": "Demonstrates the inline usage of the then() method in Anime.js to execute a callback after animation completion. This replaces the finished property available in native WAAPI.",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapifinished.md#2025-04-18_snippet_0",
    "pageTitle": "API Differences between Anime.js and Web Animation API",
    "codeList": [
      {
        "language": "javascript",
        "code": "waapi.animate(target, {\n  translate: '100px',\n  duration: 500,\n}).then(callback);"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Setting Default onPause Callback Globally in Anime.js",
    "codeDescription": "Example of how to change the default onPause callback function globally by updating the engine.defaults object. This sets a default handler that logs the animation's ID whenever any animation is paused.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonpause.md#2025-04-18_snippet_0",
    "pageTitle": "Animation Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.onPause = self => console.log(self.id);"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Using roundPad as a Modifier in AnimeJS Animation",
    "codeDescription": "Demonstrates using the roundPad utility as a modifier in an animation sequence. This example animates the innerHTML property of an element with class 'value' from its current value to '8.1', formatting the values with 3 decimal places during the animation.",
    "codeLanguage": "javascript",
    "codeTokens": 120,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesround-pad.md#2025-04-18_snippet_3",
    "pageTitle": "AnimeJS Utilities - roundPad Function",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nanimate('.value', {\n  innerHTML: '8.1',\n  modifier: utils.roundPad(3),\n  duration: 10000,\n  ease: 'linear',\n});"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Implementing onLoop Callback in AnimateJS Animation",
    "codeDescription": "This example shows how to use the onLoop callback in an AnimateJS animation. It creates an animation that moves a circle element and updates a counter for each loop iteration.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-callbacksonloop.md#2025-04-18_snippet_1",
    "pageTitle": "AnimateJS Animation Callbacks Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet loops = 0;\n\nconst animation = animate('.circle', {\n  x: '16rem',\n  loopDelay: 1500,\n  loop: true,\n  alternate: true,\n  onLoop: self => $value.textContent = ++loops\n});"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "HTML Structure for Scroll Container",
    "codeDescription": "Defines the HTML layout for scroll-based animation with nested scroll sections and target element",
    "codeLanguage": "html",
    "codeTokens": 144,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-methodsrevert.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js ScrollObserver Revert Method",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "HTML Structure for Draggable Elements",
    "codeDescription": "This HTML snippet defines the structure for the draggable elements used in the Anime.js examples. It creates a grid containing a square and a circle, both marked with the 'draggable' class, enabling them to be dragged.",
    "codeLanguage": "html",
    "codeTokens": 96,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsvelocitymultiplier.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Draggable Velocity Multiplier",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered grid square-grid\">\n  <div class=\"square draggable\"></div>\n  <div class=\"circle draggable\"></div>\n</div>"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Configuring Alternate Option in anime.js Animations",
    "codeDescription": "This code shows three different configurations of the 'alternate' option in anime.js animations. It includes a normal animation, an alternating animation, and an alternating animation with reverse direction.",
    "codeLanguage": "javascript",
    "codeTokens": 159,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsalternate.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Playback Settings - Alternate Option",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate('.dir-normal', {\n  x: '17rem',\n  alternate: false, // Default\n  loop: 1,\n});\n\nanimate('.dir-alternate', {\n  x: '17rem',\n  alternate: true,\n  loop: 1, // Required to see the second iteration\n});\n\nanimate('.dir-alternate-reverse', {\n  x: '17rem',\n  alternate: true,\n  reversed: true,\n  loop: 1,\n});"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "HTML Structure for Logo and Button",
    "codeDescription": "This HTML snippet provides the structure for the logo (an SVG element) and the button that triggers the rotation animation.  The logo uses the class `logo js` for targeting in the JavaScript code, and the button is used to display the rotation count and trigger the animation.",
    "codeLanguage": "html",
    "codeTokens": 744,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedusing-with-vanilla-js.md#2025-04-18_snippet_6",
    "pageTitle": "Anime.js Vanilla JavaScript Integration",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered row\">\n  <svg class=\"logo js\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 630 630\"><path fill=\"currentColor\" d=\"M577,0 C606.271092,0 630,23.7289083 630,53 L630,577 C630,606.271092 606.271092,630 577,630 L53,630 C23.7289083,630 0,606.271092 0,577 L0,53 C0,23.7289083 23.7289083,0 53,0 L577,0 Z M479.5,285.89 C426.63,285.89 392.8,319.69 392.8,364.09 C392.8,411.808 420.615238,434.63146 462.622716,452.742599 L478.7,459.64 L483.441157,461.719734 C507.57404,472.359996 521.8,479.858 521.8,498.94 C521.8,515.88 506.13,528.14 481.6,528.14 C452.4,528.14 435.89,512.91 423.2,492.19 L375.09,520.14 C392.47,554.48 427.99,580.68 482.97,580.68 C539.2,580.68 581.07,551.48 581.07,498.18 C581.07,448.74 552.67,426.75 502.37,405.18 L487.57,398.84 L485.322788,397.859899 C461.5199,387.399087 451.17,380.1172 451.17,362.89 C451.17,348.52 462.16,337.52 479.5,337.52 C496.5,337.52 507.45,344.69 517.6,362.89 L563.7,333.29 C544.2,298.99 517.14,285.89 479.5,285.89 Z M343.09,289.27 L283.89,289.27 L283.89,490.57 C283.89,520.16 271.62,527.77 252.17,527.77 C231.83,527.77 223.37,513.82 214.07,497.32 L165.88,526.495 C179.84,556.04 207.29,580.57 254.69,580.57 C307.15,580.57 343.09,552.67 343.09,491.37 L343.09,289.27 Z\"/></svg>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button>rotations: 0</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Executing Method from Anime.js Scope",
    "codeDescription": "Executes a registered method from an Anime.js scope using the `methods` object and the method name.  The method is called on the scope's method object. No specific dependencies other than a previously defined and registered method within the scope.",
    "codeLanguage": "javascript",
    "codeTokens": 75,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscoperegister-method-function.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Scope Method Registration and Usage",
    "codeList": [
      {
        "language": "javascript",
        "code": "scope.methods.methodName(); // Execute the method"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Implementing Timer Pause Functionality with AnimeJS",
    "codeDescription": "Demonstrates creating a timer with pause callback functionality, updating UI elements on pause and time update. Includes event listeners for pause/resume controls.",
    "codeLanguage": "javascript",
    "codeTokens": 172,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonpause.md#2025-04-18_snippet_1",
    "pageTitle": "Timer Callbacks Documentation - AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $resumeButton, $pauseButton ] = utils.$('.button');\nconst [ $paused ] = utils.$('.paused');\nconst [ $time ] = utils.$('.time');\n\nlet paused = 0;\n\nconst timer = createTimer({\n  onPause: () => $paused.innerHTML = ++paused,\n  onUpdate: self => $time.innerHTML = self.currentTime\n});\n\nconst pauseTimer = () => timer.pause();\nconst resumeTimer = () => timer.resume();\n\n$resumeButton.addEventListener('click', resumeTimer);\n$pauseButton.addEventListener('click', pauseTimer);"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "HTML Structure for Scroll Animation",
    "codeDescription": "This HTML snippet defines the structure for the scroll animation example. It includes a scrollable container with sections containing a square, a timer display, and circles that are animated based on the scroll position.",
    "codeLanguage": "html",
    "codeTokens": 269,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscroll.md#2025-04-18_snippet_6",
    "pageTitle": "Anime.js Scroll Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large centered row\">\n        <pre class=\"large log row\">\n          <span class=\"label\">timer</span>\n          <span class=\"timer value lcd\">0</span>\n        </pre>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"circle\"></div>\n        <div class=\"circle\"></div>\n        <div class=\"circle\"></div>\n      </div>\n    </div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.862
  },
  {
    "codeTitle": "HTML Structure for Draggable Element and Resize Counter Display",
    "codeDescription": "This HTML snippet provides the structure for displaying a draggable square element within a grid container, along with a counter to show the number of resizes that have occurred.",
    "codeLanguage": "html",
    "codeTokens": 123,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksonresize.md#2025-04-18_snippet_1",
    "pageTitle": "Draggable Callbacks in Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"iframe-content resizable\">\n  <div class=\"large padded grid square-grid\">\n    <pre class=\"large log row\">\n      <span class=\"label\">resizes</span>\n      <span class=\"value\">0</span>\n    </pre>\n    <div class=\"square draggable\"></div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.862
  },
  {
    "codeTitle": "Implementing Timer Revert Functionality with AnimeJS in JavaScript",
    "codeDescription": "This code snippet demonstrates how to create and manipulate an AnimeJS timer using the revert() method. It sets up play and revert buttons, and updates a time display. The timer is created with an onUpdate callback to update the displayed time.",
    "codeLanguage": "javascript",
    "codeTokens": 183,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsrevert.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Timer Methods Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimer, utils } from 'animejs';\n\nconst [ $playButton ] = utils.$('.play');\nconst [ $revertButton ] = utils.$('.revert');\nconst [ $time ] = utils.$('.time');\n\nconst timer = createTimer({\n  onUpdate: self => $time.innerHTML = self.currentTime\n});\n\nconst playTimer = () => timer.play();\nconst revertTimer = () => {\n  timer.revert();\n  $time.innerHTML = timer.currentTime\n}\n\n$playButton.addEventListener('click', playTimer);\n$revertButton.addEventListener('click', revertTimer);"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "HTML Structure for Displaying AnimJS Timer Values",
    "codeDescription": "This HTML snippet creates a layout for displaying the current time and callback count of an AnimJS timer. It uses div elements with specific classes for styling and organization.",
    "codeLanguage": "html",
    "codeTokens": 157,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimer.md#2025-04-18_snippet_2",
    "pageTitle": "AnimJS Timer Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered row\">\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"value lcd\">0</span>\n    </pre>\n  </div>\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">callback fired</span>\n      <span class=\"value lcd\">0</span>\n    </pre>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Creating and Using Chain-able Utility Functions in JavaScript",
    "codeDescription": "Demonstrates how to create and use chain-able utility functions in Anime.js. The example shows clamping, rounding, and padding operations chained together.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieschain-able-utility-functions.md#2025-04-18_snippet_0",
    "pageTitle": "Chain-able Utility Functions in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const clampRoundPad = utils.clamp(0, 100).round(2).padStart(6, '0');\nclampRoundPad(125)   // '000100'\nclampRoundPad(75.25) // '075.25'"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Enabling ScrollObserver Debug Mode in Anime.js",
    "codeDescription": "This snippet demonstrates how to enable debug mode for an Anime.js animation triggered by scrolling.  The `debug: true` option within the `onScroll` configuration enables visual markers representing the enter and leave thresholds, helping to understand the animation trigger points. The `container` option specifies the scrollable container.",
    "codeLanguage": "javascript",
    "codeTokens": 156,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingsdebug.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js ScrollObserver Debug Setting",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, onScroll } from 'animejs';\n\nanimate('.square', {\n  x: '15rem',\n  rotate: '1turn',\n  duration: 2000,\n  alternate: true,\n  loop: true,\n  ease: 'inOutQuad',\n  autoplay: onScroll({\n    container: '.scroll-container',\n    debug: true,\n  })\n});"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Creating a Timer in Anime.js",
    "codeDescription": "Example of how to create a timer object using the createTimer function in Anime.js. This creates a timer with specified parameters that can be used to control animations.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-properties.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timer Properties Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const timer = createTimer(parameters);"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Animating with padEnd Modifier in Anime.js",
    "codeDescription": "Example of using the padEnd utility as a modifier in an animation to format the innerHTML value during animation.",
    "codeLanguage": "javascript",
    "codeTokens": 93,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiespad-end.md#2025-04-18_snippet_2",
    "pageTitle": "AnimJS Utility Function: padEnd",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nanimate('.value', {\n  innerHTML: 1,\n  modifier: utils.round(3).padEnd(6, '-'),\n  duration: 100000,\n  ease: 'linear',\n});"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Creating Normal and Reversed Animations with AnimeJS",
    "codeDescription": "Examples of creating animations with different direction settings using the 'reversed' property. One animation plays in the normal direction (false) while the other plays in reverse (true). Both animations loop continuously.",
    "codeLanguage": "javascript",
    "codeTokens": 124,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsreversed.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Playback Settings in AnimeJS: Reversed Property",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate('.dir-normal', {\n  x: '17rem',\n  reversed: false, // Default behaviour\n  loop: true\n});\n\nanimate('.dir-reverse', {\n  x: '17rem',\n  reversed: true,\n  loop: true\n});"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Setting Global Default for Reversed Timer in Anime.js",
    "codeDescription": "This snippet demonstrates how to change the default value of the 'reversed' property globally for all Anime.js animations. It imports the engine from Anime.js and sets the default 'reversed' value to true.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsreversed.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Timer Playback Settings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.reversed = true;"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "HTML Structure for Anime.js Animation Control",
    "codeDescription": "This HTML code defines the structure for the animation container and control buttons. It creates a container where the animations are displayed and two buttons: one to add animations and another to pause/resume the engine.  The classes are used for styling and selecting the elements with JavaScript.",
    "codeLanguage": "html",
    "codeTokens": 123,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-methodspause.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Engine Pause and Resume Example",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row container\"></div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button>Add animation</button>\n    <button>Pause for 3 seconds</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Setting Global Default for Alternate in anime.js",
    "codeDescription": "This snippet demonstrates how to change the default value of the 'alternate' option globally for all animations using the engine.defaults object.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsalternate.md#2025-04-18_snippet_0",
    "pageTitle": "Animation Playback Settings - Alternate Option",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.alternate = true;"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Creating a Draggable Element with Custom Scroll Threshold - JavaScript",
    "codeDescription": "This snippet demonstrates how to create a draggable element using the Anime.js library, specifying a custom scroll threshold. The 'container' option defines the scrolling element, and 'scrollThreshold' sets the number of pixels required to trigger scrolling.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsscrollthreshold.md#2025-04-18_snippet_0",
    "pageTitle": "Configuring Draggable Settings in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.scroll-container',\n  scrollThreshold: 12,\n});"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Setting Global Autoplay Default in AnimeJS",
    "codeDescription": "Demonstrates how to modify the default autoplay behavior globally for all animations by updating the engine defaults.",
    "codeLanguage": "javascript",
    "codeTokens": 53,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsautoplay.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Animation Playback Settings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.autoplay = false;"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Disabling a Draggable Element in Anime.js - JavaScript",
    "codeDescription": "This code snippet demonstrates how to disable a draggable element by using the Anime.js library. It imports necessary functions, sets up an event listener on a button, and invokes the disable method on the draggable object when the button is clicked. The draggable functionality is tied to a square div, and requires the Anime.js library to function properly.",
    "codeLanguage": "JavaScript",
    "codeTokens": 140,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsdisable.md#2025-04-18_snippet_0",
    "pageTitle": "Disabling Draggable in Anime.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { createDraggable, utils } from 'animejs';\n\nconst [ $disableButton ] = utils.$('.disable');\n\nconst draggable = createDraggable('.square');\n\nconst disableDraggable = () => draggable.disable();\n\n$disableButton.addEventListener('click', disableDraggable);"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "HTML Structure for Clock Demo",
    "codeDescription": "Defines the HTML structure for the clock demo interface, including the clock element container and user instruction label.",
    "codeLanguage": "html",
    "codeTokens": 95,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-settingsunit.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Animatable Settings Documentation - Unit Property",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered row\">\n  <div class=\"col\">\n    <div class=\"clock\"></div>\n  </div>\n</div>\n<div class=\"small centered row\">\n  <span class=\"label\">Move cursor around</span>\n</div>"
      }
    ],
    "relevance": 0.858
  },
  {
    "codeTitle": "HTML Structure for AnimeJS revert() Demo with Interactive Buttons",
    "codeDescription": "The HTML structure that accompanies the JavaScript example, containing square elements that will be animated and control buttons for triggering the revert() and restart() methods. It includes three rows with animated squares and buttons for user interaction.",
    "codeLanguage": "html",
    "codeTokens": 144,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsrevert.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Methods - revert() in AnimeJS",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button revert\">Revert</button>\n    <button class=\"button restart\">Restart</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Creating a Repeating Scroll Observer in Anime.js",
    "codeDescription": "This code snippet sets up a scroll observer using Anime.js that updates a value based on scroll actions. It uses 'createTimer' to manage the animation duration and behavior on scroll events, including repeated event handling.",
    "codeLanguage": "JavaScript",
    "codeTokens": 169,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-settingsrepeat.md#2025-04-18_snippet_0",
    "pageTitle": "Creating Scroll Observers in Anime.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { createTimer, onScroll, utils } from 'animejs';\n\nconst [ $repeat ] = utils.$('.repeat .value');\nlet repeatUpdates = 0;\n\ncreateTimer({\n  duration: 1000,\n  autoplay: onScroll({\n    container: '.scroll-container',\n    target: '.repeat',\n    enter: 'bottom-=40 top',\n    leave: 'top+=60 bottom',\n    onUpdate: () => $repeat.innerHTML = repeatUpdates++,\n    repeat: true,\n    debug: true,\n  })\n});"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Creating a Reversed Timeline with Anime.js",
    "codeDescription": "This code creates a reversed timeline using Anime.js. It animates three elements (.circle, .triangle, .square) along the x-axis and updates a time display. The timeline is set to play in reverse by default.",
    "codeLanguage": "javascript",
    "codeTokens": 154,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsreversed.md#2025-04-18_snippet_1",
    "pageTitle": "Timeline Playback Settings in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createTimeline, utils } from 'animejs';\n\nconst [ $time ] = utils.$('.time');\n\nconst tl = createTimeline({\n  reversed: true,\n  onUpdate: self => $time.innerHTML = self.currentTime\n})\n.add('.circle', { x: '15rem' })\n.add('.triangle', { x: '15rem' }, '-=500')\n.add('.square', { x: '15rem' }, '-=500');"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Using Random Utility Function in AnimeJS",
    "codeDescription": "Basic syntax for generating random numbers using AnimeJS utils.random() function. Takes minimum and maximum values with optional decimal places parameter.",
    "codeLanguage": "javascript",
    "codeTokens": 55,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesrandom.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Random Utility Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const randomValue = utils.random(min, max, decimalLength);"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "ScrollObserver Method Overview",
    "codeDescription": "Demonstrates the available methods for managing a ScrollObserver instance, including link(), refresh(), and revert() methods for controlling scroll behavior",
    "codeLanguage": "javascript",
    "codeTokens": 55,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-methods.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js ScrollObserver Methods",
    "codeList": [
      {
        "language": "javascript",
        "code": "scrollObserver.link()\nscrollObserver.refresh()\nscrollObserver.revert()"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Creating an Animatable Object in Anime.js",
    "codeDescription": "Demonstrates how to create an Animatable object using the createAnimatable function with targets and parameters. This is a core functionality introduced in Anime.js version 4.0.0.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-properties.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Animatable Properties Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const animatable = createAnimatable(targets, parameters);"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Applying snap utility as a modifier in anime.js animations",
    "codeDescription": "Practical example showing how to apply the snap utility as a modifier in anime.js animations to create normal and snapped rotation animations.",
    "codeLanguage": "javascript",
    "codeTokens": 131,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiessnap.md#2025-04-18_snippet_2",
    "pageTitle": "anime.js Snap Utility Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nanimate('.normal', {\n  rotate: '1turn',\n  duration: 3000,\n  loop: true,\n  ease: 'inOut',\n});\n\nanimate('.snapped', {\n  rotate: '1turn',\n  modifier: utils.snap(.25), // Used as a modifier\n  duration: 3000,\n  loop: true,\n  ease: 'inOut',\n});"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "HTML Structure for Anime.js Timeline Animation",
    "codeDescription": "Defines the HTML structure for the animation elements including a pyramid of shapes (triangle, square, circle) and a control button for triggering the reverse animation.",
    "codeLanguage": "html",
    "codeTokens": 129,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsreverse.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Timeline Reverse Method Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button reverse\">Reverse</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "HTML Structure for Timer Display and Controls",
    "codeDescription": "HTML layout for displaying the current time of the timer and a play button to manually control the timer. Includes containers with styling classes.",
    "codeLanguage": "html",
    "codeTokens": 136,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsautoplay.md#2025-04-18_snippet_2",
    "pageTitle": "Anime.js Timer Autoplay Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered row\">\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"play\">Play</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "HTML Structure for AnimeJS Animation Target",
    "codeDescription": "The HTML markup that defines the target element for the animation. It shows a square element inside a container with 'large row' classes.",
    "codeLanguage": "html",
    "codeTokens": 63,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesunit-conversion-value.md#2025-04-18_snippet_1",
    "pageTitle": "Unit Conversion in AnimeJS",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"square\"></div>\n</div>"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Configuring Draggable Elements with maxVelocity in AnimeJS",
    "codeDescription": "Demonstrates how to create draggable elements with different maxVelocity settings. The first example shows a square with no velocity after release (0), while the second shows a circle with maximum velocity of 100.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsmaxvelocity.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Draggable Settings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  maxVelocity: 0,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  maxVelocity: 100,\n});"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "HTML Structure for ScrollObserver Example",
    "codeDescription": "This HTML snippet defines the structure for the Anime.js ScrollObserver example. It includes a scrollable container (`scroll-container`) with nested divs representing scrollable sections and content.  The 'square' div is the element animated by Anime.js, and the 'value' span is updated by the `onLeave` callback.",
    "codeLanguage": "HTML",
    "codeTokens": 220,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-callbacksonleave.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js ScrollObserver onLeave Callback Example",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded sticky\">\n      <div class=\"large row\">\n        <pre class=\"large log row\">\n          <span class=\"label\">exits</span>\n          <span class=\"value\">0</span>\n        </pre>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "HTML Structure for AnimeJS Animation Demo",
    "codeDescription": "This HTML snippet defines the DOM structure needed for the animation demonstration. It includes two square elements that will be animated and a control button labeled 'Complete' that triggers the complete() method when clicked.",
    "codeLanguage": "html",
    "codeTokens": 129,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodscomplete.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Methods in AnimeJS: complete() Method",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button complete\">Complete</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Animating JavaScript Object Properties with Anime.js",
    "codeDescription": "This snippet demonstrates how to animate properties of a JavaScript object using Anime.js. It includes setting up the initial object, importing necessary functions from Anime.js, and defining the animation with a render callback to update the DOM.",
    "codeLanguage": "javascript",
    "codeTokens": 149,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiesjavascript-object-properties.md#2025-04-18_snippet_0",
    "pageTitle": "Animating JavaScript Object Properties with Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nconst myObject = {\n  number: 1337,\n  unit: '42%',\n}\n\nconst [ $log ] = utils.$('code');\n\nanimate(myObject, {\n  number: 50,\n  unit: '100%',\n  modifier: utils.round(0),\n  onRender: function() {\n    $log.innerHTML = JSON.stringify(myObject);\n  }\n});"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "HTML Structure for Animation",
    "codeDescription": "HTML markup showing the structure of multiple circle elements that are targeted by the animations.",
    "codeLanguage": "html",
    "codeTokens": 91,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apimulti-targets-animation.md#2025-04-18_snippet_3",
    "pageTitle": "Web Animation API Multi-Target Animation Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"circle\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"circle\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"circle\"></div>\n</div>"
      }
    ],
    "relevance": 0.852
  },
  {
    "codeTitle": "HTML Structure for Color Animation Example",
    "codeDescription": "HTML markup setting up multiple div elements with the 'circle' class for color animation demonstration. The structure consists of a container with multiple circle elements that will receive the animated color changes.",
    "codeLanguage": "html",
    "codeTokens": 122,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-function-value.md#2025-04-18_snippet_1",
    "pageTitle": "Animating CSS color() Functions in AnimeJS",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large justified row\">\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n</div>"
      }
    ],
    "relevance": 0.852
  },
  {
    "codeTitle": "Configuring Timeline Playback Ease with Individual Animations",
    "codeDescription": "Creates a timeline with custom playback easing and adds multiple animations with different easing functions for different elements.",
    "codeLanguage": "javascript",
    "codeTokens": 120,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsplaybackease.md#2025-04-18_snippet_1",
    "pageTitle": "Timeline Playback Settings in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const tl = createTimeline({\n  playbackEase: 'inOut(3)', // this ease is applied across all children\n})\n.add('.circle', { x: '15rem', ease: 'out(1)' })\n.add('.triangle', { x: '15rem', ease: 'out(2)' })\n.add('.square', { x: '15rem', ease: 'out(3)' });"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Timer Control Interface HTML Structure",
    "codeDescription": "HTML structure for displaying the timer controls and time display. Includes a large LCD-style time display and three control buttons for resume, pause, and alternate functions.",
    "codeLanguage": "html",
    "codeTokens": 164,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-methodsresume.md#2025-04-18_snippet_1",
    "pageTitle": "Resume Timer Method Documentation - AnimeJS",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered row\">\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">iteration time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button\">Resume</button>\n    <button class=\"button\">Pause</button>\n    <button class=\"button\">Alternate</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Basic Wrap Function Usage in JavaScript",
    "codeDescription": "Demonstrates the basic usage of the wrap utility function to constrain numbers within a range. Shows both direct value wrapping and creating a wrapper function.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitieswrap.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Wrap Utility Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const wrappedValue = utils.wrap(value, min, max);\nconst wrapperFunction = utils.wrap(min, max);"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Animating with Tween Parameters Array in AnimeJS",
    "codeDescription": "Creates an animation sequence using an array of objects with 'to' properties that specify target values for x and y properties. The animation will transition to each target value over the specified duration.",
    "codeLanguage": "javascript",
    "codeTokens": 98,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationkeyframes.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Animation Keyframes Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.square', {\n  x: [{to: 100}, {to: 200}],\n  y: [{to: 100}, {to: 200}],\n  duration: 3000,\n}"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "HTML Structure for Animation Demo",
    "codeDescription": "HTML markup demonstrating the structure needed for the animation examples, including elements with different style retention behaviors.",
    "codeLanguage": "html",
    "codeTokens": 115,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesclean-inline-styles.md#2025-04-18_snippet_2",
    "pageTitle": "AnimeJS Utilities Documentation - cleanInlineStyles",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square keep-styles\"></div>\n  <div class=\"padded label\">Keep styles (default)</div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square clean-styles\"></div>\n  <div class=\"padded label\">Clean translateX and borderRadius</div>\n</div>"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Configuring Global Timer Loop Defaults in AnimeJS",
    "codeDescription": "Shows how to modify the default loop behavior globally in AnimeJS by updating the engine defaults. This affects all timers created afterward unless overridden.",
    "codeLanguage": "javascript",
    "codeTokens": 59,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsloop.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Timer Loop Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.loop = true;"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Implementing $ Utility with Global and Scoped Selections in Anime.js",
    "codeDescription": "Example showing how to use the $ utility to select elements globally and within a specific scope. It demonstrates setting scale on all squares and rotating only squares within a specific row.",
    "codeLanguage": "javascript",
    "codeTokens": 155,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesdollar-sign.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js $ Utility Function Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { utils, createScope } from 'animejs';\n\n// Targets all the '.square' elements\nutils.$('.square').forEach($square => {\n  utils.set($square, { scale: .5 });\n});\n\ncreateScope({ root: '.row:nth-child(2)' }).add(() => {\n  // Limits the selection to '.row:nth-child(2) .square'\n  utils.$('.square').forEach($square => {\n    utils.set($square, { rotate: 45 });\n  });\n});"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Animation Demo HTML Structure",
    "codeDescription": "HTML structure for the animation demo containing multiple circles and a revert button control.",
    "codeLanguage": "html",
    "codeTokens": 123,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimatableanimatable-methodsrevert.md#2025-04-18_snippet_1",
    "pageTitle": "Animatable Methods Documentation - AnimeJS",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered row\">\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n  <div class=\"circle\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button revert\">Revert</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "HTML Structure for Scroll Animation - HTML",
    "codeDescription": "This code snippet provides the necessary HTML structure to complement the JavaScript animation. It defines a scrollable container with multiple sections and squares that will be animated as the user scrolls down the page. The proper division and class names ensure that the scrolling and animation functionalities work in tandem.",
    "codeLanguage": "html",
    "codeTokens": 192,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-synchronisation-modeseased-scroll.md#2025-04-18_snippet_1",
    "pageTitle": "Animating Scroll Effects with Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Unit Inheritance in Anime.js Animations",
    "codeDescription": "Shows how Anime.js inherits units from previous animations on the same property when no unit is specified in subsequent animations.",
    "codeLanguage": "javascript",
    "codeTokens": 72,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesnumerical-value.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Documentation: Tween Value Types",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate(target, { width: '50%' }); // Uses '%'\nanimate(target, { width: 75 });    // Inherits '%' -> '75%'"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Create Timer with Anime.js",
    "codeDescription": "This JavaScript code creates two timers using the `createTimer` function (assumed to be defined elsewhere), one configured to run in seconds and another in milliseconds.  These timers update the HTML content with current iteration time. It showcases the usage of `utils.roundPad` to format the displayed time.",
    "codeLanguage": "javascript",
    "codeTokens": 201,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterstimeunit-seconds-milliseconds.md#2025-04-18_snippet_2",
    "pageTitle": "Anime.js Engine Time Unit Configuration",
    "codeList": [
      {
        "language": "javascript",
        "code": "const [ $timeS ] = utils.$('.time-s');\nconst [ $timeMs ] = utils.$('.time-ms');\nconst [ $ms, $s ] = utils.$('.toggle');\n\nconst secondsTimer = createTimer({\n  duration: 1,\n  loop: true,\n  onUpdate: self => $timeS.innerHTML = utils.roundPad(self.iterationCurrentTime, 2)\n});\n\nconst millisecondsTimer = createTimer({\n  duration: 1000,\n  loop: true,\n  onUpdate: self => $timeMs.innerHTML = utils.roundPad(self.iterationCurrentTime, 2)\n});"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Configuring Loop Delay for Specific Animation in AnimeJS",
    "codeDescription": "Shows how to create an animation with specific loop delay settings, including scale transformation and alternating animation.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsplayback-loopdelay.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Playback Settings - Loop Delay in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "const loopDelayAnimation = animate('.circle', {\n  x: '16rem',\n  scale: {\n    to: 1.8,\n    delay: 500,\n    duration: 500,\n  },\n  loopDelay: 1000,\n  loop: true,\n  alternate: true,\n});"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Importing and Using Anime.js WAAPI Module",
    "codeDescription": "Demonstrates how to import the WAAPI module from Anime.js and use it to animate an element with a translation of 16rem.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apisensible-defaults.md#2025-04-18_snippet_2",
    "pageTitle": "Improvements to Web Animation API in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { waapi } from 'animejs';\n\nwaapi.animate('.circle', { translate: '16rem' });"
      }
    ],
    "relevance": 0.848
  },
  {
    "codeTitle": "SVG Markup with Displacement Filter",
    "codeDescription": "HTML markup for an SVG element that includes a displacement filter and a polygon shape. This SVG demonstrates the visual output of the animation examples, showing a hexagon that can be animated.",
    "codeLanguage": "html",
    "codeTokens": 207,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimatable-propertiessvg-attributes.md#2025-04-18_snippet_2",
    "pageTitle": "Animating SVG Attributes with Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered row\">\n<svg width=\"128\" height=\"128\" viewBox=\"0 0 128 128\">\n  <filter id=\"displacementFilter\">\n    <feTurbulence type=\"turbulence\" numOctaves=\"2\" baseFrequency=\"0\" result=\"turbulence\"/>\n    <feDisplacementMap in2=\"turbulence\" in=\"SourceGraphic\" scale=\"1\" xChannelSelector=\"R\" yChannelSelector=\"G\"/>\n  </filter>\n  <polygon points=\"64 128 8.574 96 8.574 32 64 0 119.426 32 119.426 96\"  fill=\"currentColor\"/>\n</svg>\n</div>"
      }
    ],
    "relevance": 0.848
  },
  {
    "codeTitle": "Implementing onGrab Callback for Draggable Elements in Anime.js",
    "codeDescription": "This snippet demonstrates how to use the onGrab callback with createDraggable in Anime.js. It creates a draggable square and updates a counter each time the element is grabbed.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksongrab.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable, utils } from 'animejs';\n\nconst [ $value ] = utils.$('.value');\n\nlet grabs = 0;\n\ncreateDraggable('.square', {\n  container: '.grid',\n  onGrab: () => $value.textContent = ++grabs\n});"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Implementing cleanInlineStyles with Animations",
    "codeDescription": "Comprehensive example showing how to use cleanInlineStyles with animations, including setting initial styles and cleaning specific properties while keeping others.",
    "codeLanguage": "javascript",
    "codeTokens": 141,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesclean-inline-styles.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Utilities Documentation - cleanInlineStyles",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nutils.set('.square', { scale: .75 });\n\nanimate('.keep-styles', {\n  x: '23rem',\n  borderRadius: '50%',\n});\n\nanimate('.clean-styles', {\n  x: '23rem',\n  borderRadius: '50%',\n  // This removes the translateX and borderRadius inline styles\n  // But keeps the scale previously added outside of this animation\n  onComplete: utils.cleanInlineStyles\n});"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "HTML Structure for Anime.js restart() Demo",
    "codeDescription": "This HTML markup creates the structure needed for the restart() method demonstration. It includes square elements that will be animated and a restart button that triggers the animation restart.",
    "codeLanguage": "html",
    "codeTokens": 120,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsrestart.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Animation Methods: restart()",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button restart\">Restart</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "HTML Structure for Anime.js Animation",
    "codeDescription": "Provides the HTML structure for the elements being animated in the timeline example. It includes a pyramid structure with triangle, square, and circle elements.",
    "codeLanguage": "html",
    "codeTokens": 93,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimeline.md#2025-04-18_snippet_2",
    "pageTitle": "Anime.js Timeline Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Configuring Draggable Elements with containerFriction in Anime.js",
    "codeDescription": "This snippet demonstrates how to create draggable elements with different containerFriction values using Anime.js. It shows two examples: one with no friction (0) and another with maximum friction (1).",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingscontainerfriction.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Draggable Settings Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  containerFriction: 0,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  containerFriction: 1,\n});"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Animating Rotation in Degrees and Radians with Anime.js",
    "codeDescription": "Illustrates how to use the degToRad utility in an animation context. It creates two animatables, one for degrees and one for radians, and synchronizes their rotation using the degToRad conversion.",
    "codeLanguage": "javascript",
    "codeTokens": 177,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesdeg-to-rad.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Utilities: Degrees to Radians Conversion",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, createAnimatable, utils } from 'animejs';\n\nconst radAnimatable = createAnimatable('.rad', {\n  rotate: { unit: 'rad', duration: 0 },\n});\n\nconst [ $deg ] = utils.$('.deg');\n\nconst degAnimation = animate($deg, {\n  rotate: '360deg',\n  ease: 'linear',\n  loop: true,\n  onUpdate: () => {\n    const degrees = utils.get($deg, 'rotate', false);\n    radAnimatable.rotate(utils.degToRad(degrees));\n  }\n});"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "HTML Structure for Anime.js Timeline Demo",
    "codeDescription": "This HTML snippet provides the structure for the Anime.js timeline demo. It includes animated elements (triangle, square, circle) and control buttons for pause, alternate, and resume actions.",
    "codeLanguage": "html",
    "codeTokens": 156,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsresume.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Timeline Resume Method Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button\">Pause</button>\n    <button class=\"button\">Alternate</button>\n    <button class=\"button\">Resume</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Setting Global Default for Reversed Timeline in Anime.js",
    "codeDescription": "This snippet demonstrates how to change the default value of the 'reversed' property globally for all timelines in Anime.js. It imports the engine from 'animejs' and sets the default reversed value to true.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsreversed.md#2025-04-18_snippet_0",
    "pageTitle": "Timeline Playback Settings in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.reversed = true;"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "AnimeJS Round Utility in Animation Example",
    "codeDescription": "Demonstrates using the round utility in actual animations. It creates two animations, one normal and one with rotation values rounded to one decimal place using the round utility as a modifier function.",
    "codeLanguage": "javascript",
    "codeTokens": 128,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesround.md#2025-04-18_snippet_2",
    "pageTitle": "AnimeJS Round Utility Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate, utils } from 'animejs';\n\nanimate('.normal', {\n  rotate: '1turn',\n  duration: 3000,\n  loop: true,\n});\n\nanimate('.rounded', {\n  rotate: '1turn',\n  modifier: utils.round(1), // Used as a function\n  duration: 3000,\n  loop: true,\n});"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "HTML Structure for Anime.js Timeline Animation",
    "codeDescription": "This HTML structure contains the elements targeted by the Anime.js timeline animation. It includes triangle, square, and circle elements arranged in a pyramid layout.",
    "codeLanguage": "html",
    "codeTokens": 96,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-playback-settingsdefaults.md#2025-04-18_snippet_1",
    "pageTitle": "Timeline Playback Settings in Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "HTML Structure for Animating Squares with anime.js",
    "codeDescription": "HTML markup that creates a series of square elements organized in rows. These elements are targeted by the anime.js animation to demonstrate individual CSS transform properties.",
    "codeLanguage": "html",
    "codeTokens": 122,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apiindividual-css-transforms.md#2025-04-18_snippet_1",
    "pageTitle": "Individual CSS Transforms in Web Animation API",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n</div>"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "HTML Structure for Staggered Grid Animation",
    "codeDescription": "This snippet provides the HTML structure necessary for rendering the animated squares in a staggered grid. Each square is contained within a div, and this layout is essential for the associated JavaScript animations to function correctly.",
    "codeLanguage": "HTML",
    "codeTokens": 501,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggerstagger-parametersstagger-grid-axis.md#2025-04-18_snippet_1",
    "pageTitle": "Animating Staggered Grids Using Anime.js in JavaScript",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>\n<div class=\"small justified row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Animating with HEX Color Values in Anime.js",
    "codeDescription": "This snippet demonstrates how to use HEX color values in Anime.js animations. It targets an element with the class 'hex' and animates its background color to '#FF4B4B'.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-value.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Color Value Types Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { animate } from 'animejs';\n\nanimate('.hex',  {\n  background: '#FF4B4B',\n});"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Creating Draggable Elements",
    "codeDescription": "This snippet creates a draggable element using the `createDraggable` function. It targets elements with the class `.logo.js` and configures the draggable behavior. It also uses `createSpring` for the `releaseEase` property, providing a spring-like effect when the element is released.",
    "codeLanguage": "javascript",
    "codeTokens": 120,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationgetting-startedusing-with-vanilla-js.md#2025-04-18_snippet_3",
    "pageTitle": "Anime.js Vanilla JavaScript Integration",
    "codeList": [
      {
        "language": "javascript",
        "code": "// Make the logo draggable around its center\ncreateDraggable('.logo.js', {\n  container: [0, 0, 0, 0],\n  releaseEase: createSpring({ stiffness: 200 })\n});"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Using remove() Utility Function in Anime.js",
    "codeDescription": "Demonstrates the usage of the remove() utility function to remove targets from animations. It accepts targets, an optional animation instance, and an optional property name. Returns an array of removed targeted elements.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesremove.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Utilities: Remove Function",
    "codeList": [
      {
        "language": "javascript",
        "code": "const removed = utils.remove(targets, instance, propertyName);"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "HTML Structure for Timeline Animation Controls",
    "codeDescription": "Defines the HTML structure for displaying animated elements and timeline controls. Includes a pyramid of shapes and a range input for controlling animation duration.",
    "codeLanguage": "html",
    "codeTokens": 177,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-methodsstretch.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Timeline Stretch Method Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"medium pyramid\">\n    <div class=\"triangle\"></div>\n    <div class=\"square\"></div>\n    <div class=\"circle\"></div>\n  </div>\n  <pre class=\"large log row\">\n    <span class=\"label\">total duration</span>\n    <span class=\"value\">0</span>\n  </pre>\n</div>\n<div class=\"medium centered row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=100 max=2000 value=1000 step=100 class=\"seek range\" />\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.842
  },
  {
    "codeTitle": "HTML Structure for Anime.js Animation Demo",
    "codeDescription": "HTML markup showing the target elements for the animation. Six square div elements are arranged in a row that will be animated using the WAAPI implementation.",
    "codeLanguage": "html",
    "codeTokens": 115,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apiindividual-property-parameters.md#2025-04-18_snippet_2",
    "pageTitle": "Improvements to Web Animation API in Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n  <div class=\"square\"></div>\n</div>"
      }
    ],
    "relevance": 0.842
  },
  {
    "codeTitle": "HTML Structure for AnimeJS Animation Demo",
    "codeDescription": "This HTML snippet provides the structure for demonstrating the AnimeJS animation refresh functionality. It includes containers for animated squares and a button to trigger the refresh and restart actions.",
    "codeLanguage": "html",
    "codeTokens": 120,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsrefresh.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Methods in AnimeJS",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button refresh\">Refresh & Restart</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Basic AnimeJS Set Utility Syntax",
    "codeDescription": "Shows the basic syntax for using utils.set() to set property values on target elements. Returns an Animation object that can be used to revert changes.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesset.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS Utils.set() Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const setter = utils.set(targets, properties);"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Initializing CreateScope with AnimeJS - JavaScript",
    "codeDescription": "This code snippet demonstrates the initialization of a scope using AnimeJS's 'createScope' method. It introduces several methods such as 'add', 'refresh', and 'revert' which allow users to manipulate and manage animation scopes. The snippet does not detail parameters for 'createScope'.",
    "codeLanguage": "JavaScript",
    "codeTokens": 82,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methods.md#2025-04-18_snippet_0",
    "pageTitle": "Scope Methods Initialization with AnimeJS",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "const scope = createScope(parameters);"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "HTML Structure for Draggable Demo",
    "codeDescription": "Defines the HTML structure required for the draggable element and drag counter display. Includes a grid container, log display area, and the draggable square element.",
    "codeLanguage": "html",
    "codeTokens": 108,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-callbacksondrag.md#2025-04-18_snippet_1",
    "pageTitle": "Draggable Callbacks Documentation for Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large padded grid square-grid\">\n  <pre class=\"large log row\">\n    <span class=\"label\">drags</span>\n    <span class=\"value\">0</span>\n  </pre>\n  <div class=\"square draggable\"></div>\n</div>"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Advanced Anime.js Animation with Dynamic Duration",
    "codeDescription": "This snippet showcases a more advanced use of Anime.js, where the duration of each element's animation is determined by its data attribute. It also imports necessary functions from the Anime.js library.",
    "codeLanguage": "javascript",
    "codeTokens": 141,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apifunction-based-values.md#2025-04-18_snippet_2",
    "pageTitle": "Function-based Values in Web Animation API",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { waapi, utils, stagger } from 'animejs';\n\nwaapi.animate('.square', {\n  translate: () => `${utils.random(10, 17)}rem`,\n  rotate: () => utils.random(-180, 180),\n  scale: (_, i) => .25 + (i * .25),\n  duration: $el => $el.dataset.duration,\n  delay: stagger(100)\n});"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "WAAPI Native Implementation for Multiple Elements",
    "codeDescription": "Native Web Animation API implementation showing how to animate multiple elements with staggered delay using forEach loop.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiimprovements-to-the-web-animation-apimulti-targets-animation.md#2025-04-18_snippet_1",
    "pageTitle": "Web Animation API Multi-Target Animation Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "document.querySelectorAll('.circle').forEach(($el, i) => {\n  $el.animate({\n    translate: '100px',\n  }, {\n    duration: 1000,\n    delay: i * 100,\n    easing: 'ease-out',\n  }).finished.then(() => {\n    $el.style.translate = '100px';\n  })\n});"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "HTML Structure for Animation Target",
    "codeDescription": "Provides the HTML structure for the animation target, including a container div and a square element to be animated.",
    "codeLanguage": "html",
    "codeTokens": 59,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesnumerical-value.md#2025-04-18_snippet_3",
    "pageTitle": "Anime.js Documentation: Tween Value Types",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"square\"></div>\n</div>"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "HTML Structure for Staggered Animation Demo",
    "codeDescription": "HTML markup showing the structure for demonstrating staggered animations with multiple square elements and their corresponding timing labels. Each row contains a square element and its timing information.",
    "codeLanguage": "html",
    "codeTokens": 220,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationstaggertime-staggering.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Stagger Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"small row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">delay: 0ms;&nbsp;&nbsp;&nbsp;duration: 500ms</div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">delay: 100ms; duration: 700ms</div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">delay: 200ms; duration: 900ms</div>\n</div>\n<div class=\"small row\">\n  <div class=\"square\"></div>\n  <div class=\"padded label\">delay: 300ms; duration: 1100ms</div>\n</div>"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Animating with HSL Color Values in Anime.js",
    "codeDescription": "This snippet illustrates the use of HSL color values in Anime.js animations. It targets an element with the class 'hsl' and animates its background color to 'hsl(44, 100%, 59%)'.",
    "codeLanguage": "javascript",
    "codeTokens": 88,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescolor-value.md#2025-04-18_snippet_2",
    "pageTitle": "Anime.js Color Value Types Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "animate('.hsl',  {\n  background: 'hsl(44, 100%, 59%)',\n});"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "HTML Structure for AnimeJS Animation Demo",
    "codeDescription": "This HTML snippet provides the structure for the animation demo. It includes two square elements that will be animated, and control buttons for cancelling and playing the animation.",
    "codeLanguage": "html",
    "codeTokens": 130,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodscancel.md#2025-04-18_snippet_1",
    "pageTitle": "Animation Cancellation in AnimeJS",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button cancel\">Cancel</button>\n    <button class=\"button play\">Play</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Animating Elements with Native Web Animation API",
    "codeDescription": "Illustrates how to use the native Web Animation API's element.animate() method to achieve similar animation effects. It shows differences in syntax for element selection, keyframe definition, and animation option settings.",
    "codeLanguage": "javascript",
    "codeTokens": 114,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapi.md#2025-04-18_snippet_1",
    "pageTitle": "Web Animation API Differences: Anime.js vs. Native WAAPI",
    "codeList": [
      {
        "language": "javascript",
        "code": "const $square = document.querySelector('.square');\n\n$square\n.animate({\ntranslate: '100px 50px',\nopacity: .5,\n}, {\nieterations: 4,\ndirection: 'alternate',\neasing: 'ease-out',\n});"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Importing Engine Properties in Anime.js - JavaScript",
    "codeDescription": "This snippet demonstrates how to import the engine object from the 'animejs' module, providing access to various engine properties that control animation behavior, such as time units, frame rates, and playback settings. The 'animejs' module is a dependency for using these engine properties.",
    "codeLanguage": "JavaScript",
    "codeTokens": 81,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-properties.md#2025-04-18_snippet_0",
    "pageTitle": "Anime.js Engine Properties Documentation",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { engine } from 'animejs';"
      }
    ],
    "relevance": 0.838
  },
  {
    "codeTitle": "HTML Structure for Animation Speed Control Demo",
    "codeDescription": "HTML markup for the animation playback rate demo, featuring a circle element that will be animated, a display for the current speed value, and a range input control for adjusting the animation speed.",
    "codeLanguage": "html",
    "codeTokens": 157,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-playback-settingsplaybackrate.md#2025-04-18_snippet_2",
    "pageTitle": "Animation Playback Rate Documentation for Anime.js",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large row\">\n  <div class=\"circle\"></div>\n  <pre class=\"large log row\">\n    <span class=\"label\">speed</span>\n    <span class=\"speed value\">1.00</span>\n  </pre>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <input type=\"range\" min=0 max=5 value=1 step=.01 class=\"range\" />\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.838
  },
  {
    "codeTitle": "Animating CSS Variables with AnimeJS WAAPI method",
    "codeDescription": "This example shows how to animate CSS variables using the WAAPI animate() method. CSS variables can be directly referenced using the 'var(--variable-name)' syntax without additional helpers.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typescss-variable.md#2025-04-18_snippet_0",
    "pageTitle": "AnimeJS: CSS Variable Animation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { waapi, animate } from 'animejs';\n\nwaapi.animate('.square',  {\n  rotate: 'var(--rotation)',\n  borderColor: ['var(--hex-orange)', 'var(--hex-red)' ],\n});"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Implementing Draggable Stop Method in AnimeJS",
    "codeDescription": "This snippet demonstrates how to use the 'stop' method on a Draggable object in AnimeJS. It creates a draggable square, animates it, and provides a button to stop all animations. The 'stop' method halts all running animations on the draggable, including container scroll and release animations.",
    "codeLanguage": "javascript",
    "codeTokens": 161,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-methodsstop.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Methods in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable, animate, utils } from 'animejs';\n\nconst [ $stopButton ] = utils.$('.stop');\n\nconst draggable = createDraggable('.square');\n\nanimate(draggable, {\n  x: [-100, 100],\n  alternate: true,\n  loop: true\n});\n\nconst stopDraggable = () => draggable.stop();\n\n$stopButton.addEventListener('click', stopDraggable);"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "HTML Structure for Reverse Animation Demo",
    "codeDescription": "Defines the HTML structure for demonstrating the reverse animation, including two square elements and a control button. The layout uses rows for organization and includes a fieldset for controls.",
    "codeLanguage": "html",
    "codeTokens": 119,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationanimation-methodsreverse.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Animation Methods Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\"></div>\n</div>\n<div class=\"medium row\">\n  <fieldset class=\"controls\">\n    <button class=\"button reverse\">Reverse</button>\n  </fieldset>\n</div>"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Setting Default onRender Callback Globally in Anime.js",
    "codeDescription": "This snippet demonstrates how to set a default onRender callback globally for all timelines using the engine.defaults object in Anime.js.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimelinetimeline-callbacksonrender.md#2025-04-18_snippet_0",
    "pageTitle": "Timeline Callbacks in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.onRender = self => console.log(self.id);"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Applying Axis Modifiers in AnimeJS Draggable",
    "codeDescription": "This snippet demonstrates how to use the 'modifier' parameter in createDraggable to limit the movement range of a draggable element. It uses the utils.wrap function to constrain the movement globally and specifically for the x-axis.",
    "codeLanguage": "javascript",
    "codeTokens": 122,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-axes-parametersmodifier.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Axes Parameters in AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable, utils } from 'animejs';\n\ncreateDraggable('.square', {\n  modifier: utils.wrap(-32, 32), // Global to both x and y\n  x: { modifier: utils.wrap(-128, 128) }, // Specific to x \n});"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Configuring releaseContainerFriction for Draggable Elements in Anime.js",
    "codeDescription": "This snippet demonstrates how to create draggable elements with different releaseContainerFriction values. It shows two examples: one with no friction (0) and another with maximum friction (1).",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationdraggabledraggable-settingsreleasecontainerfriction.md#2025-04-18_snippet_0",
    "pageTitle": "Draggable Settings in Anime.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createDraggable } from 'animejs';\n\ncreateDraggable('.square', {\n  container: '.grid',\n  releaseContainerFriction: 0,\n});\n\ncreateDraggable('.circle', {\n  container: '.grid',\n  releaseContainerFriction: 1,\n});"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "HTML Structure for AnimeJS Animation Targets",
    "codeDescription": "HTML markup defining the target elements for the animation. Each square element has a data-x attribute that's used in the animation to set different x values for each target.",
    "codeLanguage": "html",
    "codeTokens": 121,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationanimationtween-value-typesfunction-based.md#2025-04-18_snippet_1",
    "pageTitle": "AnimeJS Animation Tween Value Types",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"medium row\">\n  <div class=\"square\" data-x=\"170\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\" data-x=\"80\"></div>\n</div>\n<div class=\"medium row\">\n  <div class=\"square\" data-x=\"270\"></div>\n</div>"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Defining Event Listener Functions for Animation",
    "codeDescription": "These functions, `onMouseEnter` and `onMouseLeave`, define the animations that occur when the mouse enters or leaves an element.  `onMouseEnter` scales the element up, and `onMouseLeave` scales it back down. The `animate` function is assumed to be globally available and handles the actual animation logic.",
    "codeLanguage": "javascript",
    "codeTokens": 126,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscopescope-methodsrevert.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Scope Revert Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "function onMouseEnter() { animate(this, { scale: 2, duration: 250 }) }\nfunction onMouseLeave() { animate(this, { scale: 1, duration: 750 }) }"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Equivalent animation using Web Animation API",
    "codeDescription": "This code snippet shows how to achieve the same animation effect as the Anime.js example using the native Web Animation API. It selects all elements with the 'square' class and animates them to translate 100 pixels, with alternate-reverse direction for 4 iterations.",
    "codeLanguage": "javascript",
    "codeTokens": 137,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationweb-animation-apiapi-differences-with-native-waapidirection.md#2025-04-18_snippet_1",
    "pageTitle": "API Differences between Anime.js and Web Animation API",
    "codeList": [
      {
        "language": "javascript",
        "code": "const targets = document.querySelectorAll('.square');\n\ntargets.forEach(($el, i) => {\n  $el.animate({\n    translate: '100px',\n  }, {\n    fill: 'forwards',\n    duration: 1000,\n    direction: 'alternate-reverse',\n    iterations: 4\n  })\n});"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "HTML Structure for Timer Display",
    "codeDescription": "This HTML snippet creates a layout for displaying the current time of the Anime.js timer. It consists of a container with a label and a value display element that will be updated by the timer.",
    "codeLanguage": "html",
    "codeTokens": 118,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-playback-settingsduration.md#2025-04-18_snippet_1",
    "pageTitle": "Anime.js Timer Documentation: Duration Property",
    "codeList": [
      {
        "language": "html",
        "code": "<div class=\"large centered row\">\n  <div class=\"half col\">\n    <pre class=\"large log row\">\n      <span class=\"label\">current time</span>\n      <span class=\"time value lcd\">0</span>\n    </pre>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Shuffling Array Elements with Anime.js Utils in JavaScript",
    "codeDescription": "Demonstrates how to use the shuffle utility function from Anime.js to randomize an array. It takes an array as input and returns the mutated array with randomized element order.",
    "codeLanguage": "javascript",
    "codeTokens": 61,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationutilitiesshuffle.md#2025-04-18_snippet_0",
    "pageTitle": "Shuffling Arrays with Anime.js Utils",
    "codeList": [
      {
        "language": "javascript",
        "code": "const shuffledArray = utils.shuffle(array);"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "HTML Structure for Scroll Synchronized Animation",
    "codeDescription": "The HTML snippet outlines the necessary structure for implementing scroll-synchronized animations using Anime.js. It includes a scroll container with sections and a square element that will be animated. The setup assumes integration with a JavaScript animation script using Anime.js.",
    "codeLanguage": "HTML",
    "codeTokens": 177,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationscrollscrollobserver-synchronisation-modesplayback-progress.md#2025-04-18_snippet_1",
    "pageTitle": "Synchronizing Scroll with Anime.js Animations",
    "codeList": [
      {
        "language": "HTML",
        "code": "<div class=\"scroll-container scroll-y\">\n  <div class=\"scroll-content grid square-grid\">\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"label\">scroll down</div>\n      </div>\n    </div>\n    <div class=\"scroll-section padded\">\n      <div class=\"large row\">\n        <div class=\"square\"></div>\n      </div>\n    </div>\n    <div class=\"scroll-section\">\n    </div>\n  </div>\n</div>"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Managing Timer Updates in Anime.js",
    "codeDescription": "This snippet illustrates the setup of two timers: a global timer that tracks elapsed time since the script started, and an engine timer that updates based on the current time of the Anime.js engine. The timers are linked to HTML elements for live updates.",
    "codeLanguage": "JavaScript",
    "codeTokens": 158,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationengineengine-parameterspauseondocumenthidden.md#2025-04-18_snippet_1",
    "pageTitle": "Controlling Animation Engine Pause Behavior in Anime.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "const [ $globalTime ] = utils.$('.global-time');\nconst [ $engineTime ] = utils.$('.engine-time');\nconst [ $toggle ] = utils.$('.toggle');\n\nconst startTime = Date.now();\n\nconst globalTimer = setInterval(() => {\n  $globalTime.innerHTML = Date.now() - startTime;\n}, 16);\n\nconst engineTimer = createTimer({\n  onUpdate: self => $engineTime.innerHTML = self.currentTime\n});"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Setting Default onBegin Callback in AnimeJS",
    "codeDescription": "Demonstrates how to globally set the default onBegin callback using the engine.defaults object. The callback receives the timer instance as its argument.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/Ogyeet10/animejs-docs/blob/master/documentationtimertimer-callbacksonbegin.md#2025-04-18_snippet_0",
    "pageTitle": "Timer Callbacks Documentation for AnimeJS",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { engine } from 'animejs';\nengine.defaults.onBegin = self => console.log(self.id);"
      }
    ],
    "relevance": 0.835
  }
]