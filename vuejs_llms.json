[
  {
    "codeTitle": "Complete Single-File Component - Composition API",
    "codeDescription": "Full example of a Vue Single-File Component using Composition API with script setup syntax.",
    "codeLanguage": "vue",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Introduction Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Creating Reactive State with ref() in Vue.js (Composition API)",
    "codeDescription": "Shows how to use Vue's `ref()` API to create reactive references for primitive values. The example demonstrates declaring a reactive string and accessing/modifying its value through the `.value` property.",
    "codeLanguage": "javascript",
    "codeTokens": 83,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#2025-04-08_snippet_1",
    "pageTitle": "Declarative Rendering in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref } from 'vue'\n\nconst message = ref('Hello World!')\n\nconsole.log(message.value) // \"Hello World!\"\nmessage.value = 'Changed'"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Creating a Vue Application with npm",
    "codeDescription": "Command to create a new Vue.js project using npm and the create-vue scaffolding tool. This sets up a Single Page Application with Vite as the build tool.",
    "codeLanguage": "sh",
    "codeTokens": 51,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Quick Start Guide",
    "codeList": [
      {
        "language": "sh",
        "code": "$ npm create vue@latest"
      }
    ],
    "relevance": 0.995
  },
  {
    "codeTitle": "Reusing Components Example",
    "codeDescription": "Demonstrates component reusability by using multiple instances of the same component.",
    "codeLanguage": "vue-html",
    "codeTokens": 48,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<h1>Here are many child components!</h1>\n<ButtonCounter />\n<ButtonCounter />\n<ButtonCounter />"
      }
    ],
    "relevance": 0.992
  },
  {
    "codeTitle": "Basic Vue SFC Structure with Options API",
    "codeDescription": "Demonstrates the basic structure of a Vue Single-File Component using Options API, including template, script, and style blocks to create a simple greeting component.",
    "codeLanguage": "vue",
    "codeTokens": 109,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/sfc.md#2025-04-08_snippet_0",
    "pageTitle": "Vue Single-File Components Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  data() {\n    return {\n      greeting: 'Hello World!'\n    }\n  }\n}\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Managing watchEffect() Lifecycle",
    "codeDescription": "Examples of stopping, pausing, and resuming a watcher created with watchEffect().",
    "codeLanguage": "javascript",
    "codeTokens": 48,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_8",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const stop = watchEffect(() => {})\n\n// when the watcher is no longer needed:\nstop()"
      },
      {
        "language": "javascript",
        "code": "const { stop, pause, resume } = watchEffect(() => {})\n\n// temporarily pause the watcher\npause()\n\n// resume later\nresume()\n\n// stop\nstop()"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Dynamic Component Usage",
    "codeDescription": "Shows how to use Vue's <component> element with the is attribute to dynamically switch between components.",
    "codeLanguage": "vue",
    "codeTokens": 49,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_28",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Component changes when currentTab changes -->\n<component :is=\"currentTab\"></component>"
      }
    ],
    "relevance": 0.99
  },
  {
    "codeTitle": "Typing Component Props with Runtime Declaration in Vue.js",
    "codeDescription": "Demonstrates how to use runtime declaration to type component props using defineProps() in a Vue.js component with TypeScript.",
    "codeLanguage": "vue",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#2025-04-08_snippet_0",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\nconst props = defineProps({\n  foo: { type: String, required: true },\n  bar: Number\n})\n\nprops.foo // string\nprops.bar // number | undefined\n</script>"
      }
    ],
    "relevance": 0.987
  },
  {
    "codeTitle": "Declaring Props with TypeScript in Script Setup",
    "codeDescription": "Using TypeScript type annotations to declare props in a Vue component with <script setup>. This enables static type checking for props.",
    "codeLanguage": "vue",
    "codeTokens": 59,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\ndefineProps<{\n  title?: string\n  likes?: number\n}>()\n</script>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Implementing a Basic Reactive Update Function in JavaScript",
    "codeDescription": "This code defines a function to update a variable based on its dependencies, laying the groundwork for understanding reactive systems.",
    "codeLanguage": "javascript",
    "codeTokens": 54,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Reactivity System Deep Dive",
    "codeList": [
      {
        "language": "javascript",
        "code": "let A2\n\nfunction update() {\n  A2 = A0 + A1\n}"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Creating a Vue Application Instance in JavaScript",
    "codeDescription": "Demonstrates how to create a new Vue application instance using the createApp function, which is the starting point for any Vue application.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#2025-04-08_snippet_0",
    "pageTitle": "Creating a Vue Application",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* root component options */\n})"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Accessing Props in JavaScript (Composition API)",
    "codeDescription": "This snippet demonstrates how to access props values within JavaScript code using the Composition API. The defineProps macro returns an object containing all the props passed to the component.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_10",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const props = defineProps(['title'])\nconsole.log(props.title)"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Defining a Reusable Grid Component in Vue.js",
    "codeDescription": "This snippet demonstrates the creation of a reusable grid component in Vue.js. It includes the component's template, props definition, and methods for sorting and filtering data.",
    "codeLanguage": "vue",
    "codeTokens": 519,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/examples/src/grid/description.txt#2025-04-08_snippet_0",
    "pageTitle": "Creating a Reusable Grid Component in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<template>\n  <table>\n    <thead>\n      <tr>\n        <th v-for=\"key in columns\"\n          @click=\"sortBy(key)\"\n          :class=\"{ active: sortKey == key }\">\n          {{ key | capitalize }}\n          <span class=\"arrow\" :class=\"sortOrders[key] > 0 ? 'asc' : 'dsc'\">\n          </span>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr v-for=\"entry in filteredData\">\n        <td v-for=\"key in columns\">\n          {{entry[key]}}\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script>\nexport default {\n  props: {\n    data: Array,\n    columns: Array,\n    filterKey: String\n  },\n  data() {\n    var sortOrders = {}\n    this.columns.forEach(function (key) {\n      sortOrders[key] = 1\n    })\n    return {\n      sortKey: '',\n      sortOrders: sortOrders\n    }\n  },\n  computed: {\n    filteredData: function () {\n      var sortKey = this.sortKey\n      var filterKey = this.filterKey && this.filterKey.toLowerCase()\n      var order = this.sortOrders[sortKey] || 1\n      var data = this.data\n      if (filterKey) {\n        data = data.filter(function (row) {\n          return Object.keys(row).some(function (key) {\n            return String(row[key]).toLowerCase().indexOf(filterKey) > -1\n          })\n        })\n      }\n      if (sortKey) {\n        data = data.slice().sort(function (a, b) {\n          a = a[sortKey]\n          b = b[sortKey]\n          return (a === b ? 0 : a > b ? 1 : -1) * order\n        })\n      }\n      return data\n    }\n  },\n  filters: {\n    capitalize: function (str) {\n      return str.charAt(0).toUpperCase() + str.slice(1)\n    }\n  },\n  methods: {\n    sortBy: function (key) {\n      this.sortKey = key\n      this.sortOrders[key] = this.sortOrders[key] * -1\n    }\n  }\n}\n</script>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Vue.js Global Build Usage Example (Composition API)",
    "codeDescription": "A complete example of using Vue.js global build with Composition API, showing how to create a Vue app with reactive data and mount it to a DOM element.",
    "codeLanguage": "html",
    "codeTokens": 119,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Quick Start Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script>\n  const { createApp, ref } = Vue\n\n  createApp({\n    setup() {\n      const message = ref('Hello vue!')\n      return {\n        message\n      }\n    }\n  }).mount('#app')\n</script>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Detailed Options API Component Example",
    "codeDescription": "Comprehensive example showing Options API with lifecycle hooks, methods, and state management.",
    "codeLanguage": "vue",
    "codeTokens": 109,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Introduction Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n\n  mounted() {\n    console.log(`The initial count is ${this.count}.`)\n  }\n}\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Basic Text Interpolation with Mustache Syntax in Vue",
    "codeDescription": "Demonstrates the most basic form of data binding in Vue using the Mustache syntax (double curly braces). The value of the 'msg' property from the component instance is inserted into the text content and will update reactively when that property changes.",
    "codeLanguage": "vue-html",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Template Syntax",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<span>Message: {{ msg }}</span>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Basic Vue App Initialization - Composition API",
    "codeDescription": "Shows how to create the same counter component using Composition API with ref.",
    "codeLanguage": "javascript",
    "codeTokens": 61,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Introduction Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Detailed Composition API Component Example",
    "codeDescription": "Comprehensive example showing Composition API with setup script, lifecycle hooks, and state management.",
    "codeLanguage": "vue",
    "codeTokens": 101,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Introduction Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst count = ref(0)\n\nfunction increment() {\n  count.value++\n}\n\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>"
      }
    ],
    "relevance": 0.985
  },
  {
    "codeTitle": "Typing Component Props with Type-Based Declaration in Vue.js",
    "codeDescription": "Shows how to use type-based declaration to define component props types using defineProps() in a Vue.js component with TypeScript.",
    "codeLanguage": "vue",
    "codeTokens": 65,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#2025-04-08_snippet_1",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\nconst props = defineProps<{\n  foo: string\n  bar?: number\n}>()\n</script>"
      }
    ],
    "relevance": 0.984
  },
  {
    "codeTitle": "Typing Provide/Inject Pattern in Vue.js with TypeScript",
    "codeDescription": "Demonstrates how to properly type provide/inject values using InjectionKey interface. Shows type synchronization between provider and consumer components.",
    "codeLanguage": "typescript",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#2025-04-08_snippet_15",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { provide, inject } from 'vue'\nimport type { InjectionKey } from 'vue'\n\nconst key = Symbol() as InjectionKey<string>\n\nprovide(key, 'foo') // providing non-string value will result in error\n\nconst foo = inject(key) // type of foo: string | undefined"
      }
    ],
    "relevance": 0.982
  },
  {
    "codeTitle": "Creating a Reactive Object",
    "codeDescription": "Example of using reactive() to create a reactive object with nested properties.",
    "codeLanguage": "javascript",
    "codeTokens": 38,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_4",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const obj = reactive({ count: 0 })\nobj.count++"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Defining ref() Type in TypeScript",
    "codeDescription": "TypeScript type definition for the ref() function, which creates a reactive reference to a value.",
    "codeLanguage": "typescript",
    "codeTokens": 55,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_0",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function ref<T>(value: T): Ref<UnwrapRef<T>>\n\ninterface Ref<T> {\n  value: T\n}"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Basic Script Setup Syntax in Vue",
    "codeDescription": "Basic example of using <script setup> syntax in a Vue component.",
    "codeLanguage": "vue",
    "codeTokens": 39,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconsole.log('hello script setup')\n</script>"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Using Child Component (Options API)",
    "codeDescription": "Demonstrates how to import and use a child component in a parent component using Options API registration.",
    "codeLanguage": "vue",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nimport ButtonCounter from './ButtonCounter.vue'\n\nexport default {\n  components: {\n    ButtonCounter\n  }\n}\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Typing Event Handlers in Vue.js with TypeScript",
    "codeDescription": "Demonstrates how to correctly type event handlers for DOM events in Vue.js components using TypeScript.",
    "codeLanguage": "vue",
    "codeTokens": 80,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#2025-04-08_snippet_14",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\nfunction handleChange(event: Event) {\n  console.log((event.target as HTMLInputElement).value)\n}\n</script>\n\n<template>\n  <input type=\"text\" @change=\"handleChange\" />\n</template>"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Declaring Refs with Composition API",
    "codeDescription": "Shows how to create and use refs for reactive state management in Vue.js Composition API, including basic usage and value access.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref } from 'vue'\n\nconst count = ref(0)\n\nconsole.log(count) // { value: 0 }\nconsole.log(count.value) // 0\n\ncount.value++\nconsole.log(count.value) // 1"
      }
    ],
    "relevance": 0.98
  },
  {
    "codeTitle": "Complete Single-File Component - Options API",
    "codeDescription": "Full example of a Vue Single-File Component using Options API with script, template, and style blocks.",
    "codeLanguage": "vue",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/introduction.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Introduction Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">Count is: {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Typing reactive() in Vue.js with TypeScript",
    "codeDescription": "Demonstrates how to type reactive() properties using interfaces in Vue.js with TypeScript.",
    "codeLanguage": "typescript",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#2025-04-08_snippet_12",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { reactive } from 'vue'\n\ninterface Book {\n  title: string\n  year?: number\n}\n\nconst book: Book = reactive({ title: 'Vue 3 Guide' })"
      }
    ],
    "relevance": 0.978
  },
  {
    "codeTitle": "Simplified v-model Binding",
    "codeDescription": "Demonstrates the simplified syntax using v-model directive for two-way data binding on form inputs.",
    "codeLanguage": "vue-html",
    "codeTokens": 38,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Form Input Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input v-model=\"text\">"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Debugging Vue Component Reactivity with Lifecycle Hooks (Composition API)",
    "codeDescription": "Demonstrates how to use onRenderTracked and onRenderTriggered hooks to debug component reactivity in Vue's Composition API. These hooks allow developers to inspect dependencies that trigger component updates.",
    "codeLanguage": "vue",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#2025-04-08_snippet_9",
    "pageTitle": "Vue.js Reactivity System Deep Dive",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { onRenderTracked, onRenderTriggered } from 'vue'\n\nonRenderTracked((event) => {\n  debugger\n})\n\nonRenderTriggered((event) => {\n  debugger\n})\n</script>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Ref Unwrapping as Reactive Object Property",
    "codeDescription": "Demonstrates how refs are automatically unwrapped when accessed or mutated as properties of a reactive object, behaving like normal properties.",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_17",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const count = ref(0)\nconst state = reactive({\n  count\n})\n\nconsole.log(state.count) // 0\n\nstate.count = 1\nconsole.log(count.value) // 1"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Global Registration of Vue Components",
    "codeDescription": "Demonstrates how to globally register a Vue component using the app.component() method, making it available throughout the entire application.",
    "codeLanguage": "javascript",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Component Registration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.component(\n  // the registered name\n  'MyComponent',\n  // the implementation\n  {\n    /* ... */\n  }\n)"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Providing Data with Composition API in Vue.js",
    "codeDescription": "Demonstrates how to provide data to descendant components using the provide() function in the Composition API. It shows usage within <script setup> and traditional setup() function.",
    "codeLanguage": "vue",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#2025-04-08_snippet_0",
    "pageTitle": "Provide/Inject in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { provide } from 'vue'\n\nprovide(/* key */ 'message', /* value */ 'hello!')\n</script>"
      },
      {
        "language": "javascript",
        "code": "import { provide } from 'vue'\n\nexport default {\n  setup() {\n    provide(/* key */ 'message', /* value */ 'hello!')\n  }\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Declaring Props in Non-Script Setup Components (Vue Composition API)",
    "codeDescription": "Example of declaring props in a Vue component without using <script setup>, using the props option and accessing them in the setup function.",
    "codeLanguage": "js",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "export default {\n  props: ['foo'],\n  setup(props) {\n    // setup() receives props as the first argument.\n    console.log(props.foo)\n  }\n}"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "TypeScript Slot Definition in Vue",
    "codeDescription": "Demonstrates using defineSlots with TypeScript for defining typed slot props and names.",
    "codeLanguage": "vue",
    "codeTokens": 55,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\nconst slots = defineSlots<{\n  default(props: { msg: string }): any\n}>()\n</script>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Emitting Events in Script Setup (Composition API)",
    "codeDescription": "This snippet shows how to emit events from within the <script setup> section using the function returned by defineEmits. This approach is used when $emit isn't directly accessible.",
    "codeLanguage": "vue",
    "codeTokens": 71,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_24",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst emit = defineEmits(['enlarge-text'])\n\nemit('enlarge-text')\n</script>"
      }
    ],
    "relevance": 0.975
  },
  {
    "codeTitle": "Creating Global and Local State with Vue Composition API",
    "codeDescription": "This snippet shows how to create both global and local state using Vue's Composition API. It demonstrates the flexibility of Vue's reactivity system outside of components.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#2025-04-08_snippet_7",
    "pageTitle": "State Management in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref } from 'vue'\n\n// global state, created in module scope\nconst globalCount = ref(1)\n\nexport function useCount() {\n  // local state, created per-component\n  const localCount = ref(1)\n\n  return {\n    globalCount,\n    localCount\n  }\n}"
      }
    ],
    "relevance": 0.974
  },
  {
    "codeTitle": "Event Declaration with TypeScript",
    "codeDescription": "Example of declaring typed event emissions using TypeScript in Composition API.",
    "codeLanguage": "typescript",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Component Events Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const emit = defineEmits({\n  submit(payload: { email: string, password: string }) {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  }\n})"
      }
    ],
    "relevance": 0.973
  },
  {
    "codeTitle": "Implementing Basic State Management in Vue 3 Composition API",
    "codeDescription": "This snippet demonstrates a simple counter component using Vue 3's Composition API. It shows how state, view, and actions are managed within a single component.",
    "codeLanguage": "vue",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#2025-04-08_snippet_0",
    "pageTitle": "State Management in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\n// state\nconst count = ref(0)\n\n// actions\nfunction increment() {\n  count.value++\n}\n</script>\n\n<!-- view -->\n<template>{{ count }}</template>"
      }
    ],
    "relevance": 0.972
  },
  {
    "codeTitle": "Augmenting Global Properties in Vue with TypeScript",
    "codeDescription": "Shows how to use TypeScript module augmentation to add type definitions for globally available properties installed by plugins, ensuring type safety when accessing these properties throughout the application.",
    "codeLanguage": "typescript",
    "codeTokens": 83,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#2025-04-08_snippet_8",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import axios from 'axios'\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $http: typeof axios\n    $translate: (key: string) => string\n  }\n}"
      }
    ],
    "relevance": 0.971
  },
  {
    "codeTitle": "Express Server with Vue SSR",
    "codeDescription": "Sets up an Express server that renders a Vue application on the server and serves it with complete HTML markup. Includes server setup and route handling.",
    "codeLanguage": "javascript",
    "codeTokens": 213,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Server-Side Rendering (SSR) Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import express from 'express'\nimport { createSSRApp } from 'vue'\nimport { renderToString } from 'vue/server-renderer'\n\nconst server = express()\n\nserver.get('/', (req, res) => {\n  const app = createSSRApp({\n    data: () => ({ count: 1 }),\n    template: `<button @click=\"count++\">{{ count }}</button>`\n  })\n\n  renderToString(app).then((html) => {\n    res.send(`\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>Vue SSR Example</title>\n      </head>\n      <body>\n        <div id=\"app\">${html}</div>\n      </body>\n    </html>\n    `)\n  })\n})\n\nserver.listen(3000, () => {\n  console.log('ready')\n})"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating a Shared State Store in Vue",
    "codeDescription": "This snippet demonstrates how to create a simple shared state store using Vue's reactive API. It creates a reactive object that can be imported and used across multiple components.",
    "codeLanguage": "javascript",
    "codeTokens": 68,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#2025-04-08_snippet_2",
    "pageTitle": "State Management in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "// store.js\nimport { reactive } from 'vue'\n\nexport const store = reactive({\n  count: 0\n})"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Watching Multiple Sources in Vue.js",
    "codeDescription": "Example of watching multiple reactive sources simultaneously in Vue.js, where the callback receives arrays of new and previous values corresponding to each source.",
    "codeLanguage": "js",
    "codeTokens": 64,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_13",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "watch([fooRef, barRef], ([foo, bar], [prevFoo, prevBar]) => {\n  /* ... */\n})"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Declaring Emitted Events (Composition API)",
    "codeDescription": "This snippet demonstrates how to declare emitted events in a component using the Composition API with the defineEmits macro in a <script setup> block.",
    "codeLanguage": "vue",
    "codeTokens": 64,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_23",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- BlogPost.vue -->\n<script setup>\ndefineProps(['title'])\ndefineEmits(['enlarge-text'])\n</script>"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Implementing Custom v-model Modifiers in Options API",
    "codeDescription": "Complete implementation of a component with the 'capitalize' custom modifier using the Options API, transforming the input value before emitting.",
    "codeLanguage": "vue",
    "codeTokens": 167,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_14",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  props: {\n    modelValue: String,\n    modelModifiers: {\n      default: () => ({})\n    }\n  },\n  emits: ['update:modelValue'],\n  methods: {\n    emitValue(e) {\n      let value = e.target.value\n      if (this.modelModifiers.capitalize) {\n        value = value.charAt(0).toUpperCase() + value.slice(1)\n      }\n      this.$emit('update:modelValue', value)\n    }\n  }\n}\n</script>\n\n<template>\n  <input type=\"text\" :value=\"modelValue\" @input=\"emitValue\" />\n</template>"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Basic v-for Usage in Vue.js Template",
    "codeDescription": "Demonstrates the basic usage of v-for directive in a Vue.js template. It iterates over the items array and renders each item's message.",
    "codeLanguage": "html",
    "codeTokens": 57,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#2025-04-08_snippet_2",
    "pageTitle": "List Rendering in Vue.js",
    "codeList": [
      {
        "language": "html",
        "code": "<li v-for=\"item in items\">\n  {{ item.message }}\n</li>"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Defining Vue Component with Options API",
    "codeDescription": "Example of defining a Vue component using Options API in Single-File Component format. Shows a button component that tracks click count using data property.",
    "codeLanguage": "vue",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Creating Vue Application with Imported Component",
    "codeDescription": "Example of creating a Vue application instance using an imported component file.",
    "codeLanguage": "javascript",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Application API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\nimport App from './App.vue'\n\nconst app = createApp(App)"
      }
    ],
    "relevance": 0.97
  },
  {
    "codeTitle": "Basic v-model Implementation with defineModel",
    "codeDescription": "Demonstrates the basic usage of v-model in a child component using the defineModel macro introduced in Vue 3.4. Shows how to create a two-way binding between parent and child components.",
    "codeLanguage": "vue",
    "codeTokens": 107,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst model = defineModel()\n\nfunction update() {\n  model.value++\n}\n</script>\n\n<template>\n  <div>Parent bound v-model is: {{ model }}</div>\n  <button @click=\"update\">Increment</button>\n</template>"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Correct Type Augmentation as a TypeScript Module",
    "codeDescription": "Demonstrates the correct way to augment Vue types by ensuring the file is a TypeScript module with at least one export statement, which prevents overwriting original types.",
    "codeLanguage": "typescript",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#2025-04-08_snippet_9",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "// Does not work, overwrites the original types.\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $translate: (key: string) => string\n  }\n}"
      }
    ],
    "relevance": 0.968
  },
  {
    "codeTitle": "Implementing Accessible Form Inputs in Vue.js",
    "codeDescription": "This snippet demonstrates how to create accessible form inputs using Vue.js, including proper labeling and placeholder usage. It uses v-for to iterate over form items and binds attributes dynamically.",
    "codeLanguage": "vue-html",
    "codeTokens": 168,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#2025-04-08_snippet_4",
    "pageTitle": "Accessibility Implementation Guide for Vue.js Applications",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<form\n  class=\"demo\"\n  action=\"/dataCollectionLocation\"\n  method=\"post\"\n  autocomplete=\"on\"\n>\n  <div v-for=\"item in formItems\" :key=\"item.id\" class=\"form-item\">\n    <label :for=\"item.id\">{{ item.label }}: </label>\n    <input\n      type=\"text\"\n      :id=\"item.id\"\n      :name=\"item.id\"\n      v-model=\"item.value\"\n      :placeholder=\"item.placeholder\"\n    />\n  </div>\n  <button type=\"submit\">Submit</button>\n</form>"
      }
    ],
    "relevance": 0.967
  },
  {
    "codeTitle": "Using Named Scoped Slots with Vue.js Components",
    "codeDescription": "Demonstrates how to use named scoped slots in a Vue component to access props passed from different slot areas. Each slot receives its own props that can be accessed via the v-slot directive.",
    "codeLanguage": "vue-html",
    "codeTokens": 108,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_16",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent>\n  <template #header=\"headerProps\">\n    {{ headerProps }}\n  </template>\n\n  <template #default=\"defaultProps\">\n    {{ defaultProps }}\n  </template>\n\n  <template #footer=\"footerProps\">\n    {{ footerProps }}\n  </template>\n</MyComponent>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Type Definition of markRaw Function in Vue.js",
    "codeDescription": "TypeScript type definition for markRaw() function which marks an object to never be converted to a reactive proxy and returns the object itself.",
    "codeLanguage": "typescript",
    "codeTokens": 51,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Reactivity API - Advanced",
    "codeList": [
      {
        "language": "typescript",
        "code": "function markRaw<T extends object>(value: T): T"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Shorthand Attribute Binding in Vue",
    "codeDescription": "Shows the shorthand syntax for v-bind, which uses a colon prefix. This concise syntax is commonly used in Vue applications and binds the id attribute to the dynamicId property.",
    "codeLanguage": "vue-html",
    "codeTokens": 54,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Template Syntax",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :id=\"dynamicId\"></div>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Declaring Props with Type Validation in Script Setup",
    "codeDescription": "Using object syntax to declare props with type validation in a component with <script setup>. Each property specifies the expected constructor function type.",
    "codeLanguage": "js",
    "codeTokens": 56,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "// in <script setup>\ndefineProps({\n  title: String,\n  likes: Number\n})"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Basic Two-way Data Binding with v-model",
    "codeDescription": "Shows the basic usage of v-model directive to bind input value to a component's state using value property and input event.",
    "codeLanguage": "vue-html",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Form Input Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input\n  :value=\"text\"\n  @input=\"event => text = event.target.value\">"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing Single Select with v-model in Vue.js",
    "codeDescription": "A basic example showing how to implement a single select dropdown with v-model binding in Vue.js. The code binds the selected value to a data property and renders options including a disabled placeholder.",
    "codeLanguage": "vue-html",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Form Input Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\">\n  <option disabled value=\"\">Please select one</option>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Basic Vue Component Using Composition API",
    "codeDescription": "This snippet demonstrates a basic Vue component using Composition API with <script setup>. It shows reactive state management, event handling, and lifecycle hooks.",
    "codeLanguage": "vue",
    "codeTokens": 132,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/composition-api-faq.md#2025-04-08_snippet_0",
    "pageTitle": "Composition API FAQ in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, onMounted } from 'vue'\n\n// reactive state\nconst count = ref(0)\n\n// functions that mutate state and trigger updates\nfunction increment() {\n  count.value++\n}\n\n// lifecycle hooks\nonMounted(() => {\n  console.log(`The initial count is ${count.value}.`)\n})\n</script>\n\n<template>\n  <button @click=\"increment\">Count is: {{ count }}</button>\n</template>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Vue.js Dynamic Event Binding",
    "codeDescription": "Shows how to bind event handlers to dynamically named events using v-on directive. Includes both full syntax and shorthand notation.",
    "codeLanguage": "vue-html",
    "codeTokens": 61,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#2025-04-08_snippet_16",
    "pageTitle": "Vue.js Template Syntax",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<a v-on:[eventName]=\"doSomething\"> ... </a>\n\n<!-- shorthand -->\n<a @[eventName]=\"doSomething\"> ... </a>"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Watching a Ref in Vue.js",
    "codeDescription": "Example of watching a ref in Vue.js, showing how to observe changes to a ref value and execute a callback when the value changes.",
    "codeLanguage": "js",
    "codeTokens": 61,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_12",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "const count = ref(0)\nwatch(count, (count, prevCount) => {\n  /* ... */\n})"
      }
    ],
    "relevance": 0.965
  },
  {
    "codeTitle": "Implementing a Counter Composable in Vue.js",
    "codeDescription": "This JavaScript snippet shows the implementation of a simple counter composable using Vue.js reactivity APIs. It demonstrates how to create and export a reusable piece of logic.",
    "codeLanguage": "JavaScript",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#2025-04-08_snippet_12",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// counter.js\nimport { ref } from 'vue'\n\nexport function useCounter() {\n  const count = ref(0)\n  const increment = () => count.value++\n\n  return {\n    count,\n    increment\n  }\n}"
      }
    ],
    "relevance": 0.964
  },
  {
    "codeTitle": "Installing Vitest and Dependencies for Vue.js Testing",
    "codeDescription": "This snippet shows how to install Vitest, happy-dom, and @testing-library/vue for testing a Vite-based Vue project. These dependencies are essential for setting up a testing environment.",
    "codeLanguage": "Shell",
    "codeTokens": 60,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "shell",
        "code": "> npm install -D vitest happy-dom @testing-library/vue"
      }
    ],
    "relevance": 0.963
  },
  {
    "codeTitle": "Watching a Getter Function in Vue.js",
    "codeDescription": "Example of watching a getter function that accesses a reactive state property, with a callback that receives the new and previous values when the state changes.",
    "codeLanguage": "js",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_11",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "const state = reactive({ count: 0 })\nwatch(\n  () => state.count,\n  (count, prevCount) => {\n    /* ... */\n  }\n)"
      }
    ],
    "relevance": 0.963
  },
  {
    "codeTitle": "Good Implementation: v-for With Key in Vue.js",
    "codeDescription": "Example of correctly using v-for with a key attribute, which helps Vue maintain the identity of each element for predictable behavior during DOM updates.",
    "codeLanguage": "vue-html",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#2025-04-08_snippet_9",
    "pageTitle": "Vue.js Style Guide: Essential Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ul>\n  <li\n    v-for=\"todo in todos\"\n    :key=\"todo.id\"\n  >\n    {{ todo.text }}\n  </li>\n</ul>"
      }
    ],
    "relevance": 0.961
  },
  {
    "codeTitle": "Installing a Vue.js Plugin",
    "codeDescription": "Demonstrates how to install a plugin in a Vue.js application using the app.use() method. It shows the basic structure of plugin installation with optional configuration options.",
    "codeLanguage": "javascript",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Plugins Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.use(myPlugin, {\n  /* optional options */\n})"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Ref Unwrapping in Templates Limitations",
    "codeDescription": "Demonstrates that ref unwrapping in templates only applies to top-level properties in the template render context, not to nested ref properties.",
    "codeLanguage": "javascript",
    "codeTokens": 59,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_20",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const count = ref(0)\nconst object = { id: ref(1) }"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Providing Reactive Data in Vue.js Composition API",
    "codeDescription": "Shows how to provide reactive data using refs in the Composition API, allowing descendant components to establish a reactive connection.",
    "codeLanguage": "javascript",
    "codeTokens": 57,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#2025-04-08_snippet_1",
    "pageTitle": "Provide/Inject in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref, provide } from 'vue'\n\nconst count = ref(0)\nprovide('key', count)"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing Deep Reactivity in Options API",
    "codeDescription": "An example showing how Vue's deep reactivity works in Options API. When nested objects or arrays in the data() state are mutated, Vue automatically detects the changes and updates accordingly.",
    "codeLanguage": "javascript",
    "codeTokens": 126,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      obj: {\n        nested: { count: 0 },\n        arr: ['foo', 'bar']\n      }\n    }\n  },\n  methods: {\n    mutateDeeply() {\n      // these will work as expected.\n      this.obj.nested.count++\n      this.obj.arr.push('baz')\n    }\n  }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Implementing Mouse Tracking in Vue Component",
    "codeDescription": "This snippet demonstrates how to implement mouse tracking functionality directly in a Vue component using the Composition API.",
    "codeLanguage": "vue",
    "codeTokens": 126,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#2025-04-08_snippet_0",
    "pageTitle": "Composables in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue'\n\nconst x = ref(0)\nconst y = ref(0)\n\nfunction update(event) {\n  x.value = event.pageX\n  y.value = event.pageY\n}\n\nonMounted(() => window.addEventListener('mousemove', update))\nonUnmounted(() => window.removeEventListener('mousemove', update))\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Defining Method Handler for Greeting in Vue.js",
    "codeDescription": "This snippet shows how to define a method handler for a greeting function in Vue.js using both Composition API and Options API approaches.",
    "codeLanguage": "javascript",
    "codeTokens": 85,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#2025-04-08_snippet_2",
    "pageTitle": "Event Handling in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const name = ref('Vue.js')\n\nfunction greet(event) {\n  alert(`Hello ${name.value}!`)\n  // `event` is the native DOM event\n  if (event) {\n    alert(event.target.tagName)\n  }\n}"
      },
      {
        "language": "javascript",
        "code": "data() {\n  return {\n    name: 'Vue.js'\n  }\n},\nmethods: {\n  greet(event) {\n    // `this` inside methods points to the current active instance\n    alert(`Hello ${this.name}!`)\n    // `event` is the native DOM event\n    if (event) {\n      alert(event.target.tagName)\n    }\n  }\n}"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Using defineComponent() with Composition API",
    "codeDescription": "Demonstrates how defineComponent() supports type inference for props passed to the setup() function when using Composition API without <script setup>.",
    "codeLanguage": "typescript",
    "codeTokens": 85,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#2025-04-08_snippet_1",
    "pageTitle": "Using Vue with TypeScript",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  // type inference enabled\n  props: {\n    message: String\n  },\n  setup(props) {\n    props.message // type: string | undefined\n  }\n})"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Listening to Custom Events in Parent Component",
    "codeDescription": "This snippet shows how to listen for custom events emitted by child components. The parent component increments the font size when it receives the 'enlarge-text' event.",
    "codeLanguage": "html",
    "codeTokens": 64,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_20",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<BlogPost\n  ...\n  @enlarge-text=\"postFontSize += 0.1\"\n />"
      }
    ],
    "relevance": 0.96
  },
  {
    "codeTitle": "Creating a Computed Property for Filtered Array in Composition API",
    "codeDescription": "Shows how to create a computed property that returns a filtered array based on a condition in Vue's Composition API. This approach allows displaying filtered data without modifying the source.",
    "codeLanguage": "js",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#2025-04-08_snippet_14",
    "pageTitle": "List Rendering in Vue.js",
    "codeList": [
      {
        "language": "js",
        "code": "const numbers = ref([1, 2, 3, 4, 5])\n\nconst evenNumbers = computed(() => {\n  return numbers.value.filter((n) => n % 2 === 0)\n})"
      }
    ],
    "relevance": 0.959
  },
  {
    "codeTitle": "Using $options for Custom Component Options",
    "codeDescription": "Example showing how to use the $options property to access custom component options. The $options object exposes all resolved options for the current component.",
    "codeLanguage": "javascript",
    "codeTokens": 74,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Component Instance API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const app = createApp({\n  customOption: 'foo',\n  created() {\n    console.log(this.$options.customOption) // => 'foo'\n  }\n})"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Using Shallow Reactivity for Large Immutable Structures",
    "codeDescription": "This example demonstrates the use of shallowRef to reduce reactivity overhead for large immutable structures, showing how to update the state while maintaining reactivity at the root level.",
    "codeLanguage": "javascript",
    "codeTokens": 152,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Performance Optimization Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const shallowArray = shallowRef([\n  /* big list of deep objects */\n])\n\n// this won't trigger updates...\nshallowArray.value.push(newObject)\n// this does:\nshallowArray.value = [...shallowArray.value, newObject]\n\n// this won't trigger updates...\nshallowArray.value[0].foo = 1\n// this does:\nshallowArray.value = [\n  {\n    ...shallowArray.value[0],\n    foo: 1\n  },\n  ...shallowArray.value.slice(1)\n]"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Declaring Default Props with TypeScript in Vue",
    "codeDescription": "Demonstrates how to declare default prop values using withDefaults compiler macro in Vue 3.4 and below with TypeScript interface definitions.",
    "codeLanguage": "typescript",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#2025-04-08_snippet_9",
    "pageTitle": "Vue.js Script Setup Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  msg: 'hello',\n  labels: () => ['one', 'two']\n})"
      }
    ],
    "relevance": 0.958
  },
  {
    "codeTitle": "Inline Type Casting in Vue Templates",
    "codeDescription": "Demonstrates how to use TypeScript type casting directly in Vue templates to resolve type errors when working with union types or other complex type scenarios.",
    "codeLanguage": "vue",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#2025-04-08_snippet_5",
    "pageTitle": "Using Vue with TypeScript",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\nlet x: string | number = 1\n</script>\n\n<template>\n  {{ (x as number).toFixed(2) }}\n</template>"
      }
    ],
    "relevance": 0.957
  },
  {
    "codeTitle": "Configuring Loading and Error States for Async Component in Vue.js",
    "codeDescription": "Shows how to configure loading and error states for an async component using the advanced options of defineAsyncComponent. This includes specifying loading and error components, delay, and timeout.",
    "codeLanguage": "javascript",
    "codeTokens": 159,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#2025-04-08_snippet_5",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const AsyncComp = defineAsyncComponent({\n  // the loader function\n  loader: () => import('./Foo.vue'),\n\n  // A component to use while the async component is loading\n  loadingComponent: LoadingComponent,\n  // Delay before showing the loading component. Default: 200ms.\n  delay: 200,\n\n  // A component to use if the load fails\n  errorComponent: ErrorComponent,\n  // The error component will be displayed if a timeout is\n  // provided and exceeded. Default: Infinity.\n  timeout: 3000\n})"
      }
    ],
    "relevance": 0.956
  },
  {
    "codeTitle": "Accessible Form Implementation in Vue.js",
    "codeDescription": "Example of creating accessible forms with proper labeling, ARIA attributes, and autocomplete functionality in Vue.js.",
    "codeLanguage": "vue-html",
    "codeTokens": 139,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#2025-04-08_snippet_3",
    "pageTitle": "Accessibility Implementation Guide for Vue.js Applications",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<form action=\"/dataCollectionLocation\" method=\"post\" autocomplete=\"on\">\n  <div v-for=\"item in formItems\" :key=\"item.id\" class=\"form-item\">\n    <label :for=\"item.id\">{{ item.label }}: </label>\n    <input\n      :type=\"item.type\"\n      :id=\"item.id\"\n      :name=\"item.id\"\n      v-model=\"item.value\"\n    />\n  </div>\n  <button type=\"submit\">Submit</button>\n</form>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Creating a Writable Computed Ref",
    "codeDescription": "Example of creating a writable computed ref with custom getter and setter functions.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_3",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const count = ref(1)\nconst plusOne = computed({\n  get: () => count.value + 1,\n  set: (val) => {\n    count.value = val - 1\n  }\n})\n\nplusOne.value = 1\nconsole.log(count.value) // 0"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Vue Component Definition Without Build Step (Composition API)",
    "codeDescription": "Example of defining a Vue component without build tools using Composition API and plain JavaScript.",
    "codeLanguage": "javascript",
    "codeTokens": 104,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n    return { count }\n  },\n  template: `\n    <button @click=\"count++\">\n      You clicked me {{ count }} times.\n    </button>`\n  // Can also target an in-DOM template:\n  // template: '#my-template-element'\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Implementing Deep Reactivity with Refs in Composition API",
    "codeDescription": "Demonstrates how refs in the Composition API can hold deeply nested objects and arrays, maintaining reactivity throughout the nested structure when values are changed.",
    "codeLanguage": "javascript",
    "codeTokens": 104,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref } from 'vue'\n\nconst obj = ref({\n  nested: { count: 0 },\n  arr: ['foo', 'bar']\n})\n\nfunction mutateDeeply() {\n  // these will work as expected.\n  obj.value.nested.count++\n  obj.value.arr.push('baz')\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Computed Property for Filtered Lists in Options API",
    "codeDescription": "Implementation of a computed property in Vue.js Options API to filter active users, which is the preferred approach instead of using v-if with v-for.",
    "codeLanguage": "js",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#2025-04-08_snippet_11",
    "pageTitle": "Vue.js Style Guide: Essential Rules",
    "codeList": [
      {
        "language": "js",
        "code": "computed: {\n  activeUsers() {\n    return this.users.filter(user => user.isActive)\n  }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Registering Mounted Hook with Composition API",
    "codeDescription": "Example showing how to register an onMounted lifecycle hook using Vue.js Composition API within a script setup block. The hook logs a message when the component is mounted.",
    "codeLanguage": "vue",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/lifecycle.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Component Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { onMounted } from 'vue'\n\nonMounted(() => {\n  console.log(`the component is now mounted.`)\n})\n</script>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Prop Validation in Vue.js Options API",
    "codeDescription": "This snippet demonstrates various prop validation techniques in Vue.js Options API, including type checks, required props, default values, and custom validators.",
    "codeLanguage": "javascript",
    "codeTokens": 360,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_33",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: {\n    // Basic type check\n    //  (`null` and `undefined` values will allow any type)\n    propA: Number,\n    // Multiple possible types\n    propB: [String, Number],\n    // Required string\n    propC: {\n      type: String,\n      required: true\n    },\n    // Required but nullable string\n    propD: {\n      type: [String, null],\n      required: true\n    },\n    // Number with a default value\n    propE: {\n      type: Number,\n      default: 100\n    },\n    // Object with a default value\n    propF: {\n      type: Object,\n      // Object or array defaults must be returned from\n      // a factory function. The function receives the raw\n      // props received by the component as the argument.\n      default(rawProps) {\n        return { message: 'hello' }\n      }\n    },\n    // Custom validator function\n    // full props passed as 2nd argument in 3.4+\n    propG: {\n      validator(value, props) {\n        // The value must match one of these strings\n        return ['success', 'warning', 'danger'].includes(value)\n      }\n    },\n    // Function with a default value\n    propH: {\n      type: Function,\n      // Unlike object or array default, this is not a factory\n      // function - this is a function to serve as a default value\n      default() {\n        return 'Default function'\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Basic Slot Usage in Vue.js Templates",
    "codeDescription": "Example showing how to use slots in a component, with a parent passing content to a child FancyButton component that renders the slot content within its template.",
    "codeLanguage": "vue-html",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<FancyButton>\n  Click me! <!-- slot content -->\n</FancyButton>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using defineComponent() with Composition API and JSX",
    "codeDescription": "Demonstrates how to use defineComponent() with Composition API and JSX, including generic type support.",
    "codeLanguage": "typescript",
    "codeTokens": 128,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/general.md#2025-04-08_snippet_4",
    "pageTitle": "Global API: General",
    "codeList": [
      {
        "language": "typescript",
        "code": "const Comp = defineComponent(\n  <T extends string | number>(props: { msg: T; list: T[] }) => {\n    // use Composition API here like in <script setup>\n    const count = ref(0)\n\n    return () => {\n      // render function or JSX\n      return <div>{count.value}</div>\n    }\n  },\n  // manual runtime props declaration is currently still needed.\n  {\n    props: ['msg', 'list']\n  }\n)"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Basic Slot Usage in Vue Components",
    "codeDescription": "Demonstrates how to use the <slot> element to create content placeholders in a Vue component template.",
    "codeLanguage": "vue",
    "codeTokens": 44,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_26",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<AlertBox>\n  Something bad happened.\n</AlertBox>"
      }
    ],
    "relevance": 0.955
  },
  {
    "codeTitle": "Using Arrow Functions for Props Validator and Default in TypeScript <4.7",
    "codeDescription": "Demonstrates how to use arrow functions for validator and default prop options when using TypeScript versions less than 4.7. This avoids issues with TypeScript having to infer 'this' inside these functions.",
    "codeLanguage": "typescript",
    "codeTokens": 162,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#2025-04-08_snippet_2",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  year?: number\n}\n\nexport default defineComponent({\n  props: {\n    bookA: {\n      type: Object as PropType<Book>,\n      // Make sure to use arrow functions if your TypeScript version is less than 4.7\n      default: () => ({\n        title: 'Arrow Function Expression'\n      }),\n      validator: (book: Book) => !!book.title\n    }\n  }\n})"
      }
    ],
    "relevance": 0.953
  },
  {
    "codeTitle": "Prop Name Casing in Vue.js Components",
    "codeDescription": "Illustrates the use of camelCase for prop names in component declarations and the corresponding kebab-case usage in templates.",
    "codeLanguage": "javascript",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_18",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "props: {\n  greetingText: String\n}"
      },
      {
        "language": "vue-html",
        "code": "<!-- for in-DOM templates -->\n<welcome-message greeting-text=\"hi\"></welcome-message>"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "TypeScript in Vue SFC with script setup",
    "codeDescription": "Demonstrates using TypeScript with the script setup syntax in Vue Single-File Components, which provides a more concise way to use TypeScript with the Composition API.",
    "codeLanguage": "vue",
    "codeTokens": 93,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/overview.md#2025-04-08_snippet_3",
    "pageTitle": "Using Vue with TypeScript",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\n// TypeScript enabled\nimport { ref } from 'vue'\n\nconst count = ref(1)\n</script>\n\n<template>\n  <!-- type checking and auto-completion enabled -->\n  {{ count.toFixed(2) }}\n</template>"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Component Setup with Refs",
    "codeDescription": "Demonstrates how to use refs within a component's setup function and expose them to the template, including event handling implementation.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref } from 'vue'\n\nexport default {\n  setup() {\n    const count = ref(0)\n\n    function increment() {\n      // .value is needed in JavaScript\n      count.value++\n    }\n\n    // don't forget to expose the function as well.\n    return {\n      count,\n      increment\n    }\n  }\n}"
      }
    ],
    "relevance": 0.952
  },
  {
    "codeTitle": "Creating Multiple Vue Application Instances on a Page",
    "codeDescription": "Demonstrates how to create and mount multiple Vue application instances on the same page, each with its own configuration scope and global assets.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#2025-04-08_snippet_8",
    "pageTitle": "Creating a Vue Application",
    "codeList": [
      {
        "language": "javascript",
        "code": "const app1 = createApp({\n  /* ... */\n})\napp1.mount('#container-1')\n\nconst app2 = createApp({\n  /* ... */\n})\napp2.mount('#container-2')"
      }
    ],
    "relevance": 0.951
  },
  {
    "codeTitle": "WatchEffect Implementation in Vue.js",
    "codeDescription": "Simplified version using watchEffect that automatically tracks reactive dependencies and fetches data when dependencies change.",
    "codeLanguage": "javascript",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#2025-04-08_snippet_16",
    "pageTitle": "Vue.js Watchers",
    "codeList": [
      {
        "language": "javascript",
        "code": "watchEffect(async () => {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\n  )\n  data.value = await response.json()\n})"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Using shallowRef in JavaScript",
    "codeDescription": "Example of using shallowRef to create a shallow reactive reference. Demonstrates that mutations to the inner object don't trigger reactivity, but replacing the entire value does.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Reactivity API - Advanced",
    "codeList": [
      {
        "language": "javascript",
        "code": "const state = shallowRef({ count: 1 })\n\n// does NOT trigger change\nstate.value.count = 2\n\n// does trigger change\nstate.value = { count: 2 }"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Slot Content Access to Parent Scope",
    "codeDescription": "Shows how slot content has access to data from the parent component's scope but not the child component's scope, following JavaScript's lexical scoping rules.",
    "codeLanguage": "vue-html",
    "codeTokens": 57,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<span>{{ message }}</span>\n<FancyButton>{{ message }}</FancyButton>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing Watchers with Options API in Vue.js",
    "codeDescription": "This snippet demonstrates using the watch option in Vue.js Options API to trigger a function when a reactive property changes. It includes an example of fetching data from an API when a question contains a question mark.",
    "codeLanguage": "javascript",
    "codeTokens": 223,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Watchers",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      question: '',\n      answer: 'Questions usually contain a question mark. ;-)',\n      loading: false\n    }\n  },\n  watch: {\n    // whenever question changes, this function will run\n    question(newQuestion, oldQuestion) {\n      if (newQuestion.includes('?')) {\n        this.getAnswer()\n      }\n    }\n  },\n  methods: {\n    async getAnswer() {\n      this.loading = true\n      this.answer = 'Thinking...'\n      try {\n        const res = await fetch('https://yesno.wtf/api')\n        this.answer = (await res.json()).answer\n      } catch (error) {\n        this.answer = 'Error! Could not reach the API. ' + error\n      } finally {\n        this.loading = false\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Binding Multiple Properties with v-bind Object Syntax",
    "codeDescription": "Example showing how to pass all properties of an object as props using v-bind without an argument, which spreads all object properties as individual props.",
    "codeLanguage": "vue-html",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_24",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<BlogPost v-bind=\"post\" />"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Event Handling with v-on in Vue.js",
    "codeDescription": "Illustrates various ways to use the v-on directive for event handling. Examples include method handlers, inline statements, modifiers, and object syntax for multiple events.",
    "codeLanguage": "vue-html",
    "codeTokens": 239,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#2025-04-08_snippet_5",
    "pageTitle": "Built-in Directives in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- method handler -->\n<button v-on:click=\"doThis\"></button>\n\n<!-- dynamic event -->\n<button v-on:[event]=\"doThis\"></button>\n\n<!-- inline statement -->\n<button v-on:click=\"doThat('hello', $event)\"></button>\n\n<!-- shorthand -->\n<button @click=\"doThis\"></button>\n\n<!-- shorthand dynamic event -->\n<button @[event]=\"doThis\"></button>\n\n<!-- stop propagation -->\n<button @click.stop=\"doThis\"></button>\n\n<!-- prevent default -->\n<button @click.prevent=\"doThis\"></button>\n\n<!-- prevent default without expression -->\n<form @submit.prevent></form>\n\n<!-- chain modifiers -->\n<button @click.stop.prevent=\"doThis\"></button>\n\n<!-- key modifier using keyAlias -->\n<input @keyup.enter=\"onEnter\" />\n\n<!-- the click event will be triggered at most once -->\n<button v-on:click.once=\"doThis\"></button>\n\n<!-- object syntax -->\n<button v-on=\"{ mousedown: doThis, mouseup: doThat }\"></button>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Properly Typing Event Handlers with Type Assertions in Vue",
    "codeDescription": "Shows how to explicitly annotate the event parameter type in event handlers and use type assertions to access DOM element properties in a type-safe way.",
    "codeLanguage": "typescript",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#2025-04-08_snippet_7",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  methods: {\n    handleChange(event: Event) {\n      console.log((event.target as HTMLInputElement).value)\n    }\n  }\n})"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Implementing Multiple v-model in Options API",
    "codeDescription": "Implementation of a component that supports multiple v-model bindings using the Options API with props and emits.",
    "codeLanguage": "vue",
    "codeTokens": 141,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  props: {\n    firstName: String,\n    lastName: String\n  },\n  emits: ['update:firstName', 'update:lastName']\n}\n</script>\n\n<template>\n  <input\n    type=\"text\"\n    :value=\"firstName\"\n    @input=\"$emit('update:firstName', $event.target.value)\"\n  />\n  <input\n    type=\"text\"\n    :value=\"lastName\"\n    @input=\"$emit('update:lastName', $event.target.value)\"\n  />\n</template>"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Injecting Data with Composition API in Vue.js",
    "codeDescription": "Demonstrates how to inject data provided by an ancestor component using the inject() function in the Composition API. It shows usage within <script setup> and traditional setup() function.",
    "codeLanguage": "vue",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#2025-04-08_snippet_4",
    "pageTitle": "Provide/Inject in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { inject } from 'vue'\n\nconst message = inject('message')\n</script>"
      },
      {
        "language": "javascript",
        "code": "import { inject } from 'vue'\n\nexport default {\n  setup() {\n    const message = inject('message')\n    return { message }\n  }\n}"
      }
    ],
    "relevance": 0.95
  },
  {
    "codeTitle": "Component Instance $props Type Definition",
    "codeDescription": "TypeScript interface defining the $props property on the component instance. The $props property represents the component's current, resolved props.",
    "codeLanguage": "typescript",
    "codeTokens": 49,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Component Instance API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentPublicInstance {\n  $props: object\n}"
      }
    ],
    "relevance": 0.949
  },
  {
    "codeTitle": "Renderless Component Example with Mouse Tracking",
    "codeDescription": "Demonstrates a renderless component that encapsulates the logic of tracking mouse position and exposes the coordinates through scoped slots, allowing the parent component to handle the visual output.",
    "codeLanguage": "vue-html",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_23",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MouseTracker v-slot=\"{ x, y }\">\n  Mouse is at: {{ x }}, {{ y }}\n</MouseTracker>"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Using onMounted Hook in Vue.js Composition API (SFC)",
    "codeDescription": "This snippet shows how to use the onMounted lifecycle hook in a Vue.js Single File Component using the Composition API. It imports onMounted from Vue and defines a callback to be executed when the component is mounted.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#2025-04-08_snippet_2",
    "pageTitle": "Lifecycle and Template Refs in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { onMounted } from 'vue'\n\nonMounted(() => {\n  // component is now mounted.\n})"
      }
    ],
    "relevance": 0.948
  },
  {
    "codeTitle": "Normalizing Values with toValue() in TypeScript (Vue 3.3+)",
    "codeDescription": "The toValue() function normalizes values/refs/getters to values, similar to unref() but also normalizes getters. It's useful in composables to handle arguments that could be values, refs, or getters.",
    "codeLanguage": "typescript",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Reactivity API Utilities",
    "codeList": [
      {
        "language": "typescript",
        "code": "function toValue<T>(source: T | Ref<T> | (() => T)): T"
      },
      {
        "language": "javascript",
        "code": "toValue(1) //       --> 1\ntoValue(ref(1)) //  --> 1\ntoValue(() => 1) // --> 1"
      },
      {
        "language": "typescript",
        "code": "import type { MaybeRefOrGetter } from 'vue'\n\nfunction useFeature(id: MaybeRefOrGetter<number>) {\n  watch(() => toValue(id), id => {\n    // react to id changes\n  })\n}\n\n// this composable supports any of the following:\nuseFeature(1)\nuseFeature(ref(1))\nuseFeature(() => 1)"
      }
    ],
    "relevance": 0.947
  },
  {
    "codeTitle": "Registering Mounted Hook with Options API",
    "codeDescription": "Example demonstrating how to register a mounted lifecycle hook using Vue.js Options API. Shows the mounted hook implementation that logs a message when the component is mounted.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/lifecycle.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Component Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  mounted() {\n    console.log(`the component is now mounted.`)\n  }\n}"
      }
    ],
    "relevance": 0.946
  },
  {
    "codeTitle": "Event Listener Inheritance in Vue Components",
    "codeDescription": "Shows how event listeners are passed through from parent to child components and attached to the root element of the child component.",
    "codeLanguage": "vue-html",
    "codeTokens": 44,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Fallthrough Attributes Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyButton @click=\"onClick\" />"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Virtual DOM Node Structure in JavaScript",
    "codeDescription": "Example of a virtual DOM node structure representing a div element with properties and children.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Rendering Mechanism Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const vnode = {\n  type: 'div',\n  props: {\n    id: 'hello'\n  },\n  children: [\n    /* more vnodes */\n  ]\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Calling Custom Method with Arguments in Vue.js Template",
    "codeDescription": "This snippet demonstrates how to call a custom method with different arguments in a Vue.js template using inline handlers.",
    "codeLanguage": "vue",
    "codeTokens": 59,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#2025-04-08_snippet_5",
    "pageTitle": "Event Handling in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<button @click=\"say('hello')\">Say hello</button>\n<button @click=\"say('bye')\">Say bye</button>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Implementing Watchers with Composition API in Vue.js",
    "codeDescription": "A complete Vue component using Composition API with the watch function to monitor a ref and trigger an API call when a question contains a question mark.",
    "codeLanguage": "vue",
    "codeTokens": 234,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Watchers",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, watch } from 'vue'\n\nconst question = ref('')\nconst answer = ref('Questions usually contain a question mark. ;-)')\nconst loading = ref(false)\n\n// watch works directly on a ref\nwatch(question, async (newQuestion, oldQuestion) => {\n  if (newQuestion.includes('?')) {\n    loading.value = true\n    answer.value = 'Thinking...'\n    try {\n      const res = await fetch('https://yesno.wtf/api')\n      answer.value = (await res.json()).answer\n    } catch (error) {\n      answer.value = 'Error! Could not reach the API. ' + error\n    } finally {\n      loading.value = false\n    }\n  }\n})\n</script>\n\n<template>\n  <p>\n    Ask a yes/no question:\n    <input v-model=\"question\" :disabled=\"loading\" />\n  </p>\n  <p>{{ answer }}</p>\n</template>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Exposing Public Interface in Child Component with Composition API in Vue.js",
    "codeDescription": "This snippet shows how to use the defineExpose macro in a child component to expose a public interface to parent components when using script setup.",
    "codeLanguage": "vue",
    "codeTokens": 94,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#2025-04-08_snippet_7",
    "pageTitle": "Understanding Template Refs in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\nconst a = 1\nconst b = ref(2)\n\n// Compiler macros, such as defineExpose, don't need to be imported\ndefineExpose({\n  a,\n  b\n})\n</script>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Creating Visually Hidden Labels for Accessibility in Vue.js",
    "codeDescription": "This example demonstrates how to create visually hidden labels for form inputs while maintaining accessibility. It uses a CSS class to hide the label visually but keep it available for screen readers.",
    "codeLanguage": "vue-html",
    "codeTokens": 106,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#2025-04-08_snippet_8",
    "pageTitle": "Accessibility Implementation Guide for Vue.js Applications",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<form role=\"search\">\n  <label for=\"search\" class=\"hidden-visually\">Search: </label>\n  <input type=\"text\" name=\"search\" id=\"search\" v-model=\"search\" />\n  <button type=\"submit\">Search</button>\n</form>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "List Rendering with v-for in Vue.js",
    "codeDescription": "Shows various ways to use the v-for directive for list rendering. Examples include iterating over arrays, objects, and using index or key aliases.",
    "codeLanguage": "vue-html",
    "codeTokens": 121,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#2025-04-08_snippet_4",
    "pageTitle": "Built-in Directives in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div v-for=\"item in items\">\n  {{ item.text }}\n</div>\n<div v-for=\"(item, index) in items\"></div>\n<div v-for=\"(value, key) in object\"></div>\n<div v-for=\"(value, name, index) in object\"></div>\n<div v-for=\"item in items\" :key=\"item.id\">\n  {{ item.text }}\n</div>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Props Destructuring with Reactivity",
    "codeDescription": "Demonstrates how to destructure props while maintaining reactivity using toRefs and toRef utility functions.",
    "codeLanguage": "javascript",
    "codeTokens": 129,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js setup() Composition API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { toRefs, toRef } from 'vue'\n\nexport default {\n  setup(props) {\n    // turn `props` into an object of refs, then destructure\n    const { title } = toRefs(props)\n    // `title` is a ref that tracks `props.title`\n    console.log(title.value)\n\n    // OR, turn a single property on `props` into a ref\n    const title = toRef(props, 'title')\n  }\n}"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Using Globally Registered Components in Templates",
    "codeDescription": "Example of using globally registered components in any component template within the Vue application.",
    "codeLanguage": "vue-html",
    "codeTokens": 46,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Component Registration Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- this will work in any component inside the app -->\n<ComponentA/>\n<ComponentB/>\n<ComponentC/>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Writable Computed Property with Previous Value in Composition API (Vue.js)",
    "codeDescription": "Demonstrates a writable computed property that can access its previous value using the Composition API in Vue.js. The getter returns the value of count when it's less than or equal to 3, otherwise it returns the previous value. The setter updates count by doubling the new value.",
    "codeLanguage": "vue",
    "codeTokens": 142,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#2025-04-08_snippet_11",
    "pageTitle": "Computed Properties in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, computed } from 'vue'\n\nconst count = ref(2)\n\nconst alwaysSmall = computed({\n  get(previous) {\n    if (count.value <= 3) {\n      return count.value\n    }\n\n    return previous\n  },\n  set(newValue) {\n    count.value = newValue * 2\n  }\n})\n</script>"
      }
    ],
    "relevance": 0.945
  },
  {
    "codeTitle": "Limiting Child Component Exposure with Options API in Vue.js",
    "codeDescription": "This code demonstrates how to use the expose option in the Options API to limit the access to a child component's instance, controlling which properties and methods are accessible to parent components.",
    "codeLanguage": "javascript",
    "codeTokens": 116,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#2025-04-08_snippet_8",
    "pageTitle": "Understanding Template Refs in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  expose: ['publicData', 'publicMethod'],\n  data() {\n    return {\n      publicData: 'foo',\n      privateData: 'bar'\n    }\n  },\n  methods: {\n    publicMethod() {\n      /* ... */\n    },\n    privateMethod() {\n      /* ... */\n    }\n  }\n}"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Creating Reactive State with reactive() in Vue.js (Composition API)",
    "codeDescription": "Demonstrates how to create reactive state using Vue's `reactive()` API. The example shows how to declare a reactive counter object and modify its value, which will automatically trigger template updates.",
    "codeLanguage": "javascript",
    "codeTokens": 83,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#2025-04-08_snippet_0",
    "pageTitle": "Declarative Rendering in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { reactive } from 'vue'\n\nconst counter = reactive({\n  count: 0\n})\n\nconsole.log(counter.count) // 0\ncounter.count++"
      }
    ],
    "relevance": 0.943
  },
  {
    "codeTitle": "Async Data Fetching in Vue Component",
    "codeDescription": "This snippet shows how to handle async data fetching with loading, success, and error states in a Vue component.",
    "codeLanguage": "vue",
    "codeTokens": 160,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#2025-04-08_snippet_5",
    "pageTitle": "Composables in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\nconst data = ref(null)\nconst error = ref(null)\n\nfetch('...')\n  .then((res) => res.json())\n  .then((json) => (data.value = json))\n  .catch((err) => (error.value = err))\n</script>\n\n<template>\n  <div v-if=\"error\">Oops! Error encountered: {{ error.message }}</div>\n  <div v-else-if=\"data\">\n    Data loaded:\n    <pre>{{ data }}</pre>\n  </div>\n  <div v-else>Loading...</div>\n</template>"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "Passing Array Props",
    "codeDescription": "Examples showing how to pass array values as props to Vue components, both with static arrays (requiring v-bind) and dynamic arrays from variables.",
    "codeLanguage": "vue-html",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_20",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Even though the array is static, we need v-bind to tell Vue that -->\n<!-- this is a JavaScript expression rather than a string.            -->\n<BlogPost :comment-ids=\"[234, 266, 273]\" />\n\n<!-- Dynamically assign to the value of a variable. -->\n<BlogPost :comment-ids=\"post.commentIds\" />"
      }
    ],
    "relevance": 0.942
  },
  {
    "codeTitle": "FancyList Internal Implementation with Multiple Slot Renders",
    "codeDescription": "Shows how a list component can render the same slot multiple times with different data by using v-for and v-bind to pass each item's data as slot props.",
    "codeLanguage": "vue-html",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_22",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ul>\n  <li v-for=\"item in items\">\n    <slot name=\"item\" v-bind=\"item\"></slot>\n  </li>\n</ul>"
      }
    ],
    "relevance": 0.941
  },
  {
    "codeTitle": "Basic Transition Example",
    "codeDescription": "Demonstrates basic usage of Vue Transition component with v-if directive and toggle button.",
    "codeLanguage": "vue-html",
    "codeTokens": 59,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button @click=\"show = !show\">Toggle</button>\n<Transition>\n  <p v-if=\"show\">hello</p>\n</Transition>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Merging Class Attributes in Vue Components",
    "codeDescription": "Demonstrates how Vue automatically merges class attributes when both the parent component passes a class and the child component has its own class on the root element.",
    "codeLanguage": "vue-html",
    "codeTokens": 59,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Fallthrough Attributes Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- template of <MyButton> -->\n<button class=\"btn\">Click Me</button>"
      },
      {
        "language": "html",
        "code": "<button class=\"btn large\">Click Me</button>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Initializing Data for v-for in Vue.js (Composition API)",
    "codeDescription": "Demonstrates how to set up reactive data for use with v-for in the Composition API. It creates a ref containing an array of objects.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#2025-04-08_snippet_0",
    "pageTitle": "List Rendering in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const items = ref([{ message: 'Foo' }, { message: 'Bar' }])"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Using $emit to Trigger Component Events",
    "codeDescription": "Example demonstrating how to use the $emit method to trigger custom events with and without additional arguments from within a component.",
    "codeLanguage": "javascript",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#2025-04-08_snippet_16",
    "pageTitle": "Vue.js Component Instance API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  created() {\n    // only event\n    this.$emit('foo')\n    // with additional arguments\n    this.$emit('bar', 1, 2, 3)\n  }\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Using reactive State in Vue Template",
    "codeDescription": "Demonstrates how to use a reactive object in a Vue template, accessing and modifying its properties directly without unwrapping like refs require.",
    "codeLanguage": "vue-html",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_11",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button @click=\"state.count++\">\n  {{ state.count }}\n</button>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Vue SFC with Composition API and Setup",
    "codeDescription": "Shows how to structure a Vue Single-File Component using the Composition API with <script setup>, demonstrating a more concise way to handle component logic.",
    "codeLanguage": "vue",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/sfc.md#2025-04-08_snippet_1",
    "pageTitle": "Vue Single-File Components Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\nconst greeting = ref('Hello World!')\n</script>\n\n<template>\n  <p class=\"greeting\">{{ greeting }}</p>\n</template>\n\n<style>\n.greeting {\n  color: red;\n  font-weight: bold;\n}\n</style>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "v-if with v-else Toggle Example",
    "codeDescription": "Shows how to use v-if with v-else for toggling between two different elements based on a condition.",
    "codeLanguage": "vue",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Conditional Rendering Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button @click=\"awesome = !awesome\">Toggle</button>\n\n<h1 v-if=\"awesome\">Vue is awesome!</h1>\n<h1 v-else>Oh no 😢</h1>"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Defining Nullable Required Prop in Vue.js Composition API",
    "codeDescription": "This snippet shows how to define a required prop that can also be null in Vue.js Composition API.",
    "codeLanguage": "javascript",
    "codeTokens": 53,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_37",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "defineProps({\n  id: {\n    type: [String, null],\n    required: true\n  }\n})"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Implementing Computed Property with Composition API",
    "codeDescription": "Shows how to create a computed property using Vue's Composition API with ref and computed functions.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Computed Properties Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref, computed } from 'vue'\n\nconst hideCompleted = ref(false)\nconst todos = ref([\n  /* ... */\n])\n\nconst filteredTodos = computed(() => {\n  // return filtered todos based on\n  // `todos.value` & `hideCompleted.value`\n})"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Using Computed Property in Vue Options API",
    "codeDescription": "This snippet shows how to define and use a computed property in the Options API of Vue.js. It creates a computed getter that checks if the author has published books.",
    "codeLanguage": "javascript",
    "codeTokens": 154,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#2025-04-08_snippet_2",
    "pageTitle": "Computed Properties in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  },\n  computed: {\n    // a computed getter\n    publishedBooksMessage() {\n      // `this` points to the component instance\n      return this.author.books.length > 0 ? 'Yes' : 'No'\n    }\n  }\n}"
      }
    ],
    "relevance": 0.94
  },
  {
    "codeTitle": "Defining a Vue.js Plugin",
    "codeDescription": "Shows the structure of a Vue.js plugin, which can be an object with an install method or a function. The install function receives the app instance and optional configuration options.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Plugins Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const myPlugin = {\n  install(app, options) {\n    // configure the app\n  }\n}"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Component Template with Default and Named Slots in Vue.js",
    "codeDescription": "Shows how to define slots in a component template, including a default slot with props and a named footer slot.",
    "codeLanguage": "vue-html",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_18",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- <MyComponent> template -->\n<div>\n  <slot :message=\"hello\"></slot>\n  <slot name=\"footer\" />\n</div>"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "Creating Native Elements with Vue's h() Function",
    "codeDescription": "Examples of creating native DOM elements using the h() function in Vue. Shows various patterns for creating elements with different props, class and style handling, event listeners, and different ways of passing children.",
    "codeLanguage": "JavaScript",
    "codeTokens": 264,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/render-function.md#2025-04-08_snippet_1",
    "pageTitle": "Render Function APIs in Vue.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { h } from 'vue'\n\n// all arguments except the type are optional\nh('div')\nh('div', { id: 'foo' })\n\n// both attributes and properties can be used in props\n// Vue automatically picks the right way to assign it\nh('div', { class: 'bar', innerHTML: 'hello' })\n\n// class and style have the same object / array\n// value support like in templates\nh('div', { class: [foo, { bar }], style: { color: 'red' } })\n\n// event listeners should be passed as onXxx\nh('div', { onClick: () => {} })\n\n// children can be a string\nh('div', { id: 'foo' }, 'hello')\n\n// props can be omitted when there are no props\nh('div', 'hello')\nh('div', [h('span', 'hello')])\n\n// children array can contain mixed vnodes and strings\nh('div', ['hello', h('span', 'hello')])"
      }
    ],
    "relevance": 0.938
  },
  {
    "codeTitle": "App-level Provide in Vue.js",
    "codeDescription": "Shows how to provide data at the app level, making it available to all components rendered in the app. This is useful for plugins that can't provide values using components.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#2025-04-08_snippet_3",
    "pageTitle": "Provide/Inject in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.provide(/* key */ 'message', /* value */ 'hello!')"
      }
    ],
    "relevance": 0.937
  },
  {
    "codeTitle": "App-level Provide in Vue.js",
    "codeDescription": "Shows how to provide data at the app level, making it available to all components rendered in the app. This is useful for plugins that can't provide values using components.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#2025-04-08_snippet_3",
    "pageTitle": "Provide/Inject in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp({})\n\napp.provide(/* key */ 'message', /* value */ 'hello!')"
      }
    ],
    "relevance": 0.937
  },
  {
    "codeTitle": "Using v-model with Custom Modifiers",
    "codeDescription": "Example of using a custom modifier 'capitalize' with v-model to transform the input data in a parent component.",
    "codeLanguage": "vue-html",
    "codeTokens": 46,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_9",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent v-model.capitalize=\"myText\" />"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Creating a Writable Computed Property in Vue Composition API",
    "codeDescription": "This snippet demonstrates how to create a writable computed property in the Composition API of Vue.js. It defines a computed property with both a getter and a setter for a full name.",
    "codeLanguage": "vue",
    "codeTokens": 143,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#2025-04-08_snippet_7",
    "pageTitle": "Computed Properties in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, computed } from 'vue'\n\nconst firstName = ref('John')\nconst lastName = ref('Doe')\n\nconst fullName = computed({\n  // getter\n  get() {\n    return firstName.value + ' ' + lastName.value\n  },\n  // setter\n  set(newValue) {\n    // Note: we are using destructuring assignment syntax here.\n    [firstName.value, lastName.value] = newValue.split(' ')\n  }\n})\n</script>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Basic Transition CSS",
    "codeDescription": "CSS classes for basic transition animation defining opacity transition effects.",
    "codeLanguage": "css",
    "codeTokens": 60,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "css",
        "code": ".v-enter-active,\n.v-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.v-enter-from,\n.v-leave-to {\n  opacity: 0;\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "KeepAlive Max Cached Instances",
    "codeDescription": "Example of limiting the maximum number of cached component instances.",
    "codeLanguage": "vue-html",
    "codeTokens": 45,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js KeepAlive Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<KeepAlive :max=\"10\">\n  <component :is=\"activeComponent\" />\n</KeepAlive>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementing Temperature Converter Component in Vue.js",
    "codeDescription": "This Vue.js component creates a temperature converter with two-way data binding. It uses computed properties to automatically update the converted temperature value when the input changes.",
    "codeLanguage": "vue",
    "codeTokens": 155,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/examples/src/temperature-converter/description.txt#2025-04-08_snippet_0",
    "pageTitle": "Temperature Converter Example in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, computed } from 'vue'\n\nconst c = ref(0)\nconst f = computed({\n  get() {\n    return c.value * (9 / 5) + 32\n  },\n  set(value) {\n    c.value = (value - 32) * (5 / 9)\n  }\n})\n</script>\n\n<template>\n  <input v-model.number=\"c\" type=\"number\" /> Celsius =\n  <input v-model.number=\"f\" type=\"number\" /> Fahrenheit\n</template>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Event Emission in Options API",
    "codeDescription": "Demonstrates emitting events using this.$emit() within component methods in Options API.",
    "codeLanguage": "javascript",
    "codeTokens": 51,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Component Events Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  methods: {\n    submit() {\n      this.$emit('someEvent')\n    }\n  }\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Providing Custom Content to a Slot in Vue.js",
    "codeDescription": "Demonstrates providing custom content to a component with a slot, which will override any fallback content defined in the component.",
    "codeLanguage": "vue-html",
    "codeTokens": 42,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_10",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<SubmitButton>Save</SubmitButton>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Checkbox Binding with v-model",
    "codeDescription": "Example of checkbox input binding with boolean value using v-model.",
    "codeLanguage": "vue-html",
    "codeTokens": 50,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Form Input Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\" />\n<label for=\"checkbox\">{{ checked }}</label>"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Implementing Provide/Inject in Vue.js Plugins",
    "codeDescription": "Shows how to use the provide/inject pattern in a Vue.js plugin. The plugin provides the options object, which can then be injected into components for use.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Plugins Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// plugins/i18n.js\nexport default {\n  install: (app, options) => {\n    app.provide('i18n', options)\n  }\n}"
      }
    ],
    "relevance": 0.935
  },
  {
    "codeTitle": "Using ref Attribute in Vue.js Options API",
    "codeDescription": "Demonstrates how to use the ref attribute to register a reference to an element in the Options API. The reference is stored in the component's $refs object.",
    "codeLanguage": "vue-html",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#2025-04-08_snippet_2",
    "pageTitle": "Built-in Special Attributes in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- stored as this.$refs.p -->\n<p ref=\"p\">hello</p>"
      }
    ],
    "relevance": 0.934
  },
  {
    "codeTitle": "Correct Way to Watch Reactive Property in Composition API",
    "codeDescription": "Demonstrates the correct approach to watch a property of a reactive object using a getter function that returns the reactive property.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Watchers",
    "codeList": [
      {
        "language": "javascript",
        "code": "// instead, use a getter:\nwatch(\n  () => obj.count,\n  (count) => {\n    console.log(`Count is: ${count}`)\n  }\n)"
      }
    ],
    "relevance": 0.934
  },
  {
    "codeTitle": "Implementing Lazy Hydration Strategies for Async Components in Vue.js",
    "codeDescription": "Demonstrates various lazy hydration strategies for async components in Vue 3.5+, including hydrating on idle, on visible, on media query, and on interaction. These strategies help optimize server-side rendered applications.",
    "codeLanguage": "javascript",
    "codeTokens": 238,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#2025-04-08_snippet_6",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineAsyncComponent, hydrateOnIdle, hydrateOnVisible, hydrateOnMediaQuery, hydrateOnInteraction } from 'vue'\n\n// Hydrate on Idle\nconst AsyncComp1 = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnIdle()\n})\n\n// Hydrate on Visible\nconst AsyncComp2 = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnVisible()\n})\n\n// Hydrate on Media Query\nconst AsyncComp3 = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnMediaQuery('(max-width:500px)')\n})\n\n// Hydrate on Interaction\nconst AsyncComp4 = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: hydrateOnInteraction('click')\n})"
      }
    ],
    "relevance": 0.933
  },
  {
    "codeTitle": "Implementing Multiple Select with v-model in Vue.js",
    "codeDescription": "Example showing how to implement a multiple select dropdown with v-model binding in Vue.js. The code binds the selected values to an array data property, allowing users to select multiple options.",
    "codeLanguage": "vue-html",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Form Input Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div>Selected: {{ selected }}</div>\n\n<select v-model=\"selected\" multiple>\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Updating Lists using Composition API in Vue.js",
    "codeDescription": "Shows how to update a list using the Composition API approach, demonstrating both pushing new items and filtering the array.",
    "codeLanguage": "javascript",
    "codeTokens": 39,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-7/description.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js List Rendering Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "todos.value.push(newTodo)"
      },
      {
        "language": "javascript",
        "code": "todos.value = todos.value.filter(/* ... */)"
      }
    ],
    "relevance": 0.932
  },
  {
    "codeTitle": "Type Definition of effectScope in Vue.js",
    "codeDescription": "TypeScript interface definition for effectScope() which creates an effect scope object to capture and manage reactive effects like computed and watchers.",
    "codeLanguage": "typescript",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#2025-04-08_snippet_16",
    "pageTitle": "Vue.js Reactivity API - Advanced",
    "codeList": [
      {
        "language": "typescript",
        "code": "function effectScope(detached?: boolean): EffectScope\n\ninterface EffectScope {\n  run<T>(fn: () => T): T | undefined // undefined if scope is inactive\n  stop(): void\n}"
      }
    ],
    "relevance": 0.931
  },
  {
    "codeTitle": "Using Interface for Props Types in Vue.js with TypeScript",
    "codeDescription": "Demonstrates how to use a separate interface to define prop types in a Vue.js component with TypeScript.",
    "codeLanguage": "vue",
    "codeTokens": 64,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#2025-04-08_snippet_2",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\ninterface Props {\n  foo: string\n  bar?: number\n}\n\nconst props = defineProps<Props>()\n</script>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Once Watchers in Composition API",
    "codeDescription": "Demonstrates creating a watcher that triggers only once when the source changes in Composition API using the once: true option. Only supported in Vue 3.4+.",
    "codeLanguage": "javascript",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#2025-04-08_snippet_14",
    "pageTitle": "Vue.js Watchers",
    "codeList": [
      {
        "language": "javascript",
        "code": "watch(\n  source,\n  (newValue, oldValue) => {\n    // when `source` changes, triggers only once\n  },\n  { once: true }\n)"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Defining JavaScript Hooks for Vue Transitions",
    "codeDescription": "This snippet demonstrates how to add JavaScript hooks to a Vue Transition component. It shows the available lifecycle hooks for both entering and leaving transitions.",
    "codeLanguage": "vue",
    "codeTokens": 121,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_11",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition\n  @before-enter=\"onBeforeEnter\"\n  @enter=\"onEnter\"\n  @after-enter=\"onAfterEnter\"\n  @enter-cancelled=\"onEnterCancelled\"\n  @before-leave=\"onBeforeLeave\"\n  @leave=\"onLeave\"\n  @after-leave=\"onAfterLeave\"\n  @leave-cancelled=\"onLeaveCancelled\"\n>\n  <!-- ... -->\n</Transition>"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Using v-for with Components in Vue.js",
    "codeDescription": "Demonstrates how to use v-for directive with a custom component. The example shows how to properly pass iterated data to components using props with explicit key binding.",
    "codeLanguage": "vue-html",
    "codeTokens": 60,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#2025-04-08_snippet_10",
    "pageTitle": "List Rendering in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent v-for=\"item in items\" :key=\"item.id\" />"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Optimizing Props Stability in Vue.js Templates",
    "codeDescription": "Demonstrates how to improve update performance by computing derived values in the parent component instead of passing frequently changing props to child components.",
    "codeLanguage": "html",
    "codeTokens": 65,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Performance Optimization Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<ListItem\n  v-for=\"item in list\"\n  :id=\"item.id\"\n  :active=\"item.id === activeId\" />"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Setup Context Usage",
    "codeDescription": "Illustrates how to use the setup context object to access attrs, slots, emit, and expose functions.",
    "codeLanguage": "javascript",
    "codeTokens": 122,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js setup() Composition API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  setup(props, context) {\n    // Attributes (Non-reactive object, equivalent to $attrs)\n    console.log(context.attrs)\n\n    // Slots (Non-reactive object, equivalent to $slots)\n    console.log(context.slots)\n\n    // Emit events (Function, equivalent to $emit)\n    console.log(context.emit)\n\n    // Expose public properties (Function)\n    console.log(context.expose)\n  }\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Defining Async Component with Promise in Vue.js",
    "codeDescription": "Demonstrates how to use defineAsyncComponent to create an async component using a Promise. The loader function returns a Promise that resolves with the loaded component.",
    "codeLanguage": "javascript",
    "codeTokens": 101,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#2025-04-08_snippet_0",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() => {\n  return new Promise((resolve, reject) => {\n    // ...load component from server\n    resolve(/* loaded component */)\n  })\n})\n// ... use `AsyncComp` like a normal component"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Component Name Casing in JavaScript/JSX",
    "codeDescription": "Shows the correct PascalCase usage for component names in JavaScript and JSX, with an option for kebab-case in global component registration.",
    "codeLanguage": "javascript",
    "codeTokens": 51,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_17",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.component('MyComponent', {\n  // ...\n})"
      },
      {
        "language": "javascript",
        "code": "import MyComponent from './MyComponent.vue'"
      },
      {
        "language": "javascript",
        "code": "export default {\n  name: 'MyComponent'\n  // ...\n}"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Converting Reactive Objects to Refs with toRefs() in TypeScript",
    "codeDescription": "The toRefs() function converts a reactive object to a plain object where each property is a ref pointing to the corresponding property of the original object. It's useful for destructuring reactive objects while maintaining reactivity.",
    "codeLanguage": "typescript",
    "codeTokens": 94,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Reactivity API Utilities",
    "codeList": [
      {
        "language": "typescript",
        "code": "function toRefs<T extends object>(\n  object: T\n): {\n  [K in keyof T]: ToRef<T[K]>\n}\n\ntype ToRef = T extends Ref ? T : Ref<T>"
      },
      {
        "language": "javascript",
        "code": "const state = reactive({\n  foo: 1,\n  bar: 2\n})\n\nconst stateAsRefs = toRefs(state)\n/*\nType of stateAsRefs: {\n  foo: Ref<number>,\n  bar: Ref<number>\n}\n*/\n\n// The ref and the original property is \"linked\"\nstate.foo++\nconsole.log(stateAsRefs.foo.value) // 2\n\nstateAsRefs.foo.value++\nconsole.log(state.foo) // 3"
      },
      {
        "language": "javascript",
        "code": "function useFeatureX() {\n  const state = reactive({\n    foo: 1,\n    bar: 2\n  })\n\n  // ...logic operating on state\n\n  // convert to refs when returning\n  return toRefs(state)\n}\n\n// can destructure without losing reactivity\nconst { foo, bar } = useFeatureX()"
      }
    ],
    "relevance": 0.93
  },
  {
    "codeTitle": "Using watchEffect() for Reactive Side Effects",
    "codeDescription": "Example of using watchEffect() to create a reactive effect that automatically re-runs when its dependencies change.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_7",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const count = ref(0)\n\nwatchEffect(() => console.log(count.value))\n// -> logs 0\n\ncount.value++\n// -> logs 1"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Writing a Basic Vue.js Component Test with Vitest",
    "codeDescription": "This code snippet demonstrates how to write a basic component test using Vitest and @testing-library/vue. It shows the structure of a test file and how to render and assert on a Vue component.",
    "codeLanguage": "JavaScript",
    "codeTokens": 118,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#2025-04-08_snippet_9",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// MyComponent.test.js\nimport { render } from '@testing-library/vue'\nimport MyComponent from './MyComponent.vue'\n\ntest('it should work', () => {\n  const { getByText } = render(MyComponent, {\n    props: {\n      /* ... */\n    }\n  })\n\n  // assert output\n  getByText('...')\n})"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Implementing Custom Hydration Strategy for Async Components in Vue.js",
    "codeDescription": "Shows how to implement a custom hydration strategy for async components. This allows for more fine-grained control over when and how the component is hydrated on the client side.",
    "codeLanguage": "typescript",
    "codeTokens": 133,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#2025-04-08_snippet_7",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineAsyncComponent, type HydrationStrategy } from 'vue'\n\nconst myStrategy: HydrationStrategy = (hydrate, forEachElement) => {\n  forEachElement(el => {\n    // ...\n  })\n  hydrate()\n  return () => {\n    // return a teardown function if needed\n  }\n}\n\nconst AsyncComp = defineAsyncComponent({\n  loader: () => import('./Comp.vue'),\n  hydrate: myStrategy\n})"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Initializing a Ref in Vue.js Composition API",
    "codeDescription": "This code demonstrates how to initialize a ref in the Composition API of Vue.js. The ref is created with a null value, as the element doesn't exist yet when the script is executed.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#2025-04-08_snippet_1",
    "pageTitle": "Lifecycle and Template Refs in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const pElementRef = ref(null)"
      }
    ],
    "relevance": 0.928
  },
  {
    "codeTitle": "Creating a Debounced Ref with customRef in JavaScript",
    "codeDescription": "Example of creating a custom debounced ref using customRef, which updates the value only after a specified delay has passed since the last set operation.",
    "codeLanguage": "javascript",
    "codeTokens": 132,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Reactivity API - Advanced",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { customRef } from 'vue'\n\nexport function useDebouncedRef(value, delay = 200) {\n  let timeout\n  return customRef((track, trigger) => {\n    return {\n      get() {\n        track()\n        return value\n      },\n      set(newValue) {\n        clearTimeout(timeout)\n        timeout = setTimeout(() => {\n          value = newValue\n          trigger()\n        }, delay)\n      }\n    }\n  })\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Implementing Multiple v-model in Composition API (Vue 3.4+)",
    "codeDescription": "Implementation of a component that supports multiple v-model bindings using defineModel() in Composition API. This shows how to handle multiple model values in a component.",
    "codeLanguage": "vue",
    "codeTokens": 98,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst firstName = defineModel('firstName')\nconst lastName = defineModel('lastName')\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"firstName\" />\n  <input type=\"text\" v-model=\"lastName\" />\n</template>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Implementing Custom v-model Modifiers in Composition API (Vue 3.4+)",
    "codeDescription": "Implementation of the 'capitalize' custom modifier using defineModel() with get/set options in Composition API.",
    "codeLanguage": "vue",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_11",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst [model, modifiers] = defineModel({\n  set(value) {\n    if (modifiers.capitalize) {\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n    return value\n  }\n})\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"model\" />\n</template>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Top-level Bindings in Script Setup",
    "codeDescription": "Demonstration of how top-level bindings in <script setup> are directly exposed to the template.",
    "codeLanguage": "vue",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\n// variable\nconst msg = 'Hello!'\n\n// functions\nfunction log() {\n  console.log(msg)\n}\n</script>\n\n<template>\n  <button @click=\"log\">{{ msg }}</button>\n</template>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Augmenting Vue Types as a Proper TypeScript Module",
    "codeDescription": "Shows the correct pattern for augmenting Vue types by making the file a proper TypeScript module, which ensures the augmentation extends rather than overwrites the original types.",
    "codeLanguage": "typescript",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#2025-04-08_snippet_10",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "// Works correctly\nexport {}\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $translate: (key: string) => string\n  }\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Implementing Reactive DOM Updates with Vue's watchEffect",
    "codeDescription": "This example demonstrates how to use Vue's watchEffect to create a simple reactive rendering system that updates the DOM when reactive state changes.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Reactivity System Deep Dive",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref, watchEffect } from 'vue'\n\nconst count = ref(0)\n\nwatchEffect(() => {\n  document.body.innerHTML = `Count is: ${count.value}`\n})\n\n// updates the DOM\ncount.value++"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Watching Destructured Props with Reactivity",
    "codeDescription": "Shows how to properly watch a destructured prop by using a getter function to maintain reactivity, which is important when the prop changes.",
    "codeLanguage": "js",
    "codeTokens": 45,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_10",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "watch(() => foo, /* ... */)"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Raw HTML Rendering in Vue Templates",
    "codeDescription": "Shows the difference between text interpolation and the v-html directive. While double mustaches interpret data as plain text, v-html renders content as actual HTML. This example demonstrates both approaches side by side.",
    "codeLanguage": "vue-html",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Template Syntax",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<p>Using text interpolation: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Creating an Event Listener Composable in JavaScript",
    "codeDescription": "This snippet shows how to create a composable for adding and removing DOM event listeners.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#2025-04-08_snippet_3",
    "pageTitle": "Composables in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "// event.js\nimport { onMounted, onUnmounted } from 'vue'\n\nexport function useEventListener(target, event, callback) {\n  // if you want, you can also make this\n  // support selector strings as target\n  onMounted(() => target.addEventListener(event, callback))\n  onUnmounted(() => target.removeEventListener(event, callback))\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Integrating XState with Vue for State Machine Management",
    "codeDescription": "Demonstrates how to create a composable function that integrates XState, a popular state machine library, with Vue's reactivity system. This allows for robust state management in complex applications.",
    "codeLanguage": "javascript",
    "codeTokens": 142,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#2025-04-08_snippet_14",
    "pageTitle": "Vue.js Reactivity System Deep Dive",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createMachine, interpret } from 'xstate'\nimport { shallowRef } from 'vue'\n\nexport function useMachine(options) {\n  const machine = createMachine(options)\n  const state = shallowRef(machine.initialState)\n  const service = interpret(machine)\n    .onTransition((newState) => (state.value = newState))\n    .start()\n  const send = (event) => service.send(event)\n\n  return [state, send]\n}"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Passing Dynamic Props with v-bind",
    "codeDescription": "Examples showing how to pass dynamic props using v-bind (or its : shorthand). This allows passing variable values or complex expressions to components.",
    "codeLanguage": "vue-html",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_17",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Dynamically assign the value of a variable -->\n<BlogPost :title=\"post.title\" />\n\n<!-- Dynamically assign the value of a complex expression -->\n<BlogPost :title=\"post.title + ' by ' + post.author.name\" />"
      }
    ],
    "relevance": 0.925
  },
  {
    "codeTitle": "Creating Vnodes with h() Function in Vue",
    "codeDescription": "Demonstrates how to use Vue's h() function to create virtual DOM nodes (vnodes) with type, props, and children arguments.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#2025-04-08_snippet_0",
    "pageTitle": "Render Functions & JSX in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { h } from 'vue'\n\nconst vnode = h(\n  'div', // type\n  { id: 'foo', class: 'bar' }, // props\n  [\n    /* children */\n  ]\n)"
      }
    ],
    "relevance": 0.924
  },
  {
    "codeTitle": "Using Mouse Tracking Composable in Vue Component",
    "codeDescription": "This snippet demonstrates how to use the mouse tracking composable in a Vue component.",
    "codeLanguage": "vue",
    "codeTokens": 71,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#2025-04-08_snippet_2",
    "pageTitle": "Composables in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { useMouse } from './mouse.js'\n\nconst { x, y } = useMouse()\n</script>\n\n<template>Mouse position is at: {{ x }}, {{ y }}</template>"
      }
    ],
    "relevance": 0.923
  },
  {
    "codeTitle": "Using System Modifier Keys with Vue Events",
    "codeDescription": "Examples showing how to use system modifier keys (Alt, Ctrl) with keyboard and mouse events in Vue.js. Demonstrates combining modifiers with specific keys and click events.",
    "codeLanguage": "vue-html",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#2025-04-08_snippet_7",
    "pageTitle": "Event Handling in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Alt + Enter -->\n<input @keyup.alt.enter=\"clear\" />\n\n<!-- Ctrl + Click -->\n<div @click.ctrl=\"doSomething\">Do something</div>"
      }
    ],
    "relevance": 0.922
  },
  {
    "codeTitle": "Basic Attribute Binding with v-bind in Vue",
    "codeDescription": "Demonstrates how to bind a dynamic value to an HTML attribute using the v-bind directive. This example binds the element's id attribute to the dynamicId property from the component instance.",
    "codeLanguage": "vue-html",
    "codeTokens": 57,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Template Syntax",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div v-bind:id=\"dynamicId\"></div>"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Declaring Props with defineProps in Script Setup (Vue Composition API)",
    "codeDescription": "Example showing how to declare props using the defineProps() macro in a Vue component with <script setup>. The props can be accessed directly from the returned object.",
    "codeLanguage": "vue",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst props = defineProps(['foo'])\n\nconsole.log(props.foo)\n</script>"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Using Conditional Directives in Vue",
    "codeDescription": "Shows how to use the v-if directive to conditionally render an element based on the truthiness of an expression. The element will be inserted or removed from the DOM as the value of 'seen' changes.",
    "codeLanguage": "vue-html",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#2025-04-08_snippet_12",
    "pageTitle": "Vue.js Template Syntax",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<p v-if=\"seen\">Now you see me</p>"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Listening to Custom Events in Vue.js Components",
    "codeDescription": "Demonstrates how to listen to custom events emitted by child components using v-on or its shorthand @. Includes examples of both method handler and inline statement usage.",
    "codeLanguage": "vue-html",
    "codeTokens": 74,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#2025-04-08_snippet_6",
    "pageTitle": "Built-in Directives in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent @my-event=\"handleThis\" />\n\n<!-- inline statement -->\n<MyComponent @my-event=\"handleThis(123, $event)\" />"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Complex Slot Content with Elements and Components",
    "codeDescription": "Demonstrates that slot content can include multiple elements and even other components, not just text, providing flexibility in component composition.",
    "codeLanguage": "vue-html",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<FancyButton>\n  <span style=\"color:red\">Click me!</span>\n  <AwesomeIcon name=\"plus\" />\n</FancyButton>"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Using v-model for Two-Way Binding in Vue.js",
    "codeDescription": "Illustrates the usage of v-model directive for creating two-way data bindings on form inputs and components in Vue.js.",
    "codeLanguage": "vue-html",
    "codeTokens": 117,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#2025-04-08_snippet_8",
    "pageTitle": "Built-in Directives in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Basic v-model usage on different form elements -->\n<input v-model=\"message\">\n<textarea v-model=\"message\"></textarea>\n<select v-model=\"selected\">\n  <option>A</option>\n  <option>B</option>\n  <option>C</option>\n</select>\n\n<!-- v-model with modifiers -->\n<input v-model.lazy=\"message\">\n<input v-model.number=\"age\">\n<input v-model.trim=\"message\">"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Simplified Mouse Tracking Composable Using Event Listener Composable",
    "codeDescription": "This snippet demonstrates how to simplify the mouse tracking composable by using the event listener composable.",
    "codeLanguage": "javascript",
    "codeTokens": 110,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#2025-04-08_snippet_4",
    "pageTitle": "Composables in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "// mouse.js\nimport { ref } from 'vue'\nimport { useEventListener } from './event'\n\nexport function useMouse() {\n  const x = ref(0)\n  const y = ref(0)\n\n  useEventListener(window, 'mousemove', (event) => {\n    x.value = event.pageX\n    y.value = event.pageY\n  })\n\n  return { x, y }\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Using Multiple v-model Bindings in Vue Templates",
    "codeDescription": "Example of using multiple v-model bindings on a single component instance to sync different props without additional options.",
    "codeLanguage": "vue-html",
    "codeTokens": 53,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<UserName\n  v-model:first-name=\"first\"\n  v-model:last-name=\"last\"\n/>"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "Accessing Fallthrough Attributes with Options API",
    "codeDescription": "Shows how to access fallthrough attributes using the $attrs instance property in the Options API approach.",
    "codeLanguage": "js",
    "codeTokens": 48,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#2025-04-08_snippet_9",
    "pageTitle": "Vue.js Fallthrough Attributes Guide",
    "codeList": [
      {
        "language": "js",
        "code": "export default {\n  created() {\n    console.log(this.$attrs)\n  }\n}"
      }
    ],
    "relevance": 0.92
  },
  {
    "codeTitle": "JavaScript Expressions in Vue Templates",
    "codeDescription": "Shows various examples of using JavaScript expressions in Vue bindings, including arithmetic operations, ternary conditionals, string manipulation, and template literals. These expressions are evaluated in the data scope of the current component instance.",
    "codeLanguage": "vue-html",
    "codeTokens": 90,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#2025-04-08_snippet_10",
    "pageTitle": "Vue.js Template Syntax",
    "codeList": [
      {
        "language": "vue-html",
        "code": "{{ number + 1 }}\n\n{{ ok ? 'YES' : 'NO' }}\n\n{{ message.split('').reverse().join('') }}\n\n<div :id=\"`list-${id}`\"></div>"
      }
    ],
    "relevance": 0.919
  },
  {
    "codeTitle": "Defining a Method Instead of Computed Property in Vue Composition API",
    "codeDescription": "This snippet demonstrates how to define a method instead of a computed property in the Composition API of Vue.js. It creates a function that checks if the author has published books.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#2025-04-08_snippet_5",
    "pageTitle": "Computed Properties in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "// in component\nfunction calculateBooksMessage() {\n  return author.books.length > 0 ? 'Yes' : 'No'\n}"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Using Refs on Child Components with Composition API in Vue.js",
    "codeDescription": "This code demonstrates how to use refs on child components with the Composition API, allowing access to the child component instance.",
    "codeLanguage": "vue",
    "codeTokens": 106,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#2025-04-08_snippet_6",
    "pageTitle": "Understanding Template Refs in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\nimport Child from './Child.vue'\n\nconst childRef = useTemplateRef('child')\n\nonMounted(() => {\n  // childRef.value will hold an instance of <Child />\n})\n</script>\n\n<template>\n  <Child ref=\"child\" />\n</template>"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Adding Event Modifiers with withModifiers()",
    "codeDescription": "Example of using withModifiers() to add built-in v-on modifiers like stop and prevent to an event handler function. This function helps in manually applying the same event modifiers available in templates.",
    "codeLanguage": "JavaScript",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/render-function.md#2025-04-08_snippet_8",
    "pageTitle": "Render Function APIs in Vue.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { h, withModifiers } from 'vue'\n\nconst vnode = h('button', {\n  // equivalent of v-on:click.stop.prevent\n  onClick: withModifiers(() => {\n    // ...\n  }, ['stop', 'prevent'])\n})"
      }
    ],
    "relevance": 0.918
  },
  {
    "codeTitle": "Inconsistent Vue.js Directive Shorthand Usage (Bad Practice)",
    "codeDescription": "These snippets demonstrate inconsistent usage of Vue.js directive shorthands, mixing full syntax and shorthand in the same template. This practice should be avoided for better consistency.",
    "codeLanguage": "vue-html",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_26",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input\n  v-bind:value=\"newTodoText\"\n  :placeholder=\"newTodoInstructions\"\n>"
      },
      {
        "language": "vue-html",
        "code": "<input\n  v-on:input=\"onInput\"\n  @focus=\"onFocus\"\n>"
      },
      {
        "language": "vue-html",
        "code": "<template v-slot:header>\n  <h1>Here might be a page title</h1>\n</template>\n\n<template #footer>\n  <p>Here's some contact info</p>\n</template>"
      }
    ],
    "relevance": 0.916
  },
  {
    "codeTitle": "Configuring Vue.js Runtime Error Tracking",
    "codeDescription": "Demonstrates how to set up a global error handler in a Vue.js application for tracking runtime errors using error tracking services. The handler receives error details, component instance, and error info as parameters.",
    "codeLanguage": "javascript",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/production-deployment.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Production Deployment Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp(...)\n\napp.config.errorHandler = (err, instance, info) => {\n  // report error to tracking services\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Setting Default Values for Props in Vue.js with TypeScript",
    "codeDescription": "Demonstrates how to set default values for props using Reactive Props Destructure in Vue.js 3.5+ with TypeScript.",
    "codeLanguage": "typescript",
    "codeTokens": 74,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#2025-04-08_snippet_4",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst { msg = 'hello', labels = ['one', 'two'] } = defineProps<Props>()"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Configuring App Instance of a Vue Custom Element",
    "codeDescription": "Configuration example for setting up the internal Vue app instance of a custom element, such as adding an error handler.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Integration with Web Components",
    "codeList": [
      {
        "language": "javascript",
        "code": "defineCustomElement(MyComponent, {\n  configureApp(app) {\n    app.config.errorHandler = (err) => {\n      /* ... */\n    }\n  }\n})"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Providing Data with Options API in Vue.js",
    "codeDescription": "Demonstrates how to provide data to descendant components using the provide option in the Options API. It includes an example of providing per-instance state.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#2025-04-08_snippet_2",
    "pageTitle": "Provide/Inject in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  provide: {\n    message: 'hello!'\n  }\n}"
      },
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      message: 'hello!'\n    }\n  },\n  provide() {\n    // use function syntax so that we can access `this`\n    return {\n      message: this.message\n    }\n  }\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Defining Custom Directive Hooks in Vue.js",
    "codeDescription": "This snippet showcases the full set of lifecycle hooks available for custom directives in Vue.js. Each hook receives specific arguments and is called at different stages of the element's lifecycle.",
    "codeLanguage": "javascript",
    "codeTokens": 238,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#2025-04-08_snippet_5",
    "pageTitle": "Custom Directives in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const myDirective = {\n  // called before bound element's attributes\n  // or event listeners are applied\n  created(el, binding, vnode) {\n    // see below for details on arguments\n  },\n  // called right before the element is inserted into the DOM.\n  beforeMount(el, binding, vnode) {},\n  // called when the bound element's parent component\n  // and all its children are mounted.\n  mounted(el, binding, vnode) {},\n  // called before the parent component is updated\n  beforeUpdate(el, binding, vnode, prevVnode) {},\n  // called after the parent component and\n  // all of its children have updated\n  updated(el, binding, vnode, prevVnode) {},\n  // called before the parent component is unmounted\n  beforeUnmount(el, binding, vnode) {},\n  // called when the parent component is unmounted\n  unmounted(el, binding, vnode) {}\n}"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Replacing an Array with Filter Method in Composition API",
    "codeDescription": "Shows how to replace a reactive array using the non-mutating filter method in Vue's Composition API. This approach creates a new array without modifying the original.",
    "codeLanguage": "js",
    "codeTokens": 71,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#2025-04-08_snippet_12",
    "pageTitle": "List Rendering in Vue.js",
    "codeList": [
      {
        "language": "js",
        "code": "// `items` is a ref with array value\nitems.value = items.value.filter((item) => item.message.match(/Foo/))"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Nested Component Attribute Inheritance in Vue",
    "codeDescription": "Demonstrates how fallthrough attributes cascade through nested components when a component renders another component as its root node.",
    "codeLanguage": "vue-html",
    "codeTokens": 49,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Fallthrough Attributes Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- template of <MyButton/> that simply renders another component -->\n<BaseButton />"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Using Function Refs in Vue.js HTML",
    "codeDescription": "This snippet shows how to use a function ref in Vue.js, which allows for more flexibility in handling the element reference.",
    "codeLanguage": "vue-html",
    "codeTokens": 57,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#2025-04-08_snippet_5",
    "pageTitle": "Understanding Template Refs in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input :ref=\"(el) => { /* assign el to a property or ref */ }\">"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Base Component Names - Good Practice with Base Prefix",
    "codeDescription": "Example of correctly named base components using the 'Base' prefix, which helps identify components that serve as foundational UI elements.",
    "codeLanguage": "plaintext",
    "codeTokens": 54,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "plaintext",
        "code": "components/\n|- BaseButton.vue\n|- BaseTable.vue\n|- BaseIcon.vue"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Implementing Event Handler Function with Composition API in SFC",
    "codeDescription": "Shows how to implement the increment function using the Composition API in a Vue Single File Component with <script setup>. It uses ref to create reactive state and updates it by incrementing the count value.",
    "codeLanguage": "vue",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Event Listeners",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n\nfunction increment() {\n  // update component state\n  count.value++\n}\n</script>"
      }
    ],
    "relevance": 0.915
  },
  {
    "codeTitle": "Methods Type Definition",
    "codeDescription": "TypeScript interface definition for Vue component methods option.",
    "codeLanguage": "typescript",
    "codeTokens": 53,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Component Options State Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  methods?: {\n    [key: string]: (this: ComponentPublicInstance, ...args: any[]) => any\n  }\n}"
      }
    ],
    "relevance": 0.913
  },
  {
    "codeTitle": "Type Definition for components Option in Vue.js",
    "codeDescription": "TypeScript interface definition for the components option, which registers child components to be made available to the component instance.",
    "codeLanguage": "ts",
    "codeTokens": 50,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Component Options: Miscellaneous Configuration",
    "codeList": [
      {
        "language": "ts",
        "code": "interface ComponentOptions {\n  components?: { [key: string]: Component }\n}"
      }
    ],
    "relevance": 0.913
  },
  {
    "codeTitle": "Typing Complex Prop Types in Vue.js with TypeScript",
    "codeDescription": "Shows how to type complex prop types using type-based declaration in a Vue.js component with TypeScript.",
    "codeLanguage": "vue",
    "codeTokens": 74,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#2025-04-08_snippet_7",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\ninterface Book {\n  title: string\n  author: string\n  year: number\n}\n\nconst props = defineProps<{\n  book: Book\n}>()\n</script>"
      }
    ],
    "relevance": 0.913
  },
  {
    "codeTitle": "Using Single-File Components as Custom Elements",
    "codeDescription": "Example of importing a Vue SFC in custom element mode, accessing its styles, converting it to a custom element constructor, and registering it with the browser.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Integration with Web Components",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineCustomElement } from 'vue'\nimport Example from './Example.ce.vue'\n\nconsole.log(Example.styles) // [\"/* inlined css */\"]\n\n// convert into custom element constructor\nconst ExampleElement = defineCustomElement(Example)\n\n// register\ncustomElements.define('my-example', ExampleElement)"
      }
    ],
    "relevance": 0.912
  },
  {
    "codeTitle": "Defining and Using a Custom Element with Vue",
    "codeDescription": "Example demonstrating how to define a custom element with Vue, register it with the browser, and then use it in HTML markup.",
    "codeLanguage": "html",
    "codeTokens": 48,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Integration with Web Components",
    "codeList": [
      {
        "language": "html",
        "code": "<my-vue-element></my-vue-element>"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Binding Complex Values to Select Options in Vue.js",
    "codeDescription": "Example showing how to bind complex values like objects to select options using v-bind. This allows setting the model value to non-string values when options are selected.",
    "codeLanguage": "vue-html",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#2025-04-08_snippet_16",
    "pageTitle": "Vue.js Form Input Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<select v-model=\"selected\">\n  <!-- inline object literal -->\n  <option :value=\"{ number: 123 }\">123</option>\n</select>"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Advanced Move Transitions in Vue Lists",
    "codeDescription": "Enhanced list animations that include smooth transitions when items are moved, added, or removed from the list using CSS transitions.",
    "codeLanguage": "css",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition-group.md#2025-04-08_snippet_1",
    "pageTitle": "Vue TransitionGroup Component Documentation",
    "codeList": [
      {
        "language": "css",
        "code": ".list-move,\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.5s ease;\n}\n\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}\n\n.list-leave-active {\n  position: absolute;\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Setting Injection Default Values in Vue.js Composition API",
    "codeDescription": "Shows how to set default values for injected properties in the Composition API, including using a factory function for expensive computations.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#2025-04-08_snippet_7",
    "pageTitle": "Provide/Inject in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "// `value` will be \"default value\"\n// if no data matching \"message\" was provided\nconst value = inject('message', 'default value')"
      },
      {
        "language": "javascript",
        "code": "const value = inject('key', () => new ExpensiveClass(), true)"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Computed Property for Filtered Lists in Composition API",
    "codeDescription": "Implementation of a computed property in Vue.js Composition API to filter active users, which is the preferred approach instead of using v-if with v-for.",
    "codeLanguage": "js",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#2025-04-08_snippet_12",
    "pageTitle": "Vue.js Style Guide: Essential Rules",
    "codeList": [
      {
        "language": "js",
        "code": "const activeUsers = computed(() => {\n  return users.filter((user) => user.isActive)\n})"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Using Template Refs inside v-for with Composition API in Vue.js",
    "codeDescription": "This code shows how to use template refs inside a v-for loop with the Composition API. It demonstrates how to access an array of refs corresponding to list items.",
    "codeLanguage": "vue",
    "codeTokens": 133,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#2025-04-08_snippet_3",
    "pageTitle": "Understanding Template Refs in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, useTemplateRef, onMounted } from 'vue'\n\nconst list = ref([\n  /* ... */\n])\n\nconst itemRefs = useTemplateRef('items')\n\nonMounted(() => console.log(itemRefs.value))\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"items\">\n      {{ item }}\n    </li>\n  </ul>\n</template>"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Imports in Script Setup",
    "codeDescription": "Example showing how imports can be directly used in templates with <script setup>.",
    "codeLanguage": "vue",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { capitalize } from './helpers'\n</script>\n\n<template>\n  <div>{{ capitalize('hello') }}</div>\n</template>"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Implementing inheritAttrs with Composition API in Vue.js",
    "codeDescription": "Example of disabling attribute inheritance with defineOptions and <script setup>, manually binding attributes with v-bind=\"$attrs\".",
    "codeLanguage": "vue",
    "codeTokens": 118,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Component Options: Miscellaneous Configuration",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\ndefineProps(['label', 'value'])\ndefineEmits(['input'])\ndefineOptions({\n  inheritAttrs: false\n})\n</script>\n\n<template>\n  <label>\n    {{ label }}\n    <input\n      v-bind=\"$attrs\"\n      v-bind:value=\"value\"\n      v-on:input=\"$emit('input', $event.target.value)\"\n    />\n  </label>\n</template>"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Multiple Checkbox Binding",
    "codeDescription": "Example of binding multiple checkboxes to an array using v-model.",
    "codeLanguage": "vue-html",
    "codeTokens": 126,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Form Input Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div>Checked names: {{ checkedNames }}</div>\n\n<input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\" />\n<label for=\"jack\">Jack</label>\n\n<input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\" />\n<label for=\"john\">John</label>\n\n<input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\" />\n<label for=\"mike\">Mike</label>"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Creating Object for Props in Composition API",
    "codeDescription": "Example showing how to create an object in Composition API that can be used for passing multiple properties as props using v-bind without an argument.",
    "codeLanguage": "js",
    "codeTokens": 57,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_23",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "const post = {\n  id: 1,\n  title: 'My Journey with Vue'\n}"
      }
    ],
    "relevance": 0.91
  },
  {
    "codeTitle": "Using the .trim Modifier with v-model in Vue.js",
    "codeDescription": "Example showing how to use the .trim modifier with v-model to automatically trim whitespace from user input. This helps ensure clean data without leading or trailing spaces.",
    "codeLanguage": "vue-html",
    "codeTokens": 53,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#2025-04-08_snippet_19",
    "pageTitle": "Vue.js Form Input Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input v-model.trim=\"msg\" />"
      }
    ],
    "relevance": 0.908
  },
  {
    "codeTitle": "Type Definition for Component Name Option in Vue.js",
    "codeDescription": "TypeScript interface definition for the name option in Vue components, which allows explicitly declaring a display name for the component.",
    "codeLanguage": "ts",
    "codeTokens": 45,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Component Options: Miscellaneous Configuration",
    "codeList": [
      {
        "language": "ts",
        "code": "interface ComponentOptions {\n  name?: string\n}"
      }
    ],
    "relevance": 0.908
  },
  {
    "codeTitle": "Self-Closing Components - Good Practice",
    "codeDescription": "Examples showing correct usage of self-closing syntax in Vue components, which varies depending on the template context.",
    "codeLanguage": "html",
    "codeTokens": 51,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_15",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- In Single-File Components, string templates, and JSX -->\n<MyComponent/>"
      },
      {
        "language": "html",
        "code": "<!-- In in-DOM templates -->\n<my-component></my-component>"
      }
    ],
    "relevance": 0.907
  },
  {
    "codeTitle": "Correct Usage of Default and Named Slots in Vue.js",
    "codeDescription": "Demonstrates the correct way to use both default and named slots by using an explicit template tag for the default slot to clearly define prop scope.",
    "codeLanguage": "vue-html",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_20",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent>\n  <!-- Use explicit default slot -->\n  <template #default=\"{ message }\">\n    <p>{{ message }}</p>\n  </template>\n\n  <template #footer>\n    <p>Here's some contact info</p>\n  </template>\n</MyComponent>"
      }
    ],
    "relevance": 0.907
  },
  {
    "codeTitle": "Using onMounted Hook in Vue.js Composition API (HTML)",
    "codeDescription": "This code demonstrates how to use the onMounted lifecycle hook in a Vue.js application using the Composition API in an HTML file. It shows the setup function where onMounted is called.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#2025-04-08_snippet_3",
    "pageTitle": "Lifecycle and Template Refs in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { onMounted } from 'vue'\n\ncreateApp({\n  setup() {\n    onMounted(() => {\n      // component is now mounted.\n    })\n  }\n})"
      }
    ],
    "relevance": 0.906
  },
  {
    "codeTitle": "Implementing a v-focus Custom Directive in Vue.js Composition API",
    "codeDescription": "This snippet shows how to implement a 'v-focus' custom directive using the Composition API. The directive automatically focuses an input element when it's mounted.",
    "codeLanguage": "vue",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#2025-04-08_snippet_3",
    "pageTitle": "Custom Directives in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\n// enables v-focus in templates\nconst vFocus = {\n  mounted: (el) => el.focus()\n}\n</script>\n\n<template>\n  <input v-focus />\n</template>"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "FancyList Example: Using Scoped Slots for Custom Item Rendering",
    "codeDescription": "Demonstrates using scoped slots to create a flexible list component where the parent component can customize how each item is rendered while the list component handles data fetching and other logic.",
    "codeLanguage": "vue-html",
    "codeTokens": 116,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_21",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<FancyList :api-url=\"url\" :per-page=\"10\">\n  <template #item=\"{ body, username, likes }\">\n    <div class=\"item\">\n      <p>{{ body }}</p>\n      <p>by {{ username }} | {{ likes }} likes</p>\n    </div>\n  </template>\n</FancyList>"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Event Handling with v-on Directive in Vue",
    "codeDescription": "Shows how to use the v-on directive to listen to DOM events. Both the full syntax and its @ shorthand are demonstrated for binding a click event to a method called 'doSomething'.",
    "codeLanguage": "vue-html",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#2025-04-08_snippet_14",
    "pageTitle": "Vue.js Template Syntax",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<a v-on:click=\"doSomething\"> ... </a>\n\n<!-- shorthand -->\n<a @click=\"doSomething\"> ... </a>"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Injecting and Using Provided State in Vue.js",
    "codeDescription": "This snippet shows how to inject and use the provided state in a child component using the Composition API in Vue.js. It uses the inject function to access the provided state and update function.",
    "codeLanguage": "vue",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#2025-04-08_snippet_10",
    "pageTitle": "Provide/Inject in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { inject } from 'vue'\n\nconst { location, updateLocation } = inject('location')\n</script>\n\n<template>\n  <button @click=\"updateLocation\">{{ location }}</button>\n</template>"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Nested Suspense with Suspensible Prop",
    "codeDescription": "Implementation of nested Suspense components using the suspensible prop to control async dependency resolution.",
    "codeLanguage": "vue-html",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#2025-04-08_snippet_6",
    "pageTitle": "Suspense Component in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Suspense>\n  <component :is=\"DynamicAsyncOuter\">\n    <Suspense suspensible> <!-- this -->\n      <component :is=\"DynamicAsyncInner\" />\n    </Suspense>\n  </component>\n</Suspense>"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Demonstrating Computed Stability in Vue.js",
    "codeDescription": "This snippet shows how computed properties in Vue 3.4+ only trigger effects when their computed value changes, reducing unnecessary effect triggers.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Performance Optimization Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const count = ref(0)\nconst isEven = computed(() => count.value % 2 === 0)\n\nwatchEffect(() => console.log(isEven.value)) // true\n\n// will not trigger new logs because the computed value stays `true`\ncount.value = 2\ncount.value = 4"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Component Usage in Script Setup",
    "codeDescription": "Example of importing and using components in <script setup>.",
    "codeLanguage": "vue",
    "codeTokens": 49,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport MyComponent from './MyComponent.vue'\n</script>\n\n<template>\n  <MyComponent />\n</template>"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Basic Suspense Usage with Fallback Slot",
    "codeDescription": "Basic implementation of Suspense component with default and fallback slots for handling loading states.",
    "codeLanguage": "vue-html",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#2025-04-08_snippet_3",
    "pageTitle": "Suspense Component in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Suspense>\n  <!-- component with nested async dependencies -->\n  <Dashboard />\n\n  <!-- loading state via #fallback slot -->\n  <template #fallback>\n    Loading...\n  </template>\n</Suspense>"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Testing a Vue.js Composable with Vitest",
    "codeDescription": "This code snippet demonstrates how to test a Vue.js composable using Vitest. It shows how to import the composable, invoke it, and assert on its returned state and methods.",
    "codeLanguage": "JavaScript",
    "codeTokens": 103,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// counter.test.js\nimport { useCounter } from './counter.js'\n\ntest('useCounter', () => {\n  const { count, increment } = useCounter()\n  expect(count.value).toBe(0)\n\n  increment()\n  expect(count.value).toBe(1)\n})"
      }
    ],
    "relevance": 0.905
  },
  {
    "codeTitle": "Vue App Mount Method Type Definition",
    "codeDescription": "TypeScript interface definition for the app.mount() method used to mount Vue applications.",
    "codeLanguage": "typescript",
    "codeTokens": 43,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Application API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface App {\n  mount(rootContainer: Element | string): ComponentPublicInstance\n}"
      }
    ],
    "relevance": 0.904
  },
  {
    "codeTitle": "Importing and Using a Root Component from a Single-File Component",
    "codeDescription": "Shows how to import a root component from a .vue file and create an application instance with it, which is the typical approach in Single-File Component based applications.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#2025-04-08_snippet_1",
    "pageTitle": "Creating a Vue Application",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n// import the root component App from a single-file component.\nimport App from './App.vue'\n\nconst app = createApp(App)"
      }
    ],
    "relevance": 0.904
  },
  {
    "codeTitle": "Example Component Tree with Suspense",
    "codeDescription": "A representation of a component hierarchy showing how Suspense wraps components with async dependencies.",
    "codeLanguage": "text",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#2025-04-08_snippet_0",
    "pageTitle": "Suspense Component in Vue.js",
    "codeList": [
      {
        "language": "text",
        "code": "<Suspense>\n└─ <Dashboard>\n   ├─ <Profile>\n   │  └─ <FriendStatus> (component with async setup())\n   └─ <Content>\n      ├─ <ActivityFeed> (async component)\n      └─ <Stats> (async component)"
      }
    ],
    "relevance": 0.903
  },
  {
    "codeTitle": "useId Usage Example",
    "codeDescription": "Example showing how to use useId to generate unique IDs for form elements.",
    "codeLanguage": "vue",
    "codeTokens": 88,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Composition API Helpers Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { useId } from 'vue'\n\nconst id = useId()\n</script>\n\n<template>\n  <form>\n    <label :for=\"id\">Name:</label>\n    <input :id=\"id\" type=\"text\" />\n  </form>\n</template>"
      }
    ],
    "relevance": 0.903
  },
  {
    "codeTitle": "Using Vue Custom Elements with JSX",
    "codeDescription": "Demonstrates how to use Vue custom elements in a JSX environment with custom element name registration.",
    "codeLanguage": "jsx",
    "codeTokens": 101,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#2025-04-08_snippet_11",
    "pageTitle": "Vue.js Integration with Web Components",
    "codeList": [
      {
        "language": "jsx",
        "code": "import { MyFoo, MyBar } from 'path/to/elements.js'\n\ncustomElements.define('some-foo', MyFoo)\ncustomElements.define('some-bar', MyBar)\n\nexport function MyComponent() {\n  return <>\n    <some-foo ... >\n      <some-bar ... ></some-bar>\n    </some-foo>\n  </>\n}"
      }
    ],
    "relevance": 0.902
  },
  {
    "codeTitle": "Creating a Style Object in Vue.js Composition API",
    "codeDescription": "Demonstrates creating a reactive style object to use for style binding.",
    "codeLanguage": "js",
    "codeTokens": 46,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_23",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "js",
        "code": "const styleObject = reactive({\n  color: 'red',\n  fontSize: '30px'\n})"
      }
    ],
    "relevance": 0.901
  },
  {
    "codeTitle": "Passing Object Props",
    "codeDescription": "Examples showing how to pass object values as props to Vue components, both with static object literals (requiring v-bind) and dynamic objects from variables.",
    "codeLanguage": "vue-html",
    "codeTokens": 120,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_21",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Even though the object is static, we need v-bind to tell Vue that -->\n<!-- this is a JavaScript expression rather than a string.             -->\n<BlogPost\n  :author=\"{\n    name: 'Veronica',\n    company: 'Veridian Dynamics'\n  }\"\n />\n\n<!-- Dynamically assign to the value of a variable. -->\n<BlogPost :author=\"post.author\" />"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Scoped Slots Usage Example",
    "codeDescription": "Demonstrates how to pass and receive data in scoped slots, allowing slot content to access child component state.",
    "codeLanguage": "vue-html",
    "codeTokens": 53,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_15",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent v-slot=\"{ text, count }\">\n  {{ text }} {{ count }}\n</MyComponent>"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Hiding Un-compiled Templates with v-cloak in Vue.js",
    "codeDescription": "Demonstrates how to use v-cloak directive to hide un-compiled templates until they are ready, preventing flash of un-compiled content.",
    "codeLanguage": "vue-html",
    "codeTokens": 55,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#2025-04-08_snippet_13",
    "pageTitle": "Built-in Directives in Vue.js",
    "codeList": [
      {
        "language": "css",
        "code": "[v-cloak] {\n  display: none;\n}"
      },
      {
        "language": "vue-html",
        "code": "<div v-cloak>\n  {{ message }}\n</div>"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Accessing Fallthrough Attributes with Composition API",
    "codeDescription": "Demonstrates how to access fallthrough attributes in JavaScript using the useAttrs() function in the Composition API setup context.",
    "codeLanguage": "vue",
    "codeTokens": 57,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Fallthrough Attributes Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { useAttrs } from 'vue'\n\nconst attrs = useAttrs()\n</script>"
      },
      {
        "language": "js",
        "code": "export default {\n  setup(props, ctx) {\n    // fallthrough attributes are exposed as ctx.attrs\n    console.log(ctx.attrs)\n  }\n}"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Providing Read-Only State in Vue.js",
    "codeDescription": "This snippet demonstrates how to provide a read-only version of reactive state using the readonly function in Vue.js Composition API. This ensures that the provided state cannot be mutated by injector components.",
    "codeLanguage": "vue",
    "codeTokens": 83,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#2025-04-08_snippet_11",
    "pageTitle": "Provide/Inject in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, provide, readonly } from 'vue'\n\nconst count = ref(0)\nprovide('read-only-count', readonly(count))\n</script>"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Using v-text Directive in Vue.js",
    "codeDescription": "Demonstrates the usage of v-text directive to update an element's text content. It shows how v-text is equivalent to using mustache interpolation.",
    "codeLanguage": "vue-html",
    "codeTokens": 61,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#2025-04-08_snippet_0",
    "pageTitle": "Built-in Directives in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<span v-text=\"msg\"></span>\n<!-- same as -->\n<span>{{msg}}</span>"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Replacing an Array with Filter Method in Options API",
    "codeDescription": "Demonstrates how to replace an array using the non-mutating filter method in Vue's Options API. This creates a new filtered array based on a condition.",
    "codeLanguage": "js",
    "codeTokens": 60,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#2025-04-08_snippet_13",
    "pageTitle": "List Rendering in Vue.js",
    "codeList": [
      {
        "language": "js",
        "code": "this.items = this.items.filter((item) => item.message.match(/Foo/))"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Modal Component Implementation with Options API",
    "codeDescription": "A Vue component implementing a modal dialog using the Options API. This modal has the same potential layout issues as the Composition API version when deeply nested in the DOM.",
    "codeLanguage": "vue",
    "codeTokens": 178,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Teleport Component",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  data() {\n    return {\n      open: false\n    }\n  }\n}\n</script>\n\n<template>\n  <button @click=\"open = true\">Open Modal</button>\n\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</template>\n\n<style scoped>\n.modal {\n  position: fixed;\n  z-index: 999;\n  top: 20%;\n  left: 50%;\n  width: 300px;\n  margin-left: -150px;\n}\n</style>"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Basic Event Emission Example",
    "codeDescription": "Shows how to emit a custom event from a component using the $emit method in a template.",
    "codeLanguage": "vue-html",
    "codeTokens": 48,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Component Events Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- MyComponent -->\n<button @click=\"$emit('someEvent')\">Click Me</button>"
      }
    ],
    "relevance": 0.9
  },
  {
    "codeTitle": "Centralizing State Mutation Logic in Vue Store",
    "codeDescription": "This snippet shows how to centralize state mutation logic by defining methods on the store object. This approach improves maintainability by keeping state changes in one place.",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#2025-04-08_snippet_5",
    "pageTitle": "State Management in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "// store.js\nimport { reactive } from 'vue'\n\nexport const store = reactive({\n  count: 0,\n  increment() {\n    this.count++\n  }\n})"
      }
    ],
    "relevance": 0.898
  },
  {
    "codeTitle": "Handling v-model Arguments and Modifiers in Options API",
    "codeDescription": "Shows how to declare props and emit events to handle v-model with arguments and modifiers in the Options API. The modifier is accessible via a 'titleModifiers' prop.",
    "codeLanguage": "js",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_16",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "js",
        "code": "export default {\n  props: ['title', 'titleModifiers'],\n  emits: ['update:title'],\n  created() {\n    console.log(this.titleModifiers) // { capitalize: true }\n  }\n}"
      }
    ],
    "relevance": 0.898
  },
  {
    "codeTitle": "Using a Method for Array Filtering in Options API",
    "codeDescription": "Shows how to create a method for filtering arrays in the Options API, useful for scenarios where computed properties aren't practical like nested v-for loops.",
    "codeLanguage": "js",
    "codeTokens": 108,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#2025-04-08_snippet_18",
    "pageTitle": "List Rendering in Vue.js",
    "codeList": [
      {
        "language": "js",
        "code": "data() {\n  return {\n    sets: [[ 1, 2, 3, 4, 5 ], [6, 7, 8, 9, 10]]\n  }\n},\nmethods: {\n  even(numbers) {\n    return numbers.filter(number => number % 2 === 0)\n  }\n}"
      }
    ],
    "relevance": 0.898
  },
  {
    "codeTitle": "Declaring Props with CamelCase (Options API)",
    "codeDescription": "Example showing camelCase prop declaration in Options API, which is recommended for JavaScript code readability and allows direct referencing in template expressions.",
    "codeLanguage": "js",
    "codeTokens": 51,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "export default {\n  props: {\n    greetingMessage: String\n  }\n}"
      }
    ],
    "relevance": 0.898
  },
  {
    "codeTitle": "Using the i18n Plugin in Vue.js",
    "codeDescription": "Demonstrates how to use the custom i18n plugin in a Vue.js application. It shows importing the plugin, installing it with configuration options, and using the $translate method in a template.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/plugins.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Plugins Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import i18nPlugin from './plugins/i18n'\n\napp.use(i18nPlugin, {\n  greetings: {\n    hello: 'Bonjour!'\n  }\n})"
      },
      {
        "language": "vue",
        "code": "<h1>{{ $translate('greetings.hello') }}</h1>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Transitioning Between Dynamic Components in Vue.js",
    "codeDescription": "Demonstrates how to use the Transition component to animate between dynamic components in Vue.js. The activeComponent is dynamically changed, and the transition is applied with a fade effect and out-in mode.",
    "codeLanguage": "vue",
    "codeTokens": 74,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_19",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition name=\"fade\" mode=\"out-in\">\n  <component :is=\"activeComponent\"></component>\n</Transition>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Using Teleport to Move Modal to Body",
    "codeDescription": "Modified modal template using the Teleport component to move the modal content to the body element, avoiding DOM nesting issues while maintaining component logic.",
    "codeLanguage": "vue-html",
    "codeTokens": 103,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Teleport Component",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button @click=\"open = true\">Open Modal</button>\n\n<Teleport to=\"body\">\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</Teleport>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Accessing Previous Computed Value in Composition API (Vue.js)",
    "codeDescription": "Shows how to access the previous value of a computed property using the Composition API in Vue.js. This example demonstrates a computed property that returns the value of count when it's less than or equal to 3, otherwise it returns the previous value.",
    "codeLanguage": "vue",
    "codeTokens": 166,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#2025-04-08_snippet_9",
    "pageTitle": "Computed Properties in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, computed } from 'vue'\n\nconst count = ref(2)\n\n// This computed will return the value of count when it's less or equal to 3.\n// When count is >=4, the last value that fulfilled our condition will be returned\n// instead until count is less or equal to 3\nconst alwaysSmall = computed((previous) => {\n  if (count.value <= 3) {\n    return count.value\n  }\n\n  return previous\n})\n</script>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Dynamic Components in Script Setup",
    "codeDescription": "Demonstration of using dynamic components with :is binding in <script setup>.",
    "codeLanguage": "vue",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n</script>\n\n<template>\n  <component :is=\"Foo\" />\n  <component :is=\"someCondition ? Foo : Bar\" />\n</template>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Safe Style Binding in Vue.js",
    "codeDescription": "This example demonstrates a safer approach to binding user-provided styles by using the object syntax and limiting control to specific properties.",
    "codeLanguage": "vue-html",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#2025-04-08_snippet_7",
    "pageTitle": "Security Guidelines for Vue.js Applications",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<a\n  :href=\"sanitizedUrl\"\n  :style=\"{\n    color: userProvidedColor,\n    background: userProvidedBackground\n  }\"\n>\n  click me\n</a>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Pre-3.4 v-model Implementation",
    "codeDescription": "Shows how to implement v-model before Vue 3.4 using props and emit events.",
    "codeLanguage": "vue",
    "codeTokens": 93,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst props = defineProps(['modelValue'])\nconst emit = defineEmits(['update:modelValue'])\n</script>\n\n<template>\n  <input\n    :value=\"props.modelValue\"\n    @input=\"emit('update:modelValue', $event.target.value)\"\n  />\n</template>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Passing Iterated Data to Components with v-for in Vue.js",
    "codeDescription": "Shows the proper way to pass both item and index from v-for to a component using props. This pattern maintains component reusability by making data flow explicit.",
    "codeLanguage": "vue-html",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#2025-04-08_snippet_11",
    "pageTitle": "List Rendering in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent\n  v-for=\"(item, index) in items\"\n  :item=\"item\"\n  :index=\"index\"\n  :key=\"item.id\"\n/>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Registering Vue Custom Element",
    "codeDescription": "Complete example demonstrating how to define and register a Vue custom element using defineCustomElement() and the CustomElements registry.",
    "codeLanguage": "javascript",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/custom-elements.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Custom Elements API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineCustomElement } from 'vue'\n\nconst MyVueElement = defineCustomElement({\n  /* component options */\n})\n\n// Register the custom element.\ncustomElements.define('my-vue-element', MyVueElement)"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Array Syntax for Style Binding in Vue.js",
    "codeDescription": "Shows how to bind multiple style objects using array syntax, which will be merged and applied to the element.",
    "codeLanguage": "vue-html",
    "codeTokens": 48,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_27",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :style=\"[baseStyles, overridingStyles]\"></div>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Custom Directives in Script Setup",
    "codeDescription": "Example of defining and using custom directives in <script setup>.",
    "codeLanguage": "vue",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst vMyDirective = {\n  beforeMount: (el) => {\n    // do something with the element\n  }\n}\n</script>\n<template>\n  <h1 v-my-directive>This is a Heading</h1>\n</template>"
      }
    ],
    "relevance": 0.895
  },
  {
    "codeTitle": "Template Unwrapping for Top-level vs Nested Refs",
    "codeDescription": "Shows the difference between accessing top-level refs versus nested refs in templates, including how to properly destructure refs for automatic unwrapping.",
    "codeLanguage": "vue-html",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_21",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "{{ count + 1 }}"
      },
      {
        "language": "vue-html",
        "code": "{{ object.id + 1 }}"
      },
      {
        "language": "vue-html",
        "code": "{{ id + 1 }}"
      },
      {
        "language": "vue-html",
        "code": "{{ object.id }}"
      }
    ],
    "relevance": 0.893
  },
  {
    "codeTitle": "Ordering Component Options in Vue.js",
    "codeDescription": "Example of poorly ordered component options in Options API. The example shows props and computed properties with inconsistent spacing between multi-line properties.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-recommended.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Style Guide: Priority C Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "props: {\n  value: {\n    type: String,\n    required: true\n  },\n\n  focused: {\n    type: Boolean,\n    default: false\n  },\n\n  label: String,\n  icon: String\n},\n\ncomputed: {\n  formattedValue() {\n    // ...\n  },\n\n  inputClasses() {\n    // ...\n  }\n}"
      }
    ],
    "relevance": 0.892
  },
  {
    "codeTitle": "JavaScript Function Analogy for Vue.js Slots",
    "codeDescription": "Explains slots by comparing them to JavaScript functions, where the parent component passes content to the child component's function that then renders it within its template.",
    "codeLanguage": "js",
    "codeTokens": 92,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "// parent component passing slot content\nFancyButton('Click me!')\n\n// FancyButton renders slot content in its own template\nfunction FancyButton(slotContent) {\n  return `<button class=\"fancy-btn\">\n      ${slotContent}\n    </button>`\n}"
      }
    ],
    "relevance": 0.892
  },
  {
    "codeTitle": "Demonstrating Readonly Props in Vue.js Composition API",
    "codeDescription": "This snippet shows that props are readonly in Vue.js Composition API. Attempting to mutate a prop directly will result in a warning.",
    "codeLanguage": "javascript",
    "codeTokens": 59,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_26",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const props = defineProps(['foo'])\n\n// ❌ warning, props are readonly!\nprops.foo = 'bar'"
      }
    ],
    "relevance": 0.892
  },
  {
    "codeTitle": "Kebab-case Style Properties in Vue.js",
    "codeDescription": "Shows how to use kebab-case CSS property names in style binding objects.",
    "codeLanguage": "vue-html",
    "codeTokens": 46,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_22",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :style=\"{ 'font-size': fontSize + 'px' }\"></div>"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Handling Fallthrough Attributes with Multiple Root Nodes",
    "codeDescription": "Shows how to explicitly bind fallthrough attributes in a multi-root component template to avoid runtime warnings.",
    "codeLanguage": "vue-html",
    "codeTokens": 46,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Fallthrough Attributes Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<CustomLayout id=\"custom-layout\" @click=\"changeValue\" />"
      },
      {
        "language": "vue-html",
        "code": "<header>...</header>\n<main>...</main>\n<footer>...</footer>"
      },
      {
        "language": "vue-html",
        "code": "<header>...</header>\n<main v-bind=\"$attrs\">...</main>\n<footer>...</footer>"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Conditional Slots Implementation",
    "codeDescription": "Shows how to conditionally render slot content based on whether content has been passed to a slot using $slots property.",
    "codeLanguage": "vue-html",
    "codeTokens": 126,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_14",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<template>\n  <div class=\"card\">\n    <div v-if=\"$slots.header\" class=\"card-header\">\n      <slot name=\"header\" />\n    </div>\n    \n    <div v-if=\"$slots.default\" class=\"card-content\">\n      <slot />\n    </div>\n    \n    <div v-if=\"$slots.footer\" class=\"card-footer\">\n      <slot name=\"footer\" />\n    </div>\n  </div>\n</template>"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Vue Component Registration Methods Type Definition",
    "codeDescription": "TypeScript interface definition for global component registration and retrieval methods.",
    "codeLanguage": "typescript",
    "codeTokens": 48,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Application API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface App {\n  component(name: string): Component | undefined\n  component(name: string, component: Component): this\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Built-in Components Usage in Render Functions",
    "codeDescription": "Demonstrates how to import and use Vue.js built-in components like Transition and KeepAlive in render functions.",
    "codeLanguage": "javascript",
    "codeTokens": 83,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#2025-04-08_snippet_22",
    "pageTitle": "Render Functions & JSX in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { h, KeepAlive, Teleport, Transition, TransitionGroup } from 'vue'\n\nexport default {\n  setup () {\n    return () => h(Transition, { mode: 'out-in' }, /* ... */)\n  }\n}"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Declaring a Template Ref in Vue.js HTML",
    "codeDescription": "This snippet shows how to use the 'ref' attribute in a Vue.js template to mark an element for direct access.",
    "codeLanguage": "vue-html",
    "codeTokens": 43,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#2025-04-08_snippet_0",
    "pageTitle": "Understanding Template Refs in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input ref=\"input\">"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Understanding Reactive Proxy vs Original Object",
    "codeDescription": "Example showing that reactive() returns a Proxy of the original object, which is not equal to the original. Only the proxy is reactive, so mutations to the original won't trigger updates.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_12",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const raw = {}\nconst proxy = reactive(raw)\n\n// proxy is NOT equal to the original.\nconsole.log(proxy === raw) // false"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Explicit HTML Rendering in Vue.js Templates",
    "codeDescription": "This example shows how to explicitly render HTML content in Vue.js when the content is known to be safe, using the v-html directive.",
    "codeLanguage": "vue-html",
    "codeTokens": 51,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#2025-04-08_snippet_3",
    "pageTitle": "Security Guidelines for Vue.js Applications",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div v-html=\"userProvidedHtml\"></div>"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Local Component Registration in Options API",
    "codeDescription": "Shows how to locally register and use a component using Vue's Options API approach in a Single File Component.",
    "codeLanguage": "vue",
    "codeTokens": 72,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Component Registration Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nimport ComponentA from './ComponentA.vue'\n\nexport default {\n  components: {\n    ComponentA\n  }\n}\n</script>\n\n<template>\n  <ComponentA />\n</template>"
      }
    ],
    "relevance": 0.89
  },
  {
    "codeTitle": "Element Selectors with Scoped Styles - Bad Practice",
    "codeDescription": "Demonstrates the discouraged use of element selectors in scoped styles, which can lead to performance issues due to slower element-attribute selector matching.",
    "codeLanguage": "vue-html",
    "codeTokens": 68,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Priority D Style Guide Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<template>\n  <button>×</button>\n</template>\n\n<style scoped>\nbutton {\n  background-color: red;\n}\n</style>"
      }
    ],
    "relevance": 0.889
  },
  {
    "codeTitle": "Using nextTick in Composition API for DOM Updates",
    "codeDescription": "Shows how to use the nextTick function in Composition API to wait for DOM updates to complete after state changes, as Vue buffers updates until the next tick in the update cycle.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { nextTick } from 'vue'\n\nasync function increment() {\n  count.value++\n  await nextTick()\n  // Now the DOM is updated\n}"
      }
    ],
    "relevance": 0.889
  },
  {
    "codeTitle": "Implementing Bouncy Text Animation in Vue.js",
    "codeDescription": "This snippet demonstrates how to create a bouncy text animation using Vue.js transitions and CSS keyframes. It uses enter and leave active classes to apply the animation.",
    "codeLanguage": "vue-html",
    "codeTokens": 80,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition name=\"bounce\">\n  <p v-if=\"show\" style=\"text-align: center;\">\n    Hello here is some bouncy text!\n  </p>\n</Transition>"
      },
      {
        "language": "css",
        "code": ".bounce-enter-active {\n  animation: bounce-in 0.5s;\n}\n.bounce-leave-active {\n  animation: bounce-in 0.5s reverse;\n}\n@keyframes bounce-in {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1.25);\n  }\n  100% {\n    transform: scale(1);\n  }\n}"
      }
    ],
    "relevance": 0.888
  },
  {
    "codeTitle": "Teleport SSR Context Handling",
    "codeDescription": "Shows how to handle teleported content during server-side rendering by accessing the teleports property of the SSR context object.",
    "codeLanguage": "javascript",
    "codeTokens": 72,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Server-Side Rendering (SSR) Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const ctx = {}\nconst html = await renderToString(app, ctx)\n\nconsole.log(ctx.teleports) // { '#teleported': 'teleported content' }"
      }
    ],
    "relevance": 0.888
  },
  {
    "codeTitle": "Creating Multiple Similar Elements with Factory Pattern in Vue",
    "codeDescription": "Shows how to correctly render multiple similar elements by creating new vnodes for each instance using a factory pattern.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#2025-04-08_snippet_11",
    "pageTitle": "Render Functions & JSX in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "function render() {\n  return h(\n    'div',\n    Array.from({ length: 20 }).map(() => {\n      return h('p', 'hi')\n    })\n  )\n}"
      }
    ],
    "relevance": 0.886
  },
  {
    "codeTitle": "Unwrapping Ref Values with unref() in TypeScript",
    "codeDescription": "The unref() function returns the inner value if the argument is a ref, otherwise it returns the argument itself. It serves as a shorthand for val = isRef(val) ? val.value : val.",
    "codeLanguage": "typescript",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Reactivity API Utilities",
    "codeList": [
      {
        "language": "typescript",
        "code": "function unref<T>(ref: T | Ref<T>): T"
      },
      {
        "language": "typescript",
        "code": "function useFoo(x: number | Ref<number>) {\n  const unwrapped = unref(x)\n  // unwrapped is guaranteed to be number now\n}"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Event Arguments Example",
    "codeDescription": "Example of emitting an event with additional arguments and handling them in the parent component.",
    "codeLanguage": "vue-html",
    "codeTokens": 49,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Component Events Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button @click=\"$emit('increaseBy', 1)\">\n  Increase by 1\n</button>"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Implementing Multiple v-model in Composition API (Pre-3.4)",
    "codeDescription": "Pre-Vue 3.4 implementation of a component that supports multiple v-model bindings using props and custom events in Composition API.",
    "codeLanguage": "vue",
    "codeTokens": 143,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\ndefineProps({\n  firstName: String,\n  lastName: String\n})\n\ndefineEmits(['update:firstName', 'update:lastName'])\n</script>\n\n<template>\n  <input\n    type=\"text\"\n    :value=\"firstName\"\n    @input=\"$emit('update:firstName', $event.target.value)\"\n  />\n  <input\n    type=\"text\"\n    :value=\"lastName\"\n    @input=\"$emit('update:lastName', $event.target.value)\"\n  />\n</template>"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Checking if a Value is a Ref Object with isRef() in TypeScript",
    "codeDescription": "The isRef() function checks if a value is a ref object. Its return type is a type predicate that can be used as a type guard in TypeScript.",
    "codeLanguage": "typescript",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Reactivity API Utilities",
    "codeList": [
      {
        "language": "typescript",
        "code": "function isRef<T>(r: Ref<T> | unknown): r is Ref<T>"
      },
      {
        "language": "typescript",
        "code": "let foo: unknown\nif (isRef(foo)) {\n  // foo's type is narrowed to Ref<unknown>\n  foo.value\n}"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Skipping Compilation with v-pre in Vue.js",
    "codeDescription": "Demonstrates the use of v-pre directive to skip compilation for an element and its children, preserving raw Vue template syntax.",
    "codeLanguage": "vue-html",
    "codeTokens": 50,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#2025-04-08_snippet_10",
    "pageTitle": "Built-in Directives in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<span v-pre>{{ this will not be compiled }}</span>"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Implementing Slot Outlet in Vue.js Component Template",
    "codeDescription": "Shows how to create a slot outlet in a component template using the <slot> element, which indicates where parent-provided content should be rendered.",
    "codeLanguage": "vue-html",
    "codeTokens": 60,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button class=\"fancy-btn\">\n  <slot></slot> <!-- slot outlet -->\n</button>"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Accessing Template Refs with Options API in Vue.js",
    "codeDescription": "This snippet illustrates how to access and use a template ref in the Options API. It shows how to focus an input element on component mount using this.$refs.",
    "codeLanguage": "vue",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#2025-04-08_snippet_2",
    "pageTitle": "Understanding Template Refs in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  mounted() {\n    this.$refs.input.focus()\n  }\n}\n</script>\n\n<template>\n  <input ref=\"input\" />\n</template>"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Defining renderToNodeStream Function Type in TypeScript",
    "codeDescription": "Type definition for the renderToNodeStream function, which takes an App or VNode input and an optional SSRContext, returning a Node.js Readable stream.",
    "codeLanguage": "typescript",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/ssr.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Server-Side Rendering API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function renderToNodeStream(\n  input: App | VNode,\n  context?: SSRContext\n): Readable"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Optimized Computed Property with Manual Comparison",
    "codeDescription": "This snippet shows how to optimize a computed property that returns an object by manually comparing the new value with the old value and conditionally returning the old value if nothing has changed.",
    "codeLanguage": "javascript",
    "codeTokens": 103,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Performance Optimization Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const computedObj = computed((oldValue) => {\n  const newValue = {\n    isEven: count.value % 2 === 0\n  }\n  if (oldValue && oldValue.isEven === newValue.isEven) {\n    return oldValue\n  }\n  return newValue\n})"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Importing Child Component in Vue.js (Composition API)",
    "codeDescription": "This snippet demonstrates how to import a child component in a Vue.js application using the Composition API approach. It's typically used in Single-File Components.",
    "codeLanguage": "javascript",
    "codeTokens": 50,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-11/description.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Component Usage Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import ChildComp from './ChildComp.vue'"
      }
    ],
    "relevance": 0.885
  },
  {
    "codeTitle": "Self-Closing Components - Bad Practice",
    "codeDescription": "Examples showing incorrect usage of self-closing syntax in Vue components, which should be avoided in specific contexts.",
    "codeLanguage": "html",
    "codeTokens": 54,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_14",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- In Single-File Components, string templates, and JSX -->\n<MyComponent></MyComponent>"
      },
      {
        "language": "html",
        "code": "<!-- In in-DOM templates -->\n<my-component/>"
      }
    ],
    "relevance": 0.883
  },
  {
    "codeTitle": "Applying Fallthrough Attributes to Specific Elements",
    "codeDescription": "Shows how to explicitly bind fallthrough attributes to a specific child element rather than the root node using v-bind with $attrs.",
    "codeLanguage": "vue-html",
    "codeTokens": 64,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Fallthrough Attributes Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div class=\"btn-wrapper\">\n  <button class=\"btn\" v-bind=\"$attrs\">Click Me</button>\n</div>"
      }
    ],
    "relevance": 0.883
  },
  {
    "codeTitle": "Destructured Props with Default Values in TypeScript",
    "codeDescription": "Example showing how to use JavaScript's native default value syntax when destructuring props with TypeScript type annotations.",
    "codeLanguage": "ts",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_9",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "ts",
        "code": "const { foo = 'hello' } = defineProps<{ foo?: string }>()"
      }
    ],
    "relevance": 0.882
  },
  {
    "codeTitle": "Configuring ID Prefix for useId() in Vue 3.5+",
    "codeDescription": "Demonstrates how to configure a prefix for all IDs generated via useId() inside a Vue application using app.config.idPrefix.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#2025-04-08_snippet_24",
    "pageTitle": "Vue.js Application API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.config.idPrefix = 'myApp'\n\n// in a component:\nconst id1 = useId() // 'myApp:0'\nconst id2 = useId() // 'myApp:1'"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Implementing Event Handling (v-on) with Render Functions in Vue",
    "codeDescription": "Shows how to implement event handlers equivalent to v-on in templates using render functions and JSX.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#2025-04-08_snippet_15",
    "pageTitle": "Render Functions & JSX in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "h(\n  'button',\n  {\n    onClick(event) {\n      /* ... */\n    }\n  },\n  'Click Me'\n)"
      },
      {
        "language": "jsx",
        "code": "<button\n  onClick={(event) => {\n    /* ... */\n  }}\n>\n  Click Me\n</button>"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Computed Class Object in Vue.js Options API",
    "codeDescription": "Demonstrates creating a computed property that returns a dynamic class object based on component state.",
    "codeLanguage": "js",
    "codeTokens": 90,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "js",
        "code": "data() {\n  return {\n    isActive: true,\n    error: null\n  }\n},\ncomputed: {\n  classObject() {\n    return {\n      active: this.isActive && !this.error,\n      'text-danger': this.error && this.error.type === 'fatal'\n    }\n  }\n}"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Creating References with toRef() in TypeScript",
    "codeDescription": "The toRef() function normalizes values/refs/getters into refs or creates a ref for a property on a source reactive object. The created ref is synced with its source property.",
    "codeLanguage": "typescript",
    "codeTokens": 157,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Reactivity API Utilities",
    "codeList": [
      {
        "language": "typescript",
        "code": "// normalization signature (3.3+)\nfunction toRef<T>(\n  value: T\n): T extends () => infer R\n  ? Readonly<Ref<R>>\n  : T extends Ref\n  ? T\n  : Ref<UnwrapRef<T>>\n\n// object property signature\nfunction toRef<T extends object, K extends keyof T>(\n  object: T,\n  key: K,\n  defaultValue?: T[K]\n): ToRef<T[K]>\n\ntype ToRef<T> = T extends Ref ? T : Ref<T>"
      },
      {
        "language": "javascript",
        "code": "// returns existing refs as-is\ntoRef(existingRef)\n\n// creates a readonly ref that calls the getter on .value access\ntoRef(() => props.foo)\n\n// creates normal refs from non-function values\n// equivalent to ref(1)\ntoRef(1)"
      },
      {
        "language": "javascript",
        "code": "const state = reactive({\n  foo: 1,\n  bar: 2\n})\n\n// a two-way ref that syncs with the original property\nconst fooRef = toRef(state, 'foo')\n\n// mutating the ref updates the original\nfooRef.value++\nconsole.log(state.foo) // 2\n\n// mutating the original also updates the ref\nstate.foo++\nconsole.log(fooRef.value) // 3"
      },
      {
        "language": "javascript",
        "code": "const fooRef = ref(state.foo)"
      },
      {
        "language": "vue",
        "code": "<script setup>\nimport { toRef } from 'vue'\n\nconst props = defineProps(/* ... */)\n\n// convert `props.foo` into a ref, then pass into\n// a composable\nuseSomeFeature(toRef(props, 'foo'))\n\n// getter syntax - recommended in 3.3+\nuseSomeFeature(toRef(() => props.foo))\n</script>"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Creating a Custom Element with Vue's defineCustomElement",
    "codeDescription": "Full example of defining a custom element using Vue's defineCustomElement, configuring its props and template, registering it, and programmatically instantiating it.",
    "codeLanguage": "javascript",
    "codeTokens": 190,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Integration with Web Components",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineCustomElement } from 'vue'\n\nconst MyVueElement = defineCustomElement({\n  // normal Vue component options here\n  props: {},\n  emits: {},\n  template: `...`,\n\n  // defineCustomElement only: CSS to be injected into shadow root\n  styles: [`/* inlined css */`]\n})\n\n// Register the custom element.\n// After registration, all `<my-vue-element>` tags\n// on the page will be upgraded.\ncustomElements.define('my-vue-element', MyVueElement)\n\n// You can also programmatically instantiate the element:\n// (can only be done after registration)\ndocument.body.appendChild(\n  new MyVueElement({\n    // initial props (optional)\n  })\n)"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Implementing Slots with v-slot in Vue.js",
    "codeDescription": "Shows how to use the v-slot directive for named slots and scoped slots in Vue.js components, including passing props to slots.",
    "codeLanguage": "vue-html",
    "codeTokens": 182,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#2025-04-08_snippet_9",
    "pageTitle": "Built-in Directives in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Named slots -->\n<BaseLayout>\n  <template v-slot:header>\n    Header content\n  </template>\n\n  <template v-slot:default>\n    Default slot content\n  </template>\n\n  <template v-slot:footer>\n    Footer content\n  </template>\n</BaseLayout>\n\n<!-- Named slot that receives props -->\n<InfiniteScroll>\n  <template v-slot:item=\"slotProps\">\n    <div class=\"item\">\n      {{ slotProps.item.text }}\n    </div>\n  </template>\n</InfiniteScroll>\n\n<!-- Default slot that receive props, with destructuring -->\n<Mouse v-slot=\"{ x, y }\">\n  Mouse position: {{ x }}, {{ y }}\n</Mouse>"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Local Component Registration with Script Setup",
    "codeDescription": "Shows how to use imported components locally in a Vue Single File Component using the <script setup> syntax without explicit registration.",
    "codeLanguage": "vue",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Component Registration Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport ComponentA from './ComponentA.vue'\n</script>\n\n<template>\n  <ComponentA />\n</template>"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Defining Watch Option Type Interface in Vue.js",
    "codeDescription": "TypeScript interface for the Vue.js watch option that allows specifying reactive property watchers. This defines the shape of the watch option including callbacks and configuration options like immediate, deep, and flush.",
    "codeLanguage": "typescript",
    "codeTokens": 204,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Component Options State Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  watch?: {\n    [key: string]: WatchOptionItem | WatchOptionItem[]\n  }\n}\n\ntype WatchOptionItem = string | WatchCallback | ObjectWatchOptionItem\n\ntype WatchCallback<T> = (\n  value: T,\n  oldValue: T,\n  onCleanup: (cleanupFn: () => void) => void\n) => void\n\ntype ObjectWatchOptionItem = {\n  handler: WatchCallback | string\n  immediate?: boolean // default: false\n  deep?: boolean // default: false\n  flush?: 'pre' | 'post' | 'sync' // default: 'pre'\n  onTrack?: (event: DebuggerEvent) => void\n  onTrigger?: (event: DebuggerEvent) => void\n}"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Patch Flag Bitwise Check Implementation",
    "codeDescription": "Example showing how patch flags are checked using bitwise operations during rendering.",
    "codeLanguage": "javascript",
    "codeTokens": 49,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Rendering Mechanism Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "if (vnode.patchFlag & PatchFlags.CLASS /* 2 */) {\n  // update the element's class\n}"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Checking if a Value is a Proxy with isProxy() in TypeScript",
    "codeDescription": "The isProxy() function checks if an object is a proxy created by reactive(), readonly(), shallowReactive(), or shallowReadonly().",
    "codeLanguage": "typescript",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Reactivity API Utilities",
    "codeList": [
      {
        "language": "typescript",
        "code": "function isProxy(value: any): boolean"
      }
    ],
    "relevance": 0.88
  },
  {
    "codeTitle": "Rendered Output with Custom Slot Content in Vue.js",
    "codeDescription": "Shows the HTML output when a component with fallback slot content is used with custom content provided, resulting in the custom content being displayed.",
    "codeLanguage": "html",
    "codeTokens": 46,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_11",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<button type=\"submit\">Save</button>"
      }
    ],
    "relevance": 0.878
  },
  {
    "codeTitle": "Computed Properties Implementation Example",
    "codeDescription": "Example showing how to implement both readonly and writable computed properties in a Vue component.",
    "codeLanguage": "javascript",
    "codeTokens": 165,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Component Options State Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return { a: 1 }\n  },\n  computed: {\n    aDouble() {\n      return this.a * 2\n    },\n    aPlus: {\n      get() {\n        return this.a + 1\n      },\n      set(v) {\n        this.a = v - 1\n      }\n    }\n  },\n  created() {\n    console.log(this.aDouble) // => 2\n    console.log(this.aPlus) // => 2\n\n    this.aPlus = 3\n    console.log(this.a) // => 2\n    console.log(this.aDouble) // => 4\n  }\n}"
      }
    ],
    "relevance": 0.878
  },
  {
    "codeTitle": "Quoted HTML Attribute in Vue.js Template (Good Practice)",
    "codeDescription": "This snippet demonstrates the correct way of writing an HTML attribute with quotes in a Vue.js template. This practice improves readability and consistency.",
    "codeLanguage": "vue-html",
    "codeTokens": 46,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_24",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input type=\"text\">"
      }
    ],
    "relevance": 0.877
  },
  {
    "codeTitle": "Defining Custom Element Types in TypeScript",
    "codeDescription": "Type definition for the defineCustomElement() function and CustomElementsOptions interface, showing supported options for creating Vue-powered custom elements.",
    "codeLanguage": "typescript",
    "codeTokens": 127,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/custom-elements.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Custom Elements API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function defineCustomElement(\n  component:\n    | (ComponentOptions & CustomElementsOptions)\n    | ComponentOptions['setup'],\n  options?: CustomElementsOptions\n): {\n  new (props?: object): HTMLElement\n}\n\ninterface CustomElementsOptions {\n  styles?: string[]\n\n  // the following options are 3.5+\n  configureApp?: (app: App) => void\n  shadowRoot?: boolean\n  nonce?: string\n}"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Injecting Data with Symbol Key in Vue.js Composition API",
    "codeDescription": "This snippet demonstrates how to inject data using a Symbol key in a Vue.js component with the Composition API. It imports the Symbol from a separate file and uses it with the inject function.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#2025-04-08_snippet_15",
    "pageTitle": "Provide/Inject in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "// in injector component\nimport { inject } from 'vue'\nimport { myInjectionKey } from './keys.js'\n\nconst injected = inject(myInjectionKey)"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Demonstrating Basic Fallthrough Attribute Inheritance in Vue Components",
    "codeDescription": "Shows how a class attribute passed from a parent component automatically applies to the root element of a child component when not explicitly declared as a prop.",
    "codeLanguage": "vue-html",
    "codeTokens": 55,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Fallthrough Attributes Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- template of <MyButton> -->\n<button>Click Me</button>"
      },
      {
        "language": "vue-html",
        "code": "<MyButton class=\"large\" />"
      },
      {
        "language": "html",
        "code": "<button class=\"large\">Click Me</button>"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "v-for Scope Explanation in JavaScript",
    "codeDescription": "Explains the variable scoping of v-for using a JavaScript equivalent. It demonstrates how the forEach loop mimics the v-for behavior.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#2025-04-08_snippet_4",
    "pageTitle": "List Rendering in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const parentMessage = 'Parent'\nconst items = [\n  /* ... */\n]\n\nitems.forEach((item, index) => {\n  // has access to outer scope `parentMessage`\n  // but `item` and `index` are only available in here\n  console.log(parentMessage, item.message, index)\n})"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "TransitionGroup Props Interface",
    "codeDescription": "TypeScript interface for TransitionGroup component props, extending TransitionProps with additional group-specific options.",
    "codeLanguage": "typescript",
    "codeTokens": 56,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Built-in Components Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface TransitionGroupProps extends Omit<TransitionProps, 'mode'> {\n  tag?: string\n  moveClass?: string\n}"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Using Boolean Props in Templates",
    "codeDescription": "Demonstrates how Boolean props can be used in Vue component templates, showing implicit true value when the attribute is present and false when absent.",
    "codeLanguage": "vue-html",
    "codeTokens": 64,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_41",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- equivalent of passing :disabled=\"true\" -->\n<MyComponent disabled />\n\n<!-- equivalent of passing :disabled=\"false\" -->\n<MyComponent />"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Passing Number Props",
    "codeDescription": "Examples showing how to pass numeric values as props to Vue components, both statically (requiring v-bind) and dynamically from variables.",
    "codeLanguage": "vue-html",
    "codeTokens": 98,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_18",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Even though `42` is static, we need v-bind to tell Vue that -->\n<!-- this is a JavaScript expression rather than a string.       -->\n<BlogPost :likes=\"42\" />\n\n<!-- Dynamically assign to the value of a variable. -->\n<BlogPost :likes=\"post.likes\" />"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Data Option Implementation Example",
    "codeDescription": "Example showing how to implement the data option in a Vue component and access the data properties.",
    "codeLanguage": "javascript",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Component Options State Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return { a: 1 }\n  },\n  created() {\n    console.log(this.a) // 1\n    console.log(this.$data) // { a: 1 }\n  }\n}"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "KeepAlive Basic Implementation",
    "codeDescription": "Implementation of KeepAlive wrapper to cache inactive components.",
    "codeLanguage": "vue-html",
    "codeTokens": 49,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js KeepAlive Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Inactive components will be cached! -->\n<KeepAlive>\n  <component :is=\"activeComponent\" />\n</KeepAlive>"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Demonstrating Non-Reactive Behavior in JavaScript",
    "codeDescription": "This snippet shows how regular JavaScript variables do not automatically update when their dependencies change, illustrating the need for reactivity.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Reactivity System Deep Dive",
    "codeList": [
      {
        "language": "javascript",
        "code": "let A0 = 1\nlet A1 = 2\nlet A2 = A0 + A1\n\nconsole.log(A2) // 3\n\nA0 = 2\nconsole.log(A2) // Still 3"
      }
    ],
    "relevance": 0.875
  },
  {
    "codeTitle": "Vue Partner Component Usage",
    "codeDescription": "Template markup showing the usage of the imported PartnerAll component.",
    "codeLanguage": "vue",
    "codeTokens": 27,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/partners/all.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Partner Page Configuration",
    "codeList": [
      {
        "language": "vue",
        "code": "<PartnerAll />"
      }
    ],
    "relevance": 0.874
  },
  {
    "codeTitle": "Defining renderTriggered Hook Interface",
    "codeDescription": "TypeScript interface for the development-only renderTriggered hook that monitors render effect triggers.",
    "codeLanguage": "typescript",
    "codeTokens": 118,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#2025-04-08_snippet_10",
    "pageTitle": "Vue.js Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  renderTriggered?(this: ComponentPublicInstance, e: DebuggerEvent): void\n}\n\ntype DebuggerEvent = {\n  effect: ReactiveEffect\n  target: object\n  type: TriggerOpTypes /* 'set' | 'add' | 'delete' | 'clear' */\n  key: any\n  newValue?: any\n  oldValue?: any\n  oldTarget?: Map<any, any> | Set<any>\n}"
      }
    ],
    "relevance": 0.873
  },
  {
    "codeTitle": "Transforming Prop Value with Computed Property in Vue.js Composition API",
    "codeDescription": "This snippet shows how to transform a prop value using a computed property in Vue.js Composition API. The computed property auto-updates when the prop changes.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_30",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const props = defineProps(['size'])\n\n// computed property that auto-updates when the prop changes\nconst normalizedSize = computed(() => props.size.trim().toLowerCase())"
      }
    ],
    "relevance": 0.872
  },
  {
    "codeTitle": "Base Component Names - Good Practice with App Prefix",
    "codeDescription": "Example of correctly named base components using the 'App' prefix, which is an alternative convention for identifying foundational UI elements.",
    "codeLanguage": "plaintext",
    "codeTokens": 54,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "plaintext",
        "code": "components/\n|- AppButton.vue\n|- AppTable.vue\n|- AppIcon.vue"
      }
    ],
    "relevance": 0.871
  },
  {
    "codeTitle": "Basic Structure of a Vue Single-File Component",
    "codeDescription": "Demonstrates the basic structure of a Vue SFC with template, script, style, and custom blocks. The template contains a div with a message, the script exports a component with data, the style defines a CSS class, and a custom block is included for documentation.",
    "codeLanguage": "vue",
    "codeTokens": 148,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-spec.md#2025-04-08_snippet_0",
    "pageTitle": "Vue Single-File Component (SFC) Syntax Specification",
    "codeList": [
      {
        "language": "vue",
        "code": "<template>\n  <div class=\"example\">{{ msg }}</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: 'Hello world!'\n    }\n  }\n}\n</script>\n\n<style>\n.example {\n  color: red;\n}\n</style>\n\n<custom1>\n  This could be e.g. documentation for the component.\n</custom1>"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Simple Hash-based Router Implementation in Vue (Composition API)",
    "codeDescription": "Demonstrates a basic client-side router implementation using Vue's Composition API. Uses hash-based routing with dynamic components and handles route changes through the hashchange event.",
    "codeLanguage": "vue",
    "codeTokens": 204,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/routing.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Routing Implementation Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, computed } from 'vue'\nimport Home from './Home.vue'\nimport About from './About.vue'\nimport NotFound from './NotFound.vue'\n\nconst routes = {\n  '/': Home,\n  '/about': About\n}\n\nconst currentPath = ref(window.location.hash)\n\nwindow.addEventListener('hashchange', () => {\n  currentPath.value = window.location.hash\n})\n\nconst currentView = computed(() => {\n  return routes[currentPath.value.slice(1) || '/'] || NotFound\n})\n</script>\n\n<template>\n  <a href=\"#/\">Home</a> |\n  <a href=\"#/about\">About</a> |\n  <a href=\"#/non-existent-path\">Broken Link</a>\n  <component :is=\"currentView\" />\n</template>"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Rendering Components with Props",
    "codeDescription": "This snippet demonstrates how to pass data to a component as props using custom attributes. Multiple instances of the BlogPost component are created with different title values.",
    "codeLanguage": "html",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_12",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<BlogPost title=\"My journey with Vue\" />\n<BlogPost title=\"Blogging with Vue\" />\n<BlogPost title=\"Why Vue is so fun\" />"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Vue Dynamic Binding Examples",
    "codeDescription": "Examples of Vue templates with different types of dynamic bindings that get optimized during compilation.",
    "codeLanguage": "html",
    "codeTokens": 71,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Rendering Mechanism Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<!-- class binding only -->\n<div :class=\"{ active }\"></div>\n\n<!-- id and value bindings only -->\n<input :id=\"id\" :value=\"value\">\n\n<!-- text children only -->\n<div>{{ dynamic }}</div>"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Global Error Handler Example",
    "codeDescription": "Example showing how to configure a global error handler for a Vue application.",
    "codeLanguage": "javascript",
    "codeTokens": 53,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#2025-04-08_snippet_16",
    "pageTitle": "Vue.js Application API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.config.errorHandler = (err, instance, info) => {\n  // handle error, e.g. report to a service\n}"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Accessing Props in Vue Templates",
    "codeDescription": "Example showing how to access a prop directly in a Vue template expression. CamelCase props can be referenced as valid JavaScript identifiers.",
    "codeLanguage": "vue-html",
    "codeTokens": 43,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_14",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<span>{{ greetingMessage }}</span>"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Defining mounted Hook Interface",
    "codeDescription": "TypeScript interface for the mounted lifecycle hook that executes after component mounting.",
    "codeLanguage": "typescript",
    "codeTokens": 40,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  mounted?(this: ComponentPublicInstance): void\n}"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Automatic HTML Content Escaping in Vue.js Templates",
    "codeDescription": "This example shows how Vue automatically escapes HTML content in templates to prevent script injection attacks.",
    "codeLanguage": "vue-html",
    "codeTokens": 41,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#2025-04-08_snippet_1",
    "pageTitle": "Security Guidelines for Vue.js Applications",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<h1>{{ userProvidedString }}</h1>"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Combining Object and Array Syntax for Class Binding in Vue.js",
    "codeDescription": "Demonstrates using object syntax inside array syntax for more concise conditional class binding.",
    "codeLanguage": "vue-html",
    "codeTokens": 46,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :class=\"[{ [activeClass]: isActive }, errorClass]\"></div>"
      }
    ],
    "relevance": 0.87
  },
  {
    "codeTitle": "Implementing Accessible Icon Buttons in Vue.js",
    "codeDescription": "This example shows how to create accessible icon buttons using Font Awesome icons. It demonstrates the use of aria-hidden and visually hidden text to provide context for screen readers.",
    "codeLanguage": "vue-html",
    "codeTokens": 137,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#2025-04-08_snippet_12",
    "pageTitle": "Accessibility Implementation Guide for Vue.js Applications",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<form role=\"search\">\n  <label for=\"searchIcon\" class=\"hidden-visually\">Search: </label>\n  <input type=\"text\" name=\"searchIcon\" id=\"searchIcon\" v-model=\"searchIcon\" />\n  <button type=\"submit\">\n    <i class=\"fas fa-search\" aria-hidden=\"true\"></i>\n    <span class=\"hidden-visually\">Search</span>\n  </button>\n</form>"
      }
    ],
    "relevance": 0.868
  },
  {
    "codeTitle": "Functional Component Declaration in Vue",
    "codeDescription": "Shows a simple functional component defined directly as a JavaScript function without component options.",
    "codeLanguage": "javascript",
    "codeTokens": 39,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#2025-04-08_snippet_9",
    "pageTitle": "Render Functions & JSX in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "function Hello() {\n  return 'hello world!'\n}"
      }
    ],
    "relevance": 0.868
  },
  {
    "codeTitle": "Defining unmounted Hook Interface",
    "codeDescription": "TypeScript interface for the unmounted lifecycle hook that executes after component unmounting.",
    "codeLanguage": "typescript",
    "codeTokens": 44,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  unmounted?(this: ComponentPublicInstance): void\n}"
      }
    ],
    "relevance": 0.868
  },
  {
    "codeTitle": "Implementing serverPrefetch and mounted Hooks for Data Fetching (JavaScript)",
    "codeDescription": "Example of using serverPrefetch for server-side data fetching and mounted hook for client-side fallback in a Vue.js component. This demonstrates how to handle data fetching for both server-side rendering and client-side rendering scenarios.",
    "codeLanguage": "javascript",
    "codeTokens": 183,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#2025-04-08_snippet_14",
    "pageTitle": "Vue.js Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      data: null\n    }\n  },\n  async serverPrefetch() {\n    // component is rendered as part of the initial request\n    // pre-fetch data on server as it is faster than on the client\n    this.data = await fetchOnServer(/* ... */)\n  },\n  async mounted() {\n    if (!this.data) {\n      // if data is null on mount, it means the component\n      // is dynamically rendered on the client. Perform a\n      // client-side fetch instead.\n      this.data = await fetchOnClient(/* ... */)\n    }\n  }\n}"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Combining Suspense with Vue Router, Transition, and KeepAlive",
    "codeDescription": "Complex example showing how to properly nest Suspense with other Vue components like RouterView, Transition, and KeepAlive.",
    "codeLanguage": "vue-html",
    "codeTokens": 125,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#2025-04-08_snippet_4",
    "pageTitle": "Suspense Component in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<RouterView v-slot=\"{ Component }\">\n  <template v-if=\"Component\">\n    <Transition mode=\"out-in\">\n      <KeepAlive>\n        <Suspense>\n          <!-- main content -->\n          <component :is=\"Component\"></component>\n\n          <!-- loading state -->\n          <template #fallback>\n            Loading...\n          </template>\n        </Suspense>\n      </KeepAlive>\n    </Transition>\n  </template>\n</RouterView>"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Emitting Events Without Script Setup (Composition API)",
    "codeDescription": "This snippet demonstrates how to emit events in the Composition API without using <script setup>. The emit function is accessed from the setup context.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_25",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  emits: ['enlarge-text'],\n  setup(props, ctx) {\n    ctx.emit('enlarge-text')\n  }\n}"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Accessing Updated DOM Example",
    "codeDescription": "Demonstrates how to use onUpdated hook to access the DOM after state changes.",
    "codeLanguage": "vue",
    "codeTokens": 107,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Composition API Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, onUpdated } from 'vue'\n\nconst count = ref(0)\n\nonUpdated(() => {\n  // text content should be the same as current `count.value`\n  console.log(document.getElementById('count').textContent)\n})\n</script>\n\n<template>\n  <button id=\"count\" @click=\"count++\">{{ count }}</button>\n</template>"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Single-File Component Filename Casing - Good Practice",
    "codeDescription": "Examples of correct casing patterns for Vue component filenames, showing the recommended PascalCase or kebab-case conventions.",
    "codeLanguage": "plaintext",
    "codeTokens": 41,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "plaintext",
        "code": "components/\n|- MyComponent.vue"
      },
      {
        "language": "plaintext",
        "code": "components/\n|- my-component.vue"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Defining Custom Option Merge Strategy in Vue",
    "codeDescription": "Shows how to define a custom merge strategy for component options using app.config.optionMergeStrategies. This example creates a strategy for merging a custom 'msg' option.",
    "codeLanguage": "javascript",
    "codeTokens": 158,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#2025-04-08_snippet_23",
    "pageTitle": "Vue.js Application API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const app = createApp({\n  // option from self\n  msg: 'Vue',\n  // option from a mixin\n  mixins: [\n    {\n      msg: 'Hello '\n    }\n  ],\n  mounted() {\n    // merged options exposed on this.$options\n    console.log(this.$options.msg)\n  }\n})\n\n// define a custom merge strategy for `msg`\napp.config.optionMergeStrategies.msg = (parent, child) => {\n  return (parent || '') + (child || '')\n}\n\napp.mount('#app')\n// logs 'Hello Vue'"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Using Event Modifiers in Render Functions in Vue",
    "codeDescription": "Shows how to use event modifiers like capture, once, and passive in render functions and JSX.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#2025-04-08_snippet_16",
    "pageTitle": "Render Functions & JSX in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "h('input', {\n  onClickCapture() {\n    /* listener in capture mode */\n  },\n  onKeyupOnce() {\n    /* triggers only once */\n  },\n  onMouseoverOnceCapture() {\n    /* once + capture */\n  }\n})"
      },
      {
        "language": "jsx",
        "code": "<input\n  onClickCapture={() => {}}\n  onKeyupOnce={() => {}}\n  onMouseoverOnceCapture={() => {}}\n/>"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "TypeScript Props and Emits",
    "codeDescription": "TypeScript-specific syntax for declaring props and emits in <script setup>.",
    "codeLanguage": "typescript",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Script Setup Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const props = defineProps<{\n  foo: string\n  bar?: number\n}>()\n\nconst emit = defineEmits<{\n  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Defining errorCaptured Hook Interface",
    "codeDescription": "TypeScript interface for the errorCaptured lifecycle hook that handles descendant component errors.",
    "codeLanguage": "typescript",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  errorCaptured?(\n    this: ComponentPublicInstance,\n    err: unknown,\n    instance: ComponentPublicInstance | null,\n    info: string\n  ): boolean | void\n}"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Ref Unwrapping in Reactive Objects",
    "codeDescription": "Demonstration of how refs are automatically unwrapped when used as properties of reactive objects.",
    "codeLanguage": "typescript",
    "codeTokens": 94,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_5",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "const count = ref(1)\nconst obj = reactive({ count })\n\nconsole.log(obj.count === count.value) // true\n\ncount.value++\nconsole.log(count.value) // 2\nconsole.log(obj.count) // 2\n\nobj.count++\nconsole.log(obj.count) // 3\nconsole.log(count.value) // 3"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Local Component Registration with Standard Script",
    "codeDescription": "Demonstrates local component registration using the components option in a non-<script setup> Vue component.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Component Registration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import ComponentA from './ComponentA.js'\n\nexport default {\n  components: {\n    ComponentA\n  },\n  setup() {\n    // ...\n  }\n}"
      }
    ],
    "relevance": 0.865
  },
  {
    "codeTitle": "Defining onServerPrefetch Type in TypeScript",
    "codeDescription": "Type definition for the onServerPrefetch function in Vue.js. It takes a callback function that returns a Promise and returns void.",
    "codeLanguage": "typescript",
    "codeTokens": 52,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Composition API Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function onServerPrefetch(callback: () => Promise<any>): void"
      }
    ],
    "relevance": 0.863
  },
  {
    "codeTitle": "Installing Vue with Bun using create-vue",
    "codeDescription": "Command to install and execute create-vue, the official Vue project scaffolding tool, using Bun package manager.",
    "codeLanguage": "sh",
    "codeTokens": 39,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/tooling.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Tooling Guide",
    "codeList": [
      {
        "language": "sh",
        "code": "$ bun create vue@latest"
      }
    ],
    "relevance": 0.862
  },
  {
    "codeTitle": "Returning String from Options API Render Function in Vue",
    "codeDescription": "Demonstrates returning a simple string from a render function in Vue's Options API.",
    "codeLanguage": "javascript",
    "codeTokens": 45,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#2025-04-08_snippet_7",
    "pageTitle": "Render Functions & JSX in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  render() {\n    return 'hello world!'\n  }\n}"
      }
    ],
    "relevance": 0.862
  },
  {
    "codeTitle": "Creating a Reactive Class Object in Vue.js Composition API",
    "codeDescription": "Demonstrates creating a reactive object to hold multiple class states using the reactive() function.",
    "codeLanguage": "js",
    "codeTokens": 49,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "js",
        "code": "const classObject = reactive({\n  active: true,\n  'text-danger': false\n})"
      }
    ],
    "relevance": 0.862
  },
  {
    "codeTitle": "Watching a Property Using $watch",
    "codeDescription": "Example showing how to watch a component property using the $watch method. The callback receives the new and old values of the watched property.",
    "codeLanguage": "javascript",
    "codeTokens": 54,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#2025-04-08_snippet_11",
    "pageTitle": "Vue.js Component Instance API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "this.$watch('a', (newVal, oldVal) => {})"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Basic Component Import Setup in Vue",
    "codeDescription": "Script setup block importing the SwitchComponent for demonstration purposes.",
    "codeLanguage": "vue",
    "codeTokens": 45,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js KeepAlive Component Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport SwitchComponent from './keep-alive-demos/SwitchComponent.vue'\n</script>"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Accessing Template Refs with Composition API in Vue.js",
    "codeDescription": "This code demonstrates how to use the useTemplateRef() helper to access a template ref in the Composition API. It also shows how to focus the input element on component mount.",
    "codeLanguage": "vue",
    "codeTokens": 117,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#2025-04-08_snippet_1",
    "pageTitle": "Understanding Template Refs in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { useTemplateRef, onMounted } from 'vue'\n\n// the first argument must match the ref value in the template\nconst input = useTemplateRef('my-input')\n\nonMounted(() => {\n  input.value.focus()\n})\n</script>\n\n<template>\n  <input ref=\"my-input\" />\n</template>"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Reactive Proxy Consistency Rules",
    "codeDescription": "Explains how reactive() maintains proxy consistency: calling reactive() on the same object returns the same proxy, and calling reactive() on an existing proxy returns itself.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// calling reactive() on the same object returns the same proxy\nconsole.log(reactive(raw) === proxy) // true\n\n// calling reactive() on a proxy returns itself\nconsole.log(reactive(proxy) === proxy) // true"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Mounting Vue Application Examples",
    "codeDescription": "Examples showing how to mount a Vue application to a DOM element using both selector and direct element reference.",
    "codeLanguage": "javascript",
    "codeTokens": 54,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Application API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\nconst app = createApp(/* ... */)\n\napp.mount('#app')"
      },
      {
        "language": "javascript",
        "code": "app.mount(document.body.firstChild)"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Transforming Prop Value with Computed Property in Vue.js Options API",
    "codeDescription": "This snippet shows how to transform a prop value using a computed property in Vue.js Options API. The computed property auto-updates when the prop changes.",
    "codeLanguage": "javascript",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_31",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: ['size'],\n  computed: {\n    // computed property that auto-updates when the prop changes\n    normalizedSize() {\n      return this.size.trim().toLowerCase()\n    }\n  }\n}"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Event Handler Methods",
    "codeDescription": "Examples of method implementations for handling emitted events with arguments in both APIs.",
    "codeLanguage": "javascript",
    "codeTokens": 43,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/events.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Component Events Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "methods: {\n  increaseCount(n) {\n    this.count += n\n  }\n}"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Inject with Default Values",
    "codeDescription": "Examples showing how to use injected values with default values and custom injection keys.",
    "codeLanguage": "javascript",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Component Options Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const Child = {\n  inject: {\n    foo: { default: 'foo' }\n  }\n}"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Defining a Method Instead of Computed Property in Vue Options API",
    "codeDescription": "This snippet shows how to define a method instead of a computed property in the Options API of Vue.js. It creates a method that checks if the author has published books.",
    "codeLanguage": "javascript",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#2025-04-08_snippet_4",
    "pageTitle": "Computed Properties in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "// in component\nmethods: {\n  calculateBooksMessage() {\n    return this.author.books.length > 0 ? 'Yes' : 'No'\n  }\n}"
      }
    ],
    "relevance": 0.86
  },
  {
    "codeTitle": "Component Name Casing in Vue.js Templates",
    "codeDescription": "Demonstrates the recommended PascalCase naming for components in Single-File Components and string templates, while using kebab-case for in-DOM templates.",
    "codeLanguage": "vue-html",
    "codeTokens": 56,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_16",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- In Single-File Components and string templates -->\n<MyComponent/>"
      },
      {
        "language": "vue-html",
        "code": "<!-- In in-DOM templates -->\n<my-component></my-component>"
      }
    ],
    "relevance": 0.859
  },
  {
    "codeTitle": "Combining Static and Dynamic Styles in Vue.js",
    "codeDescription": "Demonstrates using both a static style attribute and dynamic style binding on the same element.",
    "codeLanguage": "vue-html",
    "codeTokens": 55,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_26",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<h1 style=\"color: red\" :style=\"'font-size: 1em'\">hello</h1>"
      }
    ],
    "relevance": 0.858
  },
  {
    "codeTitle": "Handling v-model Modifiers in Composition API (Pre-3.4)",
    "codeDescription": "Pre-Vue 3.4 implementation of handling custom v-model modifiers using props and emits in Composition API.",
    "codeLanguage": "vue",
    "codeTokens": 156,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_12",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst props = defineProps({\n  modelValue: String,\n  modelModifiers: { default: () => ({}) }\n})\n\nconst emit = defineEmits(['update:modelValue'])\n\nfunction emitValue(e) {\n  let value = e.target.value\n  if (props.modelModifiers.capitalize) {\n    value = value.charAt(0).toUpperCase() + value.slice(1)\n  }\n  emit('update:modelValue', value)\n}\n</script>\n\n<template>\n  <input type=\"text\" :value=\"props.modelValue\" @input=\"emitValue\" />\n</template>"
      }
    ],
    "relevance": 0.858
  },
  {
    "codeTitle": "Native Input v-model Binding",
    "codeDescription": "Example of binding defineModel to a native input element for simple input wrapping.",
    "codeLanguage": "vue",
    "codeTokens": 56,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst model = defineModel()\n</script>\n\n<template>\n  <input v-model=\"model\" />\n</template>"
      }
    ],
    "relevance": 0.856
  },
  {
    "codeTitle": "Vue Directive Methods Type Definition",
    "codeDescription": "TypeScript interface definition for global directive registration and retrieval methods.",
    "codeLanguage": "typescript",
    "codeTokens": 48,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#2025-04-08_snippet_9",
    "pageTitle": "Vue.js Application API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface App {\n  directive(name: string): Directive | undefined\n  directive(name: string, directive: Directive): this\n}"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Registering Async Component Globally in Vue.js",
    "codeDescription": "Demonstrates how to register an async component globally using app.component(). This allows the async component to be used anywhere in the application.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#2025-04-08_snippet_2",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.component('MyComponent', defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n))"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Using Vue's watchEffect for Reactive Computations",
    "codeDescription": "This example demonstrates how to use Vue's watchEffect API to create a reactive computation that automatically tracks dependencies and updates when they change.",
    "codeLanguage": "javascript",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Reactivity System Deep Dive",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ref, watchEffect } from 'vue'\n\nconst A0 = ref(0)\nconst A1 = ref(1)\nconst A2 = ref()\n\nwatchEffect(() => {\n  // tracks A0 and A1\n  A2.value = A0.value + A1.value\n})\n\n// triggers the effect\nA0.value = 2"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Limitations of reactive() - Destructuring",
    "codeDescription": "Shows that destructuring properties from a reactive object breaks the reactivity connection, as primitive values lose their connection to the original reactive object.",
    "codeLanguage": "javascript",
    "codeTokens": 119,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_16",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const state = reactive({ count: 0 })\n\n// count is disconnected from state.count when destructured.\nlet { count } = state\n// does not affect original state\ncount++\n\n// the function receives a plain number and\n// won't be able to track changes to state.count\n// we have to pass the entire object in to retain reactivity\ncallSomeFunction(state.count)"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Identity Hazard Example with markRaw in Vue.js",
    "codeDescription": "Example showing potential identity hazards when using markRaw(), as it only prevents reactivity at the root level while nested objects can still be converted to proxies.",
    "codeLanguage": "javascript",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#2025-04-08_snippet_15",
    "pageTitle": "Vue.js Reactivity API - Advanced",
    "codeList": [
      {
        "language": "javascript",
        "code": "const foo = markRaw({\n  nested: {}\n})\n\nconst bar = reactive({\n  // although `foo` is marked as raw, foo.nested is not.\n  nested: foo.nested\n})\n\nconsole.log(foo.nested === bar.nested) // false"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Creating a Class Object in Vue.js Options API",
    "codeDescription": "Shows how to define an object containing class states in the Options API data() method.",
    "codeLanguage": "js",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "js",
        "code": "data() {\n  return {\n    classObject: {\n      active: true,\n      'text-danger': false\n    }\n  }\n}"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Vue Component provide() Example",
    "codeDescription": "Example showing how to use provide() in a Vue component to share static values, reactive values, and Symbol keys.",
    "codeLanguage": "vue",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-dependency-injection.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Dependency Injection Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, provide } from 'vue'\nimport { countSymbol } from './injectionSymbols'\n\n// provide static value\nprovide('path', '/project/')\n\n// provide reactive value\nconst count = ref(0)\nprovide('count', count)\n\n// provide with Symbol keys\nprovide(countSymbol, count)\n</script>"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Options API v-model Implementation",
    "codeDescription": "Demonstrates v-model implementation using the Options API approach with props and events.",
    "codeLanguage": "vue",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  props: ['modelValue'],\n  emits: ['update:modelValue']\n}\n</script>\n\n<template>\n  <input\n    :value=\"modelValue\"\n    @input=\"$emit('update:modelValue', $event.target.value)\"\n  />\n</template>"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Using Template Refs inside v-for with Options API in Vue.js",
    "codeDescription": "This snippet demonstrates how to use template refs inside a v-for loop with the Options API. It shows how to access an array of refs corresponding to list items.",
    "codeLanguage": "vue",
    "codeTokens": 126,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-refs.md#2025-04-08_snippet_4",
    "pageTitle": "Understanding Template Refs in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  data() {\n    return {\n      list: [\n        /* ... */\n      ]\n    }\n  },\n  mounted() {\n    console.log(this.$refs.items)\n  }\n}\n</script>\n\n<template>\n  <ul>\n    <li v-for=\"item in list\" ref=\"items\">\n      {{ item }}\n    </li>\n  </ul>\n</template>"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Updating Template to Use Filtered Todos",
    "codeDescription": "Shows the change required in the template to use the computed filteredTodos instead of the raw todos array.",
    "codeLanguage": "diff",
    "codeTokens": 53,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Computed Properties Documentation",
    "codeList": [
      {
        "language": "diff",
        "code": "- <li v-for=\"todo in todos\">\n+ <li v-for=\"todo in filteredTodos\">"
      }
    ],
    "relevance": 0.855
  },
  {
    "codeTitle": "Vue Component Setup with Script Block",
    "codeDescription": "Script setup block that imports the PartnerAll component for use in the template.",
    "codeLanguage": "vue",
    "codeTokens": 44,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/partners/all.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Partner Page Configuration",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport PartnerAll from './components/PartnerAll.vue'\n</script>"
      }
    ],
    "relevance": 0.853
  },
  {
    "codeTitle": "Defining a Custom Directive in Vue.js Options API",
    "codeDescription": "This snippet shows how to define a custom directive 'v-highlight' using the Options API in Vue.js. The directive is registered locally and adds a CSS class to the element when it's mounted.",
    "codeLanguage": "javascript",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#2025-04-08_snippet_1",
    "pageTitle": "Custom Directives in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const highlight = {\n  mounted: (el) => el.classList.add('is-highlight')\n}\n\nexport default {\n  directives: {\n    // enables v-highlight in template\n    highlight\n  }\n}"
      },
      {
        "language": "vue-html",
        "code": "<p v-highlight>This sentence is important!</p>"
      }
    ],
    "relevance": 0.853
  },
  {
    "codeTitle": "Defining Data Properties in Vue.js Options API",
    "codeDescription": "Defines data properties in Vue's Options API to control class binding behavior.",
    "codeLanguage": "js",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "js",
        "code": "data() {\n  return {\n    isActive: true,\n    hasError: false\n  }\n}"
      }
    ],
    "relevance": 0.852
  },
  {
    "codeTitle": "Binding Classes Using Array Syntax in Vue.js",
    "codeDescription": "Demonstrates binding multiple classes using an array of class names.",
    "codeLanguage": "vue-html",
    "codeTokens": 39,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_11",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :class=\"[activeClass, errorClass]\"></div>"
      }
    ],
    "relevance": 0.852
  },
  {
    "codeTitle": "Using Generic Components with Refs in Vue.js TypeScript",
    "codeDescription": "This snippet illustrates how to use a reference to a generic component in a ref using the vue-component-type-helpers library. It shows the difference between referencing a non-generic component with InstanceType and a generic component with ComponentExposed.",
    "codeLanguage": "vue",
    "codeTokens": 132,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#2025-04-08_snippet_16",
    "pageTitle": "Vue.js Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script\n  setup\n  lang=\"ts\"\n>\nimport componentWithoutGenerics from '../component-without-generics.vue';\nimport genericComponent from '../generic-component.vue';\n\nimport type { ComponentExposed } from 'vue-component-type-helpers';\n\n// Works for a component without generics\nref<InstanceType<typeof componentWithoutGenerics>>();\n\nref<ComponentExposed<typeof genericComponent>>();"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Defining Custom Element Types for Vue.js in TypeScript",
    "codeDescription": "This snippet demonstrates how to define types for a custom element's properties and events, which can be used for type checking in Vue.js templates. It includes the definition of the custom element class and type exports for attributes and events.",
    "codeLanguage": "typescript",
    "codeTokens": 265,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Integration with Web Components",
    "codeList": [
      {
        "language": "typescript",
        "code": "// file: some-lib/src/SomeElement.ts\n\n// Define a class with typed JS properties.\nexport class SomeElement extends HTMLElement {\n  foo: number = 123\n  bar: string = 'blah'\n\n  lorem: boolean = false\n\n  // This method should not be exposed to template types.\n  someMethod() {\n    /* ... */\n  }\n\n  // ... implementation details omitted ...\n  // ... assume the element dispatches events named \"apple-fell\" ...\n}\n\ncustomElements.define('some-element', SomeElement)\n\n// This is a list of properties of SomeElement that will be selected for type\n// checking in framework templates (f.e. Vue SFC templates). Any other\n// properties will not be exposed.\nexport type SomeElementAttributes = 'foo' | 'bar'\n\n// Define the event types that SomeElement dispatches.\nexport type SomeElementEvents = {\n  'apple-fell': AppleFellEvent\n}\n\nexport class AppleFellEvent extends Event {\n  /* ... details omitted ... */\n}"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "v-for with Object Properties in Vue.js Template",
    "codeDescription": "Demonstrates iterating over object properties using v-for. It shows how to access values, keys, and indices of the object.",
    "codeLanguage": "html",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#2025-04-08_snippet_9",
    "pageTitle": "List Rendering in Vue.js",
    "codeList": [
      {
        "language": "html",
        "code": "<li v-for=\"(value, key, index) in myObject\">\n  {{ index }}. {{ key }}: {{ value }}\n</li>"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Deep Watching a Reactive Object with Getter in Vue.js",
    "codeDescription": "Example of using deep watching with a getter function to detect deep mutations within a reactive object, with a note on how new and old values will be the same object.",
    "codeLanguage": "js",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_14",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "const state = reactive({ count: 0 })\nwatch(\n  () => state,\n  (newValue, oldValue) => {\n    // newValue === oldValue\n  },\n  { deep: true }\n)"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Component Instance $data Type Definition",
    "codeDescription": "TypeScript interface defining the $data property on the component instance. The $data property is the reactive object returned from the data option.",
    "codeLanguage": "typescript",
    "codeTokens": 50,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Component Instance API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentPublicInstance {\n  $data: object\n}"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Using effectScope in Vue.js",
    "codeDescription": "Example showing how to use effectScope() to group multiple reactive effects (computed, watch, watchEffect) and dispose them together.",
    "codeLanguage": "javascript",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#2025-04-08_snippet_17",
    "pageTitle": "Vue.js Reactivity API - Advanced",
    "codeList": [
      {
        "language": "javascript",
        "code": "const scope = effectScope()\n\nscope.run(() => {\n  const doubled = computed(() => counter.value * 2)\n\n  watch(doubled, () => console.log(doubled.value))\n\n  watchEffect(() => console.log('Count: ', doubled.value))\n})\n\n// to dispose all effects in the scope\nscope.stop()"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Multiple v-model Bindings with Different Arguments and Modifiers",
    "codeDescription": "Example of using multiple v-model directives with different arguments and modifiers on a single component.",
    "codeLanguage": "vue-html",
    "codeTokens": 53,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_17",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<UserName\n  v-model:first-name.capitalize=\"first\"\n  v-model:last-name.uppercase=\"last\"\n/>"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Implementing a v-focus Custom Directive in Vue.js Options API",
    "codeDescription": "This snippet demonstrates how to implement a 'v-focus' custom directive using the Options API. The directive is registered locally and focuses an input element when it's mounted.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#2025-04-08_snippet_4",
    "pageTitle": "Custom Directives in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const focus = {\n  mounted: (el) => el.focus()\n}\n\nexport default {\n  directives: {\n    // enables v-focus in template\n    focus\n  }\n}"
      },
      {
        "language": "vue-html",
        "code": "<input v-focus />"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Using Directive Arguments in Vue",
    "codeDescription": "Demonstrates how to use directive arguments with v-bind to update specific HTML attributes. The full syntax and its shorthand form are shown for binding a URL to an anchor's href attribute.",
    "codeLanguage": "vue-html",
    "codeTokens": 71,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Template Syntax",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<a v-bind:href=\"url\"> ... </a>\n\n<!-- shorthand -->\n<a :href=\"url\"> ... </a>"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Using mounted Hook in Vue.js Options API (SFC)",
    "codeDescription": "This snippet demonstrates how to use the mounted lifecycle hook in a Vue.js Single File Component using the Options API. It defines a mounted method in the component options.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#2025-04-08_snippet_4",
    "pageTitle": "Lifecycle and Template Refs in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  mounted() {\n    // component is now mounted.\n  }\n}"
      }
    ],
    "relevance": 0.85
  },
  {
    "codeTitle": "Vue.js Case-Sensitive Dynamic Arguments",
    "codeDescription": "Shows usage of dynamic arguments with case sensitivity considerations for in-DOM templates.",
    "codeLanguage": "vue-html",
    "codeTokens": 38,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#2025-04-08_snippet_18",
    "pageTitle": "Vue.js Template Syntax",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<a :[someAttr]=\"value\"> ... </a>"
      }
    ],
    "relevance": 0.848
  },
  {
    "codeTitle": "Once Watchers in Options API",
    "codeDescription": "Shows how to create a watcher that triggers only once when the source changes using the once: true option. Only supported in Vue 3.4+.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Watchers",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  watch: {\n    source: {\n      handler(newValue, oldValue) {\n        // when `source` changes, triggers only once\n      },\n      once: true\n    }\n  }\n}"
      }
    ],
    "relevance": 0.848
  },
  {
    "codeTitle": "Configuring Vue.js Examples Page Frontmatter",
    "codeDescription": "Sets up the frontmatter for the Vue.js examples page, specifying page properties such as title, layout options, and navigation settings.",
    "codeLanguage": "yaml",
    "codeTokens": 59,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/examples/index.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Examples Page Configuration",
    "codeList": [
      {
        "language": "yaml",
        "code": "---\npage: true\ntitle: Examples\naside: false\nfooter: false\noutline: false\n---"
      }
    ],
    "relevance": 0.847
  },
  {
    "codeTitle": "Defining Emits Option Type Interface in Vue.js",
    "codeDescription": "TypeScript interface for the Vue.js emits option that allows declaring custom events. Supports both array and object syntax, with the latter enabling validation functions for event payloads.",
    "codeLanguage": "typescript",
    "codeTokens": 98,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#2025-04-08_snippet_10",
    "pageTitle": "Vue.js Component Options State Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  emits?: ArrayEmitsOptions | ObjectEmitsOptions\n}\n\ntype ArrayEmitsOptions = string[]\n\ntype ObjectEmitsOptions = { [key: string]: EmitValidator | null }\n\ntype EmitValidator = (...args: unknown[]) => boolean"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Using Named Slots with Vue Custom Elements",
    "codeDescription": "Example of passing named slots to a Vue-defined custom element using the native slots syntax with the slot attribute.",
    "codeLanguage": "html",
    "codeTokens": 52,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Integration with Web Components",
    "codeList": [
      {
        "language": "html",
        "code": "<my-element>\n  <div slot=\"named\">hello</div>\n</my-element>"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Providing Reactive State and Update Function in Vue.js",
    "codeDescription": "This snippet demonstrates how to provide reactive state and a function to update it using the Composition API in Vue.js. It uses ref for reactivity and provide to make the state available to child components.",
    "codeLanguage": "vue",
    "codeTokens": 103,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#2025-04-08_snippet_9",
    "pageTitle": "Provide/Inject in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { provide, ref } from 'vue'\n\nconst location = ref('North Pole')\n\nfunction updateLocation() {\n  location.value = 'South Pole'\n}\n\nprovide('location', {\n  location,\n  updateLocation\n})\n</script>"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Creating a Vue Instance for Hello World in HTML and JavaScript",
    "codeDescription": "This snippet demonstrates how to create a basic Vue.js application that displays 'Hello Vue!' on a webpage. It includes the Vue.js library via CDN and sets up a Vue instance with a data property.",
    "codeLanguage": "HTML",
    "codeTokens": 124,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/examples/src/hello-world/description.txt#2025-04-08_snippet_0",
    "pageTitle": "Getting Started with Vue.js",
    "codeList": [
      {
        "language": "HTML",
        "code": "<script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n<div id=\"app\">\n  {{ message }}\n</div>\n\n<script>\n  const { createApp } = Vue\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Defining triggerRef Type in TypeScript",
    "codeDescription": "Type definition for the triggerRef function that manually triggers effects depending on a shallow ref, typically used after making deep mutations to a shallow ref's inner value.",
    "codeLanguage": "typescript",
    "codeTokens": 54,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Reactivity API - Advanced",
    "codeList": [
      {
        "language": "typescript",
        "code": "function triggerRef(ref: ShallowRef): void"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Declaring Reactive State with data() in Vue.js (Options API)",
    "codeDescription": "Shows how to create reactive state using the Options API approach with the `data()` function. The example demonstrates returning an object with a reactive message property that can be used in templates.",
    "codeLanguage": "javascript",
    "codeTokens": 71,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#2025-04-08_snippet_4",
    "pageTitle": "Declarative Rendering in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      message: 'Hello World!'\n    }\n  }\n}"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Deep Watchers in Options API",
    "codeDescription": "Shows how to create a deep watcher in Options API that triggers on all nested property changes within the watched object. Uses the deep: true option.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Watchers",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  watch: {\n    someObject: {\n      handler(newValue, oldValue) {\n        // Note: `newValue` will be equal to `oldValue` here\n        // on nested mutations as long as the object itself\n        // hasn't been replaced.\n      },\n      deep: true\n    }\n  }\n}"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Declaring Reactive State with Options API",
    "codeDescription": "Demonstrates how to declare reactive state using the data option in Vue.js Options API. Shows how to access and mutate the reactive state through the component instance.",
    "codeLanguage": "javascript",
    "codeTokens": 125,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      count: 1\n    }\n  },\n\n  // `mounted` is a lifecycle hook which we will explain later\n  mounted() {\n    // `this` refers to the component instance.\n    console.log(this.count) // => 1\n\n    // data can be mutated as well\n    this.count = 2\n  }\n}"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Default Values for Injected Values in Vue.js",
    "codeDescription": "Demonstrates how to remove undefined from the type by providing a default value for injected values.",
    "codeLanguage": "typescript",
    "codeTokens": 46,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#2025-04-08_snippet_17",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "const foo = inject<string>('foo', 'bar') // type: string"
      }
    ],
    "relevance": 0.845
  },
  {
    "codeTitle": "Fetching Latest Vue.js Version in Vue Component",
    "codeDescription": "This Vue component fetches the latest stable version of Vue.js from GitHub's API and displays it. It uses the Composition API with setup script, ref, and onMounted hooks.",
    "codeLanguage": "vue",
    "codeTokens": 145,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/about/releases.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Release Management and Versioning",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst version = ref()\n\nonMounted(async () => {\n  const res = await fetch('https://api.github.com/repos/vuejs/core/releases/latest')\n  version.value = (await res.json()).name\n})\n</script>\n\n<p v-if=\"version\">\nThe current latest stable version of Vue is <strong>{{ version }}</strong>.\n</p>\n<p v-else>\nChecking latest version...\n</p>"
      }
    ],
    "relevance": 0.844
  },
  {
    "codeTitle": "Triggering Updates in Vue's Reactivity System",
    "codeDescription": "This function demonstrates how Vue triggers updates by invoking all subscriber effects when a reactive property is mutated.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Reactivity System Deep Dive",
    "codeList": [
      {
        "language": "javascript",
        "code": "function trigger(target, key) {\n  const effects = getSubscribersForProperty(target, key)\n  effects.forEach((effect) => effect())\n}"
      }
    ],
    "relevance": 0.843
  },
  {
    "codeTitle": "Defining and Using Custom Method in Vue.js",
    "codeDescription": "This snippet shows how to define a custom method and call it with arguments in an inline handler in Vue.js.",
    "codeLanguage": "javascript",
    "codeTokens": 43,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#2025-04-08_snippet_4",
    "pageTitle": "Event Handling in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "function say(message) {\n  alert(message)\n}"
      },
      {
        "language": "javascript",
        "code": "methods: {\n  say(message) {\n    alert(message)\n  }\n}"
      }
    ],
    "relevance": 0.842
  },
  {
    "codeTitle": "Importing and Rendering PartnerLanding Component in Vue",
    "codeDescription": "Sets up the script section to import the PartnerLanding component and renders it in the template.",
    "codeLanguage": "vue",
    "codeTokens": 54,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/partners/index.md#2025-04-08_snippet_1",
    "pageTitle": "Vue Partners Page Configuration",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport PartnerLanding from './components/PartnerLanding.vue'\n</script>\n\n<PartnerLanding />"
      }
    ],
    "relevance": 0.842
  },
  {
    "codeTitle": "Rendering Client-Only Vue.js Component",
    "codeDescription": "Wraps the TutorialRepl component in a ClientOnly tag to ensure it's only rendered on the client-side, preventing server-side rendering issues.",
    "codeLanguage": "vue",
    "codeTokens": 54,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/index.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Tutorial Page Configuration",
    "codeList": [
      {
        "language": "vue",
        "code": "<ClientOnly>\n  <TutorialRepl />\n</ClientOnly>"
      }
    ],
    "relevance": 0.841
  },
  {
    "codeTitle": "Defining Slots Types for Vue.js Components",
    "codeDescription": "This snippet demonstrates how to use the SlotsType helper in TypeScript to define slot types for a Vue.js component. It shows type inference for default and named slots with their respective scoped props.",
    "codeLanguage": "typescript",
    "codeTokens": 153,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-rendering.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Component Rendering Options",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { SlotsType } from 'vue'\n\ndefineComponent({\n  slots: Object as SlotsType<{\n    default: { foo: string; bar: number }\n    item: { data: number }\n  }>,\n  setup(props, { slots }) {\n    expectType<\n      undefined | ((scope: { foo: string; bar: number }) => any)\n    >(slots.default)\n    expectType<undefined | ((scope: { data: number }) => any)>(\n      slots.item\n    )\n  }\n})"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Custom Directive Implementation with SSR Support",
    "codeDescription": "Example of a custom directive that provides both client-side DOM manipulation and server-side rendering implementation through getSSRProps hook.",
    "codeLanguage": "javascript",
    "codeTokens": 124,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Server-Side Rendering (SSR) Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const myDirective = {\n  mounted(el, binding) {\n    // client-side implementation:\n    // directly update the DOM\n    el.id = binding.value\n  },\n  getSSRProps(binding) {\n    // server-side implementation:\n    // return the props to be rendered.\n    // getSSRProps only receives the directive binding.\n    return {\n      id: binding.value\n    }\n  }\n}"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Implementing CSS Modules in Vue.js SFC",
    "codeDescription": "Demonstrates how to use CSS Modules in Vue.js Single File Components. CSS Modules provide a way to scope CSS by automatically creating unique class names.",
    "codeLanguage": "vue",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#2025-04-08_snippet_2",
    "pageTitle": "SFC CSS Features in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<template>\n  <p :class=\"$style.red\">This should be red</p>\n</template>\n\n<style module>\n.red {\n  color: red;\n}\n</style>"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Defining h() Function Type Signature in TypeScript",
    "codeDescription": "This code defines the TypeScript type signature for the h() function which creates virtual DOM nodes (vnodes). It shows the full signature and the shorthand when omitting props, along with the type definitions for Children, Slot, and Slots.",
    "codeLanguage": "TypeScript",
    "codeTokens": 150,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/render-function.md#2025-04-08_snippet_0",
    "pageTitle": "Render Function APIs in Vue.js",
    "codeList": [
      {
        "language": "TypeScript",
        "code": "// full signature\nfunction h(\n  type: string | Component,\n  props?: object | null,\n  children?: Children | Slot | Slots\n): VNode\n\n// omitting props\nfunction h(type: string | Component, children?: Children | Slot): VNode\n\ntype Children = string | number | boolean | VNode | null | Children[]\n\ntype Slot = () => Children\n\ntype Slots = { [name: string]: Slot }"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Pausing and Resuming a Watcher in Vue.js",
    "codeDescription": "Example demonstrating how to pause, resume, and stop a watcher using the control methods available in Vue 3.5 and above.",
    "codeLanguage": "js",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_18",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "const { stop, pause, resume } = watch(() => {})\n\n// temporarily pause the watcher\npause()\n\n// resume later\nresume()\n\n// stop\nstop()"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Using Prop as Initial Value for Local Data in Vue.js Options API",
    "codeDescription": "This snippet demonstrates how to use a prop as an initial value for a local data property in Vue.js Options API. The local data is disconnected from future prop updates.",
    "codeLanguage": "javascript",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_29",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: ['initialCounter'],\n  data() {\n    return {\n      // counter only uses this.initialCounter as the initial value;\n      // it is disconnected from future prop updates.\n      counter: this.initialCounter\n    }\n  }\n}"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Using $$() for Reactivity Retention in Vue.js Functions",
    "codeDescription": "Demonstrates the use of the $$() macro to maintain reactivity when passing reactive variables as function arguments or returning them from functions. This prevents unintended loss of reactivity.",
    "codeLanguage": "typescript",
    "codeTokens": 138,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-transform.md#2025-04-08_snippet_5",
    "pageTitle": "Reactivity Transform in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "function trackChange(x: Ref<number>) {\n  watch(x, (x) => {\n    console.log('x changed!')\n  })\n}\n\nlet count = $ref(0)\ntrackChange($$(count)) // works!\n\nfunction useMouse() {\n  let x = $ref(0)\n  let y = $ref(0)\n\n  // listen to mousemove...\n\n  // fixed\n  return $$({\n    x,\n    y\n  })\n}"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Named Transition Example",
    "codeDescription": "Shows how to use named transitions in Vue with the name prop.",
    "codeLanguage": "vue-html",
    "codeTokens": 35,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition name=\"fade\">\n  ...\n</Transition>"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Unit Testing an Increment Function with Jest/Vitest",
    "codeDescription": "Demonstrates unit testing for the increment function, verifying three behaviors: normal incrementation, respecting maximum values, and using default parameters. This shows the basic structure of test suites using describe/test/expect pattern.",
    "codeLanguage": "javascript",
    "codeTokens": 161,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// helpers.spec.js\nimport { increment } from './helpers'\n\ndescribe('increment', () => {\n  test('increments the current number by 1', () => {\n    expect(increment(0, 10)).toBe(1)\n  })\n\n  test('does not increment the current number over the max', () => {\n    expect(increment(10, 10)).toBe(10)\n  })\n\n  test('has a default max of 10', () => {\n    expect(increment(10)).toBe(10)\n  })\n})"
      }
    ],
    "relevance": 0.84
  },
  {
    "codeTitle": "Registering Components in Vue.js",
    "codeDescription": "Example of registering component dependencies using the components option with both shorthand and renamed registration syntax.",
    "codeLanguage": "js",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Component Options: Miscellaneous Configuration",
    "codeList": [
      {
        "language": "js",
        "code": "import Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n\nexport default {\n  components: {\n    // shorthand\n    Foo,\n    // register under a different name\n    RenamedBar: Bar\n  }\n}"
      }
    ],
    "relevance": 0.838
  },
  {
    "codeTitle": "Registering a Global Component in Vue Application",
    "codeDescription": "Shows how to register a component globally in a Vue application, making it available for use anywhere within the application scope.",
    "codeLanguage": "javascript",
    "codeTokens": 44,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#2025-04-08_snippet_7",
    "pageTitle": "Creating a Vue Application",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.component('TodoDeleteButton', TodoDeleteButton)"
      }
    ],
    "relevance": 0.838
  },
  {
    "codeTitle": "Full Component Registration Syntax",
    "codeDescription": "Shows the explicit component registration syntax without using ES2015 property shorthand, demonstrating the key-value relationship for component names and implementations.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Component Registration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  components: {\n    ComponentA: ComponentA\n  }\n  // ...\n}"
      }
    ],
    "relevance": 0.838
  },
  {
    "codeTitle": "Cleanup with onUnmounted Example",
    "codeDescription": "Shows how to use onUnmounted hook to clean up side effects like intervals.",
    "codeLanguage": "vue",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Composition API Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { onMounted, onUnmounted } from 'vue'\n\nlet intervalId\nonMounted(() => {\n  intervalId = setInterval(() => {\n    // ...\n  })\n})\n\nonUnmounted(() => clearInterval(intervalId))\n</script>"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Creating a Mouse Tracking Composable in JavaScript",
    "codeDescription": "This snippet shows how to extract the mouse tracking logic into a reusable composable function in a separate JavaScript file.",
    "codeLanguage": "javascript",
    "codeTokens": 200,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#2025-04-08_snippet_1",
    "pageTitle": "Composables in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "// mouse.js\nimport { ref, onMounted, onUnmounted } from 'vue'\n\n// by convention, composable function names start with \"use\"\nexport function useMouse() {\n  // state encapsulated and managed by the composable\n  const x = ref(0)\n  const y = ref(0)\n\n  // a composable can update its managed state over time.\n  function update(event) {\n    x.value = event.pageX\n    y.value = event.pageY\n  }\n\n  // a composable can also hook into its owner component's\n  // lifecycle to setup and teardown side effects.\n  onMounted(() => window.addEventListener('mousemove', update))\n  onUnmounted(() => window.removeEventListener('mousemove', update))\n\n  // expose managed state as return value\n  return { x, y }\n}"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Implementing Dynamic Transitions in Vue.js",
    "codeDescription": "Shows how to create dynamic transitions by binding the name prop of the Transition component to a variable. This allows for switching between different transitions based on the component's state.",
    "codeLanguage": "vue",
    "codeTokens": 59,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_20",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition :name=\"transitionName\">\n  <!-- ... -->\n</Transition>"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Component Instance $nextTick Type Definition",
    "codeDescription": "TypeScript interface defining the $nextTick method. This is an instance-bound version of the global nextTick function that binds the callback's context to the current component instance.",
    "codeLanguage": "typescript",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/component-instance.md#2025-04-08_snippet_18",
    "pageTitle": "Vue.js Component Instance API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentPublicInstance {\n  $nextTick(callback?: (this: ComponentPublicInstance) => void): Promise<void>\n}"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Registering Base Components Automatically with Webpack",
    "codeDescription": "JavaScript code example showing how to automatically register base components globally using Webpack's require.context feature, which simplifies importing commonly used components.",
    "codeLanguage": "javascript",
    "codeTokens": 145,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "const requireComponent = require.context(\n  './src',\n  true,\n  /Base[A-Z]\\w+\\.(vue|js)$/\n)\nrequireComponent.keys().forEach(function (fileName) {\n  let baseComponentConfig = requireComponent(fileName)\n  baseComponentConfig =\n    baseComponentConfig.default || baseComponentConfig\n  const baseComponentName =\n    baseComponentConfig.name ||\n    fileName.replace(/^.+\\//, '').replace(/\\.\\w+$/, '')\n  app.component(baseComponentName, baseComponentConfig)\n})"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Defining serverPrefetch Lifecycle Hook in Vue.js Component (TypeScript)",
    "codeDescription": "Type definition for the serverPrefetch lifecycle hook in Vue.js components. This is an async function to be resolved before the component instance is rendered on the server during server-side rendering.",
    "codeLanguage": "typescript",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  serverPrefetch?(this: ComponentPublicInstance): Promise<any>\n}"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Explicitly Annotating Computed Property Types in Vue",
    "codeDescription": "Shows how to explicitly annotate the return types of computed properties to ensure correct implementation, including how to annotate writable computed properties with get and set methods.",
    "codeLanguage": "typescript",
    "codeTokens": 150,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#2025-04-08_snippet_5",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  data() {\n    return {\n      message: 'Hello!'\n    }\n  },\n  computed: {\n    // explicitly annotate return type\n    greeting(): string {\n      return this.message + '!'\n    },\n\n    // annotating a writable computed property\n    greetingUppercased: {\n      get(): string {\n        return this.greeting.toUpperCase()\n      },\n      set(newValue: string) {\n        this.message = newValue.toUpperCase()\n      }\n    }\n  }\n})"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Accessing v-model Modifiers in Options API",
    "codeDescription": "Implementation of a component that accesses custom v-model modifiers using the Options API with a modelModifiers prop.",
    "codeLanguage": "vue",
    "codeTokens": 135,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  props: {\n    modelValue: String,\n    modelModifiers: {\n      default: () => ({})\n    }\n  },\n  emits: ['update:modelValue'],\n  created() {\n    console.log(this.modelModifiers) // { capitalize: true }\n  }\n}\n</script>\n\n<template>\n  <input\n    type=\"text\"\n    :value=\"modelValue\"\n    @input=\"$emit('update:modelValue', $event.target.value)\"\n  />\n</template>"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Chaining Component Registration in Vue",
    "codeDescription": "Demonstrates how to register multiple Vue components using method chaining for a more concise syntax.",
    "codeLanguage": "javascript",
    "codeTokens": 60,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Component Registration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "app\n  .component('ComponentA', ComponentA)\n  .component('ComponentB', ComponentB)\n  .component('ComponentC', ComponentC)"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Configuring Vue.js Compile-Time Flags in Rollup",
    "codeDescription": "Example demonstrating how to configure Vue.js compile-time flags in a Rollup build using @rollup/plugin-replace. This sets values for all three compile-time flags to control feature inclusion/exclusion.",
    "codeLanguage": "javascript",
    "codeTokens": 119,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/compile-time-flags.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Compile-Time Flags Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// rollup.config.js\nimport replace from '@rollup/plugin-replace'\n\nexport default {\n  plugins: [\n    replace({\n      __VUE_OPTIONS_API__: 'true',\n      __VUE_PROD_DEVTOOLS__: 'false',\n      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'\n    })\n  ]\n}"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "v-for with Index in Vue.js Template",
    "codeDescription": "Shows how to use v-for with an additional index parameter. It accesses parent scope properties and renders the parent message, index, and item message.",
    "codeLanguage": "html",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#2025-04-08_snippet_3",
    "pageTitle": "List Rendering in Vue.js",
    "codeList": [
      {
        "language": "html",
        "code": "<li v-for=\"(item, index) in items\">\n  {{ parentMessage }} - {{ index }} - {{ item.message }}\n</li>"
      }
    ],
    "relevance": 0.835
  },
  {
    "codeTitle": "Using Custom Class as Prop Type in Vue.js Options API",
    "codeDescription": "This snippet demonstrates how to use a custom class (Person) as a prop type in Vue.js Options API.",
    "codeLanguage": "javascript",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_36",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: {\n    author: Person\n  }\n}"
      }
    ],
    "relevance": 0.833
  },
  {
    "codeTitle": "Importing and Registering Child Component in Vue.js (In-DOM Template)",
    "codeDescription": "This snippet illustrates how to import and register a child component when using in-DOM templates in Vue.js. It shows the component registration within the createApp method.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-11/description.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Component Usage Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import ChildComp from './ChildComp.js'\n\ncreateApp({\n  components: {\n    ChildComp\n  }\n})"
      }
    ],
    "relevance": 0.832
  },
  {
    "codeTitle": "Typing Component Emits in Vue",
    "codeDescription": "Shows how to declare expected payload types for emitted events using the object syntax of the emits option. This enables type checking for event payload and prevents calling non-declared events.",
    "codeLanguage": "typescript",
    "codeTokens": 145,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#2025-04-08_snippet_3",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\n\nexport default defineComponent({\n  emits: {\n    addBook(payload: { bookName: string }) {\n      // perform runtime validation\n      return payload.bookName.length > 0\n    }\n  },\n  methods: {\n    onSubmit() {\n      this.$emit('addBook', {\n        bookName: 123 // Type error!\n      })\n\n      this.$emit('non-declared-event') // Type error!\n    }\n  }\n})"
      }
    ],
    "relevance": 0.832
  },
  {
    "codeTitle": "Using shallowReactive in JavaScript",
    "codeDescription": "Example demonstrating the use of shallowReactive to create an object where only root-level properties are reactive. Nested objects remain non-reactive.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Reactivity API - Advanced",
    "codeList": [
      {
        "language": "javascript",
        "code": "const state = shallowReactive({\n  foo: 1,\n  nested: {\n    bar: 2\n  }\n})\n\n// mutating state's own properties is reactive\nstate.foo++\n\n// ...but does not convert nested objects\nisReactive(state.nested) // false\n\n// NOT reactive\nstate.nested.bar++"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Conditional Class Binding with Ternary Expression in Vue.js",
    "codeDescription": "Shows how to conditionally apply a class using a ternary expression within an array binding.",
    "codeLanguage": "vue-html",
    "codeTokens": 48,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_12",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :class=\"[isActive ? activeClass : '', errorClass]\"></div>"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Using Named Slots in Parent Component",
    "codeDescription": "Demonstrates how to pass content to named slots using template tags with v-slot directive or # shorthand syntax.",
    "codeLanguage": "vue-html",
    "codeTokens": 118,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<BaseLayout>\n  <template #header>\n    <h1>Here might be a page title</h1>\n  </template>\n\n  <template #default>\n    <p>A paragraph for the main content.</p>\n    <p>And another one.</p>\n  </template>\n\n  <template #footer>\n    <p>Here's some contact info</p>\n  </template>\n</BaseLayout>"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Implementing Debounced Method in Vue.js Component (Problematic Approach)",
    "codeDescription": "This snippet demonstrates a problematic approach to implementing a debounced method in a Vue.js component. It directly uses Lodash's debounce function in the methods object, which can cause issues when the component is reused.",
    "codeLanguage": "javascript",
    "codeTokens": 101,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_22",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { debounce } from 'lodash-es'\n\nexport default {\n  methods: {\n    // Debouncing with Lodash\n    click: debounce(function () {\n      // ... respond to click ...\n    }, 500)\n  }\n}"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Defining beforeMount Hook Interface",
    "codeDescription": "TypeScript interface for the beforeMount lifecycle hook that runs before component mounting.",
    "codeLanguage": "typescript",
    "codeTokens": 42,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  beforeMount?(this: ComponentPublicInstance): void\n}"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Using key Attribute for Forced Element Replacement in Vue.js",
    "codeDescription": "Shows how to use the key attribute to force the replacement of an element instead of reusing it. This is useful for triggering transitions when the text content changes.",
    "codeLanguage": "vue-html",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#2025-04-08_snippet_1",
    "pageTitle": "Built-in Special Attributes in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<transition>\n  <span :key=\"text\">{{ text }}</span>\n</transition>"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Defining Reactive State in Vue.js Composition API",
    "codeDescription": "Creates reactive state variables using ref() in Vue's Composition API to control class binding behavior.",
    "codeLanguage": "js",
    "codeTokens": 44,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "js",
        "code": "const isActive = ref(true)\nconst hasError = ref(false)"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Prop Validation in Vue.js Composition API",
    "codeDescription": "This snippet demonstrates various prop validation techniques in Vue.js Composition API, including type checks, required props, default values, and custom validators.",
    "codeLanguage": "javascript",
    "codeTokens": 354,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_32",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "defineProps({\n  // Basic type check\n  //  (`null` and `undefined` values will allow any type)\n  propA: Number,\n  // Multiple possible types\n  propB: [String, Number],\n  // Required string\n  propC: {\n    type: String,\n    required: true\n  },\n  // Required but nullable string\n  propD: {\n    type: [String, null],\n    required: true\n  },\n  // Number with a default value\n  propE: {\n    type: Number,\n    default: 100\n  },\n  // Object with a default value\n  propF: {\n    type: Object,\n    // Object or array defaults must be returned from\n    // a factory function. The function receives the raw\n    // props received by the component as the argument.\n    default(rawProps) {\n      return { message: 'hello' }\n    }\n  },\n  // Custom validator function\n  // full props passed as 2nd argument in 3.4+\n  propG: {\n    validator(value, props) {\n      // The value must match one of these strings\n      return ['success', 'warning', 'danger'].includes(value)\n    }\n  },\n  // Function with a default value\n  propH: {\n    type: Function,\n    // Unlike object or array default, this is not a factory\n    // function - this is a function to serve as a default value\n    default() {\n      return 'Default function'\n    }\n  }\n})"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Using Custom Class as Prop Type in Vue.js",
    "codeDescription": "This snippet shows how to use a custom class as a prop type in Vue.js. The validation will be done using an instanceof check.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_34",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "class Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName\n    this.lastName = lastName\n  }\n}"
      }
    ],
    "relevance": 0.83
  },
  {
    "codeTitle": "Plugin Installation Example",
    "codeDescription": "Example showing how to install a plugin in a Vue application.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#2025-04-08_snippet_12",
    "pageTitle": "Vue.js Application API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\nimport MyPlugin from './plugins/MyPlugin'\n\nconst app = createApp({\n  /* ... */\n})\n\napp.use(MyPlugin)"
      }
    ],
    "relevance": 0.829
  },
  {
    "codeTitle": "Using PropType for Complex Props Types in Vue",
    "codeDescription": "Shows how to annotate complex prop types using the PropType utility. This approach allows for typing objects with nested properties and function call signatures that aren't possible with just runtime props options.",
    "codeLanguage": "typescript",
    "codeTokens": 202,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/options-api.md#2025-04-08_snippet_1",
    "pageTitle": "TypeScript with Options API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { defineComponent } from 'vue'\nimport type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  author: string\n  year: number\n}\n\nexport default defineComponent({\n  props: {\n    book: {\n      // provide more specific type to `Object`\n      type: Object as PropType<Book>,\n      required: true\n    },\n    // can also annotate functions\n    callback: Function as PropType<(id: number) => void>\n  },\n  mounted() {\n    this.book.title // string\n    this.book.year // number\n\n    // TS Error: argument of type 'string' is not\n    // assignable to parameter of type 'number'\n    this.callback?.('123')\n  }\n})"
      }
    ],
    "relevance": 0.828
  },
  {
    "codeTitle": "Array Syntax for Class Binding in Vue.js Options API",
    "codeDescription": "Shows how to define class names as data properties for use in array binding syntax.",
    "codeLanguage": "js",
    "codeTokens": 53,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_10",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "js",
        "code": "data() {\n  return {\n    activeClass: 'active',\n    errorClass: 'text-danger'\n  }\n}"
      }
    ],
    "relevance": 0.828
  },
  {
    "codeTitle": "Creating a Vue.js SSR Application with Store Integration",
    "codeDescription": "This code demonstrates how to create a Vue SSR application factory that generates new app instances per request. It includes store initialization and app-level provide/inject pattern to avoid cross-request state pollution.",
    "codeLanguage": "javascript",
    "codeTokens": 162,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Server-Side Rendering (SSR) Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// app.js (shared between server and client)\nimport { createSSRApp } from 'vue'\nimport { createStore } from './store.js'\n\n// called on each request\nexport function createApp() {\n  const app = createSSRApp(/* ... */)\n  // create new instance of store per request\n  const store = createStore(/* ... */)\n  // provide store at the app level\n  app.provide('store', store)\n  // also expose store for hydration purposes\n  return { app, store }\n}"
      }
    ],
    "relevance": 0.826
  },
  {
    "codeTitle": "Using ref() in JavaScript",
    "codeDescription": "Example of creating and using a ref in JavaScript, demonstrating how to access and modify the ref's value.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_1",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const count = ref(0)\nconsole.log(count.value) // 0\n\ncount.value = 1\nconsole.log(count.value) // 1"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Computed Class Object in Vue.js Composition API",
    "codeDescription": "Creates a computed property that returns a dynamic class object based on component state.",
    "codeLanguage": "js",
    "codeTokens": 74,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "js",
        "code": "const isActive = ref(true)\nconst error = ref(null)\n\nconst classObject = computed(() => ({\n  active: isActive.value && !error.value,\n  'text-danger': error.value && error.value.type === 'fatal'\n}))"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Using onServerPrefetch for Server-Side Data Fetching in Vue.js",
    "codeDescription": "Example of using onServerPrefetch to fetch data during server-side rendering, with a fallback to client-side fetching if needed. This demonstrates how to optimize data loading for both server and client rendering scenarios.",
    "codeLanguage": "vue",
    "codeTokens": 192,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Composition API Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, onServerPrefetch, onMounted } from 'vue'\n\nconst data = ref(null)\n\nonServerPrefetch(async () => {\n  // component is rendered as part of the initial request\n  // pre-fetch data on server as it is faster than on the client\n  data.value = await fetchOnServer(/* ... */)\n})\n\nonMounted(async () => {\n  if (!data.value) {\n    // if data is null on mount, it means the component\n    // is dynamically rendered on the client. Perform a\n    // client-side fetch instead.\n    data.value = await fetchOnClient(/* ... */)\n  }\n})\n</script>"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Implementing Debounced Method in Vue.js Component (Recommended Approach)",
    "codeDescription": "This snippet shows the recommended approach for implementing a debounced method in a Vue.js component. It creates the debounced function in the created lifecycle hook, ensuring each component instance has its own independent copy. It also properly cleans up the timer in the unmounted hook.",
    "codeLanguage": "javascript",
    "codeTokens": 158,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_23",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  created() {\n    // each instance now has its own copy of debounced handler\n    this.debouncedClick = _.debounce(this.click, 500)\n  },\n  unmounted() {\n    // also a good idea to cancel the timer\n    // when the component is removed\n    this.debouncedClick.cancel()\n  },\n  methods: {\n    click() {\n      // ... respond to click ...\n    }\n  }\n}"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Defining updated Hook Interface",
    "codeDescription": "TypeScript interface for the updated lifecycle hook that executes after DOM updates.",
    "codeLanguage": "typescript",
    "codeTokens": 40,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  updated?(this: ComponentPublicInstance): void\n}"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Using withDefaults for Props Default Values in Vue.js",
    "codeDescription": "Shows how to use the withDefaults compiler macro to set default values for props in Vue.js 3.4 and below with TypeScript.",
    "codeLanguage": "typescript",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#2025-04-08_snippet_5",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface Props {\n  msg?: string\n  labels?: string[]\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  msg: 'hello',\n  labels: () => ['one', 'two']\n})"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Custom Checkbox Values with v-model in Vue.js",
    "codeDescription": "Example of using true-value and false-value attributes with v-model on checkboxes. This allows setting custom values for when the checkbox is checked or unchecked instead of the default boolean values.",
    "codeLanguage": "vue-html",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Form Input Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input\n  type=\"checkbox\"\n  v-model=\"toggle\"\n  true-value=\"yes\"\n  false-value=\"no\" />"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Using Multiple Values for Auto-prefixing in Vue.js",
    "codeDescription": "Demonstrates providing an array of vendor-prefixed values for a CSS property, where Vue will use the first supported value.",
    "codeLanguage": "vue-html",
    "codeTokens": 61,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_28",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Declaring Props with CamelCase (Composition API)",
    "codeDescription": "Example showing camelCase prop declaration in Composition API, which is recommended for JavaScript code readability and allows direct referencing in template expressions.",
    "codeLanguage": "js",
    "codeTokens": 45,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_12",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "defineProps({\n  greetingMessage: String\n})"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Implementing Checkbox Binding in Vue Template",
    "codeDescription": "Shows how to bind a checkbox input to a todo item's done property using v-model directive.",
    "codeLanguage": "vue-html",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Computed Properties Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<li v-for=\"todo in todos\">\n  <input type=\"checkbox\" v-model=\"todo.done\">\n  ...\n</li>"
      }
    ],
    "relevance": 0.825
  },
  {
    "codeTitle": "Basic Vue SSR Server Example",
    "codeDescription": "Demonstrates basic server-side rendering of a Vue application using Node.js. Creates an SSR app instance and renders it to a string using renderToString().",
    "codeLanguage": "javascript",
    "codeTokens": 120,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/ssr.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Server-Side Rendering (SSR) Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createSSRApp } from 'vue'\nimport { renderToString } from 'vue/server-renderer'\n\nconst app = createSSRApp({\n  data: () => ({ count: 1 }),\n  template: `<button @click=\"count++\">{{ count }}</button>`\n})\n\nrenderToString(app).then((html) => {\n  console.log(html)\n})"
      }
    ],
    "relevance": 0.823
  },
  {
    "codeTitle": "Complex HTML Class Binding in Vue.js",
    "codeDescription": "Shows how to combine static classes with dynamic class binding using multiple conditions in an object.",
    "codeLanguage": "vue-html",
    "codeTokens": 57,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div\n  class=\"static\"\n  :class=\"{ active: isActive, 'text-danger': hasError }\"\n></div>"
      }
    ],
    "relevance": 0.823
  },
  {
    "codeTitle": "Explicit HTML Rendering in Vue.js JSX",
    "codeDescription": "This example shows how to render HTML content using JSX in Vue.js when the content is known to be safe.",
    "codeLanguage": "jsx",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#2025-04-08_snippet_5",
    "pageTitle": "Security Guidelines for Vue.js Applications",
    "codeList": [
      {
        "language": "jsx",
        "code": "<div innerHTML={this.userProvidedHtml}></div>"
      }
    ],
    "relevance": 0.822
  },
  {
    "codeTitle": "Basic Transition Usage Examples",
    "codeDescription": "Examples demonstrating different ways to use the Transition component with v-if, dynamic components, and transition events.",
    "codeLanguage": "vue-html",
    "codeTokens": 123,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Built-in Components Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition>\n  <div v-if=\"ok\">toggled content</div>\n</Transition>\n\n<Transition>\n  <div :key=\"text\">{{ text }}</div>\n</Transition>\n\n<Transition name=\"fade\" mode=\"out-in\" appear>\n  <component :is=\"view\"></component>\n</Transition>\n\n<Transition @after-enter=\"onTransitionComplete\">\n  <div v-show=\"ok\">toggled content</div>\n</Transition>"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Inline Style Binding Setup in Vue.js Composition API",
    "codeDescription": "Sets up reactive variables for controlling inline styles using the Composition API.",
    "codeLanguage": "js",
    "codeTokens": 41,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_19",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "js",
        "code": "const activeColor = ref('red')\nconst fontSize = ref(30)"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Using v-model with Argument and Modifier in Template",
    "codeDescription": "Example of using v-model with both an argument ('title') and a modifier ('capitalize') in a Vue template.",
    "codeLanguage": "vue-html",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_15",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<MyComponent v-model:title.capitalize=\"myText\">"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Using key Attribute with v-for in Vue.js",
    "codeDescription": "Demonstrates the usage of the key attribute in combination with v-for directive to render a list of items. The key attribute helps Vue's virtual DOM algorithm identify and track individual nodes efficiently.",
    "codeLanguage": "vue-html",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#2025-04-08_snippet_0",
    "pageTitle": "Built-in Special Attributes in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ul>\n  <li v-for=\"item in items\" :key=\"item.id\">...</li>\n</ul>"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "In-DOM Template Component Usage",
    "codeDescription": "Shows how to use components in DOM templates with proper kebab-case naming convention.",
    "codeLanguage": "vue-html",
    "codeTokens": 55,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- if this template is written in the DOM -->\n<button-counter></button-counter>\n<button-counter></button-counter>\n<button-counter></button-counter>"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "In-DOM Template Component Usage",
    "codeDescription": "Shows how to use components in DOM templates with proper kebab-case naming convention.",
    "codeLanguage": "vue-html",
    "codeTokens": 55,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- if this template is written in the DOM -->\n<button-counter></button-counter>\n<button-counter></button-counter>\n<button-counter></button-counter>"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Defining Expose Option Type Interface in Vue.js",
    "codeDescription": "TypeScript interface for the Vue.js expose option that allows controlling which properties are exposed when a component instance is accessed by a parent via template refs.",
    "codeLanguage": "typescript",
    "codeTokens": 50,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Component Options State Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  expose?: string[]\n}"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "TransitionGroup Example Usage",
    "codeDescription": "Example showing how to use TransitionGroup to animate a list of items.",
    "codeLanguage": "vue-html",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Built-in Components Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<TransitionGroup tag=\"ul\" name=\"slide\">\n  <li v-for=\"item in items\" :key=\"item.id\">\n    {{ item.text }}\n  </li>\n</TransitionGroup>"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Using Dynamic Styling with Font Size Control",
    "codeDescription": "This snippet shows how to apply dynamic styling using the postFontSize property. The font size of all blog posts will be controlled by this reactive property.",
    "codeLanguage": "html",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_18",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<div :style=\"{ fontSize: postFontSize + 'em' }\">\n  <BlogPost\n    v-for=\"post in posts\"\n    :key=\"post.id\"\n    :title=\"post.title\"\n   />\n</div>"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Using Method Handler in Vue.js Template",
    "codeDescription": "This snippet demonstrates how to use a method handler in a Vue.js template by binding it to a button click event.",
    "codeLanguage": "vue",
    "codeTokens": 60,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#2025-04-08_snippet_3",
    "pageTitle": "Event Handling in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- `greet` is the name of the method defined above -->\n<button @click=\"greet\">Greet</button>"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Child Component Template with Class Example in Vue.js",
    "codeDescription": "Shows a simple component template that will receive and merge classes from parent components.",
    "codeLanguage": "vue-html",
    "codeTokens": 43,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_14",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- child component template -->\n<p class=\"foo bar\">Hi!</p>"
      }
    ],
    "relevance": 0.82
  },
  {
    "codeTitle": "Explicit HTML Rendering in Vue.js Render Functions",
    "codeDescription": "This snippet demonstrates how to render HTML content using a render function in Vue.js when the content is known to be safe.",
    "codeLanguage": "javascript",
    "codeTokens": 52,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/security.md#2025-04-08_snippet_4",
    "pageTitle": "Security Guidelines for Vue.js Applications",
    "codeList": [
      {
        "language": "javascript",
        "code": "h('div', {\n  innerHTML: this.userProvidedHtml\n})"
      }
    ],
    "relevance": 0.818
  },
  {
    "codeTitle": "Defining Vue Component with Composition API",
    "codeDescription": "Example of defining a Vue component using Composition API with script setup syntax. Demonstrates reactive state management using ref.",
    "codeLanguage": "vue",
    "codeTokens": 80,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">You clicked me {{ count }} times.</button>\n</template>"
      }
    ],
    "relevance": 0.818
  },
  {
    "codeTitle": "Rendering Dynamic Select Options with v-for in Vue.js",
    "codeDescription": "Example of using v-for to dynamically render select options from an array of option objects. This shows how to bind the option value and display text from each object.",
    "codeLanguage": "vue-html",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#2025-04-08_snippet_11",
    "pageTitle": "Vue.js Form Input Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<select v-model=\"selected\">\n  <option v-for=\"option in options\" :value=\"option.value\">\n    {{ option.text }}\n  </option>\n</select>\n\n<div>Selected: {{ selected }}</div>"
      }
    ],
    "relevance": 0.817
  },
  {
    "codeTitle": "Chained Conditional Rendering with v-if, v-else-if, and v-else in Vue.js",
    "codeDescription": "Demonstrates the use of v-if, v-else-if, and v-else for multiple conditional branches. The example shows how to render different content based on the value of 'type'.",
    "codeLanguage": "vue-html",
    "codeTokens": 118,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-directives.md#2025-04-08_snippet_3",
    "pageTitle": "Built-in Directives in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div v-if=\"type === 'A'\">\n  A\n</div>\n<div v-else-if=\"type === 'B'\">\n  B\n</div>\n<div v-else-if=\"type === 'C'\">\n  C\n</div>\n<div v-else>\n  Not A/B/C\n</div>"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Creating a Computed Property for Filtered Array in Options API",
    "codeDescription": "Demonstrates how to create a computed property that returns a filtered array in Vue's Options API. This provides a reactive filtered view of the original data.",
    "codeLanguage": "js",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#2025-04-08_snippet_15",
    "pageTitle": "List Rendering in Vue.js",
    "codeList": [
      {
        "language": "js",
        "code": "data() {\n  return {\n    numbers: [1, 2, 3, 4, 5]\n  }\n},\ncomputed: {\n  evenNumbers() {\n    return this.numbers.filter(n => n % 2 === 0)\n  }\n}"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Parent Component v-model Usage",
    "codeDescription": "Shows how to use v-model in the parent component to bind to a child component.",
    "codeLanguage": "vue-html",
    "codeTokens": 43,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- Parent.vue -->\n<Child v-model=\"countModel\" />"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Using In-DOM Template with Vue Application",
    "codeDescription": "Demonstrates how to define a template directly in the DOM and use it with a Vue application. This approach is common when using Vue without a build step or with server-side frameworks.",
    "codeLanguage": "html",
    "codeTokens": 68,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#2025-04-08_snippet_4",
    "pageTitle": "Creating a Vue Application",
    "codeList": [
      {
        "language": "html",
        "code": "<div id=\"app\">\n  <button @click=\"count++\">{{ count }}</button>\n</div>"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Defining onMounted Type in TypeScript",
    "codeDescription": "Type definition for the onMounted lifecycle hook function that registers a callback to be executed after component mounting.",
    "codeLanguage": "typescript",
    "codeTokens": 51,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Composition API Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function onMounted(callback: () => void, target?: ComponentInternalInstance | null): void"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Good Implementation: Using Template Tag with v-for and v-if in Vue.js",
    "codeDescription": "Alternative approach to avoid v-if with v-for by using a template tag with v-for to wrap the element with v-if, correctly separating the directives.",
    "codeLanguage": "vue-html",
    "codeTokens": 87,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#2025-04-08_snippet_14",
    "pageTitle": "Vue.js Style Guide: Essential Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ul>\n  <template v-for=\"user in users\" :key=\"user.id\">\n    <li v-if=\"user.isActive\">\n      {{ user.name }}\n    </li>\n  </template>\n</ul>"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Component Instance Exposure in Vue Script Setup",
    "codeDescription": "Example of using defineExpose to explicitly expose internal properties from a script setup component.",
    "codeLanguage": "vue",
    "codeTokens": 65,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#2025-04-08_snippet_11",
    "pageTitle": "Vue.js Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\nconst a = 1\nconst b = ref(2)\n\ndefineExpose({\n  a,\n  b\n})\n</script>"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Emitting Events from Child Component",
    "codeDescription": "This snippet demonstrates how to emit a custom event from a child component when a button is clicked. The $emit method is used to send the event to the parent component.",
    "codeLanguage": "vue",
    "codeTokens": 101,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_21",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- BlogPost.vue, omitting <script> -->\n<template>\n  <div class=\"blog-post\">\n    <h4>{{ title }}</h4>\n    <button @click=\"$emit('enlarge-text')\">Enlarge text</button>\n  </div>\n</template>"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Basic Vue Component Imports",
    "codeDescription": "Setup script importing various transition demo components used throughout the documentation.",
    "codeLanguage": "javascript",
    "codeTokens": 121,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "<script setup>\nimport Basic from './transition-demos/Basic.vue'\nimport SlideFade from './transition-demos/SlideFade.vue'\nimport CssAnimation from './transition-demos/CssAnimation.vue'\nimport NestedTransitions from './transition-demos/NestedTransitions.vue'\nimport JsHooks from './transition-demos/JsHooks.vue'\nimport BetweenElements from './transition-demos/BetweenElements.vue'\nimport BetweenComponents from './transition-demos/BetweenComponents.vue'\n</script>"
      }
    ],
    "relevance": 0.815
  },
  {
    "codeTitle": "Implementing Expose Option to Control Public Methods in Vue.js",
    "codeDescription": "JavaScript example showing how to use the expose option to selectively expose component methods to parent components. This creates a controlled public API for the component.",
    "codeLanguage": "javascript",
    "codeTokens": 92,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#2025-04-08_snippet_14",
    "pageTitle": "Vue.js Component Options State Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  // only `publicMethod` will be available on the public instance\n  expose: ['publicMethod'],\n  methods: {\n    publicMethod() {\n      // ...\n    },\n    privateMethod() {\n      // ...\n    }\n  }\n}"
      }
    ],
    "relevance": 0.814
  },
  {
    "codeTitle": "Mounting a Vue Application to a DOM Element",
    "codeDescription": "Shows how to mount a Vue application to a DOM element using the mount method with a CSS selector. This step is required to render the application on the page.",
    "codeLanguage": "javascript",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#2025-04-08_snippet_3",
    "pageTitle": "Creating a Vue Application",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.mount('#app')"
      }
    ],
    "relevance": 0.813
  },
  {
    "codeTitle": "Bad Implementation: v-for Without Key in Vue.js",
    "codeDescription": "Example of incorrectly using v-for without a key attribute, which can lead to unpredictable behavior especially during DOM updates and animations.",
    "codeLanguage": "vue-html",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Style Guide: Essential Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ul>\n  <li v-for=\"todo in todos\">\n    {{ todo.text }}\n  </li>\n</ul>"
      }
    ],
    "relevance": 0.812
  },
  {
    "codeTitle": "Augmenting Component Custom Props for TSX in Vue.js",
    "codeDescription": "Shows how to use ComponentCustomProps to augment allowed TSX props, enabling the use of non-declared props on TSX elements. This example adds a 'hello' prop to all components in TSX.",
    "codeLanguage": "typescript",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Utility Types Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "declare module 'vue' {\n  interface ComponentCustomProps {\n    hello?: string\n  }\n}\n\nexport {}"
      }
    ],
    "relevance": 0.811
  },
  {
    "codeTitle": "Defining Two-way Model Binding in Vue Components",
    "codeDescription": "Shows how to use defineModel macro for creating v-model bindings in Vue 3.4+ with various configuration options.",
    "codeLanguage": "javascript",
    "codeTokens": 167,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#2025-04-08_snippet_10",
    "pageTitle": "Vue.js Script Setup Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// declares \"modelValue\" prop, consumed by parent via v-model\nconst model = defineModel()\n// OR: declares \"modelValue\" prop with options\nconst model = defineModel({ type: String })\n\n// emits \"update:modelValue\" when mutated\nmodel.value = 'hello'\n\n// declares \"count\" prop, consumed by parent via v-model:count\nconst count = defineModel('count')\n// OR: declares \"count\" prop with options\nconst count = defineModel('count', { type: Number, default: 0 })\n\nfunction inc() {\n  // emits \"update:count\" when mutated\n  count.value++\n}"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "v-for with Object in Vue.js (Composition API)",
    "codeDescription": "Demonstrates how to use v-for with an object in the Composition API. It creates a reactive object with multiple properties.",
    "codeLanguage": "javascript",
    "codeTokens": 72,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#2025-04-08_snippet_7",
    "pageTitle": "List Rendering in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const myObject = reactive({\n  title: 'How to do lists in Vue',\n  author: 'Jane Doe',\n  publishedAt: '2016-04-10'\n})"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Resolving Components by Name with Options API",
    "codeDescription": "Example of using resolveComponent() to manually resolve a registered component by name when using the Options API. This must be called within the render function to resolve from the correct component context.",
    "codeLanguage": "JavaScript",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/render-function.md#2025-04-08_snippet_6",
    "pageTitle": "Render Function APIs in Vue.js",
    "codeList": [
      {
        "language": "JavaScript",
        "code": "import { h, resolveComponent } from 'vue'\n\nexport default {\n  render() {\n    const ButtonCounter = resolveComponent('ButtonCounter')\n    return h(ButtonCounter)\n  }\n}"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Dynamic Node Tracking Example in Vue Template",
    "codeDescription": "Demonstrates how Vue tracks dynamic nodes within a template block. Shows the structure of a template with both static and dynamic elements, where only elements with bindings are tracked.",
    "codeLanguage": "vue-html",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Rendering Mechanism Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div> <!-- root block -->\n  <div>...</div>         <!-- not tracked -->\n  <div :id=\"id\"></div>   <!-- tracked -->\n  <div>                  <!-- not tracked -->\n    <div>{{ bar }}</div> <!-- tracked -->\n  </div>\n</div>"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Error Captured Hook Type Definition",
    "codeDescription": "Type definition for the onErrorCaptured hook that handles errors from descendant components.",
    "codeLanguage": "typescript",
    "codeTokens": 59,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Composition API Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "type ErrorCapturedHook = (\n  err: unknown,\n  instance: ComponentPublicInstance | null,\n  info: string\n) => boolean | void"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Applying Transition on Initial Render in Vue",
    "codeDescription": "This snippet shows how to apply a transition on the initial render of a node in Vue by adding the 'appear' prop to the Transition component.",
    "codeLanguage": "vue",
    "codeTokens": 49,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_16",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition appear>\n  ...\n</Transition>"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Implementing Scoped CSS in Vue.js SFC",
    "codeDescription": "Demonstrates how scoped CSS is transformed in Vue.js Single File Components. The scoped attribute on the style tag ensures CSS only applies to the current component's elements.",
    "codeLanguage": "vue",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#2025-04-08_snippet_0",
    "pageTitle": "SFC CSS Features in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<style scoped>\n.example {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\">hi</div>\n</template>"
      },
      {
        "language": "vue",
        "code": "<style>\n.example[data-v-f3f3eg9] {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\" data-v-f3f3eg9>hi</div>\n</template>"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Configuring Custom Element with Options",
    "codeDescription": "Example showing how to pass configuration options separately when defining a custom element using the second argument of defineCustomElement().",
    "codeLanguage": "javascript",
    "codeTokens": 61,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/custom-elements.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Custom Elements API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import Element from './MyElement.ce.vue'\n\ndefineCustomElement(Element, {\n  configureApp(app) {\n    // ...\n  }\n})"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Using nextTick in Options API for DOM Updates",
    "codeDescription": "Demonstrates how to use the nextTick function in Options API to ensure DOM updates have completed after state changes before executing additional code.",
    "codeLanguage": "javascript",
    "codeTokens": 83,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_9",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { nextTick } from 'vue'\n\nexport default {\n  methods: {\n    async increment() {\n      this.count++\n      await nextTick()\n      // Now the DOM is updated\n    }\n  }\n}"
      }
    ],
    "relevance": 0.81
  },
  {
    "codeTitle": "Incorrect Component Structure in Composition API",
    "codeDescription": "Example of poorly formatted component structure using Composition API. The example shows props definition and computed properties without proper spacing.",
    "codeLanguage": "javascript",
    "codeTokens": 106,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-recommended.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Style Guide: Priority C Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "defineProps({\n  value: {\n    type: String,\n    required: true\n  },\n  focused: {\n    type: Boolean,\n    default: false\n  },\n  label: String,\n  icon: String\n})\nconst formattedValue = computed(() => {\n  // ...\n})\nconst inputClasses = computed(() => {\n  // ...\n})"
      }
    ],
    "relevance": 0.808
  },
  {
    "codeTitle": "Example Todo List Data in Options API",
    "codeDescription": "Example of a todo list data structure in Vue.js Options API that would be used with v-for directives, demonstrating the data that should be keyed properly.",
    "codeLanguage": "js",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Style Guide: Essential Rules",
    "codeList": [
      {
        "language": "js",
        "code": "data() {\n  return {\n    todos: [\n      {\n        id: 1,\n        text: 'Learn to use v-for'\n      },\n      {\n        id: 2,\n        text: 'Learn to use key'\n      }\n    ]\n  }\n}"
      }
    ],
    "relevance": 0.808
  },
  {
    "codeTitle": "Defining Data Object with Nested Array in Vue Options API",
    "codeDescription": "This snippet shows how to define a data object with a nested array in the Options API of Vue.js. It creates an author object with a name and a list of books.",
    "codeLanguage": "javascript",
    "codeTokens": 108,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#2025-04-08_snippet_0",
    "pageTitle": "Computed Properties in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      author: {\n        name: 'John Doe',\n        books: [\n          'Vue 2 - Advanced Guide',\n          'Vue 3 - Basic Guide',\n          'Vue 4 - The Mystery'\n        ]\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.808
  },
  {
    "codeTitle": "Creating a Readonly Proxy",
    "codeDescription": "Example of using readonly() to create a readonly proxy of a reactive object.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_6",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const original = reactive({ count: 0 })\n\nconst copy = readonly(original)\n\nwatchEffect(() => {\n  console.log(copy.count)\n})\n\noriginal.count++\n\ncopy.count++ // warning!"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "v-else-if Chaining Example",
    "codeDescription": "Demonstrates how to chain multiple conditions using v-if, v-else-if, and v-else directives.",
    "codeLanguage": "vue",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Conditional Rendering Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div v-if=\"type === 'A'\">\n  A\n</div>\n<div v-else-if=\"type === 'B'\">\n  B\n</div>\n<div v-else-if=\"type === 'C'\">\n  C\n</div>\n<div v-else>\n  Not A/B/C\n</div>"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Defining a Button with Empty Slot",
    "codeDescription": "Basic implementation of a submit button component with an empty slot that will render whatever content the parent provides.",
    "codeLanguage": "vue-html",
    "codeTokens": 45,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<button type=\"submit\">\n  <slot></slot>\n</button>"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Using ref Attribute with a Function in Vue.js",
    "codeDescription": "Demonstrates how to use the ref attribute with a function value, providing full control over where to store the reference. This can be used with child components.",
    "codeLanguage": "vue-html",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#2025-04-08_snippet_4",
    "pageTitle": "Built-in Special Attributes in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ChildComponent :ref=\"(el) => child = el\" />"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Integrating Immer with Vue for Immutable State Management",
    "codeDescription": "Shows how to create a composable function that integrates Immer with Vue's reactivity system. This allows for immutable state updates while maintaining a mutable syntax.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/reactivity-in-depth.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Reactivity System Deep Dive",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { produce } from 'immer'\nimport { shallowRef } from 'vue'\n\nexport function useImmer(baseState) {\n  const state = shallowRef(baseState)\n  const update = (updater) => {\n    state.value = produce(state.value, updater)\n  }\n\n  return [state, update]\n}"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Good Implementation: Multi-word Component Names in Vue.js",
    "codeDescription": "Examples of correctly named Vue components using multiple words, which prevents conflicts with existing and future HTML elements.",
    "codeLanguage": "vue-html",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Style Guide: Essential Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- in pre-compiled templates -->\n<TodoItem />\n\n<!-- in in-DOM templates -->\n<todo-item></todo-item>"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Good Implementation: Detailed Prop Definitions in Composition API",
    "codeDescription": "Examples of properly defined props in Vue.js Composition API, specifying types and validation rules, which improves documentation and error catching.",
    "codeLanguage": "js",
    "codeTokens": 49,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Style Guide: Essential Rules",
    "codeList": [
      {
        "language": "js",
        "code": "const props = defineProps({\n  status: String\n})"
      },
      {
        "language": "js",
        "code": "// Even better!\n\nconst props = defineProps({\n  status: {\n    type: String,\n    required: true,\n\n    validator: (value) => {\n      return ['syncing', 'synced', 'version-conflict', 'error'].includes(\n        value\n      )\n    }\n  }\n})"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Specifying Explicit Transition Duration in Vue.js",
    "codeDescription": "This example shows how to set an explicit transition duration for nested transitions in Vue.js. It uses the duration prop to specify the total animation time in milliseconds.",
    "codeLanguage": "vue-html",
    "codeTokens": 52,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_10",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition :duration=\"550\">...</Transition>"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Using Computed Property in Vue Composition API",
    "codeDescription": "This snippet demonstrates how to use a computed property in the Composition API of Vue.js. It creates a computed ref that checks if the author has published books.",
    "codeLanguage": "vue",
    "codeTokens": 163,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#2025-04-08_snippet_3",
    "pageTitle": "Computed Properties in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { reactive, computed } from 'vue'\n\nconst author = reactive({\n  name: 'John Doe',\n  books: [\n    'Vue 2 - Advanced Guide',\n    'Vue 3 - Basic Guide',\n    'Vue 4 - The Mystery'\n  ]\n})\n\n// a computed ref\nconst publishedBooksMessage = computed(() => {\n  return author.books.length > 0 ? 'Yes' : 'No'\n})\n</script>\n\n<template>\n  <p>Has published books:</p>\n  <span>{{ publishedBooksMessage }}</span>\n</template>"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Using mounted Hook in Vue.js Options API (HTML)",
    "codeDescription": "This code shows how to use the mounted lifecycle hook in a Vue.js application using the Options API in an HTML file. It defines a mounted method in the createApp options.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#2025-04-08_snippet_5",
    "pageTitle": "Lifecycle and Template Refs in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "createApp({\n  mounted() {\n    // component is now mounted.\n  }\n})"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Using v-bind Shorthand Syntax in Vue.js",
    "codeDescription": "The shorthand syntax for v-bind directive, which uses a colon followed by the attribute name. This example binds the id attribute to the dynamicId property from component state.",
    "codeLanguage": "vue-html",
    "codeTokens": 56,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-3/description.md#2025-04-08_snippet_1",
    "pageTitle": "Attribute Bindings in Vue.js Templates",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :id=\"dynamicId\"></div>"
      }
    ],
    "relevance": 0.805
  },
  {
    "codeTitle": "Vue.js Dynamic Directive Arguments Basic Usage",
    "codeDescription": "Demonstrates how to use dynamic arguments in v-bind directive using square bracket syntax. Shows both full syntax and shorthand notation for dynamic attribute binding.",
    "codeLanguage": "vue-html",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/template-syntax.md#2025-04-08_snippet_15",
    "pageTitle": "Vue.js Template Syntax",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!--\nNote that there are some constraints to the argument expression,\nas explained in the \"Dynamic Argument Value Constraints\" and \"Dynamic Argument Syntax Constraints\" sections below.\n-->\n<a v-bind:[attributeName]=\"url\"> ... </a>\n\n<!-- shorthand -->\n<a :[attributeName]=\"url\"> ... </a>"
      }
    ],
    "relevance": 0.803
  },
  {
    "codeTitle": "Binding to a Style Object in Vue.js",
    "codeDescription": "Shows how to bind an entire style object to an element.",
    "codeLanguage": "vue-html",
    "codeTokens": 35,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_25",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div :style=\"styleObject\"></div>"
      }
    ],
    "relevance": 0.802
  },
  {
    "codeTitle": "Component File Organization - Good Practice (JavaScript)",
    "codeDescription": "Example showing the recommended approach of organizing components in separate JavaScript files, making it easier to locate and work with individual components.",
    "codeLanguage": "plaintext",
    "codeTokens": 49,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "plaintext",
        "code": "components/\n|- TodoList.js\n|- TodoItem.js"
      }
    ],
    "relevance": 0.802
  },
  {
    "codeTitle": "Basic Inject Usage",
    "codeDescription": "Simple example showing how to inject a value provided by an ancestor component.",
    "codeLanguage": "javascript",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Component Options Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  inject: ['foo'],\n  created() {\n    console.log(this.foo)\n  }\n}"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Adding a Button to Child Component Template",
    "codeDescription": "This snippet demonstrates adding a button to the BlogPost component that will be used to emit events to the parent component.",
    "codeLanguage": "vue",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_19",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- BlogPost.vue, omitting <script> -->\n<template>\n  <div class=\"blog-post\">\n    <h4>{{ title }}</h4>\n    <button>Enlarge text</button>\n  </div>\n</template>"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Declaring Methods with Options API",
    "codeDescription": "Shows how to declare and use methods in Vue.js components using the Options API, including proper this binding and lifecycle hook usage.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    increment() {\n      this.count++\n    }\n  },\n  mounted() {\n    // methods can be called in lifecycle hooks, or other methods!\n    this.increment()\n  }\n}"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Writable Computed Property with Previous Value in Options API (Vue.js)",
    "codeDescription": "Illustrates a writable computed property that can access its previous value using the Options API in Vue.js. The getter returns the value of count when it's less than or equal to 3, otherwise it returns the previous value. The setter updates count by doubling the new value.",
    "codeLanguage": "javascript",
    "codeTokens": 145,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#2025-04-08_snippet_10",
    "pageTitle": "Computed Properties in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      count: 2\n    }\n  },\n  computed: {\n    alwaysSmall: {\n      get(previous) {\n        if (this.count <= 3) {\n          return this.count\n        }\n\n        return previous;\n      },\n      set(newValue) {\n        this.count = newValue * 2\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Good Implementation: Using Computed Property with v-for in Vue.js",
    "codeDescription": "Example of correctly using a computed property to filter items before iterating with v-for, which solves the issue of using v-if with v-for.",
    "codeLanguage": "vue-html",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Style Guide: Essential Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ul>\n  <li\n    v-for=\"user in activeUsers\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  </li>\n</ul>"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Typing Component Emits in Vue.js with TypeScript",
    "codeDescription": "Shows various ways to type component emits using defineEmits() in a Vue.js component with TypeScript.",
    "codeLanguage": "vue",
    "codeTokens": 210,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#2025-04-08_snippet_9",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\n// runtime\nconst emit = defineEmits(['change', 'update'])\n\n// options based\nconst emit = defineEmits({\n  change: (id: number) => {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  },\n  update: (value: string) => {\n    // return `true` or `false` to indicate\n    // validation pass / fail\n  }\n})\n\n// type-based\nconst emit = defineEmits<{\n  (e: 'change', id: number): void\n  (e: 'update', value: string): void\n}>()\n\n// 3.3+: alternative, more succinct syntax\nconst emit = defineEmits<{\n  change: [id: number]\n  update: [value: string]\n}>()\n</script>"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Checking if a Value is Reactive with isReactive() in TypeScript",
    "codeDescription": "The isReactive() function checks if an object is a proxy created by reactive() or shallowReactive().",
    "codeLanguage": "typescript",
    "codeTokens": 43,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-utilities.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Reactivity API Utilities",
    "codeList": [
      {
        "language": "typescript",
        "code": "function isReactive(value: unknown): boolean"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Handling Various Input Types in Composables",
    "codeDescription": "Shows how to use the toValue utility function to handle different types of input arguments (refs, getters, or raw values) in a composable function.",
    "codeLanguage": "javascript",
    "codeTokens": 107,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#2025-04-08_snippet_9",
    "pageTitle": "Composables in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { toValue } from 'vue'\n\nfunction useFeature(maybeRefOrGetter) {\n  // If maybeRefOrGetter is a ref or a getter,\n  // its normalized value will be returned.\n  // Otherwise, it is returned as-is.\n  const value = toValue(maybeRefOrGetter)\n}"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Creating a Mount Container in HTML",
    "codeDescription": "Defines an HTML element that will serve as the container where the Vue application will be mounted. The app's content will be rendered inside this element.",
    "codeLanguage": "html",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#2025-04-08_snippet_2",
    "pageTitle": "Creating a Vue Application",
    "codeList": [
      {
        "language": "html",
        "code": "<div id=\"app\"></div>"
      }
    ],
    "relevance": 0.8
  },
  {
    "codeTitle": "Basic v-if Usage in Vue.js",
    "codeDescription": "Demonstrates basic conditional rendering using v-if directive to show/hide content based on a boolean value.",
    "codeLanguage": "vue",
    "codeTokens": 46,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/conditional.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Conditional Rendering Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<h1 v-if=\"awesome\">Vue is awesome!</h1>"
      }
    ],
    "relevance": 0.799
  },
  {
    "codeTitle": "Parent-Child Communication - Bad Practice (Options API)",
    "codeDescription": "Shows improper parent-child component communication using direct prop mutation and this.$parent access.",
    "codeLanguage": "javascript",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Priority D Style Guide Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.component('TodoItem', {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n\n  template: '<input v-model=\"todo.text\">'\n})"
      },
      {
        "language": "javascript",
        "code": "app.component('TodoItem', {\n  props: {\n    todo: {\n      type: Object,\n      required: true\n    }\n  },\n\n  methods: {\n    removeTodo() {\n      this.$parent.todos = this.$parent.todos.filter(\n        (todo) => todo.id !== vm.todo.id\n      )\n    }\n  },\n\n  template: `\n    <span>\n      {{ todo.text }}\n      <button @click=\"removeTodo\">\n        ×\n      </button>\n    </span>\n  `\n})"
      }
    ],
    "relevance": 0.798
  },
  {
    "codeTitle": "Initializing Vue App with ES Modules (Options API)",
    "codeDescription": "This snippet demonstrates how to set up a basic Vue application using ES modules with the Options API. It imports Vue from a CDN and creates an app with a simple data property.",
    "codeLanguage": "html",
    "codeTokens": 115,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Quick Start Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>"
      }
    ],
    "relevance": 0.798
  },
  {
    "codeTitle": "Configuring Vue.js Compile-Time Flags in Webpack",
    "codeDescription": "Example showing how to set Vue.js compile-time flags in a webpack configuration using DefinePlugin. This configuration explicitly sets values for Options API support, devtools in production, and hydration mismatch details.",
    "codeLanguage": "javascript",
    "codeTokens": 115,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/compile-time-flags.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Compile-Time Flags Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// webpack.config.js\nmodule.exports = {\n  // ...\n  plugins: [\n    new webpack.DefinePlugin({\n      __VUE_OPTIONS_API__: 'true',\n      __VUE_PROD_DEVTOOLS__: 'false',\n      __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: 'false'\n    })\n  ]\n}"
      }
    ],
    "relevance": 0.796
  },
  {
    "codeTitle": "Using toRaw in JavaScript",
    "codeDescription": "Example demonstrating how toRaw can be used to access the original object from a reactive proxy, which is useful for operations that should bypass reactivity.",
    "codeLanguage": "javascript",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#2025-04-08_snippet_12",
    "pageTitle": "Vue.js Reactivity API - Advanced",
    "codeList": [
      {
        "language": "javascript",
        "code": "const foo = {}\nconst reactiveFoo = reactive(foo)\n\nconsole.log(toRaw(reactiveFoo) === foo) // true"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Component HTML Usage with Kebab Case",
    "codeDescription": "Shows how to use kebab-case syntax when referencing components and props in HTML templates.",
    "codeLanguage": "vue",
    "codeTokens": 54,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_30",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- kebab-case in HTML -->\n<blog-post post-title=\"hello!\" @update-post=\"onUpdatePost\"></blog-post>"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Defining Nullable Required Prop in Vue.js Options API",
    "codeDescription": "This snippet shows how to define a required prop that can also be null in Vue.js Options API.",
    "codeLanguage": "javascript",
    "codeTokens": 59,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_38",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: {\n    id: {\n      type: [String, null],\n      required: true\n    }\n  }\n}"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Mixins Example",
    "codeDescription": "Demonstration of using mixins to combine component logic, showing hook execution order.",
    "codeLanguage": "javascript",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Component Options Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const mixin = {\n  created() {\n    console.log(1)\n  }\n}\n\ncreateApp({\n  created() {\n    console.log(2)\n  },\n  mixins: [mixin]\n})"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Good Implementation: Scoped Attribute for Component Styling in Vue.js",
    "codeDescription": "Example of correctly implementing component styling using the scoped attribute, which ensures styles only apply to the component they are defined in.",
    "codeLanguage": "vue-html",
    "codeTokens": 94,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#2025-04-08_snippet_16",
    "pageTitle": "Vue.js Style Guide: Essential Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<template>\n  <button class=\"button button-close\">×</button>\n</template>\n\n<!-- Using the `scoped` attribute -->\n<style scoped>\n.button {\n  border: none;\n  border-radius: 2px;\n}\n\n.button-close {\n  background-color: red;\n}\n</style>"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Incorrect Single-File Component Structure in Vue.js",
    "codeDescription": "Examples of poorly ordered element structure in Single-File Components, with inconsistent ordering of script, template, and style tags across components.",
    "codeLanguage": "vue",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-recommended.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Style Guide: Priority C Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<style>/* ... */</style>\n<script>/* ... */</script>\n<template>...</template>"
      },
      {
        "language": "vue-html",
        "code": "<!-- ComponentA.vue -->\n<script>/* ... */</script>\n<template>...</template>\n<style>/* ... */</style>\n\n<!-- ComponentB.vue -->\n<template>...</template>\n<script>/* ... */</script>\n<style>/* ... */</style>"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Emitting Events with Options API in Vue.js",
    "codeDescription": "This snippet illustrates how to declare and emit events using the Options API in a Vue.js component. It uses the emits option to declare events and the this.$emit() method to trigger them within the component's lifecycle hooks or methods.",
    "codeLanguage": "js",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/description.md#2025-04-08_snippet_2",
    "pageTitle": "Emitting Events in Vue.js Components",
    "codeList": [
      {
        "language": "js",
        "code": "export default {\n  // declare emitted events\n  emits: ['response'],\n  created() {\n    // emit with argument\n    this.$emit('response', 'hello from child')\n  }\n}"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Setting Up Import Maps for Vue.js",
    "codeDescription": "This snippet demonstrates how to use import maps to simplify Vue imports. It sets up an import map for Vue and then uses a simplified import statement in the script.",
    "codeLanguage": "html",
    "codeTokens": 139,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/quick-start.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Quick Start Guide",
    "codeList": [
      {
        "language": "html",
        "code": "<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"\n    }\n  }\n</script>\n\n<div id=\"app\">{{ message }}</div>\n\n<script type=\"module\">\n  import { createApp } from 'vue'\n\n  createApp({\n    data() {\n      return {\n        message: 'Hello Vue!'\n      }\n    }\n  }).mount('#app')\n</script>"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Using onMounted with Template Ref Example",
    "codeDescription": "Example showing how to access a DOM element using template ref within the onMounted hook.",
    "codeLanguage": "vue",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-lifecycle.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Composition API Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, onMounted } from 'vue'\n\nconst el = ref()\n\nonMounted(() => {\n  el.value // <div>\n})\n</script>\n\n<template>\n  <div ref=\"el\"></div>\n</template>"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Using src Attribute with Custom Blocks in Vue SFC",
    "codeDescription": "Shows how to use the src attribute with a custom block (unit-test) to import an external file in a Vue SFC.",
    "codeLanguage": "vue",
    "codeTokens": 56,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-spec.md#2025-04-08_snippet_5",
    "pageTitle": "Vue Single-File Component (SFC) Syntax Specification",
    "codeList": [
      {
        "language": "vue",
        "code": "<unit-test src=\"./unit-test.js\">\n</unit-test>"
      }
    ],
    "relevance": 0.795
  },
  {
    "codeTitle": "Script Setup Syntax Example",
    "codeDescription": "Shows the simplified syntax using <script setup> in Single-File Components, demonstrating reactive state and method declarations.",
    "codeLanguage": "vue",
    "codeTokens": 89,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/reactivity-fundamentals.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Reactivity and Methods Implementation Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n\nfunction increment() {\n  count.value++\n}\n</script>\n\n<template>\n  <button @click=\"increment\">\n    {{ count }}\n  </button>\n</template>"
      }
    ],
    "relevance": 0.793
  },
  {
    "codeTitle": "Implementing Event Handler Method with Composition API in HTML",
    "codeDescription": "Shows how to implement the increment function using the Composition API with setup() function. It demonstrates creating a reactive count state with ref and returning both the state and methods to be used in the template.",
    "codeLanguage": "js",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Event Listeners",
    "codeList": [
      {
        "language": "js",
        "code": "setup() {\n  const count = ref(0)\n\n  function increment(e) {\n    // update component state\n    count.value++\n  }\n\n  return {\n    count,\n    increment\n  }\n}"
      }
    ],
    "relevance": 0.793
  },
  {
    "codeTitle": "Declaring Generic Type Parameters in Vue.js Component",
    "codeDescription": "This snippet demonstrates how to declare generic type parameters using the `generic` attribute on the <script> tag in a Vue.js component. It defines props with a generic type T for an array of items and a selected item.",
    "codeLanguage": "vue",
    "codeTokens": 85,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-script-setup.md#2025-04-08_snippet_14",
    "pageTitle": "Vue.js Script Setup Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\" generic=\"T\">\ndefineProps<{\n  items: T[]\n  selected: T\n}>()\n</script>"
      }
    ],
    "relevance": 0.792
  },
  {
    "codeTitle": "Defining beforeUnmount Hook Interface",
    "codeDescription": "TypeScript interface for the beforeUnmount lifecycle hook that runs before component unmounting.",
    "codeLanguage": "typescript",
    "codeTokens": 44,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  beforeUnmount?(this: ComponentPublicInstance): void\n}"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Using Child Component (Composition API)",
    "codeDescription": "Shows how to import and use a child component with Composition API's script setup syntax.",
    "codeLanguage": "vue",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/component-basics.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Components Basics Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport ButtonCounter from './ButtonCounter.vue'\n</script>\n\n<template>\n  <h1>Here is a child component!</h1>\n  <ButtonCounter />\n</template>"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Multiple Type Props with Boolean in Composition API",
    "codeDescription": "Shows how type prioritization affects Boolean casting in Composition API when a prop allows multiple types. The order of types in the array determines the casting behavior.",
    "codeLanguage": "javascript",
    "codeTokens": 127,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_42",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// disabled will be casted to true\ndefineProps({\n  disabled: [Boolean, Number]\n})\n\n// disabled will be casted to true\ndefineProps({\n  disabled: [Boolean, String]\n})\n\n// disabled will be casted to true\ndefineProps({\n  disabled: [Number, Boolean]\n})\n\n// disabled will be parsed as an empty string (disabled=\"\")\ndefineProps({\n  disabled: [String, Boolean]\n})"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Setting up Vue Component for Error Code Reference",
    "codeDescription": "Initializes a Vue component that displays error code references. It imports necessary Vue composables, error data, and a custom ErrorsTable component. On mount, it extracts the error ID from the URL hash to highlight a specific error in the table.",
    "codeLanguage": "vue",
    "codeTokens": 121,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/error-reference/index.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Error Code Reference - Setup and Display",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref, onMounted } from 'vue'\nimport { data } from './errors.data.ts'\nimport ErrorsTable from './ErrorsTable.vue'\n\nconst highlight = ref()\nonMounted(() => {\n  highlight.value = location.hash.slice(1)\n})\n</script>"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Implementing Accessible Buttons in Vue.js Forms",
    "codeDescription": "This example shows how to create accessible buttons within a form, including setting the correct button types to prevent unintended form submission. It demonstrates both button and input elements used as buttons.",
    "codeLanguage": "vue-html",
    "codeTokens": 122,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#2025-04-08_snippet_10",
    "pageTitle": "Accessibility Implementation Guide for Vue.js Applications",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<form action=\"/dataCollectionLocation\" method=\"post\" autocomplete=\"on\">\n  <!-- Buttons -->\n  <button type=\"button\">Cancel</button>\n  <button type=\"submit\">Submit</button>\n\n  <!-- Input buttons -->\n  <input type=\"button\" value=\"Cancel\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Tightly Coupled Component Names - Good Practice",
    "codeDescription": "Examples of correctly named related components that clearly indicate their parent-child relationships through naming prefixes.",
    "codeLanguage": "plaintext",
    "codeTokens": 48,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_11",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "plaintext",
        "code": "components/\n|- TodoList.vue\n|- TodoListItem.vue\n|- TodoListItemButton.vue"
      },
      {
        "language": "plaintext",
        "code": "components/\n|- SearchSidebar.vue\n|- SearchSidebarNavigation.vue"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Creating a Reusable Vue Transition Component",
    "codeDescription": "This snippet demonstrates how to create a reusable transition component in Vue. It wraps the built-in Transition component and passes down slot content and event handlers.",
    "codeLanguage": "vue",
    "codeTokens": 142,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_15",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- MyTransition.vue -->\n<script>\n// JavaScript hooks logic...\n</script>\n\n<template>\n  <!-- wrap the built-in Transition component -->\n  <Transition\n    name=\"my-transition\"\n    @enter=\"onEnter\"\n    @leave=\"onLeave\">\n    <slot></slot> <!-- pass down slot content -->\n  </Transition>\n</template>\n\n<style>\n/*\n  Necessary CSS...\n  Note: avoid using <style scoped> here since it\n  does not apply to slot content.\n*/\n</style>"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Implementing Event Handler Method with Options API in SFC",
    "codeDescription": "Shows how to implement the increment method using the Options API in a Single File Component. The method updates the component state by incrementing the count property.",
    "codeLanguage": "js",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Event Listeners",
    "codeList": [
      {
        "language": "js",
        "code": "export default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    increment() {\n      // update component state\n      this.count++\n    }\n  }\n}"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Disabling Attribute Inheritance with defineOptions in Vue 3.3+",
    "codeDescription": "Shows how to disable automatic attribute inheritance using the defineOptions method in script setup in Vue 3.3 and above.",
    "codeLanguage": "vue",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Fallthrough Attributes Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\ndefineOptions({\n  inheritAttrs: false\n})\n// ...setup logic\n</script>"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Configuring Custom Element Recognition in Vue CLI",
    "codeDescription": "Setting up Vue CLI configuration to recognize custom elements by configuring webpack rules to treat tags starting with 'ion-' as custom elements.",
    "codeLanguage": "javascript",
    "codeTokens": 125,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/web-components.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Integration with Web Components",
    "codeList": [
      {
        "language": "javascript",
        "code": "// vue.config.js\nmodule.exports = {\n  chainWebpack: (config) => {\n    config.module\n      .rule('vue')\n      .use('vue-loader')\n      .tap((options) => ({\n        ...options,\n        compilerOptions: {\n          // treat any tag that starts with ion- as custom elements\n          isCustomElement: (tag) => tag.startsWith('ion-')\n        }\n      }))\n  }\n}"
      }
    ],
    "relevance": 0.79
  },
  {
    "codeTitle": "Rendering Vue App to Node.js Stream using renderToNodeStream",
    "codeDescription": "Example of using renderToNodeStream to render a Vue SSR app to a Node.js Readable stream and piping it to a response object.",
    "codeLanguage": "javascript",
    "codeTokens": 59,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/ssr.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Server-Side Rendering API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// inside a Node.js http handler\nrenderToNodeStream(app).pipe(res)"
      }
    ],
    "relevance": 0.788
  },
  {
    "codeTitle": "Using v-if and v-else for Conditional Branches in Vue.js",
    "codeDescription": "This example shows how to use v-if and v-else together to create a conditional rendering with two possible outcomes. When 'awesome' is truthy, the first h1 is shown; otherwise, the second h1 is displayed.",
    "codeLanguage": "vue-html",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-6/description.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Conditional Rendering",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<h1 v-if=\"awesome\">Vue is awesome!</h1>\n<h1 v-else>Oh no 😢</h1>"
      }
    ],
    "relevance": 0.788
  },
  {
    "codeTitle": "Using Async Data Fetching Composable in Vue Component",
    "codeDescription": "This snippet shows how to use the async data fetching composable in a Vue component.",
    "codeLanguage": "vue",
    "codeTokens": 56,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/composables.md#2025-04-08_snippet_7",
    "pageTitle": "Composables in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { useFetch } from './fetch.js'\n\nconst { data, error } = useFetch('...')\n</script>"
      }
    ],
    "relevance": 0.787
  },
  {
    "codeTitle": "Using a Custom Directive in Vue Template",
    "codeDescription": "Example of using a custom directive (v-focus) in a Vue template to automatically focus an input element.",
    "codeLanguage": "vue-html",
    "codeTokens": 39,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Component Options: Miscellaneous Configuration",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input v-focus>"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Registering SFC Components Globally",
    "codeDescription": "Shows how to globally register imported Single File Components (.vue files) in a Vue application.",
    "codeLanguage": "javascript",
    "codeTokens": 46,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/registration.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Component Registration Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import MyComponent from './App.vue'\n\napp.component('MyComponent', MyComponent)"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Implementing Async Setup with Script Setup",
    "codeDescription": "Example of a component using <script setup> with top-level await expressions, which automatically makes it an async dependency for Suspense.",
    "codeLanguage": "vue",
    "codeTokens": 68,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/suspense.md#2025-04-08_snippet_2",
    "pageTitle": "Suspense Component in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst res = await fetch(...)\nconst posts = await res.json()\n</script>\n\n<template>\n  {{ posts }}\n</template>"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Compiled Vue Render Function with Patch Flags",
    "codeDescription": "Example of compiled render function code showing patch flags for optimized updates.",
    "codeLanguage": "javascript",
    "codeTokens": 53,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Rendering Mechanism Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "createElementVNode(\"div\", {\n  class: _normalizeClass({ active: _ctx.active })\n}, null, 2 /* CLASS */)"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Order of Words in Component Names - Bad Practice",
    "codeDescription": "Example of poorly organized component names that don't follow the highest-level-first naming convention, making it difficult to find related components.",
    "codeLanguage": "plaintext",
    "codeTokens": 76,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_12",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "plaintext",
        "code": "components/\n|- ClearSearchButton.vue\n|- ExcludeFromSearchInput.vue\n|- LaunchOnStartupCheckbox.vue\n|- RunSearchButton.vue\n|- SearchInput.vue\n|- TermsCheckbox.vue"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Configuring Watch Options in Vue.js",
    "codeDescription": "Example demonstrating how to configure advanced options for watch() including flush timing and debugging triggers with onTrack and onTrigger callbacks.",
    "codeLanguage": "js",
    "codeTokens": 70,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_16",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "watch(source, callback, {\n  flush: 'post',\n  onTrack(e) {\n    debugger\n  },\n  onTrigger(e) {\n    debugger\n  }\n})"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Using Exact Modifier in Vue Event Handlers",
    "codeDescription": "Demonstrates the .exact modifier usage to control precise combinations of system modifiers in Vue.js events. Shows different scenarios for handling Ctrl key combinations and standalone clicks.",
    "codeLanguage": "vue-html",
    "codeTokens": 119,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/event-handling.md#2025-04-08_snippet_8",
    "pageTitle": "Event Handling in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- this will fire even if Alt or Shift is also pressed -->\n<button @click.ctrl=\"onClick\">A</button>\n\n<!-- this will only fire when Ctrl and no other keys are pressed -->\n<button @click.ctrl.exact=\"onCtrlClick\">A</button>\n\n<!-- this will only fire when no system modifiers are pressed -->\n<button @click.exact=\"onClick\">A</button>"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Updating Lists using Options API in Vue.js",
    "codeDescription": "Shows how to update a list using the Options API approach, demonstrating both pushing new items and filtering the array.",
    "codeLanguage": "javascript",
    "codeTokens": 39,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-7/description.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js List Rendering Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "this.todos.push(newTodo)"
      },
      {
        "language": "javascript",
        "code": "this.todos = this.todos.filter(/* ... */)"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "TypeScript Interface Definition for Provide Option",
    "codeDescription": "Type definition for the provide option in Vue.js component options, allowing components to provide values for dependency injection.",
    "codeLanguage": "typescript",
    "codeTokens": 52,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Component Options Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  provide?: object | ((this: ComponentPublicInstance) => object)\n}"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Using SSR Context with renderToString",
    "codeDescription": "Example showing how to use the optional context object with renderToString to capture additional data during rendering, such as Teleport content.",
    "codeLanguage": "javascript",
    "codeTokens": 71,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/ssr.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Server-Side Rendering API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "const ctx = {}\nconst html = await renderToString(app, ctx)\n\nconsole.log(ctx.teleports) // { '#teleported': 'teleported content' }"
      }
    ],
    "relevance": 0.785
  },
  {
    "codeTitle": "Multi-Attribute Elements in Vue.js Templates",
    "codeDescription": "Demonstrates the proper formatting of elements with multiple attributes, placing each attribute on a separate line for improved readability.",
    "codeLanguage": "vue-html",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_19",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<img\n  src=\"https://vuejs.org/images/logo.png\"\n  alt=\"Vue Logo\"\n>"
      },
      {
        "language": "vue-html",
        "code": "<MyComponent\n  foo=\"a\"\n  bar=\"b\"\n  baz=\"c\"\n/>"
      }
    ],
    "relevance": 0.784
  },
  {
    "codeTitle": "Creating App with Computed Property",
    "codeDescription": "Shows how to define a computed property within createApp using Options API.",
    "codeLanguage": "javascript",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Computed Properties Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "createApp({\n  // ...\n  computed: {\n    filteredTodos() {\n      // return filtered todos based on `this.hideCompleted`\n    }\n  }\n})"
      }
    ],
    "relevance": 0.783
  },
  {
    "codeTitle": "Type Definition of onScopeDispose in Vue.js",
    "codeDescription": "TypeScript type definition for onScopeDispose() which registers a callback to be called when the current effect scope is stopped.",
    "codeLanguage": "typescript",
    "codeTokens": 53,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#2025-04-08_snippet_19",
    "pageTitle": "Vue.js Reactivity API - Advanced",
    "codeList": [
      {
        "language": "typescript",
        "code": "function onScopeDispose(fn: () => void, failSilently?: boolean): void"
      }
    ],
    "relevance": 0.782
  },
  {
    "codeTitle": "Vue Template with Static Content Caching",
    "codeDescription": "Example of a Vue template showing static content that can be cached by the compiler for performance optimization.",
    "codeLanguage": "html",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Rendering Mechanism Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<div>\n  <div>foo</div> <!-- cached -->\n  <div>bar</div> <!-- cached -->\n  <div>{{ dynamic }}</div>\n</div>"
      }
    ],
    "relevance": 0.781
  },
  {
    "codeTitle": "Vue Component inject() Example",
    "codeDescription": "Example demonstrating various ways to use inject() in a Vue component, including static values, reactive values, and default values.",
    "codeLanguage": "vue",
    "codeTokens": 159,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-dependency-injection.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Dependency Injection Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { inject } from 'vue'\nimport { countSymbol } from './injectionSymbols'\n\n// inject static value without default\nconst path = inject('path')\n\n// inject reactive value\nconst count = inject('count')\n\n// inject with Symbol keys\nconst count2 = inject(countSymbol)\n\n// inject with default value\nconst bar = inject('path', '/default-path')\n\n// inject with function default value\nconst fn = inject('function', () => {})\n\n// inject with default value factory\nconst baz = inject('factory', () => new ExpensiveObject(), true)\n</script>"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Pre Vue 3.4 Composition API Approach for v-model Modifiers",
    "codeDescription": "Using defineProps and defineEmits for handling v-model modifiers with arguments in Vue 3 before the 3.4 version introduced defineModel.",
    "codeLanguage": "vue",
    "codeTokens": 123,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_19",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst props = defineProps({\nfirstName: String,\nlastName: String,\nfirstNameModifiers: { default: () => ({}) },\nlastNameModifiers: { default: () => ({}) }\n})\ndefineEmits(['update:firstName', 'update:lastName'])\n\nconsole.log(props.firstNameModifiers) // { capitalize: true }\nconsole.log(props.lastNameModifiers) // { uppercase: true }\n</script>"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Handling Side Effect Cleanup in watchEffect()",
    "codeDescription": "Example of using the onCleanup function in watchEffect() to handle side effect cleanup for asynchronous operations.",
    "codeLanguage": "javascript",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_9",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "watchEffect(async (onCleanup) => {\n  const { response, cancel } = doAsyncWork(newId)\n  // `cancel` will be called if `id` changes, cancelling\n  // the previous request if it hasn't completed yet\n  onCleanup(cancel)\n  data.value = await response\n})"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Piping Vue App to Web WritableStream using pipeToWebWritable",
    "codeDescription": "Example of using pipeToWebWritable with a TransformStream to render a Vue SSR app and return it as a Response.",
    "codeLanguage": "javascript",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/ssr.md#2025-04-08_snippet_10",
    "pageTitle": "Vue.js Server-Side Rendering API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "// TransformStream is available in environments such as CloudFlare workers.\n// in Node.js, TransformStream needs to be explicitly imported from 'stream/web'\nconst { readable, writable } = new TransformStream()\npipeToWebWritable(app, {}, writable)\n\nreturn new Response(readable)"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Parent-Child Communication - Bad Practice (Composition API)",
    "codeDescription": "Shows improper parent-child component communication in Composition API using direct prop mutation and parent instance access.",
    "codeLanguage": "vue",
    "codeTokens": 74,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Priority D Style Guide Rules",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\ndefineProps({\n  todo: {\n    type: Object,\n    required: true\n  }\n})\n</script>\n\n<template>\n  <input v-model=\"todo.text\" />\n</template>"
      },
      {
        "language": "vue",
        "code": "<script setup>\nimport { getCurrentInstance } from 'vue'\n\nconst props = defineProps({\n  todo: {\n    type: Object,\n    required: true\n  }\n})\n\nconst instance = getCurrentInstance()\n\nfunction removeTodo() {\n  const parent = instance.parent\n  if (!parent) return\n\n  parent.props.todos = parent.props.todos.filter((todo) => {\n    return todo.id !== props.todo.id\n  })\n}\n</script>\n\n<template>\n  <span>\n    {{ todo.text }}\n    <button @click=\"removeTodo\">×</button>\n  </span>\n</template>"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Compiler Transformation of Destructured Props",
    "codeDescription": "Demonstrates how Vue's compiler automatically prepends 'props.' when accessing destructured prop variables, maintaining reactivity in watchEffect or other reactive contexts.",
    "codeLanguage": "js",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "const props = defineProps(['foo'])\n\nwatchEffect(() => {\n  // `foo` transformed to `props.foo` by the compiler\n  console.log(props.foo)\n})"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Listening to Child Component Events in Vue.js SFC",
    "codeDescription": "This snippet shows how to listen to events emitted by a child component in a Vue.js Single File Component. It uses the v-on directive (@ shorthand) to bind an event listener that receives the emitted event's argument and assigns it to a local state variable.",
    "codeLanguage": "vue-html",
    "codeTokens": 79,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-13/description.md#2025-04-08_snippet_3",
    "pageTitle": "Emitting Events in Vue.js Components",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ChildComp @response=\"(msg) => childMsg = msg\" />"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Implementing Nested Transitions in Vue.js",
    "codeDescription": "This snippet demonstrates how to create nested transitions in Vue.js using CSS selectors. It includes a delay for the inner element to create a staggered animation effect.",
    "codeLanguage": "vue-html",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_9",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition name=\"nested\">\n  <div v-if=\"show\" class=\"outer\">\n    <div class=\"inner\">\n      Hello\n    </div>\n  </div>\n</Transition>"
      },
      {
        "language": "css",
        "code": "/* rules that target nested elements */\n.nested-enter-active .inner,\n.nested-leave-active .inner {\n  transition: all 0.3s ease-in-out;\n}\n\n.nested-enter-from .inner,\n.nested-leave-to .inner {\n  transform: translateX(30px);\n  opacity: 0;\n}\n\n/* delay enter of nested element for staggered effect */\n.nested-enter-active .inner {\n  transition-delay: 0.25s;\n}"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Rendering Block Creation in Vue.js",
    "codeDescription": "Shows how Vue.js creates the root element block for template rendering using createElementBlock. The code demonstrates the basic structure of a compiled template's render function.",
    "codeLanguage": "javascript",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/rendering-mechanism.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Rendering Mechanism Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export function render() {\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    /* children */\n  ], 64 /* STABLE_FRAGMENT */))\n}"
      }
    ],
    "relevance": 0.78
  },
  {
    "codeTitle": "Component Template Refs with Dynamic Components",
    "codeDescription": "Shows how to type template refs when working with dynamic components, using InstanceType utility.",
    "codeLanguage": "vue",
    "codeTokens": 131,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#2025-04-08_snippet_20",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<!-- App.vue -->\n<script setup lang=\"ts\">\nimport { useTemplateRef } from 'vue'\nimport Foo from './Foo.vue'\nimport Bar from './Bar.vue'\n\ntype FooType = InstanceType<typeof Foo>\ntype BarType = InstanceType<typeof Bar>\n\nconst compRef = useTemplateRef<FooType | BarType>('comp')\n</script>\n\n<template>\n  <component :is=\"Math.random() > 0.5 ? Foo : Bar\" ref=\"comp\" />\n</template>"
      }
    ],
    "relevance": 0.778
  },
  {
    "codeTitle": "Defining toRaw Type in TypeScript",
    "codeDescription": "Type definition for the toRaw function that returns the original object from a Vue-created reactive or readonly proxy.",
    "codeLanguage": "typescript",
    "codeTokens": 44,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#2025-04-08_snippet_11",
    "pageTitle": "Vue.js Reactivity API - Advanced",
    "codeList": [
      {
        "language": "typescript",
        "code": "function toRaw<T>(proxy: T): T"
      }
    ],
    "relevance": 0.778
  },
  {
    "codeTitle": "Importing Vue.js Without Build Step",
    "codeDescription": "This snippet shows how to properly import Vue.js in a script when working without a build step. It demonstrates importing Vue from the ESM bundler distribution.",
    "codeLanguage": "javascript",
    "codeTokens": 56,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-1/description.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Tutorial Introduction",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { ... } from 'vue/dist/vue.esm-bundler.js'"
      }
    ],
    "relevance": 0.778
  },
  {
    "codeTitle": "Using shallowReadonly in JavaScript",
    "codeDescription": "Example showing the use of shallowReadonly where only the top-level properties are made readonly. Nested objects remain mutable.",
    "codeLanguage": "javascript",
    "codeTokens": 100,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#2025-04-08_snippet_10",
    "pageTitle": "Vue.js Reactivity API - Advanced",
    "codeList": [
      {
        "language": "javascript",
        "code": "const state = shallowReadonly({\n  foo: 1,\n  nested: {\n    bar: 2\n  }\n})\n\n// mutating state's own properties will fail\nstate.foo++\n\n// ...but works on nested objects\nisReadonly(state.nested) // false\n\n// works\nstate.nested.bar++"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Passing Props to Named Slots in Vue.js",
    "codeDescription": "Shows how to pass props to a named slot from the component's template. The slot name is reserved and not included in the props object.",
    "codeLanguage": "vue-html",
    "codeTokens": 50,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_17",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<slot name=\"header\" message=\"hello\"></slot>"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Accessing Props in setup()",
    "codeDescription": "Shows how to access and work with component props within the setup() function. Props are reactive and will update when changed.",
    "codeLanguage": "javascript",
    "codeTokens": 65,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-setup.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js setup() Composition API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: {\n    title: String\n  },\n  setup(props) {\n    console.log(props.title)\n  }\n}"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Using src Attribute for External Files in Vue SFC",
    "codeDescription": "Shows how to use the src attribute to import external files for template, style, and script blocks in a Vue SFC.",
    "codeLanguage": "vue",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-spec.md#2025-04-08_snippet_3",
    "pageTitle": "Vue Single-File Component (SFC) Syntax Specification",
    "codeList": [
      {
        "language": "vue",
        "code": "<template src=\"./template.html\"></template>\n<style src=\"./style.css\"></style>\n<script src=\"./script.js\"></script>"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Accessing Previous Computed Value in Options API (Vue.js)",
    "codeDescription": "Demonstrates how to access the previous value of a computed property using the Options API in Vue.js. This example shows a computed property that returns the value of count when it's less than or equal to 3, otherwise it returns the previous value.",
    "codeLanguage": "javascript",
    "codeTokens": 171,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#2025-04-08_snippet_8",
    "pageTitle": "Computed Properties in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      count: 2\n    }\n  },\n  computed: {\n    // This computed will return the value of count when it's less or equal to 3.\n    // When count is >=4, the last value that fulfilled our condition will be returned\n    // instead until count is less or equal to 3\n    alwaysSmall(_, previous) {\n      if (this.count <= 3) {\n        return this.count\n      }\n\n      return previous\n    }\n  }\n}"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Importing and Registering Child Component in Vue.js (Options API)",
    "codeDescription": "This snippet shows how to import and register a child component in a Vue.js application using the Options API approach. It includes both the import statement and the component registration in the export default object.",
    "codeLanguage": "javascript",
    "codeTokens": 72,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-11/description.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Component Usage Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "import ChildComp from './ChildComp.vue'\n\nexport default {\n  components: {\n    ChildComp\n  }\n}"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Defining shallowReactive Type in TypeScript",
    "codeDescription": "Type definition for the shallowReactive function that creates a reactive proxy that tracks reactivity only for root-level properties.",
    "codeLanguage": "typescript",
    "codeTokens": 49,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Reactivity API - Advanced",
    "codeList": [
      {
        "language": "typescript",
        "code": "function shallowReactive<T extends object>(target: T): T"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Basic Dynamic Component Usage",
    "codeDescription": "Example of using dynamic components with the special component element.",
    "codeLanguage": "vue-html",
    "codeTokens": 32,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js KeepAlive Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<component :is=\"activeComponent\" />"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Configuring Vite for Vue.js Without Build Step",
    "codeDescription": "This code configures Vite to use the correct Vue.js distribution when working without a build step. It sets up an alias to resolve 'vue' to the ESM bundler version.",
    "codeLanguage": "javascript",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-1/description.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Tutorial Introduction",
    "codeList": [
      {
        "language": "javascript",
        "code": "// vite.config.js\nexport default {\n  resolve: {\n    alias: {\n      vue: 'vue/dist/vue.esm-bundler.js'\n    }\n  }\n}"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Using Centralized State Mutation in Vue Template",
    "codeDescription": "This snippet demonstrates how to use a centralized state mutation method in a Vue template. It calls the store's increment method on button click.",
    "codeLanguage": "vue",
    "codeTokens": 65,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#2025-04-08_snippet_6",
    "pageTitle": "State Management in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<template>\n  <button @click=\"store.increment()\">\n    From B: {{ store.count }}\n  </button>\n</template>"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Configuring Vite for Vitest in Vue.js Projects",
    "codeDescription": "This code snippet demonstrates how to update the Vite configuration file to add the test option block for Vitest. It enables jest-like global test APIs and simulates DOM with happy-dom.",
    "codeLanguage": "JavaScript",
    "codeTokens": 118,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "// vite.config.js\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  // ...\n  test: {\n    // enable jest-like global test APIs\n    globals: true,\n    // simulate DOM with happy-dom\n    // (requires installing happy-dom as a peer dependency)\n    environment: 'happy-dom'\n  }\n})"
      }
    ],
    "relevance": 0.775
  },
  {
    "codeTitle": "Implementing Asynchronous Component Loading in Vue.js",
    "codeDescription": "Defines a Vue.js component that asynchronously loads a TutorialRepl component with a loading placeholder. It uses defineAsyncComponent for efficient loading.",
    "codeLanguage": "vue",
    "codeTokens": 109,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/index.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Tutorial Page Configuration",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nimport { defineAsyncComponent } from 'vue'\nimport ReplLoading from '@theme/components/ReplLoading.vue'\n\nexport default {\n  components: {\n    TutorialRepl: defineAsyncComponent({\n      loader: () => import('./TutorialRepl.vue'),\n      loadingComponent: ReplLoading\n    })\n  }\n}\n</script>"
      }
    ],
    "relevance": 0.773
  },
  {
    "codeTitle": "Using v-model with Value Bindings in Vue.js Forms",
    "codeDescription": "Examples of using v-model with radio buttons, checkboxes, and select options, showing basic value binding patterns. These examples demonstrate how v-model assigns values based on user input.",
    "codeLanguage": "vue-html",
    "codeTokens": 133,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/forms.md#2025-04-08_snippet_12",
    "pageTitle": "Vue.js Form Input Bindings Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- `picked` is a string \"a\" when checked -->\n<input type=\"radio\" v-model=\"picked\" value=\"a\" />\n\n<!-- `toggle` is either true or false -->\n<input type=\"checkbox\" v-model=\"toggle\" />\n\n<!-- `selected` is a string \"abc\" when the first option is selected -->\n<select v-model=\"selected\">\n  <option value=\"abc\">ABC</option>\n</select>"
      }
    ],
    "relevance": 0.772
  },
  {
    "codeTitle": "Using triggerRef in JavaScript",
    "codeDescription": "Example demonstrating how triggerRef can be used to manually trigger reactivity after making deep changes to the value of a shallow ref.",
    "codeLanguage": "javascript",
    "codeTokens": 118,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Reactivity API - Advanced",
    "codeList": [
      {
        "language": "javascript",
        "code": "const shallow = shallowRef({\n  greet: 'Hello, world'\n})\n\n// Logs \"Hello, world\" once for the first run-through\nwatchEffect(() => {\n  console.log(shallow.value.greet)\n})\n\n// This won't trigger the effect because the ref is shallow\nshallow.value.greet = 'Hello, universe'\n\n// Logs \"Hello, universe\"\ntriggerRef(shallow)"
      }
    ],
    "relevance": 0.772
  },
  {
    "codeTitle": "Rendering the ApiIndex Component",
    "codeDescription": "Renders the imported ApiIndex component which contains the actual API reference documentation content. This is a self-closing custom component tag following Vue.js component usage syntax.",
    "codeLanguage": "vue",
    "codeTokens": 46,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/index.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js API Reference Documentation",
    "codeList": [
      {
        "language": "vue",
        "code": "<ApiIndex />"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Rendered DOM Output of Slots in Vue.js",
    "codeDescription": "Shows the final HTML output when a slot is rendered, demonstrating how the parent content is inserted into the child component's template.",
    "codeLanguage": "html",
    "codeTokens": 48,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "html",
        "code": "<button class=\"fancy-btn\">Click me!</button>"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Dependency Injection Examples",
    "codeDescription": "Examples showing how to provide and inject values in Vue applications.",
    "codeLanguage": "javascript",
    "codeTokens": 50,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Application API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp(/* ... */)\n\napp.provide('message', 'hello')"
      },
      {
        "language": "javascript",
        "code": "import { inject } from 'vue'\n\nexport default {\n  setup() {\n    console.log(inject('message')) // 'hello'\n  }\n}"
      },
      {
        "language": "javascript",
        "code": "export default {\n  inject: ['message'],\n  created() {\n    console.log(this.message) // 'hello'\n  }\n}"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Eager Watchers in Composition API",
    "codeDescription": "Demonstrates creating a watcher that executes immediately in Composition API using the immediate: true option, useful for initial data fetching.",
    "codeLanguage": "javascript",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#2025-04-08_snippet_12",
    "pageTitle": "Vue.js Watchers",
    "codeList": [
      {
        "language": "javascript",
        "code": "watch(\n  source,\n  (newValue, oldValue) => {\n    // executed immediately, then again when `source` changes\n  },\n  { immediate: true }\n)"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Setting Up Component State in setup() Function (Vue.js HTML Build)",
    "codeDescription": "Demonstrates how to declare and expose reactive state in the HTML build of Vue.js using the `setup()` function. The example shows how to make reactive objects and refs available to the template by returning them from setup().",
    "codeLanguage": "javascript",
    "codeTokens": 91,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-2/description.md#2025-04-08_snippet_2",
    "pageTitle": "Declarative Rendering in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "setup() {\n  const counter = reactive({ count: 0 })\n  const message = ref('Hello World!')\n  return {\n    counter,\n    message\n  }\n}"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "KeepAlive Include/Exclude Patterns",
    "codeDescription": "Examples of using include and exclude props with different pattern formats.",
    "codeLanguage": "vue-html",
    "codeTokens": 119,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/keep-alive.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js KeepAlive Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- comma-delimited string -->\n<KeepAlive include=\"a,b\">\n  <component :is=\"view\" />\n</KeepAlive>\n\n<!-- regex (use `v-bind`) -->\n<KeepAlive :include=\"/a|b/\">\n  <component :is=\"view\" />\n</KeepAlive>\n\n<!-- Array (use `v-bind`) -->\n<KeepAlive :include=\"['a', 'b']\">\n  <component :is=\"view\" />\n</KeepAlive>"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Implementing Basic State Management in Vue 2 Options API",
    "codeDescription": "This snippet shows a simple counter component using Vue 2's Options API. It illustrates how state, view, and actions are managed within a single component.",
    "codeLanguage": "vue",
    "codeTokens": 103,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/state-management.md#2025-04-08_snippet_1",
    "pageTitle": "State Management in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nexport default {\n  // state\n  data() {\n    return {\n      count: 0\n    }\n  },\n  // actions\n  methods: {\n    increment() {\n      this.count++\n    }\n  }\n}\n</script>\n\n<!-- view -->\n<template>{{ count }}</template>"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Accessing Fallthrough Attributes in Vue Templates",
    "codeDescription": "Demonstrates how to access and display fallthrough attributes directly in a Vue template using the $attrs object.",
    "codeLanguage": "vue-html",
    "codeTokens": 46,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/attrs.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Fallthrough Attributes Guide",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<span>Fallthrough attributes: {{ $attrs }}</span>"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Bad Implementation: Single-word Component Names in Vue.js",
    "codeDescription": "Examples of incorrectly named Vue components using single words, which could conflict with existing HTML elements. This pattern should be avoided.",
    "codeLanguage": "vue-html",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Style Guide: Essential Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- in pre-compiled templates -->\n<Item />\n\n<!-- in in-DOM templates -->\n<item></item>"
      }
    ],
    "relevance": 0.77
  },
  {
    "codeTitle": "Rendering Filtered Results from a Method in Nested v-for Loops",
    "codeDescription": "Demonstrates how to render filtered array results using a method inside nested v-for loops. This pattern is useful when computed properties aren't feasible.",
    "codeLanguage": "vue-html",
    "codeTokens": 67,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/list.md#2025-04-08_snippet_19",
    "pageTitle": "List Rendering in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<ul v-for=\"numbers in sets\">\n  <li v-for=\"n in even(numbers)\">{{ n }}</li>\n</ul>"
      }
    ],
    "relevance": 0.769
  },
  {
    "codeTitle": "Augmenting Component Custom Properties in Vue.js",
    "codeDescription": "Shows how to use ComponentCustomProperties to augment the component instance type to support custom global properties. This example adds $http and $translate properties to the component instance.",
    "codeLanguage": "typescript",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Utility Types Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import axios from 'axios'\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $http: typeof axios\n    $translate: (key: string) => string\n  }\n}"
      }
    ],
    "relevance": 0.768
  },
  {
    "codeTitle": "Basic JSX Usage in Vue",
    "codeDescription": "Shows basic examples of JSX syntax in Vue, including static content and dynamic values using curly braces.",
    "codeLanguage": "jsx",
    "codeTokens": 42,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#2025-04-08_snippet_12",
    "pageTitle": "Render Functions & JSX in Vue.js",
    "codeList": [
      {
        "language": "jsx",
        "code": "const vnode = <div>hello</div>"
      },
      {
        "language": "jsx",
        "code": "const vnode = <div id={dynamicId}>hello, {userName}</div>"
      }
    ],
    "relevance": 0.768
  },
  {
    "codeTitle": "Implementing Computed in Component Setup",
    "codeDescription": "Demonstrates how to use computed properties within the setup function using Composition API.",
    "codeLanguage": "javascript",
    "codeTokens": 109,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-8/description.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Computed Properties Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp, ref, computed } from 'vue'\n\ncreateApp({\n  setup() {\n    const hideCompleted = ref(false)\n    const todos = ref([\n      /* ... */\n    ])\n\n    const filteredTodos = computed(() => {\n      // return filtered todos based on\n      // `todos.value` & `hideCompleted.value`\n    })\n\n    return {\n      // ...\n    }\n  }\n})"
      }
    ],
    "relevance": 0.766
  },
  {
    "codeTitle": "Registering Custom Directives in Vue.js",
    "codeDescription": "Example of defining a custom focus directive that automatically focuses an element when mounted, registered via the directives option.",
    "codeLanguage": "js",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#2025-04-08_snippet_7",
    "pageTitle": "Vue.js Component Options: Miscellaneous Configuration",
    "codeList": [
      {
        "language": "js",
        "code": "export default {\n  directives: {\n    // enables v-focus in template\n    focus: {\n      mounted(el) {\n        el.focus()\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.765
  },
  {
    "codeTitle": "Demonstrating Readonly Props in Vue.js Options API",
    "codeDescription": "This snippet shows that props are readonly in Vue.js Options API. Attempting to mutate a prop directly in the created hook will result in a warning.",
    "codeLanguage": "javascript",
    "codeTokens": 73,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_27",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  props: ['foo'],\n  created() {\n    // ❌ warning, props are readonly!\n    this.foo = 'bar'\n  }\n}"
      }
    ],
    "relevance": 0.765
  },
  {
    "codeTitle": "Global Directive Registration Example",
    "codeDescription": "Example showing how to register and retrieve custom directives in a Vue application.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/application.md#2025-04-08_snippet_10",
    "pageTitle": "Vue.js Application API Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp({\n  /* ... */\n})\n\n// register (object directive)\napp.directive('myDirective', {\n  /* custom directive hooks */\n})\n\n// register (function directive shorthand)\napp.directive('myDirective', () => {\n  /* ... */\n})\n\n// retrieve a registered directive\nconst myDirective = app.directive('myDirective')"
      }
    ],
    "relevance": 0.765
  },
  {
    "codeTitle": "Using the Grid Component with External Data in Vue.js",
    "codeDescription": "This snippet shows how to use the previously defined grid component with external data. It demonstrates data binding, column definition, and search functionality.",
    "codeLanguage": "vue",
    "codeTokens": 231,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/examples/src/grid/description.txt#2025-04-08_snippet_1",
    "pageTitle": "Creating a Reusable Grid Component in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<template>\n  <div id=\"demo\">\n    <form id=\"search\">\n      Search <input name=\"query\" v-model=\"searchQuery\">\n    </form>\n    <demo-grid\n      :data=\"gridData\"\n      :columns=\"gridColumns\"\n      :filter-key=\"searchQuery\">\n    </demo-grid>\n  </div>\n</template>\n\n<script>\nimport DemoGrid from './Grid.vue'\n\nexport default {\n  components: {\n    DemoGrid\n  },\n  data() {\n    return {\n      searchQuery: '',\n      gridColumns: ['name', 'power'],\n      gridData: [\n        { name: 'Chuck Norris', power: Infinity },\n        { name: 'Bruce Lee', power: 9000 },\n        { name: 'Jackie Chan', power: 7000 },\n        { name: 'Jet Li', power: 8000 }\n      ]\n    }\n  }\n}\n</script>"
      }
    ],
    "relevance": 0.765
  },
  {
    "codeTitle": "Implementing Event Handler Method with Options API in HTML",
    "codeDescription": "Shows how to implement the increment method using the Options API with createApp. The method updates the component state by incrementing the count property.",
    "codeLanguage": "js",
    "codeTokens": 82,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-4/description.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Event Listeners",
    "codeList": [
      {
        "language": "js",
        "code": "createApp({\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    increment() {\n      // update component state\n      this.count++\n    }\n  }\n})"
      }
    ],
    "relevance": 0.765
  },
  {
    "codeTitle": "Using PropType for Advanced Prop Type Annotations in Vue.js",
    "codeDescription": "Demonstrates how to use PropType to annotate a prop with more advanced types when using runtime props declarations. This example shows how to define a Book interface and use it with PropType.",
    "codeLanguage": "typescript",
    "codeTokens": 117,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/utility-types.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Utility Types Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "import type { PropType } from 'vue'\n\ninterface Book {\n  title: string\n  author: string\n  year: number\n}\n\nexport default {\n  props: {\n    book: {\n      // provide more specific type to `Object`\n      type: Object as PropType<Book>,\n      required: true\n    }\n  }\n}"
      }
    ],
    "relevance": 0.765
  },
  {
    "codeTitle": "Defining Async Component with Dynamic Import in Vue.js",
    "codeDescription": "Shows how to use defineAsyncComponent with ES module dynamic import to create an async component. This approach is commonly used with bundlers like Vite and webpack for code splitting.",
    "codeLanguage": "javascript",
    "codeTokens": 75,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#2025-04-08_snippet_1",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { defineAsyncComponent } from 'vue'\n\nconst AsyncComp = defineAsyncComponent(() =>\n  import('./components/MyComponent.vue')\n)"
      }
    ],
    "relevance": 0.765
  },
  {
    "codeTitle": "Typing Named Functional Component in Vue.js with TypeScript",
    "codeDescription": "Implementation of a named functional component with TypeScript type definitions. Demonstrates proper typing of props, context, and event handlers using SetupContext type from Vue.",
    "codeLanguage": "tsx",
    "codeTokens": 174,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#2025-04-08_snippet_24",
    "pageTitle": "Render Functions & JSX in Vue.js",
    "codeList": [
      {
        "language": "tsx",
        "code": "import type { SetupContext } from 'vue'\ntype FComponentProps = {\n  message: string\n}\n\ntype Events = {\n  sendMessage(message: string): void\n}\n\nfunction FComponent(\n  props: FComponentProps,\n  context: SetupContext<Events>\n) {\n  return (\n    <button onClick={() => context.emit('sendMessage', props.message)}>\n        {props.message} {' '}\n    </button>\n  )\n}\n\nFComponent.props = {\n  message: {\n    type: String,\n    required: true\n  }\n}\n\nFComponent.emits = {\n  sendMessage: (value: unknown) => typeof value === 'string'\n}"
      }
    ],
    "relevance": 0.765
  },
  {
    "codeTitle": "Using Component with Empty Slot in Vue.js",
    "codeDescription": "Demonstrates using a component with a slot without providing any content, which will cause the fallback content to be rendered.",
    "codeLanguage": "vue-html",
    "codeTokens": 37,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<SubmitButton />"
      }
    ],
    "relevance": 0.765
  },
  {
    "codeTitle": "Styling Visually Hidden Elements for Accessibility in CSS",
    "codeDescription": "This CSS snippet provides a technique for visually hiding elements while keeping them accessible to assistive technologies. It uses absolute positioning and other properties to achieve this effect.",
    "codeLanguage": "css",
    "codeTokens": 113,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/accessibility.md#2025-04-08_snippet_9",
    "pageTitle": "Accessibility Implementation Guide for Vue.js Applications",
    "codeList": [
      {
        "language": "css",
        "code": ".hidden-visually {\n  position: absolute;\n  overflow: hidden;\n  white-space: nowrap;\n  margin: 0;\n  padding: 0;\n  height: 1px;\n  width: 1px;\n  clip: rect(0 0 0 0);\n  clip-path: inset(100%);\n}"
      }
    ],
    "relevance": 0.765
  },
  {
    "codeTitle": "Using CSS Modules with Composition API",
    "codeDescription": "Demonstrates how to use CSS Modules with Vue.js Composition API. The useCssModule function is used to access the injected classes in the setup function or <script setup>.",
    "codeLanguage": "vue",
    "codeTokens": 107,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#2025-04-08_snippet_4",
    "pageTitle": "SFC CSS Features in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup lang=\"ts\">\nimport { useCssModule } from 'vue'\n\nconst classes = useCssModule()\n</script>\n\n<template>\n  <p :class=\"classes.red\">red</p>\n</template>\n\n<style module>\n.red {\n  color: red;\n}\n</style>"
      }
    ],
    "relevance": 0.763
  },
  {
    "codeTitle": "Returning Multiple Nodes from Options API Render Function in Vue",
    "codeDescription": "Shows how to return multiple nodes as an array from a render function using Vue's Options API.",
    "codeLanguage": "javascript",
    "codeTokens": 81,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#2025-04-08_snippet_8",
    "pageTitle": "Render Functions & JSX in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { h } from 'vue'\n\nexport default {\n  render() {\n    // use an array to return multiple root nodes\n    return [\n      h('div'),\n      h('div'),\n      h('div')\n    ]\n  }\n}"
      }
    ],
    "relevance": 0.763
  },
  {
    "codeTitle": "Implementing Emits with Array Syntax in Vue.js",
    "codeDescription": "JavaScript example showing how to use the emits option with array syntax to declare custom events. This simple form lists event names that the component can emit.",
    "codeLanguage": "javascript",
    "codeTokens": 64,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#2025-04-08_snippet_11",
    "pageTitle": "Vue.js Component Options State Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  emits: ['check'],\n  created() {\n    this.$emit('check')\n  }\n}"
      }
    ],
    "relevance": 0.762
  },
  {
    "codeTitle": "useId Type Definition",
    "codeDescription": "Type definition for useId helper function that generates unique-per-application IDs.",
    "codeLanguage": "typescript",
    "codeTokens": 31,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-helpers.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Composition API Helpers Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function useId(): string"
      }
    ],
    "relevance": 0.76
  },
  {
    "codeTitle": "Invalid Duplicate VNodes Example in Vue",
    "codeDescription": "Demonstrates an invalid render function that incorrectly uses the same vnode in multiple places.",
    "codeLanguage": "javascript",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#2025-04-08_snippet_10",
    "pageTitle": "Render Functions & JSX in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "function render() {\n  const p = h('p', 'hi')\n  return h('div', [\n    // Yikes - duplicate vnodes!\n    p,\n    p\n  ])\n}"
      }
    ],
    "relevance": 0.76
  },
  {
    "codeTitle": "Transition Component Props Interface",
    "codeDescription": "TypeScript interface defining all available props for the Transition component, including animation control and CSS class customization options.",
    "codeLanguage": "typescript",
    "codeTokens": 152,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-components.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Built-in Components Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface TransitionProps {\n  name?: string\n  css?: boolean\n  type?: 'transition' | 'animation'\n  duration?: number | { enter: number; leave: number }\n  mode?: 'in-out' | 'out-in' | 'default'\n  appear?: boolean\n  enterFromClass?: string\n  enterActiveClass?: string\n  enterToClass?: string\n  appearFromClass?: string\n  appearActiveClass?: string\n  appearToClass?: string\n  leaveFromClass?: string\n  leaveActiveClass?: string\n  leaveToClass?: string\n}"
      }
    ],
    "relevance": 0.76
  },
  {
    "codeTitle": "Providing Data with Symbol Key in Vue.js Composition API",
    "codeDescription": "This snippet shows how to use a Symbol as an injection key when providing data in a Vue.js component using the Composition API. It imports the Symbol from a separate file and uses it with the provide function.",
    "codeLanguage": "javascript",
    "codeTokens": 90,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#2025-04-08_snippet_14",
    "pageTitle": "Provide/Inject in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "// in provider component\nimport { provide } from 'vue'\nimport { myInjectionKey } from './keys.js'\n\nprovide(myInjectionKey, {\n  /* data to provide */\n})"
      }
    ],
    "relevance": 0.76
  },
  {
    "codeTitle": "Flexible Usage of h() Function in Vue",
    "codeDescription": "Shows various ways to use the h() function with different combinations of arguments and props configurations.",
    "codeLanguage": "javascript",
    "codeTokens": 284,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/extras/render-function.md#2025-04-08_snippet_1",
    "pageTitle": "Render Functions & JSX in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "// all arguments except the type are optional\nh('div')\nh('div', { id: 'foo' })\n\n// both attributes and properties can be used in props\n// Vue automatically picks the right way to assign it\nh('div', { class: 'bar', innerHTML: 'hello' })\n\n// props modifiers such as `.prop` and `.attr` can be added\n// with `.` and `^` prefixes respectively\nh('div', { '.name': 'some-name', '^width': '100' })\n\n// class and style have the same object / array\n// value support that they have in templates\nh('div', { class: [foo, { bar }], style: { color: 'red' } })\n\n// event listeners should be passed as onXxx\nh('div', { onClick: () => {} })\n\n// children can be a string\nh('div', { id: 'foo' }, 'hello')\n\n// props can be omitted when there are no props\nh('div', 'hello')\nh('div', [h('span', 'hello')])\n\n// children array can contain mixed vnodes and strings\nh('div', ['hello', h('span', 'hello')])"
      }
    ],
    "relevance": 0.76
  },
  {
    "codeTitle": "Creating Two-Way Binding with v-bind and v-on in Vue.js",
    "codeDescription": "This snippet shows how to create a two-way binding on an input element using v-bind for value binding and v-on for event handling. It demonstrates the basic approach before introducing v-model.",
    "codeLanguage": "vue-html",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/description.md#2025-04-08_snippet_0",
    "pageTitle": "Form Bindings in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input :value=\"text\" @input=\"onInput\">"
      }
    ],
    "relevance": 0.76
  },
  {
    "codeTitle": "Typing ref() in Vue.js with TypeScript",
    "codeDescription": "Shows how to type ref() with inferred and explicit types in Vue.js using TypeScript.",
    "codeLanguage": "typescript",
    "codeTokens": 105,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#2025-04-08_snippet_11",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { ref } from 'vue'\nimport type { Ref } from 'vue'\n\n// inferred type: Ref<number>\nconst year = ref(2020)\n\n// explicit type\nconst year: Ref<string | number> = ref('2020')\n\n// generic argument\nconst year = ref<string | number>('2020')\n\n// undefined type\nconst n = ref<number>()"
      }
    ],
    "relevance": 0.76
  },
  {
    "codeTitle": "Using Custom Transition Classes with Animate.css in Vue.js",
    "codeDescription": "This example shows how to use custom transition classes in Vue.js to integrate with external CSS animation libraries like Animate.css. It overrides the default class names for enter and leave animations.",
    "codeLanguage": "vue-html",
    "codeTokens": 111,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- assuming Animate.css is included on the page -->\n<Transition\n  name=\"custom-classes\"\n  enter-active-class=\"animate__animated animate__tada\"\n  leave-active-class=\"animate__animated animate__bounceOutRight\"\n>\n  <p v-if=\"show\">hello</p>\n</Transition>"
      }
    ],
    "relevance": 0.76
  },
  {
    "codeTitle": "Testing Vue Component with Cypress",
    "codeDescription": "Shows how to test a Stepper component using Cypress component testing. Validates component rendering and interaction through clicks.",
    "codeLanguage": "javascript",
    "codeTokens": 121,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/scaling-up/testing.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Testing Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "const valueSelector = '[data-testid=stepper-value]'\nconst buttonSelector = '[data-testid=increment]'\n\nmount(Stepper, {\n  props: {\n    max: 1\n  }\n})\n\ncy.get(valueSelector)\n  .should('be.visible')\n  .and('contain.text', '0')\n  .get(buttonSelector)\n  .click()\n  .get(valueSelector)\n  .should('contain.text', '1')"
      }
    ],
    "relevance": 0.76
  },
  {
    "codeTitle": "Computed Properties Type Definition",
    "codeDescription": "TypeScript interface definitions for Vue component computed properties, including getter and setter options.",
    "codeLanguage": "typescript",
    "codeTokens": 132,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-state.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Component Options State Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  computed?: {\n    [key: string]: ComputedGetter<any> | WritableComputedOptions<any>\n  }\n}\n\ntype ComputedGetter<T> = (\n  this: ComponentPublicInstance,\n  vm: ComponentPublicInstance\n) => T\n\ntype ComputedSetter<T> = (\n  this: ComponentPublicInstance,\n  value: T\n) => void\n\ntype WritableComputedOptions<T> = {\n  get: ComputedGetter<T>\n  set: ComputedSetter<T>\n}"
      }
    ],
    "relevance": 0.758
  },
  {
    "codeTitle": "Basic TransitionGroup List Animation in Vue",
    "codeDescription": "Example of applying enter/leave transitions to a v-for list using TransitionGroup component. Shows basic list item animations with opacity and transform effects.",
    "codeLanguage": "vue-html",
    "codeTokens": 77,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition-group.md#2025-04-08_snippet_0",
    "pageTitle": "Vue TransitionGroup Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<TransitionGroup name=\"list\" tag=\"ul\">\n  <li v-for=\"item in items\" :key=\"item\">\n    {{ item }}\n  </li>\n</TransitionGroup>"
      },
      {
        "language": "css",
        "code": ".list-enter-active,\n.list-leave-active {\n  transition: all 0.5s ease;\n}\n.list-enter-from,\n.list-leave-to {\n  opacity: 0;\n  transform: translateX(30px);\n}"
      }
    ],
    "relevance": 0.758
  },
  {
    "codeTitle": "Rendering Elements Conditionally with v-if in Vue.js",
    "codeDescription": "This snippet demonstrates how to use the v-if directive to conditionally render an h1 element based on the truthiness of the 'awesome' variable. When 'awesome' is truthy, the element appears in the DOM; when falsy, it's removed.",
    "codeLanguage": "vue-html",
    "codeTokens": 78,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-6/description.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Conditional Rendering",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<h1 v-if=\"awesome\">Vue is awesome!</h1>"
      }
    ],
    "relevance": 0.757
  },
  {
    "codeTitle": "Setting up Vue.js API Reference Page with Frontmatter Configuration",
    "codeDescription": "Defines the page configuration using Markdown frontmatter, setting the title to 'API Reference' and configuring various page display options including disabling the sidebar and footer.",
    "codeLanguage": "markdown",
    "codeTokens": 60,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/index.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js API Reference Documentation",
    "codeList": [
      {
        "language": "markdown",
        "code": "---\ntitle: API Reference\nsidebar: false\npage: true\nfooter: false\n---"
      }
    ],
    "relevance": 0.755
  },
  {
    "codeTitle": "Implementing JavaScript Hooks for Vue Transitions (Options API)",
    "codeDescription": "This snippet demonstrates how to implement JavaScript hooks for Vue transitions using the Options API. It defines methods for each transition lifecycle event within the component's methods object.",
    "codeLanguage": "javascript",
    "codeTokens": 313,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "export default {\n  // ...\n  methods: {\n    // called before the element is inserted into the DOM.\n    // use this to set the \"enter-from\" state of the element\n    onBeforeEnter(el) {},\n\n    // called one frame after the element is inserted.\n    // use this to start the animation.\n    onEnter(el, done) {\n      // call the done callback to indicate transition end\n      // optional if used in combination with CSS\n      done()\n    },\n\n    // called when the enter transition has finished.\n    onAfterEnter(el) {},\n\n    // called when the enter transition is cancelled before completion.\n    onEnterCancelled(el) {},\n\n    // called before the leave hook.\n    // Most of the time, you should just use the leave hook.\n    onBeforeLeave(el) {},\n\n    // called when the leave transition starts.\n    // use this to start the leaving animation.\n    onLeave(el, done) {\n      // call the done callback to indicate transition end\n      // optional if used in combination with CSS\n      done()\n    },\n\n    // called when the leave transition has finished and the\n    // element has been removed from the DOM.\n    onAfterLeave(el) {},\n\n    // only available with v-show transitions\n    onLeaveCancelled(el) {}\n  }\n}"
      }
    ],
    "relevance": 0.755
  },
  {
    "codeTitle": "Implementing Lazy Loading with Dynamic Import in JavaScript",
    "codeDescription": "Demonstrates how to use dynamic import for lazy loading modules, which can be used to split code into separate chunks for on-demand loading.",
    "codeLanguage": "javascript",
    "codeTokens": 51,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/best-practices/performance.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Performance Optimization Guide",
    "codeList": [
      {
        "language": "javascript",
        "code": "function loadLazy() {\n  return import('./lazy.js')\n}"
      }
    ],
    "relevance": 0.755
  },
  {
    "codeTitle": "Incorrect Asynchronous Lifecycle Hook Registration",
    "codeDescription": "Example showing an incorrect way to register lifecycle hooks asynchronously, which won't work because hooks must be registered synchronously during component setup.",
    "codeLanguage": "javascript",
    "codeTokens": 61,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/lifecycle.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Component Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "setTimeout(() => {\n  onMounted(() => {\n    // this won't work.\n  })\n}, 100)"
      }
    ],
    "relevance": 0.755
  },
  {
    "codeTitle": "Handling Input Event in Composition API (Vue.js)",
    "codeDescription": "This snippet shows how to handle the input event using the Composition API in Vue.js. It updates the text ref with the input's current value.",
    "codeLanguage": "javascript",
    "codeTokens": 74,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-5/description.md#2025-04-08_snippet_2",
    "pageTitle": "Form Bindings in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "function onInput(e) {\n  // a v-on handler receives the native DOM event\n  // as the argument.\n  text.value = e.target.value\n}"
      }
    ],
    "relevance": 0.755
  },
  {
    "codeTitle": "Defining Component Template Option in Vue.js",
    "codeDescription": "This snippet shows the TypeScript interface for the template option in Vue.js component options. The template option accepts a string that represents the component's template.",
    "codeLanguage": "typescript",
    "codeTokens": 50,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-rendering.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Component Rendering Options",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  template?: string\n}"
      }
    ],
    "relevance": 0.755
  },
  {
    "codeTitle": "Multi-Root Component with $attrs for Class Inheritance in Vue.js",
    "codeDescription": "Demonstrates how to specify which element receives the class bindings in a multi-root component using $attrs.",
    "codeLanguage": "vue-html",
    "codeTokens": 61,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/class-and-style.md#2025-04-08_snippet_17",
    "pageTitle": "Vue.js Class and Style Bindings",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- MyComponent template using $attrs -->\n<p :class=\"$attrs.class\">Hi!</p>\n<span>This is a child component</span>"
      }
    ],
    "relevance": 0.755
  },
  {
    "codeTitle": "Configuring Compiler Options for Vue.js Components",
    "codeDescription": "This snippet shows the TypeScript interface for compiler options in Vue.js components. It includes options for custom elements, whitespace handling, delimiters, and comments preservation.",
    "codeLanguage": "typescript",
    "codeTokens": 112,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-rendering.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Component Rendering Options",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  compilerOptions?: {\n    isCustomElement?: (tag: string) => boolean\n    whitespace?: 'condense' | 'preserve' // default: 'condense'\n    delimiters?: [string, string] // default: ['{{', '}}']\n    comments?: boolean // default: false\n  }\n}"
      }
    ],
    "relevance": 0.755
  },
  {
    "codeTitle": "Provide with Component State",
    "codeDescription": "Example demonstrating how to provide component state using a function-based provide implementation.",
    "codeLanguage": "javascript",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#2025-04-08_snippet_2",
    "pageTitle": "Vue.js Component Options Documentation",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      msg: 'foo'\n    }\n  }\n  provide() {\n    return {\n      msg: this.msg\n    }\n  }\n}"
      }
    ],
    "relevance": 0.755
  },
  {
    "codeTitle": "Using v-bind() in CSS with Options API",
    "codeDescription": "Shows how to use the v-bind CSS function to link CSS values to dynamic component state using the Options API. This allows for dynamic styling based on component data.",
    "codeLanguage": "vue",
    "codeTokens": 103,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/sfc-css-features.md#2025-04-08_snippet_5",
    "pageTitle": "SFC CSS Features in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<template>\n  <div class=\"text\">hello</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      color: 'red'\n    }\n  }\n}\n</script>\n\n<style>\n.text {\n  color: v-bind(color);\n}\n</style>"
      }
    ],
    "relevance": 0.754
  },
  {
    "codeTitle": "Splitting Complex Computed Properties in Vue.js",
    "codeDescription": "Demonstrates how to break down complex computed properties into simpler, more focused properties for improved readability and maintainability.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_21",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "javascript",
        "code": "computed: {\n  basePrice() {\n    return this.manufactureCost / (1 - this.profitMargin)\n  },\n\n  discount() {\n    return this.basePrice * (this.discountPercent || 0)\n  },\n\n  finalPrice() {\n    return this.basePrice - this.discount\n  }\n}"
      }
    ],
    "relevance": 0.753
  },
  {
    "codeTitle": "Type Definition for directives Option in Vue.js",
    "codeDescription": "TypeScript interface definition for the directives option, which registers custom directives to be made available to the component instance.",
    "codeLanguage": "ts",
    "codeTokens": 50,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#2025-04-08_snippet_6",
    "pageTitle": "Vue.js Component Options: Miscellaneous Configuration",
    "codeList": [
      {
        "language": "ts",
        "code": "interface ComponentOptions {\n  directives?: { [key: string]: Directive }\n}"
      }
    ],
    "relevance": 0.752
  },
  {
    "codeTitle": "Injecting Data with Options API in Vue.js",
    "codeDescription": "Shows how to inject data provided by an ancestor component using the inject option in the Options API. It includes examples of accessing injected properties in created() hook and data().",
    "codeLanguage": "javascript",
    "codeTokens": 71,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#2025-04-08_snippet_5",
    "pageTitle": "Provide/Inject in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  inject: ['message'],\n  created() {\n    console.log(this.message) // injected value\n  }\n}"
      },
      {
        "language": "javascript",
        "code": "export default {\n  inject: ['message'],\n  data() {\n    return {\n      // initial data based on injected value\n      fullMessage: this.message\n    }\n  }\n}"
      }
    ],
    "relevance": 0.751
  },
  {
    "codeTitle": "Defining pipeToNodeWritable Function Type in TypeScript",
    "codeDescription": "Type definition for the pipeToNodeWritable function, which renders a Vue app and pipes it to an existing Node.js Writable stream instance.",
    "codeLanguage": "typescript",
    "codeTokens": 71,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/ssr.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Server-Side Rendering API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function pipeToNodeWritable(\n  input: App | VNode,\n  context: SSRContext = {},\n  writable: Writable\n): void"
      }
    ],
    "relevance": 0.75
  },
  {
    "codeTitle": "Disabling CSS Transitions for JavaScript-only Animations",
    "codeDescription": "This snippet shows how to disable automatic CSS transition detection when using JavaScript-only transitions in Vue. It adds the :css=\"false\" prop to the Transition component.",
    "codeLanguage": "vue",
    "codeTokens": 60,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_14",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<Transition\n  ...\n  :css=\"false\"\n>\n  ...\n</Transition>"
      }
    ],
    "relevance": 0.75
  },
  {
    "codeTitle": "Providing Data with Symbol Key in Vue.js Options API",
    "codeDescription": "This snippet shows how to use a Symbol as an injection key when providing data in a Vue.js component using the Options API. It imports the Symbol from a separate file and uses it in the provide method.",
    "codeLanguage": "javascript",
    "codeTokens": 99,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#2025-04-08_snippet_16",
    "pageTitle": "Provide/Inject in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "// in provider component\nimport { myInjectionKey } from './keys.js'\n\nexport default {\n  provide() {\n    return {\n      [myInjectionKey]: {\n        /* data to provide */\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.75
  },
  {
    "codeTitle": "Defining shallowRef Type in TypeScript",
    "codeDescription": "Type definition for the shallowRef function that creates a shallow reactive reference. Unlike ref(), the inner value is stored and exposed as-is without deep reactivity.",
    "codeLanguage": "typescript",
    "codeTokens": 71,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-advanced.md#2025-04-08_snippet_0",
    "pageTitle": "Vue.js Reactivity API - Advanced",
    "codeList": [
      {
        "language": "typescript",
        "code": "function shallowRef<T>(value: T): ShallowRef<T>\n\ninterface ShallowRef<T> {\n  value: T\n}"
      }
    ],
    "relevance": 0.75
  },
  {
    "codeTitle": "Declaring a Template Ref in Vue.js HTML",
    "codeDescription": "This snippet shows how to declare a template ref on a paragraph element in Vue.js HTML. The ref attribute is used to create a reference to the DOM element.",
    "codeLanguage": "vue-html",
    "codeTokens": 58,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-9/description.md#2025-04-08_snippet_0",
    "pageTitle": "Lifecycle and Template Refs in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<p ref=\"pElementRef\">hello</p>"
      }
    ],
    "relevance": 0.75
  },
  {
    "codeTitle": "Defining a Custom Directive in Vue.js Composition API",
    "codeDescription": "This snippet demonstrates how to define a custom directive 'v-highlight' using the Composition API in Vue.js. The directive adds a CSS class to the element when it's mounted.",
    "codeLanguage": "vue",
    "codeTokens": 103,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#2025-04-08_snippet_0",
    "pageTitle": "Custom Directives in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\n// enables v-highlight in templates\nconst vHighlight = {\n  mounted: (el) => {\n    el.classList.add('is-highlight')\n  }\n}\n</script>\n\n<template>\n  <p v-highlight>This sentence is important!</p>\n</template>"
      }
    ],
    "relevance": 0.75
  },
  {
    "codeTitle": "Consistent Vue.js Directive Shorthand Usage (Good Practice)",
    "codeDescription": "These snippets demonstrate consistent usage of Vue.js directive shorthands, using either all shorthands or all full syntax in the template. This practice improves readability and maintainability.",
    "codeLanguage": "vue-html",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-strongly-recommended.md#2025-04-08_snippet_27",
    "pageTitle": "Vue.js Style Guide - Priority B Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<input\n  :value=\"newTodoText\"\n  :placeholder=\"newTodoInstructions\"\n>"
      },
      {
        "language": "vue-html",
        "code": "<input\n  v-bind:value=\"newTodoText\"\n  v-bind:placeholder=\"newTodoInstructions\"\n>"
      },
      {
        "language": "vue-html",
        "code": "<input\n  @input=\"onInput\"\n  @focus=\"onFocus\"\n>"
      },
      {
        "language": "vue-html",
        "code": "<input\n  v-on:input=\"onInput\"\n  v-on:focus=\"onFocus\"\n>"
      },
      {
        "language": "vue-html",
        "code": "<template v-slot:header>\n  <h1>Here might be a page title</h1>\n</template>\n\n<template v-slot:footer>\n  <p>Here's some contact info</p>\n</template>"
      },
      {
        "language": "vue-html",
        "code": "<template #header>\n  <h1>Here might be a page title</h1>\n</template>\n\n<template #footer>\n  <p>Here's some contact info</p>\n</template>"
      }
    ],
    "relevance": 0.75
  },
  {
    "codeTitle": "Direct Watching of Reactive Object in Vue.js",
    "codeDescription": "Example showing how to directly watch a reactive object in Vue.js, which automatically enables deep watching to detect mutations at any level within the object.",
    "codeLanguage": "js",
    "codeTokens": 65,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/reactivity-core.md#2025-04-08_snippet_15",
    "pageTitle": "Reactivity API Core Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "const state = reactive({ count: 0 })\nwatch(state, () => {\n  /* triggers on deep mutation to state */\n})"
      }
    ],
    "relevance": 0.75
  },
  {
    "codeTitle": "Adding Fallback Content to Slots in Vue.js",
    "codeDescription": "Demonstrates how to provide fallback content for a slot in Vue.js. This content will be displayed if the parent component doesn't pass any slot content.",
    "codeLanguage": "vue-html",
    "codeTokens": 48,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/tutorial/src/step-14/description.md#2025-04-08_snippet_2",
    "pageTitle": "Slots in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<slot>Fallback content</slot>"
      }
    ],
    "relevance": 0.748
  },
  {
    "codeTitle": "Type Definition for inheritAttrs Option in Vue.js",
    "codeDescription": "TypeScript interface definition for the inheritAttrs option, which controls whether default component attribute fallthrough behavior should be enabled.",
    "codeLanguage": "ts",
    "codeTokens": 50,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-misc.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Component Options: Miscellaneous Configuration",
    "codeList": [
      {
        "language": "ts",
        "code": "interface ComponentOptions {\n  inheritAttrs?: boolean // default: true\n}"
      }
    ],
    "relevance": 0.748
  },
  {
    "codeTitle": "Element Selectors with Scoped Styles - Good Practice",
    "codeDescription": "Shows the recommended approach using class selectors in scoped styles for better performance.",
    "codeLanguage": "vue-html",
    "codeTokens": 60,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Priority D Style Guide Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<template>\n  <button class=\"btn btn-close\">×</button>\n</template>\n\n<style scoped>\n.btn-close {\n  background-color: red;\n}\n</style>"
      }
    ],
    "relevance": 0.748
  },
  {
    "codeTitle": "Defining useSSRContext Function Type in TypeScript",
    "codeDescription": "Type definition for the useSSRContext function, which retrieves the SSR context object during server-side rendering.",
    "codeLanguage": "typescript",
    "codeTokens": 51,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/ssr.md#2025-04-08_snippet_13",
    "pageTitle": "Vue.js Server-Side Rendering API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function useSSRContext<T = Record<string, any>>(): T | undefined"
      }
    ],
    "relevance": 0.745
  },
  {
    "codeTitle": "Watch with Side Effect Cleanup - Composition API",
    "codeDescription": "Example showing how to handle cleanup of side effects in watchers using AbortController for API requests.",
    "codeLanguage": "javascript",
    "codeTokens": 102,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#2025-04-08_snippet_17",
    "pageTitle": "Vue.js Watchers",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { watch, onWatcherCleanup } from 'vue'\n\nwatch(id, (newId) => {\n  const controller = new AbortController()\n\n  fetch(`/api/${newId}`, { signal: controller.signal }).then(() => {\n    // callback logic\n  })\n\n  onWatcherCleanup(() => {\n    // abort stale request\n    controller.abort()\n  })\n})"
      }
    ],
    "relevance": 0.745
  },
  {
    "codeTitle": "Creating a Vue Application with In-DOM Template",
    "codeDescription": "Shows how to create a Vue application that uses an in-DOM template. Vue will automatically use the container's innerHTML as the template if the root component doesn't have a template option.",
    "codeLanguage": "javascript",
    "codeTokens": 86,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#2025-04-08_snippet_5",
    "pageTitle": "Creating a Vue Application",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { createApp } from 'vue'\n\nconst app = createApp({\n  data() {\n    return {\n      count: 0\n    }\n  }\n})\n\napp.mount('#app')"
      }
    ],
    "relevance": 0.745
  },
  {
    "codeTitle": "Incorrect Usage of Scoped Slots in Vue.js (Non-compiling Example)",
    "codeDescription": "Demonstrates an incorrect approach to mixing default scoped slots with named slots that won't compile due to ambiguity in the scope of props.",
    "codeLanguage": "vue-html",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/slots.md#2025-04-08_snippet_19",
    "pageTitle": "Vue.js Slots Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<!-- This template won't compile -->\n<MyComponent v-slot=\"{ message }\">\n  <p>{{ message }}</p>\n  <template #footer>\n    <!-- message belongs to the default slot, and is not available here -->\n    <p>{{ message }}</p>\n  </template>\n</MyComponent>"
      }
    ],
    "relevance": 0.745
  },
  {
    "codeTitle": "Creating Reactive Object with Nested Array in Vue Composition API",
    "codeDescription": "This snippet demonstrates how to create a reactive object with a nested array using the Composition API in Vue.js. It sets up an author object with a name and a list of books.",
    "codeLanguage": "javascript",
    "codeTokens": 94,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#2025-04-08_snippet_1",
    "pageTitle": "Computed Properties in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "const author = reactive({\n  name: 'John Doe',\n  books: [\n    'Vue 2 - Advanced Guide',\n    'Vue 3 - Basic Guide',\n    'Vue 4 - The Mystery'\n  ]\n})"
      }
    ],
    "relevance": 0.745
  },
  {
    "codeTitle": "Typing computed() in Vue.js with TypeScript",
    "codeDescription": "Shows how to type computed properties with inferred and explicit types in Vue.js using TypeScript.",
    "codeLanguage": "typescript",
    "codeTokens": 93,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#2025-04-08_snippet_13",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "import { ref, computed } from 'vue'\n\nconst count = ref(0)\n\n// inferred type: ComputedRef<number>\nconst double = computed(() => count.value * 2)\n\n// explicit type\nconst double = computed<number>(() => {\n  // type error if this doesn't return a number\n})"
      }
    ],
    "relevance": 0.745
  },
  {
    "codeTitle": "Defining deactivated Lifecycle Hook in Vue.js Component (TypeScript)",
    "codeDescription": "Type definition for the deactivated lifecycle hook in Vue.js components. This hook is called after the component instance is removed from the DOM as part of a tree cached by <KeepAlive>.",
    "codeLanguage": "typescript",
    "codeTokens": 63,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-lifecycle.md#2025-04-08_snippet_12",
    "pageTitle": "Vue.js Lifecycle Hooks Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  deactivated?(this: ComponentPublicInstance): void\n}"
      }
    ],
    "relevance": 0.745
  },
  {
    "codeTitle": "Using Function Shorthand for Custom Directives in Vue.js",
    "codeDescription": "This snippet demonstrates how to use the function shorthand syntax for defining a custom directive in Vue.js. This is useful when the directive only needs to define behavior for the 'mounted' and 'updated' hooks.",
    "codeLanguage": "javascript",
    "codeTokens": 62,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/reusability/custom-directives.md#2025-04-08_snippet_6",
    "pageTitle": "Custom Directives in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<div v-color=\"color\"></div>"
      },
      {
        "language": "javascript",
        "code": "app.directive('color', (el, binding) => {\n  // this will be called for both `mounted` and `updated`\n  el.style.color = binding.value\n})"
      }
    ],
    "relevance": 0.745
  },
  {
    "codeTitle": "Parent-Child Communication - Good Practice (Composition API)",
    "codeDescription": "Demonstrates proper parent-child component communication in Composition API using props and emits.",
    "codeLanguage": "vue",
    "codeTokens": 92,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-use-with-caution.md#2025-04-08_snippet_5",
    "pageTitle": "Vue.js Priority D Style Guide Rules",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\ndefineProps({\n  todo: {\n    type: Object,\n    required: true\n  }\n})\n\nconst emit = defineEmits(['input'])\n</script>\n\n<template>\n  <input :value=\"todo.text\" @input=\"emit('input', $event.target.value)\" />\n</template>"
      },
      {
        "language": "vue",
        "code": "<script setup>\ndefineProps({\n  todo: {\n    type: Object,\n    required: true\n  }\n})\n\nconst emit = defineEmits(['delete'])\n</script>\n\n<template>\n  <span>\n    {{ todo.text }}\n    <button @click=\"emit('delete')\">×</button>\n  </span>\n</template>"
      }
    ],
    "relevance": 0.745
  },
  {
    "codeTitle": "Modal Component Implementation with Composition API",
    "codeDescription": "A Vue component implementing a modal dialog using the Composition API. The modal uses fixed positioning for layout but could face z-index and transform-related issues when nested deeply in the DOM.",
    "codeLanguage": "vue",
    "codeTokens": 176,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/teleport.md#2025-04-08_snippet_1",
    "pageTitle": "Vue.js Teleport Component",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nimport { ref } from 'vue'\n\nconst open = ref(false)\n</script>\n\n<template>\n  <button @click=\"open = true\">Open Modal</button>\n\n  <div v-if=\"open\" class=\"modal\">\n    <p>Hello from the modal!</p>\n    <button @click=\"open = false\">Close</button>\n  </div>\n</template>\n\n<style scoped>\n.modal {\n  position: fixed;\n  z-index: 999;\n  top: 20%;\n  left: 50%;\n  width: 300px;\n  margin-left: -150px;\n}\n</style>"
      }
    ],
    "relevance": 0.745
  },
  {
    "codeTitle": "Bad Implementation: Non-scoped Component Styling in Vue.js",
    "codeDescription": "Example of incorrectly implementing component styling without proper scoping, which can lead to style conflicts across the application.",
    "codeLanguage": "vue-html",
    "codeTokens": 66,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#2025-04-08_snippet_15",
    "pageTitle": "Vue.js Style Guide: Essential Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<template>\n  <button class=\"btn btn-close\">×</button>\n</template>\n\n<style>\n.btn-close {\n  background-color: red;\n}\n</style>"
      }
    ],
    "relevance": 0.743
  },
  {
    "codeTitle": "Creating a Writable Computed Property in Vue Options API",
    "codeDescription": "This snippet shows how to create a writable computed property in the Options API of Vue.js. It defines a computed property with both a getter and a setter for a full name.",
    "codeLanguage": "javascript",
    "codeTokens": 145,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/computed.md#2025-04-08_snippet_6",
    "pageTitle": "Computed Properties in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  data() {\n    return {\n      firstName: 'John',\n      lastName: 'Doe'\n    }\n  },\n  computed: {\n    fullName: {\n      // getter\n      get() {\n        return this.firstName + ' ' + this.lastName\n      },\n      // setter\n      set(newValue) {\n        // Note: we are using destructuring assignment syntax here.\n        [this.firstName, this.lastName] = newValue.split(' ')\n      }\n    }\n  }\n}"
      }
    ],
    "relevance": 0.742
  },
  {
    "codeTitle": "TypeScript Interface Definition for Inject Option",
    "codeDescription": "Type definition for the inject option, specifying how components can declare properties to inject from ancestor providers.",
    "codeLanguage": "typescript",
    "codeTokens": 90,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/options-composition.md#2025-04-08_snippet_3",
    "pageTitle": "Vue.js Component Options Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "interface ComponentOptions {\n  inject?: ArrayInjectOptions | ObjectInjectOptions\n}\n\ntype ArrayInjectOptions = string[]\n\ntype ObjectInjectOptions = {\n  [key: string | symbol]:\n    | string\n    | symbol\n    | { from?: string | symbol; default?: any }\n}"
      }
    ],
    "relevance": 0.742
  },
  {
    "codeTitle": "TypeScript Definition for hasInjectionContext()",
    "codeDescription": "Type definition for the hasInjectionContext() utility function that checks if inject() can be safely used.",
    "codeLanguage": "typescript",
    "codeTokens": 37,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/composition-api-dependency-injection.md#2025-04-08_snippet_4",
    "pageTitle": "Vue.js Dependency Injection Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function hasInjectionContext(): boolean"
      }
    ],
    "relevance": 0.74
  },
  {
    "codeTitle": "Explicit Deep Watcher with Getter in Composition API",
    "codeDescription": "Demonstrates how to force a getter-based watcher to become a deep watcher using the deep option, allowing it to detect nested property changes.",
    "codeLanguage": "javascript",
    "codeTokens": 92,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#2025-04-08_snippet_10",
    "pageTitle": "Vue.js Watchers",
    "codeList": [
      {
        "language": "javascript",
        "code": "watch(\n  () => state.someObject,\n  (newValue, oldValue) => {\n    // Note: `newValue` will be equal to `oldValue` here\n    // *unless* state.someObject has been replaced\n  },\n  { deep: true }\n)"
      }
    ],
    "relevance": 0.74
  },
  {
    "codeTitle": "Setting Injection Default Values in Vue.js Options API",
    "codeDescription": "Demonstrates how to set default values for injected properties in the Options API, including using a factory function for non-primitive or unique values.",
    "codeLanguage": "javascript",
    "codeTokens": 145,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/provide-inject.md#2025-04-08_snippet_8",
    "pageTitle": "Provide/Inject in Vue.js",
    "codeList": [
      {
        "language": "javascript",
        "code": "export default {\n  // object syntax is required\n  // when declaring default values for injections\n  inject: {\n    message: {\n      from: 'message', // this is optional if using the same key for injection\n      default: 'default value'\n    },\n    user: {\n      // use a factory function for non-primitive values that are expensive\n      // to create, or ones that should be unique per component instance.\n      default: () => ({ name: 'John' })\n    }\n  }\n}"
      }
    ],
    "relevance": 0.74
  },
  {
    "codeTitle": "Defining pipeToWebWritable Function Type in TypeScript",
    "codeDescription": "Type definition for the pipeToWebWritable function, which renders a Vue app and pipes it to an existing Web WritableStream instance.",
    "codeLanguage": "typescript",
    "codeTokens": 71,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/ssr.md#2025-04-08_snippet_9",
    "pageTitle": "Vue.js Server-Side Rendering API Documentation",
    "codeList": [
      {
        "language": "typescript",
        "code": "function pipeToWebWritable(\n  input: App | VNode,\n  context: SSRContext = {},\n  writable: WritableStream\n): void"
      }
    ],
    "relevance": 0.74
  },
  {
    "codeTitle": "String Injection Keys with TypeScript in Vue.js",
    "codeDescription": "Shows how to type inject values when using string keys, requiring explicit type declaration via generic type argument.",
    "codeLanguage": "typescript",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/typescript/composition-api.md#2025-04-08_snippet_16",
    "pageTitle": "TypeScript with Composition API in Vue.js",
    "codeList": [
      {
        "language": "typescript",
        "code": "const foo = inject<string>('foo') // type: string | undefined"
      }
    ],
    "relevance": 0.74
  },
  {
    "codeTitle": "Implementing JavaScript Hooks for Vue Transitions (Composition API)",
    "codeDescription": "This snippet shows the implementation of JavaScript hooks for Vue transitions using the Composition API. It defines functions for each transition lifecycle event.",
    "codeLanguage": "javascript",
    "codeTokens": 275,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/built-ins/transition.md#2025-04-08_snippet_12",
    "pageTitle": "Vue.js Transition Component Documentation",
    "codeList": [
      {
        "language": "js",
        "code": "// called before the element is inserted into the DOM.\n// use this to set the \"enter-from\" state of the element\nfunction onBeforeEnter(el) {}\n\n// called one frame after the element is inserted.\n// use this to start the entering animation.\nfunction onEnter(el, done) {\n  // call the done callback to indicate transition end\n  // optional if used in combination with CSS\n  done()\n}\n\n// called when the enter transition has finished.\nfunction onAfterEnter(el) {}\n\n// called when the enter transition is cancelled before completion.\nfunction onEnterCancelled(el) {}\n\n// called before the leave hook.\n// Most of the time, you should just use the leave hook\nfunction onBeforeLeave(el) {}\n\n// called when the leave transition starts.\n// use this to start the leaving animation.\nfunction onLeave(el, done) {\n  // call the done callback to indicate transition end\n  // optional if used in combination with CSS\n  done()\n}\n\n// called when the leave transition has finished and the\n// element has been removed from the DOM.\nfunction onAfterLeave(el) {}\n\n// only available with v-show transitions\nfunction onLeaveCancelled(el) {}"
      }
    ],
    "relevance": 0.74
  },
  {
    "codeTitle": "Handling v-model Modifiers in Composition API (Vue 3.4+)",
    "codeDescription": "Implementation of a component that handles custom v-model modifiers using the Composition API with destructuring of defineModel() return value.",
    "codeLanguage": "vue",
    "codeTokens": 84,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/v-model.md#2025-04-08_snippet_10",
    "pageTitle": "Vue.js Component v-model Implementation Guide",
    "codeList": [
      {
        "language": "vue",
        "code": "<script setup>\nconst [model, modifiers] = defineModel()\n\nconsole.log(modifiers) // { capitalize: true }\n</script>\n\n<template>\n  <input type=\"text\" v-model=\"model\" />\n</template>"
      }
    ],
    "relevance": 0.74
  },
  {
    "codeTitle": "Using is Attribute for Dynamic Components in Vue.js",
    "codeDescription": "Shows how to use the is attribute to render a Vue component instead of a native HTML element. This is useful when working with in-DOM templates that have restrictions on valid child elements.",
    "codeLanguage": "vue-html",
    "codeTokens": 69,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/built-in-special-attributes.md#2025-04-08_snippet_5",
    "pageTitle": "Built-in Special Attributes in Vue.js",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<table>\n  <tr is=\"vue:my-row-component\"></tr>\n</table>"
      }
    ],
    "relevance": 0.739
  },
  {
    "codeTitle": "Accessing Vue Version in JavaScript",
    "codeDescription": "Demonstrates how to import and log the current version of Vue.",
    "codeLanguage": "javascript",
    "codeTokens": 35,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/api/general.md#2025-04-08_snippet_0",
    "pageTitle": "Global API: General",
    "codeList": [
      {
        "language": "javascript",
        "code": "import { version } from 'vue'\n\nconsole.log(version)"
      }
    ],
    "relevance": 0.738
  },
  {
    "codeTitle": "Passing Static String Props",
    "codeDescription": "Example showing how to pass a static string value as a prop to a Vue component. This is the simplest form of prop passing.",
    "codeLanguage": "vue-html",
    "codeTokens": 47,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/props.md#2025-04-08_snippet_16",
    "pageTitle": "Vue.js Props Documentation",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<BlogPost title=\"My journey with Vue\" />"
      }
    ],
    "relevance": 0.736
  },
  {
    "codeTitle": "Good Implementation: CSS Modules for Component Styling in Vue.js",
    "codeDescription": "Example of implementing component styling using CSS modules, which provides local scope for CSS classes through programmatic class bindings.",
    "codeLanguage": "vue-html",
    "codeTokens": 96,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/style-guide/rules-essential.md#2025-04-08_snippet_17",
    "pageTitle": "Vue.js Style Guide: Essential Rules",
    "codeList": [
      {
        "language": "vue-html",
        "code": "<template>\n  <button :class=\"[$style.button, $style.buttonClose]\">×</button>\n</template>\n\n<!-- Using CSS modules -->\n<style module>\n.button {\n  border: none;\n  border-radius: 2px;\n}\n\n.buttonClose {\n  background-color: red;\n}\n</style>"
      }
    ],
    "relevance": 0.735
  },
  {
    "codeTitle": "Implicit Deep Watcher in Composition API",
    "codeDescription": "Demonstrates how watching a reactive object directly creates an implicit deep watcher that triggers on all nested mutations, with a note about value comparison.",
    "codeLanguage": "javascript",
    "codeTokens": 97,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/watchers.md#2025-04-08_snippet_8",
    "pageTitle": "Vue.js Watchers",
    "codeList": [
      {
        "language": "javascript",
        "code": "const obj = reactive({ count: 0 })\n\nwatch(obj, (newValue, oldValue) => {\n  // fires on nested property mutations\n  // Note: `newValue` will be equal to `oldValue` here\n  // because they both point to the same object!\n})\n\nobj.count++"
      }
    ],
    "relevance": 0.735
  },
  {
    "codeTitle": "Configuring Error Handler for Vue Application",
    "codeDescription": "Demonstrates how to configure an app-level error handler through the config object, which captures errors from all descendant components in the application.",
    "codeLanguage": "javascript",
    "codeTokens": 52,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/essentials/application.md#2025-04-08_snippet_6",
    "pageTitle": "Creating a Vue Application",
    "codeList": [
      {
        "language": "javascript",
        "code": "app.config.errorHandler = (err) => {\n  /* handle error */\n}"
      }
    ],
    "relevance": 0.735
  },
  {
    "codeTitle": "Registering Async Component Locally in Vue.js (Options API)",
    "codeDescription": "Shows how to register an async component locally using the Options API. The async component is defined in the components option of the component definition.",
    "codeLanguage": "vue",
    "codeTokens": 95,
    "codeId": "https://github.com/vuejs/docs/blob/main/src/guide/components/async.md#2025-04-08_snippet_3",
    "pageTitle": "Async Components in Vue.js",
    "codeList": [
      {
        "language": "vue",
        "code": "<script>\nimport { defineAsyncComponent } from 'vue'\n\nexport default {\n  components: {\n    AdminPage: defineAsyncComponent(() =>\n      import('./components/AdminPageComponent.vue')\n    )\n  }\n}\n</script>\n\n<template>\n  <AdminPage />\n</template>"
      }
    ],
    "relevance": 0.735
  }
]